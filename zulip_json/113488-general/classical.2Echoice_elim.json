[
    {
        "content": "<p>I had a brain freeze and couldn't remember the name of the function <code>(∃ (x : α), p x) → α</code>. I tried <code>library_search</code>:</p>\n<div class=\"codehilite\"><pre><span></span>example : Π {α : Sort u} {p : α → Prop}, (∃ (x : α), p x) → α := by library_search -- fails\n</pre></div>\n\n\n<p>but it failed! Is this a bug in <code>library_search</code> or is the issue that it's not a theorem? With my tail between my legs I opened up TPIL for the first time in a long time, and went to the section on choice. I learnt <code>classical.choice : Π {α : Sort u_1}, nonempty α → α</code> and thought \"oh I can take it from here\". I used <code>library_search</code> to discover  <br>\n<code>nonempty_of_exists : (∃ (x : α), p x) → nonempty α</code>and so I just defined my function to be <code>classical.choice (nonempty_of_exists h)</code> and moved on.</p>\n<p>A bit later I needed that the <code>x</code> provided by my function actually satisfied <code>p x</code>, and I took one look at that problem and thought \"Oh -- that's <code>classical.some_spec</code>\". I <em>then</em> remembered that the function I wanted but couldn't find was called <code>classical.some</code> and I figured that this would be no problem because the definition of <code>classical.some</code> will boil down to what I wrote. So I tried to prove this:</p>\n<div class=\"codehilite\"><pre><span></span>example (α : Type) (p : α → Prop) (h : (∃ (x : α), p x)) : classical.choice (nonempty_of_exists h) = classical.some h := sorry\n</pre></div>\n\n\n<p>with <code>rfl</code>, but it didn't work! Here is me unwinding what went wrong:</p>\n<div class=\"codehilite\"><pre><span></span>set_option pp.proofs true\nexample (α : Type) (p : α → Prop) (h : (∃ (x : α), p x)) : classical.choice (nonempty_of_exists h) = classical.some h :=\nbegin\n  cases h with x hx,\n  unfold classical.some,\n  delta classical.indefinite_description,\n  dsimp, -- changes the proofs!\n  delta id_rhs,\n  show classical.choice (nonempty_of_exists (Exists.intro x hx)) =\n       (classical.choice (nonempty.intro (⟨x, hx⟩ : {d : α // p d}))).val,\n  sorry\nend\n</pre></div>\n\n\n<p>The problem is that <code>classical.choice</code> is not as functorial as you'd want -- I guess there is no eliminator. The goal ended up being</p>\n<div class=\"codehilite\"><pre><span></span>classical.choice (nonempty.intro x) = (classical.choice (nonempty.intro ⟨x, hx⟩)).val\n</pre></div>\n\n\n<p>This would be provable if we could prove this:</p>\n<div class=\"codehilite\"><pre><span></span>theorem classical.choice_elim (α : Type) (x : α) : classical.choice (nonempty.intro x) = x := sorry\n</pre></div>\n\n\n<p>But that can't be proved in Lean, right? Because classical.choice is just an axiom so you can't prove anything about it which doesn't boil down to <code>rfl</code> in some sense. But OTOH the result is true in some funny sense, because the VM mumble mumble I don't know what I'm talking about stores it as x internally but the kernel forgets it or something. This is at the boundary of my understanding (I don't really understand the VM or the kernel but perhaps this example would help me understand them).  </p>\n<p>I was wondering whether it would be \"safe\" to add <code>classical.choice (nonempty.intro x) = x</code> as an axiom to Lean? Or can it somehow already be proved and I'm barking up the wrong tree?</p>",
        "id": 176097414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568898809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">kevin_ax</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">uh_oh_kevin</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">kevin_ax</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">kevin_ax</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₀</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176098604,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568899603
    },
    {
        "content": "<p>:(</p>",
        "id": 176098693,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568899661
    },
    {
        "content": "<p>Propext makes the whole world blow up when you add <code>kevin_ax</code></p>",
        "id": 176098873,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568899765
    },
    {
        "content": "<p>nooo!</p>",
        "id": 176099544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568900141
    },
    {
        "content": "<p>but it's true in the VM!</p>",
        "id": 176099551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568900147
    },
    {
        "content": "<p>or something</p>",
        "id": 176099556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568900150
    },
    {
        "content": "<p>Could you have this without a contradiction?</p>",
        "id": 176100161,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568900506
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">choice_commutes</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 176100164,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568900509
    },
    {
        "content": "<p>I'm very afraid</p>",
        "id": 176100312,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568900578
    },
    {
        "content": "<p>That's a negative</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">uh_oh_keeley</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choice_commutes</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hv</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choice_commutes</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176101268,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568901170
    },
    {
        "content": "<p>all hope is lost Kevin</p>",
        "id": 176101274,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568901177
    },
    {
        "content": "<p>I can't deal with concepts that aren't functorial.</p>",
        "id": 176103083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568902206
    },
    {
        "content": "<p>you can imagine why the HoTT people have trouble with choice...</p>",
        "id": 176103131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568902252
    },
    {
        "content": "<p>I would argue you should \"never\" use <code>choice</code></p>",
        "id": 176103941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568902748
    },
    {
        "content": "<p>where \"never\" = of course there are exceptions</p>",
        "id": 176103960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568902759
    },
    {
        "content": "<p>Except as <code>unique_choice</code>, which I guess only exists in my head</p>",
        "id": 176104087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568902836
    },
    {
        "content": "<p>How do you avoid it in the following situation (a simplified version of where I was):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">next_to</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">([</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_to</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">next_to</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">next_to</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨-</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 176104596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568903158
    },
    {
        "content": "<p>I guess that falls under the category <code>unique_choice</code>.</p>",
        "id": 176104852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568903316
    },
    {
        "content": "<p>I need to import Reid's head.</p>",
        "id": 176105013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568903405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">next_to</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">([</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_to</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">next_to</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">next_to</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"bp\">⟩;</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq_neg_iff_eq_neg</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hx₂</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 176105630,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568903821
    },
    {
        "content": "<p>Although I would be tempted to define <code>next_to</code> as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">next_to</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">next_to</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">next_to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 176105942,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568904017
    },
    {
        "content": "<p>You're proving a proposition and you only need to deconstruct a single existential, so as Chris says you don't need to use choice at all.</p>",
        "id": 176106726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568904535
    },
    {
        "content": "<p>Regarding the definition: I went for that because that's what I was given in <a href=\"https://competition.isabelle.systems/competitions/contest/14/tasks/2/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/14/tasks/2/\">https://competition.isabelle.systems/competitions/contest/14/tasks/2/</a> . I agree another definition would be better for Lean.</p>",
        "id": 176109202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568905936
    },
    {
        "content": "<p>I had a proof of what I needed in tactic mode and was considering transferring it to term mode, but then ran into this issue. I note that Chris' solution also uses tactics.</p>",
        "id": 176109276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568905989
    },
    {
        "content": "<p>Is there a way of defeating the GOAL notation by defining custom notation which includes a space in the token like <code>GOAL </code> so it doesn't clash with <code>GOAL</code>?</p>",
        "id": 176109428,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568906089
    },
    {
        "content": "<p>I don't think you can declare notations with embedded spaces</p>",
        "id": 176113375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568908392
    },
    {
        "content": "<p>I'm quite sure that spaces in notation are only hints for the printer, not for the parser. For example <code> + </code> is declared with spaces around it, but writing <code>a+b</code> still parses correctly.</p>",
        "id": 176163309,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568952114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">GOAL</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">GOAL</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">GOAL</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span>ambiguous overload, possible interpretations\n  1\n  0\n</pre></div>",
        "id": 176163354,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568952137
    },
    {
        "content": "<p>Definitely <code>user_command</code> parsing respects spaces in the token name.</p>",
        "id": 176197357,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568989680
    },
    {
        "content": "<p>I assumed the same would be the case for a custom <code>user_notation</code>. Perhaps it is not.</p>",
        "id": 176197422,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568989696
    }
]