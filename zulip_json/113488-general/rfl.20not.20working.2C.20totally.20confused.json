[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- erase_lead of a polynomial f is the polynomial obtained by</span>\n<span class=\"sd\">subtracting from f the leading term of f. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">erase_lead</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp.erase</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">erase_lead_support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.erase_lead.support</span> <span class=\"bp\">=</span> <span class=\"n\">f.support.erase</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>",
        "id": 212658237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.erase.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">classical.prop_decidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.nat_degree.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.erase.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.decidable_eq</span>\n <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">polynomial.nat_degree.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 212658538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144777
    },
    {
        "content": "<p>decidable eq issue on nat <span aria-label=\"angry cat\" class=\"emoji emoji-1f63e\" role=\"img\" title=\"angry cat\">:angry_cat:</span></p>",
        "id": 212658565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144797
    },
    {
        "content": "<p>lhs is classical dec eq and rhs is honest dec eq on nat.</p>",
        "id": 212658619,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602144837
    },
    {
        "content": "<p>This is sad</p>",
        "id": 212658674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144846
    },
    {
        "content": "<p>I want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.RFL</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 212658776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144923
    },
    {
        "content": "<p><code>convert</code> might not even help when you have to unfold the lhs</p>",
        "id": 212658822,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602144954
    },
    {
        "content": "<p>It worked in this case <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 212658886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602144968
    },
    {
        "content": "<p>Does changing finsupp to use less <code>classical</code> help with this type of thing?</p>",
        "id": 212663738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602148097
    },
    {
        "content": "<p>I think we changed it to use more classical to help with this kind of thing <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 212664597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602148657
    },
    {
        "content": "<p>It's your fault for unfolding finsupp and not using the API.</p>",
        "id": 212665092,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602148975
    },
    {
        "content": "<p>ok, ok, I take the blame (-;</p>",
        "id": 212665596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602149302
    },
    {
        "content": "<p>I view this as part of extending the API</p>",
        "id": 212665614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602149316
    },
    {
        "content": "<p>In my experience, using very precise <code>[decidable]</code> assumptions in the best way to make lemmas that work both with classical and without it.</p>",
        "id": 212666034,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602149523
    },
    {
        "content": "<p>E.g., it's OK to add a <code>[decidable]</code> assumption that can be deduced from others if this assumption is used somewhere in the statement (not the proof).</p>",
        "id": 212666186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602149616
    }
]