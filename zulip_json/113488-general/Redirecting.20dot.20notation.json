[
    {
        "content": "<p>Would it be possible to make dot notation resolve <code>s.nonempty</code>, <code>s.subsingleton</code>, <code>s.nontrivial</code> to <code>set.nonempty (s : set α)</code>, <code>set.subsingleton (s : set α)</code>, <code>set.nontrivial (s : set α)</code> when <code>s : finset α</code>? This would avoid another lot of duplication.</p>",
        "id": 296318573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661950543
    },
    {
        "content": "<p>These probably all boil down to the <code>has_mem</code> instance, <del>which is not defeq to <code>has_mem</code> for the coercion to set,</del> which is presumably due to computational reasons.</p>",
        "id": 296320168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661951078
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_coe/src\">src#finset.mem_coe</a> is refl, though.</p>",
        "id": 296320311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661951131
    },
    {
        "content": "<p>Oh great</p>",
        "id": 296320445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661951166
    },
    {
        "content": "<p>I guess the coercion to set is via the has mem ;)</p>",
        "id": 296320488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661951179
    },
    {
        "content": "<p>Is there any dot notation exclusive to finset? Would that cause issues with this?</p>",
        "id": 296328567,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661953729
    },
    {
        "content": "<p>There currently is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nonempty\">docs#finset.nonempty</a> but the above idea would get rid of it, if that's what you meant.</p>",
        "id": 296328711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953774
    },
    {
        "content": "<p>Well what I was thinking was, obviously we don't want to redirect every <code>s.foo</code> where <code>s</code> is a finset.</p>",
        "id": 296328867,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661953816
    },
    {
        "content": "<p>I think the idea is desirable though. These predicates are really set-like, in the sense that they are not about properties of the finset structure but simply whether or not certain elements have mem.</p>\n<p>(You probably need to duplicate things like <code>finset.mem_off_diag</code> and <code>set.mem_off_diag</code> for your <code>off_diag</code> PR, for instance, because <code>finset.off_diag</code> and <code>set.off_diag</code> are constructed in different ways.)</p>",
        "id": 296329373,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661953977
    },
    {
        "content": "<p>(That being said, one is a filtered finset and one is set comprehension, which are morally \"the same\", so go figure.)</p>",
        "id": 296329576,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661954045
    },
    {
        "content": "<p>Basically I agree with your goal here and that we should minimise duplication as much as possible. I'm sure there's more one could do but perfect shouldn't be the enemy of good. Things should line up, though, unless there's a good reason why they ought not to.</p>",
        "id": 296330957,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661954504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> If you promise not to use this feature in any mathlib PR's until we know whether it can be ported to Lean 4, I'll show you a consequence to the new dot notation that essentially gives you this. There are no guarantees the feature will last long -- this works because we were preserving a (misused?) Lean 3 feature to make it easier to do the Lean version bump.</p>\n<p>Lean 4 has a way to use dot notation with aliases, which was backported. However, Lean 3 will currently insert the object of the dot notation as the first argument if the usual rule doesn't succeed (insert it at the first explicit argument whose head matches), which is not compatible with Lean 4. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">has_mem.nonempty'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"kn\">renaming</span> <span class=\"n\">nonempty'</span> <span class=\"bp\">→</span> <span class=\"n\">finset.nonempty'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">s.nonempty'</span>\n</code></pre></div>\n<p>For the alias feature to work, the field name must match (renaming <code>nonempty' -&gt; finset.my_nonempty</code> won't work)</p>\n<p>I would have written it the following way, but it's triggering an error for reasons I don't understand at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- redefine so that it has a name that won't conflict with `finset.nonempty` once we export it</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">set.nonempty'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">s.nonempty</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"kn\">renaming</span> <span class=\"n\">nonempty'</span> <span class=\"bp\">→</span> <span class=\"n\">finset.nonempty'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">s.nonempty'</span>\n<span class=\"c1\">-- failure (switched to simple elaboration procedure)</span>\n</code></pre></div>",
        "id": 296355018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661959287
    },
    {
        "content": "<p>I should mention that this <code>export</code> line in Lean 4 would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">export</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">nonempty'</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>\n<p>I don't understand Lean 3 aliases well enough to know why <code>#check finset.nonempty'</code> doesn't resolve. But if it did, then this <code>namespace</code>/<code>export</code> block should work in place of the <code>export ... (renaming ...)</code> command.</p>",
        "id": 296358633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661959842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> it occurs to me that (though I suppose this might lose the dot notation?) you could define <code>has_mem.nonempty</code>  etc.? Like make it so that anything which <code>has_mem</code> would get it.</p>",
        "id": 296372270,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661961133
    },
    {
        "content": "<p>Dot notation is the only reason <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nonempty\">docs#finset.nonempty</a> exists, so it's definitely important.</p>",
        "id": 296373139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661961174
    },
    {
        "content": "<p>Aye. I couldn't remember if the way it worked for typeclasses, dot notation would work on anything whose type was of the right typeclass.</p>",
        "id": 296416883,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661967907
    }
]