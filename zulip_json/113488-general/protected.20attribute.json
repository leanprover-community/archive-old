[
    {
        "content": "<p>I just noticed that both <code>protected def ...</code> and <code>@[protected] def ...</code> seem to be valid. Is there any difference?</p>",
        "id": 211160840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600967122
    },
    {
        "content": "<p>To partially answer my question, there definitely is <em>some</em> difference</p>",
        "id": 211160976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600967176
    },
    {
        "content": "<p>What difference do you see?</p>",
        "id": 211162523,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600967973
    },
    {
        "content": "<p>In the same section, it looks like <code>@[protected]</code> has no effect. It's also possible it has no effect whatsoever.</p>",
        "id": 211162863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968128
    },
    {
        "content": "<p>Here is a comparison:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_ns</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- not an error</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_ns</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- error</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">my_ns</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 211163332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968363
    },
    {
        "content": "<p>You're right, in the same namespace, it does not take effect yet</p>",
        "id": 211163376,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968383
    },
    {
        "content": "<p>But if you close and open the namespace again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_ns</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_ns.bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- error</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_ns</span>\n</code></pre></div>",
        "id": 211163446,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968419
    },
    {
        "content": "<p>Thanks, this confirms what I thought I was seeing. Now the question is--is this intentional? It does seem sort of useful...</p>",
        "id": 211163936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968625
    },
    {
        "content": "<p>It's not intentional, I didn't even know there was a difference. I'm not sure why it's there</p>",
        "id": 211164046,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968681
    },
    {
        "content": "<p>How do you make use of it?</p>",
        "id": 211164081,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968696
    },
    {
        "content": "<p>Accidentally</p>",
        "id": 211164197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968734
    },
    {
        "content": "<p>That's an interesting technique :)</p>",
        "id": 211164316,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600968796
    },
    {
        "content": "<p>I'm returning to <code>nat.pow</code> and I marked a lemma <code>@[protected]</code> in the original <code>nat.pow</code> changes--but I'm sure I didn't intentionally choose it over <code>protected</code>.</p>",
        "id": 211164549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968907
    },
    {
        "content": "<p>Now I am marking more lemmas as <code>protected</code> and in the process of doing so I noticed this difference because the lemmas are used later on in the same section.</p>",
        "id": 211164604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968939
    },
    {
        "content": "<p>In the end I intend to delete all the lemmas anyways so it doesn't matter.</p>",
        "id": 211164632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600968951
    },
    {
        "content": "<p>That's interesting. The curious thing is that, if <code>protected</code> and <code>@[protected]</code> were to behave the same, you could achieve the same effect by adding <code>attribute [protected] foo_bar</code> when you're ready to protect it</p>",
        "id": 211165412,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600969298
    },
    {
        "content": "<p>I think this is an implementation detail of <code>protected</code>.  When you enter a namespace or <code>open</code> a namespace, it seems to go through all the symbols that don't have the protected attribute and adds the prefix-free version to the list of currently accessible symbols.  When you do <code>def</code> normally, it seems to both create the symbol and add it to the list of currently accessible symbols, but if it's <code>protected def</code> it adds the <code>protected</code> attribute but does not do the step where it adds it to the list of currently accessible symbols.  If you do <code>@[protected] def</code>, then it's <code>def</code> but then adds the <code>protected</code> attribute afterwards.</p>\n<p>Something I found surprising about <code>open</code> is how it is an action and not a declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">y</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 211165445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600969310
    },
    {
        "content": "<p>It seems namespace management was inspired by some Scheme's symbol namespace management, at least to some degree.  (Common Lisp has symbol packages that can refer to other symbol packages to permanently \"<code>open</code>\" them.)</p>",
        "id": 211165590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600969359
    },
    {
        "content": "<p>I think this behavior of <code>open</code> is changing in Lean 4</p>",
        "id": 211165817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600969446
    },
    {
        "content": "<p>How so?</p>",
        "id": 211167382,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600970145
    },
    {
        "content": "<p>my understanding is that <code>open</code> will apply also to definitions which didn't exist at the time of the <code>open</code>, like <code>y</code> in the above example</p>",
        "id": 211169955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600971319
    },
    {
        "content": "<p>Yes, that's true, I heard that too. That's certainly an improvement</p>",
        "id": 211170740,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600971780
    }
]