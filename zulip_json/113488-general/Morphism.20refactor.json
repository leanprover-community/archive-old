[
    {
        "content": "<p>So we want to refactor how morphisms are done. Instead of stating lemmas on bundled homs, we will state them on typeclasses which will be instantiated by the bundled homs. This is reminiscent of how the order refactor is introducing typeclasses, whose content is basically a specific lemma holding true, between order classes and order lemmas.</p>\n<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, I read your <a href=\"https://github.com/leanprover-community/mathlib/tree/fun_like\">branch#fun_like</a> and I'm surprised so as to how you approach the thing (you are most probably right, I mustn't have thought about it enough). Why do we want <code>fun_like</code> and why aren't we nuking lemmas like <code>some_bundled_map.map_add</code>?</p>",
        "id": 249879539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629305957
    },
    {
        "content": "<p>For context, <a href=\"https://github.com/leanprover-community/mathlib/blob/fun_like/src/data/fun_like.lean\">this file defines <code>fun_like</code></a></p>",
        "id": 249883009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629307389
    },
    {
        "content": "<p>We want <code>fun_like</code> for the same reason as we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a>; it unifies a lot of boring lemmas about extensionality.  Meanwhile, we want <code>to_fun</code> from that PR because we don't have <a href=\"https://github.com/leanprover-community/lean/issues/557\">leanprover-community/lean#557</a> yet.</p>",
        "id": 249883243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629307480
    },
    {
        "content": "<p>As for leaving behind the <code>some_bundled_map.map_add</code> lemmas, it's probably a dot notation and reducing work thing.</p>",
        "id": 249883520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629307597
    },
    {
        "content": "<p>what do the lean4 coes do for us?</p>",
        "id": 249886837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629309095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is exactly correct, but let me expand a bit.</p>\n<p>First of all, it's important to note that my plan is to instantiate typeclasses on <em>types</em> of bundled homs, not the homs themselves (so not like the old <code>is_monoid_hom</code> class used to do). </p>\n<p><code>to_fun</code> is needed for 2 reasons: one is lean4 compatibility, the other is that <code>has_coe_to_fun</code> makes it impossible to state in the typeclass what the return type of the <code>coe</code> actually is, so it's impossible to state something like <code>map_mul</code>: if you can't specify at the type level that <code>has_coe_to_fun.F f = M → N</code>, there's no way to write <code>[has_mul M] [has_mul N] (x y : M)</code>. So the return type needs to be part of the typeclass.</p>\n<p>Then <code>fun_like</code> is for the boring extensionality-like lemmas, it's mostly there as a placeholder for someone to do a <code>set_like</code> refactor with.</p>\n<p>Finally, the <code>bundled_map.map_whatever</code>-style lemmas can stay for now, as they are too many to deal with at once. (I count exactly 2000 of the basic ones: <code>rg '\\.map_(mul|add|zero|one|div|inv|neg|sub)' | wc -l</code>) Originally I wanted to try to get rid of them all, but as more and more get added each day this was a bit too optimistic. Now they'll just be demoted from <code>simp</code> lemma to <code>protected</code> lemma, to be phased out later.</p>",
        "id": 249892184,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629311369
    },
    {
        "content": "<p>Quick comment: <a href=\"https://github.com/leanprover-community/mathlib/compare/fun_like#diff-501f1a3fb0d8614260eca7d7b38363503ea7efbe126f783b29d855dfcea0f0f3R13\">https://github.com/leanprover-community/mathlib/compare/fun_like#diff-501f1a3fb0d8614260eca7d7b38363503ea7efbe126f783b29d855dfcea0f0f3R13</a><br>\n<code>linear-map</code> should be <code>linear_map</code>.</p>",
        "id": 249894893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629312540
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/compare/fun_like#diff-501f1a3fb0d8614260eca7d7b38363503ea7efbe126f783b29d855dfcea0f0f3R31\">https://github.com/leanprover-community/mathlib/compare/fun_like#diff-501f1a3fb0d8614260eca7d7b38363503ea7efbe126f783b29d855dfcea0f0f3R31</a> should be removed, I think</p>",
        "id": 249895126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629312622
    },
    {
        "content": "<p>Those links don't work for me - could you comment on the commits instead?</p>",
        "id": 249964820,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629367432
    },
    {
        "content": "<p>I just pushed</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit a496eb0ae152cd7cc1ca85c799c1254a619da66a (HEAD -&gt; fun_like, origin/fun_like)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Thu Aug 19 11:25:16 2021 +0000\n\n    little fix in doc\n\n<span class=\"gh\">diff --git a/src/data/fun_like.lean b/src/data/fun_like.lean</span>\n<span class=\"gh\">index fc91eff7ce..4b373bd921 100644</span>\n<span class=\"gd\">--- a/src/data/fun_like.lean</span>\n<span class=\"gi\">+++ b/src/data/fun_like.lean</span>\n<span class=\"gu\">@@ -10,7 +10,7 @@ import tactic.norm_cast</span>\n /-!\n # Typeclass for a type `F` with an injective map to `A → B`\n\n<span class=\"gd\">-This typeclass is primarily for use by homomorphisms like `monoid_hom` and `linear-map`.</span>\n<span class=\"gi\">+This typeclass is primarily for use by homomorphisms like `monoid_hom` and `linear_map`.</span>\n\n A typical type of morphisms should be declared as:\n ```\n<span class=\"gu\">@@ -28,8 +28,6 @@ instance : fun_like (my_hom A B) A B :=</span>\n /-- Helper instance for when there's too many metavariables to apply `to_fun.to_coe_fn` directly. -/\n instance : has_coe_to_fun (M →ₗ[R] M₂) := to_fun.to_coe_fn\n\n<span class=\"gd\">-@[simp] lemma to_fun_eq_coe {f : M →ₗ[R] M₂} : f.to_fun = (f : M → M₂) := rfl</span>\n<span class=\"gd\">-</span>\n @[simp] lemma to_fun_eq_coe {f : my_hom A B} : f.to_fun = (f : A → B) := rfl\n\n @[ext] theorem ext {f g : my_hom A B} (h : ∀ x, f x = g x) : f = g := fun_like.ext f g h\n</code></pre></div>\n<p>to your branch</p>",
        "id": 249971719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629372349
    },
    {
        "content": "<p>Should I try to revive <a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a>?</p>",
        "id": 252931933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631390769
    },
    {
        "content": "<p>I'd certainly be interested in seeing that revived</p>",
        "id": 252932204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631391065
    },
    {
        "content": "<p>I would be very happy to see the new definition of <code>has_coe_to_fun</code> being merged and have some more time to work on the morphism refactor from this/next week on, so let me know if there's anything I can do for <a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a>!</p>",
        "id": 253050081,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631519130
    },
    {
        "content": "<p>Once we have <a href=\"https://github.com/leanprover-community/mathlib/issues/9165\">#9165</a> merged, I'll merge master into <a href=\"https://github.com/leanprover-community/mathlib/issues/7033\">#7033</a>, push it to github, and see what fails.</p>",
        "id": 253163537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568515
    },
    {
        "content": "<p>Here's a non-exhaustive list of homs which should be refactored:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_alg_hom\">docs#non_unital_alg_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom\">docs#alg_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_hom\">docs#mul_action_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action_hom\">docs#distrib_mul_action_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_hom\">docs#lie_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_module_hom\">docs#lie_module_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map\">docs#continuous_map</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_monoid_hom\">docs#continuous_monoid_hom</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.arithmetic_function\">docs#nat.arithmetic_function</a></li>\n</ul>",
        "id": 269295930,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643133193
    },
    {
        "content": "<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_constant\">docs#locally_constant</a> (to fix <a href=\"#narrow/stream/116395-maths/topic/congr_arg\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/congr_arg</a>)</li>\n</ul>",
        "id": 270012418,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643626398
    },
    {
        "content": "<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv\">docs#ring_equiv</a> should get a <code>ring_equiv_class</code></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv\">docs#alg_equiv</a></li>\n</ul>",
        "id": 271579928,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644587904
    },
    {
        "content": "<p>If we add a class for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.outer_measure\">docs#measure_theory.outer_measure</a>, then we can avoid repeating lemmas for <code>outer_measure</code> and <code>measure</code>.</p>",
        "id": 271590113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644592366
    },
    {
        "content": "<p>And we can generalize the <code>ae</code> filter to <code>outer_measure</code>s (with fewer properties).</p>",
        "id": 271596805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644595229
    },
    {
        "content": "<p>Are isometries within scope for this refactor? There are at least five bundled types for isometries (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometric\">docs#isometric</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry\">docs#linear_isometry</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_equiv\">docs#linear_isometry_equiv</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_isometry\">docs#affine_isometry</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_isometry_equiv\">docs#affine_isometry_equiv</a>) as well as the unbundled predicate on functions (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/isometry\">docs#isometry</a>).</p>",
        "id": 271627012,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1644608535
    },
    {
        "content": "<p>I think, yes.</p>",
        "id": 271628045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644609109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, I heard you say that you were defining many types of morphisms. Are you following the hom refactor? Do you know how to? May I help?</p>",
        "id": 272746171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645487822
    },
    {
        "content": "<p>I think this is far away from me since the “morphisms” I have in mind are morphisms in the category of schemes, which are not (yet?) concrete morphisms between Types.<br>\nAnd I’m merely adding typeclasses that looks like “forall {X Y : Scheme<br>\n} (f : X —&gt; Y), Prop”<br>\nI might be wrong though.</p>",
        "id": 272748954,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645490900
    },
    {
        "content": "<p>Okay. I've been defining lots categories of orders recently (see <a href=\"https://github.com/leanprover-community/mathlib/pull/11677\">#11677</a> for the master plan) and the pattern always has been \"order structure, bundled morphisms, category\".</p>",
        "id": 272749032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645491006
    },
    {
        "content": "<p>I see. I won't be needing the bundled version, and I'll keep them as unbundled predicates if that does not conflict with your plans.</p>",
        "id": 272753375,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645496485
    }
]