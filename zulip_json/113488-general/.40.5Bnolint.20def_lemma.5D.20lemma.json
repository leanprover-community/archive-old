[
    {
        "content": "<p>We have two definitions in mathlib tagged with this, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_alg_closed.ring_equiv_of_cardinal_eq_of_char_eq\">docs#is_alg_closed.ring_equiv_of_cardinal_eq_of_char_eq</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_alg_closed.ring_equiv_of_cardinal_eq_of_char_zero\">docs#is_alg_closed.ring_equiv_of_cardinal_eq_of_char_zero</a>. In the <a href=\"https://github.com/leanprover-community/mathlib/pull/9370#discussion_r798517724\">github comment on the PR that added those</a>, <span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> comments:</p>\n<blockquote>\n<p>It's just a random isomorphism chosen using the axiom of choice so you never want to unfold the definition.</p>\n</blockquote>\n<p>Surprisingly though, it seems I can still unfold the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.classification</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hKL</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_alg_closed.ring_equiv_of_cardinal_eq_of_char_eq</span> <span class=\"n\">p</span> <span class=\"n\">hK</span> <span class=\"n\">hKL</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">is_alg_closed.ring_equiv_of_cardinal_eq_of_char_eq</span><span class=\"o\">,</span>  <span class=\"c1\">-- works!</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this behavior expected? Are there any downsides to using <code>lemma</code> in this way?</p>",
        "id": 273793990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646221361
    },
    {
        "content": "<p>you can unfold irreducible defs too using <code>dunfold</code></p>",
        "id": 273794266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221537
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">bar</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">bar</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">bar</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 273794429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221671
    },
    {
        "content": "<p>this actually looks like a bug in <code>dunfold</code> since it has an <code>md</code> config argument (which defaults to <code>instances</code>) but seems to unfold regardless of how it is set. Maybe that config only applies to definitions that are not listed?</p>",
        "id": 273794736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646221891
    },
    {
        "content": "<p>Here are some more tests. In this case we are unfolding an unapplied version of the function, so the equation lemma doesn't apply and anything that uses equation lemmas will fail</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">bar</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">bar</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">bar</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>\n<p><code>dunfold</code> is really persistent on lemmas, apparently</p>",
        "id": 273795447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646222265
    },
    {
        "content": "<p>IIRC <code>delta</code> will also magically recover defs which were defined as lemmas -- oh, sorry, this is covered by the above :-)</p>",
        "id": 273847583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646243152
    },
    {
        "content": "<p>So is <code>lemma</code> just the same as <code>@[irreducible] def</code>? Oh this is also covered -- nearly but not quite :-)</p>",
        "id": 273848025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646243307
    },
    {
        "content": "<p>The main reason for the difference between <code>lemma</code> and <code>@[irreducible] def</code> you can see in the first set of examples is that <code>lemma</code> does not generate any equation lemmas, and all the <code>simp</code> derivatives use equation lemmas for unfolding definitions. The reason <code>dunfold</code> behaves differently is because if there is no equation lemma then it falls back on the <code>delta</code>-like behavior of unfolding the definition directly. In fact, this leads to an odd non-monotonicity of <code>dunfold</code>: if you change <code>lemma bar</code> to <code>def bar</code> in the second example, then <code>rfl</code> will start working but <code>dunfold</code> will fail, because it will attempt to use the equation lemma but it doesn't apply</p>",
        "id": 273861509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646248446
    }
]