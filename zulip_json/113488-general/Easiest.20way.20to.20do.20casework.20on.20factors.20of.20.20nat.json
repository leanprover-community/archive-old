[
    {
        "content": "<p>What is the easiest way to go prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">100</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">25</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">50</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(really only the forward direction is important; backwards should be trivial by <code>cases</code> and <code>norm_num</code> or something).</p>\n<p>The motivation is that I was thinking about how I would formalize the solutions to certain competition problems, and this kind of casework occurs somewhat frequently in number theory problems.</p>",
        "id": 303342058,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1665447282
    },
    {
        "content": "<p>Isn't there a function that returns the set of factors of an integer?</p>",
        "id": 303343538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665448416
    },
    {
        "content": "<p>There is, but there is no norm_num extension for it like I thought.</p>",
        "id": 303344213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665448987
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors\">docs#nat.factors</a>, which does have a norm_num extension, while needs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.divisors\">docs#nat.divisors</a> which doesn't</p>",
        "id": 303344802,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665449516
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">100</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">25</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">50</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">100</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">25</span><span class=\"o\">,</span> <span class=\"mi\">50</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.mem_divisors.trans</span> <span class=\"o\">(</span><span class=\"n\">and_iff_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)),</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>a proper norm_num extension would make this a lot faster</p>",
        "id": 303344994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665449649
    },
    {
        "content": "<p>Here's a slightly silly but faster proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.pointwise</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">divisors_mul</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span> <span class=\"bp\">=</span> <span class=\"n\">m.divisors</span> <span class=\"bp\">*</span> <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">m.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm.ne'</span><span class=\"o\">,</span> <span class=\"n\">hn.ne'</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_mul</span><span class=\"o\">,</span> <span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">or_self</span><span class=\"o\">,</span>\n    <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">exists_and_distrib_left</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨⟨</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">⟩,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">prod_dvd_and_dvd_of_dvd_prod</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_dvd_mul</span> <span class=\"n\">hy</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">insert_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mul_def</span><span class=\"o\">,</span> <span class=\"n\">insert_eq</span><span class=\"o\">,</span> <span class=\"n\">union_product</span><span class=\"o\">,</span> <span class=\"n\">image_union</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.mul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">finset.mul_def</span><span class=\"o\">,</span>\n    <span class=\"n\">singleton_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_finset_def</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_finset_insert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">insert</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insert_eq</span><span class=\"o\">,</span> <span class=\"n\">smul_finset_union</span><span class=\"o\">,</span> <span class=\"n\">smul_finset_singleton</span><span class=\"o\">,</span> <span class=\"n\">insert_eq</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">100</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">25</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">50</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"mi\">100</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">divisors</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">divisors_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.divisors_prime_pow</span> <span class=\"n\">prime_two</span><span class=\"o\">,</span>\n    <span class=\"n\">divisors_prime_pow</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nat.prime</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)],</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">finset.range_succ</span><span class=\"o\">,</span> <span class=\"n\">insert_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_finset_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.singleton_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">ac_refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the earlier lemmas are certainly gaps in mathlib - the idea is to show divisors of 100 are products of divisors of 4 and 25, which we have explicit expressions for, then norm_num and set calculations to finish</p>",
        "id": 303345843,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665450417
    },
    {
        "content": "<p>I think - by the way - that this approach would be better for norm_num than trying to check divisibility of every number from 1..n, in particular using the existing extension for nat.factors, then my new divisors_mul. And maybe using lists instead of finsets?</p>",
        "id": 303346088,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665450649
    },
    {
        "content": "<p>My thinking for the norm_num extension was to exhaustively list all divisors up to sqrt n and mirror them to get the rest (in order, to boot). This is the same cost as <code>nat.factors</code> since it also does divisibility tests up to sqrt n</p>",
        "id": 303347137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665451663
    },
    {
        "content": "<p>I thought <code>nat.factors</code> doesn't do divisibility tests up to sqrt n, because once you get the smallest factor you divide by it, so less needs to be checked</p>",
        "id": 303347380,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665451889
    },
    {
        "content": "<p>For instance for <code>nat.factors 1024</code>, we never check if <code>30</code> divides <code>1024</code>, even though <code>30 &lt; sqrt 1024</code> (I think, I might be misunderstanding?)</p>",
        "id": 303347447,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665451926
    },
    {
        "content": "<p>Oh, no you are right. That's only if you get lucky though, if the number is prime then you really do have to go all the way up to sqrt n</p>",
        "id": 303353771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665457969
    },
    {
        "content": "<p>Agreed. That said, the average number of prime factors of n is log log n, while the average number of divisors is log n, so I think overall (amortized) this saves a log factor? Though it's probably likely there are other factors involved here (no pun intended) and the only real way to compare is benchmarking</p>",
        "id": 303501928,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665515173
    },
    {
        "content": "<p>you still have to sort the factors at the end though</p>",
        "id": 303502949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515549
    },
    {
        "content": "<p>true</p>",
        "id": 303502978,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665515561
    },
    {
        "content": "<p>might be able to get away with a clever merge sort though, because each of the lists you get along the way will come sorted - eg above it was {1,2,4} * {1,5,25}</p>",
        "id": 303503124,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665515627
    },
    {
        "content": "<p>sure, I mean any sort is a bunch of merge sorts</p>",
        "id": 303503254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515672
    },
    {
        "content": "<p>true but here we can prove that the inputs {1,2,4} and {1,5,25} are sorted by construction</p>",
        "id": 303503345,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665515709
    },
    {
        "content": "<p>but we are essentially linearizing a high-dimensional cube here, so there are still linearly many ordering relations to work out</p>",
        "id": 303503389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515727
    },
    {
        "content": "<p>my hope was that this would be less costly than proving the other things between 1 and sqrt n aren't factors, especially because the cube is in log log n dimensions (on average)</p>",
        "id": 303503610,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665515803
    },
    {
        "content": "<p>(by linearly many I mean in the number of points in the cube which is log n, the size of the output here)</p>",
        "id": 303503817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515872
    },
    {
        "content": "<p>I think it is likely to be more asymptotically efficient, but also a lot more complicated than just iterating which will result in code similar to the <code>nat.factors</code> implementation</p>",
        "id": 303504092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665515979
    },
    {
        "content": "<p>I think so too</p>",
        "id": 303504118,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665516000
    },
    {
        "content": "<p>I realised there might be a nicer way to do this - we can compute the list of divisors using the VM, and it's enough to just produce a proof that the list is correct, and for that it suffices to proof we have a sublist of the correct list (ie everything we have is a divisor) and we have the right number of things. The first we can even do in pairs, and one multiplication will deal with two elements of the list; and the number of divisors can already be computed from <code>nat.factors</code></p>",
        "id": 303684613,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665595050
    },
    {
        "content": "<p>I'm assuming you are still looking for a computationally efficient way to find all the divisors, rather than one that is less work to implement?</p>",
        "id": 303685238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665595264
    },
    {
        "content": "<p>I agree that it is more or less a required bit of work to multiply the divisors in the list in pairs to get the target number. But what of all the other numbers that we haven't multiplied? You still need to eliminate the possibility of a large prime factor of the target number</p>",
        "id": 303685639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665595382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Easiest.20way.20to.20do.20casework.20on.20factors.20of.20.20nat/near/303685238\">said</a>:</p>\n<blockquote>\n<p>I'm assuming you are still looking for a computationally efficient way to find all the divisors, rather than one that is less work to implement?</p>\n</blockquote>\n<p>I'm not too sure to be honest - but I suspect this idea isn't too much more work to implement than yours, while also being a lot more efficient?</p>",
        "id": 303695101,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665598499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Easiest.20way.20to.20do.20casework.20on.20factors.20of.20.20nat/near/303685639\">said</a>:</p>\n<blockquote>\n<p>I agree that it is more or less a required bit of work to multiply the divisors in the list in pairs to get the target number. But what of all the other numbers that we haven't multiplied? You still need to eliminate the possibility of a large prime factor of the target number</p>\n</blockquote>\n<p>I think this is eliminated if we have a proof of the number of divisors (because the given list is a sublist of the list of divisors, and it has the same length, therefore they're equal). And we can calculate the number of divisors relatively easily by using the existing nat.factors extension</p>",
        "id": 303695278,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1665598564
    },
    {
        "content": "<blockquote>\n<p>and the number of divisors can already be computed from <code>nat.factors</code></p>\n</blockquote>\n<p>Do we have the lemma that says this?</p>",
        "id": 304382907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665984876
    },
    {
        "content": "<p>Relatedly, should we have a <code>norm_num_rhs</code> tactic so that we can write the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.divisors</span> <span class=\"mi\">100</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num_rhs</span>\n</code></pre></div>",
        "id": 304383118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665985004
    },
    {
        "content": "<p>that looks like the conv mode tactic</p>",
        "id": 304383204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665985067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.factors</span> <span class=\"mi\">100</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- this: 100.factors = [2, 2, 5, 5]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304383381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665985168
    },
    {
        "content": "<blockquote>\n<p>the earlier lemmas are certainly gaps in mathlib </p>\n</blockquote>\n<p>I PR'd<code>divisors_mul</code> and a helper lemma in <a href=\"https://github.com/leanprover-community/mathlib/pull/17041\">#17041</a></p>",
        "id": 304639176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666084451
    }
]