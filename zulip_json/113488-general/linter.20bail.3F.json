[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"bp\">-</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `ge_or_gt` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The following declarations use ≥/&gt;, probably in a way where we would prefer</span>\n<span class=\"cm\">  to use ≤/&lt; instead. See note [nolint_ge] for more information. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_bdd.transition_eq</span> <span class=\"c\">/-</span><span class=\"cm\"> the type contains ≥/&gt;. Use ≤/&lt; instead. -/</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_bdd.transition_eq</span>\n<span class=\"c1\">----</span>\n<span class=\"kd\">@[_refl_lemma]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Mbar_bdd.transition_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mbar_bdd</span> <span class=\"n\">r'</span> <span class=\"n\">S</span> <span class=\"n\">c</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">Mbar_bdd.transition</span> <span class=\"n\">r'</span> <span class=\"n\">h</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">F.to_fun</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Mbar_bdd</span> <span class=\"n\">r'</span> <span class=\"n\">S</span> <span class=\"n\">c</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 243693137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624472784
    },
    {
        "content": "<p>(This is from LTE)</p>",
        "id": 243693159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624472793
    },
    {
        "content": "<p>What does it look like with pp.all on?</p>",
        "id": 243720714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624487129
    }
]