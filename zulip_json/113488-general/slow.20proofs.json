[
    {
        "content": "<p>Hi, the following files have largest compile times as counted by running something like <code>for f in $(find . -name *.lean); do time lean -j1 --profile $f; done</code> after <code>leanpkg build</code>:</p>\n<div class=\"codehilite\"><pre><span></span>./src/data/complex/exponential.time!1:01.78\n./src/data/polynomial.time!1:57.13\n./src/data/real/ennreal.time!1:01.25\n./src/group_theory/congruence.time!1:03.07\n./src/linear_algebra/basic.time!1:58.68\n./src/ring_theory/power_series.time!1:18.62\n./src/topology/algebra/infinite_sum.time!1:37.40\n./src/category_theory/limits/shapes/binary_products.time!2:04.08\n./src/data/multiset.time!2:01.77\n./src/analysis/complex/exponential.time!3:50.83\n</pre></div>",
        "id": 184143324,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149380
    },
    {
        "content": "<p>And the longest-running proof is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dist_le_tsum_dist_of_tendsto</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚àë</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dist_le_tsum_of_dist_le_of_tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span> <span class=\"n\">h</span> <span class=\"n\">ha</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>in <code>infinite_sum.lean</code>.</p>",
        "id": 184143346,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149433
    },
    {
        "content": "<p>Any idea what makes it so hard to elaborate this proof?</p>",
        "id": 184143400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149459
    },
    {
        "content": "<p>The two things I can think of are 1. how long is the path to the type class instances that it needs (and the number of candidates being considered) 2. and the amount of definition unfolding required to check that functions are applied to arguments of the right type.</p>",
        "id": 184143541,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577149654
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dist_le_tsum_of_dist_le_of_tendsto</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚àë</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 184143635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149791
    },
    {
        "content": "<p>Is it possible to trace unfolding of definitions?</p>",
        "id": 184143715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149892
    },
    {
        "content": "<p>I don't see any definitions to unfold here.</p>",
        "id": 184143723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577149906
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dist_le_tsum_dist_of_tendsto</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)))</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚àë</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚àë</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n<span class=\"n\">dist_le_tsum_of_dist_le_of_tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">ha</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 184143832,
        "sender_full_name": "Joe",
        "timestamp": 1577150042
    },
    {
        "content": "<p>I think this should fix it.</p>",
        "id": 184143858,
        "sender_full_name": "Joe",
        "timestamp": 1577150055
    },
    {
        "content": "<p>Lean cannot find the function <code>d</code> in <code>dist_le_tsum_of_dist_le_of_tendsto</code></p>",
        "id": 184143869,
        "sender_full_name": "Joe",
        "timestamp": 1577150101
    },
    {
        "content": "<p>Thanks @Joe!</p>",
        "id": 184144022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577150313
    },
    {
        "content": "<p>No problem.</p>",
        "id": 184144036,
        "sender_full_name": "Joe",
        "timestamp": 1577150360
    },
    {
        "content": "<p>Is there any way to understand which tactic in a long <code>begin...end</code> block slows down the elaboration?</p>",
        "id": 184147966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577157185
    },
    {
        "content": "<p>try enabling the profiler</p>",
        "id": 184149458,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1577160154
    },
    {
        "content": "<p><code>lean --profile --json</code> reports <code>... took ... s</code> once for each <code>begin ... end</code> block.</p>",
        "id": 184149577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577160375
    },
    {
        "content": "<p>Or maybe more than once but each time it points to the position of <code>end</code>.</p>",
        "id": 184149581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577160417
    },
    {
        "content": "<p>It might be more convenient if you use <code>set_option profiler</code> to turn it on</p>",
        "id": 184149637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577160493
    }
]