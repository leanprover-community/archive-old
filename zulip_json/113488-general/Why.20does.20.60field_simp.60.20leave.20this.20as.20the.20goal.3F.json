[
    {
        "content": "<p>Applying <code>field_simp *</code> to the somewhat complicated expression (where we have <code>(innerc y y).re \\ne 0</code> in the local context): </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"err\">∥</span>\n</code></pre></div>\n\n\n<p>leaves the almost solved goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">innerc</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>A few call to <code>mul_assoc</code> would solve the goal, but for some reason <code>field_simp</code> doesn't finish it. <code>ring</code> does the trick from here, but I'm wondering why <code>field_simp</code> can't just finish it off.</p>\n<p>Note that everything has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>.</p>",
        "id": 199615448,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591188996
    },
    {
        "content": "<p>The goal of <code>field_simp</code> is to clear off denominators, so that <code>ring</code> can finish it. So the standard invocation is really <code>field_simp [h], ring</code>.</p>",
        "id": 199617209,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591189926
    },
    {
        "content": "<p>The fact that <code>field_simp</code> should be used as preparation for <code>ring</code> is mentioned in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">tactic#field_simp</a> and the docstring, but maybe it needs more emphasis?</p>",
        "id": 199617624,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591190127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  Looking at it now, it's pretty well emphasized. I just didn't look at it well enough.</p>",
        "id": 199617842,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591190248
    },
    {
        "content": "<p>BTW, can we reassign <code>@[simp]</code> tags so that <code>simp</code> works as <code>field_simp</code>?</p>",
        "id": 199703799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591244454
    },
    {
        "content": "<p>I think we can, why not?</p>",
        "id": 199704842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591246027
    }
]