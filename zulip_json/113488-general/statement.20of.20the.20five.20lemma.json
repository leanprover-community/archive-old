[
    {
        "content": "<p>I just wrote a statement of the five lemma: <a href=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\">https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db</a></p>",
        "id": 125606612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524551772
    },
    {
        "content": "<p>It seems extremely verbose to me. (And no, removing line breaks is not the solution <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> ...)</p>",
        "id": 125606625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524551845
    },
    {
        "content": "<p>If we ignore the facts that I am (i) not using lowercase greek for types, (ii) write types and conditions in the wrong order, and (iii) write lots of linebreaks; are there ways to improve this statement?</p>",
        "id": 125606670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524551940
    },
    {
        "content": "<p>Not nearly as verbose as the proof, I'm sure <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125606677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524551960
    },
    {
        "content": "<p>One thing you could do is package up the underlying set function and <code>is_group_hom</code> instance of each map into a single type</p>",
        "id": 125606729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524552044
    },
    {
        "content": "<p>I would love to just say: \"Hey Lean, all these types are groups, and by the way, all my functions are homomorphisms\"</p>",
        "id": 125606737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552073
    },
    {
        "content": "<p>sancta mater dei</p>",
        "id": 125606923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552363
    },
    {
        "content": "<p>you formalized five lemma</p>",
        "id": 125606929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> this is dank</p>",
        "id": 125606933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552377
    },
    {
        "content": "<p>no I did not</p>",
        "id": 125606936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552380
    },
    {
        "content": "<p>Only the statement</p>",
        "id": 125606938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552384
    },
    {
        "content": "<p>that’s what i mean</p>",
        "id": 125606942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552392
    },
    {
        "content": "<p>Which is not so hard to formalise, right?</p>",
        "id": 125606945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552400
    },
    {
        "content": "<p>formalize [sth] = formalize the statement of sth</p>",
        "id": 125606946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552402
    },
    {
        "content": "<p>well I never got my hands dirty</p>",
        "id": 125606953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524552409
    },
    {
        "content": "<p>It's just a lot of repetitive strain injury inducing introductory blabla typing</p>",
        "id": 125606965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552431
    },
    {
        "content": "<p>I'm scared of the proof atm</p>",
        "id": 125606967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552440
    },
    {
        "content": "<p>But I hope that <code>cc</code> will do a lot of diagram chasing for me</p>",
        "id": 125606972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552451
    },
    {
        "content": "<p>Currently my proof starts with <code>split, apply is_group_hom.inj_of_trivial_ker n</code>. And then I'm stuck, because I don't know how to prove that two subsets are equal...</p>",
        "id": 125607023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552524
    },
    {
        "content": "<p>I really need a lot of handholding with Lean <span class=\"emoji emoji-1f616\" title=\"confounded\">:confounded:</span></p>",
        "id": 125607026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552546
    },
    {
        "content": "<p>How do you split the goal <code>subset_1 = subset_2</code> into proving <code>x \\in subset_1 \\to x \\in subset_2</code> and its converse?</p>",
        "id": 125607236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524552963
    },
    {
        "content": "<p>You can apply <code>set.ext</code></p>",
        "id": 125607243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524552972
    },
    {
        "content": "<p>(I was just about to write something longer, but you said just what it does.)</p>",
        "id": 125607246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524553016
    },
    {
        "content": "<p>Thanks, that helps. Now I get an <code>\\iff</code>. How do I split it into two implications?</p>",
        "id": 125607252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553039
    },
    {
        "content": "<p>(And more meta: what is the best way to discover the answer to these questions without spamming Zulip?)</p>",
        "id": 125607258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553059
    },
    {
        "content": "<p>Either you use <code>iff.intro</code> or the anonymous constructor written as <code>\\&lt; ... ,  ... \\&gt;</code> where the VS Code plugin replaces the <code>\\&lt;</code> and <code>\\&gt;</code> .</p>",
        "id": 125607355,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524553210
    },
    {
        "content": "<p>Ok, cool</p>",
        "id": 125607358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553244
    },
    {
        "content": "<p>thanks!</p>",
        "id": 125607360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553249
    },
    {
        "content": "<p>Alternatively: use <code>subset.antisymm</code> then you have it in the right form (the subset relation is defintional equal to forall x <code>subset_1 implies subset2</code></p>",
        "id": 125607363,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524553261
    },
    {
        "content": "<p>What are the advantages of <code>subset.antisymm</code> over the other method?</p>",
        "id": 125607504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> use split</p>",
        "id": 125607506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524553555
    },
    {
        "content": "<p>to break down an iff</p>",
        "id": 125607543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524553564
    },
    {
        "content": "<p>In this specific case, I imagine there's probably a lemma that says that it suffices to show that <code>f x = 0 \\to x = 0</code></p>",
        "id": 125607552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524553617
    },
    {
        "content": "<p>Yeah, I've got the trivial part now. If <code>x \\in trivial subgroup \\to x \\in ker</code></p>",
        "id": 125607684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553917
    },
    {
        "content": "<p>that's paraphrasing</p>",
        "id": 125607720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524553924
    },
    {
        "content": "<p>Can I easily rewrite the hypothesis <code>(com₁ : m ∘ f = r ∘ l)</code> into <code>com₁' : \\fo x, (m (f x) = r (l x))</code> ?</p>",
        "id": 125607928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554340
    },
    {
        "content": "<p>Here's <a href=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db#gistcomment-2568165\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db#gistcomment-2568165\">my attempt</a> to syntactically follow the lemma.</p>",
        "id": 125607939,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524554378
    },
    {
        "content": "<p>It probably won't help you prove anything, of course. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125607997,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524554436
    },
    {
        "content": "<p>I mean, shouldn’t one prove the weak four lemmas first?</p>",
        "id": 125608015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524554498
    },
    {
        "content": "<p>One could, of course... but they are basically the two subgoals after the first split</p>",
        "id": 125608057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554538
    },
    {
        "content": "<p>There is a good reason to do that though... because then you only have to prove one of them</p>",
        "id": 125608062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554561
    },
    {
        "content": "<p>the other follows by duality</p>",
        "id": 125608063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554566
    },
    {
        "content": "<p>Still, the proof is a very straightforward diagram chase... so I hope I can convince Lean that it is easy as well</p>",
        "id": 125608077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554613
    },
    {
        "content": "<p>I want to tell lean \"For every group_hom \\phi that you can see, do this... <code>have := is_group_hom.one \\phi</code>\"</p>",
        "id": 125608120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554673
    },
    {
        "content": "<p>And things like that</p>",
        "id": 125608121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554679
    },
    {
        "content": "<p>And one it has figured out all these basic things, then <code>cc</code> might actually deduce the result</p>",
        "id": 125608129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554704
    },
    {
        "content": "<p>But then <code>cc</code> needs to know how to deal with <code>\\circ</code>, hence my previous question about rewriting <code>com\\1</code></p>",
        "id": 125608176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> Thanks for the refactoring. It is more readable now (except that I most I would give the arrows names like f_1, g_1 and f_2, g_2 etc...)</p>",
        "id": 125608213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554835
    },
    {
        "content": "<p>But it is still a bit verbose, right?</p>",
        "id": 125608215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554844
    },
    {
        "content": "<p>I added a comment with an \"artistic\" layout</p>",
        "id": 125608216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524554849
    },
    {
        "content": "<p>(warning: long lines)</p>",
        "id": 125608218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524554862
    },
    {
        "content": "<p>Ha! I like that one</p>",
        "id": 125608263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554893
    },
    {
        "content": "<p>It really explains the diagram. Cool!</p>",
        "id": 125608269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554918
    },
    {
        "content": "<p>It would be great of you could tell lean <code>[is_group_hom f g h i j k l]</code></p>",
        "id": 125608285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524554999
    },
    {
        "content": "<p>something like that, and it just understands that all of them are group homs</p>",
        "id": 125608332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555017
    },
    {
        "content": "<blockquote>\n<p>It would be great of you could tell lean <code>[is_group_hom f g h i j k l]</code></p>\n</blockquote>\n<p>Something like that would be useful in your case, but you wouldn't want to remove the ability to use multiple-parameter type classes, which it looks like <code>is_group_hom</code> is there.</p>",
        "id": 125608358,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524555081
    },
    {
        "content": "<p>Hmmz, I see</p>",
        "id": 125608362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555099
    },
    {
        "content": "<p>Also: <code>↪</code> and <code>↠</code> for injective respectively surjective functions</p>",
        "id": 125608415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555172
    },
    {
        "content": "<p>But I guess that might be a bit hard</p>",
        "id": 125608421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555188
    },
    {
        "content": "<p>So <code>{f: A ↪ B}</code> means <code>{f: A → B} [function.injective f]</code></p>",
        "id": 125608431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555230
    },
    {
        "content": "<p>At the very least, you can <code>open function</code> to avoid having to prepend <code>function.</code>. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125608550,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524555380
    },
    {
        "content": "<p>Aaah, ok. TIL :)</p>",
        "id": 125608553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555399
    },
    {
        "content": "<p>Hmmz TIL is confusing in this context. I meant \"Today I Learned\"</p>",
        "id": 125608559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524555419
    },
    {
        "content": "<blockquote>\n<p>(And more meta: what is the best way to discover the answer to these questions without spamming Zulip?)</p>\n</blockquote>\n<p>Spam Zulip. I was in just this situation last September and spamming Zulip was by far the most efficient method. Mario often answered very quickly, and several others too. Now there are more people who can help, and the sooner you're up to speed the sooner you can help others. It's really important that mathematicians learn how to use this software as quickly as possible.</p>",
        "id": 125609111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556455
    },
    {
        "content": "<p>PS I hope you're going to implement the abstract abelian category proof rather than all the diagram-chasing ;-)</p>",
        "id": 125609118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556487
    },
    {
        "content": "<p>[not serious]</p>",
        "id": 125609134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556545
    },
    {
        "content": "<p>although, in this crazy, world, who's to say that the abstract universal property proof won't be easier!</p>",
        "id": 125609181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556575
    },
    {
        "content": "<p>I find myself in a similar situation right now, as it happens.</p>",
        "id": 125609187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556588
    },
    {
        "content": "<p>I would like to prove R[1/f][1/g] = R[1/fg] (unique isomorphism of R-algebras)</p>",
        "id": 125609191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556604
    },
    {
        "content": "<p>and I have set up all these universal properties and I know I can deduce it from those, and it will be really nice to do</p>",
        "id": 125609202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556622
    },
    {
        "content": "<p>but I suspect that if I were to ask Kenny he would just write down a proof with lots of quotient.mk's in which just did everything directly.</p>",
        "id": 125609215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556655
    },
    {
        "content": "<p>i.e. we have an interface (i.e. a bunch of universal properties) which will enable me to prove my result, but now I realise that someone who knows the underlying implementation can just prove the result directly anyway.</p>",
        "id": 125609269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556699
    },
    {
        "content": "<p>It might be the same here; you can deduce the 5 lemma from the axioms of an ab cat</p>",
        "id": 125609271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556713
    },
    {
        "content": "<p>or from the diagram chase</p>",
        "id": 125609272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556731
    },
    {
        "content": "<p>and the proofs will be very different</p>",
        "id": 125609277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556738
    },
    {
        "content": "<p>Yes, I see. I think it should be possible to have a diagram_chase tactic</p>",
        "id": 125609403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524556975
    },
    {
        "content": "<p>And my gut feeling is that <code>cc</code> is almost it. But you need to spam the context with a lot of information about group homomorphisms and kernels etc...</p>",
        "id": 125609416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557018
    },
    {
        "content": "<p><code>diagram_chase</code> tactic: I wonder if that's possible!</p>",
        "id": 125609488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557150
    },
    {
        "content": "<p>As far as I know these CS people don't really do this kind of maths</p>",
        "id": 125609491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557159
    },
    {
        "content": "<p>so you might find that this is actually a possibility once you formalise what you want</p>",
        "id": 125609530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557172
    },
    {
        "content": "<p>That would be sooo nice</p>",
        "id": 125609541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557226
    },
    {
        "content": "<p>When drawing that snake map from ker(map3) to coker(map1) I always feel I'm making the unique move each time</p>",
        "id": 125609542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557231
    },
    {
        "content": "<p>Is the new parser going to accept <code>tikz-cd</code> input?</p>",
        "id": 125609545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557243
    },
    {
        "content": "<blockquote>\n<p>As far as I know these CS people don't really do this kind of maths</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f632\" title=\"astonished\">:astonished:</span> Diagrams are pretty core to PLT.</p>",
        "id": 125609546,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557246
    },
    {
        "content": "<p>PLT?</p>",
        "id": 125609547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557260
    },
    {
        "content": "<p>diagram-chasing in abelian groups is perhaps a bit different</p>",
        "id": 125609548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557267
    },
    {
        "content": "<p>Programming language theory.</p>",
        "id": 125609549,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557271
    },
    {
        "content": "<p>thks</p>",
        "id": 125609550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557276
    },
    {
        "content": "<blockquote>\n<p>diagram-chasing in abelian groups is perhaps a bit different</p>\n</blockquote>\n<p>Okay. I'm not familiar with it, so that may be.</p>",
        "id": 125609591,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524557305
    },
    {
        "content": "<p>Is the theory of abelian categories \"complete\" in some way?</p>",
        "id": 125609593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557312
    },
    {
        "content": "<p>Yes, I was thinking about tikz-cd as well (-;</p>",
        "id": 125609595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557316
    },
    {
        "content": "<p>i.e. \"the five lemma is true, so there should be a proof which an algorithm can construct\"?</p>",
        "id": 125609598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557335
    },
    {
        "content": "<p>Just think, we could pester Mario to spend weeks developing such an algorithm, and then use it to prove the five lemma and then say \"actually, the five lemma is pretty much the only thing we ever use\"</p>",
        "id": 125609608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Did you see how <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> rewrote the statement? <a href=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\">https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db</a></p>",
        "id": 125609609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557376
    },
    {
        "content": "<p>\"but thanks anyway\"</p>",
        "id": 125609610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557380
    },
    {
        "content": "<p>Ouch</p>",
        "id": 125609611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557389
    },
    {
        "content": "<p>And the snake lemma, and the rest of homological algebra</p>",
        "id": 125609653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557415
    },
    {
        "content": "<p>That PR will be rejected because the groups aren't all called alpha</p>",
        "id": 125609656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557425
    },
    {
        "content": "<p>Yeah, I will relabel everything to be alpha_1 alpha_2 etc...</p>",
        "id": 125609660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557446
    },
    {
        "content": "<p>who needs betas</p>",
        "id": 125609661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557453
    },
    {
        "content": "<p>I concur with Kenny's \"dank\" comment</p>",
        "id": 125609716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557534
    },
    {
        "content": "<p>This is absolutely great</p>",
        "id": 125609717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557538
    },
    {
        "content": "<p>No, you should keep groups G. Mario and Johannes will end up understanding.</p>",
        "id": 125609720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557561
    },
    {
        "content": "<p>Don't release pressure on this important issue</p>",
        "id": 125609721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557569
    },
    {
        "content": "<p>Sure</p>",
        "id": 125609724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557573
    },
    {
        "content": "<p>Was just kidding</p>",
        "id": 125609725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Well, thanks. I thought it was a good test case</p>",
        "id": 125609736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524557598
    },
    {
        "content": "<blockquote>\n<p>Is the theory of abelian categories \"complete\" in some way?</p>\n</blockquote>\n<p>No, <a href=\"https://mathoverflow.net/a/12799\" target=\"_blank\" title=\"https://mathoverflow.net/a/12799\">https://mathoverflow.net/a/12799</a></p>",
        "id": 125610505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524558932
    },
    {
        "content": "<p>Most similar theories will admit embeddings of the word problem like this, I think. But in diagrams where there are only finitely many ways to compose morphisms (basically, \"without loops\"), maybe there is hope.</p>",
        "id": 125610563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524559039
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> . I wondered if the abelian-ness of the situation saved our bacon but somehow this automorphism trick gets you back into a non-abelian situation</p>",
        "id": 125611247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560207
    },
    {
        "content": "<p>I put an update in the comments of the gist: <a href=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db\">https://gist.github.com/jcommelin/d097eb8f2587d34e5c337450bca543db</a></p>",
        "id": 125612399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562009
    },
    {
        "content": "<p>The first half of the proof is almost done</p>",
        "id": 125612404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562020
    },
    {
        "content": "<p>There is one stupid <code>admit</code></p>",
        "id": 125612413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562028
    },
    {
        "content": "<p>And I don't get why <code>apply_assumption</code> fails, because 2 lines above, there is <code>f_1 w = y</code></p>",
        "id": 125612421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562055
    },
    {
        "content": "<p>Your definition of im is not great</p>",
        "id": 125612476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562131
    },
    {
        "content": "<p>You defined <code>definition im (f : A → B) [is_group_hom f] := f '' (@set.univ A)</code></p>",
        "id": 125612486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562149
    },
    {
        "content": "<p>No, no longer</p>",
        "id": 125612488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562156
    },
    {
        "content": "<p>See the update</p>",
        "id": 125612489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562159
    },
    {
        "content": "<p>Oh OK</p>",
        "id": 125612490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562160
    },
    {
        "content": "<p>It is now <code>set.range f</code></p>",
        "id": 125612493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562171
    },
    {
        "content": "<p>I dunno if that is better (-;</p>",
        "id": 125612498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562180
    },
    {
        "content": "<p>That's definitely better</p>",
        "id": 125612548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562211
    },
    {
        "content": "<p>The problem with the old one</p>",
        "id": 125612560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562216
    },
    {
        "content": "<p><code>definition im (f : A → B) [is_group_hom f] := f '' (@set.univ A)</code></p>",
        "id": 125612564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562237
    },
    {
        "content": "<p>was that you can write <code>#print notation ''</code> to find out what <code>''</code> expands to</p>",
        "id": 125612569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562260
    },
    {
        "content": "<p>and see it expands to <code>set.image</code></p>",
        "id": 125612577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562277
    },
    {
        "content": "<p>and then <code>#print set.image</code> to find what that unfolds to</p>",
        "id": 125612581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562287
    },
    {
        "content": "<p>I see...</p>",
        "id": 125612584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562314
    },
    {
        "content": "<p>and you see it becomes <code>\\ex a, a \\in set.univ and f a = b</code></p>",
        "id": 125612586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562316
    },
    {
        "content": "<p>in particular we have some clause which is always true</p>",
        "id": 125612625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562328
    },
    {
        "content": "<p>and in the way</p>",
        "id": 125612626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562331
    },
    {
        "content": "<p>With your new definition we can do stuff like this:</p>",
        "id": 125612628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">is_group_hom</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kn\">definition</span> <span class=\"n\">im</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Hexact</span> <span class=\"o\">:</span> <span class=\"n\">im</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ker</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hker</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">Hker2</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_ker</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">Hker</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">Hexact</span> <span class=\"n\">at</span> <span class=\"n\">Hker2</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">Hker2</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125612632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562349
    },
    {
        "content": "<p>because after the rewrite, <code>Hker2</code> is definitionally equivalent to what you want</p>",
        "id": 125612635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562379
    },
    {
        "content": "<p>I still think you should prove the weak four lemmas first</p>",
        "id": 125612647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524562428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I am almost done with the first one</p>",
        "id": 125612690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562445
    },
    {
        "content": "<p>Just need to get rid of one stupid <code>admit</code></p>",
        "id": 125612693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562459
    },
    {
        "content": "<p>It's really hard to follow the argument without working hard</p>",
        "id": 125612818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562695
    },
    {
        "content": "<p>what is the problem which you're admitting defeat on?</p>",
        "id": 125612820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562705
    },
    {
        "content": "<p>I see you want to prove y in im f1</p>",
        "id": 125612823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562724
    },
    {
        "content": "<p>and I see 100 assumptions</p>",
        "id": 125612825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562727
    },
    {
        "content": "<p>Ok, so a minor change. I now have <code>local notation im := set.range</code></p>",
        "id": 125612827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562730
    },
    {
        "content": "<p>with backticks around <code>im</code></p>",
        "id": 125612830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562738
    },
    {
        "content": "<p>if you open set you can just use range</p>",
        "id": 125612838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562752
    },
    {
        "content": "<p>but I think im is better</p>",
        "id": 125612839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562755
    },
    {
        "content": "<p>what is your maths proof of the thing you;re admitting?</p>",
        "id": 125612841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562770
    },
    {
        "content": "<p>So, I want to prove <code>y ∈ im f</code></p>",
        "id": 125612842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562783
    },
    {
        "content": "<p>and it should follow immediately from the two lines above it</p>",
        "id": 125612845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562798
    },
    {
        "content": "<p>I see</p>",
        "id": 125612888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562815
    },
    {
        "content": "<p>so name one of them and use rw?</p>",
        "id": 125612889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562822
    },
    {
        "content": "<p>Although I am not an expert</p>",
        "id": 125612894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562836
    },
    {
        "content": "<p>aha, I thought apply_assumption would just kill it off</p>",
        "id": 125612895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562837
    },
    {
        "content": "<p>I am skeptical about not naming any assumptions</p>",
        "id": 125612899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562848
    },
    {
        "content": "<p>I have never heard of apply_assumption</p>",
        "id": 125612900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562853
    },
    {
        "content": "<p>What does it do?</p>",
        "id": 125612901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562855
    },
    {
        "content": "<p>It is like <code>apply foo</code>, where <code>foo</code> is an assumption</p>",
        "id": 125612915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562915
    },
    {
        "content": "<p>but you need 2 assumptions</p>",
        "id": 125612950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562923
    },
    {
        "content": "<p>to deduce what you want</p>",
        "id": 125612955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524562928
    },
    {
        "content": "<p>yeah, that's true</p>",
        "id": 125612958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524562935
    },
    {
        "content": "<p>I don't think it's the end of the world to start calling useful hypotheses H1 H2 H3...</p>",
        "id": 125612969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563000
    },
    {
        "content": "<p>But <code>rw</code> doesn't work either... I named one of the assumptions:<br>\n<code>have foo : f₁ w = y</code></p>",
        "id": 125613012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563053
    },
    {
        "content": "<p>And then I try <code>rw foo</code>, but it doesn't work</p>",
        "id": 125613017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563071
    },
    {
        "content": "<p>rw \\l foo</p>",
        "id": 125613018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563079
    },
    {
        "content": "<p>unknown identifier 'foo'</p>",
        "id": 125613022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563102
    },
    {
        "content": "<p>I think that you are not proving what you think you are proving</p>",
        "id": 125613036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563150
    },
    {
        "content": "<p><code>have foo : f₁ w = y, apply_assumption,</code></p>",
        "id": 125613081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563168
    },
    {
        "content": "<p>That's what you have now, right?</p>",
        "id": 125613083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563175
    },
    {
        "content": "<p>Yes</p>",
        "id": 125613085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563180
    },
    {
        "content": "<p>so put your cursor just after the comma after the y</p>",
        "id": 125613091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563194
    },
    {
        "content": "<p>and you see that the first goal is f1 w = y</p>",
        "id": 125613096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563214
    },
    {
        "content": "<p>and there are two goals</p>",
        "id": 125613103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563235
    },
    {
        "content": "<p>Yes</p>",
        "id": 125613104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563240
    },
    {
        "content": "<p>and now click after the comma after apply_assumption</p>",
        "id": 125613106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563254
    },
    {
        "content": "<p>and there are still 2 goals</p>",
        "id": 125613110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563279
    },
    {
        "content": "<p>aaah</p>",
        "id": 125613152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563290
    },
    {
        "content": "<p>so your \"proof\" didn't prove it</p>",
        "id": 125613154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563294
    },
    {
        "content": "<p>this is nothing to do with the naming of the assumption</p>",
        "id": 125613164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563330
    },
    {
        "content": "<p>it was just never added to the local context</p>",
        "id": 125613167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563335
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 125613172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563343
    },
    {
        "content": "<p>let me try again</p>",
        "id": 125613175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524563349
    },
    {
        "content": "<p>Because your context is gigantic</p>",
        "id": 125613178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563363
    },
    {
        "content": "<p>you should keep a close eye on the number of goals</p>",
        "id": 125613180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563369
    },
    {
        "content": "<p>which is displayed at the top of the output</p>",
        "id": 125613183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524563379
    }
]