[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> suggested removing transfer from core and move it into mathlib.  Maybe the biggest positive effect is that we could then use the ⇒ symbol in mathlib.<br>\nI tried just removing the file, but some theorems about integers and dlist are proving using transfer.  Any ideas?  Does anyone want to rewrite the proofs by hand?  Should we just remove the ⇒ notation for 3.4.2?</p>",
        "id": 154832021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547119145
    },
    {
        "content": "<p>Can one move those theorems about integers out of core as well?</p>",
        "id": 154832868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547120216
    },
    {
        "content": "<p>Probably not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span>            <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span>           <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span>            <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span>   <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span>            <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span>      <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span>            <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>        <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span>        <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span>   <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span>       <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">transfer</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 154835519,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547123830
    },
    {
        "content": "<p>Can a more specific script handle them? E.g. search and replace mul with add and other lemmas similarly? Also Can we take dlist out of core?</p>",
        "id": 154853060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547138855
    },
    {
        "content": "<p><code>dlist</code> is not the problem.  Only three examples for <code>dlist</code> use <code>transfer</code>.</p>",
        "id": 154853245,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547138999
    },
    {
        "content": "<p>It's the integers that are problematic.  We prove that the integers form a commutative ring using transfer, I'm not sure we should remove that instance from core.</p>",
        "id": 154853346,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547139050
    },
    {
        "content": "<p>Maybe I should clarify: <code>transfer</code> here switches between two isomorphic representations of the integers.  The definition of <code>int</code> is an inductive type with two constructors 1) non-negative natural number 2) negative number.  The <code>transfer</code> tactic then switches to the much nicer definition using pairs of natural numbers.</p>",
        "id": 154853532,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547139202
    },
    {
        "content": "<p>The proofs for <code>int</code> should be in the git history, iirc. They were not always proved via transfer, but maybe I am thinking of Lean 2.</p>",
        "id": 154853971,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1547139518
    },
    {
        "content": "<p>Doesn't even look so bad.  I thought it was more horrible:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">distrib_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">left_total_rel_int_nat_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">a&#39;</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">left_total_rel_int_nat_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">b&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">left_total_rel_int_nat_nat</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">c&#39;</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_eq</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_mul</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_add</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_add</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rel_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">)))</span><span class=\"err\">^</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover/lean/commit/1f45995c169fb518177dfad5060b5a748e8a3b1f#diff-3e35acfba743354acb6f107e860bdb79\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/1f45995c169fb518177dfad5060b5a748e8a3b1f#diff-3e35acfba743354acb6f107e860bdb79\">https://github.com/leanprover/lean/commit/1f45995c169fb518177dfad5060b5a748e8a3b1f#diff-3e35acfba743354acb6f107e860bdb79</a></p>",
        "id": 154854522,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547139903
    },
    {
        "content": "<p>How are integers used in core? I thought only natural numbers were really needed there</p>",
        "id": 154855637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547140687
    },
    {
        "content": "<p>What about, in 3.4.2, simply freeing up the character ⇒ somehow, while leaving transfer and the instances in place?</p>",
        "id": 154855944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547140950
    },
    {
        "content": "<p>Actually <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> and I would really like to move <code>transfer</code> to mathlib so that we can keep developing it</p>",
        "id": 154856174,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547141166
    },
    {
        "content": "<p>well, <code>transfer</code> is not so important (we can copy it under another name). I guess <code>⇒</code> is more important for some people</p>",
        "id": 154860802,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547145003
    },
    {
        "content": "<p>I can rewrite the proofs for <code>int</code> if required; do the previous proofs work?</p>",
        "id": 154869086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547152331
    },
    {
        "content": "<p>Probably.</p>",
        "id": 154869179,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547152406
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean/pull/1989\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1989\">https://github.com/leanprover/lean/pull/1989</a></p>",
        "id": 154931531,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547227506
    }
]