[
    {
        "content": "<p>We have an important data structure in mathlib hiding <a href=\"https://github.com/leanprover-community/mathlib/blob/146d3d1fa59c091fedaad8a4afa09d6802886d24/src/computability/turing_machine.lean#L163\">here</a> called <code>list_blank</code>, which is essentially a list with an infinite tail of <code>default</code>'s at the end.</p>\n<p>We know that <code>list_blank α</code> is equivalent to <code>ℕ →₀ α</code>. Moreover, <code>list_blank</code> is the natural list-like structure to return for many functions which need to return what is essentially a finitely supported function on <code>ℕ</code>, but also want computability and nice definitions for operations like <code>cons</code>, <code>head</code>, and <code>tail</code>. Examples include:</p>\n<p>- <code>digits</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/e3d2f74c0a460f65bf3529632dc142ce0854615c/src/data/nat/digits.lean\">https://github.com/leanprover-community/mathlib/blob/e3d2f74c0a460f65bf3529632dc142ce0854615c/src/data/nat/digits.lean</a><br>\n      Any number can be thought of as having an infinite list of trailing 0's at the end. Maybe we should refactor <code>digits</code>/prove that <code>digits</code> factors through <code>list_blank</code>. Presumably this would give many lemmas (like last_digit is nonzero) for free.</p>\n<p>- <code>nat.bits</code>: Same as above, but we can imagine an infinite trail of <code>ff</code>'s.<br>\n  - <code>polynomial</code>: This captures the general case; a polynomial has an infinite trailing list of <code>0</code> coefficients. Indeed, this topic came up in the <a href=\"https://github.com/leanprover-community/mathlib/pull/15161#issuecomment-1210180418\">PR to make a computable implementation of polynomials</a>.</p>\n<p>One stumbling block is that the current <code>list_blank</code> implementation fills the blanks with <code>default</code>, whereas some of these require <code>0</code> from <code>has_zero</code>. Should we refactor <code>list_blank</code> to take an explicit default value, so that we can use <code>list_blank</code> in these places?</p>",
        "id": 294134215,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1660843827
    },
    {
        "content": "<p>I don't think it would be good to use 0 as the default value, since I think it's probably mostly used for Turing machine tapes, which might want to use zero as something distinct from blank.</p>",
        "id": 294347461,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660936453
    },
    {
        "content": "<p>I would be fine with a refactor, but then I have never used this def, and I don't know how much additional effort it would impose on people trying to use the code. Perhaps what would be best would be to define a new data structure that specifies an element, and then redefine <code>list_blank</code> in terms of that with an <code>inhabited</code> argument.</p>",
        "id": 294347623,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660936553
    },
    {
        "content": "<p>Regardless of how we decide to refactor, I think it probably makes sense to split this initial segment of the file off of turing_machine.lean, since it seems like there are other use cases</p>",
        "id": 294347904,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660936702
    },
    {
        "content": "<p>I’ll write a PR for this if you haven’t, will report back</p>",
        "id": 294357008,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660940463
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16160\">#16160</a> I made the mistake of touching a low file, so I'm going to wait for CI to compile this before trying to work more on it.</p>",
        "id": 294364310,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660943817
    },
    {
        "content": "<p>This looks great. Possibly <code>headd</code> could be written as <code>nthd 0</code> or <code>head'.get_or_else</code> if you want to avoid touching low level files.</p>\n<p>I’ll eventually try havé <code>digits</code> have a lemma showing that it factors through list_blank.</p>",
        "id": 294368716,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1660946142
    }
]