[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"/\"</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">R0</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">R1</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">R0</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">R</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">R1</span>\n\n\n<span class=\"kd\">axiom</span> <span class=\"n\">opp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">opp</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">plus</span>\n\n\n<span class=\"kd\">axiom</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mult</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">plus_opp_r</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mult_inv_r</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">plus_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mult_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">lt_is_not_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">r0_lt_1</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 293702353,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1660651562
    },
    {
        "content": "<p>This is not quite Real numbers, since 0 has properly defined inverse</p>",
        "id": 293702731,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1660651691
    },
    {
        "content": "<p>Someone must have given this number system a name before.</p>",
        "id": 293702841,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1660651744
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_field\">docs#linear_ordered_field</a>?</p>",
        "id": 293702897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660651768
    },
    {
        "content": "<p>Actually it's more like <code>field</code> + <code>linear_order</code> + <code>0 &lt; 1</code>, because you're not requiring any monotonicity on <code>+</code> and <code>*</code>.</p>",
        "id": 293703086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660651841
    },
    {
        "content": "<p>If you add associativity of addition and multiplication and distributivity (edit: and that 0 and 1 are identities), then you would have a field where 0 has an inverse but 0 != 1.  That would be a <a href=\"https://math.stackexchange.com/questions/377042/allowing-the-zero-element-in-a-field-to-have-an-inverse\">contradiction</a>.  But since you have no rules on how plus and times play together, I guess you could just have two groups on the same set that have little to do with each other.  For example your + could be the usual addition on the reals.  Then x * y could be shifted plus, namely (x - 1) + (y -1) + 1 or something like that.</p>",
        "id": 293705731,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660652981
    },
    {
        "content": "<p>If you haven’t already, I think you would enjoy learning abstract algebra.</p>",
        "id": 293706607,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660653306
    },
    {
        "content": "<p>Another trivial solution: x + y is always 0 (and -x could be anything including just x) and x * y is always 1.  This works because you don’t even assume 0 and 1 are identities.</p>",
        "id": 293708772,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660654260
    }
]