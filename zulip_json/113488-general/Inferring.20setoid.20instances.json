[
    {
        "content": "<p>I've had a bit of trouble with setoid instances in quotient rings and groups. Changes the brackets around <code>setoid</code> in <code>quotient.induction_on</code> and similar lemmas form <code>[]</code> to <code>{}</code> improves matters a lot. Is there a downside to this approach? There should always only be one possibility for <code>setoid</code> from the type of <code>q</code> right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"err\">⟦</span><span class=\"n\">a</span><span class=\"err\">⟧</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 129811730,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531833028
    },
    {
        "content": "<p>I have also thought the same thing \"why not just infer the relation based on the type of <code>q</code>\".</p>",
        "id": 129812715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531834253
    },
    {
        "content": "<p>I'm guessing you have a type (like, a group) on which you have a relation that depends on some other variable (like, a subgroup) which isn't mentioned in the carrier type?</p>",
        "id": 129812730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531834279
    },
    {
        "content": "<p>I also found these type class arguments annoying to deal with in this kind of situation, although I don't remember what I did about it.<br>\nIt's possible that switching to a different elaboration strategy fixed my problem, and I didn't look into exactly why.</p>",
        "id": 129812795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531834336
    },
    {
        "content": "<p>Or maybe I just used <code>quot</code> methods instead. <a href=\"#narrow/stream/113488-general/topic/elab_as_eliminator\" title=\"#narrow/stream/113488-general/topic/elab_as_eliminator\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/elab_as_eliminator</a></p>",
        "id": 129812897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531834456
    },
    {
        "content": "<p>Yes, now I remember wondering whether mixing <code>quotient</code> with <code>quot.induction_on</code> was a sensible thing to do, and then I saw that TPIL does the same thing in the section on quotients.</p>",
        "id": 129812930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531834521
    },
    {
        "content": "<p>I'm not sure what you mean by carrier type, but basically it's struggling to find the setoid instances for the standard relation for quotienting by an ideal. It's particularly bad when I have two ideals in my context, but at the moment I only have one and it's still struggling.</p>",
        "id": 129814544,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531836391
    },
    {
        "content": "<p>Deleting my instance for preimage of a ring_hom is an ideal helps, even though my lemma has nothing to do with preimages or ring_homs.</p>",
        "id": 129815018,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531836883
    },
    {
        "content": "<p>By carrier I mean the type that you're putting an equivalence relation on.</p>",
        "id": 129815052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531836932
    },
    {
        "content": "<p>in this case, (the underlying type of) the ring</p>",
        "id": 129815143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531837027
    },
    {
        "content": "<p>The equivalence relation here depends on the ideal I, which cannot be inferred from the ring or from instance synthesis.<br>\nBasically, when you have an instance which has non-typeclass variables to the left of the colon which don't also appear to the right of the colon, I don't see how Lean can ever select the instance by type class inference.</p>",
        "id": 129815513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531837465
    },
    {
        "content": "<p>We certainly don't want Lean to guess which ideal we want to quotient. And one can always add local setoid instances if we have a whole section of file where the ideal is fixed.</p>",
        "id": 129815620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531837584
    },
    {
        "content": "<p>@pat</p>\n<blockquote>\n<p>We certainly don't want Lean to guess which ideal we want to quotient. And one can always add local setoid instances if we have a whole section of file where the ideal is fixed.</p>\n</blockquote>\n<p>Not actually that easy to add a local attribute that depends on a variable.</p>",
        "id": 129816521,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531838601
    },
    {
        "content": "<p>I see Mario merged your PR (before anyone added your name to the authors list). Did you solve your instance issue?</p>",
        "id": 129836199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531862589
    },
    {
        "content": "<p>oops</p>",
        "id": 129836266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531862653
    },
    {
        "content": "<p>Not really. I think in general we shouldn't be using type class inference for quotient rings and groups, and maybe we need some infrastructure to deal with that, like a whole load of new quotient lemmas. But I'm not sure. I usually find a way round it, but it's a constant nuisance</p>",
        "id": 129836295,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531862727
    },
    {
        "content": "<p>Here's another type class inference issue which Keji pointed out to me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_subgroup</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"err\">∩</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">Hyp</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>-&gt;</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nG : Type,\n_inst_1 : group G,\nH1 H2 : set G,\n_inst_2 : is_subgroup H1,\n_inst_3 : is_subgroup H2\n⊢ is_submonoid (H1 ∩ H2)\n</pre></div>\n\n\n<p>I just wanted to populate the fields of the structure but I couldn't figure out an easy way to do so without proving <code>is_submonoid (H1 ∩ H2)</code> first and making it an instance</p>",
        "id": 129836545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531863045
    },
    {
        "content": "<p>Is there a way round this?</p>",
        "id": 129836549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531863056
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"err\">∩</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>state after first line looks good to me</p>",
        "id": 129836743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531863322
    },
    {
        "content": "<blockquote>\n<p>I just wanted to populate the fields of the structure but I couldn't figure out an easy way to do so without proving <code>is_submonoid (H1 ∩ H2)</code> first and making it an instance</p>\n</blockquote>\n<p>It's probably good practice to make <code>inter.is_submonoid</code> an instance first anyway.</p>",
        "id": 129837625,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531864461
    },
    {
        "content": "<p>Yeah but I was teaching.</p>",
        "id": 129837657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531864528
    },
    {
        "content": "<p>I just wanted it to look relatively easy. In the end I re-defined is_subgroup (and didn't import it)</p>",
        "id": 129837666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531864552
    },
    {
        "content": "<p>Full proof could be either</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"err\">∩</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a_in</span> <span class=\"n\">b_in</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a_in</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b_in</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a_in</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b_in</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">Hyp</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"err\">∩</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a_in</span> <span class=\"n\">b_in</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a_in</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b_in</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a_in</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b_in</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">Hyp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">Hyp</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>depending whether you want to get tactical or not. I'm not sure I understand your question</p>",
        "id": 129837913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531864822
    },
    {
        "content": "<p>The teaching advantage of the tactical way is what I showed in my first answer: Lean tells you want it wants, even putting names on questions</p>",
        "id": 129837927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531864863
    },
    {
        "content": "<p>I'm going to make a rather radical suggestion and suggest that perhaps <code>subgroup G</code> should be a type on its own, like <code>filter</code></p>",
        "id": 129838009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531864947
    },
    {
        "content": "<p>I am surprised the first one works! With no structure fields just the <code>{}</code> Lean complains it has no <code>inv_mem</code> and that type class inference fails to prove <code>is_submonoid</code>. I hadn't expected that just declaring the fields anyway would work.</p>",
        "id": 129838032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531865010
    },
    {
        "content": "<p>In particular Lean doesn't put all names on questions -- you have to look at what <code>is_submonoid</code> wants -- but that's not too hard.</p>",
        "id": 129838104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531865105
    },
    {
        "content": "<p>Did you try my suggestion with three <code>sorry</code>?</p>",
        "id": 129838122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531865137
    },
    {
        "content": "<p>The crucial part is Simon's <code>refine_struct</code> tactic</p>",
        "id": 129838129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531865157
    },
    {
        "content": "<p>Mario, do you mean bundling the subset and its properties?</p>",
        "id": 129838188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531865215
    },
    {
        "content": "<p>yes, and adding a <code>has_mem</code> instance and so on</p>",
        "id": 129838197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865246
    },
    {
        "content": "<p>How does that solve the <code>setoid</code> problem?</p>",
        "id": 129838198,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865255
    },
    {
        "content": "<p>what setoid?</p>",
        "id": 129838200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865269
    },
    {
        "content": "<p>it solves the typeclass inference problem</p>",
        "id": 129838244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865291
    },
    {
        "content": "<p>he wants quotients by subgroups</p>",
        "id": 129838246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531865296
    },
    {
        "content": "<p>The problem about inferrinf <code>setoid</code> instances for quotient groups and rings.</p>",
        "id": 129838247,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865298
    },
    {
        "content": "<p>example?</p>",
        "id": 129838248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865307
    },
    {
        "content": "<p>I don't have an MWE right now, but having two subgroups around means it uses the wrong one sometimes.</p>",
        "id": 129838266,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865347
    },
    {
        "content": "<p>I don't mean MWE, just sketch the problem. I don't see how two quotient groups with different subgroups can be confused</p>",
        "id": 129838337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865430
    },
    {
        "content": "<p>It always tries to use the setoid instance with the subgroup which comes last in the statement of the theorem.</p>",
        "id": 129838361,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865499
    },
    {
        "content": "<p>why are you inferring a setoid instance?</p>",
        "id": 129838410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865540
    },
    {
        "content": "<p>Because the setoid argument to <code>quotient.induction_on</code> is a <code>[]</code> argument for some reason</p>",
        "id": 129838430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531865598
    },
    {
        "content": "<p>you could use <code>quot.induction_on</code>...</p>",
        "id": 129838483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865672
    },
    {
        "content": "<p>What do you suggest in place of <code>quotient.mk</code>?</p>",
        "id": 129838552,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865783
    },
    {
        "content": "<p>And there's no <code>quot.lift_on₂</code></p>",
        "id": 129838565,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865853
    },
    {
        "content": "<p><code>quot.mk</code> of course</p>",
        "id": 129838568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865876
    },
    {
        "content": "<p>Then I have a really long expression.</p>",
        "id": 129838612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865893
    },
    {
        "content": "<p>You usually want to make custom versions of all these anyway</p>",
        "id": 129838619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531865938
    },
    {
        "content": "<p>A <code>has_coe</code> instance seems like a sensible substitute.</p>",
        "id": 129838620,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865939
    },
    {
        "content": "<p>How about <code>quotient.exact</code>?</p>",
        "id": 129838634,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531865980
    },
    {
        "content": "<p>You can always use <code>@</code> if you like the <code>quotient</code> version</p>",
        "id": 129838685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531866015
    },
    {
        "content": "<p>just put <code>(id _)</code> in the typeclass slot and it will unify for it instead of use typeclass inference</p>",
        "id": 129838695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531866064
    },
    {
        "content": "<p>I had a go at following Mario's recommendation and not using type class inference for setoids for quotient groups. I wanted to find a solution that made it easy, and initially it wasn't. <br>\nI used the follwing definitions</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">quotients</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₃</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">,</span> <span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">s₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">,</span> <span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂&#39;</span> <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">s₁</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">β</span> <span class=\"n\">s₂</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">β</span> <span class=\"n\">s₂</span> <span class=\"n\">a₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₃&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s₃</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₃</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₃</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a₃</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s₃</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a₃</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"n\">q₃</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₃</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"n\">q₃</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">quotients</span>\n</pre></div>\n\n\n<p>Using these definitions everything was easy. They differ from the library definitions in two ways, the absence of the <code>elab_strategy</code> attribute, not sure what this does, but it makes stuff harder for some reason, and the use of <code>{}</code> instead of <code>[]</code> for setoids. Using <code>quot</code> versions of these lemmas has two problems, one is the <code>elab_strategy</code> attribute, and the other is that <code>quot.lift_on₂</code> as well as <code>quot.exact</code> are not provable without the relations being equivalence relations.</p>",
        "id": 130011028,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532107122
    },
    {
        "content": "<p>Hm, this sounds like reason enough to PR these theorems. (Since we all know that mathlib is collecting patches of core lean theorems.) I actually have no idea what the <code>elab_strategy</code> attribute does, I've never heard of it</p>",
        "id": 130014064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532110771
    }
]