[
    {
        "content": "<p>Hello. I'm trying to translate categorical thinnings (aka order preserving embedings) from Agda to Lean. As used in Co-De-Bruijn indices. <a href=\"https://arxiv.org/abs/1807.04085\">https://arxiv.org/abs/1807.04085</a><br>\nJust before posting this ... I thought surely mathlib has a generalization, which it does <code>rel_embedding / order_embedding</code>, and it seems the function I'm after is called <code>trans</code>.</p>\n<p>I'm using Lean 4, though adapting this to Lean 3 resulted in \"bad patterns\" as I reuse <code>k</code> in each pattern. If Lean 4 supports this, it'd be worth a mention in the differences against Lean 3 in its manual!</p>\n<p>Can someone help me fix the type error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Equivalently (ks : List K) × BitVec ks.length → List K</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Thinning</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>                      <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">[]</span>     <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span>      <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Thinning</span>\n  <span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">empty</span>\n<span class=\"kd\">end</span> <span class=\"n\">Thinning</span>\n\n<span class=\"c1\">-- CoDeBruijn.lean:11:7: error: type mismatch</span>\n<span class=\"c1\">--   skip k r</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   Thinning b (k :: ?m.826)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Thinning b c</span>\n</code></pre></div>",
        "id": 230568354,
        "sender_full_name": "SnowFox",
        "timestamp": 1615920008
    },
    {
        "content": "<p>You need to include <code>a b c</code> in the pattern</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Thinning</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>                      <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">[]</span>     <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span>      <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Thinning</span>\n  <span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">empty</span>\n<span class=\"kd\">end</span> <span class=\"n\">Thinning</span>\n</code></pre></div>",
        "id": 230580708,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615924749
    },
    {
        "content": "<p>Ah! Thanks! I tried that and got lost with the lack of Pi/Π notation now... meant to figure that out. Okay, unexpected binder syntax position.... :)</p>",
        "id": 230582147,
        "sender_full_name": "SnowFox",
        "timestamp": 1615925258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> We have recently added a feature to make this kind of definition more convenient to write. Lean will add the <code>_</code>s for you, and you can write your example as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Thinning</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>                      <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">[]</span>     <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span>      <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ks</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Thinning</span>\n  <span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Thinning</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">keep</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">keep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">empty</span>\n<span class=\"kd\">end</span> <span class=\"n\">Thinning</span>\n</code></pre></div>\n<p>You need the nightly build.</p>",
        "id": 232616842,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1617206394
    }
]