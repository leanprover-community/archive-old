[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You have suggested renaming Inf_plus into Inf_add. What is your reasoning behind it?</p>",
        "id": 259199813,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635318228
    },
    {
        "content": "<p>Uniformity with the rest of the library. It may be worth reading <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>.</p>",
        "id": 259200409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635318697
    },
    {
        "content": "<p>Thanks, such a file was what I was looking for!</p>",
        "id": 259200965,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635319182
    },
    {
        "content": "<p>Meanwhile, I have created a PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10001\">#10001</a> where I add two lemmas proved by refl to data/nat/basic</p>",
        "id": 259201929,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635319870
    },
    {
        "content": "<p>(By the way, maybe we should move this conversation to general? It seems have grown out of scope of \"Is there code for X\" quite a while ago)</p>",
        "id": 259202119,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635320030
    },
    {
        "content": "<p>I think I'll wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/10001\">#10001</a> to be accepted before making a PR about Inf_add.</p>",
        "id": 259205141,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635322204
    },
    {
        "content": "<p>Next, I am looking into redefining of <code>order_embedding_of_set</code> and <code>order_iso_of_nat</code> in terms of <code>nth</code>. Currently, we have the proof that <code>nth</code> is the same as <code>order_iso_of_nat</code>. If we change the definition of <code>order_iso_of_nat</code> to be just <code>nth</code>, this prove would become the proof of the fact that <code>order_iso_of_nat</code> equals some scary arcane expression (which is currently the definition):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rel_iso.of_surjective</span> <span class=\"o\">(</span><span class=\"n\">rel_embedding.order_embedding_of_lt_embedding</span>\n  <span class=\"o\">(</span><span class=\"n\">rel_embedding.nat_lt</span> <span class=\"o\">(</span><span class=\"n\">nat.subtype.of_nat</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.subtype.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"n\">nat.subtype.of_nat_surjective</span>\n</code></pre></div>\n<p>Do we want to have such a characterisation? Would it be useful for anything? Or was it used simply because there was nothing better to write instead?</p>",
        "id": 259208768,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635324476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409003\">Vladimir Goryachev</span> <a href=\"#narrow/stream/113488-general/topic/counting.20function/near/259205141\">said</a>:</p>\n<blockquote>\n<p>I think I'll wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/10001\">#10001</a> to be accepted before making a PR about Inf_add.</p>\n</blockquote>\n<p>Yay, my first PR merged, even if a trivial one : )</p>\n<p>I have made <a href=\"https://github.com/leanprover-community/mathlib/issues/10008\">#10008</a></p>",
        "id": 259292040,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635362065
    },
    {
        "content": "<p>I felt just the same when my first PR, defining the complex numbers and proving they were a ring, was accepted :-)</p>",
        "id": 259292854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635362437
    },
    {
        "content": "<p>My very first PR was swapping two arguments on an obscure lemma for dot notation to work</p>",
        "id": 259294667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635363309
    },
    {
        "content": "<p>Ah, I have found the file, it is actually <code>data/equiv/denumerable</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , in this thread we have defined functions <code>nth</code> and <code>count</code>, same as your <code>of_nat</code> and <code>to_fun_aux</code> of <code>data/equiv/denumerable</code> (I could not find the functionality when I asked for it in the \"Is there code for X\" channel). However, here we have developed some of the basic results further, including counting elements of finite subsets of N. Could you please give your opinion on how we should integrate the things we have defined and proved into what you have defined and proved earlier? Thank you for your attention.</p>",
        "id": 259296061,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635363921
    },
    {
        "content": "<p>The content of this thread is not quite the same as what <code>denumerable</code> does. <code>denumerable</code> is about coming up with some mapping to/from <code>nat</code>, but it is not an increasing function (necessarily), and indeed in most applications there is no notion of increasing since the source type has no ordering (besides the one it inherits from the bijection to <code>nat</code>). The <code>nth</code> and <code>count</code> functions are useful but probably wouldn't fit as a sub-part or application of <code>denumerable</code>. I think you should just make a new file <code>data.nat.nth</code> about this function.</p>",
        "id": 259296660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364220
    },
    {
        "content": "<p>Oh, I see now what you mean about <code>to_fun_aux</code>. I guess the <code>denumerable</code> implementation for infinite sets is the same as your function</p>",
        "id": 259296947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364367
    },
    {
        "content": "<p>I totally forgot that existed</p>",
        "id": 259297184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364467
    },
    {
        "content": "<p>Yes, so in the comments to the PR it was advised to not have two distinct definitions implementing the same thing.</p>",
        "id": 259297274,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635364511
    },
    {
        "content": "<p>The usual solution to that is to either relate them or use one in place of the other</p>",
        "id": 259297313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364534
    },
    {
        "content": "<p>and prove the theorems in the union of both developments</p>",
        "id": 259297363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635364559
    },
    {
        "content": "<p>Do you have any opinion on whether should <code>of_nat</code> be redefined on terms of <code>nth</code> or vice versa?</p>",
        "id": 259299058,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635365265
    },
    {
        "content": "<p>assuming you have looked at the proof of <code>of_nat</code> and mined the ideas from it, I think denumerable could just be referencing your version. I'm fairly sure that no one is using the denumerable instance for infinite sets, it was just proven to show that it's true</p>",
        "id": 259300398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635365898
    },
    {
        "content": "<p>Thank you! Then, I guess, I'll try to redefine <code>of_nat</code> in terms of <code>nth</code>.</p>",
        "id": 259300714,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635366048
    },
    {
        "content": "<p>Well, I try to import count into denumerable, and I get an import cycle <code>data.nat.count &lt; set_theory.fincard &lt; set_theory.cardinal &lt; data.set.countable &lt; data.equiv.list &lt; data.equiv.denumerable &lt; data.nat. count</code>. Wow.</p>",
        "id": 259302067,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635366687
    },
    {
        "content": "<p>why is <code>fincard</code> in the file?</p>",
        "id": 259304437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635367868
    },
    {
        "content": "<p>It's used to state lemmas for finite and infinite sets simultaneously by looking at its cardinal. I strongly voted against those because it's either finite or infinite here and nobody uses cardinals anyway.</p>",
        "id": 259310275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635370618
    },
    {
        "content": "<p>I'd side with Yaёl here. I think the cardinal lemmas didn't quite fit: set-theoretic cardinals should come after describing how to count, not in the same file. This was okay as it did not break anything, but now I think it is a legitimate reason to remove them. My default action would be to delete the lemmas, but anyone is free to move them to separate file like nat/count_cardinal or something.</p>\n<p>But that would all come a bit further, as now I'd be focused at PR-ing simple lemmas which precede the count lemmas itself.</p>",
        "id": 259345813,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635403049
    },
    {
        "content": "<p>For PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10008\">#10008</a>, I was advised to make some changes, and made them now. Is it true that to ask for a review again, I simply need to add \"awaiting review\" label, and it will get reviewed (at some point)?</p>",
        "id": 259492056,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635493459
    },
    {
        "content": "<p>Yep</p>",
        "id": 259492132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1635493541
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 259492215,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635493604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> If you make sure your PR ends up on <a href=\"https://bit.ly/3zVLgqR\">#queue</a> than it has a very high chance of getting reviewed (-;<br>\nThat list is made up of PRs that have the <code>awaiting review</code> label, are not blocked by other PRs, don't have merge conflicts, are not waiting for a CI run, etc... (see the filters at the top of the list).</p>",
        "id": 259493157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635494298
    },
    {
        "content": "<p>I left a few more stylistic comments.</p>",
        "id": 259493472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635494499
    },
    {
        "content": "<p>Thanks, changes pushed!<br>\nI hope to get used to placing spaces before colons soon, it just felt weird, kind of like placing spaces before commas : )</p>",
        "id": 259503738,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1635501512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , I am trying to implement the changes you propose for the Inf_add lemma, but Lean says that it does not know what is <code>le_cInf</code> in the proof of Inf_add'. How do I fix this?</p>",
        "id": 260664311,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636382064
    },
    {
        "content": "<p>That's weird... Try to see whether you indeed import <code>order.conditionally_complete_lattice</code> because that's where it is: <a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#le_cInf\">https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#le_cInf</a></p>",
        "id": 260664436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636382125
    },
    {
        "content": "<p>Ah, sorry, it actually knows what it is, it has some other problem...</p>",
        "id": 260665274,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636382528
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">le_of_not_lt</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">le_cInf</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 260665663,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636382713
    },
    {
        "content": "<p>And that's what you get with my suggestion and no other modification?</p>",
        "id": 260665855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636382787
    },
    {
        "content": "<p>Let me recheck it quickly</p>",
        "id": 260666005,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636382864
    },
    {
        "content": "<p>Yes, if I do no other modification and paste your code into nat/lattice, deleting my previous proofs of Inf_add and Inf_add', I get this error messages.</p>",
        "id": 260667445,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636383388
    },
    {
        "content": "<p>I think I see what the second error message is saying though - it is expected to say something about nat.Inf, but the lemma speaks about general Inf instead. I have had this appearing before, and had to type nat.Inf in proofs manually. Here, however, there is no nat version of le_cInf, and I can not do that.</p>",
        "id": 260667837,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636383528
    },
    {
        "content": "<p><code>nat.Inf</code> <strong>is</strong> a <code>cInf</code> (through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.conditionally_complete_linear_order_bot\">docs#nat.conditionally_complete_linear_order_bot</a>)</p>",
        "id": 260668634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636383835
    },
    {
        "content": "<p>Well, I don't know, it was just a hypothesis for what's wrong...</p>",
        "id": 260669278,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636384093
    },
    {
        "content": "<p>If I place <code>apply le_cInf</code> before this <code>refine</code>, the error message is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>",
        "id": 260669948,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636384394
    },
    {
        "content": "<p>The proof works on your computer though, right?</p>",
        "id": 260670811,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636384755
    },
    {
        "content": "<p>It worked on Gitpod.</p>",
        "id": 260671496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636385056
    },
    {
        "content": "<p>Okay... Should I just press \"commit suggestion\" in github, and see if it compiles there?</p>",
        "id": 260671954,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636385265
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 260672127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636385313
    },
    {
        "content": "<p>If it fails, I'll fix it.</p>",
        "id": 260672144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636385320
    },
    {
        "content": "<p>Thank you. Done!</p>",
        "id": 260672291,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636385392
    },
    {
        "content": "<p>ALso, I can PR the few <code>nat.find</code> lemmas I came up with separately if you want.</p>",
        "id": 260672466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636385447
    },
    {
        "content": "<p>I am fine both ways here.</p>",
        "id": 260672602,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636385496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , it did not compile on the server, got the error message I was speaking about.</p>",
        "id": 260765384,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636445447
    },
    {
        "content": "<p>Will look into that</p>",
        "id": 260765400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636445465
    },
    {
        "content": "<p>I also have a question about the lemma <code>list.range_add</code>. It is stated about list.range, but the list.range file prompts to do any math about ranges with list.Ico instead. So, shouldn't this lemma be stated about Ico instead, as well as the lemmas <code>multiset.range_add</code>and <code>finset.range_add</code>?</p>",
        "id": 260841198,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636483276
    },
    {
        "content": "<p>So anyway, I have changed the coed for Inf_add' into something that compiles.</p>",
        "id": 261006628,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636558447
    },
    {
        "content": "<p>I have another question. How do I change a name of a lemma in mathlib in a way that changes the name everywhere where it is used?</p>",
        "id": 261006805,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636558519
    },
    {
        "content": "<p>egergious use of ctrl+f :) ctrl+shift+f usually works in vscode</p>",
        "id": 261007132,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636558657
    },
    {
        "content": "<p>Ah! I was fixing it just now!</p>",
        "id": 261008066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636559057
    },
    {
        "content": "<p>I would still be grateful for a more eloquent proof than mine : )</p>",
        "id": 261008641,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636559305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Will it work for all of mathlib though, or for the current file only?</p>",
        "id": 261008720,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636559350
    },
    {
        "content": "<p>The problem was just that the instance was defined below. I moved the lemma and now it's fine.</p>",
        "id": 261009334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636559587
    },
    {
        "content": "<p>I see! Thank you very much.</p>",
        "id": 261009920,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1636559793
    }
]