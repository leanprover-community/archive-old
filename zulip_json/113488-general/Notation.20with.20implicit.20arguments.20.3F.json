[
    {
        "content": "<p>I would like to denote the complement of A : set X by <code>X \\ A</code>. I tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`</span><span class=\"err\">\\</span><span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">A</span>\n</code></pre></div>\n\n\n<p>but this has no effect, Lean still prints <code>-A</code>. Is there a way to do this?</p>",
        "id": 200833428,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592168510
    },
    {
        "content": "<p>I think that the order in which notation gets declared is important... but I don't understand the system very well....</p>",
        "id": 200850003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592197452
    },
    {
        "content": "<p>I think Lean doesn't like your notation very much, since <code>X</code> is determined by the type of <code>A</code>. </p>\n<p>Here is an imperfect workaround:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">my_neg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">s</span>\n<span class=\"kn\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`</span><span class=\"err\">\\</span><span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">my_neg</span> <span class=\"n\">X</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">\\</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span>  <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>However, now <code>X \\ A</code> is not syntactically the same as <code>- A</code>, so after rewriting with, say, <code>rw [set.union_eq_compl_compl_inter_compl]</code> you will still see <code>- A</code>.</p>",
        "id": 200915341,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592239688
    },
    {
        "content": "<p>Upon further investigation, there seems to be a bug with the printing of notation declared using <code>@</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- uncomment one</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">⁻</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span> <span class=\"c1\">-- prints &amp; parses correctly</span>\n<span class=\"c1\">-- notation A `⁻` := @set.compl _ A -- parses correctly, doesn&#39;t print</span>\n<span class=\"c1\">-- notation A `⁻` := @set.compl A -- parses incorrectly (as expected), but still prints!</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>  <span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"err\">⁻</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200916740,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592240296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that order indeed matters, but you can override it with <code>priority</code>, just as for instances:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">¹</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span>\n<span class=\"kn\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">²</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>  <span class=\"o\">}</span>\n\n<span class=\"kn\">notation</span> <span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">³</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span>\n<span class=\"kn\">notation</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"err\">⁴</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200917268,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592240534
    }
]