[
    {
        "content": "<p>How do I get a noncomputable integer (without using <code>constant</code>)? Sorry for asking. I've spent years completely ignoring computability and it's time I got the hang of it.</p>",
        "id": 243430356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624303408
    },
    {
        "content": "<p>Is the Busy Beaver function defined? That'd probably be the easiest way</p>",
        "id": 243430597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624303542
    },
    {
        "content": "<p>I'd just if-then-else with the classical locale:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>Bonus points if you use a condition that is actually not computable.</p>",
        "id": 243430885,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624303679
    },
    {
        "content": "<p>Another one that uses the axiom of choice, but more directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 243431001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624303730
    },
    {
        "content": "<p>The fun part about if-then-else is that you can actually prove <code>n = 42</code>, and could e.g. extend norm_num to compute n.  But it's still noncomputable because it isn't written the right way.</p>",
        "id": 243431211,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624303814
    },
    {
        "content": "<p>Are there any lean/mathlib axioms that trigger <code>noncomputable</code> other than <code>classical.choice</code>?</p>",
        "id": 243431451,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624303927
    },
    {
        "content": "<p>Presumably what Lean marks as <code>noncomputable</code> differs from what people interested in computability consider noncomputable, right? (Is it a strict superset?) Does <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s work in the <code>computability</code> folder have a formalization of computable integers?</p>",
        "id": 243431771,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1624304095
    },
    {
        "content": "<p>If you define your own <code>constant x : ℤ</code> then presumably anything using it is also noncomputable</p>",
        "id": 243431809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624304116
    },
    {
        "content": "<p>I suppose another way to get noncomptuable integers is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree\">docs#polynomial.degree</a>.  It only knows <em>that</em> the coefficients have finite support, but it doesn't pretend to know what the support is exactly.  This is like <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s example in that you can in principle compute the degree if you supply more information.</p>",
        "id": 243432480,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624304453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/noncomputable.20integer/near/243431771\">said</a>:</p>\n<blockquote>\n<p>Presumably what Lean marks as <code>noncomputable</code> differs from what people interested in computability consider noncomputable, right? (Is it a strict superset?)</p>\n</blockquote>\n<p>Right.  For example in computability theory, <code>(classical.choice infer_instance : ℕ)</code> is perfectly computable (although we typically only say \"computable\" for sets or functions).</p>",
        "id": 243433627,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624304979
    },
    {
        "content": "<blockquote>\n<p>Does <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>'s work in the <code>computability</code> folder have a formalization of computable integers?</p>\n</blockquote>\n<p>Yes and no.  Every integer is computable, so there's nothing to formalize.  But it does have a formalization of computable functions <code>ℕ → ℤ</code> (actually <code>α → β</code> for any <code>α</code> and <code>β</code> that have a <code>primcodable</code> instance).</p>",
        "id": 243433845,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624305069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/noncomputable.20integer/near/243431451\">said</a>:</p>\n<blockquote>\n<p>Are there any lean/mathlib axioms that trigger <code>noncomputable</code> other than <code>classical.choice</code>?</p>\n</blockquote>\n<p>No, the other axioms (<code>propext</code> and <code>quot.sound</code>) are computable.  (Even <code>sorry</code> is computable.)</p>",
        "id": 243434045,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624305158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/noncomputable.20integer/near/243433845\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>'s work in the <code>computability</code> folder have a formalization of computable integers?</p>\n</blockquote>\n<p>Yes and no.  Every integer is computable, so there's nothing to formalize.  But it does have a formalization of computable functions <code>ℕ → ℤ</code> (actually <code>α → β</code> for any <code>α</code> and <code>β</code> that have a <code>primcodable</code> instance).</p>\n</blockquote>\n<p>Indeed, it's pretty easy to prove that <code>const foo = 0</code> is decidable using the computability theory library, because it is decided by one of the functions <code>const true</code> and <code>const false</code></p>",
        "id": 243434867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624305600
    },
    {
        "content": "<p>this is one of the consequences of using a classical metatheory when reasoning about computability</p>",
        "id": 243434911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624305604
    },
    {
        "content": "<p>oh, gabriel already said this</p>",
        "id": 243435000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624305653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/noncomputable.20integer/near/243431451\">said</a>:</p>\n<blockquote>\n<p>Are there any lean/mathlib axioms that trigger <code>noncomputable</code> other than <code>classical.choice</code>?</p>\n</blockquote>\n<p>Any axiom will trigger <code>noncomputable</code>, but any noncomputable term nested in a type or proof becomes computable again. So while lean/mathlib has three axioms, two of them are props and so are trivially computable and only <code>classical.choice</code> is properly noncomputable</p>",
        "id": 243435318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624305813
    }
]