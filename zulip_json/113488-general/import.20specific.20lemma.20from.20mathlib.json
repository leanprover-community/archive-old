[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span> <span class=\"c1\">-- I only want to import `nat.pos_iff_ne_zero`</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">add_succ</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">add_one</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">)</span>\n\n<span class=\"bp\">//</span> <span class=\"n\">invalid</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">zero_add'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declaredLean</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>I want to define my own <code>zero_add</code>,<code>succ_add</code>, <code>add_comm</code>, <code>add_assoc</code> and so on.</p>\n<p>Can I import only <code>nat.pos_iff_ne_zero</code> in <code>data.nat.basic</code>?</p>\n<p>In JavaScript I can</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">pos_iff_ne_zero</span> <span class=\"nx\">as</span> <span class=\"nx\">pos_iff_ne_0</span><span class=\"p\">,</span> <span class=\"nx\">add_zero</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'./data/nat/basic.js'</span><span class=\"p\">;</span>\n</code></pre></div>\n\n<p>And it will not import other useless variables.</p>",
        "id": 213172285,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602602735
    },
    {
        "content": "<p>I asked a similar question recently and the answer is no, you unfortunately can't. Possible workaround: define your lemmas in a separate namespace.</p>",
        "id": 213173876,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1602603316
    },
    {
        "content": "<p>Will lean 4 support this?<br>\nThis is really helpful for users.</p>",
        "id": 213174059,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602603380
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#importing-files\">Importing Files</a></p>\n<blockquote>\n<p>Importing is transitive. In other words, if you import foo and foo imports bar, then you also have access to the contents of bar, and do not need to import it explicitly.</p>\n</blockquote>\n<p>This approach ignores encapsulation of module.</p>\n<hr>\n<p>If library provider import some library like <code>tactic.suggest</code>, it will cause users also import this by accident.</p>\n<p>Moreover, if library import other library include some lemma which has the same name with user's lemma, it will cause error.</p>",
        "id": 213177979,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602604899
    },
    {
        "content": "<p>I don't think this is all that different to how things work in C - you can define your own <code>printf</code> in <code>main.c</code>, but doing so is a really bad idea, as you'll get linker errors as soon as you pull in any code that uses the real printf.</p>\n<p>In my mind the problem is either;</p>\n<ul>\n<li>Mathlib is putting things in the global namespace that it should be putting in a subnamespace (ie, the C++ model)</li>\n<li>Your code is working in the global namespace but should be working in a subnamespace (ie, the java model)</li>\n</ul>",
        "id": 213180034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602605705
    },
    {
        "content": "<p>c imports are not a great import system, though. more modern programming languages generally do not use the c style import mechanism</p>",
        "id": 213187380,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602609115
    },
    {
        "content": "<p>The comparison to the C import model is superficial at best. I think comparing to C#, Haskell or Coq might be more interesting</p>",
        "id": 213187739,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602609280
    },
    {
        "content": "<p>it does work like C though right now, in that when you import something you get a bunch of stuff added to the global namespace</p>",
        "id": 213187790,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602609303
    },
    {
        "content": "<p>the C# model is better - when you do <code>using System;</code> in a C# library it doesn't make the system libraries visible at the top level for libraries that import your library</p>",
        "id": 213187952,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602609369
    },
    {
        "content": "<p>The same holds for <code>open</code> in Lean. You <code>open</code> a namespace and its names become available in the enclosing section or namespace. The effect does not extend beyond the current file</p>",
        "id": 213188329,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602609507
    },
    {
        "content": "<p>There was a brief discussion about plans for a module system in Lean 4 <a href=\"#narrow/stream/113488-general/topic/XenaProject.20blog.20posts/near/202821947\">here</a>.</p>",
        "id": 213189132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602609925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> Maybe you're saying the .NET approach is better, where almost nothing is put in the global namespace except for some builtins, if I remember correctly.  Other than that, I think <code>namespace</code> and <code>open</code> work similarily to <code>namespace</code> and <code>using</code> in C#.</p>",
        "id": 213189159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602609937
    },
    {
        "content": "<p>I guess the difference is that in c# you can just use <code>using</code>. but in Lean you can't really only use <code>open</code>, in practice there are many files that only work with <code>import</code>. or can you get by with only using <code>open</code>?</p>",
        "id": 213189252,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602609968
    },
    {
        "content": "<p>Although, C# doesn't do imports, right? It's up to the \"Solution\" to link everything together?</p>",
        "id": 213189323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602609994
    },
    {
        "content": "<p><code>using</code> in C# is essentially an import</p>",
        "id": 213189350,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602610006
    },
    {
        "content": "<p>I think actually C++ is the isomorphic comparison - <code>import</code> is <code>#include</code>, and <code>open</code> is <code>using namespace</code>.</p>",
        "id": 213189352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602610007
    },
    {
        "content": "<p>yeah I agree - C++ and C have the same #include style</p>",
        "id": 213189397,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602610026
    },
    {
        "content": "<p>but, it does cause problems once codebases get large, which is why C# was basically like \"#include is no longer allowed\"</p>",
        "id": 213189462,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602610065
    },
    {
        "content": "<p>C#'s system allows cyclic dependencies between files, right?  The Lean way helps guarantee that doesn't happen, where you curate the list of <code>import</code>s, which is the list of file dependencies for what is being constructed in the given file.</p>",
        "id": 213189705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602610186
    },
    {
        "content": "<p>The Lean module system is very similar to Common Lisp, where there's a mechanism to ensure you've loaded a file, but there is also a cross-cutting mechanism for putting symbols in different \"packages\" (namespaces).</p>",
        "id": 213189986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602610298
    },
    {
        "content": "<p>I don't think C# allows circular dependencies but I am not that much of a C# expert</p>",
        "id": 213189992,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1602610301
    },
    {
        "content": "<p>I believe dafny has a similar approach to import as C# except that it does internally check that definitions do not have cyclical dependencies or, if they do, that they can be treated as a valid mutually recursive definition</p>",
        "id": 213190033,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602610322
    },
    {
        "content": "<p>I don't think cyclical definitions in C# are a problem at all unless you have <code>struct</code> mutually reference each other. That's because <code>struct</code> defines value types and those values are not represented as pointers to a chunk of memory that contains values but as the values themselves</p>",
        "id": 213190243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1602610430
    },
    {
        "content": "<p>Ultimately the issue here is that Lean assumes that every top-level definition has a unique name within a global namespace, and every <code>.lean</code> file can add names arbitrarily to this namespace. In this respect it indeed resembles C, but the ABI more so than the <code>#include</code> mechanism.</p>",
        "id": 213194299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602612391
    },
    {
        "content": "<p>Even if there was a way to selectively import <code>dense</code> from <code>order.lean</code> and not <code>topology.lean</code>, say, having both definitions would run afoul of this assumption, which is baked into the way <code>name</code> and environments work.</p>",
        "id": 213194527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602612492
    },
    {
        "content": "<p>Other languages have per-module (i.e., file) namespaces, for example, Haskell \"<code>foldr</code> in the <code>Data.List</code> module of version <code>3.4</code> of the <code>base</code> package\", or no global namespace at all (Javascript?)</p>",
        "id": 213194645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602612545
    },
    {
        "content": "<p>Separate to this global namespace issue there is the question of manipulating the \"identifier environment\", i.e., which <code>name</code> a given identifier in a source file will resolve to. For this Lean has the usual <code>open</code>, <code>hiding</code>, <code>renaming</code> etc.</p>",
        "id": 213194872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602612652
    },
    {
        "content": "<p>In principle I see no reason why Lean couldn't use a system like Haskell's, with corresponding <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/src/Language.Haskell.TH.Syntax.html#Name\">changes</a> to <code>name</code>. It would certainly make the semantics of <code>name</code> more involved though.</p>",
        "id": 213196014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602613162
    },
    {
        "content": "<p>I love the fact that we can add lemmas to <code>ring_hom</code> namespace in any file, and access them using dot notation later.</p>",
        "id": 213199699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602614790
    },
    {
        "content": "<p>TypeScript can add variables to specific namespace in any file using <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\">Module Augmentation</a>. And TypeScript is also using per-file module namespace like JavaScript.</p>",
        "id": 213250044,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602656093
    }
]