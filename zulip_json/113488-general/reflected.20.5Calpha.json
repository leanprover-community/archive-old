[
    {
        "content": "<p>This probably counts as a newbie question, sorry:</p>\n<p>What is the purpose of the typeclass instance <code>[reflected \\alpha]</code> which <code>eval_expr</code> takes? Why can the typeclass system work out what it is most of the time, but sometimes when you pass a custom structure withh few boring nested structures it freaks out?</p>",
        "id": 148091917,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542782733
    },
    {
        "content": "<p>it needs to know how to produce expressions from a VM value</p>",
        "id": 148092166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542783126
    },
    {
        "content": "<p>I don't know what the freakout problem is</p>",
        "id": 148092175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542783164
    },
    {
        "content": "<p>Ok<br>\nI will try to concoct</p>",
        "id": 148093813,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542786248
    },
    {
        "content": "<p>Consider this little snippet:</p>\n<div class=\"codehilite\"><pre><span></span>structure a_struct (α : Type) :=\n(val : α)\n\ndef make_struct : a_struct unit := ⟨()⟩\n\nmeta def go (tv : Type) : tactic unit := do\n  e ← tactic.mk_app `make_struct [],\n  tactic.eval_expr (a_struct tv) e,                 /-  failed to synthesize type class instance for ⊢ reflected (a_struct tv) -/\n  tactic.skip\n\n#eval (go unit)\n</pre></div>",
        "id": 148097478,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542791677
    },
    {
        "content": "<p><code>reflected</code> can only be synthesized for closed (parts of) expressions, so <code>go</code> needs a <code>[reflected tv]</code> parameter</p>",
        "id": 148097603,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542791855
    },
    {
        "content": "<p>In principle, is there any way to make something like this:</p>\n<div class=\"codehilite\"><pre><span></span>set_option trace.app_builder true\n\nstructure signature :=\n(α : Type)\n\nstructure container_struct :=\n(c : signature)\n(val : c.α)\n\nmeta def go : tactic unit := tactic.down $ do\n  e ← tactic.up $ tactic.mk_app `container_struct.mk [`({signature . α := nat}), `(2)],\n  tactic.eval_expr container_struct e.down,\n  tactic.up $ tactic.skip\n\nrun_cmd go\n\n-- [app_builder] failed to create an &#39;container_struct.mk&#39;-application,\n-- failed to solve unification constraint for #2 argument (?x_0.α =?= ℕ)\n</pre></div>\n\n\n<p>work? I'd really like to be able to persuade lean to be able to solve that constraint (why can't it? :'()</p>\n<p>(Please mind the <code>tactic.up</code> and <code>tactic.down</code>s, which are just dealing with the fact that <code>container_struct</code> is <code>Type 1</code>.)</p>",
        "id": 148106110,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542802674
    },
    {
        "content": "<p>That might be an issue with <code>tactic.mk_app</code>, can you try with the full <code>tactic.to_expr</code>?</p>",
        "id": 148106771,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542803473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Brilliant! Thanks so much, lots of time of potentially lost work saved</p>",
        "id": 148107099,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542803841
    },
    {
        "content": "<p>Here's another mini-problem. I'm just going to store a variable <code>a</code> of arbitrary type <code>α</code> in a structure in two different ways:</p>\n<div class=\"codehilite\"><pre><span></span>structure struct_v1 (α : Type) :=\n(a : α)\n\nstructure struct_v2 :=\n(α : Type)\n(a : α)\n\ndef v1_def : struct_v1 nat := ⟨3⟩\n\ndef v2_def : struct_v2 := ⟨nat, 3⟩\n</pre></div>\n\n\n<p>Now I'll try to dynamically fetch these structures, first for version 1, and second for version 2:</p>\n<div class=\"codehilite\"><pre><span></span>meta def go_1 (t : Type) : tactic unit :=\n  let n := `v1_def in do\n  e ← tactic.resolve_name n &gt;&gt;= tactic.to_expr,\n\n-- failed to synthesize type class instance for\n-- ⊢ reflected (struct_v1 t)\n  tactic.eval_expr (struct_v1 t) e,\n\n  return ()\n\nrun_cmd go_1 nat\n\nmeta def go_2 : tactic unit := tactic.down $\n  let n := `v2_def in do\n  e ← tactic.up $ tactic.resolve_name n &gt;&gt;= tactic.to_expr,\n  tactic.eval_expr struct_v2 e.down,\n  tactic.up $ return ()\n\nrun_cmd go_2\n</pre></div>\n\n\n<p>I get a reflection error in only the first way, even though the type could be arbitrary in either case. What's the difference between these constructions?</p>",
        "id": 148159497,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542872699
    },
    {
        "content": "<p>In both versions, you need a reflected term of the type. In version 2, that is already part of <code>v2_def</code>(defs are stored as <code>expr</code>s after all). In version 1, you need an explicit <code>[reflected t]</code>. That is the difference.</p>",
        "id": 148162400,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542877205
    }
]