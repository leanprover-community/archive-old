[
    {
        "content": "<p>I'm currently using <code>refine submonoid.closure_induction r.prop (λ x hx, _) _ (λ x y hx hy, _)</code> (where <code>r : ↥some_submonoid</code>), but I was hoping I could use something like <code>induction r using submonoid.closure_induction</code>. Unfortunately, using <code>r</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">user</span> <span class=\"n\">defined</span> <span class=\"n\">recursor</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">major</span> <span class=\"n\">premise</span> <span class=\"sc\">'x'</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">...</span><span class=\"o\">),</span> <span class=\"n\">where</span> <span class=\"n\">I</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n</code></pre></div>\n<p>while using <code>r.prop</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">generalize</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">expression</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span>\n</code></pre></div>\n<p>Is there something odd with the signature of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.closure_induction\">docs#submonoid.closure_induction</a> which prevents the induction tactic understanding it?</p>",
        "id": 216187135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604999962
    },
    {
        "content": "<p>I always just <code>apply</code> these induction functions -- I didn't even know the <code>induction</code> tactic could use custom functions!</p>",
        "id": 216200117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605008681
    },
    {
        "content": "<p>Using the <code>induction</code> tactic has the nice bonus of naming your goals</p>",
        "id": 216200807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605009125
    }
]