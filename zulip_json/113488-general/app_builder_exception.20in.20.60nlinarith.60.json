[
    {
        "content": "<p>I encountered some odd behaviour in <code>nlinarith</code> today.  Any ideas about what might be causing it?  <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- fails, &quot;app_builder_exception&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nlinarith</span> <span class=\"o\">[</span><span class=\"n\">norm_nonneg</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"err\">∥</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">norm_nonneg</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∥</span><span class=\"n\">t</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nlinarith</span> <span class=\"o\">[</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 204138256,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931245
    },
    {
        "content": "<p>(By the way, is there a way to get rid of those red boxes?)</p>",
        "id": 204138500,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931361
    },
    {
        "content": "<p>In the error message, there should be the name of a flag that you can set for more information</p>",
        "id": 204138833,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594931510
    },
    {
        "content": "<p>Indeed, it tells me to use the command \"set_option trace.app_builder true\". I haven't done this before -- how do I use this command?  Is it in the VSCode preferences?</p>",
        "id": 204139147,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931663
    },
    {
        "content": "<p>You can just type it before the example on a blank line</p>",
        "id": 204139182,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594931685
    },
    {
        "content": "<p>No, you copy and paste it in your code, right before the troublesome declaration</p>",
        "id": 204139203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594931693
    },
    {
        "content": "<p>Thanks!  Here's the result: \"[app_builder] failed to create an 'pow_two_nonneg'-application, there are missing implicit arguments\"</p>",
        "id": 204139331,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931747
    },
    {
        "content": "<p>Can you remember where you make use of <code>pow_two_nonneg</code>?</p>",
        "id": 204139456,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594931819
    },
    {
        "content": "<p>I don't believe I used it at all.  It doesn't appear in the example code I gave.</p>",
        "id": 204139520,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931862
    },
    {
        "content": "<p><code>nlinarith</code> is presumably seeing the square and going ah-ha thats positive, even though that doesn't really make sense for <code>R</code>?</p>",
        "id": 204139711,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594931977
    },
    {
        "content": "<p>Looks like <code>set_option trace.linarith true</code> might also be helpful</p>",
        "id": 204139735,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594931997
    },
    {
        "content": "<p>Yes, that would make sense!</p>",
        "id": 204139738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594931998
    },
    {
        "content": "<p>(The red boxes in Zulip should disappear after <a href=\"https://github.com/pygments/pygments\">pygments</a> makes a new release and we bug Zulip to update their pygments. It's been 4 months since the last pygments release, but I don't want to bug them, since they're just open source volunteers ...)</p>",
        "id": 204139807,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594932031
    },
    {
        "content": "<p>This should be easy to fix, I'll look into it tomorrow!</p>",
        "id": 204141826,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594932971
    },
    {
        "content": "<p>That's great!</p>",
        "id": 204142168,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594933176
    },
    {
        "content": "<p>Without looking at the code, I'm certain <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> is right, and the fix is just to continue if this call to <code>mk_app</code> fails. An enterprising young tactic writer could fix this with one line before I wake up.</p>",
        "id": 204142785,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594933477
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3417\">#3417</a></p>",
        "id": 204153557,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594940391
    }
]