[
    {
        "content": "<p>I wrote a <code>noncomputable definition</code> which was an instance of a structure. The structure had 6 fields, and I was filling in the last one, which was a proof. The other 5 fields had already used a bunch of constructions. I was filling in this 6th field and I started by getting the syntax right and writing <code>_</code> for several things, including a function <code>_ : R -&gt; S</code> between two rings. Once I'd got the syntax correct and complete, Lean evaluated the term and to my surprise found no problems with it.  In particular I think it must have figured out which function I meant.</p>",
        "id": 125543006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435029
    },
    {
        "content": "<p>Now there's only one sensible function <code>R -&gt; S</code>, and this function has almost certainly been mentioned earlier in the definition</p>",
        "id": 125543009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435054
    },
    {
        "content": "<p>however I could not really imagine how type class unification could solve this.</p>",
        "id": 125543015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435080
    },
    {
        "content": "<p>Is this sort of thing sometimes possible?</p>",
        "id": 125543018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435120
    },
    {
        "content": "<p>Is there a lemma in your structure about the function?</p>",
        "id": 125543058,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435140
    },
    {
        "content": "<p>could well be</p>",
        "id": 125543060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435152
    },
    {
        "content": "<p>the function is used all over the place</p>",
        "id": 125543062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435157
    },
    {
        "content": "<p>It's just got rather a long name</p>",
        "id": 125543065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435167
    },
    {
        "content": "<p>so I couldn't be bothered to type it</p>",
        "id": 125543066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435172
    },
    {
        "content": "<p>That's probably how it's inferred</p>",
        "id": 125543067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435174
    },
    {
        "content": "<p>It's a term, not a type.</p>",
        "id": 125543074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435212
    },
    {
        "content": "<p>Perhaps that's what I was surprised about</p>",
        "id": 125543075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435221
    },
    {
        "content": "<p>actually looking at it now I can begin to see how this amazing thing is possible</p>",
        "id": 125543122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435273
    },
    {
        "content": "<p>ultimately this function f appears in the statement of the thing I'm trying to prove</p>",
        "id": 125543124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435299
    },
    {
        "content": "<p>I'm constructing a proof of <code>f x = blah</code></p>",
        "id": 125543133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435312
    },
    {
        "content": "<p>and I skipped the definition of f</p>",
        "id": 125543134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435318
    },
    {
        "content": "<p>Since we have dependent types, the line between types and terms is blurred. Similarly, if you have <code>f : Π n : ℕ, fin n → ℕ</code> and <code>x : fin (m+n)</code>, you can write <code>f _ x</code> and trust Lean to infer <code>m+n</code></p>",
        "id": 125543136,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435321
    },
    {
        "content": "<p>I guess what I am saying is that I thought I was getting a pretty good instinct of what unification could do for me</p>",
        "id": 125543180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435379
    },
    {
        "content": "<p>but it's even better than I thought</p>",
        "id": 125543181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435383
    },
    {
        "content": "<p>Does Coq not have term mode?</p>",
        "id": 125543183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435394
    },
    {
        "content": "<p>I used to be terrified of term mode</p>",
        "id": 125543189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435416
    },
    {
        "content": "<p>but now I use it a lot</p>",
        "id": 125543191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435422
    },
    {
        "content": "<p>all this was happening in term mode</p>",
        "id": 125543196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435433
    },
    {
        "content": "<p>Ah ok! I thought you needed clarification.</p>",
        "id": 125543244,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435524
    },
    {
        "content": "<p>Writing the message myself was enough to get me thinking in the right way</p>",
        "id": 125543246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435543
    },
    {
        "content": "<p>That's the problem with these chat rooms</p>",
        "id": 125543251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435549
    },
    {
        "content": "<p>Sometimes I have a question about a maths paper and I start writing an email to the author and by the time I've finished the email, I've answered the question</p>",
        "id": 125543253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435570
    },
    {
        "content": "<p>but then I never send the email</p>",
        "id": 125543254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435573
    },
    {
        "content": "<p>In a way, Coq has a term mode because terms can be used as proofs but I believe it doesn't have the <code>have</code> / <code>show</code> / <code>suffices</code> notation so it's not made for writing proofs.</p>",
        "id": 125543255,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435577
    },
    {
        "content": "<p>here I started writing the question and it was already mostly sent before I realised what had happened</p>",
        "id": 125543256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435598
    },
    {
        "content": "<p>Haha! Yeah, I know the feeling. A while back, a supervisor told me that I should try asking my questions to a cactus or a rubber duck because I didn't actually need him there</p>",
        "id": 125543308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435645
    },
    {
        "content": "<p>Maybe you can signal this is happening by tagging your own message with <span class=\"emoji emoji-1f4a1\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 125543316,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435677
    },
    {
        "content": "<p>nice idea :-)</p>",
        "id": 125543357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435723
    },
    {
        "content": "<p>I wouldn't be surprised if people jump in anyway and ask you to explain your newfound insight</p>",
        "id": 125543380,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524435802
    },
    {
        "content": "<p>Thanks for listening :-)</p>",
        "id": 125543381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435805
    },
    {
        "content": "<p>I agree about the rubber duck suggestion. I feel silly talking to inanimate objects but as I already said, the technique I've used which really works for me is to start writing an email to someone who will know the answer, and really explain all the background and details about what you're confused about.</p>",
        "id": 125543428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435859
    },
    {
        "content": "<p>And a lot of the time, the email ends up never sent and becomes an answer to your own question</p>",
        "id": 125543434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524435885
    },
    {
        "content": "<p>I feel silly talking to inanimate things too ... the worse is when they talk back!</p>",
        "id": 125543509,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436070
    },
    {
        "content": "<p>I am pretty excited for lean 4 and playing around with {! !}</p>",
        "id": 125543554,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436110
    },
    {
        "content": "<p>i think term mode has been a little neglected, which is a shame since writing programs with tactics is a bit scary</p>",
        "id": 125543557,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436134
    },
    {
        "content": "<p>But if someone walk into the room, it's pretty embarrassing too. Then I have to pretend that there's a song about inductive proofs of liveness.</p>",
        "id": 125543561,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436145
    },
    {
        "content": "<blockquote>\n<p>i think term mode has been a little neglected, which is a shame since writing programs with tactics is a bit scary</p>\n</blockquote>\n<p>Why is it scary?</p>",
        "id": 125543615,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436238
    },
    {
        "content": "<p>because i have no idea how certain tactics get compiled down to certain terms, or how those terms might be evaluated in the vm</p>",
        "id": 125543631,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436291
    },
    {
        "content": "<p>That's true. What about mixing terms and tactics?</p>",
        "id": 125543673,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436349
    },
    {
        "content": "<p>sure. tactics are great for Props, which get erased</p>",
        "id": 125543679,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436369
    },
    {
        "content": "<p>i mean, i don't doubt you can do crazy things with tactic automation, but it's another layer of abstraction on top of a bunch of stuff I don't understand already :)</p>",
        "id": 125543736,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436486
    },
    {
        "content": "<p>i have a slightly ill feeling when I have to read other people's template and macro hackery</p>",
        "id": 125543743,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436506
    },
    {
        "content": "<p>already</p>",
        "id": 125543744,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436509
    },
    {
        "content": "<p>i'm hoping programming in lean gets updated at some point as well... i've been holding off on writing metaprograms in lean since there's little documentation</p>",
        "id": 125543787,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436585
    },
    {
        "content": "<p>and I don't have the interest to hack away at it without some hand-holding</p>",
        "id": 125543788,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436610
    },
    {
        "content": "<p>Regardless of meta programming skills, it's true that tactics can easily obscure the operational aspect of programs</p>",
        "id": 125543842,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436786
    },
    {
        "content": "<p>If we had an execution model and performance specifications, maybe that wouldn't be so bad. What do you think?</p>",
        "id": 125543885,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436823
    },
    {
        "content": "<p>I think he's talking about the entire pexpr stuff and magical functions to convert from and to varius opaque intermediate forms :)? At least that's what is fairly annoying for me and Ltac simply does better.</p>",
        "id": 125543891,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524436889
    },
    {
        "content": "<p>Because in Ltac you don't have to perform conversions? It's funny because I find Ltac much more obscure at the operational level. I find I'm never sure what my tactics will actually do</p>",
        "id": 125543935,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524436969
    },
    {
        "content": "<p>you're assuming i'm even aware of these magical functions to intermediate forms</p>",
        "id": 125543941,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524436995
    },
    {
        "content": "<p>i cracked open PIL, saw it had only a few chapters finished, and then walked away back to term mode</p>",
        "id": 125543943,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524437008
    },
    {
        "content": "<p>My _impression_ is that the missing chapters in PIL are mostly stuff which is documented in TPIL</p>",
        "id": 125544405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524438110
    }
]