[
    {
        "content": "<p>Suppose I have the following goal <code>f a = c (f (d a))</code>. What I am looking to do is to <code>unfold1 f</code> but only on the left hand side. Currently I do <code>generalize hack : f (d a) = x, unfold1 f, rw &lt;- hack</code>. Apart from the fact that it's a hack, the <code>generalize</code> takes a couple of seconds to execute. I tried using <code>conv { to_lhs ... }</code> but <code>unfold1</code> is not an option in conv (and simp fails with deterministic timeout). a) Why on Earth is <code>generalize</code> so slow in this case - is it because <code>c</code> is some horrible dependently typed function with explicit well founded termination proofs? b) Is there a nicer trick to invoke <code>unfold1</code> on left hand side only?</p>",
        "id": 124924517,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523437658
    },
    {
        "content": "<p>use <code>change</code>?</p>",
        "id": 124924577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523437749
    },
    {
        "content": "<p>that would involve me having to explicitly state the effect of unfolding if I understand your suggestion; right?</p>",
        "id": 124924634,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523437848
    },
    {
        "content": "<p>What about using transitivity instead of generalize?</p>",
        "id": 124932179,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523453310
    },
    {
        "content": "<p>ooh that is actually brilliant! what I ended up doing is something I'm ashamed of but it saves me 15 seconds on each recompile - I reformulated the lemma such that it contains a pre-generalized expression and an equality (which I will, of course, change now :P)</p>",
        "id": 124933566,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456083
    },
    {
        "content": "<p>Great! Glad to be of help! So, the way I use <code>transitivity</code> to protect parts of my formulas is to do <code>transitivity, blah, blah, refl</code></p>",
        "id": 124933627,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456177
    },
    {
        "content": "<p>Yeah I have never thought of that. Thanks a lot. I wish <code>conv</code> was a bit less constrained.</p>",
        "id": 124933640,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456264
    },
    {
        "content": "<p>if this worked, then <code>conv { to_lhs, dsimp1 f }</code> would be just fine for me - but <code>interactive.conv.*</code> only has a bunch of tactics for reasons I'm not sure I want to know about :P</p>",
        "id": 124933693,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456355
    },
    {
        "content": "<p>If you have something more specific that you want to use, let's say <code>g</code> instead of <code>=</code>, you can also make your own protection lemmas:</p>\n<div class=\"codehilite\"><pre><span></span>lemma protect (x y : α) (z : β)\n  (h : x = y)\n  (h : g y z)\n: g x z := ...\n</pre></div>\n\n\n<p>This allows you to select exactly what part of the formula you want to rewrite when you expect something very specific. And <code>z</code> is protected.</p>",
        "id": 124933694,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456360
    },
    {
        "content": "<p>ah, right; this is basically the general version that I ended up doing, but I think the transitivity is such a neat hack :P</p>",
        "id": 124933756,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456430
    },
    {
        "content": "<blockquote>\n<p>if this worked, then <code>conv { to_lhs, dsimp1 f }</code> would be just fine for me - but <code>interactive.conv.*</code> only has a bunch of tactics for reasons I'm not sure I want to know about :P</p>\n</blockquote>\n<p>I think Coq is more targeted like that <code>rewrite h at 1,3</code>. I found I missed that at first but I'm not sure it makes for stable proofs</p>",
        "id": 124933767,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456451
    },
    {
        "content": "<p>yes, in Coq I can rewrite where I want</p>",
        "id": 124933776,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456464
    },
    {
        "content": "<p>I can also rewrite under binders</p>",
        "id": 124933779,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456470
    },
    {
        "content": "<p>(with setoid rewrites)</p>",
        "id": 124933780,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456474
    },
    {
        "content": "<p>in Lean I've only used <code>simp</code> to rewrite under binders, not sure how else it can be even done</p>",
        "id": 124933785,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456498
    },
    {
        "content": "<p><code>simp</code> helps there with binders and congruence lemmas but it's a bit less controlled</p>",
        "id": 124933788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456514
    },
    {
        "content": "<p>... yeah, exactly</p>",
        "id": 124933835,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456528
    },
    {
        "content": "<p>stability of proofs has never been an issue for me, because, I, urm... write them once and then I... forget about them...</p>",
        "id": 124933842,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456562
    },
    {
        "content": "<p>I may need to try to write Coq in \"industrial\" settings :P</p>",
        "id": 124933846,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456576
    },
    {
        "content": "<p>Question: I've only used Coq as a noob so I never experienced scaling up proofs that uses the <code>at 1,3</code> notation. Do you find that your proofs breaks a lot when you do that?</p>",
        "id": 124933853,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456586
    },
    {
        "content": "<p>yes, they do</p>",
        "id": 124933855,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456594
    },
    {
        "content": "<p>it's the absolute worst thing one can do</p>",
        "id": 124933858,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456609
    },
    {
        "content": "<p>In my temporal logic tactics language, I have played with a tactic you call as <code>rw_using : f x = g x, { /- proof -/ }</code>. For some reason, I liked not clearing a temporary assumption.</p>",
        "id": 124933923,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456733
    },
    {
        "content": "<p>In temporal logic, that was doubly useful because the proof of equality was typically done in normal Lean logic</p>",
        "id": 124933971,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456778
    },
    {
        "content": "<p>Otherwise, I really haven't found a drop in replacement for that Coq notation</p>",
        "id": 124933979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456832
    },
    {
        "content": "<p>I wish I understood exactly how <code>simp</code> works but I have never had the willpower to look at it</p>",
        "id": 124933983,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456861
    },
    {
        "content": "<p>I believe it's been modeled to resemble the Isabelle heuristics you get when you're within a single <code>theory</code> section thing</p>",
        "id": 124934025,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456908
    },
    {
        "content": "<p>where <code>theory</code> just aggregates a set of related constants, definitions, proofs, etc. and you abuse this implicit relation in automation</p>",
        "id": 124934037,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523456959
    },
    {
        "content": "<p>I feel like I really don't understand what Isabelle does with any given proof. It's hard for me to understand that comparison</p>",
        "id": 124934038,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523456969
    },
    {
        "content": "<p>you basically help guide automation in Isabelle by aggregating related stuff together in \"theories\", which is something like making a hint database in Coq</p>",
        "id": 124934081,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457006
    },
    {
        "content": "<p>(so like a beefy namespace that implicitly provides hints for automation)</p>",
        "id": 124934160,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457145
    },
    {
        "content": "<p>Ah I see. Does it make things clearer to use the theories or the databases?</p>",
        "id": 124934166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523457164
    },
    {
        "content": "<p>databases are less implicit so you have to go over the trouble of creating them</p>",
        "id": 124934172,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457186
    },
    {
        "content": "<p>so in Isabelle you get nice behaviour by default but it's less controlled because it's just \"whatever you put in this theory\"</p>",
        "id": 124934174,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457203
    },
    {
        "content": "<p>I think people with purely math background would have easier time using Isabelle, simply because you get nice implicit heuristic-guided behaviour out of the box (+ the Sledgehammer)</p>",
        "id": 124934230,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457281
    },
    {
        "content": "<p>if I understand Kevin correctly, he uses Lean because he wants dependent types</p>",
        "id": 124934236,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457295
    },
    {
        "content": "<p>(or I should say, he's not using Isabelle because he wants dependent types)</p>",
        "id": 124934246,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457311
    },
    {
        "content": "<p>and <code>simp</code> in Lean takes after Isabelle default simplifier, I believe</p>",
        "id": 124934254,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457351
    },
    {
        "content": "<p>Any chance that something like sledgehammer would work with dependent types? Or is it more of a matter of structuring databases like Isabelle?</p>",
        "id": 124934307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523457389
    },
    {
        "content": "<p>it would work, Sledgehammer is almost like an outside tool that ships proof obligations to SMT solvers and ATPs</p>",
        "id": 124934321,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457432
    },
    {
        "content": "<p>Sledgehammer is really the most unimpressive piece of Isabelle; it just tries to invoke every automating algorithm it can get its grabby mittens on</p>",
        "id": 124934329,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457464
    },
    {
        "content": "<p>That may be the understatement of the century</p>",
        "id": 124934605,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523457868
    },
    {
        "content": "<p>:D</p>",
        "id": 124934614,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523457885
    },
    {
        "content": "<p>Sledgehammer is the result of a multi-year research project that produced a good amount of papers <a href=\"http://www.cl.cam.ac.uk/~lp15/papers/Automation/\" target=\"_blank\" title=\"http://www.cl.cam.ac.uk/~lp15/papers/Automation/\">http://www.cl.cam.ac.uk/~lp15/papers/Automation/</a></p>",
        "id": 124934637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523457921
    },
    {
        "content": "<p>The hard parts are relevance filtering of lemmas to pass to the external solver, and of course translating between HOL and FOL</p>",
        "id": 124934693,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523457980
    },
    {
        "content": "<p>ok ok I will change it to 2 out of 10 on the scale of impressiveness, making it the second least impressive Isabelle feature right after its bundled development IDE <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 124936062,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1523460119
    },
    {
        "content": "<p>I use Lean because when I had never heard of any theorem provers apart from Coq, and never used any at all, I watched a live stream of Tom Hales in Cambridge talking about (amongst other things) FAbstracts, and someone asked him which language he would be using, and he said \"...Lean?\" and I thought \"OK that'll do for me\"</p>",
        "id": 124947660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476642
    },
    {
        "content": "<p>and I certainly didn't know what a dependent type was at that point</p>",
        "id": 124947669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476671
    },
    {
        "content": "<p>I just decided to jump in</p>",
        "id": 124947672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476677
    },
    {
        "content": "<blockquote>\n<p>I wish I understood exactly how <code>simp</code> works but I have never had the willpower to look at it</p>\n</blockquote>\n<p>I wish I understood more about how <code>simp</code> works but I learnt a couple of <code>set_option</code> options and wrote <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md</a></p>",
        "id": 124947753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476794
    },
    {
        "content": "<p>Looking at the output of <code>set_option trace.simplify true</code> gave me some sort of idea about the absolute inanity of what simp was doing</p>",
        "id": 124947824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476853
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I wish I understood exactly how <code>simp</code> works but I have never had the willpower to look at it</p>\n</blockquote>\n<p>I wish I understood more about how <code>simp</code> works but I learnt a couple of <code>set_option</code> options and wrote <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md</a></p>\n</blockquote>\n<p>That bit at the end sounds interesting. Does that mean if I had <code>a + b ≡ c [MOD n]</code> and <code>h : a ≡ d [MOD n]</code> I could rewrite to get <code>a + d ≡ c [MOD n]</code>? How would that work with complicated examples, with lots of addition and multiplication?</p>",
        "id": 124948004,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523477050
    },
    {
        "content": "<p>I have never used that MOD business so I'm not sure</p>",
        "id": 124948228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477376
    },
    {
        "content": "<p>Oh, Gabriel said that</p>",
        "id": 124948232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477401
    },
    {
        "content": "<p>I didn't understand it so I didn't use it</p>",
        "id": 124948276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477407
    },
    {
        "content": "<p>[and you mean d + b = c of course]</p>",
        "id": 124948281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477425
    },
    {
        "content": "<p>Aah but I do remember that this might work in calc mode.</p>",
        "id": 124948297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477465
    },
    {
        "content": "<p>If your relation is tagged with trans then I think calc supports it</p>",
        "id": 124948305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477481
    },
    {
        "content": "<p>Can I mix equality and an congruences in calc?</p>",
        "id": 124948370,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523477545
    },
    {
        "content": "<p>I haven't ever seen this done</p>",
        "id": 124948374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477555
    },
    {
        "content": "<p>I think that either in the reference manual or in TPIL they are pretty formal about what you can do with calc</p>",
        "id": 124948382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477574
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs</a></p>",
        "id": 124948467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477679
    },
    {
        "content": "<p>searching TPIL for calc doesn't find that</p>",
        "id": 124948471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477684
    },
    {
        "content": "<p>so I always look at <a href=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md\">https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md</a></p>",
        "id": 124948475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477700
    },
    {
        "content": "<p>and indeed there is an example with different operators, = and &lt; and &lt;=</p>",
        "id": 124948494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477742
    },
    {
        "content": "<blockquote>\n<p>searching TPIL for calc doesn't find that</p>\n</blockquote>\n<p>It does actually, but you don't recognize it</p>",
        "id": 124948495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477748
    },
    {
        "content": "<p>3rd result</p>",
        "id": 124948549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477779
    },
    {
        "content": "<p>I know this because I filled  a Sphinx bug report before understanding this <span class=\"emoji emoji-1f633\" title=\"flushed\">:flushed:</span></p>",
        "id": 124948575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477857
    },
    {
        "content": "<p>Oh! So \"It's somewhere in Chapter 4\" is the best I get?</p>",
        "id": 124948619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477893
    },
    {
        "content": "<p>yes</p>",
        "id": 124948622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477903
    },
    {
        "content": "<p>\"PS here's the first occurrence of the string Calc\"</p>",
        "id": 124948624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477907
    },
    {
        "content": "<p>\"feel free to look and see if there are any others\"</p>",
        "id": 124948630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477926
    },
    {
        "content": "<p>Web pages of TPIL are too big</p>",
        "id": 124948643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477946
    },
    {
        "content": "<p>from this point of view</p>",
        "id": 124948645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523477950
    },
    {
        "content": "<p>That's one interpretation</p>",
        "id": 124948653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477970
    },
    {
        "content": "<p>Another is \"search is crap\"</p>",
        "id": 124948657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477974
    },
    {
        "content": "<p>I know we've all been spoilt by Google...</p>",
        "id": 124948662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523477982
    },
    {
        "content": "<p>google would show you the same</p>",
        "id": 124948720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478011
    },
    {
        "content": "<p>or maybe section 4.3 should be tagged calc</p>",
        "id": 124948722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478020
    },
    {
        "content": "<p>and the search should prioritise tags</p>",
        "id": 124948723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478027
    },
    {
        "content": "<p>one hit for this page, and not all occurences on the search result page</p>",
        "id": 124948726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478031
    },
    {
        "content": "<p>is that possible in Sphinx?</p>",
        "id": 124948728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478034
    },
    {
        "content": "<p>Google might have a better idea about moving the \"right\" answer to <a href=\"https://github.com/leanprover/lean/issues/1\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1\">#1</a> in the list...</p>",
        "id": 124948737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478066
    },
    {
        "content": "<blockquote>\n<p>Can I mix equality and an congruences in calc?</p>\n</blockquote>\n<p>I tried it and you can.</p>",
        "id": 124948751,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478098
    },
    {
        "content": "<p>Go to google and typein search bar: <code>site:https://leanprover.github.io/theorem_proving_in_lean/ calc</code></p>",
        "id": 124948888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478268
    },
    {
        "content": "<p>Google is smarter than Sphynx</p>",
        "id": 124948904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478293
    },
    {
        "content": "<blockquote>\n<p>Can I mix equality and an congruences in calc?</p>\n</blockquote>\n<p><code>@[trans] protected theorem trans : a ≡ b [MOD n] → b ≡ c [MOD n] → a ≡ c [MOD n] := eq.trans\n</code></p>",
        "id": 124948916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478307
    },
    {
        "content": "<p>and lo and behold</p>",
        "id": 124948919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478312
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">m</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">m</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">H2</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H3</span>\n</pre></div>",
        "id": 124948923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478334
    },
    {
        "content": "<p>Google is smarter than everything :-/</p>",
        "id": 124948977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478390
    },
    {
        "content": "<p>what if I have two relations that are \"co transitive\" in the same sense that <code>le</code> and <code>lt</code> are. Can I make them work with calc?</p>",
        "id": 124948981,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478407
    },
    {
        "content": "<p>Right, e.g. a congruence mod 8 might imply a congruence mod 4</p>",
        "id": 124948986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478421
    },
    {
        "content": "<p>I have no idea how Lean is doing the &lt; and &lt;= thing</p>",
        "id": 124949001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478436
    },
    {
        "content": "<p>calc knowing about that would be pretty cool</p>",
        "id": 124949002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478442
    },
    {
        "content": "<p>I thought that was a useless question, but obviously not.</p>",
        "id": 124949003,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478443
    },
    {
        "content": "<p>I know from experience that it will let you prove <code>a &lt; d</code> by writing <code>a &lt;= b &lt; c &lt;= d</code></p>",
        "id": 124949008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478457
    },
    {
        "content": "<p>so it knows <code>lt_of_le_of_lt</code></p>",
        "id": 124949012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478466
    },
    {
        "content": "<p>yes, this is already really cool</p>",
        "id": 124949014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478470
    },
    {
        "content": "<p>but it wouldn't surprise me if this were hard wired in somehow</p>",
        "id": 124949018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478474
    },
    {
        "content": "<p>as a common use case</p>",
        "id": 124949020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478476
    },
    {
        "content": "<p>but I suspect this special case is hard-wired</p>",
        "id": 124949055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478483
    },
    {
        "content": "<p><code>lt_of_lt_of_le</code> is tagged with trans. So it might just be a case of doing that.</p>",
        "id": 124949064,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478517
    },
    {
        "content": "<p>Oh well spotted!</p>",
        "id": 124949138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478609
    },
    {
        "content": "<p>indeed</p>",
        "id": 124949150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">r&#39;</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">s&#39;</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">trans1</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"n\">r&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span>\n  <span class=\"bp\">...</span> <span class=\"n\">s&#39;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span>\n</pre></div>",
        "id": 124949181,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478714
    },
    {
        "content": "<p>That pasted from VScode without any extra spaces.</p>",
        "id": 124949227,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523478752
    },
    {
        "content": "<p><span class=\"emoji emoji-1f62f\" title=\"hushed\">:hushed:</span></p>",
        "id": 124949231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">helpful</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">16</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">8</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">16</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">H2</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">16</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H3</span>\n</pre></div>",
        "id": 124949234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478783
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124949241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478786
    },
    {
        "content": "<p>so did that</p>",
        "id": 124949244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478792
    },
    {
        "content": "<p>So it's really not hard coded in, there is some dark art with trans tags</p>",
        "id": 124949257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478841
    },
    {
        "content": "<p>Let's keep that in Lean 4</p>",
        "id": 124949301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478855
    },
    {
        "content": "<p>Conclusion in my example must be a = c mod 8 after second line</p>",
        "id": 124949304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478875
    },
    {
        "content": "<p>it uses this:</p>",
        "id": 124949314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478904
    },
    {
        "content": "<p><code>#check trans_rel_left -- ∀ (r : ?M_1 → ?M_1 → Prop), r ?M_2 ?M_3 → ?M_3 = ?M_4 → r ?M_2 ?M_4\n</code></p>",
        "id": 124949316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478906
    },
    {
        "content": "<p>(I know because some messing around gave me some explicit error messages)</p>",
        "id": 124949323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478931
    },
    {
        "content": "<p>and then it uses my trans-tagged theorem for 3rd line</p>",
        "id": 124949327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523478945
    },
    {
        "content": "<p>To the <code>docs/extras/calc</code>!</p>",
        "id": 124949380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523478996
    },
    {
        "content": "<p>Yes, this deserves to be better known</p>",
        "id": 124949384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479010
    },
    {
        "content": "<p>I mean it's mentioned in TPIL but somehow it hadn't dawned on me how far you could push this</p>",
        "id": 124949399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479046
    },
    {
        "content": "<p>So now I know the point of <code>@[trans]</code> and <code>@[refl]</code> but I'm still not sure why you would tag something <code>@[symm]</code></p>",
        "id": 124949401,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523479048
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/simp.20is.20amazing\" title=\"#narrow/stream/113488-general/topic/simp.20is.20amazing\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simp.20is.20amazing</a></p>",
        "id": 124949503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479175
    },
    {
        "content": "<p>Gabriel's comment is in that thread</p>",
        "id": 124949509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479185
    },
    {
        "content": "<p>but I don't know any longer if it was about simp</p>",
        "id": 124949511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479191
    },
    {
        "content": "<p>If you tag something symm then there's some tactic called symmetry which will work ;-)</p>",
        "id": 124949557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479218
    },
    {
        "content": "<p>We need to formalize something using this calc power</p>",
        "id": 124949669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523479401
    },
    {
        "content": "<p>What about some version of Hensel's lemma?</p>",
        "id": 124949671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523479418
    },
    {
        "content": "<p>There should be chains of congruence modulo different stuff there</p>",
        "id": 124949678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523479433
    },
    {
        "content": "<p>And it may even be useful for perfectoids, who knows?</p>",
        "id": 124949719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523479465
    },
    {
        "content": "<p><code>theorem X (a b m : ℕ) (H : a ≡ b [MOD m]) : b ≡ a [MOD m] := by symmetry;assumption</code></p>",
        "id": 124949725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479491
    },
    {
        "content": "<p><code>theorem X (a b m : ℕ) (H : a ≡ b [MOD m]) : b ≡ a [MOD m] := H.symm</code></p>",
        "id": 124949738,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523479524
    },
    {
        "content": "<p>symmetry tactic replaces a hypothesis with another one if the fact that one implies the other is marked with symm</p>",
        "id": 124949739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479526
    },
    {
        "content": "<p>I know what it does, but it seems fairly useless.</p>",
        "id": 124949789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523479579
    },
    {
        "content": "<p>Simon's cool use of transivity is above, and refl is used everywhere, but who knows what symmetry is for :-)</p>",
        "id": 124949806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523479649
    },
    {
        "content": "<blockquote>\n<p>Simon's cool use of transivity is above, and refl is used everywhere, but who knows what symmetry is for :-)</p>\n</blockquote>\n<p>What's Simon's cool use of transitivity?</p>",
        "id": 124949874,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523479733
    },
    {
        "content": "<p>At the start of this thread</p>",
        "id": 124950966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523481199
    },
    {
        "content": "<blockquote>\n<p>To the <code>docs/extras/calc</code>!</p>\n</blockquote>\n<p><a href=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md\">https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/calc.md</a></p>",
        "id": 124953029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484182
    },
    {
        "content": "<p>Can I use calc if I haven't defined an infix for my relation?</p>",
        "id": 124953112,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523484332
    },
    {
        "content": "<p>I don't know!</p>",
        "id": 124953180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484407
    },
    {
        "content": "<p>As you can see I defined infixes for mine.</p>",
        "id": 124953181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I wrote some calc docs (see link above) extending what is written in TPIL, together with some notes for things I struggled with myself after reading TPIL (e.g. I would sometimes get into a real mess with some syntax error or proof error manifesting itself as a red squiggle under a random <code>...</code>). Three questions:</p>",
        "id": 124953284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484557
    },
    {
        "content": "<p>1) Shall I PR to mathlib?</p>",
        "id": 124953288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484564
    },
    {
        "content": "<p>2) Chris asks if <code>calc</code> can be used with operators that aren't infix</p>",
        "id": 124953293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484574
    },
    {
        "content": "<p>3) I made some guesses as to how calc works. In particular I note that <code>trans_rel_right</code> and <code>trans_rel_left</code> are not tagged <code>[trans]</code>. Are these special cases which are tried first?</p>",
        "id": 124953362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484616
    },
    {
        "content": "<p>And an idle question -- would it be possible to break <code>calc</code> by proving e.g. <code>a &lt; b -&gt; b &lt; c -&gt; a &lt;= c</code> and tagging with <code>[trans]</code>?</p>",
        "id": 124953417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484721
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> After Mario accepted my last mathlib PRs I just nuked the entire repo and forked it again (do you remember I had a bad commit history because I never branched?). Now I have a branch with my WIPs. I know I can google for how to do this but I'm sure you will know instantly -- what is the best way to just PR the calc.md file? Sorry to bother you.</p>",
        "id": 124953555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523484869
    },
    {
        "content": "<p>Since you have only one file to PR and don't care about keeping the history of this file, here the simplest route: copy that calc.md somewhere else (say /home/kevin/), then, inside mathlib,</p>\n<div class=\"codehilite\"><pre><span></span>git checkout master\ngit checkout -b docs-calc\ncp /home/kevin/calc.md docs/extras/\n</pre></div>\n\n\n<p>then edit <code>docs/extras.md</code> to add a link to <code>docs/extra/calc.md</code></p>\n<div class=\"codehilite\"><pre><span></span>git add docs/extras.md docs/extra/calc.md\ngit commit\ngit push\n</pre></div>\n\n\n<p>The last command will complain you should explicitly say to create an upstream branch. Copy-paste the suggested command (I never remember the syntax since git always helps me here).</p>",
        "id": 124971220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523515143
    },
    {
        "content": "<p>I forgot: don't forget to make sure your master is in sync with Mario's before <code>git check-out -b docs-calc</code></p>",
        "id": 124971277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523515288
    },
    {
        "content": "<p>assuming you followed conventional names, that would mean <code>git pull upstream master</code> after <code>git checkout master</code></p>",
        "id": 124971317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523515336
    },
    {
        "content": "<p>It's not a big problem if you PR off an old version of mathlib, since I usually rebase it on the current head when I merge the PR anyway</p>",
        "id": 124971318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523515345
    },
    {
        "content": "<p>unless there's a conflict of course</p>",
        "id": 124971319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523515355
    },
    {
        "content": "<p>but docs don't usually cause conflicts if they are new</p>",
        "id": 124971320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523515379
    },
    {
        "content": "<p>sure</p>",
        "id": 124971369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523515450
    },
    {
        "content": "<p>I'm only trying to explain good practice</p>",
        "id": 124971371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523515464
    },
    {
        "content": "<p>I agree with everything you said.</p>\n<p>I would add that if you intend to PR some addition, you should write it \"in place\", i.e. with the file located in mathlib where you want it to be, by first checking out <code>master</code> then checking out a new branch (i.e. the first two lines of Patrick's script), then making any modifications there.  Then any commits you make will branch from master nicely. If you need to set the work aside, you can just commit what you have to the branch and move to the current master or somewhere else, and come back to your PR when you are ready to resume work with <code>git checkout my-pr</code>.</p>",
        "id": 124971558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523515912
    },
    {
        "content": "<p>No -b in your last sentence</p>",
        "id": 124972034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523516861
    },
    {
        "content": "<p>Otherwise of course this is the correct way. I was explaining how to fix the mess.</p>",
        "id": 124972076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523516912
    },
    {
        "content": "<p>oops, typo (copy-o?)</p>",
        "id": 124972188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523517135
    },
    {
        "content": "<p>OK done. Thanks both for the advice. Mario -- it's a bit of a WIP because I guessed how the transitivity worked in calc mode. First I guessed that Lean went from <code>A op1 B op2 C op3 D</code> to <code>A op4 D</code> via \"reading from left to right\", i.e. first attempting to figure out how <code>A op1 B op2 C</code> can become <code>A op5 C</code> and then merging this with <code>C op3 D</code> (i.e. I don't know if it does anything clever like trying to merge two random consecutive theorems in the middle), and secondly I guessed that when trying to merge two ops to become another one it first uses rw if one is <code>=</code> and then tries lemmas tagged <code>trans</code> if neither op is <code>=</code>. These are just plain guesses.</p>",
        "id": 124990989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523548372
    },
    {
        "content": "<p>I did some testing and I don't think it tries to do anything clever with changing the order. <code>L2</code> doesn't work below, but the rest do. You can also state that three relations are transitive together.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">r&#39;</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">s&#39;</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">t&#39;</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">rrr</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">srr</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sts</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">rss</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">trs</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"n\">s&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span>\n   <span class=\"bp\">...</span> <span class=\"n\">t&#39;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span>\n   <span class=\"bp\">...</span> <span class=\"n\">r&#39;</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">h₃</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"n\">r&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span>\n   <span class=\"bp\">...</span> <span class=\"n\">s&#39;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span>\n   <span class=\"bp\">...</span> <span class=\"n\">t&#39;</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">h₃</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L2&#39;</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">rss</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">sts</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L3</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"n\">t&#39;</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span>\n   <span class=\"bp\">...</span> <span class=\"n\">r&#39;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span>\n</pre></div>",
        "id": 124992197,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523550169
    },
    {
        "content": "<p>Thanks for checking. That was one way of doing it. The other way is to read the source code, but I sort-of suspect (perhaps incorrectly) that it will be in C++ not Lean.</p>",
        "id": 124993108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523551547
    }
]