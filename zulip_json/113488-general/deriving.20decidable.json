[
    {
        "content": "<p>What's the best practice for modeling decidable relations? I could have a function from <code>A -&gt; A -&gt; bool</code>, but then I don't get a proof object I can do induction over. The only other thing I can think of is writing an <code>inductive</code> to model the proof, and then also implement the decision procedure, but it seems like I'll be essentially writing the same code twice. Thoughts?</p>",
        "id": 210815187,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600732876
    },
    {
        "content": "<p>The topic gives away what I'd magically love to have happen: just a <code>@[derive decidable] </code> tag that for a subset of types could come up with a decision procedure based on the type signature. But I don't think that's a thing.</p>",
        "id": 210815295,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600732949
    },
    {
        "content": "<p>The usual approach is to use a Prop valued function and a proof it is decidable</p>",
        "id": 210815469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600733131
    },
    {
        "content": "<p>If you have a recursive function, it's pretty simple to build the decision procedure (and you might even consider using bool for this if you are worried about code duplication). But for inductive types it's not at all simple to come up with a decision procedure in general</p>",
        "id": 210815688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600733322
    }
]