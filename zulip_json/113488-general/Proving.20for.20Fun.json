[
    {
        "content": "<p>Dear Lean enthusiasts,</p>\n<p>I'd like to advertise to you \"Proving for Fun\" -- an online platform where you can tackle proving challenges in your favorite proof assistant -- and ask for your help adding Lean as a supported language.</p>\n<p><a href=\"https://competition.isabelle.systems/competitions/contest/11/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/11/\">https://competition.isabelle.systems/competitions/contest/11/</a></p>\n<p>This month's contest features freshly implemented support for Coq. This means you can now submit your solutions in both Isabelle and Coq. We want to support more ITPs and ACL2 is about to join. The contest is open until 9 August 2019.</p>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  and <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>, we now also have a judging backend for Lean. We have translations for three of the tasks of this month's contest and they are up for your solutions. Please feel free to give feedback on the system and help translating the rest of the tasks; in the latter case please contact me here at zulip or via email (<a href=\"mailto:haslbema@in.tum.de\" title=\"mailto:haslbema@in.tum.de\">haslbema@in.tum.de</a>).</p>\n<p>This month's contest also serves as a warmup for the <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">\"Proof Ground\" workshop</a>, which<br>\nwill take place in September alongside the ITP conference in Portland. The goal of the workshop is to bring together researchers from the ITP<br>\ncommunity, to discuss and compete in a \"proving contest\", and it will use the Proving for Fun platform. If you happen to have ideas for<br>\ninteresting tasks, please consider submitting them following our \"Call for Problems\".</p>\n<p>We believe our problems should be a stimulating fun summer activity! We encourage you to participate and give us feedback on the prototype system.</p>\n<p>Happy proving!</p>",
        "id": 172011257,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564470318
    },
    {
        "content": "<p>Caveat: There is no support for mathlib (yet). Feel free to <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/tree/master/Lean\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/tree/master/Lean\">contribute here</a> if you think that Lean without mathlib <a href=\"https://en.wikipedia.org/wiki/David_Hilbert#cite_ref-34\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/David_Hilbert#cite_ref-34\">is the same as prohibiting the boxer the use of his fists</a>.</p>",
        "id": 172015176,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564474083
    },
    {
        "content": "<p>Very cool, this is such a great idea! I think the lean system needs some extra checks adding though <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> <a href=\"/user_uploads/3121/5HQ8Wy6xfLSaY_CYeGn9Fc9P/Screen-Shot-2019-07-30-at-15.31.26.png\" target=\"_blank\" title=\"Screen-Shot-2019-07-30-at-15.31.26.png\">Screen-Shot-2019-07-30-at-15.31.26.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5HQ8Wy6xfLSaY_CYeGn9Fc9P/Screen-Shot-2019-07-30-at-15.31.26.png\" target=\"_blank\" title=\"Screen-Shot-2019-07-30-at-15.31.26.png\"><img src=\"/user_uploads/3121/5HQ8Wy6xfLSaY_CYeGn9Fc9P/Screen-Shot-2019-07-30-at-15.31.26.png\"></a></div>",
        "id": 172069021,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1564515241
    },
    {
        "content": "<p>Oh oh, I assume that's a bug in my code and you did not actually break Lean <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> can you send me the code that made it pass so I can check what's wrong?</p>",
        "id": 172069676,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564515741
    },
    {
        "content": "<p>You are right I didn't break lean fortunately, its a bit cheeky:</p>\n<div class=\"codehilite\"><pre><span></span>notation `false` := true\n\ntheorem soundness_bug : false := trivial\n</pre></div>",
        "id": 172070094,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1564516129
    },
    {
        "content": "<p>hahaha, damn! that's indeed very cheeky <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 172070426,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564516413
    },
    {
        "content": "<p>hehe, yeah the task is called \"Break the System\" :), first time we confronted our colleagues with the Isabelle version of that task they came up with lots of ways to trick the system. I already expected that to happen for the first version of the lean judge. For Isabelle we have a blacklist of keywords that may not occur in the submission theory.</p>",
        "id": 172108102,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564561645
    },
    {
        "content": "<p>what keywords other than \"notation\" should be blacklisted for lean?</p>",
        "id": 172108115,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564561668
    },
    {
        "content": "<p>I paraphrase: \"Lean without notation is the same as prohibiting the boxer the use of his fists.\"</p>",
        "id": 172108199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564561745
    },
    {
        "content": "<p>I'm guessing the intended solution to the first problem wasn't 0, 500, 500</p>",
        "id": 172108203,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564561752
    },
    {
        "content": "<blockquote>\n<p>I'm guessing the intended solution to the first problem wasn't 0, 500, 500</p>\n</blockquote>\n<p>ah, right, I just updated the Definition of pythagorean_triple, thanks</p>",
        "id": 172108460,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564561993
    },
    {
        "content": "<p>Now I have to prove <code>375^2 + 200^2 = 425^2</code> without mathlib. Looks like <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> used the same trick as me, we both just moved down the leaderboard.</p>",
        "id": 172108800,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564562332
    },
    {
        "content": "<p>This is called \"Proving for <em>Fun</em>\" <span aria-label=\"interrobang\" class=\"emoji emoji-2049\" role=\"img\" title=\"interrobang\">:interrobang:</span></p>",
        "id": 172108892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564562409
    },
    {
        "content": "<p>¬mathlib → ¬calculator</p>",
        "id": 172108915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564562448
    },
    {
        "content": "<p>so, we should add mathlib I guess? which version of it? is there an obvious choice?</p>",
        "id": 172108939,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564562480
    },
    {
        "content": "<blockquote>\n<p>Looks like <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> used the same trick as me, we both just moved down the leaderboard.</p>\n</blockquote>\n<p>Unfortunately I wasn't that sneaky, but my proof was dependent on the original definition so it still broke <span aria-label=\"persevere\" class=\"emoji emoji-1f623\" role=\"img\" title=\"persevere\">:persevere:</span></p>",
        "id": 172108952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1564562502
    },
    {
        "content": "<p>Can't you use CI to always give users the latest and greatest?</p>",
        "id": 172109281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564562807
    },
    {
        "content": "<p>Otherwise I would pick whatever the <code>lean-3.4.2</code> branch points at right now.</p>",
        "id": 172109310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564562825
    },
    {
        "content": "<p>I guess for most of these problems the basics of mathlib will suffice.</p>",
        "id": 172109346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564562841
    },
    {
        "content": "<p>I think it would be very confusing for users if the mathlib version kept changing. Probably better to pick one and stick with it (for a while at least).</p>",
        "id": 172109487,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564562970
    },
    {
        "content": "<p>The next version of mathlib will ship a <code>fun</code> tactic that solves these exercises for you (-;</p>",
        "id": 172109731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564563157
    },
    {
        "content": "<blockquote>\n<p>¬mathlib → ¬calculator</p>\n</blockquote>\n<p>thanks to <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>  mathlib (version 2019-07-31) is now available for the system, Lean version is: 3.4.2</p>",
        "id": 172141176,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564589748
    },
    {
        "content": "<p>if anybody is interested in translating the tasks \"XOR\" and \"A funky grammar\", please contact me! :) we can provide sample solutions in Isabelle and Coq!</p>",
        "id": 172141386,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564589886
    },
    {
        "content": "<p><a href=\"https://competition.isabelle.systems/competitions/contest/11/tasks/3/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/11/tasks/3/\">XOR</a> and <a href=\"https://competition.isabelle.systems/competitions/contest/11/tasks/4/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/11/tasks/4/\">funky grammar</a>.</p>",
        "id": 172141415,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564589926
    },
    {
        "content": "<p>They are surprisingly similar ;-)</p>",
        "id": 172141481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564589991
    },
    {
        "content": "<p>Why can't we just do some collaborative effort here?</p>",
        "id": 172141550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564590029
    },
    {
        "content": "<blockquote>\n<p>They are surprisingly similar ;-)</p>\n</blockquote>\n<p>Fixed :')</p>",
        "id": 172141598,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564590087
    },
    {
        "content": "<blockquote>\n<p>Why can't we just do some collaborative effort here?</p>\n</blockquote>\n<p>I like the idea, but I can not see how to manage this.  I'm reluctant to publish solutions before the contest ends. so I'd only like to disclose the solutions to someone who wants to do the translation.</p>",
        "id": 172202417,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1564648815
    },
    {
        "content": "<p>Oh gosh I'm sorry, I hadn't internalised that this was still an open competition!</p>",
        "id": 172202468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564648907
    },
    {
        "content": "<p>The \"July 2019\" contest at <a href=\"https://competition.isabelle.systems/\" target=\"_blank\" title=\"https://competition.isabelle.systems/\">Proving for Fun</a> is over now.<br>\nCongratulations to the winners and thanks to all the participants.<br>\nWe hope you had some fun solving this month's problems and proving them formally.</p>\n<p>We have set up a <a href=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\">github repository</a> with a summary of the contest, sample solutions and discussions about the problems. Feel free to participate in commenting any task in its issue and publishing your solution with a pull-request.</p>\n<p>We specially want to thank the people who helped making the contest possible by creating the tasks and translating them to their proof assistant: Armaël Guéneau, Sebastiaan Joosten, Kevin Kappelmann, Simon Wimmer.</p>\n<p>You still can submit your solutions for the tasks of the \"July 2019\" contest, they are now integrated into the <a href=\"https://competition.isabelle.systems/competitions/contest/6/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/6/\">\"All Time\" contest</a>.</p>\n<p>Tomorrow, Aug 13 at noon (MESZ) we start the \"August 2019\" contest which will be open until Sep 12 midnight. It also serves as a preparation for the contest happening at <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">the Proof Ground workshop</a> Sep 13 alongside the ITP conference in Portland.</p>",
        "id": 173023205,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1565616673
    },
    {
        "content": "<blockquote>\n<p>The best Lean user were alexejbest shortly followed by chrishughes24 with 3 solved tasks: both solving two tasks with Lean and tricking our system.</p>\n</blockquote>\n<p>Ha! Never trust a Lean user ;-)</p>",
        "id": 173023839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565617105
    },
    {
        "content": "<p>(pointing out typo which is now fixed)</p>",
        "id": 173024747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565617766
    },
    {
        "content": "<p>yeah, Aug 13 is correct ^^. thanks for pointing that out.</p>",
        "id": 173024794,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1565617802
    },
    {
        "content": "<p>Is it still possible to use Lean to solve the problems?</p>",
        "id": 173029625,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565621123
    },
    {
        "content": "<p>Yep, all problems will also be available in Lean :)</p>",
        "id": 173029771,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565621223
    },
    {
        "content": "<p>Many thanks Kevin! I see you were also involved with translating the previous problems into Lean</p>",
        "id": 173031243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565622273
    },
    {
        "content": "<p><a href=\"https://competition.isabelle.systems/competitions/contest/12/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/12/\">August 2019 Contest</a> is open for submissions now. Have fun :) !</p>",
        "id": 173100602,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1565690645
    },
    {
        "content": "<p>...small Lean hiccup at the necklace problem. the check file needs to be corrected (submissions will automatically be re-graded for you) - sorry!</p>",
        "id": 173102974,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565693471
    },
    {
        "content": "<blockquote>\n<p>...small Lean hiccup at the necklace problem. the check file needs to be corrected (submissions will automatically be re-graded for you) - sorry!</p>\n</blockquote>\n<p>Now fixed - congrats <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  for solving the first problem :)</p>",
        "id": 173105679,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565696555
    },
    {
        "content": "<p>Both statements for the second problem in Lean are false.</p>",
        "id": 173106823,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565697849
    },
    {
        "content": "<p>Maybe August's contest is supposed to be more challenging.</p>",
        "id": 173107257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565698325
    },
    {
        "content": "<blockquote>\n<p>Both statements for the second problem in Lean are false.</p>\n</blockquote>\n<p>That's not great... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  did you make use of an uninhabited type by chance?</p>",
        "id": 173107303,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565698396
    },
    {
        "content": "<p>Yes</p>",
        "id": 173107406,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565698514
    },
    {
        "content": "<p>Argh, types in Isabelle are always inhabited, which is why it makes more sense there.</p>",
        "id": 173107434,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565698550
    },
    {
        "content": "<p>rofl</p>",
        "id": 173107556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565698676
    },
    {
        "content": "<p>I remember having this conversation with Manuel Eberl in Big Proof 2. I told him \"We defined perfectoid spaces in Lean!\" and he said \"that sounds pretty simple, all you do is make a structure and prove that it's inhabited\" and I said \"oh gosh we're nowhere near proving that it's inhabited\"</p>",
        "id": 173107631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565698726
    },
    {
        "content": "<p>[since then we have proved that the empty space is perfectoid]</p>",
        "id": 173107659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565698770
    },
    {
        "content": "<p>I'll talk with <span class=\"user-mention\" data-user-id=\"139225\">@maximilian p.l. haslbeck</span> and let you know if we change it to inhabited types only or change the task to disprove both. Nice work Chris :')</p>",
        "id": 173107757,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565698858
    },
    {
        "content": "<p>You don't actually even need to use uninhabited types to disprove both. <code>prove</code> is false with <code>α = β = γ = bool</code> and <code>disprove</code> is false with <code>α = β = γ = unit</code></p>",
        "id": 173108226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565699269
    },
    {
        "content": "<p>I see, the Isabelle and Coq versions just do <code>α = string, β = nat, γ = Prop</code>, which isn't quite clear from the text. I guess we change it to that in Lean then as well.</p>",
        "id": 173108843,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565699778
    },
    {
        "content": "<p>I hope this: <a href=\"/user_uploads/3121/Galb1aPGQZZUBIssJ_hcksD-/lean_variables.zip\" target=\"_blank\" title=\"lean_variables.zip\">lean_variables.zip</a> should make sense now <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> (I need to wait for Max to change it online).</p>",
        "id": 173109690,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565700530
    },
    {
        "content": "<p>Managed that one<span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 173111657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565701962
    },
    {
        "content": "<p>Legend! Sorry for the inconvenience - you are really really helpful! :) Again, your submission will re-run when the definition is fixed online.</p>",
        "id": 173111893,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565702153
    },
    {
        "content": "<blockquote>\n<p>Legend! Sorry for the inconvenience - you are really really helpful! :) Again, your submission will re-run when the definition is fixed online.</p>\n</blockquote>\n<p>done that</p>",
        "id": 173119420,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1565707357
    },
    {
        "content": "<p>I just submitted a solution which failed because \"Illegal keyword \"notation\"\". Are we allowed local notation?</p>",
        "id": 173157816,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565735597
    },
    {
        "content": "<p>Yes local should work I think</p>",
        "id": 173158065,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1565735781
    },
    {
        "content": "<p>That's weird. It's still rejecting it.</p>",
        "id": 173158381,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565736163
    },
    {
        "content": "<p>... and I just noticed <code> local notation `|` t `|` := fintype.card t </code> at the beginning of the template file. Doubly weird</p>",
        "id": 173158400,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565736192
    },
    {
        "content": "<p><a href=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b\">https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b</a> is where the code was added. Do you see anything in the regex there that explains it?</p>",
        "id": 173159197,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1565737017
    },
    {
        "content": "<p>It looks like the comment mentioning notation is what is tripping it up. I just deleted that comment to check</p>",
        "id": 173159450,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565737211
    },
    {
        "content": "<p>Yuuup</p>",
        "id": 173159458,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565737222
    },
    {
        "content": "<p>The easiest fix would be to delete that comment from the template</p>",
        "id": 173159472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565737244
    },
    {
        "content": "<blockquote>\n<p>The easiest fix would be to delete that comment from the template</p>\n</blockquote>\n<p>Thanks, we will remove it! Sorry for the trouble and congrats for being first to solve the problem! :)</p>",
        "id": 173182864,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565769859
    },
    {
        "content": "<p>also congrats to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> for breaking the system (again!) <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span></p>",
        "id": 173183133,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565770186
    },
    {
        "content": "<p><code>set_option pp.notation</code> should be allowed, right?</p>",
        "id": 173183486,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1565770555
    },
    {
        "content": "<p>You can always delete that before submission without breaking proofs.</p>",
        "id": 173183599,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565770611
    },
    {
        "content": "<blockquote>\n<p><code>set_option pp.notation</code> should be allowed, right?</p>\n</blockquote>\n<p>It would be rejected at the moment. You can find the regex we use <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\">here</a>. If someone has suggestions to improve this check (or anything else), let me know :)</p>",
        "id": 173183931,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565770877
    },
    {
        "content": "<p>I don't quite understand why checking is done via regex? You could call lean itself at trust level zero to check any proofs. How are things implemented on the back end?</p>",
        "id": 173185070,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565772133
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>set_option pp.notation</code> should be allowed, right?</p>\n</blockquote>\n<p>It would be rejected at the moment. You can find the regex we use <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\">here</a>. If someone has suggestions to improve this check (or anything else), let me know :)</p>\n</blockquote>\n<p>Just change the RegEx to <code>^notation</code>?</p>",
        "id": 173185358,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1565772457
    },
    {
        "content": "<blockquote>\n<p>I don't quite understand why checking is done via regex? You could call lean itself at trust level zero to check any proofs. How are things implemented on the back end?</p>\n</blockquote>\n<p>The compile/check commands are <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py#L59\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py#L59\">here</a>. Setting the trust level to 0 is described as <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/shell/lean.cpp#L194\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/shell/lean.cpp#L194\">do not trust any macro and type check all imported modules</a>. I do not know what is meant by \"macro\" in that setting. Also, would that mean that all imported mathlib files are type-checked again?</p>",
        "id": 173185512,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565772615
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p><code>set_option pp.notation</code> should be allowed, right?</p>\n</blockquote>\n<p>It would be rejected at the moment. You can find the regex we use <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/commit/915ab5e7cd1c6a3fd67b4ebc634ad5361b935d5b#diff-8e9fe955379580cbe5cef4a9c4eb3c28R33\">here</a>. If someone has suggestions to improve this check (or anything else), let me know :)</p>\n</blockquote>\n<p>Just change the RegEx to <code>^notation</code>?</p>\n</blockquote>\n<p>you could then just add, for example, a whitespace, i.e. <code> notation ... := ...</code>, and it would succeed.</p>",
        "id": 173185628,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565772757
    },
    {
        "content": "<p><code>^\\s*notation</code>?</p>",
        "id": 173185741,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1565772890
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I don't quite understand why checking is done via regex? You could call lean itself at trust level zero to check any proofs. How are things implemented on the back end?</p>\n</blockquote>\n<p>The compile/check commands are <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py#L59\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py#L59\">here</a>. Setting the trust level to 0 is described as <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/shell/lean.cpp#L194\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/shell/lean.cpp#L194\">do not trust any macro and type check all imported modules</a>. I do not know what is meant by \"macro\" in that setting. Also, would that mean that all imported mathlib files are type-checked again?</p>\n</blockquote>\n<p>I think yes. The default trust setting is <code>max</code>. This could be changed on the mathlib binaries.</p>",
        "id": 173185879,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565773015
    },
    {
        "content": "<blockquote>\n<p><code>^\\s*notation</code>?</p>\n</blockquote>\n<p>That just solves the whitespace case. You can also have things like <code>#print \"Let's cheat\" notation 'false' := true</code></p>",
        "id": 173186052,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565773180
    },
    {
        "content": "<blockquote>\n<p>I think yes. The default trust setting is <code>max</code>. This could be changed on the mathlib binaries.</p>\n</blockquote>\n<p>Hmm, I do not know how to tweak the compile process such that mathlib is trusted and the submission file is not. Are there any references where I can learn how to do that?</p>",
        "id": 173186177,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565773319
    },
    {
        "content": "<p>I don't think trust 0 gets you anything if you compile the submission yourself anyway. On the other hand, to be completely safe you should probably put the theorem statement in a separate file that doesn't import the submission. Then you can do something like</p>\n<div class=\"codehilite\"><pre><span></span>import .statement\nimport .submission\n\ntheorem yesitstrue : _root_.thestatement := theproof\n</pre></div>",
        "id": 173186354,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565773545
    },
    {
        "content": "<blockquote>\n<p>I don't think trust 0 gets you anything if you compile the submission yourself anyway. On the other hand, to be completely safe you should probably put the theorem statement in a separate file that doesn't import the submission. Then you can do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">statement</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">submission</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">yesitstrue</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">thestatement</span> <span class=\"o\">:=</span> <span class=\"n\">theproof</span>\n</pre></div>\n\n\n</blockquote>\n<p>Ah, that's a good idea to solve the notation issue - thanks! :)</p>",
        "id": 173186651,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565773854
    },
    {
        "content": "<p>Though I guess someone could still add a notation for <code>_root_.thestatement</code>, haha. So you should beat them to it and define your own notation:<br>\nstatement.lean</p>\n<div class=\"codehilite\"><pre><span></span>def statement := ...\nnotation `statement` := statement\n</pre></div>\n\n\n<p>check.lean</p>\n<div class=\"codehilite\"><pre><span></span>import .statement\nimport .submission\n\ntheorem yesitstrue : statement := theproof\n</pre></div>\n\n\n<p>Now a malicious actor can at most overload <code>statement</code>, which will fail elaboration. At least that's the last trick I can think of.</p>",
        "id": 173187551,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565774612
    },
    {
        "content": "<p>Or you could do the test with a metaprogram. Write a tactic that retrieves the declaration named <code>thestatement</code> and check that the type of <code>theproof</code> unifies with the body of that declaration.</p>",
        "id": 173187931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565774948
    },
    {
        "content": "<p>You still have to call the tactic somewhere. There will be at least one identifier exposed to the attacker, so wrapping it in a notation is the best I can come up with</p>",
        "id": 173188047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565775051
    },
    {
        "content": "<p>You can inline the tactic in a <code>run_cmd</code>, no?</p>",
        "id": 173188190,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565775182
    },
    {
        "content": "<p>Or even define the tactic in <code>statement.lean</code> and just call it with a <code>run_cmd</code> in <code>check.lean</code>.</p>",
        "id": 173188275,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565775247
    },
    {
        "content": "<p>Yes, and then I'll shadow your tactic call in check.lean with a notation for <code>tactic.skip</code> in my submission :)</p>",
        "id": 173188361,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565775345
    },
    {
        "content": "<p>Ah, yeah, of course.</p>",
        "id": 173188548,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565775568
    },
    {
        "content": "<p>I did a low tech version of this for checking homework assignments in my course this spring. It definitely wasn't secure, but I figured if any students learned enough about Lean to trick it, they deserved the points anyway.</p>",
        "id": 173188719,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565775759
    },
    {
        "content": "<p>Do you do anything about the trick Gabriel Ebner raised whereby a malicious piece of Lean code can delete all the files on your computer?</p>",
        "id": 173192248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565779840
    },
    {
        "content": "<p>I think it was once a Lean issue?</p>",
        "id": 173192255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565779852
    },
    {
        "content": "<p>I remember having that discussion at Big Proof 1. Any programming language can do this, but Lean is kind of special in that code gets executed as soon as you open it in the editor.</p>",
        "id": 173192756,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565780457
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1781\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1781\">https://github.com/leanprover/lean/issues/1781</a></p>",
        "id": 173192758,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565780459
    },
    {
        "content": "<p>The regex looks very fragile to me. I think this is still possible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_command</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">evil_cmd</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">&quot;evil&quot;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_input</span> <span class=\"n\">command_like</span> <span class=\"o\">(</span><span class=\"s2\">&quot;nota&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;tion `false` := 0 = 0&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">evil</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 173211569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565795445
    },
    {
        "content": "<p>I'd say, just try it out! and if it works, please hide the solution :')</p>",
        "id": 173212140,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565795838
    },
    {
        "content": "<p>I had forgotten that we allow whitespace inside tokens... to be honest, there probably is no simpler bullet-proof solution than parsing the export format. If you put the theorem statement in a separate import, you \"just\" have to check that the type of the exported definition is a constant expression of the statement type's name.</p>",
        "id": 173214964,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1565797570
    },
    {
        "content": "<p>Yeah maybe that is easier, from my experiments yesterday breaking it (sorry <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> ), regex is hard to get perfect and esp. with lean's syntactic complexity ruling out all the edge cases sounds like it might take a little while, maybe the internal format is the way to go.</p>",
        "id": 173215369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1565797809
    },
    {
        "content": "<p>I've been also thinking how to make this robust. Maybe this works:<br>\nAs <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> suggested have a separate file <code>statement.lean</code>, which contains the statement, but does <em>not</em> import <code>submission.lean</code>. To make it robust, how about we generate a random name with 16 random letters (different for every time someone submits), and then:</p>\n<p>statement.lean</p>\n<div class=\"codehilite\"><pre><span></span>def &lt;random_name&gt; := false\n</pre></div>\n\n\n<p>check.lean</p>\n<div class=\"codehilite\"><pre><span></span>import .statement .submission\n\ntheorem yesitstrue : &lt;random_name&gt; := soundness_bug\n</pre></div>\n\n\n<p>Does anyone know an attack against that?</p>",
        "id": 173231853,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565809275
    },
    {
        "content": "<p><code>.submission</code> could have a metaprogram that reads the file <code>statement.lean</code> and tries to parse the name.</p>",
        "id": 173236079,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565812415
    },
    {
        "content": "<p>If I understand correctly, in Isabelle, they save the statement context in a local file and then load that file in  <code>.submission</code> - see <a href=\"https://www21.in.tum.de/~haslbema/documents/Haslbeck_Wimmer-Competitive_Proving_for_Fun.pdf\" target=\"_blank\" title=\"https://www21.in.tum.de/~haslbema/documents/Haslbeck_Wimmer-Competitive_Proving_for_Fun.pdf\">here</a> page 4</p>",
        "id": 173236572,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565812774
    },
    {
        "content": "<p>This thread should be renamed \"cheating for fun\"</p>",
        "id": 173236995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565813062
    },
    {
        "content": "<p>Sebastian's proposal seems to be the easiest, most reliant option so far to me.</p>",
        "id": 173237325,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565813292
    },
    {
        "content": "<p>btw, we got a Lean <a href=\"/user_uploads/3121/yv7yXPEzUYoUF4f5UCyv3nd8/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">winner!</a>  <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span> congrats <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yv7yXPEzUYoUF4f5UCyv3nd8/pasted_image.png\" target=\"_blank\" title=\"winner!\"><img src=\"/user_uploads/3121/yv7yXPEzUYoUF4f5UCyv3nd8/pasted_image.png\"></a></div>",
        "id": 173237513,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565813412
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 173237599,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565813486
    },
    {
        "content": "<p>I want to PR the lemmas I used in these exercises to mathlib, but I also don't want to give hints to other provers... I guess I'll wait till mid-September.</p>",
        "id": 173407967,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565989935
    },
    {
        "content": "<p>You can try giving the proof <code>by trust_me</code></p>",
        "id": 173408959,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1565990982
    },
    {
        "content": "<p>(deleted - that moment when \"Reply\" doesn't reply to the bottom message in your stream :P)</p>",
        "id": 173418122,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566001978
    },
    {
        "content": "<blockquote>\n<p>[since then we have proved that the empty space is perfectoid]</p>\n</blockquote>\n<p>What's the terminal perfectoid space, if there is one? Some analogue of Spec(Z)?</p>",
        "id": 173467143,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1566094536
    },
    {
        "content": "<p>There won't be one. There are perfectoid fields of char 0 and perfectoid fields of char p, maybe there is some weird pathological object. But it's not the right question. People work with perfectoid spaces over a fixed perfectoid field and over that field you just look at the affinoid space attached to that field. The problem is that we have no examples of perfectoid fields yet even though they're do-able -- we just need more algebra and field theory in Lean and more people</p>",
        "id": 173488826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566137890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> I think that nowadays the answer is: perfectoid spaces embed into the category of diamonds. And there is no terminal diamond, which is a <em>feature</em>. Because now you can look at <code>Spa Q_p × Spa Q_p</code> and it will not be <code>Spa Q_p</code>. (Philosophically, this means that we now think that we know how to take p-adic fibre products over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.)</p>",
        "id": 174042328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566659022
    },
    {
        "content": "<p>Given the following file <code>test.lean</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"err\">«</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">»</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">broken</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"err\">«</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">»</span>\n</pre></div>\n\n\n<p>When I run </p>\n<div class=\"codehilite\"><pre><span></span>lean test.lean -E check.out --json --only-export<span class=\"o\">=</span>broken\nleanchecker check.out broken\n</pre></div>\n\n\n<p>the output of leanchecker is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">broken</span> <span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"n\">checked</span> <span class=\"mi\">12</span> <span class=\"n\">declarations</span>\n</pre></div>\n\n\n<p>I would have expected to have the first line say something like <code>axiom «quot.sound : a» : false</code>. Is this a bug or working as expected? <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> came across this while checking the <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/pull/24\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/pull/24\">fix I committed</a> for the proving for fun competition. We are detecting non-built-in axioms, e.g. everything besides  <code>propext, classical.choice, quot.sound</code>, by parsing the output of leanchecker. In this case, we would not be able to detect any cheat.</p>",
        "id": 174960996,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567679159
    },
    {
        "content": "<p>Now I'm even more convinced that you should parse the export file yourself :)</p>",
        "id": 174961516,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567679766
    },
    {
        "content": "<p>Maybe one alternative is to use <a href=\"https://github.com/gebner/trepplein\" target=\"_blank\" title=\"https://github.com/gebner/trepplein\">https://github.com/gebner/trepplein</a> I just tried it and with <code>--print-all-decls</code> I see <code>axiom quot.sound : a : false</code> for the above example.</p>",
        "id": 174978509,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1567693510
    },
    {
        "content": "<p>Or better yet, run both!</p>",
        "id": 174978543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1567693535
    },
    {
        "content": "<p>right, and then you could just prohibit the declaration of any extra axioms?</p>",
        "id": 174979489,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567694067
    },
    {
        "content": "<p>Yes, trepplein helpfully prints <code>/- builtin -/</code> before any builtin axioms so that seems easier in this case.</p>",
        "id": 174979578,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1567694146
    },
    {
        "content": "<p>I had a brief look at trepplein, but I do not want to install scalar, sbt, etc. as well when setting up the backend (installing trepplein actually failed for me at first because there is a <a href=\"https://github.com/scala/bug/issues/11022\" target=\"_blank\" title=\"https://github.com/scala/bug/issues/11022\">bug with JDK10 and optimisations</a>). I just <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/pull/24/files#diff-92026de5ad0a0ca81520415224ed2d80R20\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/pull/24/files#diff-92026de5ad0a0ca81520415224ed2d80R20\">included the type of the axiom in the check</a> for now</p>",
        "id": 174988496,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567699351
    },
    {
        "content": "<p>Thanks for all the help, that is breaking my code multiple times <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 174989246,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567699811
    },
    {
        "content": "<p>Thanks for putting up with me! It looks pretty robust now.</p>",
        "id": 174989531,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1567700009
    },
    {
        "content": "<p>Hey what is happening with Proving for Fun this month? The current competition is about to end. Will the new one support Lean? <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> do you know about this stuff?</p>",
        "id": 175472439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568233484
    },
    {
        "content": "<p>I've been trying the August 2019 problems and some are infuriating.</p>",
        "id": 175472513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568233542
    },
    {
        "content": "<p>Am I allowed to import stuff which isn't imported yet? I don't have <code>use</code> in the PCP problem.</p>",
        "id": 175478013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568237340
    },
    {
        "content": "<p>Yes you should be able to import anything from mathlib</p>",
        "id": 175480868,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1568239918
    },
    {
        "content": "<p>do solutions for these problem get released at the end of the month? I'm interested in comparing across provers</p>",
        "id": 175487480,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568246716
    },
    {
        "content": "<p>Yes: see <a href=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\">https://github.com/maxhaslbeck/ProvingForFun-July2019</a> for July's. Also there is another solution in the \"issues\" tab there that is not saved as a file.</p>",
        "id": 175488711,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1568248185
    },
    {
        "content": "<p>There are no lean ones on there yet though, just one of <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> on the issues page</p>",
        "id": 175488800,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1568248257
    },
    {
        "content": "<p>Maybe this will change on Saturday :-)</p>",
        "id": 175497738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568262027
    },
    {
        "content": "<blockquote>\n<p>Hey what is happening with Proving for Fun this month? The current competition is about to end. Will the new one support Lean? <span class=\"user-mention silent\" data-user-id=\"198376\">Kevin Kappelmann</span> do you know about this stuff?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There is in fact a <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">whole workshop including a new competition tomorrow at ITP</a>. You can again solve all problems in Lean, Isabelle, or Coq. Moreover, you can discuss, for example, how to organise, improve, and make use of proving contests to help spark interest for the ITP community at the workshop :) (I'm sadly not at ITP, but <span class=\"user-mention\" data-user-id=\"139225\">@maximilian p.l. haslbeck</span> will be)</p>",
        "id": 175508228,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568276138
    },
    {
        "content": "<blockquote>\n<p>do solutions for these problem get released at the end of the month? I'm interested in comparing across provers</p>\n</blockquote>\n<p>Yes, solutions will be released at the end of the month. If <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> does not mind, I can provide his Lean solutions in the July repository. At the end of the August competition, I suppose that Max will create a similar repository including sample solutions.</p>",
        "id": 175508364,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568276281
    },
    {
        "content": "<p>I don't mind. They're not necessarily particularly elegant solutions.</p>",
        "id": 175508535,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1568276414
    },
    {
        "content": "<blockquote>\n<p>Yes: see <a href=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/ProvingForFun-July2019\">https://github.com/maxhaslbeck/ProvingForFun-July2019</a> for July's. Also there is another solution in the \"issues\" tab there that is not saved as a file.</p>\n</blockquote>\n<p>I uploaded the solutions for the two problems that were formalised in Lean now; they are quite simple though. The ones for August gonna be more interesting.</p>",
        "id": 175510225,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568278129
    },
    {
        "content": "<p>I just finished PCP but looks like I missed the deadline :D I got caught out by the fact that I'm not in the right time zone ;-)</p>",
        "id": 175580574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568330841
    },
    {
        "content": "<p>Thank you for uploading the solutions. I feel like having a collection of worked examples in multiple languages is very educational. Maybe we need a Rosetta Code for theorem proving... <a href=\"http://rosettacode.org\" target=\"_blank\" title=\"http://rosettacode.org\">http://rosettacode.org</a></p>",
        "id": 175581108,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568331455
    },
    {
        "content": "<p>Sort of like Freek's 100 problems list but more general</p>",
        "id": 175581301,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568331717
    },
    {
        "content": "<p>Thanks for adding the Lean formalisations of the July questions! Can I somehow upload my solution to PCP (August) even though the deadline is passed? Or have I missed my chance?</p>",
        "id": 175581378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568331798
    },
    {
        "content": "<p>By the way, when I download the zip files, I always have to rename the names of the Lean files, e.g. from <code>Defs.lean</code> to <code>defs.lean</code> (or else the import fails). I'm on Ubuntu.</p>",
        "id": 175581541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568332002
    },
    {
        "content": "<blockquote>\n<p>I just finished PCP but looks like I missed the deadline :D I got caught out by the fact that I'm not in the right time zone ;-)</p>\n</blockquote>\n<p>The PCP task is now in the <a href=\"https://competition.isabelle.systems/competitions/contest/6/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/6/\">\"Alltime Contest\"</a>, fell free to submit your solution there.</p>",
        "id": 175596141,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1568353445
    },
    {
        "content": "<blockquote>\n<p>By the way, when I download the zip files, I always have to rename the names of the Lean files, e.g. from <code>Defs.lean</code> to <code>defs.lean</code> (or else the import fails). I'm on Ubuntu.</p>\n</blockquote>\n<p>That's very true and inconvenient - I created an <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/issues/25\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/issues/25\">issue on GitHub</a></p>",
        "id": 175606954,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568366302
    },
    {
        "content": "<p>Today we will have the <a href=\"https://www21.in.tum.de/~wimmers/proofground/\" target=\"_blank\" title=\"https://www21.in.tum.de/~wimmers/proofground/\">Proof Ground</a> workshop here in Portland. We will have two contests, one before lunch (10:30 - 12:30 (PDT)) and one after lunch (14:00 - 15:30 (PDT)). Feel free to participate from anywhere on earth and have fun by solving and mechanizing the tasks :).</p>",
        "id": 175637358,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1568389956
    },
    {
        "content": "<p>The morning session is starting now. You can see the problems here and submit solutions: <a href=\"https://competition.isabelle.systems/competitions/contest/13/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/13/\">https://competition.isabelle.systems/competitions/contest/13/</a></p>",
        "id": 175646479,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1568395906
    },
    {
        "content": "<p>The afternoon session has started.  <a href=\"https://competition.isabelle.systems/competitions/contest/14/\" target=\"_blank\" title=\"https://competition.isabelle.systems/competitions/contest/14/\">https://competition.isabelle.systems/competitions/contest/14/</a></p>",
        "id": 175664979,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1568409492
    },
    {
        "content": "<p>Looks like sledgehammer_squad completed every problem! How much of their proofs was via <code>sledgehammer</code> as opposed to human reasoning?</p>",
        "id": 175675039,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568420030
    },
    {
        "content": "<p>They were clever in how they broke down the problem between the two of them and sledgehammer allowed them to skirt detailed proofs</p>",
        "id": 175675175,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568420187
    },
    {
        "content": "<p>Do you know which part of sledgehammer was the most effective?</p>",
        "id": 175675388,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568420439
    },
    {
        "content": "<p>as in was their a particular solver it called out to that solved most of their intermediate lemmas</p>",
        "id": 175675413,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568420508
    },
    {
        "content": "<p>What the business with </p>\n<div class=\"codehilite\"><pre><span></span>-- the goal used in submission\nnotation `GOAL` :=\n</pre></div>\n\n\n<p>in the Lean template. Am I meant to be confused by this?</p>",
        "id": 175675686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568420914
    },
    {
        "content": "<p>I can tell you that I at least didn't use sledgehammer very much. Occasionally when I was too lazy to figure out what lemmas I need for some obvious fact. But I don't use it that much because it breaks my flow if I have to wait for it to finish.</p>",
        "id": 175675792,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568421097
    },
    {
        "content": "<p>We only worked on one problem in parallel, and there sledgehammer did probably save us a few minutes because it made the \"integration\" of my lemmas and Peter's proof that wanted to use them easier.</p>",
        "id": 175675841,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568421147
    },
    {
        "content": "<p>In any case, the difficult part is figuring out what auxiliary lemmas you need, what kind of induction pattern to use, and then you sometimes have to do ugly case distinctions. Sledgehammer doesn't help with any of that. So the role of sledgehammer in our work today really shouldn't be overestimated.</p>",
        "id": 175675926,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568421261
    },
    {
        "content": "<p>Thanks for chiming in <span class=\"user-mention\" data-user-id=\"233634\">@Manuel Eberl</span>. It is quite impressive what a head start you two had. Any idea what was most determinant in your performance?</p>",
        "id": 175676156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568421647
    },
    {
        "content": "<p>oh - is it weird that I'm actually a little disappointed? I was hoping there was going to be \"that one secret tactic that computer scientists don't want you to know about\" that would solve my proofs. But, like always, the solution is: think really hard and be a smarter human, which is difficult work as you know, haha</p>",
        "id": 175676279,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568421887
    },
    {
        "content": "<blockquote>\n<p>Thanks for chiming in <span class=\"user-mention silent\" data-user-id=\"233634\">Manuel Eberl</span>. It is quite impressive what a head start you two had. Any idea what was most determinant in your performance?</p>\n</blockquote>\n<p>Hard to say. The automation probably helped a lot. Also I have 8 years of experience with the system, and Peter even more.</p>",
        "id": 175676401,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568422099
    },
    {
        "content": "<p>I think the real question is: What obstacles did the other teams encounter?</p>",
        "id": 175676423,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568422163
    },
    {
        "content": "<p>The grammar problem and the \"fold\" one were a bit tricky, but the others were fairly straightforward. So I think the best strategy is to figure out where the other teams go stuck with those simple problems and why.</p>",
        "id": 175676478,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568422206
    },
    {
        "content": "<p>Floris's team was only a few minutes behind us in the first session. I'll ask him what the problem was in the second session. I'm curious myself.</p>",
        "id": 175676512,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1568422277
    },
    {
        "content": "<p>Speaking for Floris' team, in the second round, we didn't split the workload smartly and when we got stuck we didn't switch problems. Some simple ideas also escaped us.</p>",
        "id": 175680527,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568429674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Here's the \"slick\" proof I was thinking of for the balanced words challenge:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">balanced</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tf</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">ft</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">])</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">balanced</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">balanced</span><span class=\"bp\">.</span><span class=\"n\">ft</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">balanced</span><span class=\"bp\">.</span><span class=\"n\">tf</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">unbalanced</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bal</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">unbalanced</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">up</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">unbalanced</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">unbalanced</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">unbalanced</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"n\">n</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">IH</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append_assoc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">unbalanced</span><span class=\"bp\">.</span><span class=\"n\">bal</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">h₃</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">unbalanced</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">h₃</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">tipsy</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">tt</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">tipsy</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">ff</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">tipsy</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"bp\">|</span> <span class=\"n\">bal</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tipsy</span> <span class=\"n\">m</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lem1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">tipsy</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">tipsy</span><span class=\"bp\">.</span><span class=\"n\">bal</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">tipsy</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">tipsy</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lem2a</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">balanced</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lem2b</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">unbalanced</span><span class=\"bp\">.</span><span class=\"n\">bal</span> <span class=\"n\">balanced</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lem2c</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unbalanced</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">unbalanced</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">balanced</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tipsy</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">IH</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">IH</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">IH</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">IH_k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2a</span> <span class=\"n\">IH_a</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add</span><span class=\"o\">],</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2a</span> <span class=\"n\">IH_a</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">],</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2c</span> <span class=\"n\">IH_a</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tipsy</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">_</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">lem2b</span> <span class=\"n\">IH_a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">],</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2c</span> <span class=\"n\">IH_a</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">IH_k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2a</span> <span class=\"n\">IH_a</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add</span><span class=\"o\">],</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lem2a</span> <span class=\"n\">IH_a</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tipsy</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"bp\">_</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">lem2b</span> <span class=\"n\">IH_a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">goal</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">balanced</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lem1</span> <span class=\"n\">h</span> <span class=\"n\">lem2</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 175691609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568451695
    },
    {
        "content": "<p>Hope you guys had fun and maybe discussed some ideas how to further extend and make use of the competitions system!</p>\n<blockquote>\n<p>What the business with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- the goal used in submission</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">GOAL</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>in the Lean template. Am I meant to be confused by this?</p>\n</blockquote>\n<p>This was done to prevent the \"notation cheat\". See <a href=\"#narrow/stream/113488-general/topic/Proving.20for.20Fun/near/173187551\" title=\"#narrow/stream/113488-general/topic/Proving.20for.20Fun/near/173187551\">this post</a>.</p>",
        "id": 175692098,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568452763
    },
    {
        "content": "<p>Could we maybe have a comment to the effect that it's irrelevant implementation garbage, that someone interested in doing the problem should ignore?</p>",
        "id": 175693943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568456302
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 175696458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568460721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That's a slick proof indeed. Very nice!</p>",
        "id": 175711628,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568484294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233634\">@Manuel Eberl</span> posted <a href=\"https://www21.in.tum.de/~eberlm/proofground2019.html\" target=\"_blank\" title=\"https://www21.in.tum.de/~eberlm/proofground2019.html\">a link to his proofs for Proof Ground 2019</a> on Twitter. I'd like to have a discussion about some of those problems, and in particular why some of them might be harder in Lean than in Isabelle. But I keep not starting it because I've not finished all the questions yet :-)</p>",
        "id": 176022195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568824865
    },
    {
        "content": "<p>I haven't seen these proofs yet but I think you probably will get only a weak signal regarding overall ease of use of the library from a 3 hour competition. You are far more likely to see noise relating to how well the competitor knows the library and the right proof strategy for the competition problems</p>",
        "id": 176038044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568835372
    },
    {
        "content": "<p>That's also my opinion</p>",
        "id": 176038295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1568835542
    },
    {
        "content": "<p>In the experiments I am doing with large theories, I believe it would be nice to have something similar to Sledgehammer in Lean. The proof <a href=\"https://github.com/arademaker/sumo/blob/lists/bs.lean#L178-L210\" target=\"_blank\" title=\"https://github.com/arademaker/sumo/blob/lists/bs.lean#L178-L210\">https://github.com/arademaker/sumo/blob/lists/bs.lean#L178-L210</a> is just a sequence of uses of the same 2-3 axioms to navigate in the <a href=\"http://sigma.ontologyportal.org:8080/sigma/Graph.jsp?kb=SUMO&amp;lang=EnglishLanguage&amp;flang=SUO-KIF&amp;relation=subclass&amp;term=Vertebrate&amp;up=13&amp;down=1&amp;limit=&amp;inst=inst&amp;columns=direct-children&amp;columns=documentation&amp;columns=graph&amp;scrWidth=1381&amp;view=text&amp;submit=submit\" target=\"_blank\" title=\"http://sigma.ontologyportal.org:8080/sigma/Graph.jsp?kb=SUMO&amp;lang=EnglishLanguage&amp;flang=SUO-KIF&amp;relation=subclass&amp;term=Vertebrate&amp;up=13&amp;down=1&amp;limit=&amp;inst=inst&amp;columns=direct-children&amp;columns=documentation&amp;columns=graph&amp;scrWidth=1381&amp;view=text&amp;submit=submit\">SUMO hierarchy</a>.</p>",
        "id": 179719291,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1572729138
    },
    {
        "content": "<p>The discussion about Codewars sparked me to try to break the system again. It is still possible: <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/issues/27\" target=\"_blank\" title=\"https://github.com/maxhaslbeck/proving-contest-backends/issues/27\">https://github.com/maxhaslbeck/proving-contest-backends/issues/27</a></p>",
        "id": 188403938,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581970144
    },
    {
        "content": "<p>War. War never changes...</p>",
        "id": 188409902,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1581977658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20for.20Fun/near/175581108\">said</a>:</p>\n<blockquote>\n<p>Thank you for uploading the solutions. I feel like having a collection of worked examples in multiple languages is very educational. Maybe we need a Rosetta Code for theorem proving... <a href=\"http://rosettacode.org\">http://rosettacode.org</a></p>\n</blockquote>\n<p>My first contribution. I have also created a page for Lean. See </p>\n<p><a href=\"http://rosettacode.org/wiki/Fibonacci_sequence#Lean\">http://rosettacode.org/wiki/Fibonacci_sequence#Lean</a></p>",
        "id": 204240827,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595010068
    },
    {
        "content": "<p>The competitors are taking their turn... <a href=\"https://rosettacode.org/wiki/Category:Isabelle\">https://rosettacode.org/wiki/Category:Isabelle</a>. ;-)</p>",
        "id": 204320891,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595111604
    },
    {
        "content": "<p>I don't think of these other systems as competitors. I believe that early lean development was hugely inspired by Isabelle. I think the interesting question is what does and doesn't work in the systems (or more precisely how well various parts of methods work in the systems). Isabelle has demonstrated that complex analysis works great there. I am unclear about whether there is a serious Coq development but we have essentially nothing in Lean. Perhaps if the Isabelle people explain how to do it, we can learn!</p>",
        "id": 204342108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595152962
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> surely. I was just making some fun. I completely agree that we can and must learn from each other.  Regarding the <a href=\"http://rosettacode.org\">rosettacode.org</a>, I like the idea of the webiste. Having the same problem encoded in many different tools/language help us understand the differences. That is why I am motivating people to contribute with more Lean code. Next I would like to try the sort algorithms that already have Isabelle  code there.</p>",
        "id": 204730533,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595457253
    }
]