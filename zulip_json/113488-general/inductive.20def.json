[
    {
        "content": "<p>I very rarely use inductive def so I'm a bit confused by:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Works ok</span>\n<span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- Lean complains: type mismatch at application  find&#39; a, term  a has type  ℕ but is expected to have type   list ℕ</span>\n<span class=\"n\">def</span> <span class=\"n\">find&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">find&#39;</span> <span class=\"n\">a</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>Is there a way to get something like my second attempt to work?</p>",
        "id": 150691842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543687651
    },
    {
        "content": "<p><code>find' t</code> (without the <code>a</code>)</p>",
        "id": 150691886,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1543687721
    },
    {
        "content": "<p>(The parameters before the colon---<code>a</code> in this case---are assumed to be constant in the recursive calls, so you don't have to repeat them.)</p>",
        "id": 150692066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1543688054
    },
    {
        "content": "<p>That used to confuse me so much. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>I was like \"...yeah, but what is <code>a</code> equal to??\". It's equal to the <code>a</code> before the colon.</p>",
        "id": 150692420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543688763
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 150692857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543689619
    }
]