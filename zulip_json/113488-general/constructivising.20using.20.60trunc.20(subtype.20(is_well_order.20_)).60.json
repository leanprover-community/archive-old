[
    {
        "content": "<p>How many things can we constructivise with a <code>trunc (subtype (is_well_order _))</code> hypothesis? I'm sure we can make a truncated basis this way... Maybe if it can constructivise a lot of stuff, I would imagine making it as wide-used as <code>decidable_eq</code></p>",
        "id": 148204645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542941204
    },
    {
        "content": "<p>well this surely implies <code>decidable_eq</code> to start with</p>",
        "id": 148204651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542941235
    },
    {
        "content": "<p>(on second thought maybe we need a decidable prop to do so, but we can fix this by requiring our function to have codomain <code>bool</code> instead?)</p>",
        "id": 148204672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542941282
    },
    {
        "content": "<p>and how about making <code>trunc (equiv _ _)</code> an instance</p>",
        "id": 148204807,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542941613
    },
    {
        "content": "<p>congratulations then, you got yourself into an instance loop with a fintype having decidable equality</p>",
        "id": 148204852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542941660
    },
    {
        "content": "<p>I think <code>is_well_order</code> is not as useful constructively as it is in classical maths</p>",
        "id": 148208342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542948393
    },
    {
        "content": "<p>in particular <code>is_well_order.min</code> is not constructive</p>",
        "id": 148208346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542948410
    }
]