[
    {
        "content": "<p>As sometimes happens, my goal is currently <code>FPTB.res BU _ _ s = si i</code> and my proof that these two things are equal is going to involve showing that they're both the unique object with some property. I am in tactic mode. I need to hence feed both sides into a bunch of machinery (the proofs that each side has the property are quite different). The underscores are proofs. I want to write \"now let x be the left hand side\" just to make things easier to handle, but the proof terms are probably nightmares. I am hoping there's a cute one-liner which lets me do this, based on the fact that I sometimes use <code>to_lhs</code> in conv mode. But I don't think <code>to_lhs</code> exists in tactic mode.</p>",
        "id": 124756807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523089103
    },
    {
        "content": "<p>does <code>let x := FPTB.res BU _ _ s</code> work?</p>",
        "id": 124756812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523089153
    },
    {
        "content": "<p>Here's a cute one-liner: <code>show let x := _ in x = si i, intro x</code></p>",
        "id": 124756868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523089287
    },
    {
        "content": "<p>can you do the same sort of thing with generalize?</p>",
        "id": 124756914,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523089406
    },
    {
        "content": "<p>i don't have lean on this computer so i can't check myself</p>",
        "id": 124756961,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1523089530
    },
    {
        "content": "<p>It's not a bad idea, but no, <code>generalize</code> does not introduce let binders, only regular variables</p>",
        "id": 124757001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523089585
    },
    {
        "content": "<p>The best part about <code>generalize</code> with <code>let</code> is that it doesn't suffer the same problems with type incorrectness as <code>generalize</code> itself, since the replacement is definitional</p>",
        "id": 124757008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523089662
    },
    {
        "content": "<blockquote>\n<p>does <code>let x := FPTB.res BU _ _ s</code> work?</p>\n</blockquote>\n<p>It works in the sense that no error appears, but all of a sudden I have 4 goals not 1.</p>",
        "id": 124757409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090740
    },
    {
        "content": "<blockquote>\n<p>Here's a cute one-liner: <code>show let x := _ in x = si i, intro x</code></p>\n</blockquote>\n<p><code>show tactic failed</code></p>",
        "id": 124757449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090804
    },
    {
        "content": "<p>and what if both sides had suppressed-proofs?</p>",
        "id": 124757454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090842
    },
    {
        "content": "<p>This is hardly a serious issue, I mean I could turn proofs on and just copy what it said I guess...</p>",
        "id": 124757455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090859
    },
    {
        "content": "<p>What order are the goals? <code>let x := FPTB.res BU _ _ s, show x = si i</code> should kill most of the auxiliary goals</p>",
        "id": 124757456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523090862
    },
    {
        "content": "<p>you should be able to do this by unification, no need to copy down those proofs</p>",
        "id": 124757495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523090888
    },
    {
        "content": "<p>does <code>change</code> give a better error message than <code>show</code> in the one-liner?</p>",
        "id": 124757498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523090929
    },
    {
        "content": "<p>wooah one of my proofs is cool</p>",
        "id": 124757505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090949
    },
    {
        "content": "<p><code>sheaf_property._proof_6 U Î² Ui Hcover i</code></p>",
        "id": 124757506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090956
    },
    {
        "content": "<blockquote>\n<p>you should be able to do this by unification, no need to copy down those proofs</p>\n</blockquote>\n<p>I like your way of thinking</p>",
        "id": 124757507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523090992
    },
    {
        "content": "<p>This seems to work in my mockup example:</p>\n<div class=\"codehilite\"><pre><span></span>example (LHS RHS : nat) : LHS = RHS :=\nbegin\n  let x, show x = RHS,\nend\n</pre></div>",
        "id": 124757596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091130
    },
    {
        "content": "<p><code>change let x := _ in x = si i</code> -&gt; <code> don't know how to synthesize placeholder [some term involving all the proofs = si i]</code></p>",
        "id": 124757597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091180
    },
    {
        "content": "<p><code>let x := FPTB.res BU _ _ s, show x = si i</code> -- this is the answer</p>",
        "id": 124757642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091248
    },
    {
        "content": "<p>The whole definition of the <code>let</code> is optional since it is inferred by the <code>show</code></p>",
        "id": 124757643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091278
    },
    {
        "content": "<p>Sorry so slow, one of my monitors just died, so it's like I'm back in 2015 with only one screen</p>",
        "id": 124757644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091281
    },
    {
        "content": "<p>I might steal one of the kids' monitors, they're all still in bed</p>",
        "id": 124757650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091309
    },
    {
        "content": "<p><code>let x := _, show x = si i</code> -- this is the best answer</p>",
        "id": 124757690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091375
    },
    {
        "content": "<p>but it's a hack because what if the RHS had also been full of implicit proofs?</p>",
        "id": 124757691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091391
    },
    {
        "content": "<p>but it'll do for now -- thanks :-)</p>",
        "id": 124757692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091406
    },
    {
        "content": "<p>I bet even <code>let x, show x =  _</code> works</p>",
        "id": 124757693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091415
    },
    {
        "content": "<p>Indeed it does.</p>",
        "id": 124757698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091444
    },
    {
        "content": "<p><code>let x,</code></p>",
        "id": 124757699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091449
    },
    {
        "content": "<p>wtf?</p>",
        "id": 124757700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091452
    },
    {
        "content": "<p>All parts of a <code>let</code> or <code>have</code> are optional</p>",
        "id": 124757701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091474
    },
    {
        "content": "<p>you can even just <code>have,</code></p>",
        "id": 124757702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091482
    },
    {
        "content": "<p>It's the := being optional I didn't know about :-)</p>",
        "id": 124757741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091503
    },
    {
        "content": "<p>I'm sure you are familiar with omitting <code>:=</code> in a <code>have x : property,</code> tactic</p>",
        "id": 124757742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091532
    },
    {
        "content": "<p>I guess so</p>",
        "id": 124757743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091541
    },
    {
        "content": "<p>thanks!</p>",
        "id": 124757750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091577
    },
    {
        "content": "<p>Note that this only works in tactic mode, in term mode it's not so flexible</p>",
        "id": 124757751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091592
    },
    {
        "content": "<p>I was tempted to go into conv mode and use to_lhs</p>",
        "id": 124757790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091609
    },
    {
        "content": "<p>but was scared that if I had to do anything at all in conv mode then I would fail</p>",
        "id": 124757794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091628
    },
    {
        "content": "<p>e.g. prove something</p>",
        "id": 124757795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091638
    },
    {
        "content": "<p>This way is a much better way.</p>",
        "id": 124757796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091649
    },
    {
        "content": "<p>Show is <em>super</em> useful, don't underestimate the power of unification with <code>_</code></p>",
        "id": 124757797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091659
    },
    {
        "content": "<p>Yes, that was the insight.</p>",
        "id": 124757806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091714
    },
    {
        "content": "<p>That I could use unification to fill in the holes.</p>",
        "id": 124757845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091728
    },
    {
        "content": "<p>I just wanted to copy them</p>",
        "id": 124757846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091739
    },
    {
        "content": "<p>Only thing missing is allowing metavariables instead of <code>_</code> that can be referenced afterwards :)</p>",
        "id": 124757847,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523091742
    },
    {
        "content": "<p>You can still achieve most of this with unification</p>",
        "id": 124757894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091904
    },
    {
        "content": "<p>Summary for casual readers: <code>let x, show x = _</code> works for me and answers the original question -- it lets <code>x</code> be the left hand side of a goal of the form <code>X = Y</code>. It looks powerful enough to work in great generality.</p>",
        "id": 124757898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523091953
    },
    {
        "content": "<p>Do you know why my <code>show let</code> solution failed? Looks like the type checking complained too early</p>",
        "id": 124757899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523091961
    },
    {
        "content": "<p>Hmm -- <code>change let x := _ in x = si i</code> actually gives <code> don't know how to synthesize placeholder; context = blah blah blah, â¢ ?m_1</code></p>",
        "id": 124757985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523092159
    },
    {
        "content": "<p>I think <code>let</code> checking the value independent from the body is a feature</p>",
        "id": 124758074,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1523092326
    },
    {
        "content": "<p>fair enough - I forgot that <code>change</code> doesn't create metavariables but only unifies. <code>let x,</code> has the behavior I intended and also unifies properly in the <code>show</code> line, so I guess it's fine</p>",
        "id": 124758124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523092545
    },
    {
        "content": "<blockquote>\n<p>I bet even <code>let x, show x =  _</code> works</p>\n</blockquote>\n<p>Is there a version of this trick for term mode, when I want to rw something in a hypothesis and not my goal?</p>",
        "id": 124940592,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523466923
    },
    {
        "content": "<p>You can rw in a hypothesis in term mode by using <code>eqn â¸ h</code> in place of <code>h</code> wherever it gets used. (You may need <code>eqn</code> or <code>eqn.symm</code> depending on orientation of the equation.)</p>",
        "id": 124944250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523471804
    },
    {
        "content": "<p>This came up with me specifically because I could not use rw because I only wanted to rewrite a certain term on the LHS, and it showed up on both sides.</p>",
        "id": 124947124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476059
    },
    {
        "content": "<p>conv!</p>",
        "id": 124947190,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523476130
    },
    {
        "content": "<p>Actually I am lying, I remember now, it was because there were suppressed proofs everywhere.</p>",
        "id": 124947296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476212
    },
    {
        "content": "<p>Although in the unfolding carefully thread the issue is raised about what happens when conv mode doesn't have the tactics you want.</p>",
        "id": 124947332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476268
    },
    {
        "content": "<p>Conversely, did you see the transitive trick?</p>",
        "id": 124947352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476312
    },
    {
        "content": "<p>Maybe you can let <code>y := RHS</code>, then rewrite in the hypothesis to get <code>LHS = y</code> and then just rw on the hypothesis (<code>rw ... at H</code> works)</p>",
        "id": 124947516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476458
    },
    {
        "content": "<p>(or the triangle business)</p>",
        "id": 124947526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523476478
    },
    {
        "content": "<p>All this discussion is probably worth a new tips and tricks file in <code>mathlib/docs/extras/</code></p>",
        "id": 124947837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523476868
    }
]