[
    {
        "content": "<p>Often we need to write <code>dsimp, simp</code>, and merely <code>simp</code> won't suffice.</p>",
        "id": 193655191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586603905
    },
    {
        "content": "<p>This is because <code>simp</code> is afraid of making non-definitional changes, which might break the larger expression, but <code>dsimp</code> can boldly rewrite any subexpression.</p>",
        "id": 193655204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586603956
    },
    {
        "content": "<p>Here's a toy example (if anyone has an even smaller one, please show me):</p>",
        "id": 193655208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586603971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span> <span class=\"c1\">-- not important; this is just here because I use `constant` below.</span>\n\n<span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">},</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">h</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">ic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"n\">X</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">F_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">g_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- This works fine:</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- But why do we need the `dsimp` at all?</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">--- remaining goals `c (i X) k = k`, even though this is `ic`</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193655212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586603996
    },
    {
        "content": "<p>Would it be possible to have a combined <code>simp+dsimp</code>, which in a single pass does whatever <code>simp</code> can do, but when <code>simp</code> would be afraid to penetrate deeper into a subexpression, it sends <code>dsimp</code> on ahead of it?</p>",
        "id": 193655265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586604063
    },
    {
        "content": "<p>The <code>hott3</code> simplifier does this: <a href=\"https://github.com/gebner/hott3/blob/436a4f5e49f51ca5773b34df046bbf67e2584f70/src/hott/init/meta/simp.lean#L11-L22\" title=\"https://github.com/gebner/hott3/blob/436a4f5e49f51ca5773b34df046bbf67e2584f70/src/hott/init/meta/simp.lean#L11-L22\">https://github.com/gebner/hott3/blob/436a4f5e49f51ca5773b34df046bbf67e2584f70/src/hott/init/meta/simp.lean#L11-L22</a></p>",
        "id": 193655396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586604252
    },
    {
        "content": "<p>Could I just drop the <code>guard</code> condition and use this?</p>",
        "id": 193655414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586604337
    },
    {
        "content": "<p>Why would we not want this to be the default behaviour?</p>",
        "id": 193655459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586604364
    },
    {
        "content": "<p>Yes, you can use this (and drop the guard, it's only necessary for hott).</p>",
        "id": 193655466,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586604393
    },
    {
        "content": "<p>I have no strong opinion on the default behavior.</p>",
        "id": 193655471,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586604414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, do you know why we have a separate <code>simplify</code> and <code>ext_simplify_core</code>? Is it just a speed optimisation? Do you know of a piece of Lean code that we could replace <code>simplify</code> by (just like your <code>simplify_plus_d</code>) that uses <code>ext_simplify_core</code>, but reproduces the current behaviour of <code>simplify</code>?</p>",
        "id": 193657340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586607189
    },
    {
        "content": "<p>(Unfortunately just dropping in <code>simplify_plus_d</code> (without the hott bits), and asking <code>simp_target</code> to use it instead of <code>simplify</code> seems to cause lots of things to fail. :-)</p>",
        "id": 193657430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586607336
    }
]