[
    {
        "content": "<p>As you all know, I'm a newbie wrt ATP etc. Please let me pick your brains.<br>\nAre there good examples/experiments/research papers that deal with autogenerating a bunch of boring lemmas, given some new definition.<br>\nLet me put it this way. We teach Lean what a semigroup is, and it generates <code>semigroup.lean</code>. We teach Lean what a <code>monoid</code> is and it generates <code>monoid.lean</code>, and then <code>group.lean</code> and <code>semiring.lean</code> etc...<br>\nThe system could just go crazy and try to combine the axioms in all sorts of ways, and flood the file with all the trivialities it comes up with. It could score the lemmas by length of the statement, and keep the ones that are shortish. Autogenerating a name must be possible. It gets bonus points if it reuses previously proved lemmas in the proofs.</p>\n<p>Of course this is all not very interesting for the files that we already have. But we'll have to write lots of such files in the future. I certainly wouldn't mind if the system would have generated <code>valuation/basic.lean</code> for us.<br>\nNote that I'm really speaking of a one-time thing. It generates the file once, not every compile. So speed is not really an issue.<br>\nAnd if we teach it the naming scheme, then the result should be pretty usable. Next step would be to recognize simp-lemmas, etc.</p>\n<p>Just some random thoughts. Looking forward to yours.</p>",
        "id": 178126659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571077904
    },
    {
        "content": "<p>May be relevant:<br>\n<a href=\"https://en.wikipedia.org/wiki/Automated_Mathematician\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Automated_Mathematician\">https://en.wikipedia.org/wiki/Automated_Mathematician</a></p>",
        "id": 178126748,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1571077981
    },
    {
        "content": "<p>(Although this was quite controversial when it came out.)</p>",
        "id": 178126786,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1571078027
    },
    {
        "content": "<p>It's a tough problem. You only want to see correct and interesting conjectures, so you need to both sniff out the good stuff and be able to prove it. I know of some work on lemma generation for inductive theorem proving (<a href=\"http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf\" target=\"_blank\" title=\"http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf\">http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf</a>). And there's some work on conjecturing guided by machine learning, <a href=\"http://ceur-ws.org/Vol-1785/W23.pdf\" target=\"_blank\" title=\"http://ceur-ws.org/Vol-1785/W23.pdf\">http://ceur-ws.org/Vol-1785/W23.pdf</a> comes to mind but I'm pretty sure there are others.</p>",
        "id": 178129195,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571079774
    },
    {
        "content": "<p>From what I heard, the hard part is not necessarily generating lemmas, but generating <em>interesting</em> lemmas. Equivalently, pruning the space of true statements to contain only useful laws and not a bazillion variants of rewriting by associativity or some such. Both of these, being human-centric notions, sound difficult to teach a computer, but are potentially a good fit for heuristics and then machine learning.</p>\n<p>For benchmarking equality decision procedures, I wrote a short Python script that can generate as many commutative ring equalities as you might want, exercising hopefully many of the axioms (although I had to limit it slightly for some technical reasons I can't remember at the moment). I would hardly call any of these interesting though. Example: <code>(x14+x6) = (0+(x6+(1*x14)))</code>. This one only contains two variables, so I would call it shortish, but there already are quite a few of these (exponential explosion etc), potentially making the file huge. So I think one initial step could be to pick out the axioms which generate more interesting statements. In this case, by omitting <code>0+x=x</code> and <code>1*x=x</code>.</p>\n<p>An interesting alternative is to scrap the lemmas altogether and instead hand-code a proven simplification procedure which can exercise the laws when needed.</p>",
        "id": 178129243,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1571079816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> What do you mean with your last sentence?</p>",
        "id": 178129531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571080052
    },
    {
        "content": "<p>Johan don't you think that we found out by ourselves, using experience and examples and so on, what lemmas to put in those valuation files, via quite a bit of hard work? Here's the current state of our file: <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/basic.lean</a> . Stuff about the support of a valuation being a prime ideal, or facts like v(x+y)=max(v(x),v(y)) if v(x) isn't v(y) -- I would imagine a computer program generating thousands and thousands of random facts before they ran into these useful (for us) ones. The support of a valuation is a definition -- the stuff that gets mapped to zero. How can the system come up with definitions? For every good idea there are ten bad ones, don't you think? The notion of equivalence of valuations is a great example of something really important but probably extremely difficult to find if you're just wandering around some search space.</p>",
        "id": 178130434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571080754
    },
    {
        "content": "<p>Aah, let me be clear. I don't expect it to generate the definitions</p>",
        "id": 178131351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571081358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> This is just a wild guess, but a sufficiently sophisticated tactic could potentially use the current goal and context in a sort of guided search. The lemmas would be generated on-the-fly as intermediate steps in order to simplify or otherwise \"make-nicer\" (heuristic) the goal. It seems defining <em>interesting</em> might be easier in the context of a sensible (human-provided) target. Since generated statements wouldn't have to be stored on disk, this partly alleviates the exponential explosion issue when they are very specific/long. But then again, maybe such a tactic is just \"by general_intelligence\".</p>",
        "id": 178131366,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1571081368
    },
    {
        "content": "<p>Put all the 10 or so definitions in that file all the way at the top. And have the computer generate all the boring lemmas.</p>",
        "id": 178131377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571081386
    },
    {
        "content": "<p>It might miss some of them. But it could still provide a good start...</p>",
        "id": 178131461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571081413
    },
    {
        "content": "<p>We've seen examples where the definitions can't be formalised until you've proved a whole bunch of the lemmas though ;-)</p>",
        "id": 178131468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571081427
    },
    {
        "content": "<p>There is some subtle interplay</p>",
        "id": 178131484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571081444
    },
    {
        "content": "<p>Sure... the definitions that can't be formalised unless you have a bunch of lemmas first should then move to a new file...</p>",
        "id": 178131619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571081556
    },
    {
        "content": "<blockquote>\n<p>It's a tough problem. You only want to see correct and interesting conjectures, so you need to both sniff out the good stuff and be able to prove it. I know of some work on lemma generation for inductive theorem proving (<a href=\"http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf\" target=\"_blank\" title=\"http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf\">http://www.cse.chalmers.se/~jomoa/papers/hipspec-atx.pdf</a>).</p>\n</blockquote>\n<p>Moa and her group did a lot of work in this area, hipspec is just the application of the general framework to inductive theorem proving.  The theory exploration tool itself is called hipster (<a href=\"https://arxiv.org/abs/1405.3426\" target=\"_blank\" title=\"https://arxiv.org/abs/1405.3426\">https://arxiv.org/abs/1405.3426</a>).  They even have a working Isabelle integration where you can say \"give me theorems [just equations] about list.append, list.reverse, and list.nil\" and then after a few minutes you get a working Isabelle file: <a href=\"https://github.com/moajohansson/IsaHipster\" target=\"_blank\" title=\"https://github.com/moajohansson/IsaHipster\">https://github.com/moajohansson/IsaHipster</a></p>",
        "id": 178132981,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1571082654
    },
    {
        "content": "<p>Cool! That looks really interesting.</p>",
        "id": 178133152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571082793
    },
    {
        "content": "<p>There is a tool called Mathsaid that has some interesting heuristics for picking out interesting lemmas: <a href=\"https://link.springer.com/article/10.1007/s10489-017-0954-8\" target=\"_blank\" title=\"https://link.springer.com/article/10.1007/s10489-017-0954-8\">https://link.springer.com/article/10.1007/s10489-017-0954-8</a></p>",
        "id": 178137039,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571085612
    },
    {
        "content": "<p>One thing that Hipster does could be summarised as \"playing around with examples\". I think that is something that human mathematicians do a lot. But currently there is no way to register such information in Lean.<br>\nWe could have something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">register_example</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span>\n<span class=\"n\">register_example</span> <span class=\"n\">nat</span> <span class=\"mi\">1</span>\n<span class=\"n\">register_example</span> <span class=\"n\">nat</span> <span class=\"mi\">37</span>\n\n<span class=\"n\">register_example</span> <span class=\"n\">int</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n\n<span class=\"n\">register_example</span> <span class=\"n\">rat</span> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">3</span>\n\n<span class=\"n\">register_example</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n\n<span class=\"n\">register_example</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">int</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">register_example</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">zmod</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">register_example</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">real</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n</pre></div>",
        "id": 178257173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571198939
    },
    {
        "content": "<p>I think such a database could potentially be really useful for tactics that try to prove or find counterexamples. And as Hipster shows, it's also useful for generating conjectures/boring lemmas.</p>",
        "id": 178257243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571199016
    },
    {
        "content": "<p>(Hipster generates the examples on the fly. But I think that will quickly break down if you are not working with lists/trees or other CS-y data types.)</p>",
        "id": 178257262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571199064
    },
    {
        "content": "<p>Yeah I like the sound of this a lot, I've started using <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>'s slim_check and even if it has issues its really very handy to tell you when you've forgotten a trivial case in a statement, or accidentally got your tactic state into an unprovable situation. But like Johan says handmade examples would be needed for non-trivial structures (how does it handle groups I wonder). It would be great to include these or equivalent tactics!</p>",
        "id": 178258693,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571201102
    },
    {
        "content": "<p>Nice! I’m glad you can make use of it. I haven’t touched it in a while and feel like I left it in an incomplete state. What are the issues you encounter?</p>",
        "id": 178280469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571226287
    },
    {
        "content": "<p>Maybe I should merge it into mathlib</p>",
        "id": 178283666,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571229288
    }
]