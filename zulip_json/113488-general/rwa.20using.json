[
    {
        "content": "<p>Can we have <code>rwa [foo, bar] using (baz h1 h2)</code> just like <code>simpa using</code>?</p>",
        "id": 202055633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593151534
    },
    {
        "content": "<p>Because I find myself using <code>by { rw [foo, bar], exact baz h1 h2 }</code> a lot</p>",
        "id": 202055678,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593151565
    },
    {
        "content": "<p>After the ban of semicolons I feel like this is the correct approach</p>",
        "id": 202055681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593151583
    },
    {
        "content": "<p>Barely tested because I need to recompile core Lean, but this seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rwa&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;using&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">try_rw</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)),</span> <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">rewrite</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">cfg</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">match</span> <span class=\"n\">tgt</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">rewrite</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">cfg</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">assumption</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">ty</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">ty</span><span class=\"o\">),</span> <span class=\"c1\">-- for positional error messages, don&#39;t care about the result</span>\n    <span class=\"n\">pty</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">ptgt</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- fail deliberately, to advise regarding `rw; exact` usage</span>\n    <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"s2\">&quot;rwa failed, &#39;using&#39; expression type not directly &quot;</span> <span class=\"bp\">++</span>\n      <span class=\"s2\">&quot;inferrable. try:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">rwa ... using</span><span class=\"se\">\\n</span><span class=\"s2\">show &quot;</span> <span class=\"bp\">++</span>\n      <span class=\"n\">to_fmt</span> <span class=\"n\">pty</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">from &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">ptgt</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">lc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">try_rw</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lc</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">get_local</span> <span class=\"n\">lc</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try_rw</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n  <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202064027,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593160021
    },
    {
        "content": "<p>(This is essentially the code for <code>simpa</code> but with <code>simp</code> renamed to <code>rw</code> everywhere)</p>",
        "id": 202064116,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593160091
    },
    {
        "content": "<p>Thinking about it some more, a better generalization would be to let <code>convert</code> accept a tactic for the equalities that it generates. Then we wouldn't need <code>ringa</code>, <code>abela</code>, etc.</p>",
        "id": 202064523,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1593160395
    }
]