[
    {
        "content": "<p>If I have <code>U V : opens X</code>, then <code>(U ⊓ V).val</code> is not defeq to <code>U.val ∩ V.val</code>. Can this be fixed while still using the galois insertion to define the lattice structure on <code>opens X</code>?</p>",
        "id": 147442296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541873030
    },
    {
        "content": "<p>A related thing that I'm worried about: the opposite category of the category associated with a preorder is not going to be defeq to the category associated with the dual order.</p>",
        "id": 147524558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542028582
    },
    {
        "content": "<p><code>(U ⊓ V).val := U.val ∩ V.val</code> should be possible. And I think also that <code>op ∘ order2cat = order2cat ∘ dual</code> could be <code>rfl</code>. On both sides we construct a category using the constructor, which looks at the Hom-set fully expanded (so no funext is needed). So both sides should reduce to something like <code>λα [ord], ⟨α, λa b, a ≥ b, ...⟩</code> (plus/minus some things).</p>\n<p>Be aware that this is different to <code>op (op C) = C</code> where <code>C</code> doesn't reduce further</p>",
        "id": 147525462,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542029799
    },
    {
        "content": "<p>Ok, that's reassuring. Thanks!<br>\nSo how should we make <code>(U ⊓ V).val := U.val ∩ V.val</code> happen?</p>",
        "id": 147525508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542029876
    },
    {
        "content": "<p>wait, you mean the other way round, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">⊔</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∪</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 147526957,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542031581
    },
    {
        "content": "<p>Ah I see. We need to use <code>complete_lattice.copy</code></p>",
        "id": 147527006,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542031662
    },
    {
        "content": "<p>there we can override the lattice operations with equal ones</p>",
        "id": 147527078,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542031698
    },
    {
        "content": "<p>I have no experience with this...</p>",
        "id": 147527609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542032289
    },
    {
        "content": "<p>What is going on here? <a href=\"https://github.com/leanprover/mathlib/blob/master/order/filter.lean#L314\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/order/filter.lean#L314\">https://github.com/leanprover/mathlib/blob/master/order/filter.lean#L314</a><br>\nLocally there are two instances of complete lattice. Why does that not create trouble?<br>\nAlso, once the complete lattice structure is copied, how can the Galois connection still work?</p>",
        "id": 147882867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542471528
    },
    {
        "content": "<p>\"Locally\" here is only up to the end of the section (line 341), and there's nothing else in the section.</p>",
        "id": 147885913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542477429
    },
    {
        "content": "<p>And by definition the new instance agrees with the existing <code>preorder</code>, <code>has_top</code>, <code>has_inf</code> instances</p>",
        "id": 147886091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542477785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Does this look like what you had in mind?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">copy</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span>\n    <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"> le  -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> top -/</span> <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_univ</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">interior_univ</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> bot -/</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">is_open_empty</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> sup -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∪</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_union</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> inf -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">interior_eq_of_open</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Sup -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_sUnion</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hV</span><span class=\"o\">}</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Sup_range</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Inf -/</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 150871778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543951665
    },
    {
        "content": "<p>I guess this also needs a bunch of simp-lemmas to be useful?<br>\nOf the form <code>opens_sup_val : (U \\cap V).val = U.val \\cap V.val := rfl</code>.</p>",
        "id": 150872320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543952041
    },
    {
        "content": "<p>The only thing I'm not so sure about is the <code>Sup</code> case of the \"copy\". It isn't <code>rfl</code> to what comes out of the galois insertion, but it also isn't very far of. Should I just use what comes out of the galois insertion, or is what I provide here the more useful thing. Feedback appreciated.</p>",
        "id": 150872680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543952272
    },
    {
        "content": "<p>Yes, that's what I had in mind. If <code>Sup</code> doesn't make sense, then you don't need to change it. Just <code>_</code> for <code>Sup</code> and <code>rfl</code> for the equality proof.</p>",
        "id": 150877968,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1543956540
    },
    {
        "content": "<p><code>Sup</code> is meaningful, and it gives you the \"correct\" answer modulo <code>Sup_range</code>. So now the question becomes whether I should make that simplification step here, or leave it to the user.<br>\nThe one that is meaningless is <code>Inf</code>: it is the interior of an arbitrary intersection of opens.</p>",
        "id": 150901943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543983271
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/511\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/511\">#511</a></p>",
        "id": 150903641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543986114
    }
]