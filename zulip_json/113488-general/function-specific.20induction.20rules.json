[
    {
        "content": "<p>I have defined a function as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">as_fib_sum_aux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I clumsily proved the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">as_fib_sum_aux.bounded</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">as_fib_sum_aux.bounded</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">as_fib_sum_aux.bounded</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">as_fib_sum_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mem_insert</span> <span class=\"n\">at</span> <span class=\"n\">Hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span>     <span class=\"o\">:</span> <span class=\"n\">as_fib_sum_aux.bounded</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span>\n      <span class=\"bp\">...</span>    <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">as_fib_sum_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">n</span> <span class=\"n\">i.succ</span><span class=\"o\">),</span>\n    <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">as_fib_sum_aux.bounded</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span>\n    <span class=\"bp\">...</span>    <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As you can see, the proof structure closely mirrors the recursive structure of the definition. In other theorem provers, there is a feature that generates induction principles for each recursive function, to help with this kind of proof. However, I couldn't find the corresponding Lean syntax in the docs...</p>\n<p>(fwiw, the structure of the <code>if</code> is also mirrored and requires more manual finagling than I would like, but I'm not sure the induction principle would take care of that. golfs appreciated <a href=\"https://xkcd.com/541/\">;)</a></p>",
        "id": 275067171,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647045841
    },
    {
        "content": "<p>What do you mean by \"generate an induction principle for a recursive function\"? Lean does generate an induction principle for any inductive type (like nat in this case). You can use the induction tactic (or (r)cases, depending on what you want to do)</p>",
        "id": 275067893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647046762
    },
    {
        "content": "<p>In this case I would like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 275069027,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647048150
    },
    {
        "content": "<p>in Isabelle I'd say <code>apply (induction rule: as_fib_sum_aux.induct)</code> IIRC</p>",
        "id": 275069047,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647048212
    },
    {
        "content": "<p>Is it <code>as_fib_sum_aux.rec</code> or one of the other variants you can see with <code>#print prefix as_fib_sum_aux</code>?</p>",
        "id": 275086484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647076017
    },
    {
        "content": "<p><code>#check as_fib_sum_aux.rec</code> gives <code>invalid field notation, type is not of the form (C ...) where C is a constant</code>. <code>#print prefix as_fib_sum_aux</code> gives <code>no declaration starting with prefix 'as_fib_sum_aux'</code></p>",
        "id": 275102044,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647098462
    },
    {
        "content": "<p>Ah, looks like that's because I'm in a namespace</p>",
        "id": 275102055,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647098479
    },
    {
        "content": "<p><code>rec</code> still doesn't work though</p>",
        "id": 275102074,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647098513
    },
    {
        "content": "<p>Oh of course, sorry, I'm talking nonsense. You are making a plain definition, not an inductive one.</p>",
        "id": 275103152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647099955
    },
    {
        "content": "<p>Lean currently doesn't have a mechanism to derive induction principles for functions. (Coq does, so there's nothing stopping us in principle, but nobody has invested the time yet.) So you either have to prove the induction principle yourself or use the same <code>match</code> structure in your proof.</p>",
        "id": 275210826,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647250019
    }
]