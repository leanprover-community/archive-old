[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> made me a new \"mode\", it looks a bit like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- lots of stuff omitted</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">kevin</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"o\">:</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">cases_arg_p</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">using_ident</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;generalizing&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">many</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">copy_decls</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">kevin</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>so I can have my hacked version of induction just by writing <code>induction</code>, as long as the user writes <code>begin [kevin]</code>. But there is no output on the Lean Messages screen in VS Code! I think this is because Rob didn't know how to turn this on. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you know how to turn this on?</p>",
        "id": 171789075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564159880
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/a91012b1ab7a255990a1ec9045820f4b\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/a91012b1ab7a255990a1ec9045820f4b\">https://gist.github.com/kbuzzard/a91012b1ab7a255990a1ec9045820f4b</a></p>",
        "id": 171789203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564159979
    },
    {
        "content": "<p>You can look at <a href=\"https://github.com/unitb/temporal-logic/blob/master/src/temporal_logic/tactic.lean\" target=\"_blank\" title=\"https://github.com/unitb/temporal-logic/blob/master/src/temporal_logic/tactic.lean\">https://github.com/unitb/temporal-logic/blob/master/src/temporal_logic/tactic.lean</a> to see how to make that work. I copied a comment by Leo in the file</p>",
        "id": 171789515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564160200
    },
    {
        "content": "<p>Actually, here is the comment:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">   The auto quotation currently supports two classes of tactics: tactic and smt_tactic.</span>\n<span class=\"cm\">   To add a new class Tac, we have to</span>\n<span class=\"cm\">   1) Make sure it is a monad. That is, we have an instance for (monad Tac)</span>\n<span class=\"cm\">   2) There is a namespace Tac.interactive</span>\n<span class=\"cm\">   3) There is a definition: Tac.step {α : Type} (t : Tac α) : Tac unit</span>\n<span class=\"cm\">   4) (Optional) Tac.istep {α : Type} (line0 col0 : nat) (line col : nat) (tac : Tac α) : Tac unit</span>\n<span class=\"cm\">      Similar to step but it should scope trace messages at the given line/col,</span>\n<span class=\"cm\">      and ensure that the exception position is after (line0, col0)</span>\n<span class=\"cm\">   6) There is a definition Tac.save_info (line col : nat) : Tac unit</span>\n<span class=\"cm\">   7) There is a definition Tac.execute (tac : Tac unit) : tactic unit</span>\n<span class=\"cm\">   8) There is a definition Tac.execute_with (cfg : config) (tac : Tac unit) : tactic unit</span>\n<span class=\"cm\">      where config is an arbitrary type.</span>\n<span class=\"cm\">   TODO(Leo): improve the &quot;recipe&quot; above. It is too ad hoc.</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 171789600,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564160263
    },
    {
        "content": "<p>I want to rewrite the defintions of tactics which are already there</p>",
        "id": 171790055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160533
    },
    {
        "content": "<p>Oh, I thought I fixed this while you were here. Change the definition of <code>save_info</code>: <code>meta def save_info := tactic.save_info</code></p>",
        "id": 171790090,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564160550
    },
    {
        "content": "<p>Doesn't work for me</p>",
        "id": 171790172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">copy_decl</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">update_name</span> <span class=\"err\">$</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">update_prefix</span> <span class=\"bp\">`</span><span class=\"n\">kevin</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"err\">∉</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span><span class=\"o\">]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">copy_decls</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n  <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">dec</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">dec</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">get_prefix</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"bp\">∧</span> <span class=\"n\">filter</span> <span class=\"n\">dec</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">copy_decl</span> <span class=\"n\">dec</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">kevin</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">kevin</span>\n\n<span class=\"c1\">--meta instance : monad kevin := by delta kevin; apply_instance</span>\n\n<span class=\"c1\">--meta instance : alternative kevin := by delta kevin; apply_instance</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">kevin</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">kevin</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">save_info</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">save_info</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">execute</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">kevin</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">kevin</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span>\n\n<span class=\"c1\">--meta def trace_state {α : Type}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">kevin</span>\n\n<span class=\"c1\">--#check tactic.interactive.induction</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">kevin</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"o\">:</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">cases_arg_p</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">using_ident</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">with_ident_list</span> <span class=\"bp\">→</span>\n  <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;generalizing&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">many</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">induction</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">copy_decls</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">kevin</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- no output in Lean window</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 171790223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160661
    },
    {
        "content": "<p><code>trace_state</code> indicates that the goals are fine, I just can't see them.</p>",
        "id": 171790273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160712
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> 4) (Optional) Tac.istep {α : Type} (line0 col0 : nat) (line col : nat) (tac : Tac α) : Tac unit\n      Similar to step but it should scope trace messages at the given line/col,\n</pre></div>\n\n\n<p>That's what Sebastian is referring to perhaps.</p>",
        "id": 171790360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160774
    },
    {
        "content": "<p>Oh, that's weird, changing <code>save_info</code> fixes it in the \"display goal\" view but not in \"display messages.\"</p>",
        "id": 171790400,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564160838
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">istep</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n</pre></div>",
        "id": 171790519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160925
    },
    {
        "content": "<p>This does it.</p>",
        "id": 171790524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160931
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171790551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160955
    },
    {
        "content": "<p>aargh no it doesn't; my trace_state was still left in</p>",
        "id": 171790580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564160983
    },
    {
        "content": "<p>If the only benefit is having <code>induction</code> behave in a specific way, this solution is overkill. You're going to need to explicitly bring every tactic that you want available in your proof language. You're much better off calling your tactic <code>my_induction</code> or <code>induction'</code> or <code>kevin_induction</code> and staying in <code>tactic.interactive</code></p>",
        "id": 171790730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564161091
    },
    {
        "content": "<p>I've finally got it working :-) Thanks.</p>",
        "id": 171790834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564161160
    },
    {
        "content": "<p>Wait, there are sorrys there, there shouldn't be anything displaying in \"display messages.\" It works perfectly fine for me with <code>save_info</code> changed.</p>",
        "id": 171790837,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564161161
    },
    {
        "content": "<p>I was in the other mode :-/ I wish they won't both called \"Lean messages\" in VS Code.</p>",
        "id": 171790883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564161203
    },
    {
        "content": "<p>In CoCalc it's \"all messages\" and \"info at cursor\"</p>",
        "id": 171790969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564161254
    },
    {
        "content": "<p>This is brilliant, thanks Rob and Sebastian.</p>",
        "id": 171790986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564161281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> this is for some standalone project where the user won't see the [kevin] nonsense but will want to be using familiar Lean tactics.</p>",
        "id": 171791047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564161347
    },
    {
        "content": "<p>When a tactic class like this is defined, are all the <code>interactive</code> tactics available by default or should they be manually lifted to the <code>[kevin]</code> tactic class?</p>",
        "id": 171791186,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1564161451
    },
    {
        "content": "<p>Oh sorry Simon already answered this</p>",
        "id": 171791210,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1564161474
    },
    {
        "content": "<p>In Kevin's file, there's a command that copies everything in <code>tactic.interactive</code> to <code>kevin.interactive</code>.</p>",
        "id": 171791271,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564161504
    },
    {
        "content": "<blockquote>\n<p>This is brilliant, thanks Rob and Sebastian.</p>\n</blockquote>\n<p>Uh, you're welcome...?</p>",
        "id": 171791979,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1564162130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I'm starting to think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> does not know that you and I are two separate people</p>",
        "id": 171807378,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564172666
    },
    {
        "content": "<p>I am very vague at the best of times</p>",
        "id": 171807793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564173087
    },
    {
        "content": "<p>I see my mistake now. Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> . My silly mode is now fully compliant with the comment and I've had a much more pleasant experience with it since. Thanks!</p>",
        "id": 171807908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564173180
    },
    {
        "content": "<p>this \"canonically isomorphic\"-business is going too far, now he's applying it to people!!</p>",
        "id": 171812999,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1564178043
    },
    {
        "content": "<p>all computer scientists are equivalent</p>",
        "id": 171815794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564180031
    },
    {
        "content": "<p>gaargh <code>sorry</code> doesn't work in my monad (now called <code>less_leaky</code>)</p>\n<div class=\"codehilite\"><pre><span></span>invalid tactic class &#39;less_leaky&#39;, &#39;less_leaky.solve1&#39; has not been defined\n</pre></div>",
        "id": 171833876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564212189
    },
    {
        "content": "<p>I'll get back to Simon's list</p>",
        "id": 171833877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564212197
    },
    {
        "content": "<p>Oh I've fixed it myself.</p>",
        "id": 171834001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564212480
    },
    {
        "content": "<p>Whatever I don't have, I just take from the tactic namespace. Duh.</p>",
        "id": 171834043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564212491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> it seems to me that <code>tactic</code> does not follow rule 8?</p>\n<div class=\"codehilite\"><pre><span></span>   8) There is a definition Tac.execute_with (cfg : config) (tac : Tac unit) : tactic unit\n      where config is an arbitrary type.\n</pre></div>",
        "id": 171834068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564212570
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171841929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564227415
    },
    {
        "content": "<p>Sure, it's hardcoded not to look for such when you're in <code>tactic</code></p>",
        "id": 171845993,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1564235241
    },
    {
        "content": "<p>That doesn't tell me how to write my own one then :-)</p>",
        "id": 171846146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564235498
    },
    {
        "content": "<p>You can look at the <code>smt</code> example or my own <code>temporal</code> example</p>",
        "id": 171850960,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1564244159
    },
    {
        "content": "<p>I just stole the <code>smt</code> one</p>",
        "id": 171851724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564245566
    }
]