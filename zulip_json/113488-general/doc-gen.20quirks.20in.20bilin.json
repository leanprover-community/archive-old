[
    {
        "content": "<p>On <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form\">docs#bilin_form</a> the declarations have this random <code>c</code> appearing before the <code>bilin</code> in <code>bilin_add_left</code> i.e.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">bilin_form</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bilin</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bilin_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bilin_smul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bilin_add_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bilin_smul_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>is this necessary or some artifact of the doc-gen process, or the source?</p>",
        "id": 210631749,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600544372
    },
    {
        "content": "<p>Also the brackets surrounding structure fields being defined by css means that they dont get copy pasted, should we invest effort into making the doc declarations copy-pastable?</p>",
        "id": 210631832,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600544444
    },
    {
        "content": "<p>If I print the actual definition in lean I see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">bilin_form</span><span class=\"bp\">.</span><span class=\"n\">bilin_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">bilin</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>so the <code>c</code> is an explicit argument in the generated equation.</p>",
        "id": 210633062,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600546118
    },
    {
        "content": "<p>So the question is should doc-gen conform to the source code and not have <code>c.</code> or the output of #print and include <code>(c : bilin_form R M)</code>. Leaving it as is seems like it could get confusing to me.</p>",
        "id": 210633127,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600546204
    },
    {
        "content": "<p>Good catch. Do you mind <a href=\"https://github.com/leanprover-community/doc-gen/issues\">creating issues</a> for both of these?</p>",
        "id": 210635032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600549200
    },
    {
        "content": "<p>Done, <a href=\"https://github.com/leanprover-community/doc-gen/issues/67\">doc-gen#67</a> and <a href=\"https://github.com/leanprover-community/doc-gen/issues/68\">doc-gen#68</a>.</p>",
        "id": 210683577,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600633486
    }
]