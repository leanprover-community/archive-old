[
    {
        "content": "<p>While bumping mathlib in LTE, I hit the following issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nnreal.semilattice_inf</span> <span class=\"bp\">=</span> <span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 282070414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652342209
    },
    {
        "content": "<p>I guess this is a bug in mathlib that wasn't there before. Can we somehow lint against introducing such bugs? I guess that's hard.</p>",
        "id": 282070948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652342500
    },
    {
        "content": "<p>FYI, the LHS is among these derived instances, where as the RHS comes from a chain of instances that ultimately leads to <code>conditionally_complete_linear_order_bot ℝ≥0</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [</span>\n<span class=\"kd\">  ordered_semiring, comm_monoid_with_zero, -- to ensure these instance are computable</span>\n<span class=\"kd\">  floor_semiring,</span>\n<span class=\"kd\">  semilattice_inf, densely_ordered, order_bot,</span>\n<span class=\"kd\">  canonically_linear_ordered_add_monoid, linear_ordered_comm_group_with_zero, archimedean,</span>\n<span class=\"kd\">  linear_ordered_semiring, ordered_comm_semiring, canonically_ordered_comm_semiring,</span>\n<span class=\"kd\">  has_sub, has_ordered_sub, has_div, inhabited]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nnreal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- &lt;snip&gt;</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">conditionally_complete_linear_order_bot</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonneg.conditionally_complete_linear_order_bot</span> <span class=\"n\">real.Sup_empty.le</span>\n</code></pre></div>",
        "id": 282071383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652342737
    },
    {
        "content": "<p>Do you know which field disagrees?</p>",
        "id": 282075034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652344832
    },
    {
        "content": "<p>Might it have to do with the <code>renaming min → inf, max → sup</code>?</p>",
        "id": 282075280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652344968
    },
    {
        "content": "<p>looks like <code>inf</code></p>",
        "id": 282075302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652344982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nnreal.semilattice_inf.inf</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 282075331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652344995
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnreal.semilattice_inf.inf</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- λ (x y : {x // (λ (x : ℝ), x ∈ set.Ici 0) x}), ⟨x.val ⊓ y.val, _⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- λ (a b : {x // x ∈ set.Ici 0}), ite (a ≤ b) a b</span>\n</code></pre></div>",
        "id": 282075560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652345127
    },
    {
        "content": "<p>What happens if you replace the RHS with <code>(lattice.to_semilattice_inf ℝ≥0).min</code>?</p>",
        "id": 282075565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652345133
    },
    {
        "content": "<p>so yes, it looks like the culprit is using <code>min</code> as <code>inf</code> instead of inheriting it</p>",
        "id": 282075666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652345181
    },
    {
        "content": "<p>Where does this happen? In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonneg.conditionally_complete_linear_order_bot\">docs#nonneg.conditionally_complete_linear_order_bot</a>?</p>",
        "id": 282075803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652345268
    },
    {
        "content": "<p>it gets down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">lattice.to_semilattice_inf</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">distrib_lattice.to_lattice</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">nnreal.semilattice_inf.inf</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">distrib_lattice.to_lattice</span> <span class=\"o\">(</span><span class=\"n\">set.Ici</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 282078127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346584
    },
    {
        "content": "<p>this is via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ord_connected_subset_conditionally_complete_linear_order\">docs#ord_connected_subset_conditionally_complete_linear_order</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subset_conditionally_complete_linear_order\">docs#subset_conditionally_complete_linear_order</a></p>",
        "id": 282078241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346633
    },
    {
        "content": "<p>note that one of the type class args in <code>distrib_lattice.to_lattice (set.Ici (0:ℝ))</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.to_distrib_lattice\">docs#linear_order.to_distrib_lattice</a> which definitely introduces an <code>if</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.to_lattice\">docs#linear_order.to_lattice</a> which uses <code>inf := min</code></p>",
        "id": 282078405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346724
    },
    {
        "content": "<p>Why do we still carry around <code>min</code> and <code>max</code>fields, actually? Surely it would be better and safer to only have <code>sup</code> and <code>inf</code>?</p>",
        "id": 282078549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652346835
    },
    {
        "content": "<p>we don't</p>",
        "id": 282078606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346856
    },
    {
        "content": "<p><code>linear_order.to_lattice</code> clearly needs to make up an <code>inf</code> from <code>min</code></p>",
        "id": 282078669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346901
    },
    {
        "content": "<p>But why does it even have a <code>min</code> in the first place?</p>",
        "id": 282078706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652346931
    },
    {
        "content": "<p><code>min</code> is a function</p>",
        "id": 282078720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346938
    },
    {
        "content": "<p>not a field</p>",
        "id": 282078731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652346942
    },
    {
        "content": "<p>if you have a linear order and want a lattice, you have to make up an <code>inf</code> field and the obvious way to do so is <code>if a &lt;= b then a else b</code> also known as <code>min a b</code></p>",
        "id": 282078826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347003
    },
    {
        "content": "<p>I think it might make sense to put <code>inf</code>  in <code>linear_order</code> as a field though to avoid this</p>",
        "id": 282078856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347031
    },
    {
        "content": "<p>Yes; that was my question all along. Why does <code>linear_order</code> not have a <code>inf</code> field?</p>",
        "id": 282078887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652347053
    },
    {
        "content": "<p>because it's an order typeclass</p>",
        "id": 282078897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347065
    },
    {
        "content": "<p>... precisely?</p>",
        "id": 282078960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652347092
    },
    {
        "content": "<p>back in the old days we weren't as aggressive about having things at the bottom of the hierarchy have literally everything</p>",
        "id": 282078965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347098
    },
    {
        "content": "<p>Yeah, it's more and more common these days. I will myself add another two fields to <code>boolean_algebra</code> soonish.</p>",
        "id": 282079037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652347155
    },
    {
        "content": "<p>it's also possible to fix this issue in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subset_conditionally_complete_linear_order/src\">src#subset_conditionally_complete_linear_order</a> without a huge refactor</p>",
        "id": 282079082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347194
    },
    {
        "content": "<p>by overriding the <code>inf</code> fields inherited from <code>distrib_lattice.to_lattice s</code> with the ones coming from the lattice instance</p>",
        "id": 282079154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652347222
    },
    {
        "content": "<p>oh! <code>linear_order</code> already has a <code>min</code> field</p>",
        "id": 282080529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652348154
    },
    {
        "content": "<p>I guess the aggressive refactor has already happened</p>",
        "id": 282080578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652348167
    },
    {
        "content": "<p>so actually the real culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.linear_order/src\">src#subtype.linear_order</a></p>",
        "id": 282081009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652348471
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.lift/src\">src#linear_order.lift</a> can be forgiven for not overriding the <code>max</code> field since it wasn't given enough data to do so, but <code>subtype.linear_order</code> is definitely committing crimes against defeq</p>",
        "id": 282081298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652348625
    },
    {
        "content": "<blockquote>\n<p>since it wasn't given enough data to do so</p>\n</blockquote>\n<p>I think we should probably add <code>has_inf</code> and <code>has_sup</code> arguments to it</p>",
        "id": 282084663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652350669
    },
    {
        "content": "<p>Having helper functions insiduously populate defaults with bad values seems like a bad thing.</p>",
        "id": 282084714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652350684
    },
    {
        "content": "<p>You can accomplish the same thing by applying <code>lattice.copy</code> to the result, but I see what you mean about bad defaults</p>",
        "id": 282084794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652350763
    },
    {
        "content": "<p>I think it is not uncommon for these kinds of non-instance helper definitions to fill in fields though</p>",
        "id": 282084908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652350834
    },
    {
        "content": "<p>after all, at some point you actually have to provide a value, you can't just always be delegating to the caller</p>",
        "id": 282084939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652350863
    },
    {
        "content": "<p>In this case I think we actually want two helper definitions, since the natural side condition for a <code>min</code> argument in <code>linear_order.lift</code> is <code>f (min a b) = min (f a) (f b)</code> and you can't easily discharge that by <code>rfl</code> if you want the default field</p>",
        "id": 282085137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652351021
    },
    {
        "content": "<p>Note that for things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.monoid\">docs#function.injective.monoid</a> we just force the user to deal with that annoying side goal</p>",
        "id": 282085843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351332
    },
    {
        "content": "<p>Because having duplicates is mainly just providing users extra tools to shoot themselves in the foot with (and a maintenance nightmare)</p>",
        "id": 282085889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351368
    },
    {
        "content": "<p>In <code>function.injective.monoid</code> there is no possible default value though</p>",
        "id": 282090722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652354419
    },
    {
        "content": "<p>that's just the actual requirement on the definition</p>",
        "id": 282090756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652354440
    },
    {
        "content": "<p>the same would also be true for a <code>lattice.lift</code>, you would have <code>f (inf a b) = inf (f a) (f b)</code> and no possibility to otherwise discharge it, but for linear orders we have a default value for the field</p>",
        "id": 282090837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652354501
    },
    {
        "content": "<p>Luckily we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">semilattice_inf.ext</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">partial_order.ext</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ss</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"n\">semilattice_inf.ext_inf</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">casesI</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">congr'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so I can at least keep that part of LTE sorry-free.</p>",
        "id": 282091330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652354732
    },
    {
        "content": "<p>In <code>function.injective.monoid</code> there's a perfectly sensible default for <code>has_pow M ℕ</code>; the one used by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.mk\">docs#monoid.mk</a></p>",
        "id": 282095777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652357302
    },
    {
        "content": "<p>But it's usually a trap to actually use it</p>",
        "id": 282095825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652357330
    },
    {
        "content": "<p>Which is why I refactored <code>function.injective.monoid</code> to not use those defaults any more</p>",
        "id": 282095931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652357395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/nnreal.20lattice.20broken/near/282070948\">said</a>:</p>\n<blockquote>\n<p>I guess this is a bug in mathlib that wasn't there before. Can we somehow lint against introducing such bugs? I guess that's hard.</p>\n</blockquote>\n<p>We can always add <code>example</code>s for things like these</p>",
        "id": 282196593,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652409617
    },
    {
        "content": "<p>True. But I meant a more principled and generic way.</p>",
        "id": 282203956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652418412
    },
    {
        "content": "<p>That example would only test that this particular example (<code>semilattice_inf</code>) wouldn't break. But a similar issue might pop up involving <code>metric_space</code>, or whatever...</p>",
        "id": 282204013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652418472
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/15056\">#15056</a> I'm trying to fix the diamond. In this branch, <code>subtype.lattice _ _</code> is definitionally equal to <code>linear_order.to_lattice</code> but this equality doesn't work with <code>instances</code> transparency. How do I find which semireducible definition it fails to unfold?</p>",
        "id": 287892478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656525099
    },
    {
        "content": "<p>BTW, definitions line <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.linear_ordered_comm_monoid\">docs#function.injective.linear_ordered_comm_monoid</a> use <code>linear_order.lift</code>, so they create diamonds whenever we use them for subtypes.</p>",
        "id": 287894093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656525799
    },
    {
        "content": "<p>Should we move <code>has_sup</code> and <code>has_inf</code> to core?</p>",
        "id": 287894152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656525824
    },
    {
        "content": "<p>Then rewrite <code>linear_order.lift</code> so that it takes <code>has_sup</code> and <code>has_inf</code> arguments?</p>",
        "id": 287894241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656525853
    },
    {
        "content": "<p>BTW, why <code>tests/lean/perf/perm_ac_dlof_50.lean</code> in the lean3 test suite doesn't cause problems?</p>",
        "id": 287894637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656526025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 287894657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656526034
    },
    {
        "content": "<p>It tries to import a non-existing file, then use a non-existing class.</p>",
        "id": 287894693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656526051
    },
    {
        "content": "<p>Another question: why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.decidable_le\">docs#linear_order.decidable_le</a> is not an instance but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.decidable\">docs#has_le.le.decidable</a> is an instance?</p>",
        "id": 287894863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656526123
    },
    {
        "content": "<p>What would be the advantage of moving has_inf to core?</p>",
        "id": 287895733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656526470
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.lift\">docs#linear_order.lift</a> should certainly take has_inf and has_sup arguments</p>",
        "id": 287895785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656526490
    },
    {
        "content": "<p>Or we can rename <code>min</code>/<code>max</code> fields of <code>linear_order</code> to <code>inf</code>/<code>sup</code>, then drop workarounds in <code>conditionally_complete_linear_order_with_bot</code> etc.</p>",
        "id": 287896108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656526635
    },
    {
        "content": "<p>What workarounds are you thinking of?</p>",
        "id": 287898389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656527639
    },
    {
        "content": "<p><code>renaming</code></p>",
        "id": 287898846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656527842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/nnreal.20lattice.20broken/near/287894637\">said</a>:</p>\n<blockquote>\n<p>BTW, why <code>tests/lean/perf/perm_ac_dlof_50.lean</code> in the lean3 test suite doesn't cause problems?</p>\n</blockquote>\n<p>I guess the perf subfolder just isn't run as part of any CI?</p>",
        "id": 287899637,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656528220
    },
    {
        "content": "<p>Is <code>renaming</code> causing problems?</p>",
        "id": 287899882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656528337
    },
    {
        "content": "<p>No, but it is easy to forget to do it in some other case.</p>",
        "id": 287900066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656528414
    },
    {
        "content": "<p>The following works/fails in my branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Psup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Pinf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_partial_order</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.semilattice_sup</span> <span class=\"n\">Psup</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_has_sup</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.semilattice_sup</span> <span class=\"n\">Psup</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">subtype.semilattice_sup</span> <span class=\"n\">Psup</span> <span class=\"bp\">=</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tactic.reflexivity</span> <span class=\"n\">tactic.transparency.instances</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 287900744,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656528722
    },
    {
        "content": "<p>How can it happen?</p>",
        "id": 287900851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656528756
    }
]