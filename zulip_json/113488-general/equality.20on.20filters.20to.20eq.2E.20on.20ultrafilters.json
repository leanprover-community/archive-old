[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span>\n</code></pre></div>\n<p>I'm having trouble doing this example. I know that I need to use<code>ultrafilter.of_coe</code> and <code>ultrafilter.of_coe</code> somehow, but I always get stuck.</p>",
        "id": 267742032,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642002208
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ultrafilter.map</span><span class=\"o\">,</span> <span class=\"n\">ultrafilter.of_compl_not_mem_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"bp\">𝒱;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 267743665,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642002837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 267744407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642003165
    },
    {
        "content": "<p>That's exactly the job of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a> and its cousins</p>",
        "id": 267744509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642003204
    },
    {
        "content": "<p>Wow, what a nice tactic. Thanks.</p>",
        "id": 267746214,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642003897
    },
    {
        "content": "<p>Hmm... I'm getting an error when I try to use it.</p>",
        "id": 267747003,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642004272
    },
    {
        "content": "<p>Here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- 𝒰 will be the ultrafilter generated by the filter base { (f ⁻¹' V ∩ A) | V ∈ 𝒱 }</span>\n  <span class=\"k\">let</span> <span class=\"n\">B₀</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">filter_basis</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span> <span class=\"o\">},</span>\n    <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">B₀</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">assume</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span> <span class=\"o\">:</span> <span class=\"n\">V'</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V'</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">let</span> <span class=\"n\">B''</span> <span class=\"o\">:=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">B'</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B''</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B''</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">set.preimage_inter</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V'</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">}</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">V'</span><span class=\"o\">,</span> <span class=\"bp\">𝒱.</span><span class=\"n\">inter_sets</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.subset.rfl</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">ℱ</span> <span class=\"o\">:=</span> <span class=\"n\">ℬ.filter</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℱ</span> <span class=\"o\">:=</span> <span class=\"n\">ℬ.mem_filter_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">B₀</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">set.inter_subset_right</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">A</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ℱ.ne_bot</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.of</span> <span class=\"n\">ℱ</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"k\">show</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">ℱ</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">assume</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">filter_basis.mem_filter_iff</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">ℬ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">show</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">set.inter_subset_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n      <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">filter.map_mono</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter.of_le</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">filter.tendsto_def.mpr</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">𝒰</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">𝒱.</span><span class=\"n\">unique</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n    <span class=\"n\">exact_mode_cast</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- HERE IS WHERE IT FAILS</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">show</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267747167,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642004327
    },
    {
        "content": "<p>you misspelled the tactic ;-)</p>",
        "id": 267747265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642004371
    },
    {
        "content": "<p>In what way? <code>exact_mode_cast</code>is a tactic and I am in tactic mode.</p>",
        "id": 267747909,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642004619
    },
    {
        "content": "<p>its exact <strong><em>mod</em></strong> cast</p>",
        "id": 267747994,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642004643
    },
    {
        "content": "<p>Hmm... how did that <code>e</code> get in there. Haha.</p>",
        "id": 267748319,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642004772
    },
    {
        "content": "<p>Hi. I have this problem to install. AFTER WRITE THIS echo 'PATH=\"$HOME/.elan/bin:$PATH\"' &gt;&gt; $HOME/.profile. APPEAR THIS ERROR bash: $HOME/.profile.: ambiguous redirect<br>\nHow to fix?</p>",
        "id": 267748474,
        "sender_full_name": "EDY SAUL CONDORHUANCA RIMACHI",
        "timestamp": 1642004848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470747\">@EDY SAUL CONDORHUANCA RIMACHI</span> Please ask your question in a new topic.</p>",
        "id": 267748921,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642005026
    }
]