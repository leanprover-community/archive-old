[
    {
        "content": "<p>Should <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_action\">docs#linear_action</a> be refactored to in terms of <code>is_scalar_tower</code>? (And replace <code>act</code> by <code>smul</code>, in particular)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">A binary operation representing one module acting linearly on another.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">linear_action</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">act</span>      <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_act</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">act</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">act</span> <span class=\"n\">m'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">act_add</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"n\">n'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">act_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">act</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">smul_act</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">act</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">act</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span></p>",
        "id": 215474053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604419664
    },
    {
        "content": "<p>isn't this just linear_map.mk\\2</p>",
        "id": 215474342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604419766
    },
    {
        "content": "<p>But that's not a class</p>",
        "id": 215474706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604419894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Put in a different way. Given the recent changes (e.g. <code>is_scalar_tower</code>) how would you formalize <code>lie_module</code> nowadays?</p>",
        "id": 215475067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604419992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes! I keep meaning to get to this.</p>",
        "id": 215475143,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604420029
    },
    {
        "content": "<p>I've got a little free time coming up so I can commit to starting this refactor before the end of the week.</p>",
        "id": 215475246,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604420061
    },
    {
        "content": "<p>I need to explain what a semisimple Lie algebra is in my course, in the next couple of days...</p>",
        "id": 215475264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604420069
    },
    {
        "content": "<p>Oooh really! That's something else I keep meaning to get to. There are a bunch of definitions that are all equivalent over field of char 0 so I need to be a bit careful with the actual definition but I think I know what I want to propose.</p>",
        "id": 215475396,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604420137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/linear_action/near/215475067\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> Put in a different way. Given the recent changes (e.g. <code>is_scalar_tower</code>) how would you formalize <code>lie_module</code> nowadays?</p>\n</blockquote>\n<p>I don't know; what do you think?</p>",
        "id": 215475444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420156
    },
    {
        "content": "<p>I'll push to get to this also though unfortunately will not be within couple of days.</p>",
        "id": 215475475,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604420164
    },
    {
        "content": "<p>So I'm looking into how we should organise:</p>\n<ul>\n<li>representation of Lie algebra (aka <code>lie_module</code>)</li>\n<li>subrepresentation</li>\n<li>subalgebra</li>\n<li>ideal</li>\n<li>the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"fraktur\">a</mi><mo separator=\"true\">,</mo><mi mathvariant=\"fraktur\">b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\mathfrak{a}, \\mathfrak{b}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathfrak\">a</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">b</span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">a</mi><mo separator=\"true\">,</mo><mi mathvariant=\"fraktur\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{a}, \\mathfrak{b}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.88585em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">a</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">b</span></span></span></span></span> are ideals</li>\n</ul>",
        "id": 215475503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604420166
    },
    {
        "content": "<p>what's the difference between a g-module and, you know, [module g V]?</p>",
        "id": 215475837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420325
    },
    {
        "content": "<p>What is <code>module g V</code>? In lean that doesn't make sense, because <code>g</code> is not a ring.</p>",
        "id": 215476199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604420487
    },
    {
        "content": "<p>oh, right (I thought algebra =&gt; ring but this is not associative)</p>",
        "id": 215476451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420622
    },
    {
        "content": "<p>I don't know, probably copy the definition of <code>module</code></p>",
        "id": 215476573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420663
    },
    {
        "content": "<p>or maybe relax the definition thereof to forgo associativity</p>",
        "id": 215476611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420686
    },
    {
        "content": "<p>I made an attempt at refactoring <code>linear_action</code> / <code>lie_module</code> yesterday evening with view to using <code>is_scalar_tower</code>. I claim that this is not a promising way to go but I'm keen to hear any contrary opinions.</p>",
        "id": 215836180,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664010
    },
    {
        "content": "<p>The point is that to use <code>is_scalar_tower</code>, we must unbundle <code>linear_action.act</code> into a <code>has_scalar</code> instance. Indeed this is a large part of the appeal since we can then use the associated notation. However once we think about <code>lie_ideal</code> there is a problem because these would require us to define a scalar self-action of <code>lie_algebra</code>s (actually it would be <code>lie_ring</code>s) and this would conflict with the same concept for associative rings.</p>",
        "id": 215836453,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664232
    },
    {
        "content": "<p>To be more concrete, to use <code>is_scalar_tower</code>, we would have to define a <code>has_scalar</code> instance on <code>lie_rings</code> as <code>x • y = ⁅x, y⁆</code> to make <code>lie_ideal</code>s work. However this would lead to two mathematically different scalar actions when we are in the case that we are looking at the Lie ring associated to an associative ring.</p>",
        "id": 215836769,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664429
    },
    {
        "content": "<p>I think a possible solution which I believe would work would be to change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bracket</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bracket</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then define a <code>lie_module</code> to include an unbundled <code>has_bracket</code> instance.</p>",
        "id": 215836977,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664562
    },
    {
        "content": "<p>If we did this then <code>lie_module</code>s would be setup slightly differently to <code>module</code>s over an associative ring in the sense that the latter have <code>has_mul</code> and <code>has_scalar</code> whereas I am proposing using only <code>has_bracket</code> for the former. I haven't tried this but I _think_ it would work.</p>",
        "id": 215837170,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Would you like me to put together a PR (most likely tomorrow) implementing this approach?</p>",
        "id": 215837260,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604664739
    },
    {
        "content": "<p>So we would write <code>[X, v]</code> for the action of <code>X</code> on a vector <code>v</code> (where <code>X : L</code> lives in a Lie algebra, and <code>v : V</code> in some representation of <code>L</code>).</p>",
        "id": 215839640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604666147
    },
    {
        "content": "<p>Whereas atm, we would be trying to use <code>X \\bu v</code>.</p>",
        "id": 215839669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604666163
    },
    {
        "content": "<p>I think having <code>has_bracket</code> depend on two type parameters makes sense (they can live in different universes, btw).</p>",
        "id": 215839777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604666222
    },
    {
        "content": "<p>It works for <code>has_scalar</code>, and this will be it's Lie-theoretic cousin.</p>",
        "id": 215839801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604666240
    },
    {
        "content": "<p>I haven't followed the <code>is_scalar_tower</code> story but this sounds reasonable to me. Probably worth documenting on <code>has_bracket</code> itself that the reason for the type is that it will be used for both algebras and modules.</p>",
        "id": 215840738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604666867
    },
    {
        "content": "<p>I guess the disadvantage will be that sometimes you need more type annotations in things like <code>bracket l 0 = 0</code>.</p>",
        "id": 215840813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604666896
    },
    {
        "content": "<p>Thank you both for the input. I'll have a go at this tomorrow and see how I get on.</p>",
        "id": 215842577,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604667910
    },
    {
        "content": "<p>(and I will document on <code>has_bracket</code> as suggested)</p>",
        "id": 215842628,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604667942
    },
    {
        "content": "<p>I finally took this up today and now have a refactored version of <code>lie_module</code>s working where the data of the action (i.e., the map <code>L → M → M</code>) is unbundled as an instance of <code>has_bracket</code> and so it is possible to use the notation <code>⁅x, m⁆</code> for <code>x : L</code> acting on an element of a module <code>m : M</code>.</p>",
        "id": 216023659,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604866965
    },
    {
        "content": "<p>I'll see if I can get a PR out this evening but it might have to be tomorrow evening till I have things tidy enough. For what it's worth, it occurred to me that we _could_ in fact have the action inhabit an instance of <code>has_scalar</code> despite the clash with the extant <code>has_scalar</code> action when regarding commutative rings as associative algebras over themselves. This was the inspiration for my question here <a href=\"#narrow/stream/113488-general/topic/multiple.20solutions.20for.20typeclass.20search/near/216002921\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/multiple.20solutions.20for.20typeclass.20search/near/216002921</a> (<code>foo</code> playing the role of <code>has_scalar</code>) but I think it is better not to shoot for this.</p>",
        "id": 216023750,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1604867134
    }
]