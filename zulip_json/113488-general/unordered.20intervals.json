[
    {
        "content": "<p>Should we have something more generic for unordered intervals? We already have unordered <code>Icc</code> and <code>Ioc</code> intervals. Several theorems like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.integral_boundary_rect_eq_zero_of_continuous_on_of_differentiable_on\">docs#complex.integral_boundary_rect_eq_zero_of_continuous_on_of_differentiable_on</a> use unordered <code>Ioo</code> intervals (and it looks ugly without a definition). Should we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set.unordered_Ixx</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Ixx</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">Ixx</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ICC</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">unordered_Ixx</span> <span class=\"n\">Icc</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">IOC</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">unordered_Ixx</span> <span class=\"n\">Ioc</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ICO</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">unordered_Ixx</span> <span class=\"n\">Ico</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">IOO</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">unordered_Ixx</span> <span class=\"n\">Ioo</span>\n</code></pre></div>",
        "id": 270328202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643772454
    },
    {
        "content": "<p>Discussion about long names in that file moved to <a href=\"#narrow/stream/113488-general/topic/Lemma.20names.20in.20cauchy_integral.2Elean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lemma.20names.20in.20cauchy_integral.2Elean</a></p>",
        "id": 270329144,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643773341
    },
    {
        "content": "<p>Same thought here, except that you shouldn't use one def + notation but directly call the defs <code>set.IXX</code> (for when we'll want the <code>finset</code> versions)</p>",
        "id": 270341821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643784554
    },
    {
        "content": "<p>If we use definitions, then we'll need to repeat some theorems three or for times. I'm not sure if this is really bad. I'll think again in the morning.</p>",
        "id": 270344412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643787076
    },
    {
        "content": "<p>We already do this for <code>set.Ixx</code> (and actually 8 times if you take <code>finset.Ixx</code> into account!), so that seems like the natural continuation, unless you want <code>IXX</code> to be a really thin wrapper around <code>Ixx</code> and always walk up to <code>Ixx</code> in proofs involving <code>IXX</code>.</p>",
        "id": 270349591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643790941
    },
    {
        "content": "<p>I never understand why people object to code reuse. Argument reuse happens across mathematics and sometimes it really is the case that there\"s no underlying theorem which is the root cause -- it's a more abstract \"principle\" which refuses to be boxed into a concrete abstraction. Martin Hairer once emphasised this to me in a conversation we had about formalising his area.</p>",
        "id": 270352679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643792611
    },
    {
        "content": "<p>There is a trade-off here: code reuse vs discoverability of lemmas. In case of generic defs and lemmas, they will be named <code>unordered_symm</code>/<code>unordered_of_le</code> or <code>IXX_symm</code>/<code>IXX_of_le</code> instead of <code>ICC_symm</code>/<code>ICC_of_le</code>.</p>",
        "id": 270497406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643860709
    }
]