[
    {
        "content": "<p>Specifically, I'm looking for tools to help understand how existing tactic/<code>meta def</code>-type Lean 3 code worksâ€”even being able to stick a kind of \"print\" statement in the middle of a <code>do</code> block would be useful. (I'm just starting, really, so even extremely basic techniques are welcome!)</p>\n<p>Pointing me to a resource that already talks about this would also be greatly appreciated; I couldn't find it in the Lean 3 manual :)</p>\n<p>(Maybe this should be moved to <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> ? Not sure.)</p>",
        "id": 304827595,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666121962
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.trace\">docs#tactic.trace</a> is the basic print command (and that's like 90% of debugging of course!)</p>",
        "id": 304832440,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666123887
    },
    {
        "content": "<p>One can also insert <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trace_val\">docs#trace_val</a> even into non-meta defs and the VM will trace the value as it executes</p>",
        "id": 304832629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666123953
    },
    {
        "content": "<p>There are other more advanced functions in the same file for tracing the stack etc</p>",
        "id": 304832773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666124029
    }
]