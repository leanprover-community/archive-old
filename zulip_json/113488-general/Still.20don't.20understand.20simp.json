[
    {
        "content": "<p>I still don't understand simp. I tried</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>fully expecting it to work, and it didn't. So I switched to <code>by simp at H;assumption</code> which works fine -- but I feel like I'm missing a trick. What is the correct way to solve this goal? I know I could prove it using <code>zero_add</code> a couple of times -- is best practice to spell out the proof in full or use automation?</p>",
        "id": 130435282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532724945
    },
    {
        "content": "<p>The moment I try <code>zero_add</code> in term mode I find myself in triangle hell.</p>",
        "id": 130435357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532725020
    },
    {
        "content": "<p><code>simpa using h</code></p>",
        "id": 130435434,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532725087
    },
    {
        "content": "<p><code>simp * at *</code></p>",
        "id": 130435456,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532725115
    },
    {
        "content": "<blockquote>\n<p><code>simpa using h</code></p>\n</blockquote>\n<p>Do I need an import for this?</p>",
        "id": 130435851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532725508
    },
    {
        "content": "<p>just the usual</p>",
        "id": 130436468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532726252
    },
    {
        "content": "<p>That's happening to me more and more. Is there any way I can import every mathlib tactic automatically?</p>",
        "id": 130437084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727007
    },
    {
        "content": "<p><code>import tactic.interactive</code> gets the main tactics, but advanced tactics have their own imports, in particular <code>ring</code> and <code>finish</code></p>",
        "id": 130437123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727066
    },
    {
        "content": "<p>Is there any reason I shouldn't import <code>ring</code> always?</p>",
        "id": 130437133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727085
    },
    {
        "content": "<p>if you don't need it, don't import it</p>",
        "id": 130437138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727100
    },
    {
        "content": "<p>and you shouldn't overuse it anyway, it's slow</p>",
        "id": 130437143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727116
    },
    {
        "content": "<blockquote>\n<p>if you don't need it, don't import it</p>\n</blockquote>\n<p>Why not? If I don't use it, it doesn't even matter</p>",
        "id": 130437145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727119
    },
    {
        "content": "<p>it adds a spurious dependency, which is probably a bigger problem for me than for you</p>",
        "id": 130437200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727165
    },
    {
        "content": "<p>Of course, adding additional dependencies also slows down startup and recompile times</p>",
        "id": 130437223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727219
    },
    {
        "content": "<p>Even if I never use them?</p>",
        "id": 130437228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727231
    },
    {
        "content": "<p>They're compiled on sight?</p>",
        "id": 130437273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727249
    },
    {
        "content": "<p>of course, how would it know if you have used the file unless it compiles the dependency?</p>",
        "id": 130437281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727270
    },
    {
        "content": "<p>the way you are supposed to signal what you depend on is in your import list</p>",
        "id": 130437292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727295
    },
    {
        "content": "<p>How about I don't import it, and every time I use it a little pop-up appears saying \"I see you're using <code>ring</code>. Do you want to import <code>tactic.ring</code>?\"</p>",
        "id": 130437304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727309
    },
    {
        "content": "<p>how would it know that <code>ring</code> exists?</p>",
        "id": 130437309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727328
    },
    {
        "content": "<p>and same for <code>simpa</code> and <code>tactic.interactive</code></p>",
        "id": 130437312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727331
    },
    {
        "content": "<blockquote>\n<p>how would it know that <code>ring</code> exists?</p>\n</blockquote>\n<p>Because I just tell it, using a \"snippet\" or something?</p>",
        "id": 130437322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727349
    },
    {
        "content": "<p>\"I see that you just deleted the last occurrence of <code>simpa</code>. Do you want me to unimport it again?\"</p>",
        "id": 130437377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727386
    },
    {
        "content": "<p>\"I see that you used <code>simp</code>. Do you want me to replace that argument with what Lean actually did?\"</p>",
        "id": 130437387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727409
    },
    {
        "content": "<p>hm, I suppose one option is to somehow generate an \"index\" of all definitions in mathlib and their locations, and then store this info in some file with no dependencies and use it for hints</p>",
        "id": 130437389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727413
    },
    {
        "content": "<p>Import analysis like that is very expensive</p>",
        "id": 130437409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727459
    },
    {
        "content": "<p>I'm basically asking for some sort of tactic manager I think.</p>",
        "id": 130437410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727462
    },
    {
        "content": "<p>I just have no idea about what is possible.</p>",
        "id": 130437411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727469
    },
    {
        "content": "<p>Does <code>simpa !? only? (* | [(* | (- id | expr)), ...]?) (with id*)? (using expr)? tactic.simp_config_ext?</code> actually mean something? Where can I learn about what it means?</p>",
        "id": 130437471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727544
    },
    {
        "content": "<p>It is hard to get the analysis exactly right without just recompiling the current file, and if it's not exactly right then there is the possibility of incorrect hints, which will get old fast</p>",
        "id": 130437472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727544
    },
    {
        "content": "<p>yes, it's a description of the parsing of arguments following <code>simpa</code></p>",
        "id": 130437486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727592
    },
    {
        "content": "<p>I want it to be a regex but I can't make sense of it</p>",
        "id": 130437537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727609
    },
    {
        "content": "<p>Basically <code>?</code> means that the previous thing may or may not be present, and <code>*</code> means zero or more of the previous thing</p>",
        "id": 130437544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727650
    },
    {
        "content": "<p>It's a pseudorex</p>",
        "id": 130437546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532727654
    },
    {
        "content": "<p>oh is it just a regex but using stuff I don't know?</p>",
        "id": 130437547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727654
    },
    {
        "content": "<p>Aah thanks!</p>",
        "id": 130437548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727661
    },
    {
        "content": "<p><code>|</code> means alternatives</p>",
        "id": 130437559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727681
    },
    {
        "content": "<p>i.e. <code>a | b</code> means parse <code>a</code> or parse <code>b</code></p>",
        "id": 130437563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727693
    },
    {
        "content": "<p>and <code>expr</code> is some kind of variable? Or you want something of type <code>expr</code>?</p>",
        "id": 130437618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727733
    },
    {
        "content": "<p><code>expr</code> means parse an expression</p>",
        "id": 130437621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727745
    },
    {
        "content": "<p>and <code>id</code> means parse an identifier</p>",
        "id": 130437622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727753
    },
    {
        "content": "<p>I thought that <code>h</code> was a name in <code>simpa using h</code>, not an <code>expr</code></p>",
        "id": 130437625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727764
    },
    {
        "content": "<p>nope, look for <code>simpa using show</code> in mathlib and you will find several larger examples</p>",
        "id": 130437637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727795
    },
    {
        "content": "<p>it's a nice way to say \"use this term, but clean it up first\"</p>",
        "id": 130437644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727824
    },
    {
        "content": "<p>so what's <code>with</code>?</p>",
        "id": 130437689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727849
    },
    {
        "content": "<p>I just apply these things at random usually.</p>",
        "id": 130437693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727858
    },
    {
        "content": "<p>most of the args are just passed to <code>simp</code> as is</p>",
        "id": 130437699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727882
    },
    {
        "content": "<p>I have a list of \"incantations formed with <code>simp</code> or <code>simpa</code> which have worked for me in the past\"</p>",
        "id": 130437700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727884
    },
    {
        "content": "<p>that includes <code>!</code> and <code>with</code></p>",
        "id": 130437704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727893
    },
    {
        "content": "<p>the <code>with</code> arg of <code>simp</code> allows you to simplify with custom simp sets, like <code>functor_norm</code></p>",
        "id": 130437719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727925
    },
    {
        "content": "<p>I don't use it much at all</p>",
        "id": 130437726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532727950
    },
    {
        "content": "<p>What does <code>simpa [this]</code> do? Does that not even parse?</p>",
        "id": 130437773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532727984
    },
    {
        "content": "<p>The same as <code>simp [this], assumption</code></p>",
        "id": 130437781,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532728022
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">â†’</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>If you'd told me one works and one failed I would have guessed the other way around.</p>",
        "id": 130437859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532728150
    },
    {
        "content": "<p>The second one is simplified to <code>c=0 -&gt; c=0</code>. The first one doesn't simplify <code>H</code></p>",
        "id": 130437929,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532728234
    },
    {
        "content": "<p><code>example : âˆ€ (y : â„•), (Î» (c : â„•), 0 + 0 + c = 0) y â†’ y = 0 := by simp </code></p>",
        "id": 130437940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532728313
    },
    {
        "content": "<p>I wouldn't have dreamed of applying <code>simp</code> to that because it's not an equality. Am I using <code>simp</code> completely wrong?</p>",
        "id": 130437982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532728335
    },
    {
        "content": "<p>Actually <code>simpa [this]</code> is a bit funny - it's more like <code>have this' := this, simp [this] at this', simp [this], exact this'</code></p>",
        "id": 130437984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728337
    },
    {
        "content": "<p>for the first example you want <code>by simpa using H</code></p>",
        "id": 130438007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728429
    },
    {
        "content": "<p>The <code>using</code> argument of <code>simpa</code> is pretty important. It's not really optional, it just has a default value of <code>this</code></p>",
        "id": 130438050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728460
    },
    {
        "content": "<p>so <code>by simpa</code> where there is no <code>this</code> in the context is kind of pointless</p>",
        "id": 130438054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728482
    },
    {
        "content": "<p>One nice feature of <code>simp</code> I discovered today, is it doesn't let you make horrible simp lemma. I tried to prove <code>forall x : zmod 2, x = -x</code> and it didn't let me make it <code>simp</code></p>",
        "id": 130438060,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532728496
    },
    {
        "content": "<p>If you try it again you might get banned</p>",
        "id": 130438080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532728533
    },
    {
        "content": "<p>\"no more simp for you for a week\"</p>",
        "id": 130438084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532728541
    },
    {
        "content": "<p>your use of <code>simp</code> to prove that is valid but a bit funny and doesn't generalize well</p>",
        "id": 130438146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728600
    },
    {
        "content": "<p>I would do <code>intros y H; simpa using H</code></p>",
        "id": 130438155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728625
    },
    {
        "content": "<p><code>simp {contextual := tt}</code> often works in these situations, but I don't think it simplifies the assumptions first</p>",
        "id": 130438163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532728662
    }
]