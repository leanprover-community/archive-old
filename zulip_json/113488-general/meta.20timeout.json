[
    {
        "content": "<p>I'm still playing with Lean introspection, but I can't sort declarations in order to print first axioms, then constants, then definition, and then theorems. I try</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">declaration_kind_nb</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ax</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">defn</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">declaration_compare</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">d&#39;</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">declaration_kind_nb</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">declaration_kind_nb</span> <span class=\"n\">d&#39;</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">declaration_compare</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sort_env</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">((</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">merge_sort</span> <span class=\"n\">declaration_compare</span> <span class=\"n\">decls</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"err\">∘</span> <span class=\"n\">to_name</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>and get either determistic timeout or worse (excessive memory consumption, segfault...)</p>",
        "id": 132015530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534117658
    },
    {
        "content": "<p>What if you print only the length of the resulting list?</p>",
        "id": 132015764,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534118161
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\"><pre><span></span>meta instance : decidable_rel declaration_compare :=\nλ _ _, nat.decidable_le _ _\n\nmeta def sort_env : tactic unit :=\ndo curr_env ← get_env,\n   let decls := curr_env.fold [] list.cons,\n   (list.merge_sort declaration_compare decls).mmap&#39; (trace ∘ to_name)\n\nrun_cmd sort_env\n</pre></div>",
        "id": 132015805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118171
    },
    {
        "content": "<p>the problem is that the format instance for <code>list string</code> involves a recursion, so it is very deeply nested and hits the recursion limit</p>",
        "id": 132015812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118242
    },
    {
        "content": "<p>(this is why TCO is important in functional programming languages)</p>",
        "id": 132015817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118259
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 132015861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534118316
    },
    {
        "content": "<p>Is there a more natural way to do define that comparison function?</p>",
        "id": 132015934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534118428
    },
    {
        "content": "<p>Not particularly; you could do a cases on both and return true or false in each case</p>",
        "id": 132016013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118619
    },
    {
        "content": "<p>This was my original plan, but I decided there were too many cases</p>",
        "id": 132016054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534118662
    },
    {
        "content": "<p>this is a legitimate way to cut down the number of cases from O(n^2) to O(n)</p>",
        "id": 132016068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118722
    },
    {
        "content": "<p>I wish there was a built in (autogenerated) <code>T.discr</code> function that returns the discriminant of the type, which is basically this</p>",
        "id": 132016119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118790
    },
    {
        "content": "<p>it has an O(1) implementation, since this is the tag on the vm object</p>",
        "id": 132016126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534118822
    }
]