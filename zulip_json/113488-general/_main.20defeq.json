[
    {
        "content": "<p>Is this expected to fail? Are <code>f</code> and <code>f._main</code> considered definitionally equal or not? None of them is marked as irreducible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"bp\">|</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">f</span> <span class=\"c1\">-- def f : unit → unit := f._main</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f._main</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 277261244,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648723276
    },
    {
        "content": "<p>I believe <code>f._main</code> is marked irreducible by the kernel</p>",
        "id": 277261365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648723339
    },
    {
        "content": "<p><code>#print</code> doesn't display <code>@[irreducible]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">f._main</span>\n<span class=\"c1\">-- def f._main : unit → unit := λ (ᾰ : unit), punit.cases_on ᾰ (id_rhs unit ())</span>\n</code></pre></div>\n<p>But despite that, <code>f</code> is not irreducible, so it can unfold to <code>f._main</code>, right? And <code>f._main x = f._main x</code> is refl regardless of the reducibility of <code>f._main</code>. If we simulate irreducibility, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">f_main</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"bp\">|</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">f_main</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f_main</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>Even if <code>f._main</code> is a constant, it still properly unfolds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f_main</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">f_main</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f_main</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>",
        "id": 277262310,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648723944
    },
    {
        "content": "<p>Is <code>_main</code> being irreducible the cause of <a href=\"#narrow/stream/113488-general/topic/refl.20can't.20solve.20.60subtype.2Emk.20x.20h1.20.3D.20subtype.2Emk.20x.20h2.60/near/277176574\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/refl.20can't.20solve.20.60subtype.2Emk.20x.20h1.20.3D.20subtype.2Emk.20x.20h2.60/near/277176574</a>?</p>",
        "id": 277262324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648723949
    },
    {
        "content": "<p>Remark: <code>#print prefix f</code> gives you the names of all the facts you need about <code>f</code>. Note that <code>by simp</code> solves the example; I think the simplifier might know the equation lemmas.</p>",
        "id": 277262365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648723976
    },
    {
        "content": "<blockquote>\n<p>Note that <code>by simp</code> solves the example; I think the simplifier might know the equation lemmas.</p>\n</blockquote>\n<p>Not really. The simplifier uses the fact that unit is a subsingleton. If you replace <code>unit</code> with <code>nat</code>, it fails.</p>",
        "id": 277263318,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648724494
    },
    {
        "content": "<p>No I was wrong, neither <code>f</code> nor <code>f._main</code> is irreducible or \"opaque\" (the kernel version of irreducible)</p>",
        "id": 277265054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725479
    },
    {
        "content": "<p>the reason is because <code>f._sunfold</code> exists</p>",
        "id": 277265104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725489
    },
    {
        "content": "<p>which turns on \"smart unfolding\" and blocks normal unfolding</p>",
        "id": 277265125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725505
    },
    {
        "content": "<p>smart unfolding means that it only unfolds when one of the patterns matches</p>",
        "id": 277265159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725531
    },
    {
        "content": "<p>This blockage is only in the elaborator, the kernel will accept a proof by <code>rfl</code> here</p>",
        "id": 277265252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725597
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f._main</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.unsafe_change</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277265567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648725753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/_main.20defeq/near/277262324\">said</a>:</p>\n<blockquote>\n<p>Is <code>_main</code> being irreducible the cause of <a href=\"#narrow/stream/113488-general/topic/refl.20can't.20solve.20.60subtype.2Emk.20x.20h1.20.3D.20subtype.2Emk.20x.20h2.60/near/277176574\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/refl.20can't.20solve.20.60subtype.2Emk.20x.20h1.20.3D.20subtype.2Emk.20x.20h2.60/near/277176574</a>?</p>\n</blockquote>\n<p>Indeed, seems like in that thread <code>to_list._sunfold</code> is the problem. We can use Mario's solution to prove <code>to_list_star</code> by <code>refl</code> after <code>rw to_list</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_list_star</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_list.star_proof</span> <span class=\"o\">(</span><span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">to_list</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.unsafe_change</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>That is, the kernel would accept <code>refl</code>, but the elaborator fails at type checking and the proof does not even reach the kernel. That's why we need <code>tactic.unsafe_change</code></p>",
        "id": 277275181,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648731096
    }
]