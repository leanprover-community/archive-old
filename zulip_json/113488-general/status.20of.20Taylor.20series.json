[
    {
        "content": "<p>I would like to know that for <code>ε &gt; 0</code>, the Taylor series for <code>(x+ε)^{1/2}</code> centered at <code>x=1/2</code> converges uniformly on <code>[0,1]</code>. How far off stating/proving this are we? (I suspect a long way?)</p>",
        "id": 227543902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614138503
    },
    {
        "content": "<p>Maybe that wouldn't be so bad, actually?  There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fpower_series_on_ball.tendsto_locally_uniformly_on'\">docs#has_fpower_series_on_ball.tendsto_locally_uniformly_on'</a></p>",
        "id": 227544025,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614138645
    },
    {
        "content": "<p>You'd bound the growth of the coefficents of the Taylor series, then use a theorem like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.le_radius_of_bound\">docs#formal_multilinear_series.le_radius_of_bound</a> to get the radius of convergence.</p>",
        "id": 227544635,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614139208
    },
    {
        "content": "<p>Perhaps a tricky point is to show that the random power series you write down for <code>(x+ε)^{1/2}</code> (involving the Catalan numbers, IIRC?) indeed converges to the square root function.  That would follow from <a href=\"https://en.wikipedia.org/wiki/Cauchy_product#Convergence_and_Mertens'_theorem\">Mertens' theorem</a>, but I don't think that's in mathlib.</p>",
        "id": 227544946,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614139507
    },
    {
        "content": "<p>I see! That's better than I'd realised.</p>",
        "id": 227549477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614143740
    },
    {
        "content": "<p>What do you need it for, btw?  Maybe there's a hack for your use case.</p>",
        "id": 227549543,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614143776
    },
    {
        "content": "<p>Using Merten's theorem would require some messy calculation about the convolution of the power stores with itself, though.</p>",
        "id": 227549574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614143820
    },
    {
        "content": "<p>I was thinking about Stone-Weierstrauss. I made a start on using Bernstein polynomials for this, and got a bit bored. :-) Pedersen in <em>Analysis Now</em> has a slick proof that uses the above fact.</p>",
        "id": 227549680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614143908
    },
    {
        "content": "<p>That would be great!  Both in itself, and as a big missing ingredient for Fourier series.</p>",
        "id": 227549720,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614143970
    },
    {
        "content": "<p>Speaking of this, how do you even define the Catalan numbers?  I got the error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to prove recursive application is decreasing, well founded relation\n  @has_well_founded.r ℕ (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof)\n</code></pre></div>\n<p>when I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catalan</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">catalan</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227567700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614157370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> you need to \"cheat\" by summing over <code>fin n.succ</code> and adding a <code>have := i.2</code> in the summand.</p>",
        "id": 227567975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614157524
    },
    {
        "content": "<p>See for example <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/witt_vector/witt_polynomial.lean#L201\">https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/witt_vector/witt_polynomial.lean#L201</a></p>",
        "id": 227568093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614157587
    },
    {
        "content": "<p>Afterwards, you can write an \"equation lemma\" that shows it's equal to what you would want to write (namely a sum over <code>range</code>)</p>",
        "id": 227568126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614157615
    },
    {
        "content": "<p>Mario taught me this trick (-;</p>",
        "id": 227568171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614157650
    },
    {
        "content": "<p>Actually in this case you need <code>i.2</code> but also a proof that <code>n - i &lt; n + 1</code> (this doesn't require any assumptions though)</p>",
        "id": 227568378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614157786
    },
    {
        "content": "<p>Yes, the problem here is a bit harder than the Witt vector one</p>",
        "id": 227568502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614157825
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">catalan</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">i.2</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nat.lt_succ_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">n.sub_le</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n             <span class=\"n\">catalan</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">catalan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227568626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614157900
    },
    {
        "content": "<p>Presumably you just add the proof of this to the local context too because the default tactic used to get rid of these assumptions is <code>assumption</code></p>",
        "id": 227568636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614157907
    },
    {
        "content": "<p>PR!</p>",
        "id": 227568701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614157927
    },
    {
        "content": "<p>Then someone can start on the (in)famous exercise in Stanley's <em>Enumerative Combinatorics</em> showing that <a href=\"https://math.nyu.edu/faculty/yuchen/cs99/catalan.pdf\">66 different things</a> are counted by the Catalan numbers...</p>",
        "id": 227568878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614158034
    },
    {
        "content": "<p>that's indeed enumerative</p>",
        "id": 227569759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614158514
    },
    {
        "content": "<p>No ... someone else (not me) can skip straight to Scott's terrible lemma,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Maclaurin series for `sqrt (1 + x)` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sqrt_one_plus</span> <span class=\"o\">:</span> <span class=\"n\">power_series</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">power_series.mk</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">catalan</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sqrt_one_plus_sq</span> <span class=\"o\">:</span> <span class=\"n\">sqrt_one_plus</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt_one_plus</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">power_series.X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 227570439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614158836
    },
    {
        "content": "<p>Thanks! This is already very helpful.</p>",
        "id": 227570843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614159043
    },
    {
        "content": "<p>Frankly I think the Bernstein polynomial approach will be more efficient ;-)</p>",
        "id": 227570912,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614159085
    },
    {
        "content": "<p>I guess with some complex analysis it becomes softer. Ideally you don't want to have to know anything about the actual coefficients of this power series, but just rely on knowing that it is analytic on a big enough domain.</p>",
        "id": 227571284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614159264
    },
    {
        "content": "<p>Sébastien actually proved the inverse function theorem for analytic functions a few weeks ago,<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius_right_inv_pos_of_radius_pos\">docs#formal_multilinear_series.radius_right_inv_pos_of_radius_pos</a></p>",
        "id": 227572311,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614159872
    },
    {
        "content": "<p>So you could get the analyticity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>1</mn><mo>+</mo><mi>x</mi></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{1+x}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span></span></span></span> from the analyticity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">y^2-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.  (I think.). But if I understand correctly there's no explicit bound obtained on the radius of convergence of the inverse.</p>",
        "id": 227572559,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614159993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20Taylor.20series/near/227568878\">said</a>:</p>\n<blockquote>\n<p>Then someone can start on the (in)famous exercise in Stanley's <em>Enumerative Combinatorics</em> showing that <a href=\"https://math.nyu.edu/faculty/yuchen/cs99/catalan.pdf\">66 different things</a> are counted by the Catalan numbers...</p>\n</blockquote>\n<p>His more recent book \"Catalan Numbers\" (CUP, 2015) extends that to 214 things.</p>",
        "id": 227709279,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1614220484
    },
    {
        "content": "<p>What is the next number in the sequence 66, 214, ... ?</p>",
        "id": 227713602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614224777
    },
    {
        "content": "<p>676 apparently!<br>\n<a href=\"https://oeis.org/A000287\">https://oeis.org/A000287</a></p>",
        "id": 227713928,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614225180
    },
    {
        "content": "<p>Are you sure it's not 37?</p>",
        "id": 227721413,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614232064
    }
]