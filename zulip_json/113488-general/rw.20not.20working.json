[
    {
        "content": "<p>For some reason, the rw here is not working. What am I missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.pointwise</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">has_inv.inv</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsub'</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">image_inv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279228961,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650212595
    },
    {
        "content": "<p>Shouldn't it be <code>rwa image_inv at hsub</code>?</p>",
        "id": 279229032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650212681
    },
    {
        "content": "<p>Let me try...</p>",
        "id": 279229044,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650212736
    },
    {
        "content": "<p>I changed it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">has_inv.inv</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">image_inv</span> <span class=\"n\">at</span> <span class=\"n\">hsub</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but it still does not work.</p>",
        "id": 279229096,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650212797
    },
    {
        "content": "<p>I meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">has_inv.inv</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsub'</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">image_inv</span> <span class=\"n\">at</span> <span class=\"n\">hsub</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279229113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650212858
    },
    {
        "content": "<p>That does not work either.</p>",
        "id": 279229157,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650212884
    },
    {
        "content": "<p>Yeah because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_inv\">docs#set.image_inv</a> requires <code>has_involutive_inv α</code>, not just <code>has_inv α</code>.</p>",
        "id": 279229164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650212910
    },
    {
        "content": "<p>Ah, I see. The error was confusing me. I didn't realize that was the problem.</p>",
        "id": 279229320,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650213168
    },
    {
        "content": "<p>What's the difference between rw and rwa?</p>",
        "id": 279229342,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650213229
    },
    {
        "content": "<p><code>rwa</code> is <code>rw</code> + <code>assumption</code></p>",
        "id": 279229373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650213242
    },
    {
        "content": "<p>Interesting. Thanks.</p>",
        "id": 279229419,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1650213333
    },
    {
        "content": "<p>This fails because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_inv\">docs#set.has_inv</a> is surprisingly defined in terms of the preimage not the image</p>",
        "id": 279232868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650218559
    },
    {
        "content": "<p>They're equivalent when inv is involutive, but when it's not this definition is kind of weird</p>",
        "id": 279232885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650218603
    },
    {
        "content": "<p>There's another thread about this I made a few months ago</p>",
        "id": 279232896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650218622
    },
    {
        "content": "<p>Yes I agree. I believe it should be change to the image because it would make all the <code>set.image2</code> API work with it.</p>",
        "id": 279233306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650219181
    },
    {
        "content": "<p><del>We'd probably want to change <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.has_inv\">docs#submonoid.has_inv</a> as well to remain defeq</del> Nevermind, it's already defined in terms of the set operator</p>",
        "id": 279233646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650219670
    },
    {
        "content": "<p>My experience is that the preimage is nicer to work with than image (has better properties - e.g. topologically; has nicer definitional behavior). Therefore I defined <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_inv\">docs#set.has_inv</a> in terms of preimage.</p>",
        "id": 279276225,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650279320
    }
]