[
    {
        "content": "<p>I am trying to solve some issues encountered by <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> in <a href=\"https://github.com/leanprover-community/mathlib/issues/3641\">#3641</a>, but I also find them tricky.  What am I doing wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">smooth_manifold_with_corners</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"bp\">_</span> <span class=\"n\">E</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">E</span> <span class=\"bp\">_</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"bp\">_</span> <span class=\"n\">E</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">E</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>The <code>#check</code> succeeds, giving <code>model_with_corners 𝕜 E E : Type u_3</code>.  The <code>example</code> has a bug somewhere; there is a red underline on the second underscore, with the error message \"don't know how to synthesize placeholder ⊢ Type ?\".</p>",
        "id": 206201348,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596750649
    },
    {
        "content": "<p>I don't know this part of the library, but this behavior is not inconsistent. <code>#check</code> allows an expression which still contains metavariables, but a definition (including <code>example</code>) doesn't. As an extreme example, take <code>#check _</code> vs <code>example : _ := sorry</code>.</p>",
        "id": 206203139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596751902
    },
    {
        "content": "<p>In this case the metavariable must appear in one of the implicit arguments of <code>model_with_corners</code> or you would see it displayed in the output of <code>#check</code>.</p>",
        "id": 206203197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596751925
    },
    {
        "content": "<p>Thank you, that's helpful.  I'll experiment.</p>",
        "id": 206203384,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596752072
    },
    {
        "content": "<p>Should the red underlining directly indicate the problematic implicit argument?  Or is it more complicated?</p>",
        "id": 206203441,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596752128
    },
    {
        "content": "<p>It should</p>",
        "id": 206203461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596752147
    },
    {
        "content": "<p>I think I have found a fix, but I don't really understand it.  I noticed the following comment at the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space.restrict_scalars\">docs#normed_space.restrict_scalars</a> :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- We could add a type synonym equipped with this as an instance,</span>\n<span class=\"c1\">-- as we&#39;ve done for `module.restrict_scalars`.</span>\n</code></pre></div>\n\n\n<p>So, acting on a hunch, I rewrote the <code>restrict_scalars</code> section of <code>normed_space</code> along the lines used in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.restrict_scalars\">docs#module.restrict_scalars</a> , which is rather different.  I assume that what I did is adding a type synonym, although the concept is new to me .... And now</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>both parse.</p>\n<p>It would be great if someone could explain to me why this worked and whether it's a good idea <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 206222631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596773867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span>, let's see what the experts think of this change.  If it's a good idea, then one of us can add it to your branch tomorrow, and then retry the troublesome lemmas.</p>",
        "id": 206222922,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596774245
    },
    {
        "content": "<p>By the way, \"worked\" might be an overstatement -- to build, I commented out quite a number of uses of the old <code>restrict_scalars</code>, all of which would have to be adjusted.</p>",
        "id": 206224170,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596776186
    },
    {
        "content": "<p>Do you have a branch that I could have a look at?</p>",
        "id": 206230427,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596785323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <a href=\"https://github.com/leanprover-community/mathlib/tree/restrict_scalars_experiment\">https://github.com/leanprover-community/mathlib/tree/restrict_scalars_experiment</a></p>",
        "id": 206275839,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596816398
    },
    {
        "content": "<p>The following snippet runs on top of the branch without errors (except for the sorry):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">smooth_manifold_with_corners</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 206275925,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596816456
    },
    {
        "content": "<p>Whereas, wanting to do the equivalent on standard mathlib, I tried the code in my <a href=\"#narrow/stream/113488-general/topic/synthesize.20placeholder/near/206201348\">first post</a>, but kept getting the error \"don't know how to synthesize placeholder ⊢ Type ?\".</p>",
        "id": 206276104,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596816553
    },
    {
        "content": "<p>By the way, I noticed while making the branch that every use of <code>restrict_scalars</code> in the library is accompanied by a line like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">500</span><span class=\"o\">]</span> <span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span>\n</code></pre></div>\n\n\n<p>Would a line like this have fixed the initial error I had?  I'll experiment.</p>",
        "id": 206276701,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596816843
    },
    {
        "content": "<p>OK, so running on top of standard mathlib (not the branch), if I add a <code>local attribute</code> line to my original code, I get a new error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">smooth_manifold_with_corners</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">500</span><span class=\"o\">]</span> <span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E</span>  <span class=\"c1\">-- fine</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> maximum class-instance resolution depth has been reached (the limit can be increased by setting option</span>\n<span class=\"cm\">&#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option</span>\n<span class=\"cm\">&#39;trace.class_instances&#39;) -/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I tried adding lines like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">1000</span>\n</code></pre></div>\n\n\n<p>to the file but the error stays the same.</p>",
        "id": 206278242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596817651
    },
    {
        "content": "<p>I think it is a very good idea to use also the type synonym in the normed space case (but, contrary to your branch, I don't think it is necessary to introduce a <em>new</em> type synonym: we can still use <code>module.restrict_scalars</code>). </p>\n<p>While trying to fix the library with this change, I encounter a situation where I feel I don't know how to convince Lean. The problem is in the following lemma (not a MWE). Here, <code>module.restrict_scalars 𝕜 𝕜' E</code> is a type synonym for <code>E</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_strict_fderiv_at</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_strict_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f&#39;</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>Lean complains that </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"n\">f&#39;</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">F</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"n\">F</span>\n</code></pre></div>\n\n\n<p>because it ignores my type ascription <code>f : module.restrict_scalars 𝕜 𝕜' E → module.restrict_scalars 𝕜 𝕜' F</code> and comes back to <code>f : E → F</code>, so it wants the derivative to be a linear map from <code>E</code> to <code>F</code>.</p>\n<p>A way out is to use a <code>let</code> to force the type ascription, as in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_strict_fderiv_at</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">tildef</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n  <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">tildef</span>\n    <span class=\"o\">(</span><span class=\"n\">f&#39;</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>Is there a more elegant way to proceed?</p>",
        "id": 206304589,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596831442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, thanks for experimenting, I am also curious to see whether the <code>let</code> can be removed.</p>\n<p>Just out of interest, were you able to directly fix my <a href=\"#narrow/stream/113488-general/topic/synthesize.20placeholder/near/206278242\">other attempt</a> at the same end goal, using <code>local attribute [instance, priority 500] </code>?</p>",
        "id": 206308894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596834061
    },
    {
        "content": "<p>I have pushed a branch <a href=\"https://github.com/leanprover-community/mathlib/tree/norm_restrict_scalars\">https://github.com/leanprover-community/mathlib/tree/norm_restrict_scalars</a> in which I have done some work on the normed space structure for the type synonym <code>restrict_scalars</code>. I want to add some stuff to it (notably that differentiability of functions taking values in <code>restrict_scalars k k' E</code> is preserved by multiplication by an element of <code>k'</code>, and same thing for continuity, and higher smoothness, and also the specific case of real/complex), but tomorrow. If someone wants to experiment with the branch, don't hesitate to push to it!</p>",
        "id": 206309103,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596834169
    },
    {
        "content": "<p>I am convinced that the type synonym approach is better than the local attribute approach, so I have not tried to fix your other attempt, sorry.</p>",
        "id": 206309190,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596834231
    },
    {
        "content": "<p>No problem!  I only tried that experiment because I saw other parts of the normed space library using similar declarations, and wondered if it was preferred (over the type synonym method) for some reason.</p>",
        "id": 206309305,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596834283
    },
    {
        "content": "<p>I have probably erased all of them in my branch :-) I had started with this approach initially, but since then <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  has convinced me that the type synonym approach is better. I had not found the time to switch until now for lack of motivation.</p>",
        "id": 206309565,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596834425
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 206309624,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596834472
    },
    {
        "content": "<p>Thanks a lot to both! Is it maybe a good idea to do a separate PR with the branch you're working on and then integrate that into my branch?</p>",
        "id": 206350187,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1596896929
    },
    {
        "content": "<p>I have just PRed to mathlib a branch in which I prove that multiplying a real function by a complex number respects differentiability (in a more general framework), which if I understand correctly is something you are interested in. See <a href=\"https://github.com/leanprover-community/mathlib/issues/3731\">#3731</a>. Note though that it adds a layer of complexity over the simpler situation where one only multiplies by a scalar of the base field, so maybe for your PR it would be wiser to concentrate first on the easier situation, and try to generalize later.</p>",
        "id": 206410081,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597004374
    }
]