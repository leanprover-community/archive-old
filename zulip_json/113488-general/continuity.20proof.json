[
    {
        "content": "<p>I'm in the process of making <code>continuous</code> into a class and I came across this tricky proof which dates from the creation of mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">continuous_sum_rec</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_sup_dom</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span>\n</code></pre></div>\n\n\n<p>The type of <code>continuous_sup_dom</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">continuous_sup_dom</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">tspace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₃</span> <span class=\"o\">:</span> <span class=\"n\">tspace</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">cont</span> <span class=\"n\">t₁</span> <span class=\"n\">t₃</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">cont</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cont</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"err\">⊔</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">t₃</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 195846204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588256663
    },
    {
        "content": "<p>Maybe people will enjoy working out why this proof works.</p>",
        "id": 195846325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588256714
    },
    {
        "content": "<p>Also: it's never used.</p>",
        "id": 195848949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588257764
    },
    {
        "content": "<p>I think I use it in lean-homotopy-theory, though (at first I thought maybe I had written it, but no)</p>",
        "id": 195850728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588258540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/continuity.20proof/near/195846204\" title=\"#narrow/stream/113488-general/topic/continuity.20proof/near/195846204\">said</a>:</p>\n<blockquote>\n<p>I'm in the process of making <code>continuous</code> into a class and I came across this tricky proof which dates from the creation of mathlib:</p>\n</blockquote>\n<p>Didn't we decide that trying to have the type class system proving stuff for us was a bad idea (at least in Lean3)?</p>",
        "id": 195852680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588259186
    },
    {
        "content": "<p>Aah no! I mean a structure!</p>",
        "id": 195852712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588259205
    },
    {
        "content": "<p>Ok. I guess it will break a <em>lot</em> of proofs, but let's see how bad this becomes. I'm ready for changes as long as we don't bundle continuous functions.</p>",
        "id": 195852877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588259275
    },
    {
        "content": "<p>It has broken a lot of proofs in minor ways, but now I suddenly encountered a mysterious universe headache</p>",
        "id": 195852993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588259308
    },
    {
        "content": "<p>Clearly you'll have to insert a lot of dots. What do you gain?</p>",
        "id": 195853076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588259347
    },
    {
        "content": "<p><code>apply</code> will work</p>",
        "id": 195853356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588259469
    },
    {
        "content": "<p>Ok, that's a good reason.</p>",
        "id": 195853407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588259493
    },
    {
        "content": "<p>Especially if you then write a continuity tactic</p>",
        "id": 195853458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588259520
    }
]