[
    {
        "content": "<p>In the following snipper, I don't get why <code>refl</code> is not able to close the goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">with_bound</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cont</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_bound</span> <span class=\"n\">f</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">linear_map_with_bound_coe</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">with_bound</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- dunfold linear_map.with_bound,</span>\n  <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Here, <code>E →ₗ[k] F</code> is the space of linear maps from <code>E</code> to <code>F</code>, and <code>E →L[k] F</code> is the space of continuous linear maps (it extends linear maps, with just one additional field <code>cont : continuous to_fun</code> requiring the continuity of the function). Obviously, the <code>to_fun</code>fields of <code>f</code> and <code>f.with_bound C h</code> are the same by construction, but still something is preventing Lean from computing just by itself. If I uncomment the line with <code>dunfold</code>, everything is OK.</p>",
        "id": 166529968,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558795176
    },
    {
        "content": "<p>it's a lemma</p>",
        "id": 166530025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795261
    },
    {
        "content": "<p>that defines data</p>",
        "id": 166530034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795268
    },
    {
        "content": "<p>Ah, thanks! Stupid me.</p>",
        "id": 166530038,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558795294
    },
    {
        "content": "<p>I have run into this in the past, and I think Lean should tell me whenever I do it.</p>",
        "id": 166530043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795308
    },
    {
        "content": "<p>It really should. You will actually get a (very confusing and misattributed) error message if you try to use it to define a <code>def</code></p>",
        "id": 166530094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795353
    },
    {
        "content": "<p>\"You just wrote <code>lemma X : Y := Z</code>but <code>Y</code> isn't a Prop.\"</p>",
        "id": 166530096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795357
    },
    {
        "content": "<p>This issue often manifests itself in some \"VM can't compute this\" error</p>",
        "id": 166530112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- failed to generate bytecode for &#39;bar&#39;</span>\n<span class=\"c1\">-- code generation failed, VM does not have code for &#39;foo&#39;</span>\n</pre></div>",
        "id": 166530114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795413
    },
    {
        "content": "<p>I have done it often enough to know that this error means I did it, but Sebastien just managed to get a different manifestation of the issue. Yes, that's the error.</p>",
        "id": 166530121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795437
    },
    {
        "content": "<p>I ran into the \"VM does not have code for\" error using <code>eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n<span class=\"n\">def</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec</span>\n<span class=\"c\">/-</span><span class=\"cm\"> failed to generate bytecode for &#39;two&#39;</span>\n<span class=\"cm\">code generation failed, VM does not have code for &#39;eq.drec&#39; -/</span>\n</pre></div>\n\n\n<p>Why is <code>rec</code> okay, but <code>drec</code> not? Is it because the induction motive <code>C</code> in <code>drec</code> also consumes a proof <code>n: a = a_1</code>?</p>",
        "id": 169555192,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1562149903
    },
    {
        "content": "<p>This seems like a bug. <code>eq.drec</code> is autogenerated, and it's a def, and it has target sort <code>Sort l</code> so it should have code</p>",
        "id": 169556320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562151203
    },
    {
        "content": "<p>You can copy and paste the proof of <code>eq.drec</code> to get code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">),</span>\n  <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"err\">«</span><span class=\"bp\">_</span><span class=\"err\">»</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 169556334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562151231
    },
    {
        "content": "<p>Here is an even stranger instance. I define <code>eql</code> to be <em>exactly the same</em> as <code>eq</code> and then define something like path induction (HoTT 1.12.2) on it. Code generation fails, but it works for <code>eq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">eql</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eql</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">eql</span><span class=\"bp\">.</span><span class=\"n\">path_ind</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">eql</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">eql</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">eql</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">eql</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> failed to generate bytecode for &#39;eql.path_ind&#39;</span>\n<span class=\"cm\">code generation failed, inductive predicate &#39;eql&#39; is not supported -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">path_ind</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169556818,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1562151809
    },
    {
        "content": "<p>I think lean's support for inductive predicates is incomplete, and <code>eq</code> is being hard coded</p>",
        "id": 169558144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562153468
    },
    {
        "content": "<p>I'm getting the same error elsewhere now, even though I'm not trying to define any code (but <code>omega</code> is, probably?):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span> <span class=\"c\">/-</span><span class=\"cm\"> fine -/</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span> <span class=\"c\">/-</span><span class=\"cm\"> fine -/</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span> <span class=\"c\">/-</span><span class=\"cm\"> VM does not have code for &#39;nat.zero&#39; -/</span>\n</pre></div>\n\n\n<p>Does anyone know if this is expected to happen with <code>omega</code>? Is there a way around it?</p>",
        "id": 181064836,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1574117427
    },
    {
        "content": "<p>To make things more confusing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- fine</span>\n</pre></div>",
        "id": 181065411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574117979
    },
    {
        "content": "<p>compare:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n<span class=\"c1\">-- VM does not have code for &#39;nat.zero&#39;</span>\n</pre></div>",
        "id": 181065494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574118026
    },
    {
        "content": "<p>Ah, so the VM has code for typeclass-<code>0</code> but not nat-<code>0</code>. I can backport the <code>change</code> to fix where I originally encountered this :)</p>",
        "id": 181065954,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1574118369
    },
    {
        "content": "<p>No, it's a bug in <code>eval_expr</code></p>",
        "id": 181065972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574118395
    },
    {
        "content": "<p>Of course the VM has code for <code>nat.zero</code>, it's a constructor of a data type. But it doesn't like it when you call <code>eval_expr nat `(nat.zero)</code>; <code>eval_expr nat `(id nat.zero)</code> works fine</p>",
        "id": 181066033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574118462
    },
    {
        "content": "<p>this is a known bug, and mathlib has <code>eval_expr'</code> for this, but <code>omega</code> forgot to use it</p>",
        "id": 181066088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574118501
    },
    {
        "content": "<p>Ah, <code>grep</code> tells me almost no tactics that use <code>eval_expr</code> use the primed version. Should they all use it instead?</p>",
        "id": 181066382,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1574118766
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1711\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1711\">#1711</a></p>",
        "id": 181066856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574119196
    },
    {
        "content": "<p>Actually, I think that omega should probably not be using <code>eval_expr' nat</code> here at all, and instead it should use <code>expr.to_nat</code>, which more accurately detects numerals</p>",
        "id": 181067039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574119356
    }
]