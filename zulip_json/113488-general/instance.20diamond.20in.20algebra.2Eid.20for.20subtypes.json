[
    {
        "content": "<p>We can add a stupid <code>id_explode</code> field to every ring which sends <code>x</code> to <code>{foo := x.foo}</code></p>",
        "id": 273416277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984278
    },
    {
        "content": "<p>And then change <code>algebra.id</code> to use that</p>",
        "id": 273416284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645984293
    },
    {
        "content": "<p>Is this the same kind of issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.local_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.valuation.integers</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"bp\">Γ₀</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_unit_iff_valuation_one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">v.integer</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">valuation.integers.one_of_is_unit</span> <span class=\"o\">(</span><span class=\"n\">valuation.integer.integers</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">valuation.integers.is_unit_of_one</span> <span class=\"n\">K</span> <span class=\"bp\">Γ₀</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">v.integer</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">valuation.integer.integers</span> <span class=\"n\">v</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_unit_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">function.injective.ne_iff</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">),</span> <span class=\"c1\">--here</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273531884,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1646072289
    },
    {
        "content": "<p>The rewrite is failing because Lean can't even make the term you want to rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_unit_iff_valuation_one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">v.integer</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.ne_iff</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  algebra_map ?m_1 ?m_2</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @ring_hom ?m_1 ?m_2 (@semiring.to_non_assoc_semiring ?m_1 (@comm_semiring.to_semiring ?m_1 ?m_3))</span>\n<span class=\"cm\">    (@semiring.to_non_assoc_semiring ?m_2 ?m_4) : Type (max ? ?)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @ring_hom ?m_1 ?m_2 (@semiring.to_non_assoc_semiring ?m_1 (@ring.to_semiring ?m_1 (@division_ring.to_ring ?m_1 ?m_3)))</span>\n<span class=\"cm\">    (@semiring.to_non_assoc_semiring ?m_2 ?m_4) : Type (max ? ?)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 273543409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646077568
    },
    {
        "content": "<p>oh wait -- this rewrite is failing because <code>ring_hom.injective</code> needs that the source is a field, and your source is <code>↥(v.integer)</code></p>",
        "id": 273544948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646078281
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 273562994,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1646086904
    }
]