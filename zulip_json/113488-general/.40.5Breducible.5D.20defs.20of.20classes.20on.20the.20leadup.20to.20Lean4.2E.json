[
    {
        "content": "<p>Currently, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_artinian_ring\">docs#is_artinian_ring</a> is defined to be a structure containing only <code>is_artinian R R</code>. This is as it should be for Lean4, because only structures can be be classes; however, this means that any <code>instance</code>s of <code>is_artinian</code> don't automatically apply to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_artinian_ring\">docs#is_artinian_ring</a>. (came up <a href=\"https://github.com/leanprover-community/mathlib/pull/15736#discussion_r938493553\">here</a>). <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> pointed out that there is still <code>@[reducible] def</code>s representing instances, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional\">docs#finite_dimensional</a>. What should we standardize on for now? Could we make <code>mathport</code> automatically port these sorts of things into one-item structures and creating the loop instance that lean4 allows?</p>",
        "id": 292136011,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659696027
    },
    {
        "content": "<p>Should we just have <code>is_artinian_ring</code> as an abbreviation?</p>",
        "id": 292136665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659696430
    },
    {
        "content": "<p>does that also work? we'd need to do the same to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_noetherian_ring\">docs#is_noetherian_ring</a> but that's totally ok tbh</p>",
        "id": 292138407,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659697666
    },
    {
        "content": "<p>I'm pretty sure <code>abbreviation</code> is the same as <code>@[reducible] def</code> (that is, the extra <code>inline</code> attribute implied by the former makes no difference to typeclass search)</p>",
        "id": 292143086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659700542
    },
    {
        "content": "<p>Maybe that's changed in Lean4</p>",
        "id": 292143106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659700560
    },
    {
        "content": "<p>there seems to be some <code>class abbrev</code> thing: <a href=\"https://github.com/leanprover/lean4/blob/fdaae20594109e62aa21a1dde0f3cf864a987f47/src/Init/NotationExtra.lean#L251\">https://github.com/leanprover/lean4/blob/fdaae20594109e62aa21a1dde0f3cf864a987f47/src/Init/NotationExtra.lean#L251</a></p>",
        "id": 292146133,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659702241
    },
    {
        "content": "<p>which as far as I can see is a drop in replacement for <code>abbreviation</code> in the case of classes</p>",
        "id": 292146277,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659702298
    },
    {
        "content": "<p>Did Lean 3 require the <code>@[class]</code> on <code>abbrev</code> of a class? Lean 4 should not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Foo</span>  <span class=\"c1\">-- instBar</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Bar</span>  <span class=\"c1\">-- instBar</span>\n</code></pre></div>",
        "id": 292146966,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659702679
    },
    {
        "content": "<p>this works as is in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>  <span class=\"c1\">-- instBar : Bar</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span>  <span class=\"c1\">-- instBar : Bar</span>\n</code></pre></div>",
        "id": 292147356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659702897
    },
    {
        "content": "<p>in this case, should we refactor all classes that are currently done this way to just be <code>abbreviation</code>s? Those two are the only ones I know right now, but there's likely others.</p>",
        "id": 292148019,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659703303
    },
    {
        "content": "<p>I find <code>abbreviation</code> to be more annoying than <code>@[reducible] def</code> or even <code>@[reducible, inline] def</code>, because only the latter two generate equation lemmas</p>",
        "id": 292160315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659709258
    },
    {
        "content": "<p>(which matters for <code>rw</code> or for showing the meaning in the docs)</p>",
        "id": 292160373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659709290
    },
    {
        "content": "<p>when my current PR gets merged I'll do these changes (I cba with dependent PRs). If anyone knows any other typeclasses with similar design please let me know. I'll go for <code>reducible def</code> and can maybe leave a specific comment in case this helps mathport.</p>",
        "id": 292161356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659709597
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15989\">#15989</a></p>",
        "id": 292831382,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660164857
    }
]