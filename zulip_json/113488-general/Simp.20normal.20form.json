[
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib/issues/2017\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2017\">#2017</a> stop <code>simp</code>putting things in simp normal form? Is that not what simp is supposed to do?</p>",
        "id": 188789310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582332747
    },
    {
        "content": "<p>I think maybe it should say right hand side.</p>",
        "id": 188789337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1582332790
    },
    {
        "content": "<p>I've just read some of the discussion and it actually seems like quite a subtle issue</p>",
        "id": 188789525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582333058
    },
    {
        "content": "<p>No, it stops users from creating unusable simp lemmas. If lhs of a lemma gets simplified to some other form before simp tries to apply this lemma, then simp will never rewrite on this lemma.</p>",
        "id": 188826159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582393159
    },
    {
        "content": "<p>I would naively say that if a goal is not in simp normal form because something is expressed in a non canonical manner then the only simp lemma in the entire library which mentions that noncanonical form will be the one turning it into the canonical form</p>",
        "id": 188828796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582397665
    },
    {
        "content": "<p>So no other simp lemma will change it. But this doesn't seem to be what people wiser than me are saying in the discussion</p>",
        "id": 188828808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582397703
    },
    {
        "content": "<p>The question is not about the current goal.  The simplifier simplifies terms inside-out, that is, it first simplifies the arguments of a function before simplifying the function.  Hence a simp lemma is only ever used to rewrite terms where the arguments are already fully simplified (= in simp-normal form).  Corollary: if the left-hand side of your simp lemma has an argument that is not fully simplified, then this simp lemma is never used to rewrite a term by the simplifier and is hence useless.</p>",
        "id": 188829903,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582399648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What's being discussed is maybe best illustrated with an example. Both you and me would think that for the prime spectrum of a ring</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">zero_locus_bot</span> <span class=\"o\">:</span> <span class=\"n\">zero_locus</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>is a very good simp-lemma. But there is a catch:<code>zero_locus</code> expects a subset, so the ideal is coerced to a set. So in fact, the lemma is saying: <code>zero_locus \\u\\bot = univ</code>, with a little up-arrow.</p>\n<p>Now suppose that <code>zero_locus \\u\\bot</code> occurs in your goal, and you call <code>simp</code>. Then the simplifier starts doing its little tricks, and one of the first things it realises is that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">coe_bot</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"err\">\\</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>is a wonderful simp-lemma that applies to this goal. So it applies it.<br>\nThe goal now contains <code>zero_locus {0}</code> and hence the simp-lemma <code>zero_locus_bot</code> will never trigger.<br>\n<del>I guess that this could be fixed by carefully applying priorities.</del> But another way to fix it is to make sure that the LHS of a simp-lemma can't be further simplified, aka, is in simp normal form.</p>",
        "id": 188829906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582399657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Please correct me if I just wrote a bunch of nonsense.</p>",
        "id": 188829965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582399740
    },
    {
        "content": "<p>Everything you say is correct, except for:</p>\n<blockquote>\n<p>I guess that this could be fixed by carefully applying priorities.</p>\n</blockquote>\n<p>This cannot be fixed using priorities since the simplifier works inside-out (= innermost first = arguments first).  It never tries to rewrite the term <code>zero_locus ↑⊥</code>, the first time it comes to a term of the form <code>zero_locus _</code> it is already rewritten to <code>zero_locus {0}</code>.</p>",
        "id": 188830038,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582399894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> But whether something is in simp-normal-form may depend on the imported files, right?</p>",
        "id": 188830319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582400464
    },
    {
        "content": "<p>Precisely.</p>",
        "id": 188830328,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582400489
    },
    {
        "content": "<p>So I can maneuver myself into a situation where some simp-lemmas are still useless, even thought they look potentially useful.</p>",
        "id": 188830384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582400600
    },
    {
        "content": "<p>I saw one example recently where a simp lemma I thought should fire didn't, it seems like the same problem but it looks like it wasn't changed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2017\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2017\">#2017</a>, can anyone explain:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>should work as <code>set.ne_empty_iff_nonempty</code> is a simp lemma, but we have to do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>instead as simp first changes <code>s ≠ ∅</code> to <code>⊢ ¬s = ∅</code>.</p>",
        "id": 188834788,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582408481
    },
    {
        "content": "<p>The current <code>simp_nf</code> linter only checks that the <em>arguments</em> are in simp-normal form.  I've had some performance troubles with checking that the whole lhs is in normal form (see recent PR about looping simp lemmas). (In your examples, the arguments are <code>s</code> and <code>\\emptyset</code> and they are in nf.)  This will soon come together with a linter that checks for redundant simp lemmas.</p>",
        "id": 188835719,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582410287
    },
    {
        "content": "<p>Ah okay that makes sense, thanks!</p>",
        "id": 188835728,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582410332
    },
    {
        "content": "<p>One simplification you can do to the check is to first find all terms that are never part of simp normal form because there is a simp lemma that rewrites them away (for example, <code>sub</code> and <code>ne</code>) and then check that a simp lhs never contains these symbols</p>",
        "id": 188837012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582412719
    },
    {
        "content": "<p>Either that or unsimp the lemma which rewrites them away...</p>",
        "id": 188837876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582414436
    },
    {
        "content": "<p>There's a <code>simp_nf</code> linter complaint in <a href=\"https://github.com/leanprover-community/mathlib/issues/5324\">#5324</a> and I'm not sure how best to address it.</p>\n<p><code>data.equiv.basic</code> currently has:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">symm_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.symm.symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The PR adds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">symm_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.symm.symm</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and this is needed for <code>dsimp</code> purposes.</p>\n<p>Changing the priority / ordering of these two lemmas in the file doesn't seem to silence the linter, but removing <code>@[simp]</code> from <code>symm_symm</code> does. Is that an OK solution?</p>",
        "id": 219659256,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607719244
    },
    {
        "content": "<p>Removing <code>symm_symm</code> might means terms like <code>equiv.arrow_congr e.symm.symm</code> don't get simplified any more</p>",
        "id": 219659350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719303
    },
    {
        "content": "<p>I've seen a lot of places where <code>equiv</code>s are unapplied, and it would be a shame for those not to be simplified.</p>",
        "id": 219659435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719338
    },
    {
        "content": "<p>The reason changing the priority has no effect is that simplification goes from the inside out</p>",
        "id": 219659678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719464
    },
    {
        "content": "<p>And the former is a subexpression of the latter</p>",
        "id": 219659699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719473
    },
    {
        "content": "<p>I guess the linter complains about <code>symm_symm_apply</code>?</p>",
        "id": 219659837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719546
    },
    {
        "content": "<p>It sounds to me like the linter is wrong because of this simp vs. dsimp thing</p>",
        "id": 219659906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719565
    },
    {
        "content": "<p>Should we have a <code>dsimp</code> attribute that aliases <code>simp</code> but is ignored by the linter?</p>",
        "id": 219660000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719621
    },
    {
        "content": "<p>I tried <code>@[_refl_lemma] theorem symm_symm_apply</code> but <code>dsimp</code> doesn't find it</p>",
        "id": 219660054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607719657
    },
    {
        "content": "<p>So for now should we just <code>nolint simp_nf</code>?</p>",
        "id": 219660081,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607719679
    },
    {
        "content": "<p>Actually the linter could see that <code>symm_symm_apply</code> is a refl lemma... and maybe only consider other refl lemmas when checking it for simp normal form?</p>",
        "id": 219660175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607719709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, what's the advantage of having this as a dsimp lemma; or in general, in using <code>dsimp</code> over <code>simp</code>? I don't really understand what dsimp is useful for yet.</p>",
        "id": 219669484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607725043
    },
    {
        "content": "<p>I personally use <code>dsimp</code> when I want to figure out what the heck the goal is so I can proceed, and then once I know which lemma to apply next I just delete the dsimp.</p>",
        "id": 219669930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607725435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What is the \"simp vs. dsimp thing\"?</p>",
        "id": 219678772,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607733062
    },
    {
        "content": "<p><code>symm_symm_apply</code> is not in simp normal form, but it is in \"dsimp normal form\"</p>",
        "id": 219678811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607733110
    },
    {
        "content": "<p>Oh, I see. <code>symm_symm</code> cannot be proven by reflexivity.</p>\n<p>I think adding a <code>nolint</code> is a good solution for now. If it comes up frequently we can consider adding a new attribute.</p>",
        "id": 219678922,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607733198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>dsimp</code> can be useful if you don't want to change the goal too much: it guarantees that the resulting goal is definitionally equal to the original goal.<br>\nSometimes the fact that <code>dsimp</code> only uses definitional rewriting means that it can rewrite in a place that would lead to a type-incorrect goal otherwise.<br>\nFor example, compare the resulting goal when using <code>simp</code> versus <code>dsimp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">v</span><span class=\"o\">,</span>  <span class=\"o\">}</span>\n</code></pre></div>\n<p>Note that <code>simp</code> creates a <em>new</em> local constant <code>v</code> and the goal talks about the <em>old</em> constant <code>v</code> (because if the type of the new <code>v</code> was actually different than of the original <code>v</code>, then the goal would be type incorrect). Here <code>dsimp</code> does what you want, while <code>simp</code> doesn't.</p>",
        "id": 219679729,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1607734054
    }
]