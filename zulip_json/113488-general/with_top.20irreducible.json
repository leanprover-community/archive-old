[
    {
        "content": "<p>Should we make <code>with_top</code> and <code>with_bot</code> irreducible as Yury suggested on <a href=\"https://github.com/leanprover-community/mathlib/issues/4273\">#4273</a>?</p>",
        "id": 260539316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636236861
    },
    {
        "content": "<p>It breaks a lot of stuff. E.g., some instances on <code>with_top</code>/<code>with_bot</code> are defined in terms of the instances on the other type.</p>",
        "id": 260539422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636237036
    },
    {
        "content": "<p>And once Lean fails to see through this, quite a few proofs fail.</p>",
        "id": 260539435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636237064
    },
    {
        "content": "<p>Yeah, that's what I thought. Also, isn't there something with <code>order_dual</code> somehow swapping <code>with_top</code> and <code>with_bot</code>?</p>",
        "id": 260539571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636237273
    },
    {
        "content": "<p>Yes, and this breaks with <code>@[irreducible]</code> too.</p>",
        "id": 260539842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636237649
    },
    {
        "content": "<p>I really like the idea. I think that leaky proofs (when you have <code>a : with_top X</code> and then all of a sudden in the goal you see <code>a : option X</code>) cause confusion to undergraduates (and to me, when I was a beginner). They leak because sometimes the proof of <code>with_top.foo</code> is just <code>option.foo</code> and then Lean gets confused with the types. It's annoying not being able to apply some lemma about top because all of a sudden the term has become <code>none</code> somewhere along the line. The objection the other way is that this can cause code duplication -- these are somehow the same people who would rather <code>with_top.foo</code> simply didn't exist at all because \"we have it already, it's just <code>option.foo</code>\". We like type theory because we like that things keep their types!</p>",
        "id": 260539849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636237665
    },
    {
        "content": "<p>We can replace <code>order_dual</code> proofs with a <code>to_additive</code>-style machinery but this would be a huge refactor.</p>",
        "id": 260539913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636237737
    },
    {
        "content": "<p>(and we need <code>order_dual</code> anyway)</p>",
        "id": 260539924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636237750
    },
    {
        "content": "<p>I've myself suffered from this leaky implementation and I must say it's pretty annoying. Can't we make <code>with_top</code> and <code>with_bot</code> irreducible globally but rducible during API building?</p>",
        "id": 260540097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636237978
    },
    {
        "content": "<p>Sounds like the best of both worlds, unless someone has been wrongly peeking in the API.</p>",
        "id": 260540117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636238042
    },
    {
        "content": "<p>Irreducible stuff went out of fashion because of Lean 4.</p>",
        "id": 260540162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636238082
    },
    {
        "content": "<p>We're meant to use structures instead.</p>",
        "id": 260540166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636238100
    },
    {
        "content": "<p>Oh! So then is the proposal to make <code>with_top</code> a structure instead?</p>",
        "id": 260540172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238105
    },
    {
        "content": "<p>Heh :-)</p>",
        "id": 260540176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238112
    },
    {
        "content": "<p>Uh?</p>",
        "id": 260540180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636238117
    },
    {
        "content": "<p>So then this will mean masses of code duplication!</p>",
        "id": 260540181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238123
    },
    {
        "content": "<p>Does that mean we have to define <code>option</code> five times or so?</p>",
        "id": 260540187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636238134
    },
    {
        "content": "<p>oh wait</p>",
        "id": 260540190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238142
    },
    {
        "content": "<p>I mean \"an inductive type\"</p>",
        "id": 260540194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238148
    },
    {
        "content": "<p>yes, I think so Yael, unless we want to define <code>with_top X</code> as a structure with one field of type <code>option X</code></p>",
        "id": 260540263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238236
    },
    {
        "content": "<p>I think <code>continuous</code> was made into a structure because people had problems with it unfolding to \"forall open U, ...\" or something? (I don't know the details -- what I do know is that <code>continuous f</code> is definitely not defeq to <code>forall U,...</code>, you have to rewrite <code>continuous_def</code></p>",
        "id": 260540320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238316
    },
    {
        "content": "<p>This might not be the same reason, but having things made \"irreducible\" by wrapping them in a structure seemed to work well for <code>continuous</code></p>",
        "id": 260540335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238363
    },
    {
        "content": "<p>Maybe defining <code>with_top X</code> as a structure with one field of type <code>option X</code> gives us the possibility of an algorithmic way of pulling definitions over a la <code>to_additive</code>, like maybe <code>with_top.bind</code> can be auto-defined using <code>option.bind</code>?</p>",
        "id": 260540419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238493
    },
    {
        "content": "<p>I guess defining it in exactly the same way as <code>option</code> gives us the option of actually modifying <code>to_additive</code> so that it pulls definitions over. It could change <code>none</code> to <code>top</code> etc</p>",
        "id": 260540478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238560
    },
    {
        "content": "<p>When I started with Lean, one of the things about it that I thought was really stupid was that they had defined additive groups and multiplicative groups as two different things. Later on as I began to understand that mathematicians used addition and multiplication in genuinely different ways, I realised that actually it was a great idea. Distributivity was somehow key -- it is the way addition and multiplication were related, it is the asymmetric thing that distinguishes between them when both are present. Heterogeneous distributivity is a multiplicative object acting on an additive object, e.g. \"a group acting on an abelian group\" as we mathematicians say, knowing full well (but never explaining) that we mean \"a group with group law <code>*</code> acting on a group with group law <code>+</code>\". Heterogeneous associativity is <code>is_scalar_tower</code> by the way. The fact that Leo explicitly decided to make two definitions not one caused (presumably) the development of <code>to_additive</code> and I wonder how much more we can use this tool. It seems to me to be a very similar situation -- mathematicians use the <code>bot</code> in <code>with_bot</code> in different, but similar, situations to the <code>zero</code> in <code>with_zero</code>, so maybe this approach would solve both code duplication problems and reducibility problems?</p>",
        "id": 260540697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636238959
    },
    {
        "content": "<p>Making <code>with_top</code> a structure is quite a different thing to making <code>order_dual</code> a structure. If we made the latter a structure, we'd lose <code>X = order_dual (order_dual X)</code> (it would be unprovable), and more importantly <code>to_dual (of_dual x) = x</code> stops being refl. This second point is like the \"we should make <code>set</code> a structure\" discussion; unless lean gains some eta-reduction rules for one-field structures (which I think doesn't impact soundness?), it makes a lot of things more awkward.</p>",
        "id": 260541268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636239764
    },
    {
        "content": "<p>So what are the plans for <code>order_dual</code> in Lean 4?</p>",
        "id": 260565423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636279640
    },
    {
        "content": "<blockquote>\n<p>This second point is like the \"we should make set a structure\" discussion; unless lean gains some eta-reduction rules for one-field structures (which I think doesn't impact soundness?), it makes a lot of things more awkward.</p>\n</blockquote>\n<p>To expand on this.  What we'd lose is the definitional equality <code>s = { x | x ∈ s }</code>.  Adding this kind of eta for structures would not impact soundness afaict, but it is a kernel change which makes it hard to sell to Leo.</p>\n<p>Practically speaking, it is not <em>that</em> awkward.  I got pretty far with this refactoring: <a href=\"https://github.com/leanprover-community/mathlib/commit/76451e89d6cbf0a145525555f1db1778285d9269\">https://github.com/leanprover-community/mathlib/commit/76451e89d6cbf0a145525555f1db1778285d9269</a>  It was harder to get rid of the <code>inductive : X -&gt; set Y</code>.</p>",
        "id": 260636525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636366034
    },
    {
        "content": "<p>Is Leo aware that we would be interested in such a change?</p>",
        "id": 260639121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636367453
    },
    {
        "content": "<p>I guess such a kennel change wouldn't help with the <code>inductive</code> problem you describe anyway though.</p>",
        "id": 260639230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636367511
    },
    {
        "content": "<p>I have mentioned it to him before in the context of <code>opposite</code> in category theory--I'm still not sure what our plan is there either</p>",
        "id": 260649871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636374464
    },
    {
        "content": "<p>It would be good to at least have an issue for it in the lean4 repo and collect use cases, references to existing implementations etc. there</p>",
        "id": 260679477,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636388107
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/777\">https://github.com/leanprover/lean4/issues/777</a></p>",
        "id": 260781950,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636455866
    },
    {
        "content": "<p>At the risk of completely derailing this discussion, it would also be cool to have eta for decidable instances.  That is, make it so that <code>example (a b : Decidable p) := rfl</code>.  We have quite a bit of ugly library design in mathlib to work around decidability diamonds (i.e., if you have a theorem about classical.decidable you can't use it prove something about a computable instance).  See e.g. the noncomputable polynomials issue.</p>",
        "id": 260782489,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636456230
    },
    {
        "content": "<p>I assume by <code>op (op x) = x</code> in that message you meant <code>op (unop x) = x</code>? The former makes the stronger claim that <code>opposite (opposite X) = X</code> where <code>x : X</code> (edit: fixed, thanks!)</p>",
        "id": 260782733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636456400
    },
    {
        "content": "<p>Maybe worth noting that we only really seem to need eta for structures with a single field--I sometimes think about inductives/structures as Haskell <code>data</code> and single-field structures with eta as Haskell <code>newtype</code></p>",
        "id": 260785835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636458241
    },
    {
        "content": "<p>In the linked issue <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> mentions <code>e.symm.symm = e</code> which has two data fields, but I agree we care about that less</p>",
        "id": 260786017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636458352
    },
    {
        "content": "<p>didn't eta for two fields come up with the <code>splitting_field</code> unsolvable diamond?</p>",
        "id": 260786076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636458368
    },
    {
        "content": "<p>(xref <a href=\"https://github.com/leanprover-community/mathlib/issues/10220\">#10220</a>)</p>",
        "id": 260786212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636458456
    },
    {
        "content": "<p>Actually I don't think that's an eta problem</p>",
        "id": 260786333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636458540
    },
    {
        "content": "<p>I'm very confused without context especially because the comment says something \"should\" be an instance but isn't, but in fact it is an <code>instance</code>. But I think we already pretty much take into account the possibility that entire class records might get eta expanded in random places.</p>",
        "id": 260786459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636458613
    },
    {
        "content": "<p>It tends not to matter <em>too</em> much because ultimately the use of a class record is to project a field out of it (even if this might require unfolding some definitions to see, so there could be a performance issue)</p>",
        "id": 260786596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636458716
    },
    {
        "content": "<p>I think this came up in the context of investigating that other extremely confusing bug (hopefully Eric can remember/guess which one I mean)</p>",
        "id": 260786735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636458795
    },
    {
        "content": "<p>The bug about the tensor algebra ring where an <code>irreducible</code> made two proof fields non-defeq?</p>",
        "id": 260786934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636458956
    },
    {
        "content": "<p>The kind of eta expansion I have in mind is if <code>bar</code> extends <code>foo</code> and you have something like <code>def x [h : foo T] : bar T := { ..., .. h }</code> and then <code>x.to_foo</code> isn't defeq to <code>h</code>, because it is an eta expanded version</p>",
        "id": 260787017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636458994
    },
    {
        "content": "<p>Right, which typeclass search seems to know how to perform somehow</p>",
        "id": 260787052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636459029
    },
    {
        "content": "<p>Hmm I was then mostly thinking about examples like if <code>foo = group</code> and I define the center of a group, the result will be defeq whether I used <code>h</code> or <code>x.to_foo</code> because <code>h.mul</code> and <code>x.to_foo.mul</code> are defeq... but I guess there's also the situation where you have a \"mix-in\" class that takes <code>[group T]</code> as a parameter, and then there should be an issue...</p>",
        "id": 260787633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636459380
    },
    {
        "content": "<p>The other reason why this isn't a big deal in practice is that once <code>h</code> becomes a specific instance (rather than a variable) it will usually be a constructor applied to something, and then <code>h</code> and <code>x.to_foo</code> will be defeq</p>",
        "id": 260787727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636459439
    },
    {
        "content": "<p>Maybe that was the reason we got rid of <code>module</code> / <code>semimodule</code></p>",
        "id": 260787788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636459453
    },
    {
        "content": "<p>Logically it seems like eta for structures with more than one field should be an issue for things like the product of two categories or a slice category... anyone encountered this?</p>",
        "id": 260790281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636460943
    },
    {
        "content": "<p>What do you mean with \"should be an issue\"?</p>",
        "id": 260796688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636464384
    },
    {
        "content": "<p>If we had eta for structures with more than one field, then <code>(C^op)^op</code> would have a category defeq to <code>C</code>. That would be cool.</p>",
        "id": 260796736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636464425
    },
    {
        "content": "<p>I would have to try it again to see exactly what goes wrong but if you try to make <code>opposite</code> a structure, things get awkward for the opposite category pretty quickly</p>",
        "id": 260797934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636465077
    },
    {
        "content": "<p>Would it even be possible to have <code>op (op G)</code> definitionally equal to <code>G</code>?</p>",
        "id": 260803354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636467473
    },
    {
        "content": "<p>I mean for monoids/groups, not just for categories like Johan asked.</p>",
        "id": 260805269,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636468352
    },
    {
        "content": "<p>It already is true that <code>G = (Gᵒᵖ)ᵒᵖ</code> I think</p>",
        "id": 260816289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636472651
    },
    {
        "content": "<p>I assume you are talking about the types themselves. If <code>opposite</code> is implemented as a one-field structure then <code>opposite (opposite G)</code> will be definitionally different from <code>G</code>, just like <code>opposite G</code> will be.</p>",
        "id": 260837675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636481891
    },
    {
        "content": "<p>I believe I want both of the following to work -- currently the failure of the first means the second doesn't even typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 260845241,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636484788
    },
    {
        "content": "<p>Both are true in the presence of <code>local attribute [semireducible] opposite</code> I think</p>",
        "id": 260847470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636485666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">opposite</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">_i</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">opposite.group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite.group</span> <span class=\"n\">G</span> <span class=\"n\">_i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 260848162,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636485988
    },
    {
        "content": "<p>Ah yep, that's because we have no <code>rdiv</code> field</p>",
        "id": 260849360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636486579
    },
    {
        "content": "<p>This demonstrates why they mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">_i</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">opposite.group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite.group</span> <span class=\"n\">G</span> <span class=\"n\">_i</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">_i</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">opposite.group</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_projs</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">div</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- this is not defeq, we need to apply `div_eq_mul_inv`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260849394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636486599
    },
    {
        "content": "<p>No, it's because we don't have eta for structures!</p>",
        "id": 260849445,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636486628
    },
    {
        "content": "<p>Oh good point, It's both</p>",
        "id": 260849488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636486653
    },
    {
        "content": "<p>Yes, so for a more minimal example I should change <code>group</code> everywhere to <code>has_mul</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">opposite</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">_i</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">opposite.has_mul</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">opposite.has_mul</span> <span class=\"n\">G</span> <span class=\"n\">_i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 260865600,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636493971
    },
    {
        "content": "<p>I guess, you'll have better luck with <code>has_mul.mul</code>.</p>",
        "id": 260992812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636552996
    },
    {
        "content": "<p>Why <code>mul_equiv</code> is not good enough?</p>",
        "id": 260992840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636553018
    }
]