[
    {
        "content": "<p>I just upgrade mathlib and this lemma of mine is now broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>There's a red squiggly line under has_involutive_inv and the error says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">has_involutive_inv</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_involutive_inv</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't understand what to make of this.</p>",
        "id": 284033732,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653585382
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 284033767,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653585402
    },
    {
        "content": "<p>Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.extra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.extra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.pointwise</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 284034084,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653585561
    },
    {
        "content": "<p><code>_root_.has_involutive_inv</code></p>",
        "id": 284034228,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653585645
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">_root_.has_involutive_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 284034229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653585646
    },
    {
        "content": "<p>It's a namespace issue</p>",
        "id": 284034241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653585659
    },
    {
        "content": "<p>What's this _root_ business?</p>",
        "id": 284034259,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653585669
    },
    {
        "content": "<p>seems someone added <code>filter.has_involutive_inv</code> so it prioritises it... I think in these sorts of cases the instances should be named differently to avoid clashes</p>",
        "id": 284034278,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653585684
    },
    {
        "content": "<p><code>_root_</code> means go to the root namespace</p>",
        "id": 284034286,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653585690
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_involutive_inv\">docs#filter.has_involutive_inv</a></p>",
        "id": 284034302,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653585701
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.pointwise</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">filter.has_involutive_inv</span>\n<span class=\"k\">#check</span> <span class=\"n\">has_involutive_inv</span>\n</code></pre></div>",
        "id": 284034371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653585728
    },
    {
        "content": "<p>I don't get it. What is the root namespace. I'm inside the filter namespace.</p>",
        "id": 284034496,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653585800
    },
    {
        "content": "<p>The root namespace contains the stuff that was not defined inside of some namespace</p>",
        "id": 284034693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653585900
    },
    {
        "content": "<p><code>_root_.foo</code> means <code>foo</code> with nothing before, so not <code>bar.foo</code>. If you have <code>open bar</code> and both <code>foo</code> and <code>bar.foo</code> exist Lean gets confused.</p>",
        "id": 284034870,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653585991
    },
    {
        "content": "<p>Ah, I get it. Hmm... but filter.has_involutive_inv belongs to the filter namespace, not the _root_ namespace.</p>",
        "id": 284034948,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586049
    },
    {
        "content": "<p>you want to say that you want an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_involutive_inv\">docs#has_involutive_inv</a>. However, the way Lean resolves names, as you have the filter namespace open, it'll prefer the term <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_involutive_inv\">docs#filter.has_involutive_inv</a> for the literal text <code>has_involutive_inv</code>, at which point it gets confused as it's not a function that takes a <code>Type*</code></p>",
        "id": 284035100,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586117
    },
    {
        "content": "<p>I see... I guess this is new behavior because it was working before.</p>",
        "id": 284035310,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586209
    },
    {
        "content": "<p>the instance is new, the behaviour is old</p>",
        "id": 284035490,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586308
    },
    {
        "content": "<p>Oh right. So updating mathlib brought in the new instance. Hmm... but I'm pretty sure that instance was already there though in some form.</p>",
        "id": 284035678,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586393
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--lemma test.decidable_eq : 123 = 123 := rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 284035704,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/error.20after.20upgrade/near/284035678\">said</a>:</p>\n<blockquote>\n<p>Oh right. So updating mathlib brought in the new instance. Hmm... but I'm pretty sure that instance was already there though in some form.</p>\n</blockquote>\n<p>afaik, Yael added it fairly recently</p>",
        "id": 284035734,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586422
    },
    {
        "content": "<p>Alright. I learned something new today. Thanks for the help.</p>",
        "id": 284035970,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586535
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14398\">#14398</a> should fix this. are <code>instance</code>s protected by default?</p>",
        "id": 284036205,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> yes I think they are</p>",
        "id": 284036373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653586702
    },
    {
        "content": "<p>well, at least if they are declared as <code>instance ...</code></p>",
        "id": 284036433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653586737
    },
    {
        "content": "<p>I'm confused about something. filter.has_involutive_inv is not defined as an instance. It's just a regular def.</p>",
        "id": 284036504,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586771
    },
    {
        "content": "<p><code>open_locale filter</code> makes it an instance.</p>",
        "id": 284036552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586794
    },
    {
        "content": "<p>but only with the attribute, so it's not <code>protected</code></p>",
        "id": 284036620,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653586807
    },
    {
        "content": "<p>Aha. OK</p>",
        "id": 284036652,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586825
    },
    {
        "content": "<p>I wonder why Yael did it this way. I find it confusing.</p>",
        "id": 284036834,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1653586907
    },
    {
        "content": "<p>Whoops, my bad. I forgot to protect the instances I localised</p>",
        "id": 284043059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653589805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, can you check <a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a> and <a href=\"https://tqft.net/mathlib/data/finset/pointwise\">file#data/finset/pointwise</a> as well?</p>",
        "id": 284043200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653589890
    },
    {
        "content": "<p>I'll have a look in a couple hours</p>",
        "id": 284043316,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653589930
    },
    {
        "content": "<p>all of the rest seem fine!</p>",
        "id": 284078129,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653610948
    }
]