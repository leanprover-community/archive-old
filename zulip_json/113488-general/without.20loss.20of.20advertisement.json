[
    {
        "content": "<p>Let me share my joy of using <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> recent contributions (not yet merged, see <a href=\"https://github.com/PatrickMassot/mathlib/tree/wlog_ext\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/tree/wlog_ext\">https://github.com/PatrickMassot/mathlib/tree/wlog_ext</a> for a version including both relevant PR if you want to play with it).</p>\n<p>I defined homeomorphisms between topological spaces <code>X</code> and <code>Y</code>, and the support of a homeomorphism <code>f</code> from <code>X</code> to itself (if you don't know what this means, think <code>homeo X X</code> coerces to invertible functions from <code>X</code> to <code>X</code> and <code>supp f</code> is the set of <code>x</code> in <code>X</code> such that <code>f x ≠ x</code>, that's good enough approximation). I want to prove the trivial yet important fact that two homeos with disjoint support commute. I already had various proofs of that, some versions written with the help of Mario. But I'd like to show what the latest version looks like. So statement is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 125491146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311192
    },
    {
        "content": "<p>First consider the pen and paper proof: We need to prove f (g x) = g (f x) for all x in X. If x is neither in supp f nor in supp g then it's obvious, so let's discard this case. WLOG x is in supp f since everything is obviously symmetric in f and g. By H, x is not in supp g. Also the support of f is stable under f (because its complement the fixed points set is obviously stable). So f x is also not in supp g. So g x = x and g (f x) = f x and we are done.</p>",
        "id": 125491159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311225
    },
    {
        "content": "<p>Simon's work help with the first and third sentences. First \"We need to prove f (g x) = g (f x) for all x in X\". But actually <code>homeo X X</code> is not quite <code>X → X</code> so we can't do <code>funext x</code>. We only need a extensionality lemma for homeos, and tag it with the <code>[extensionality]</code> attribute to later write <code>ext x</code> in place of <code>funext x</code>. Same would work for sets etc. </p>\n<p>Now the third sentence is much more spectacular: \"WLOG x is in supp f since everything is obviously symmetric in f and g\". I still cannot write this without sweating and thinking: Oh my god, Lean will disagree it's obvious. Simon's tactic turns this into: <code>wlog h : x ∈ supp f using f g</code>. Period. No disagrement. <span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 125491165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311280
    },
    {
        "content": "<p>Here is what it looks like. Notice also liberal use of the finish tactic.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fundamental&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Here we assume H&#39; : x ∈ supp f ∨ x ∈ supp g</span>\n    <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_not_supp_g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subset_compl_iff_disjoint</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">f_x_supp_f</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">stable_support</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subset_compl_iff_disjoint</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">f_x_supp_f</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">fix_of_not_in_supp</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Now we assume H&#39; : ¬(x ∈ supp f ∨ x ∈ supp g)</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span> <span class=\"n\">at</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">fix_of_not_in_supp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125491204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311306
    },
    {
        "content": "<p>And a <code>calc</code> version for good measure.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fundamental&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Here we assume H&#39; : x ∈ supp f ∨ x ∈ supp g</span>\n    <span class=\"n\">wlog</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">x_not_supp_g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subset_compl_iff_disjoint</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                               <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">fix_of_not_in_supp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">f_x_supp_f</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                               <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                                 <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">stable_support</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n                               <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subset_compl_iff_disjoint</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">f_x_supp_f</span><span class=\"o\">,</span>\n                               <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">fix_of_not_in_supp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Now we assume H&#39; : ¬(x ∈ supp f ∨ x ∈ supp g)</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span> <span class=\"n\">at</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">fix_of_not_in_supp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125491205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311327
    },
    {
        "content": "<p>Term mode people will have a really hard time converting me.</p>",
        "id": 125491206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524311339
    },
    {
        "content": "<p>What a nice homage! Thank you! I'm so happy that you like those tools :)</p>",
        "id": 125491435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524312000
    },
    {
        "content": "<p>let's see how long we'll need to wait before they merge the PR</p>",
        "id": 125491663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524312562
    },
    {
        "content": "<blockquote>\n<p>What a nice homage! Thank you! I'm so happy that you like those tools :)</p>\n</blockquote>\n<p>I'm not only the annoying user who can't code anything by himself, and keep reminding you to work on these tactics (and write tactic writing tutorials covering <code>pi_instance</code> and <code>wlog</code>). I also love using them, and documenting things.</p>",
        "id": 125491898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524313154
    },
    {
        "content": "<p>And I think the community is currently working really well. It seems to me we recently went from the pretty horrible situation where the main dev felt harassed by frustrated users to a pretty nice situation. Leo and Sebastian are peacefully working on Lean 4 while everybody else finds some place in the Lean 3 world. Clearly we don't want Leo to spend time writing tactics like <code>wlog</code>. We want power users like Mario, you, Scott... to write these. And then we have dumb users like me who can come up with examples finding bugs, suggests new tactics, write documentation... And everybody has fun, I think. And it seems Lean 4 will expose even more to Lean without touching C++ code or even PRing the main repo, so we are clearly going in the right direction.</p>",
        "id": 125492035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524313464
    },
    {
        "content": "<blockquote>\n<p>let's see how long we'll need to wait before they merge the PR</p>\n</blockquote>\n<p>Ok, we still have some frustration...</p>",
        "id": 125492037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524313500
    },
    {
        "content": "<p>But I'm optimistic anyway.</p>",
        "id": 125492044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524313528
    },
    {
        "content": "<p>And I hope that writing an example non-trivially using <code>wlog</code> actually helps getting the PR merged more than complaining that reviewing PR takes time.</p>",
        "id": 125492086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524313598
    },
    {
        "content": "<p>I always like to see a tool in use, that definitely brings it up the todo list</p>",
        "id": 125492181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524313908
    },
    {
        "content": "<blockquote>\n<p>And I think the community is currently working really well.</p>\n</blockquote>\n<p>I've also had a very positive experience in the community with people eager to help and grateful when you give then a nudge. I was surprised and saddened that Leo described his experience as harassment.</p>",
        "id": 125492500,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524314734
    },
    {
        "content": "<blockquote>\n<p>And then we have dumb users like me who can come up with examples finding bugs, suggests new tactics, write documentation...</p>\n</blockquote>\n<p>Yeah! Darn those dumb users, leeching off the community and only proving important mathematical theorems!</p>\n<p>But seriously, I'm really glad you decided to champion the cause of documentation. It's often neglected but it makes such a big difference!</p>",
        "id": 125492683,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524315129
    },
    {
        "content": "<p>Is lack of documentation why Coq hasn't been adopted widespreadly (ok this is not really English) after 30 years?</p>",
        "id": 125493169,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524316282
    },
    {
        "content": "<p>Hard to say. To be fair, I found Coq much harder to pick up than Lean. I never actually ended up applying it to large problems. I think the standard library is ill-organized and much harder to use than Lean's.</p>",
        "id": 125493254,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524316468
    },
    {
        "content": "<p>That's because there is no organisation so to speak; no hierarchy either. You have, for example, two different versions for Z&lt;theroem&gt; and N&lt;theorem&gt;.</p>",
        "id": 125493319,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1524316654
    },
    {
        "content": "<p>Maybe you could summarize that as: when you're a beginner, you have to get over a lot humps before you can begin to try stuff on your own. It feels like with Lean, once you installed it, you start hacking and it progressively becomes harder as you get more ambitious</p>",
        "id": 125493359,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524316712
    },
    {
        "content": "<p>Yeah, it looks a bit like a research project that just happened to be useful</p>",
        "id": 125493361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524316740
    },
    {
        "content": "<p>And I find it doesn't help that the library is built around ML modules more than around type classes. Type classes are really tremendous to make things simple to use.</p>",
        "id": 125493372,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524316801
    },
    {
        "content": "<p>My 2 cents: I think that the Coq community, and the automated theorem proving community in general, have done a bad job of advertising to mathematicians. I remember the edition of the Notices of the AMS coming out a few years ago which concentrated on this stuff and wondering if it was the future, but somehow the jewels in the crown at the time were things like \"yet another proof of the 4 colour theorem\" and maybe this was just after the odd order theorem, which was something mathematicians had long moved on from.</p>",
        "id": 125505376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344361
    },
    {
        "content": "<p>My gut feeling is that a different approach is needed</p>",
        "id": 125505378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344373
    },
    {
        "content": "<p>so that's why I'm going to try concentrating on getting undergraduates in mathematics to prove a bunch of basic stuff, because I think it might have a different kind of outcome.</p>",
        "id": 125505426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344413
    },
    {
        "content": "<p>Maybe a bunch of young people who know about this stuff will somehow integrate it into the maths community in a different way.</p>",
        "id": 125505430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344441
    },
    {
        "content": "<p>Let me absolutely echo the opinions of the others in this thread -- I've had a really good time learning Lean here, I would never have got anywhere without this group, and now I feel like I actually understand certain aspects of the software well enough to be able to use it without being continually frustrated.</p>",
        "id": 125505485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344525
    },
    {
        "content": "<p>The strategy of \"if you don't get it, find out about it and then write some docs\" also works really well for me.</p>",
        "id": 125505489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344546
    },
    {
        "content": "<p>And also the idea of choosing a non-trivial thing to work on and then just working on it has taught me a huge amount. There are just over 5000 lines of code in the stacks project directory now.</p>",
        "id": 125505498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524344608
    },
    {
        "content": "<p>Roughly, how many lines are pure commutative algebra and how many use geometric language?</p>",
        "id": 125505645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524344912
    },
    {
        "content": "<p>it wouldn't surprise me if nearly 1000 lines were cut-and-pasted stacks project LaTeX :-)</p>",
        "id": 125505821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345293
    },
    {
        "content": "<p>I guess it's almost all algebra at the minute</p>",
        "id": 125505839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> pointed out a typo in my definition of scheme and I told him not to believe my definition until we had some proof of a lemma about schemes which was geometric</p>",
        "id": 125505885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345372
    },
    {
        "content": "<p>and I am not sure how geometric you think this is</p>",
        "id": 125505886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345383
    },
    {
        "content": "<p>but he suggested the Spec / Gamma duality, Hom(S,Spec(A)) = Hom(A,Gamma(S))</p>",
        "id": 125505887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345399
    },
    {
        "content": "<p>I know the distinction is hard to make (Grothendieck did this on purpose!). Let's say: how many lines not containing \"sheaf\" or \"presheaf\"?</p>",
        "id": 125505888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524345400
    },
    {
        "content": "<p>which I think would be a true test</p>",
        "id": 125505890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345411
    },
    {
        "content": "<p>Oh there are lots and lots of lines proving abstract stuff of the form \"if I have a presheaf only defined on a basis of open sets for a topology, but it satisfies the sheaf axiom for a cofinal set of covers, then it extends uniquely to a sheaf on the whole space\"</p>",
        "id": 125505898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345458
    },
    {
        "content": "<p>I don't really know how to answer your questions precisely though</p>",
        "id": 125505943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345488
    },
    {
        "content": "<p>There's a bunch of lemmas about rings</p>",
        "id": 125505944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345509
    },
    {
        "content": "<p>and then a bunch of lemmas about presheaves and sheaves</p>",
        "id": 125505948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345519
    },
    {
        "content": "<p>and then some actual mathematics saying that some sequence of rings is exact</p>",
        "id": 125505950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345537
    },
    {
        "content": "<p>and I'm just in the process of writing the glue which will glue it all together.</p>",
        "id": 125505959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524345550
    },
    {
        "content": "<p>Did you try to separate nicely as much sheaf theory from ring theory as possible?</p>",
        "id": 125505966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524345595
    },
    {
        "content": "<p>so would you say it took you about a year of using lean before you felt confident in doing things in it?</p>",
        "id": 125506367,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524346522
    },
    {
        "content": "<p>i wonder how much faster your summer undergraduates and fall students will learn lean</p>",
        "id": 125506370,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524346544
    },
    {
        "content": "<p>I think he started less than a year ago</p>",
        "id": 125506407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524346565
    },
    {
        "content": "<p>Last July maybe?</p>",
        "id": 125506410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524346573
    },
    {
        "content": "<p>Maybe even August</p>",
        "id": 125506411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524346579
    },
    {
        "content": "<p>two semesters of focused effort sounds about right though</p>",
        "id": 125506463,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524346771
    },
    {
        "content": "<p>coincidentally that's how long it takes to get through software foundations 1-3</p>",
        "id": 125506465,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524346800
    },
    {
        "content": "<p>if i had to guess that right there is the reason it never took off in 30 years</p>",
        "id": 125506571,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524347007
    },
    {
        "content": "<p>imagine if you had to spend two semesters before you could write latex or use a computer algebra system</p>",
        "id": 125506611,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524347062
    },
    {
        "content": "<p>Also don't forget it's not like Coq was ready on year one and then waited for 30 years</p>",
        "id": 125506667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524347232
    },
    {
        "content": "<p>Yes I started when I was in MSRI in July/August 2017</p>",
        "id": 125509691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524354121
    },
    {
        "content": "<p>but I'm not entirely sure you can call my efforts focussed</p>",
        "id": 125509731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524354138
    },
    {
        "content": "<p>I was teaching a class of 220 students in one of the terms, and being head of pure maths and teaching a graduate course in the other one :-/</p>",
        "id": 125509732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524354162
    },
    {
        "content": "<p>On the other hand I pretty much gave up all of my other hobbies</p>",
        "id": 125509733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524354177
    }
]