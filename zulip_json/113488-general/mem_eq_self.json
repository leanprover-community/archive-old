[
    {
        "content": "<p>Harder than I expected!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mem_eq_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 150731070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773504
    },
    {
        "content": "<p>Took me three attempts!</p>",
        "id": 150731071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773514
    },
    {
        "content": "<p>ok too me two attempts</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mem_eq_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 150731079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543773594
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mem_eq_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> is this your suggestion? To those that didn't follow the other thread, the point is that without tagging <code>mem_eq_self</code> as <code>refl</code>, <code>by refl</code> doesn't work for the example.</p>",
        "id": 150731132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773612
    },
    {
        "content": "<p><code>example : 3 ∈ {x : ℕ | 3 = x} := by refl</code> now works too. I don't really understand what is going on here.</p>",
        "id": 150731148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- all fail</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mem_eq_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- all work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 150731199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543773799
    },
    {
        "content": "<p><code>example : 3 ∈ {x : ℕ | 3 = 3} := by refl</code> -- Doesn't that say <code>3 \\in set.univ</code>? Why is that <code>by refl</code>?</p>",
        "id": 150731247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773897
    },
    {
        "content": "<p>no, set.univ is true</p>",
        "id": 150731256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543773913
    },
    {
        "content": "<p>We're evaluating <code>lam x, 3 = 3</code> at <code>x=3</code> :-)</p>",
        "id": 150731261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773959
    },
    {
        "content": "<p>so indeed it's refl</p>",
        "id": 150731300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543773967
    }
]