[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/4908#issuecomment-721985117\">https://github.com/leanprover-community/mathlib/pull/4908#issuecomment-721985117</a>, I found that a seemingly innocuous change resulted in a deterministic timeout in a field that I couldn't even see: it was popuated by an auto_param!</p>\n<p>Two questions then:</p>\n<ul>\n<li>Is it possible to make it more obvious where the timeout is actually occuring?</li>\n<li>How can I work out why my change made things so much slower?</li>\n</ul>",
        "id": 215651368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604530329
    },
    {
        "content": "<p>Concerning the file in question, another option is to change <code>adj</code> using the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adj_unit</span> <span class=\"o\">:</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.Œπ</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adj_counit</span> <span class=\"o\">:</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"n\">id</span><span class=\"o\">),</span>\n  <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"bp\">‚ä£</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.Œπ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">adj_unit</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">counit</span> <span class=\"o\">:=</span> <span class=\"n\">adj_counit</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It still takes a solid 35 seconds to compile this block of code on my machine.</p>",
        "id": 215652867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604531361
    },
    {
        "content": "<p>That <code>naturality'</code> in <code>adj_counit</code> times out if I try to use <code>tidy</code>.</p>",
        "id": 215653007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604531465
    },
    {
        "content": "<p>Note that in theory we can save some lines with  <code>hom_equiv := Œª X A, (free_algebra.lift _).symm</code></p>",
        "id": 215653038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604531504
    },
    {
        "content": "<p>But then the also-hidden <code>hom_equiv_unit'</code> and <code>hom_equiv_counit'</code> seem like they might be timing out</p>",
        "id": 215653062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604531523
    },
    {
        "content": "<p>You could go further and set <code>unit.app</code> as <code>(free_algebra.lift _).symm (alg_hom.id R _)</code>, but that doesn't seem to help with the proof</p>",
        "id": 215653155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604531615
    },
    {
        "content": "<p>The fact that the auto param in the <code>naturality'</code> for <code>adj_counit</code> times out is suspicious...</p>",
        "id": 215653252,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604531694
    },
    {
        "content": "<p>Makes me think the issue is really somewhere else. Note <code>free</code> (in the safe file) also takes a while to compile</p>",
        "id": 215653424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604531836
    },
    {
        "content": "<p>Oh, I totally missed that <code>adj</code> builds on top of the definition in <code>free</code></p>",
        "id": 215653689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604532036
    },
    {
        "content": "<p>If you manage to work this out, feel free to push to my branch!</p>",
        "id": 215653712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604532056
    },
    {
        "content": "<p>It's usually not the best idea to define an adjunction using the actual definition, you're much better off using either mk_of_hom_equiv or mk_of_unit_counit, which let you provide less data. I think this should also reduce the number of auto params being used</p>",
        "id": 215698326,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604575078
    },
    {
        "content": "<p>I remember you (Bhavik) telling me this several months ago when I was making an adjunction at Xena (possibly to do with abelianisation) (and you were right). Should this be documented somewhere? Maybe a comment in the category theory library?</p>",
        "id": 215699630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604575997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, can you give an example of how to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category.adjunction.mk_of_hom_equiv\">docs#category.adjunction.mk_of_hom_equiv</a> there?</p>",
        "id": 215703242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604578558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Timeout.20issues.20with.20auto_params/near/215699630\">said</a>:</p>\n<blockquote>\n<p>I remember you (Bhavik) telling me this several months ago when I was making an adjunction at Xena (possibly to do with abelianisation) (and you were right). Should this be documented somewhere? Maybe a comment in the category theory library?</p>\n</blockquote>\n<p>Yeah, I added this to the docstring of <code>adjunction</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/adjunction/basic.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/adjunction/basic.html</a> a little after we talked about it</p>",
        "id": 215703328,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604578584
    },
    {
        "content": "<p>None of the links in that docstring work, as the name is <code>category.adjunction.mk_of_hom_equiv</code></p>",
        "id": 215703373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604578622
    },
    {
        "content": "<blockquote>\n<p>Yeah, I added this to the docstring of <code>adjunction</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/adjunction/basic.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/adjunction/basic.html</a> a little after we talked about it</p>\n</blockquote>\n<p>Oh nice!</p>",
        "id": 215703823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604578931
    },
    {
        "content": "<p>I'll have a go at using your suggestion <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 215704436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604579382
    },
    {
        "content": "<p>My guess would be that you could do either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"bp\">‚ä£</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">adjunction.mk_of_hom_equiv</span>\n<span class=\"o\">{</span> <span class=\"n\">hom_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.Œπ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>where there are two auto-params hidden, or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"bp\">‚ä£</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">adjunction.mk_of_unit_counit</span>\n<span class=\"o\">{</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.Œπ</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">counit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where again there are auto-params hidden, in either case though I guess it should be faster than the older version - if not you might be able to fill some in manually easily</p>",
        "id": 215704659,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604579522
    },
    {
        "content": "<p>The former looks better, given that I already have a <code>hom_equiv</code> instance in <code>Type*</code>, <code>(free_algebra.lift _).symm</code></p>",
        "id": 215704747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604579561
    },
    {
        "content": "<p>Yeah I personally find that version more convenient in practice</p>",
        "id": 215704872,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604579640
    },
    {
        "content": "<p>Making that change means I can no longer stick <code>@[simps]</code> on the definition</p>",
        "id": 215705964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604580291
    },
    {
        "content": "<p>Although I don't know if there was any point having it there in the first place</p>",
        "id": 215705976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604580302
    },
    {
        "content": "<p>Yup, you can use the semireducible trick instead though, or just hand-make the projections yourself</p>",
        "id": 215706006,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1604580319
    },
    {
        "content": "<p>Frankly since nothing even uses the projections, and I'm only making this change because the timeout is forcing me to, I think I'll leave it without them</p>",
        "id": 215706036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604580345
    },
    {
        "content": "<p>Updated <a href=\"https://github.com/leanprover-community/mathlib/issues/4908\">#4908</a> to use the new approach, thanks!</p>",
        "id": 215706375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604580558
    }
]