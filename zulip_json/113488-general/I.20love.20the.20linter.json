[
    {
        "content": "<p>I've seen people going on about the linters, but I didn't ever realise it was as simple as just going to the bottom of your file and typing <code>#lint</code>. This should be better known! I've already learnt something new about <code>simp</code> by looking at my first linter output.</p>\n<div class=\"codehilite\"><pre><span></span>: -/\n#print polynomial_derivation.map_C_mul /- Left-hand side simplifies from\n  ⇑d (C k * f)\nto\n  C k * ⇑d f + f * ⇑d (C k)\nusing\n  [polynomial_derivation.map_mul]\nTry to change the left-hand side to the simplified term!\n -/\n</pre></div>\n\n\n<p>I particularly love the emoji in the top line. Here's the set-up:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">polynomial_derivation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- Delta</span>\n<span class=\"o\">(</span><span class=\"n\">map_add&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">--Delta2</span>\n<span class=\"o\">(</span><span class=\"n\">map_C_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"c1\">--Delta3</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial_derivation</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- think of a polynomial derivation as a function from R[X] to R[X] -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">polynomial_derivation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span> <span class=\"c1\">-- should say `to_fun` once the derivation is defined</span>\n<span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_derivation</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">map_add&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">map_C_mul</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_derivation</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">map_C_mul&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_derivation</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">map_mul&#39;</span>\n</pre></div>",
        "id": 191874900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585224913
    },
    {
        "content": "<p>What did I do wrong?</p>",
        "id": 191875057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225008
    },
    {
        "content": "<p><code>map_C_mul</code> is a special case of <code>map_mul</code></p>",
        "id": 191875130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225045
    },
    {
        "content": "<p>You could set the priority higher, or you could prove that <code>d (C k) = 0</code> and then you will get the same result without it</p>",
        "id": 191875281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225116
    },
    {
        "content": "<p>Prove <code>map_C</code>, tag that one as <code>simp</code> and remove <code>simp</code> from <code>map_C_mul</code>.</p>",
        "id": 191875343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585225152
    },
    {
        "content": "<p>also, shouldn't you be getting a lint for marking those theorems as <code>def</code>?</p>",
        "id": 191875406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225193
    },
    {
        "content": "<p>This is something Shing and I are working on. It's still a WIP but nearly done.</p>",
        "id": 191875583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191875130\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191875130\">said</a>:</p>\n<blockquote>\n<p><code>map_C_mul</code> is a special case of <code>map_mul</code></p>\n</blockquote>\n<p>Only in the presence of <code>map_C</code></p>",
        "id": 191875603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225297
    },
    {
        "content": "<p>So have we got the definition of the structure wrong?</p>",
        "id": 191875642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225317
    },
    {
        "content": "<p>no, the lhs of <code>map_C_mul</code> is an instantiation of the lhs of <code>map_mul</code></p>",
        "id": 191875827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225431
    },
    {
        "content": "<p>that means that given input <code>d (C k * f)</code> they will race to see which will rewrite first</p>",
        "id": 191875897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225460
    },
    {
        "content": "<p>Yes I understand that, but the right hand side isn't, right?</p>",
        "id": 191875907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225472
    },
    {
        "content": "<p>in the absence of <code>map_C</code>, that means it's not confluent</p>",
        "id": 191875913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225477
    },
    {
        "content": "<p>I know who wants to win that race though</p>",
        "id": 191875928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225489
    },
    {
        "content": "<p>then set the priority of the winner higher</p>",
        "id": 191875953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225505
    },
    {
        "content": "<p>I have no real idea what the word confluent means.</p>",
        "id": 191875959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225508
    },
    {
        "content": "<p>Should I be changing priorities of winners, or should be aiming for full confluence compliance?</p>",
        "id": 191875983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225529
    },
    {
        "content": "<p>confluent means that if A rewrites to B and A also rewrites to C, then B and C will eventually reach some common point D</p>",
        "id": 191876009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225542
    },
    {
        "content": "<p>right -- so that was exactly what didn't happen when we made all the structure fields simp lemmas</p>",
        "id": 191876087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225571
    },
    {
        "content": "<p>You can make it confluent by adding <code>map_C</code> as a simp lemma</p>",
        "id": 191876127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225598
    },
    {
        "content": "<p>and removing <code>simp</code> from <code>map_C_mul</code> I guess</p>",
        "id": 191876149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225613
    },
    {
        "content": "<p>not even</p>",
        "id": 191876157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225621
    },
    {
        "content": "<p>Do I or not?</p>",
        "id": 191876179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225638
    },
    {
        "content": "<p>confluence means that they can diverge but they come back together</p>",
        "id": 191876180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225638
    },
    {
        "content": "<p>if you have \"shortcut\" simp lemmas this can cause a confluent rewrite system even though there is not a unique path</p>",
        "id": 191876243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225679
    },
    {
        "content": "<p>Do they come back together? This will be a 50-50 chance depending on whether it's <code>add_zero</code> or <code>zero_add</code> which is definitions, right?</p>",
        "id": 191876248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225680
    },
    {
        "content": "<p>Oh no, who cares about defeq here</p>",
        "id": 191876330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225714
    },
    {
        "content": "<p><code>d (C k * f) = C k * d f + f * d (C k) = C k * d f + f * 0 = C k * d f + 0 = C k * d f</code></p>",
        "id": 191876366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225739
    },
    {
        "content": "<p>There is some other relation -- <code>simp_rel</code>, which is I guess related to defeq</p>",
        "id": 191876375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225744
    },
    {
        "content": "<p>Right -- I don't care whether it's add_zero or zero_add which is the definitional one, I just need to make sure they are both tagged with <code>@[simp]</code></p>",
        "id": 191876413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225770
    },
    {
        "content": "<p>right, this is not a defeq thing</p>",
        "id": 191876505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225821
    },
    {
        "content": "<p>note also that <code>simp_rel</code> is not symmetric like defeq</p>",
        "id": 191876539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225840
    },
    {
        "content": "<p>But I want to encourage <code>simp</code> to go the short way and not do the calculation you posted.</p>",
        "id": 191876544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225845
    },
    {
        "content": "<p>that's what priority is for</p>",
        "id": 191876556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225858
    },
    {
        "content": "<p>or you can just throw them in a bag and let them duke it out</p>",
        "id": 191876589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225880
    },
    {
        "content": "<p>So where is the AI that analyses my confluent rewriting system and says \"I suggest you put the following priorities on these simp lemmas: ...\"?</p>",
        "id": 191876598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225889
    },
    {
        "content": "<p>hey, at least we detected the split</p>",
        "id": 191876619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225910
    },
    {
        "content": "<p>so is this hard? I thought that would be exactly the sort of thing you were good at</p>",
        "id": 191876691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225929
    },
    {
        "content": "<p>figuring out that it's confluent is hard enough (undecidable?)</p>",
        "id": 191876696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225935
    },
    {
        "content": "<p>I know but the system here is <em>tiny</em></p>",
        "id": 191876708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225949
    },
    {
        "content": "<p>the simp set is massive</p>",
        "id": 191876737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585225967
    },
    {
        "content": "<p>I know I will not be rewriting lists here, polynomials are atoms</p>",
        "id": 191876743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225972
    },
    {
        "content": "<p>I know to ignore all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> simp lemmas</p>",
        "id": 191876761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585225983
    },
    {
        "content": "<p>if you analyze the simplified problem, in some cases, you can prove confluence</p>",
        "id": 191876800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226013
    },
    {
        "content": "<p>I just want them off. I want to say \"look, this is about polynomial rings, so you can have all polynomial ring simp lemmas and that's it, no junk about filters\"</p>",
        "id": 191876819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226019
    },
    {
        "content": "<p>You can also <code>nolint</code> it and move on with your life</p>",
        "id": 191876846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226039
    },
    {
        "content": "<p>\"I don't care if someone accidentally imported topological spaces\"</p>",
        "id": 191876847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226039
    },
    {
        "content": "<p>This is the moment where Kenny posts his remark about simpsets.</p>",
        "id": 191876888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585226043
    },
    {
        "content": "<p>I'm all ears. I really felt like I learnt something new about <code>simp</code> today.</p>",
        "id": 191876912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226062
    },
    {
        "content": "<p>the topological spaces lemmas don't apply, but it can be hard to determine that in advance</p>",
        "id": 191876942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226093
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> . He wrote the proofs but I did the simp labelling.</p>",
        "id": 191876962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226105
    },
    {
        "content": "<p>What if your polynomial ring also happens to be a topological space?</p>",
        "id": 191876970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226109
    },
    {
        "content": "<p>Simp is pretty smart about looking only at the relevant lemmas to apply, but it has the simple job, it has a term already and is rewriting it. Analyzing the simp set as a whole is much harder</p>",
        "id": 191877091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226181
    },
    {
        "content": "<p>and yes, this is an active area of CS research</p>",
        "id": 191877135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226206
    },
    {
        "content": "<p>if you want to read a wikipedia article, try <a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Bendix_completion_algorithm\" title=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Bendix_completion_algorithm\">https://en.wikipedia.org/wiki/Knuth%E2%80%93Bendix_completion_algorithm</a></p>",
        "id": 191877317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226329
    },
    {
        "content": "<p>Where are the docs for <code>#lint</code>? I want to switch all but one of them off.</p>",
        "id": 191877883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226650
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands\">https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands</a></p>",
        "id": 191878009,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585226729
    },
    {
        "content": "<p><code>#lint only doc_blame</code></p>",
        "id": 191878015,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585226733
    },
    {
        "content": "<p>I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> the docs</p>",
        "id": 191878169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226819
    },
    {
        "content": "<p>where's <code>doc_thank</code>?</p>",
        "id": 191878439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585226969
    },
    {
        "content": "<p>Yeah I could just link to that</p>",
        "id": 191878470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585226988
    },
    {
        "content": "<p>rofl I couldn't find it in the docs because I didn't know <code>#lint</code> was a command :-)</p>",
        "id": 191878587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585227034
    },
    {
        "content": "<p>I see a feature request: go to definition for user commands</p>",
        "id": 191878769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585227143
    },
    {
        "content": "<p>also hover with doc string</p>",
        "id": 191878837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585227206
    },
    {
        "content": "<p>Yeah, these were the exact two things I tried before I asked here.</p>",
        "id": 191879314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585227421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191876696\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191876696\">said</a>:</p>\n<blockquote>\n<p>figuring out that it's confluent is hard enough (undecidable?)</p>\n</blockquote>\n<p>By Newman's lemma, confluence follows from local confluence and termination.  Checking termination is undecidable (in general), but if we assume termination then we only need to check for local confluence, which is straightforward.<br>\nI've implemented this linter, but it didn't make it into the maintenance paper.  You can look at the results here: <a href=\"https://gist.github.com/gebner/6f72773b22b18f6e1d4e4f8532aedfe8\" title=\"https://gist.github.com/gebner/6f72773b22b18f6e1d4e4f8532aedfe8\">https://gist.github.com/gebner/6f72773b22b18f6e1d4e4f8532aedfe8</a></p>\n<p>The big issues are:</p>\n<p>1. The implementation is really slow.  It takes 3 hours to run.<br>\n  2. In some cases, it takes even longer.  There is a timeout implemented using <code>try_for</code> (shown as \"timeout\" in the output).  But the linter framework doesn't work well with linters that fail non-deterministically (as is the case with <code>try_for</code>).<br>\n  3. I'm not sure how useful the results are.  Should all non-confluent pairs be fixed?</p>",
        "id": 191884523,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585229686
    },
    {
        "content": "<p>Not all non-confluent pairs should be fixed. This probably gets even more dicey if we have <code>nolint confluence</code> lemmas and you somehow have to check confluence of everything else</p>",
        "id": 191885131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585229961
    },
    {
        "content": "<p>I have been working under the assumption that <code>simp</code> is only a best effort rewrite system with no pretensions to confluence, so I never made any serious attempt to keep the overall system confluent or nearly so</p>",
        "id": 191885401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585230063
    },
    {
        "content": "<p>and more to the point, as a <code>#lint</code>, fixing a confluence bug is not necessarily a thing you can just do. I would rather have more simplification at the cost of confluence</p>",
        "id": 191885678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585230162
    },
    {
        "content": "<p>OK so here is a <a href=\"https://gist.github.com/kbuzzard/d578a110a5f409c7a4c217e48f077c3a\" title=\"https://gist.github.com/kbuzzard/d578a110a5f409c7a4c217e48f077c3a\">development of group theory in Lean</a>. I always felt like at the beginning I was going uphill proving <code>mul_one</code> because the axiom was <code>one_mul</code>. Is this anything to do with confluent rewriting? And how do I figure out what lemmas to tag as <code>simp</code>? I just tried randomly -- as long as they passed the basic criteria (like being an equality rather than an implication, and the right hand side being a bit simpler than the left hand side, and everything being in canonical form) they were in.</p>",
        "id": 191885958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585230263
    },
    {
        "content": "<blockquote>\n<p>But the linter framework doesn't work well with linters that fail non-deterministically (as is the case with try_for).</p>\n</blockquote>\n<p>But... but... what's all that business about <code>(deterministic) timeout</code> then?</p>",
        "id": 191885971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585230268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885678\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885678\">said</a>:</p>\n<blockquote>\n<p>and more to the point, as a <code>#lint</code>, fixing a confluence bug is not necessarily a thing you can just do.</p>\n</blockquote>\n<p>Most of the time the solution is to add more simp lemmas.  It only becomes a problem if the new simp lemmas then introduce new confluence bugs. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191886295,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585230404
    },
    {
        "content": "<p>Hey linter</p>\n<div class=\"codehilite\"><pre><span></span>/- UNUSED ARGUMENTS: -/\n#print mygroup.group.inv_eq_of_mul_eq_one /- argument 5: (h : a * b = 1) -/\n</pre></div>\n\n\n<p>what are you talking about?</p>",
        "id": 191886498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585230483
    },
    {
        "content": "<p>one example of a known non-confluence in <code>simp</code> is the rules around coercion. <code>↑x &lt; ↑y &lt;-&gt; x &lt; y</code>, but also <code>↑(x + y) = ↑x + ↑y</code> so <code>↑(a + b) &lt; ↑c</code> can simplify to either <code>a + b &lt; c</code> or <code>↑a + ↑b &lt; ↑c</code></p>",
        "id": 191886624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585230548
    },
    {
        "content": "<p>Oh I see, a sorried proof and it complains that I didn't use the hypotheses.</p>",
        "id": 191886693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585230581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885971\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885971\">said</a>:</p>\n<blockquote>\n<p>But... but... what's all that business about <code>(deterministic) timeout</code> then?</p>\n</blockquote>\n<p>The deterministic part is unfortunately a bit optimistic in my experience.  It just means that the timeout is not affected by how fast your machine is (or how many other programs you have running).  But the timeout still depends on the state of the caches, the result of <code>mk_fresh_name</code>, etc.<br>\nSo the linter would probably be deterministic if you run it twice on the same mathlib revision.  But a tiny change could cause the linter to fail on unrelated declarations.</p>",
        "id": 191886715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585230593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191886624\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191886624\">said</a>:</p>\n<blockquote>\n<p>one example of a known non-confluence in <code>simp</code> is the rules around coercion. <code>↑x &lt; ↑y &lt;-&gt; x &lt; y</code>, but also <code>↑(x + y) = ↑x + ↑y</code> so <code>↑(a + b) &lt; ↑c</code> can simplify to either <code>a + b &lt; c</code> or <code>↑a + ↑b &lt; ↑c</code></p>\n</blockquote>\n<p>That's a good one.  For completion, you'd need to add <code>↑a + ↑b &lt; ↑c &lt;-&gt; a + b &lt; c</code> and <code>↑a + ↑b + ↑c &lt; ↑d &lt;-&gt; a + b + c &lt; d</code> and so on.</p>",
        "id": 191886964,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585230689
    },
    {
        "content": "<p>let's get started!</p>",
        "id": 191887566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585230937
    },
    {
        "content": "<p>how many do you think we'll need in practice?</p>",
        "id": 191887601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585230951
    },
    {
        "content": "<p>Obviously it's in parentheses because it's not always true. Uh.</p>",
        "id": 191887678,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1585230970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885958\" title=\"#narrow/stream/113488-general/topic/I.20love.20the.20linter/near/191885958\">said</a>:</p>\n<blockquote>\n<p>OK so here is a <a href=\"https://gist.github.com/kbuzzard/d578a110a5f409c7a4c217e48f077c3a\" title=\"https://gist.github.com/kbuzzard/d578a110a5f409c7a4c217e48f077c3a\">development of group theory in Lean</a>. [...] Is this anything to do with confluent rewriting?</p>\n</blockquote>\n<p>Yes. In term rewriting systems, <em>completion</em> refers to the process of taking a set of equations (such as your group axioms) and producing a confluent and terminating set of rewrite rules (lemmas tagged as simp) with the property that every equation following from the group axioms is provable by simp.  (For groups this works, and you can also do this automatically.)<br>\nThere is a paper by Kaliszyk and Sternagel where they try to automatically derive a simp set in this way for all equations in the HOL light library: <a href=\"https://easychair.org/publications/paper/h6b\" title=\"https://easychair.org/publications/paper/h6b\">https://easychair.org/publications/paper/h6b</a></p>",
        "id": 191888027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585231105
    },
    {
        "content": "<p>So <code>simp</code>-labelling is an art? No wonder I'm no good at it. I had assumed it was a science.</p>",
        "id": 191888379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585231259
    },
    {
        "content": "<p>there is a reasonably objective success metric, and an algorithm that will work in a large number of practical cases, but sometimes you have to be clever. In that sense it's like theorem proving</p>",
        "id": 191888557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585231337
    },
    {
        "content": "<p>Why did I feel like I was going uphill until I'd proved <code>mul_one</code> and <code>mul_right_inv</code>, and then everything became trivial?</p>",
        "id": 191888571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585231344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I strongly suggests your should read <a href=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\" title=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\">this paper</a>.</p>",
        "id": 191902178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585236853
    },
    {
        "content": "<p>Thanks Patrick. Hey, they complain about <code>list.length_singleton</code> on p8. This feels a bit like the difference between <code>{x}</code> and <code>{y | y = x}</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  was talking about redefining <code>{x}</code> but perhaps <code>[x]</code> is a bit different because I can only think of <code>cons x nil</code> for the definition.</p>",
        "id": 191907866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585238773
    }
]