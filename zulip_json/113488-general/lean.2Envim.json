[
    {
        "content": "<p>Will mention a status update on the past few days of neovim support via <a href=\"https://github.com/Julian/lean.nvim\">lean.nvim</a> in case it attracts anyone else who's following along :)</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> helped tidy up the infoview with some syntax highlighting, added support for showing diagnostics in it and made a more straightforward implementation of abbreviation insertion support, all of which are great.</p>\n<p>We also fixed a couple of annoying basic bugs, though there are still a few to fix. At the minute I dare say things are quite usable to start.</p>\n<p><span class=\"user-mention\" data-user-id=\"373814\">@Rishikesh Vaishnav</span> is working on <a href=\"https://asciinema.org/a/kQsS0h4zErNQ6XwbnIzEyYdJ5\">per-window or per-tab infoviews</a> which will make things much easier to work with with multiple splits and tabs. Rish let's maybe move our DMs here, in case it's interesting to anyone else (and if not they'll mute :P)</p>",
        "id": 241569896,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622828477
    },
    {
        "content": "<p>Hopefully we'll also soon have a way to run lean 3 and lean 4 buffers side-by-side.</p>",
        "id": 241570202,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622828624
    },
    {
        "content": "<p>Hello folks! I am a graduate student from California who has been studying Lean for a few months but am relatively new to Zulip. Good to meet you all!</p>\n<p>Per-tab/per-window infoviews are mostly ready (see <a href=\"https://github.com/Julian/lean.nvim/pull/35\">this PR</a>), there just are a few error messages not affecting functionality that I'm trying to work out, and we may want to add a few extra features. We've also got some design decisions to make on whether to make the <code>lean</code> vim filetype default to Lean 3 or Lean 4. It's currently dependent on a PR <a href=\"https://github.com/rish987/nvim-lspconfig\">to <code>nvim-lspconfig</code></a> that adds Lean 4 as a new language server, so you'll have to install that fork if you want to try it out.</p>",
        "id": 241572925,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622829929
    },
    {
        "content": "<p>I'd love to use Lean in vim (although this will probably never be a serious option because of widgets). I'm super grateful that some people invest time in trying to make this happen. But I must say the README is daunting. The installation seem to require a lot of manual dependency installation and configuration, and it's not clear what is optional and what is required. Certainly the vim nightmare of having dozens of competing plugin managers doesn't help. Could you record some screencast showing the current status of this project? That would greatly help people deciding whether it's worth spending one hour installing it.</p>",
        "id": 241624251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622882048
    },
    {
        "content": "<p>I should also write I think part of the mess comes from the Lean 3/Lean 4 dichotomy. It would probably help a lot to have separate instructions for Lean 3 and Lean 4.</p>",
        "id": 241624290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622882157
    },
    {
        "content": "<p>Yes that's good feedback thanks. I've been meaning to add a short demo, will do so, and make it a bit clearer what's necessary for what.</p>",
        "id": 241627105,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622886228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I was looking into how to support “true” http infoviews in neovim as well... I believe websockets are the technology we need to use? Which is available via the lua.http module. This could enable widgets. And for the very commonly used non-graphical widgets, it should be possible to port those directly for use in the terminal. Would be happy to look into this in the future</p>",
        "id": 241637769,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622901147
    },
    {
        "content": "<p>Made filetype <code>lean</code> refer to Lean 4 and <code>lean3</code> refer to Lean 3, since we seem to agree that it is the right time for this. Adjusted <code>nvim-lspconfig</code> accordingly. Let me know if there are any objections.</p>",
        "id": 241659146,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622932152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> It may be wise to also put a warning against using <code>lean.vim</code> if using neovim, and direct them to <code>lean.nvim</code> (in the <code>lean.vim</code> README)</p>",
        "id": 241659261,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622932337
    },
    {
        "content": "<p>Have fixed all of the bugs/error messages relating to the new infoview functionality I could find, NOTE that I've changed the config option <code>lsp4</code> to <code>lsp</code> so that if we eventually stop supporting Lean 3 it won't be necessary to change that. Added to README descriptions of mappings for new infoview stuff.</p>\n<p>TODO:</p>\n<ul>\n<li>Manually test abbreviations and completion from <code>compe</code> (may have been broken in <code>lean3</code> by filetype rename)</li>\n<li>Manually test Treesitter</li>\n<li>Fix existing testing framework to work with the new infoview code</li>\n<li>README updating</li>\n</ul>",
        "id": 241666991,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622946010
    },
    {
        "content": "<p>Nice, thanks! I think also things are getting big for one PR, so I'm going to try tearing off a piece and merging it independently if I can find some self-contained bits.</p>",
        "id": 241672797,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622955192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241637769\">said</a>:</p>\n<blockquote>\n<p>Patrick Massot I was looking into how to support “true” html infoviews in neovim as well... I believe websockets is the technology we need to use? Which is available via the <code>lua-http</code> library. This could enable widgets. And for the very commonly used non-graphical widgets, it should be possible to port those directly for use in the terminal. Would be happy to look into this in the future</p>\n</blockquote>\n<p>I think you have it backward. There is no communication issue. I don't think there is any websockets involved, the Lean server simply sends widget information the same way it sends everything. But then all widgets are graphical. Displaying them is the issue. To be very specific, I'm not talking about toys such as the Hanoi towers widgets here, I'm talking about what you can see in <a href=\"#narrow/stream/113489-new-members/topic/.22unfold.22.20a.20proposition/near/240804412\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.22unfold.22.20a.20proposition/near/240804412</a> for instance. The big thing is being able to put your mouse on some expression in the info view and see how Lean parses them thanks to the interactive highlighting, and then copy or jump to definition.</p>",
        "id": 241680278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622967851
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> a screenshot or two of the final outcome often speaks more than a thousand words ;-)</p>",
        "id": 241684883,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622975268
    },
    {
        "content": "<p>Yeah, was considering adding a gif to the README of a demo using this, though we’ll probably have to update that once we implement pinnable/pausable infoview messages (at which point it would seem more competitive with VSCode)</p>",
        "id": 241690168,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622983538
    },
    {
        "content": "<p>As I prefer NeoVim and I do a lot of Lean 4 these days, I can be a beta tester if you want :)</p>",
        "id": 241698358,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622995721
    },
    {
        "content": "<p>That's awesome, all you have to do is install the forks of <a href=\"https://github.com/rish987/lean.nvim\">lean.nvim</a> and <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a> (replacing any existing installations). Here are zips of the minimal test packages I've been using: <a href=\"/user_uploads/3121/omJqL_YAiQdcIoEA9Ap2k37Q/test_lean4.zip\">test_lean4.zip</a>  and <a href=\"/user_uploads/3121/D25gzYB5f8Hg86B7T0Opfe71/test_lean.zip\">test_lean.zip</a>.</p>",
        "id": 241699264,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622997067
    },
    {
        "content": "<p>^ (also make sure you do NOT have <code>lean.vim</code> installed)</p>",
        "id": 241701078,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622999823
    },
    {
        "content": "<p>Alright, fixed the testing infra (though the automated github tests will fail until the <code>nvim-lspconfig</code> PR is merged), fixed a (hopefully last) edge case error message, and added some more details on the new functionality to the README.</p>\n<p>This should be ready for a \"final review\" before merge <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>. And <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you have any more comments on <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a>? If it looks good to you then I'll go ahead and make the PR to upstream.</p>",
        "id": 241707742,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623008965
    },
    {
        "content": "<p>Nice, well done. It's usually a bit easier to see what changes are being proposed in a PR -- I think the lspconfig change is probably correct at this point but it's slightly nontrivial to test because it has a circular dependency on the other change.</p>",
        "id": 241708657,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241659261\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> It may be wise to also put a warning against using <code>lean.vim</code> if using neovim, and direct them to <code>lean.nvim</code> (in the <code>lean.vim</code> README)</p>\n</blockquote>\n<p>The README of <code>lean.nvim</code> explicitly says one first needs to install <code>lean.vim</code>. This confirms people probably need to wait until the situation stabilizes.</p>",
        "id": 241708702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623010350
    },
    {
        "content": "<p>I think what we should  possibly do, assuming we've agreed to call lean4 <code>lean</code> and Lean 3 <code>lean3</code>, is to make that filetype change immediately (in the lean.vim repo), which unblocks the change in the lspconfig repo.</p>",
        "id": 241708710,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010375
    },
    {
        "content": "<p>Yes Patrick give it a few days :)</p>",
        "id": 241708716,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010382
    },
    {
        "content": "<p>Ok great. Thanks again for all your efforts!</p>",
        "id": 241708727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623010411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> in general if we can it's much easier to review changes one small bit at a time rather than all bundled together with other ones, and also a bit easier if you work on a branch, rather than on the main branch, because then you can merge in upstream changes a bit easier -- but I'm trying not to bother much with that now, we can certainly work with what you have, it's great, will just take a bit to incrementally merge it.</p>",
        "id": 241708795,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010507
    },
    {
        "content": "<p>Yeah my bad... I am a \"baby\" open source developer so definitely let me know if there are any best practices I'm not following!</p>",
        "id": 241708855,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623010594
    },
    {
        "content": "<p>Yes I figured, you're doing great don't worry :) you did the important bit which is writing something nice. The rest is easy stuff.</p>",
        "id": 241708872,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010623
    },
    {
        "content": "<p>But yeah now we have basically the lspconfig change blocked on changing the lean filetypes, and then merging to <code>lean.nvim</code> blocked on the lspconfig change</p>",
        "id": 241708889,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010663
    },
    {
        "content": "<p>so we can do that in the lean.nvim repo or the lean.vim one (changing the filetype name) but I kind of would like to try to do it in the lean.vim repo assuming Gabriel is ok merging it -- there's a small chance we can make things still work together, so until that falls apart I kind of have hopes we'll be able to push through...</p>",
        "id": 241708964,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> am I being clear enough? Basically we have to introduce the new filetype names, so let's do that first, then you can send the lspconfig PR and it will work immediately, and then we can decide whether we really need to merge the two?</p>",
        "id": 241708978,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010798
    },
    {
        "content": "<p>Hmm not 100% following, for <code>lean.nvim</code> I've already used filetype <code>lean3</code> for Lean 3 and <code>lean</code> for Lean 4. We shouldn't need to change <code>lean.vim</code> (the new README says that you should not have <code>lean.vim</code> installed if using <code>lean.nvim</code>)</p>",
        "id": 241709216,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011096
    },
    {
        "content": "<p>Oh I see, you're saying if they're using <code>lean.vim</code> instead of <code>lean.nvim</code>, then we need to add detection for the <code>lean3</code> filetype in <code>lean.vim</code>, right?</p>",
        "id": 241709372,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011311
    },
    {
        "content": "<p>Right now what we have is that the PR to <code>lean.nvim</code> can't be merged because it depends on changes to <code>lspconfig</code>, but the converse is also true! <code>lspconfig</code>'s PR can't be merged either because the only existing setup doesn't really use that filetype, not until I hit the merge button on your PR</p>",
        "id": 241709442,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011443
    },
    {
        "content": "<p>So things of course will work at the end of the day when everything's merged, but along the way, stuff will break</p>",
        "id": 241709455,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011472
    },
    {
        "content": "<p>Gotcha. Does Github does not have some tool for synchronized merging?</p>",
        "id": 241709485,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011518
    },
    {
        "content": "<p>It doesn't, and in theory it wouldn't really be too big of an issue, it's not like we have 1000 users, we have essentially the 3 of us :P -- but I need to review the rest of the PR more carefully so I understand all the changes, so it's really me not being sure I can hit the merge button immediately</p>",
        "id": 241709537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011592
    },
    {
        "content": "<p>Yes totally understandable. Let me know if you have any questions, no rush at all!</p>",
        "id": 241709560,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011631
    },
    {
        "content": "<p>Ok sorry but just pushed another small fix slightly refactoring <code>close_win_wrapper</code> (can't believe I missed this... :P)</p>",
        "id": 241711362,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623014427
    },
    {
        "content": "<p>Added a number of comments to the source (should hopefully make your review a bit easier)</p>",
        "id": 241713825,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623018371
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\">2021-06-06-162302_1918x1079_scrot.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\" title=\"2021-06-06-162302_1918x1079_scrot.png\"><img src=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\"></a></div><p>This a bit much? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 241715813,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623021936
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\">2021-06-06-162856_1917x1079_scrot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\" title=\"2021-06-06-162856_1917x1079_scrot.png\"><img src=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\"></a></div><p>(after <code>:LeanInfoPerTab</code>) Ah that's better...</p>",
        "id": 241716018,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623022237
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\">2021-06-06-165122_1916x1079_scrot.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\" title=\"2021-06-06-165122_1916x1079_scrot.png\"><img src=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\"></a></div><p>Or maybe, if you do things in the right order with <code>:LeanInfoPerWin</code>...</p>",
        "id": 241716770,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623023580
    },
    {
        "content": "<p>One more (small) thing I noticed - if you mess around with the infoview before the Language server has given diagnostics for your line, some ugly error messages about failed hover/plainGoal callbacks can be thrown. Again, doesn't \"break\" anything, but would be nice to fix, probably using something similar to what was done with <code>wait_for_line_diagnostics()</code> in the tester code. Though I will put this off to a future PR.</p>",
        "id": 241772818,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071036
    },
    {
        "content": "<p>And also would be nice to include a \"processing file...\" message if it is waiting, similar to what is done in VSCode</p>",
        "id": 241773008,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071110
    },
    {
        "content": "<p>Yes definitely we should keep track of any known issues! But you may notice I'm trying to whittle down your branch little by little. So definitely in a second PR, or a future one :)</p>",
        "id": 241774252,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071741
    },
    {
        "content": "<p>My next whittling will be we already depend on <code>lspconfig</code> as a hard dep, so rather than vendoring the module from it with the path stuff, we should just be able to require it, right?</p>",
        "id": 241774335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071769
    },
    {
        "content": "<p>If you have spare moments maybe give that a shot, since the US is about to wake up and I'm about to go on 6 hours of lovely Zoom calling...</p>",
        "id": 241774373,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071791
    },
    {
        "content": "<p>Hmm currently I believe it is usable without <code>nvim-lspconfig</code> if they specifically set <code>enable = false</code> in <code>lsp3</code> and <code>lsp4</code>,  though it should be okay to require it since it would seem very rare to use this plugin without it</p>",
        "id": 241774724,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071978
    },
    {
        "content": "<p>This should make it possible to remove all of that copied code in <code>util.lua</code> as well</p>",
        "id": 241774863,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241707742\">said</a>:</p>\n<blockquote>\n<p>This should be ready for a \"final review\" before merge <span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span>. And <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> do you have any more comments on <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a>? If it looks good to you then I'll go ahead and make the PR to upstream.</p>\n</blockquote>\n<p>The lspconfig stuff looks good to me, at least Lean-wise.</p>",
        "id": 241775810,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623072480
    },
    {
        "content": "<p>Cool, I'll make that PR once we've \"finalized\" things on our side so that we can make sure the merges happen at somewhat the same time</p>",
        "id": 241776166,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072623
    },
    {
        "content": "<p>No no make the PR immediately, that'll actually help!</p>",
        "id": 241776201,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623072639
    },
    {
        "content": "<p>It'll save you from having to do what we just discussed I think.</p>",
        "id": 241776212,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623072647
    },
    {
        "content": "<p>Oh I see, alright will do</p>",
        "id": 241776383,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072728
    },
    {
        "content": "<p>It is open: <a href=\"https://github.com/neovim/nvim-lspconfig/pull/958\">https://github.com/neovim/nvim-lspconfig/pull/958</a></p>",
        "id": 241778961,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623073806
    },
    {
        "content": "<p>Yeah, my bad in including unrelated fixes (e.g. buffer-local keymappings) in my PR rather than creating a new PR for them, will be more careful about this in the future. Looking at my other commits, everything else should be self-contained (though I really should have made simultaneous support and per-window/per-tab infoviews two separate PRs)</p>",
        "id": 241782735,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623075359
    },
    {
        "content": "<p>Also feel free to remove to mode-toggling mappings by the way... I agree that  it should be pretty rare to use, so the <code>:LeanInfoPerTab</code> and <code>:LeanInfoPerWin</code> commands should be enough. I just got a bit too excited there once I got this working lol</p>",
        "id": 241784507,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623076113
    },
    {
        "content": "<p>All good, don't worry, yeah it's 100x easier to review 10 small PRs that do one thing each than 1 big one essentially, so in general the smaller you can make them the better. And yeah think I'll kill those two commands until someone asks for them.</p>",
        "id": 241796063,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623080399
    },
    {
        "content": "<p>The excitement is good though :P it'll keep you motivated to help, which I could use all I can get.</p>",
        "id": 241796137,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623080413
    },
    {
        "content": "<p>Yeah also for the <code>:LeanInfoPerTab</code> and <code>:LeanInfoPerWin</code> commands feel free to remove them as well... Though I already personally find them very useful as I frequently switch between my desktop RPi (large screen) and connecting to it via SSH over my laptop (small screen), and dynamically being able to change that makes it possible for me not to have to modify <code>init.vim</code>/<code>init.lua</code> and restart neovim - so I think it's worth mentioning in the README how to set those commands up in the <code>lsp</code>/<code>lsp3</code> configs</p>",
        "id": 241801940,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623082790
    },
    {
        "content": "<p>One more thing to put on the roadmap: individually configurable NESW infoviews - I'd imagine, for example when viewing Lean 3 files and Lean 4 files side by side, it would be pretty convenient to have the infoview on the bottom of each source window rather than always on the right. Shouldn't be too much trouble to implement</p>",
        "id": 241805265,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623084224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241805265\">said</a>:</p>\n<blockquote>\n<p>One more thing to put on the roadmap: individually configurable NESW infoviews - I'd imagine, for example when viewing Lean 3 files and Lean 4 files side by side, it would be pretty convenient to have the infoview on the bottom of each source window rather than always on the right. Shouldn't be too much trouble to implement</p>\n</blockquote>\n<p>This is also useful for portrait screens.</p>",
        "id": 241805759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623084417
    },
    {
        "content": "<p>Trying out the new term goals - any idea what's causing exit-code 82 with <code>leanpkg print-paths</code> on the latest nightly (06/09)?</p>\n<p><a href=\"https://asciinema.org/a/2UsJIWjPAFA1ZM4waDx0LpWG0\">https://asciinema.org/a/2UsJIWjPAFA1ZM4waDx0LpWG0</a></p>",
        "id": 242098052,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623258094
    },
    {
        "content": "<p>This is an interesting error, and I can't reproduce it.  You're on arm, right?</p>",
        "id": 242101187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623259503
    },
    {
        "content": "<p>Yep. I’m going to try some of the previous nightlies and see if I can find where it first show up</p>",
        "id": 242101719,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623259751
    },
    {
        "content": "<p>I would bet on <a href=\"https://github.com/leanprover/lean4/pull/495\">https://github.com/leanprover/lean4/pull/495</a> :)</p>",
        "id": 242101951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623259849
    },
    {
        "content": "<p>No idea either though</p>",
        "id": 242101987,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623259867
    },
    {
        "content": "<p>Thanks. Don't have the knowledge yet to solve this, so swallowing my pride for now and moving to an x86 machine <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 242143853,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623281567
    },
    {
        "content": "<p>Update: the next feature I'm going to implement is pinnable/pausable infoview messages, starting from my <code>infoview_persistence_refactor</code> branch. But before that, I'm going to focus for a bit on adding complete automated testing for per-window/per-tab infoviews to make things easier down the road.</p>",
        "id": 242279153,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623363896
    },
    {
        "content": "<p>That sounds great, definitely please do send small, single-purpose PRs for that as you go. But more tests would be awesome.</p>",
        "id": 242312653,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623398641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> To save you some time, we can abandon the current PR # 35 and I can work on introducing incremental PRs for the new functionality (along with ones for new unit tests). But if you think you've \"almost got it\" with # 35, we can go ahead with that. Let me know what you prefer.</p>",
        "id": 242414513,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623453703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> if you don't hold it against me that'd be 100% helpful</p>",
        "id": 242431150,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623478605
    },
    {
        "content": "<p>I am almost at the point where I can cross off another piece of functionalitiy, but after that would still have a bit of work for each of the remaining bits, so yeah if you're OK with that it'd deeeefinitely help.</p>",
        "id": 242431162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623478641
    },
    {
        "content": "<p>Yes no problem at all - figuring out how to best separate things is half the fun anyways!</p>",
        "id": 242445527,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623497835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> FYI: We've just internalized all of the components from <code>lean.vim</code> into <code>lean.nvim</code> - not sure what the plan for <code>lean.vim</code> is from here, whether to archive or support in parallel. IMO probably best to support in parallel at least until neovim 0.5.0 is officially released, but let me know your thoughts on this.</p>",
        "id": 242517283,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623599240
    },
    {
        "content": "<p>I'll leave lean.vim as it is for now, though maybe we should make the link to lean.nvim more prominent.  Future changes to the syntax files will go to lean.nvim.</p>",
        "id": 242560971,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623655665
    },
    {
        "content": "<p>There's now a short demo in the README: <a href=\"https://github.com/Julian/lean.nvim/#leannvim\">https://github.com/Julian/lean.nvim/#leannvim</a></p>\n<p>There still is not a Patrick-proof (i.e. \"just tell me to run one command and then everything works without reading 8 paragraphs\") section, and Lean 3 functionality lags a bit behind Lean 4. Both of those are things I'll address in the next week or so, but the demo video hopefully gives an initial idea of where things are. Comments are of course welcome.</p>",
        "id": 243263474,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624128453
    },
    {
        "content": "<p>Great, that demo video looks really promising!!</p>",
        "id": 243263642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624128659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> the language servers seem to be broken in CI, even for commits before the most recent merge. Could recent changes to lean-language-server be responsible? Do the yml files need to be updated in some way? Looking into it…</p>",
        "id": 243796890,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624546046
    },
    {
        "content": "<p>Locally, after updating <code>lean-language-server</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[local] lean.nvim $ lean-language-server --stdio\n/usr/local/bin/lean-language-server: line 1: use strict: command not found\n/usr/local/bin/lean-language-server: line 2: syntax error near unexpected token `exports,'\n/usr/local/bin/lean-language-server: line 2: `Object.defineProperty(exports, \"__esModule\", { value: true });'\n</code></pre></div>",
        "id": 243798661,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624546703
    },
    {
        "content": "<p>Sorry, should have mentioned that somewhere you'd see -- it's related to me breaking that somehow, but I don't know how, I didn't touch anywhere near that, so I can only assume something changed in <code>tsc</code>'s behavior maybe or something, I have to investigate (and had to jump on calls). <a href=\"https://github.com/leanprover/lean-client-js/pull/21#issuecomment-867688593\">https://github.com/leanprover/lean-client-js/pull/21#issuecomment-867688593</a></p>",
        "id": 243798876,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624546782
    },
    {
        "content": "<p>Alright no prob, I'll look into it as well</p>",
        "id": 243799551,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624547027
    },
    {
        "content": "<p>I've pushed a fix now.</p>",
        "id": 243799699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624547074
    },
    {
        "content": "<p>The whole lean-client-js project hasn't been touched for years.  It seems impossible to upgrade everything to the latest typescript version, but upgrading lean-language-server worked just fine and fixed the bug.</p>",
        "id": 243799842,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624547134
    },
    {
        "content": "<p>Awesome, looks like that fixed it. Thank you!</p>",
        "id": 243800342,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624547313
    },
    {
        "content": "<p>Thanks to Rish and Gabriel, lean.nvim just merged support for... widgets :) -- both for lean 3 and 4.</p>\n<p>If you were waiting for support for them to decide whether neovim was worth a shot, now's your chance. Let us know what you think. We're still merging a few tweaks to how things look (and documenting the mappings), but the core functionality is indeed there now.</p>",
        "id": 256051162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633351084
    },
    {
        "content": "<p>Wow, that's really cool!</p>",
        "id": 256051219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351123
    },
    {
        "content": "<p>How do I test this?</p>",
        "id": 256051226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351129
    },
    {
        "content": "<p>I can't even imagine how it could look like <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 256058325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354001
    },
    {
        "content": "<p>Did you already update the documentation?</p>",
        "id": 256058536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354082
    },
    {
        "content": "<p>I'll post a recording a bit later after the tweaks are in -- and no, still working on tweaking the docs, so this is an early sneak peak (but hey who can resist such things). For now if you have the plugin installed -- <a href=\"https://github.com/Julian/lean.nvim/#installation\">howto is here, let me know if anything is unclear</a> -- the mappings you'll use are <a href=\"https://github.com/Julian/lean.nvim/blob/main/lua/lean/infoview.lua#L28-L33\">here</a> -- but more docs to come later tonight if you're less adventurous (or have less time).</p>",
        "id": 256059551,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633354446
    },
    {
        "content": "<p>I can definitely wait. Thank you so much for all this!</p>",
        "id": 256060037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354645
    },
    {
        "content": "<p>In this case I didn't do much myself, just the messenger trying to rile up more feedback :), but indeed the others did quite a nice job.</p>",
        "id": 256060328,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633354757
    },
    {
        "content": "<p>Here's a brief screen recording of what it looks like at the minute -- <a href=\"https://user-images.githubusercontent.com/329822/136033121-4656e399-b422-4404-9e6c-526dffe91419.mov\">https://user-images.githubusercontent.com/329822/136033121-4656e399-b422-4404-9e6c-526dffe91419.mov</a></p>",
        "id": 256245888,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633440867
    },
    {
        "content": "<p>That looks very exciting!</p>",
        "id": 256246396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441084
    },
    {
        "content": "<p>If installing this is reasonably easy, I am very interested in trying this out.</p>",
        "id": 256246461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441120
    },
    {
        "content": "<p>I believe at this point it should be, and of course am happy to help if not (either by improving docs or otherwise) -- have you got the plugin installed? Or if not, can I help somehow there? What step are you at?</p>",
        "id": 256247320,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441470
    },
    {
        "content": "<p>I'm at step 0.</p>",
        "id": 256247421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441512
    },
    {
        "content": "<p>Can I install the plugin using usual methods?</p>",
        "id": 256247448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441525
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 256247455,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441529
    },
    {
        "content": "<p>Yes -- any plugin manager should work, we include instructions for vim-plug specifically here: <a href=\"https://github.com/Julian/lean.nvim/#installation\">https://github.com/Julian/lean.nvim/#installation</a></p>",
        "id": 256247569,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> also deserves another shout out for the (massively cool) effort on getting the above to work.</p>",
        "id": 256266217,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633447578
    },
    {
        "content": "<p>Thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> Though there is certainly still a lot more cool stuff I plan to add very soon!!!</p>",
        "id": 256266801,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633447786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <code>Plug 'andrewradev/switch.vim'  \" For Lean switch support</code><br>\nWhat does that do?</p>",
        "id": 256275851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451043
    },
    {
        "content": "<p>aah, it's some generic plugin for syntax transformations?</p>",
        "id": 256277174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451555
    },
    {
        "content": "<p>Yet another thing to try out</p>",
        "id": 256277188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Yes :) in my opinion it's literally the most useful under-known vim plugin</p>",
        "id": 256279714,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452568
    },
    {
        "content": "<p>Amongst the few of us using <code>lean.nvim</code> however, I suspect only I've used the lean support I wrote</p>",
        "id": 256279758,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452584
    },
    {
        "content": "<p>And since I know so little lean, it undoubtedly could use improvement in what it switches between</p>",
        "id": 256279775,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452596
    },
    {
        "content": "<p>But what it does right now is e.g. if you have <code>library_search</code> under the cursor and hit switch, it'll change that to <code>suggest</code>, and if you hit it again to <code>hint</code> I think</p>",
        "id": 256279887,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452634
    },
    {
        "content": "<p>Or if you have <code>tt</code> under the cursor you get <code>ff</code></p>",
        "id": 256279948,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452665
    },
    {
        "content": "<p><code>simp</code> -&gt; <code>squeeze_simp</code>??</p>",
        "id": 256280007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633452690
    },
    {
        "content": "<p>The full set of switches are here: <a href=\"https://github.com/Julian/lean.nvim/blob/main/ftplugin/lean/switch.vim#L8-L35\">https://github.com/Julian/lean.nvim/blob/main/ftplugin/lean/switch.vim#L8-L35</a> and as I say I fully expected someone who knows more lean to at some point come along and suggest better versions of that</p>",
        "id": 256280010,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452691
    },
    {
        "content": "<p>yep <del>though actually I think I made it use your <code>simp?</code>, but when I saw you say <code>squeeze_simp</code> was still a bit better at things I made a mental note to go back to <code>squeeze_simp</code> which I may not have pushed</del> done</p>",
        "id": 256280136,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452734
    },
    {
        "content": "<p>Uh sorry I linked you the lean 4 version</p>",
        "id": 256280266,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452784
    },
    {
        "content": "<p>The lean 3 one (which has tactic switches) is here: <a href=\"https://github.com/Julian/lean.nvim/blob/27817399adcf871075337cb2b7d1e773e7e5c55e/ftplugin/lean3/switch.vim\">https://github.com/Julian/lean.nvim/blob/27817399adcf871075337cb2b7d1e773e7e5c55e/ftplugin/lean3/switch.vim</a></p>",
        "id": 256280295,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452797
    },
    {
        "content": "<p>Any tips for following nested widgets? The only way I managed to go more than one level deep is with <code>:set mouse=a</code> as ctrl-w w seems to fail me after one widget</p>",
        "id": 256282932,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453794
    },
    {
        "content": "<p>Hit <code>Tab</code></p>",
        "id": 256283039,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453822
    },
    {
        "content": "<p>Hm, it doesn't seem to do anything for me unfortunately</p>",
        "id": 256283104,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453861
    },
    {
        "content": "<p>I added that an hour or two ago</p>",
        "id": 256283128,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453874
    },
    {
        "content": "<p>So update if you haven't since then perhaps</p>",
        "id": 256283148,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453882
    },
    {
        "content": "<p>Perfect, thank you all for this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256283258,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453930
    },
    {
        "content": "<p>Installing the suggested packages results in an endless stream of errors like: <code>E5108: Error executing lua ...sot/.config/nvim/bundle/nvim-compe/lua/compe/context.lua:20: attempt to index field 'b' (a nil value)</code></p>",
        "id": 256290889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633456879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can you share what version of neovim you're on? Via e.g. <code>nvim --version</code>.</p>",
        "id": 256291221,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633456988
    },
    {
        "content": "<p>and <code>Error executing vim.schedule lua callback: ...sot/.config/nvim/bundle/plenary.nvim/lua/plenary/job.lua:480: attempt to call field 'wait' (a nil value)</code></p>",
        "id": 256291295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>NVIM v0.5.0-353-g3051342f9\nBuild type: RelWithDebInfo\nLuaJIT <span class=\"m\">2</span>.1.0-beta3\nCompilation: /usr/bin/gcc-5 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE<span class=\"o\">=</span><span class=\"m\">1</span> -O2 -g -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std<span class=\"o\">=</span>gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wvla -fstack-protector-strong -fdiagnostics-color<span class=\"o\">=</span>auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL<span class=\"o\">=</span><span class=\"m\">3</span> -I/home/travis/build/neovim/bot-ci/build/neovim/build/config -I/home/travis/build/neovim/bot-ci/build/neovim/src -I/home/travis/build/neovim/bot-ci/build/neovim/.deps/usr/include -I/usr/include -I/home/travis/build/neovim/bot-ci/build/neovim/build/src/nvim/auto -I/home/travis/build/neovim/bot-ci/build/neovim/build/include\nCompilé par travis@travis-job-403476e6-991c-4366-b1c7-4e5a12a1aed5\n\nFeatures: +acl +iconv +tui\n</code></pre></div>",
        "id": 256291414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457056
    },
    {
        "content": "<p>My vim is now completely unusable, even for non lean files</p>",
        "id": 256291759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457174
    },
    {
        "content": "<p>Hm, odd, sorry -- I suppose 2 things to try if you don't mind, one is can you give a shot at neovim 0.5.1? You can get a quick download of it here <a href=\"https://github.com/neovim/neovim/releases/tag/v0.5.1\">https://github.com/neovim/neovim/releases/tag/v0.5.1</a> if you're comfortable trying that, though it's weird because the first error message is basically saying <code>:lua print(vim.wait)</code> doesn't work (so if you can try that and tell me if that works that may help too</p>",
        "id": 256292276,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457363
    },
    {
        "content": "<p>But I know Gabriel was successfully using 0.5.0 up until like 2 days ago</p>",
        "id": 256292335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457386
    },
    {
        "content": "<p>Maybe I misunderstand the instructions. For instance I'm not sure where I'm meant to write</p>\n<div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"c1\">-- You may want to reference the nvim-lspconfig documentation, found at:</span>\n<span class=\"c1\">-- https://github.com/neovim/nvim-lspconfig#keybindings-and-completion</span>\n<span class=\"c1\">-- The below is just a simple initial set of mappings.</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_attach</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">bufnr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_keymap</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_option</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_option</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'gd'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_option</span><span class=\"p\">(</span><span class=\"s1\">'omnifunc'</span><span class=\"p\">,</span> <span class=\"s1\">'v:lua.vim.lsp.omnifunc'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 256292362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457397
    },
    {
        "content": "<p>One sec, I'll give you a full gist</p>",
        "id": 256292450,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457417
    },
    {
        "content": "<p><code>:lua print(vim.wait)</code> answers <code>nil</code></p>",
        "id": 256292510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457440
    },
    {
        "content": "<p>Note that I never used any lua for anything</p>",
        "id": 256292529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457448
    },
    {
        "content": "<p>Hm, yeah that shouldn't matter, for neovim it's part of neovim -- you're on debian I guess?</p>",
        "id": 256292628,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457486
    },
    {
        "content": "<p>If you type <code>:version</code> inside neovim do you get something similar to that output?</p>",
        "id": 256292655,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457495
    },
    {
        "content": "<p>With the newer nvim I get a new error message <code>E5112: Error while creating lua chunk: /home/pmassot/.config/nvim/plugin/lean.lua:4: unexpected symbol near '{'</code></p>",
        "id": 256292880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457575
    },
    {
        "content": "<p>line 4 is <code>local function on_attach(client, bufnr) {</code></p>",
        "id": 256292950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457599
    },
    {
        "content": "<p>:version                                                                                                                                                                                                 <br>\nNVIM v0.5.1<br>\nBuild type: RelWithDebInfo<br>\nLuaJIT 2.1.0-beta3</p>",
        "id": 256293007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457620
    },
    {
        "content": "<p>Oh. And that line is telling me that indeed I put invalid lua in the README so apologies.. One second I'm on a call but I'll give you the right thing</p>",
        "id": 256293066,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457644
    },
    {
        "content": "<p>There is no hurry at all. I'll take care of my son for a while.</p>",
        "id": 256293235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457706
    },
    {
        "content": "<p>Put this in <code>~/.config/nvim/plugin/lean.lua</code>: <a href=\"https://gist.github.com/Julian/5ddb85a86f4295491546832b25fc2011\">https://gist.github.com/Julian/5ddb85a86f4295491546832b25fc2011</a></p>\n<p>(And let me know if that at least makes the errors go away)</p>",
        "id": 256295204,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633458511
    },
    {
        "content": "<p>I can now use vim normally!</p>",
        "id": 256299181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460068
    },
    {
        "content": "<p>Let me try some Lean then</p>",
        "id": 256299190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460074
    },
    {
        "content": "<p>I see the info view! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 256299328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460137
    },
    {
        "content": "<p>Hooray! Yeah feel free to ask anything else if you start playing around. What I just gave you doesn't do everything you may want (out of vim) -- <code>lean.nvim</code> is somewhat intentionally less opinionated (or simple?) than the vscode plugin so there's more room to customize things (or use plugins in the neovim ecosystem), but if you don't do so already yourself obviously ask and happy to help (especially if it's missing functionality we should add). So yeah in short tear us apart :D</p>",
        "id": 256299852,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460347
    },
    {
        "content": "<p>This is so amazing that I'm laughing with joy in front of my computer</p>",
        "id": 256300128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460419
    },
    {
        "content": "<p>Uh oh... should I be concerned that I will need to switch back to vim now?</p>",
        "id": 256300274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633460474
    },
    {
        "content": "<p>Well that certainly makes my day. Again credit to the other folks though, I'm just the guy who was stubborn enough to ignore you when you said Lean doesn't have a vim story :D</p>",
        "id": 256300287,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460478
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> have both contributed a ton I would have never been able to do, so it was a true team effort.</p>",
        "id": 256300403,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460514
    },
    {
        "content": "<p>How to you see where errors are? What about the orange bars?</p>",
        "id": 256300728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460621
    },
    {
        "content": "<blockquote>\n<p>What about the orange bars?</p>\n</blockquote>\n<p>Fixed.  They used to work in Lean 3 as well, but from what I can tell this was broken after merging the widgets branch.</p>",
        "id": 256302702,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633461392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256300728\">said</a>:</p>\n<blockquote>\n<p>How to you see where errors are?</p>\n</blockquote>\n<p>You might need to set the colors manually (if your colorscheme doesn't support it yet):</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"k\">hi</span> LspReferenceRead cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceText cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceWrite cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultError cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Red\n<span class=\"k\">hi</span> LspDiagnosticsDefaultWarning cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Yellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultInformation ctermfg<span class=\"p\">=</span>Blue\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineError <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineWarning <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineInformation <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineHint <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> link SpecialChar Character\n</code></pre></div>\n<p>You might also need to enable the squiggles manually (not sure if this is the default or not):</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"p\">:</span><span class=\"k\">lua</span> <span class=\"p\">&lt;&lt;</span>EOF\n<span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.handlers[<span class=\"s2\">\"textDocument/publishDiagnostics\"</span>] <span class=\"p\">=</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.with<span class=\"p\">(</span>\n  <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.on_publish_diagnostics<span class=\"p\">,</span> {\n    <span class=\"nb\">underline</span> <span class=\"p\">=</span> true<span class=\"p\">,</span>\n    virtual_text <span class=\"p\">=</span> { spacing <span class=\"p\">=</span> <span class=\"m\">4</span> }<span class=\"p\">,</span>\n    update_in_insert <span class=\"p\">=</span> true<span class=\"p\">,</span>\n  }<span class=\"p\">)</span>\nEOF\n</code></pre></div>",
        "id": 256303340,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633461641
    },
    {
        "content": "<p>I can confirm the orange \"bars\" are there. However they make the left margin randomly jump (as do thet <code>#check</code> and <code>#print</code> commands) which is really really not nice. Is there any way to avoid that?</p>",
        "id": 256306668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463017
    },
    {
        "content": "<p>Maybe we could permanently reserve horizontal space for them?</p>",
        "id": 256306749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463043
    },
    {
        "content": "<p>I'm not sure what you call red squiggles. I think I don't see them. I pasted you lua code at the end of my <code>plugin/lean.lua</code></p>",
        "id": 256306954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463139
    },
    {
        "content": "<p>By the way, in case we still have a couple of VScode users, I recently found the \"Error lens\" extension which makes errors <em>much</em> easier to spot.</p>",
        "id": 256307116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463204
    },
    {
        "content": "<p>You can permanently reserve space using... I think <code>:set signcolumn=yes</code> (or <code>vim.opt.signcolumn = \"yes\"</code> from your lua file)</p>",
        "id": 256307267,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463271
    },
    {
        "content": "<p>The default is \"auto\".</p>",
        "id": 256307341,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463288
    },
    {
        "content": "<p>Also beyond what Gabriel shared you probably want some navigation to move between errors (at least I like that a lot)</p>",
        "id": 256307379,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463308
    },
    {
        "content": "<p>This is what I use (the first and last line of this, though perhaps the whole thing is of interest): <a href=\"https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L21-L25\">https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L21-L25</a></p>",
        "id": 256307488,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463357
    },
    {
        "content": "<p>So when I hit <code>&lt;space&gt;n</code> it goes to the next lean line with an error on it.</p>",
        "id": 256307529,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463370
    },
    {
        "content": "<p>And <code>&lt;space&gt;N</code> goes to the previous one.</p>",
        "id": 256307563,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463385
    },
    {
        "content": "<p>If you want to copy paste those lines just note you'll need to copy paste these too: <a href=\"https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L4-L12\">https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L4-L12</a></p>",
        "id": 256307675,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463414
    },
    {
        "content": "<p>Julian, can you show what \"red squiggles\" are meant to look like?</p>",
        "id": 256308558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463786
    },
    {
        "content": "<p>I have them turned off, ha, but yeah gimme a sec</p>",
        "id": 256309684,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464228
    },
    {
        "content": "<p>They're meant to look quite similar to VSCode where the actual text has a curly line underneath it in your lean file</p>",
        "id": 256309777,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464257
    },
    {
        "content": "<p>Are you in terminal neovim or graphical?</p>",
        "id": 256309797,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464267
    },
    {
        "content": "<p>That's what I thought. I don't see them</p>",
        "id": 256309809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464272
    },
    {
        "content": "<p>I'm in a terminal</p>",
        "id": 256309827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464279
    },
    {
        "content": "<p>This is what it should look like, albeit this is Lean 4: <a href=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\">Screen-Shot-2021-10-05-at-16.12.13.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\" title=\"Screen-Shot-2021-10-05-at-16.12.13.png\"><img src=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\"></a></div>",
        "id": 256311479,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464768
    },
    {
        "content": "<p>That's in a terminal (I use terminal neovim too)</p>",
        "id": 256311503,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464781
    },
    {
        "content": "<p>I don't have this <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 256311555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464805
    },
    {
        "content": "<p>I think there's 2 things that might be preventing you from seeing them -- one is I think Lean 3 support for us still doesn't have them, but Gabriel correct me if I'm wrong</p>",
        "id": 256311563,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464808
    },
    {
        "content": "<p>I think there there's an open issue: <a href=\"https://github.com/Julian/lean.nvim/issues/97\">https://github.com/Julian/lean.nvim/issues/97</a></p>",
        "id": 256311602,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464824
    },
    {
        "content": "<p>I'm talking only about Lean 3</p>",
        "id": 256311611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464827
    },
    {
        "content": "<p>But we need to fix it in Lean 3's server</p>",
        "id": 256311615,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464830
    },
    {
        "content": "<p>Yeah so I think you won't see them</p>",
        "id": 256311628,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464838
    },
    {
        "content": "<p>Ok, that's not a big deal</p>",
        "id": 256311728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464870
    },
    {
        "content": "<p>(The other one is if your <code>$TERM</code> is misset, but yeah I think for Lean 3 they don't work AFAIK -- as I say I usually leave them off personally, I find them a bit noisy)</p>",
        "id": 256311744,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464881
    },
    {
        "content": "<p>How do you click the \"Try this\" links?</p>",
        "id": 256312340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465105
    },
    {
        "content": "<p>Oops, it's in the doc</p>",
        "id": 256312426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465145
    },
    {
        "content": "<p>Support for try this is a bit wonky, I wrote it very early on -- but right now you can hit <code>&lt;LocalLeader&gt;t</code> (from the Lean source file) to replace the first one</p>",
        "id": 256312460,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465150
    },
    {
        "content": "<p>It doesn't replace the correct thing</p>",
        "id": 256312536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465174
    },
    {
        "content": "<p>Yeah, sometimes the parsing is wrong though so if it starts to annoy you (as it often annoys me), complain :) and I'll try to make time to make it better.</p>",
        "id": 256312543,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465178
    },
    {
        "content": "<p>Right, sorry :/</p>",
        "id": 256312558,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465184
    },
    {
        "content": "<p>I had a <code>squeeze_simp at this</code> and it kept the <code>at this</code> (which became duplicated)</p>",
        "id": 256312622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465204
    },
    {
        "content": "<p>in those cases I do the hacky thing, I just go into the infoview window, yank the right thing, and replace, and then curse at the bad parsing code</p>",
        "id": 256312665,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465218
    },
    {
        "content": "<p>(The vscode extension has some heuristics which essentially are what's needed to port to Lua)</p>",
        "id": 256312925,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465340
    },
    {
        "content": "<p>Do you sometimes see <code>Error executing vim.schedule lua callback: ...t_nvimHd0Pv1/usr/share/nvim/runtime/lua/vim/lsp/util.lua:1052: Failed to switch to buffer 26</code> when trying to jump to definition?</p>",
        "id": 256313671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465627
    },
    {
        "content": "<p>I haven't seen that error personally -- how often does it happen? I take it not every time?</p>",
        "id": 256314428,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465952
    },
    {
        "content": "<p>I'm currently in a state where it happens every time</p>",
        "id": 256314706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466073
    },
    {
        "content": "<p>restarting vim fixed it</p>",
        "id": 256314789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466112
    },
    {
        "content": "<p>OK -- <a href=\"https://github.com/neovim/neovim/pull/12262\">https://github.com/neovim/neovim/pull/12262</a> possibly looks like the most relevant issue</p>",
        "id": 256314857,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633466152
    },
    {
        "content": "<p>But if it happens again I guess we can see what to do about it</p>",
        "id": 256314942,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633466179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256307116\">said</a>:</p>\n<blockquote>\n<p>By the way, in case we still have a couple of VScode users, I recently found the \"Error lens\" extension which makes errors <em>much</em> easier to spot.</p>\n</blockquote>\n<p>Very nice, thanks for mentioning this!</p>",
        "id": 256314976,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466199
    },
    {
        "content": "<p>But now you should switch to vim</p>",
        "id": 256315578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466457
    },
    {
        "content": "<p>You know that I'm on windows, right? How could you imagine I would switch to vim? :-)</p>",
        "id": 256316061,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466669
    },
    {
        "content": "<p>It's never too late to redeem</p>",
        "id": 256316114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466700
    },
    {
        "content": "<p>But I already redeemed, removing my double boot Ubuntu/Windows and switching back fulltime to Windows.</p>",
        "id": 256316214,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466752
    },
    {
        "content": "<p>Ah, but there is WSL to bring you back to linux</p>",
        "id": 256319245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633468103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> Thank you so much for all your efforts! This seems to be working very nicely.</p>",
        "id": 256395631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520000
    },
    {
        "content": "<p>My next job will be to figure out how to do LSP stuff. (E.g., <code>gd</code> doesn't do go-to-definition for me, atm.)</p>",
        "id": 256395678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520032
    },
    {
        "content": "<p>But that should be orthogonal to the lean plugin, right?</p>",
        "id": 256395726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520044
    },
    {
        "content": "<p>I think you need to set up your own mappings:</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"nb\">nnoremap</span> gD <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.declaration<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"nb\">gd</span> <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.definition<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> K <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.hover<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>leader<span class=\"p\">&gt;</span>K <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.show_line_diagnostics{show_header <span class=\"p\">=</span> false}<span class=\"p\">&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> gi <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.implementation<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">k</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.signature_help<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">wa</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.add_workspace_folder<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>wr <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.remove_workspace_folder<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>wl <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> print<span class=\"p\">(</span><span class=\"k\">vim</span>.inspect<span class=\"p\">(</span><span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.list_workspace_folders<span class=\"p\">()))&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>D <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.type_definition<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>rn <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.rename<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>ca <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.code_action<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"k\">gr</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.references<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">e</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.show_line_diagnostics<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> [<span class=\"k\">d</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.goto_prev<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> ]<span class=\"k\">d</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.goto_next<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">q</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.set_loclist<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">f</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.formatting<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 256396253,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633520333
    },
    {
        "content": "<p>I should have taken notes yesterday but I think it's not too late. When I'll be back home I'll try to precisely write down everything I did to make it work.</p>",
        "id": 256397690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633521163
    },
    {
        "content": "<p>Thanks, I'll also play around some more.</p>",
        "id": 256398506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633521601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> that would be super helpful of course. Feel free to stick them in the wiki perhaps too, which right now only has one page: <a href=\"https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending\">https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending</a></p>",
        "id": 256403004,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633523785
    },
    {
        "content": "<p>What is the idiomatic way to close the hover popups?</p>",
        "id": 256415091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633528540
    },
    {
        "content": "<p>&lt;c-w&gt;-c should work for now, though we plan to add a mapping for this</p>",
        "id": 256417409,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633529356
    },
    {
        "content": "<p><code>:q</code> also worked, but it seemed a bit barbaric</p>",
        "id": 256417490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633529390
    },
    {
        "content": "<p>Also note that this won’t work well (and neither will :q) if you try it two or more times in a row in nested tooltips, since it could plop you in any window at that point. I’ve been using the experimental hop.nvim integration recently so just noticed this myself.</p>\n<p>So yeah a mapping to properly exit tooltips is certainly much needed…</p>",
        "id": 256419159,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633530029
    },
    {
        "content": "<p>In the meantime perhaps your best bet for lean 3 is probably just to use the “x” button</p>",
        "id": 256419492,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633530158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Just pushed, <code>Shift-Tab</code> should now do it for ya</p>",
        "id": 256438290,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633536665
    },
    {
        "content": "<p>Oh. I was going to make Shift+Tab move backwards through tooltips.</p>",
        "id": 256438952,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633536924
    },
    {
        "content": "<p>Yeah I think that's what this does? It doesn't actually close it, just moves you to its parent.</p>",
        "id": 256439331,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633537066
    },
    {
        "content": "<p>Aha, ok lemme give it a shot myself then, cool.</p>",
        "id": 256439418,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633537093
    },
    {
        "content": "<p>My notes about what I did yesterday:</p>\n<h2>nvim</h2>\n<p>Install a recent nvim by going to <a href=\"https://github.com/neovim/neovim/releases\">https://github.com/neovim/neovim/releases</a><br>\ndownload <code>nvim.appimage</code> (version 0.5.1) put it somewhere where my shell can<br>\nfind it and make it executable.</p>\n<h2>node Lean server</h2>\n<p>Install Node + npm and the node package lean-language-server</p>\n<p>I use <a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a> to manage node version so I could simply run</p>\n<p><code>npm install -g lean-language-server</code></p>\n<h2>vim plugins</h2>\n<p>I use <a href=\"https://github.com/tpope/vim-pathogen\">https://github.com/tpope/vim-pathogen</a> to manage my vim packages so<br>\nI went to <code>$HOME/.config/nvim/bundle/</code> and ran</p>\n<ul>\n<li><code>git clone https://github.com/hrsh7th/nvim-compe.git</code></li>\n<li><code>git clone https://github.com/nvim-lua/plenary.nvim.git</code></li>\n<li><code>git clone https://github.com/neovim/nvim-lspconfig.git</code></li>\n<li><code>git clone https://github.com/Julian/lean.nvim.git</code></li>\n</ul>\n<h2>Configuration files</h2>\n<p><code>$HOME/.config/nvim/plugin/</code>, create a file <code>lean.lua</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">completeopt</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'menuone'</span><span class=\"p\">,</span> <span class=\"s1\">'noselect'</span> <span class=\"p\">}</span>\n\n<span class=\"nb\">require</span><span class=\"s1\">'compe'</span><span class=\"p\">.</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n  <span class=\"n\">autocomplete</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">nvim_lsp</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n    <span class=\"n\">nvim_lua</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">-- You may want to reference the nvim-lspconfig documentation, found at:</span>\n<span class=\"c1\">-- https://github.com/neovim/nvim-lspconfig#keybindings-and-completion</span>\n<span class=\"c1\">-- The below is just a simple initial set of mappings.</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_attach</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">bufnr</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_keymap</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_option</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_option</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">cmd</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"p\">)</span>\n    <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span>\n      <span class=\"n\">bufnr</span><span class=\"p\">,</span>\n      <span class=\"n\">mode</span><span class=\"p\">,</span>\n      <span class=\"n\">key</span><span class=\"p\">,</span>\n      <span class=\"s1\">'&lt;cmd&gt;lua '</span> <span class=\"o\">..</span> <span class=\"n\">cmd</span> <span class=\"o\">..</span> <span class=\"s1\">'&lt;CR&gt;'</span><span class=\"p\">,</span>\n      <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n      <span class=\"kr\">end</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'gd'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_option</span><span class=\"p\">(</span><span class=\"s1\">'omnifunc'</span><span class=\"p\">,</span> <span class=\"s1\">'v:lua.vim.lsp.omnifunc'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;n'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.goto_next{popup_opts = {show_header = false}}'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;q'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.set_loclist()'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;r'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.buf.rename()'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;K'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.show_line_diagnostics{show_header = false}'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;N'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.goto_prev{popup_opts = {show_header = false}}'</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s1\">'lean'</span><span class=\"p\">).</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n    <span class=\"n\">abbreviations</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">builtin</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"p\">},</span>\n    <span class=\"n\">lsp</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">on_attach</span> <span class=\"o\">=</span> <span class=\"n\">on_attach</span> <span class=\"p\">},</span>\n    <span class=\"n\">lsp3</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">on_attach</span> <span class=\"o\">=</span> <span class=\"n\">on_attach</span> <span class=\"p\">},</span>\n    <span class=\"n\">mappings</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">handlers</span><span class=\"p\">[</span><span class=\"s2\">\"textDocument/publishDiagnostics\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span>\n  <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">diagnostic</span><span class=\"p\">.</span><span class=\"n\">on_publish_diagnostics</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"n\">underline</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"n\">virtual_text</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">spacing</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"p\">},</span>\n    <span class=\"n\">update_in_insert</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">})</span>\n</code></pre></div>\n<p>in <code>$HOME/.config/nvim/after/ftplugin/</code>, create <code>lean3.vim</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"k\">hi</span> LspReferenceRead cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceText cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceWrite cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultError cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Red\n<span class=\"k\">hi</span> LspDiagnosticsDefaultWarning cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Yellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultInformation ctermfg<span class=\"p\">=</span>Blue\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineError <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineWarning <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineInformation <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineHint <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> link SpecialChar Character\n\n<span class=\"k\">set</span> signcolumn<span class=\"p\">=</span>yes\n</code></pre></div>",
        "id": 256457660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633543931
    },
    {
        "content": "<p>Julian, feel free to steal any of this for your documentation (or tell me I messed up).</p>",
        "id": 256458194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633544110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256313671\">said</a>:</p>\n<blockquote>\n<p>Do you sometimes see <code>Error executing vim.schedule lua callback: ...t_nvimHd0Pv1/usr/share/nvim/runtime/lua/vim/lsp/util.lua:1052: Failed to switch to buffer 26</code> when trying to jump to definition?</p>\n</blockquote>\n<p>I found a way to reproduce with 100% failure: ask to lint a file and then try to go to definition:<br>\n<a href=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\">bug_gd.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\" title=\"bug_gd.gif\"><img src=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\"></a></div>",
        "id": 256460409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633544888
    },
    {
        "content": "<p>It would be nice to have markdown syntax highlighting in comments</p>",
        "id": 256461945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633545398
    },
    {
        "content": "<p>How do you restart the lean server when it goes crazy?</p>",
        "id": 256463593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633545984
    },
    {
        "content": "<p>And when it dies I see <code>(node:581156) UnhandledPromiseRejectionWarning: server is not alive </code> but don't get the option to restart it</p>",
        "id": 256465796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633546792
    },
    {
        "content": "<p>The linting trick is far from being the only way to trigger the jump to bug, it happens really really often</p>",
        "id": 256467700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633547535
    },
    {
        "content": "<p>Thanks Patrick. At first glance definitely nothing messed up in it!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256463593\">said</a>:</p>\n<blockquote>\n<p>How do you restart the lean server when it goes crazy?</p>\n</blockquote>\n<p><code>:LspRestart</code> should work I believe. (or sometimes <code>:e</code> to just re-edit the current file).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256461945\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have markdown syntax highlighting in comments</p>\n</blockquote>\n<p>We had this and disabled it, I forgot why -- maybe just while we were decommisioning the old <code>lean.vim</code> plugin. I'll have to remind myself.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256467700\">said</a>:</p>\n<blockquote>\n<p>The linting trick is far from being the only way to trigger the jump to bug, it happens really really often</p>\n</blockquote>\n<p>Does that lint trick work in any file? I notice the one you're showing is some local changes right? When I try that on my machine in the version from the mathlib repo I can't reproduce :( even if I switch to using 0.5.0 (normally I use nightly), but we can try staring at the code to see what's happening, I don't have ideas yet.</p>",
        "id": 256470431,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633548636
    },
    {
        "content": "<p>Yes, I was obviously editing a file. I'll try on master</p>",
        "id": 256470697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548737
    },
    {
        "content": "<p>Yes, it works on master</p>",
        "id": 256471066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548894
    },
    {
        "content": "<p>I mean the bug is there on master</p>",
        "id": 256471098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548908
    },
    {
        "content": "<p>OK, that's \"good\" in some sense, though I can't reproduce here on that file, it works fine on my machine -- let me see what to do about debugging,  unless someone else either can reproduce or has an idea.</p>",
        "id": 256471308,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549016
    },
    {
        "content": "<p>:version                                                                                                                                                                                                   <br>\nNVIM v0.5.1<br>\nBuild type: RelWithDebInfo<br>\nLuaJIT 2.1.0-beta3<br>\nCompilation: /usr/bin/gcc-11 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_TS_HAS_SET_MATCH_LIMIT -O2 -g -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -<br>\nWmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=always -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FRO<br>\nM -DMIN_LOG_LEVEL=3 -I/home/runner/work/neovim/neovim/build/config -I/home/runner/work/neovim/neovim/src -I/home/runner/work/neovim/neovim/.deps/usr/include -I/usr/include -I/home/runner/work/neovim/neovim/build<br>\n/src/nvim/auto -I/home/runner/work/neovim/neovim/build/include<br>\nCompilé par runner@fv-az87-829</p>\n<p>Features: +acl +iconv +tui</p>",
        "id": 256471355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633549043
    },
    {
        "content": "<p>(Also reenabling markdown syntax seems to make neovim segfault ugh. So that probably is the reason why we disabled it. I doubt we looked at why that's happening in too much detail though.)</p>",
        "id": 256471377,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549056
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It would be nice to have markdown syntax highlighting in comments<br>\nWe had this and disabled it, I forgot why -- maybe just while we were decommisioning the old <code>lean.vim</code> plugin. I'll have to remind myself.</p>\n</blockquote>\n</blockquote>\n<p>I removed it intentionally.  We got lots of highlighting errors where the markdown syntax extended beyond the end of the comment.  My plan is to copy a small and hopefully safe set of highlighting rules from the markdown syntax file.  I just haven't gotten around to it yet.<br>\n(We have to do the same thing in the vscode extension.  If we use the default vscode markdown highlighting, then some markdown highlighting extends beyond the end of the comment, even more than it does now.  So we have a custom copy of the markdown syntax in the vscode extension where half of the rules are disabled.)</p>",
        "id": 256471561,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633549146
    },
    {
        "content": "<p>Ah.. fair enough, sounds good.</p>",
        "id": 256472141,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549387
    },
    {
        "content": "<p>Patrick given I don't have a better idea for the minute but found another vaguely similar <a href=\"https://github.com/ray-x/lsp_signature.nvim/issues/1#issuecomment-828107304\">bug report</a>, can you perhaps confirm whether you still see the issue on nightly? You can find an appimage of it at the bottom of the page here: <a href=\"https://github.com/neovim/neovim/actions/runs/1310512839\">https://github.com/neovim/neovim/actions/runs/1310512839</a></p>",
        "id": 256474233,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550216
    },
    {
        "content": "<p>At least the lint trick no longer triggers the bug!</p>",
        "id": 256475045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633550499
    },
    {
        "content": "<p>OK yeah I'm somewhat suspicious it's an 0.5 race condition... perhaps that will hold you off at least for a few days using the nightly and seeing whether you can get it to happen there too.</p>",
        "id": 256475470,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550662
    },
    {
        "content": "<p>I don't mind using the nightly, I put it in place of the 0.5.1 version that I downloaded yesterday</p>",
        "id": 256475660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633550745
    },
    {
        "content": "<p>Great!</p>",
        "id": 256475745,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550767
    },
    {
        "content": "<p>This is really cool! I'd like to make one bug report though: when tab-expanding backslash abbreviations the cursor doesn't go to the end of a sequence of bytes. For example: <code>\\</code> + <code>&lt;</code> + <code>TAB</code> results in my cursor ending up in the middle of the <code>⟨</code>, and continuing to type produces garbage like <code>鿢ꡡ</code> (that is <code>&lt;e2&gt;&lt;9f&gt;a&lt;a8&gt;</code>, apparently)</p>",
        "id": 256612055,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633625769
    },
    {
        "content": "<p>However, the issue is not a big deal to me and I'll probably switch (back) from <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17846.png\" title=\"emacs\"> to <img alt=\":neovim:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/23103.png\" title=\"neovim\"> soon :D</p>",
        "id": 256612358,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633625892
    },
    {
        "content": "<p>First, hooray! Thanks, glad you're enjoying. The bug report is unfortunately known, I tried to fix it and failed (even though I kind of partially fixed it) -- <a href=\"https://github.com/Julian/lean.nvim/issues/89\">https://github.com/Julian/lean.nvim/issues/89</a></p>",
        "id": 256614364,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633626584
    },
    {
        "content": "<p>I can try to give it another shot sometime soon but I'm still half-underwater with non-lean-related work so I don't know it'll be \"immediately\". But I know the cause, it's annoying differences in unicode-using APIs and screen-character using APIs.</p>",
        "id": 256614502,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633626629
    },
    {
        "content": "<p>The other workaround by the way is to not hit tab -- which my fingers really hate so it doesn't really work for me, but if you manage to just keep typing and not manually expand the expansion and let it autoexpand, your cursor position should be OK.</p>",
        "id": 256615580,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633627059
    },
    {
        "content": "<p>Patrick by the way I put your notes with only small modifications here: <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started\">https://github.com/Julian/lean.nvim/wiki/Getting-Started</a> and we probably can use that as a place to put some more improvement suggestions.</p>",
        "id": 256619421,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633628547
    },
    {
        "content": "<p>I'm trying to set up <code>lean.nvim</code> using nix home-manager. It is not added to nixpkgs yet which means I need to set it up myself.</p>",
        "id": 257541334,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634220557
    },
    {
        "content": "<p>I don't use home-manager, though I know others do -- but if you either need a change to the repo to support that setup or have done so yourself and can contribute it it'd definitely be welcome.</p>",
        "id": 257543781,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634221452
    },
    {
        "content": "<p>GitHub copilot support for neovim landed an early version today -- <a href=\"https://github.com/github/copilot.vim\">https://github.com/github/copilot.vim</a> -- I didn't bother personally signing up for Copilot yet, but if anyone else did, do let me know if you try it out with lean.nvim (the two wouldn't really interact I suspect, so behavior should be roughly the same as using Copilot in VSCode)</p>",
        "id": 259310457,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635370700
    },
    {
        "content": "<p>There's also tabnine support here -- <a href=\"https://github.com/tzachar/cmp-tabnine\">https://github.com/tzachar/cmp-tabnine</a> which I also have not yet tried with Lean, but should also work the same as in VSCode.</p>",
        "id": 259310519,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635370729
    },
    {
        "content": "<p>I followed what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> indicated, <br>\n<a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256457660\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean.2Envim/near/256457660</a>, with the following variations.</p>\n<p><strong>nvim</strong>. I use <a href=\"http://brew\">https://brew.sh/</a> on MacOS, hence  just add to type <code>brew install nvim</code>.</p>\n<p><strong>npm</strong>. I </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">brew</span> <span class=\"n\">install</span> <span class=\"n\">npm</span>\n<span class=\"n\">npm</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">language</span><span class=\"bp\">-</span><span class=\"n\">server</span>\n</code></pre></div>",
        "id": 259443424,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635450978
    },
    {
        "content": "<p><code>brew install lua</code> shouldn't be necessary</p>",
        "id": 259447319,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452817
    },
    {
        "content": "<p>I put a version of Patrick's notes here: <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started\">https://github.com/Julian/lean.nvim/wiki/Getting-Started</a> -- <del>but let me modify it for macOS as well quickly</del> done</p>",
        "id": 259447374,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452851
    },
    {
        "content": "<p>Can you have a look at that perhaps and tell me if what's there helps you get started? Or if not please do feel free to modify anything there (or keep putting it here and I'll do so!)</p>",
        "id": 259447421,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452877
    },
    {
        "content": "<p>I can see perhaps <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> that you may be having issues because you may have put those things in <code>~/.vim</code> instead of <code>~/.config/nvim</code> which is where neovim files generally go, but not sure if that was a typo perhaps</p>",
        "id": 259448050,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635453225
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> for looking it up. Everything was in <code>~/.nvim</code> except for <code>pathogen.vim</code> which was in <code>~/.vim/autoload</code>, but I pushed it in <code>~/.nvim</code>. In any case, I still have the following error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Erreur</span> <span class=\"n\">d</span><span class=\"bp\">é</span><span class=\"n\">tect</span><span class=\"bp\">é</span><span class=\"n\">e</span> <span class=\"n\">en</span> <span class=\"n\">traitant</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">chambert</span><span class=\"bp\">/.</span><span class=\"n\">config</span><span class=\"bp\">/</span><span class=\"n\">nvim</span><span class=\"bp\">/</span><span class=\"n\">plugin</span><span class=\"bp\">/</span><span class=\"n\">lean.lua</span> <span class=\"o\">:</span>\n<span class=\"n\">E5113</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">while</span> <span class=\"n\">calling</span> <span class=\"n\">lua</span> <span class=\"n\">chunk</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">chambert</span><span class=\"bp\">/.</span><span class=\"n\">config</span><span class=\"bp\">/</span><span class=\"n\">nvim</span><span class=\"bp\">/</span><span class=\"n\">plugin</span><span class=\"bp\">/</span><span class=\"n\">lean.lua</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">'</span><span class=\"n\">compe'</span> <span class=\"n\">not</span> <span class=\"n\">found</span><span class=\"o\">:</span>\n        <span class=\"n\">no</span> <span class=\"n\">field</span> <span class=\"n\">package.preload</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">compe'</span><span class=\"o\">]</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'./</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">beta3</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe</span><span class=\"bp\">/</span><span class=\"n\">init.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe</span><span class=\"bp\">/</span><span class=\"n\">init.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'./</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">loadall.so'</span>\n</code></pre></div>\n<p>I woud guess that <code>pathogen</code> is not loded…</p>",
        "id": 259449083,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635453710
    },
    {
        "content": "<p>Possibly -- Make sure you mean <code>~/.config/nvim</code> again, not <code>~/.nvim</code>?</p>",
        "id": 259450322,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454359
    },
    {
        "content": "<p><code>:scriptnames</code> will tell you whether pathogen loaded <code>compe</code></p>",
        "id": 259450381,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454388
    },
    {
        "content": "<p>and if you don't mind editorializing, I would personally not really recommend you use pathogen</p>",
        "id": 259450396,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454400
    },
    {
        "content": "<p>Tim Pope is a genius, and pathogen is great -- but if you're just starting I don't see why you'd want to use it, plug is way easier to use</p>",
        "id": 259450424,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>  (Headed out for a bit but yeah let me know if that still doesn't fix it, I do want to make sure this is as easy and clear as possible!)</p>",
        "id": 259450554,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454483
    },
    {
        "content": "<p>FWIW: <a href=\"https://github.com/NixOS/nixpkgs/pull/143923\">https://github.com/NixOS/nixpkgs/pull/143923</a> :)</p>",
        "id": 259807015,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635712517
    },
    {
        "content": "<p>I've tried a basic setup for a nix flake build, but got some errors: <a href=\"https://github.com/Julian/lean.nvim/issues/192\">https://github.com/Julian/lean.nvim/issues/192</a></p>",
        "id": 260267246,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1636031627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/260267246\">said</a>:</p>\n<blockquote>\n<p>I've tried a basic setup for a nix flake build, but got some errors: <a href=\"https://github.com/Julian/lean.nvim/issues/192\">https://github.com/Julian/lean.nvim/issues/192</a></p>\n</blockquote>\n<p>As <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> noticed, some dependencies are minimal for this plugin: <a href=\"https://github.com/NixOS/nixpkgs/pull/144282\">https://github.com/NixOS/nixpkgs/pull/144282</a></p>",
        "id": 260291497,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1636041537
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3jVepOWt6k6o_69p5KCMQUvY/recording-2021-11-16_09.33.42.mp4\">recording-2021-11-16_09.33.42.mp4</a> </p>\n<p>Introducing: state diffs! This makes it a bit easier to see what changes from one state to the next. Specifically, you can place down a \"diff pin\" that is diff'ed against the current state, and we also have an \"auto diff pin\" mode (which I'm using here) to make the diff pin automatically trail the cursor so that if you're precise enough about your motions it will immediately show you the diff from the previous tactic.</p>\n<p>This just uses vim's built-in text-based diff functionality, so it can get messy (as you saw near the end there). I expect we'd eventually have something more precise for Lean 4. And as always you can take this as a call for beta testers, let us know if you find any bugs!</p>",
        "id": 261679647,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1637085133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Figured I should let you know that I don't think I'll be reviewing or working much on the plugin for at least the next few weeks (unless I think of a hot new feature that helps me a lot with Lean 3) since I need to focus on getting some first formalizations into mathlib for my Master's thesis project (planning to formalize Judea Pearl's results connecting probability and graph theory). So feel free to take over for now and @ me if you're hopelessly lost on any of my code haha... And also happy new year!!</p>",
        "id": 267310357,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1641668838
    },
    {
        "content": "<p>Happy New Year! Yeah I figured you were deep in thesis land given you're usually responding with solutions before I finish figuring out what a problem is :D -- good luck, sounds good.</p>",
        "id": 267310513,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669057
    },
    {
        "content": "<p>So far not lost! Getting my bearings.</p>",
        "id": 267310520,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669067
    },
    {
        "content": "<p>(I guess a good sign of that is I haven't brutally broken anything in my mashing yet, at least to the best of what I can tell. Hopefully not chopping things up too bad.)</p>",
        "id": 267310584,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669169
    },
    {
        "content": "<p>First, I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> this plugin. Thanks for making it.</p>\n<p>Should I notice performance differences between the language server in nvim and vs code?</p>",
        "id": 272424484,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645202473
    },
    {
        "content": "<p>Glad to hear it! I'm not aware of any specific ones but if you have one in front of you do share and we can look into it</p>",
        "id": 272455895,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645217639
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> 's whims and my <del>newfound unemployment</del> insomnia, we now have tactic highlighting. How precisely it looks will depend on your color scheme, but e.g. mine looks like:</p>\n<p><a href=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\">Screen-Shot-2022-03-14-at-06.46.59.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\" title=\"Screen-Shot-2022-03-14-at-06.46.59.png\"><img src=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\"></a></div><p>Feedback of course welcome.</p>\n<p>If you want precisely what I see, you want <a href=\"https://github.com/Julian/dotfiles/blob/3e6054b74f813414e63534ff1fc57ffb8e13ae7d/.config/nvim/init.vim#L35\">this colorscheme</a> with <a href=\"https://github.com/Julian/dotfiles/blob/45c6608228301f99e6f79385e2f9a4da6eb0a652/.config/nvim/ftplugin/lean.lua#L19-L21\">this override for tactics color</a>.</p>",
        "id": 275219124,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647254937
    },
    {
        "content": "<p>that looks absolutely gorgeous!</p>",
        "id": 275219348,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647255064
    },
    {
        "content": "<p>Could it be a different color from other classes of keywords, namely declaration keywords and <code>begin end</code>/<code>by</code>?</p>",
        "id": 275219393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647255099
    },
    {
        "content": "<p>Sorry, which ones from which ones Yaël -- make <code>begin/end by</code> different from <code>with</code>? Or something else?</p>",
        "id": 275219713,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647255262
    },
    {
        "content": "<p>Going to drop support for neovim 0.5.1, which is really old, no longer supported upstream, and is randomly failing some test. I assume no one is using this (including not you anymore <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?) but if that's not the case let me know.</p>",
        "id": 275414489,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647368200
    },
    {
        "content": "<p>It has been some time since 0.6 was released, so this is fine with me.</p>",
        "id": 275414590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647368238
    },
    {
        "content": "<p>Hi, many thanks to Julian et al. for this wonderful plugin! I have a question: is it possible to switch off the infoview updates in the insert mode? I tried to achieve this by removing a line containing <code>CursorMovedI</code> in <code>lua/lean/infoview.lua</code> by somehow it didn't make any difference...</p>",
        "id": 280684275,
        "sender_full_name": "Bartosz Piotrowski",
        "timestamp": 1651264140
    },
    {
        "content": "<p>Thanks for the kind words. At the minute there isn't one, though it should be easy to add, happy to do so -- would you mind elaborating on why you want to do it (not that it sounds like a bad idea at all, just want to make sure I understand the motivation in case there's something else we should add.). I know personally I find it really annoying sometimes that the infoview clears and shows \"processing\" while I'm typing, and would prefer it leave the last update so I can stare at it. Is that the reason?</p>",
        "id": 280691414,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651267740
    },
    {
        "content": "<p>Yes, this is the reason! Sometimes when I start writing a next tactic with arguments from the context and the context suddenly disappears from the screen, I have trouble remembering the names of the hypothesis I need. Then I need to remove what I wrote and start again (or move the cursor back, but this not always restores the previous state). Apart from that, I find this a bit distracting when the infoview changes with each keystroke. I believe some people like this immediate feedback but for me personally it would be much better to update only after I finish inserting a full command.</p>",
        "id": 280738234,
        "sender_full_name": "Bartosz Piotrowski",
        "timestamp": 1651327722
    },
    {
        "content": "<p>Understood -- OK. Let me think a small bit, I think the behavior I personally want is slightly different from \"don't update at all until you exit insert mode\", it's more like \"don't show errors until I stop typing for a bit, and never clear the infoview, just keep showing the last thing that was there until a new thing is ready\"</p>",
        "id": 280748076,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341279
    },
    {
        "content": "<p>But this is definitely a reasonable request, and probably we can add something that lets both of us have what we want :)</p>",
        "id": 280748080,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341294
    },
    {
        "content": "<p>In the vscode extension there is a button to pin the infoview to a fixed cursor location, does that exist in nvim yet?</p>",
        "id": 280748369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651341647
    },
    {
        "content": "<p>Yes, we have pins (though honestly I still want to tweak how they work, which will require some discussing).</p>",
        "id": 280748457,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341742
    },
    {
        "content": "<p>You can place one with <a href=\"https://github.com/Julian/lean.nvim/#mappings\"><code>&lt;localleader&gt;x</code></a>.</p>",
        "id": 280748471,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341782
    },
    {
        "content": "<p>Feedback of course welcome on them.</p>",
        "id": 280748485,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/exact.2Fassumption.20timeout/near/270775485\">said</a>:</p>\n<blockquote>\n<p>That's the wrong place (lsp/_util), but sorry that the docs don't make this example clear. Right now you do this by:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s1\">'lean'</span><span class=\"p\">).</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n  <span class=\"c1\">-- whatever other options you set</span>\n  <span class=\"n\">lsp3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'lean-language-server'</span><span class=\"p\">,</span> <span class=\"s1\">'--stdio'</span><span class=\"p\">,</span> <span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"s1\">'-M'</span><span class=\"p\">,</span> <span class=\"s1\">'4096'</span><span class=\"p\">,</span> <span class=\"s1\">'-T'</span><span class=\"p\">,</span> <span class=\"s1\">'3000000'</span> <span class=\"p\">},</span>\n    <span class=\"c1\">-- on_attach = on_attach or whatever else you set here</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is still the correct way to pass memory configuration to language server?</p>",
        "id": 280909811,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651514313
    },
    {
        "content": "<p>Yep, it should be, and Tsvi was kind enough to add it <a href=\"https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending#passing-arguments-to-the-lean-server-timeout-and-memory-settings\">here</a> as an explicit copyable example -- is it working for you?</p>",
        "id": 280910519,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651514580
    },
    {
        "content": "<p>Hmm. Let me try again and report back. Hopefully, it is user error.</p>",
        "id": 280910606,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651514625
    },
    {
        "content": "<p>Success? Or failure?</p>",
        "id": 281012068,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651584299
    },
    {
        "content": "<p>It slightly annoys me when I need to tweak this myself, I kind of wish we had a separate <code>memory = whatever; timeout = whatever</code> table and then assembled the CLI on user behalf like vscode-lean does, but I think Gabriel had a comment somewhere on doing so that I'll have to dig up.</p>",
        "id": 281012267,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651584392
    },
    {
        "content": "<p>Ambiguous. I managed to crash the language server with the same memory/timeout settings that worked for vs code but I didn't investigate further. But before that performance seemed comparable.</p>",
        "id": 281016765,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651586389
    },
    {
        "content": "<p>It's essentially just keeping parity with the recent VSCode PR thanks to Eric, but we've now got symbol searches in Lean 3 via the same code:</p>\n<p><a href=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\">screen.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\" title=\"screen.gif\"><img src=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\"></a></div><p>(This already works out of the box in Lean 4)</p>",
        "id": 289883751,
        "sender_full_name": "Julian Berman",
        "timestamp": 1658063380
    },
    {
        "content": "<p>Is there an easy way to search for/replace unicode? Generally I would have thought there was a plugin to search/replace based on a selection.</p>",
        "id": 295087273,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661360378
    },
    {
        "content": "<p>I haven't had a ton of time for lean the past two months given my new job (though hopefully things are calming a bit) -- which is to say expanding abbreviations in cmd mode is a feature that should be reasonably easy to implement but I haven't gotten time to do so yet</p>",
        "id": 295108939,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368088
    },
    {
        "content": "<p>In the interim the easiest thing is to use a register or copy paste :/</p>",
        "id": 295109260,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368224
    },
    {
        "content": "<p>(<code>:h i_^R</code> for the former if you need it)</p>",
        "id": 295109308,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368247
    },
    {
        "content": "<p>Thanks. No rush <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 295110237,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661368588
    },
    {
        "content": "<p>OK, I made expanding abbreviations work at least in the cmdline window (even though it doesn't still with <code>/</code>). But the former means there's at least <em>an</em> easy way to search now. <code>:h q/</code> if you've never used it before, but basically type <code>q/</code> and you get a normal mode window you can type searches into, and which'll expand unicode abbreviations (as long as you enter it from a lean buffer). Feedback of course welcome. See the screencast if that's not enough info:</p>\n<p><a href=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\">abbrev.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\" title=\"abbrev.gif\"><img src=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\"></a></div>",
        "id": 295852196,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661782276
    },
    {
        "content": "<p>A minor UX tweak which anyone using <code>lean.nvim</code> may have opinions on -- I'd like to make the cursor in the infoview window be on the (first) goal line by default, rather than at the top. The main reason is that for short infoviews the goal is often off to the bottom (and invisible without scrolling) which I find annoying, and especially so for vertical displays where the infoview can be short.</p>\n<p><a href=\"https://github.com/Julian/lean.nvim/pull/279/files\">https://github.com/Julian/lean.nvim/pull/279/files</a> is the PR if you care to try it out, or otherwise if you have an opinion on the behavior (especially if you don't like the proposed change) feel free to share.</p>",
        "id": 304341236,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665946671
    },
    {
        "content": "<p>+1 for me. It’s easy to jump to the top of a buffer if needed.</p>",
        "id": 304342106,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1665947260
    },
    {
        "content": "<p>This sounds like a good change to me, I'm often annoyed by this in vscode too and have wondered if putting the goal at the top and ordering the hypotheses below it in order of last modified would be a better UX than the present default. Though I can see how this is confusing from a proof calculus perspective</p>",
        "id": 304348489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665951575
    },
    {
        "content": "<p>Unfortunately changing the list order using pure CSS results in a broken widget display, so I never tried this order seriously for a long time, it can be very helpful though on long proofs though</p>",
        "id": 304348629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665951675
    },
    {
        "content": "<p>In VScode you can control this using widgets. See <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/81f98837feab576e17053cc97623b404c019b9db\">https://github.com/leanprover-community/sphere-eversion/commit/81f98837feab576e17053cc97623b404c019b9db</a></p>",
        "id": 304348741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665951759
    },
    {
        "content": "<p>Nice! And I just checked that it does work in nvim also <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> which one would hope given that thats the idea of widgets after all, but its good to be sure.</p>",
        "id": 304350856,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665953661
    },
    {
        "content": "<p>Can we add a (deduplicated version of) this to mathlib? E.g. As a tactic file that isn't allowed to be imported within mathlib (like omega), but people could import while working if they like. I think enough people would find it useful.</p>",
        "id": 304350999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665953814
    },
    {
        "content": "<p>Is it possible to add as something accessible with <code>set_option</code>?</p>",
        "id": 304366907,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665970582
    },
    {
        "content": "<p>I've added a small section to the README on <a href=\"https://github.com/Julian/lean.nvim#semantic-highlighting\">enabling semantic highlighting in Lean 4</a> (even though support upstream is via a plugin rather than built-in to neovim for a bit longer).</p>\n<p>If you want to try it feel free to follow the instructions, and ask if you run into trouble (or edit the wiki, which is always welcome).</p>",
        "id": 313836624,
        "sender_full_name": "Julian Berman",
        "timestamp": 1670174920
    }
]