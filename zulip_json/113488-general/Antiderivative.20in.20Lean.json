[
    {
        "content": "<p>I needed the antiderivative for a project I was working on in Lean, and with some help from the community, I was able to write a couple of theorems that give the antiderivative for some basic functions. I wanted to know how contributing to mathlib works and what the community thinks the naming convention should be. Here are the names I came up with:<br>\nantiderivative of a constant function: antideriv_const<br>\nantiderivative of a natural power: antideriv_pow<br>\nantiderivative of an integer power: antideriv_zpow</p>",
        "id": 287113640,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655932082
    },
    {
        "content": "<p>Those names look reasonable; have you read our <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> guide?</p>",
        "id": 287114142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655932310
    },
    {
        "content": "<p>Just to be really sure, the antiderivative isn't a thing in mathlib yet?</p>",
        "id": 287114153,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655932314
    },
    {
        "content": "<p>And as a sidenote, how are you defining it? As a set of functions varying by a constant?</p>",
        "id": 287114235,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655932338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Antiderivative.20in.20Lean/near/287114142\">said</a>:</p>\n<blockquote>\n<p>Those names look reasonable; have you read our <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> guide?</p>\n</blockquote>\n<p>Yes, I looked through it and tried to make sure my proofs followed all the guidelines, I will of course look through it again to double check</p>",
        "id": 287115669,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655933024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/Antiderivative.20in.20Lean/near/287114153\">said</a>:</p>\n<blockquote>\n<p>Just to be really sure, the antiderivative isn't a thing in mathlib yet?</p>\n</blockquote>\n<p>I can give an example of the first one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">antideriv_const</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span>  <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">),</span>\n   <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_const_of_deriv_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">differentiable</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.sub</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">convert</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at_mul_const</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">deriv_sub</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">has_deriv_at.deriv</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf'</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"n\">z</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_add_of_sub_eq'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287115740,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655933048
    },
    {
        "content": "<p>I defined the goal to be the function plus the integrating constant (which is just the function evaluated at 0) and the hypothesises to say that f has a derivative and what that derivative is equal to</p>",
        "id": 287115874,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655933127
    },
    {
        "content": "<p>It's generally very uncommon to have hypotheses of the form <code>hf : f = ...</code> in mathlib, because the user could just rewrite by that hypothesis directly</p>",
        "id": 287116505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655933452
    },
    {
        "content": "<p>Would it be better to do an implication statement instead? I don't understand what you mean by rewriting the hypothesis directly.</p>",
        "id": 287121196,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655936235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">antideriv_const</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 287121438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655936394
    },
    {
        "content": "<p>Ah, ok I see what you mean. That makes more sense, I was misinterpreting. Let me change it to that</p>",
        "id": 287121530,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655936448
    },
    {
        "content": "<p>This is what it looks like now: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">antideriv_const</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">),</span>\n   <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_const_of_deriv_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">differentiable</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.sub</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">convert</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at_mul_const</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">deriv_sub</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">has_deriv_at.deriv</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"n\">z</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_add_of_sub_eq'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287122458,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655937084
    },
    {
        "content": "<p>I would imagine mathlib would like to be able to state things like \"if the derivative is constant within an interval then the function is linear within that interval\"; rather than requiring the derivative be constant everywhere</p>",
        "id": 287122956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655937523
    },
    {
        "content": "<p>Probably there's some fderiv generalization for \"connected\" sets</p>",
        "id": 287123106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655937637
    },
    {
        "content": "<p>The interval one could look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">antideriv_const</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 287123318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655937787
    },
    {
        "content": "<p>Someone else can likely give better advice than me here</p>",
        "id": 287123362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655937831
    },
    {
        "content": "<p>That should be straight forward to prove. I think it would follow form the proof for constant everywhere</p>",
        "id": 287126853,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1655940697
    },
    {
        "content": "<p>You could probably generalize further to any interval</p>",
        "id": 287134145,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655948586
    },
    {
        "content": "<p>Instead of a specific interval like Icc</p>",
        "id": 287134148,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655948601
    },
    {
        "content": "<p>Is there a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_within_at\">docs#has_deriv_within_at</a> ? I guess that's what you might want to use.</p>",
        "id": 287147659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655964096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113488-general/topic/Antiderivative.20in.20Lean/near/287134145\">said</a>:</p>\n<blockquote>\n<p>You could probably generalize further to any interval</p>\n</blockquote>\n<p>Do you mean instead of saying Icc a b, its just the derivative at x, where x is a member of a set of real numbers?</p>",
        "id": 287225411,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1656006555
    }
]