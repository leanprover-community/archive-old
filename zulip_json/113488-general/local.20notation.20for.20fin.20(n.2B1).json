[
    {
        "content": "<p>How do I make the following work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I need this notation a lot, and all the explicit <code>fin (n+1)</code>'s are driving me crazy. Plus all the off-by-one errors that creep into my code...</p>",
        "id": 127019139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527151114
    },
    {
        "content": "<p>hmm</p>",
        "id": 127019201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151218
    },
    {
        "content": "<p><code>[n]</code> already means something else</p>",
        "id": 127019204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151225
    },
    {
        "content": "<p>Oh -- I think that the n in quotes is a literal n</p>",
        "id": 127019208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151249
    },
    {
        "content": "<p>so at the very least you'll want <code> ` [ ` n ` ] ` </code></p>",
        "id": 127019213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151265
    },
    {
        "content": "<p>but I am not sure how over-riding already-used notation works</p>",
        "id": 127019219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151305
    },
    {
        "content": "<p>Thanks, it is working now. I didn't know about the existing notation; but using <code>local notation</code> I can override it just fine (-;</p>",
        "id": 127019343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527151509
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- list ℕ</span>\n</pre></div>",
        "id": 127019774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152288
    },
    {
        "content": "<p>you just broke list ;-)</p>",
        "id": 127019779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152303
    },
    {
        "content": "<p>at least locally</p>",
        "id": 127019780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152312
    },
    {
        "content": "<p>of course, this might be clever :-)</p>",
        "id": 127019783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152318
    },
    {
        "content": "<p>although given your smiley convention I think I would have recommended <code> ` (-; ` n ` ;-) ` </code></p>",
        "id": 127019795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527152358
    },
    {
        "content": "<p>Hmm, but I guess that the <code>local</code> prefix means that I am still safe. I'm not using lists...</p>",
        "id": 127020026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527152874
    },
    {
        "content": "<p>Johan, there are plenty of brackets available. See how I use brackets for commutators in <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L115\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L115\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L115</a> for instance</p>",
        "id": 127020289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153360
    },
    {
        "content": "<p>But <code>[n]</code> is standard in this game, isn't it?</p>",
        "id": 127020333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153381
    },
    {
        "content": "<p>Sure. <code>[a, b]</code> for commutators is also standard</p>",
        "id": 127020336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153402
    },
    {
        "content": "<p>CS : \"overloading is bad\"; Math \"but we do it so well!\"</p>",
        "id": 127020337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153403
    },
    {
        "content": "<p>But waiting for CS people to change their notation for lists won't help</p>",
        "id": 127020344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153433
    },
    {
        "content": "<p>I don't think Johan should even make the notation local</p>",
        "id": 127020345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153437
    },
    {
        "content": "<p>I think Lean should just infer which notation is being used</p>",
        "id": 127020348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153446
    },
    {
        "content": "<p>it has an elaborator, right?</p>",
        "id": 127020350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153453
    },
    {
        "content": "<p>Sometimes it does</p>",
        "id": 127020351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153458
    },
    {
        "content": "<p>Sean, I meant: \"sometimes it infers which notation is being used\", not \"sometimes it has an elaborator\"...</p>",
        "id": 127020406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153590
    },
    {
        "content": "<p>Patrick: Aww, I liked the latter interpretation better.</p>",
        "id": 127020458,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527153653
    },
    {
        "content": "<p>Man, that would be a pretty crazy Lean 4 development</p>",
        "id": 127020591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153924
    },
    {
        "content": "<p>\"we removed the elaborator to encourage users to write better code\"</p>",
        "id": 127020594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153934
    },
    {
        "content": "<p>the metamath approach</p>",
        "id": 127020596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527153954
    },
    {
        "content": "<p>This time we are happy Mario isn't working on Lean 4</p>",
        "id": 127020637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527153970
    },
    {
        "content": "<p>Slogan: How To Be Lean: Elaborate It Yourself!</p>",
        "id": 127020640,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527153982
    },
    {
        "content": "<p>I wish there was something between <code>notation</code> and <code>local notation</code>, so that modules could export notation without forcing every downstream client to see it.<br>\nFor example, something like notation which is tied to the current namespace, so that it is only visible when that namespace is open.</p>",
        "id": 127041620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527185903
    },
    {
        "content": "<p>(I think that exact idea is probably not very good, but something of that flavor.)</p>",
        "id": 127041638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527185921
    },
    {
        "content": "<p>This is exactly how lean 2 notation used to work. Why it changed, I don't know, and I'm not clear on whether to expect this to be different in lean 4.</p>",
        "id": 127041848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527186177
    },
    {
        "content": "<p>I think that lean 3 notation is not handled very well at all, this is why I avoid all notation overloading in mathlib</p>",
        "id": 127041932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527186278
    },
    {
        "content": "<p>Hmmm, ok. Does that mean that my <code>local notation</code> for <code>fin (n+1)</code> is dangerous?</p>",
        "id": 127041951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527186315
    },
    {
        "content": "<p>A local notation is fine, assuming you never use lists in that file</p>",
        "id": 127041964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527186343
    },
    {
        "content": "<p>but global notations require global coordination</p>",
        "id": 127042026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527186392
    },
    {
        "content": "<p>Ok, understood</p>",
        "id": 127042033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527186405
    }
]