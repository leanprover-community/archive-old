[
    {
        "content": "<p>I want to use <code>big.map</code> once I have the <code>map</code></p>",
        "id": 126580412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370999
    },
    {
        "content": "<p>I should push something so that you can see the context</p>",
        "id": 126580421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371026
    },
    {
        "content": "<p>and then the <code>f</code> will be applied to the functions P and F... then what?</p>",
        "id": 126580423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371037
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L343\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L343\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L343</a></p>",
        "id": 126580473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371130
    },
    {
        "content": "<p>wait, so you want the function <code>f</code> to be <code>i |-&gt; a+b-i</code>?</p>",
        "id": 126580484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371172
    },
    {
        "content": "<p>then why are you mapping with something else in the lemma?</p>",
        "id": 126580489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371187
    },
    {
        "content": "<p>The problem is <code>reverse_range'</code> is about your <code>range'</code>, with start and length, and my goal is to have the maths range', with start and end</p>",
        "id": 126580551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371272
    },
    {
        "content": "<p>Think of the problem in reverse. You want the theorem to say <code>a+b-i</code> at the end, so you want <code>f</code> to be <code>\\lam i, a+b-i</code> when you apply <code>big.map</code>; the reverse theorem just adds a <code>list.reverse</code> on the set. So you should be proving <code>reverse (range' a b) = map (λ i, a+b-i) (range' a b)</code></p>",
        "id": 126580614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371428
    },
    {
        "content": "<p>that is, without any algebraic rearrangement this is exactly what you need to fill the gap in the proof. Right?</p>",
        "id": 126580663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371476
    },
    {
        "content": "<p>Maybe I did so many detours I forgot the goal on the road</p>",
        "id": 126580668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371501
    },
    {
        "content": "<p>It seems I still need <code>a + (b + 1 - a) - i = a + b - i</code> (still assuming <code>i ∈ range' a (b + 1 - a)</code>)</p>",
        "id": 126580776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371738
    },
    {
        "content": "<p>that's easy though, it is one of the <code>add_sub</code> theorems</p>",
        "id": 126580783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371768
    },
    {
        "content": "<p>I think we already saw that one</p>",
        "id": 126580785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371788
    },
    {
        "content": "<p><code>nat.add_sub_cancel'</code>, which requires <code>a &lt;= b + 1</code></p>",
        "id": 126580824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371806
    },
    {
        "content": "<p>Note that your assumption is sufficient to prove this, but only in a circuitous fashion, do you have any more direct evidence that <code>a &lt;= b+1</code>?</p>",
        "id": 126580852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371901
    },
    {
        "content": "<p>wait</p>",
        "id": 126580897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371957
    },
    {
        "content": "<p>wait</p>",
        "id": 126580898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371975
    },
    {
        "content": "<p>your theorem is nonsense</p>",
        "id": 126580899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526371981
    },
    {
        "content": "<p>your theorem is nonsense</p>",
        "id": 126580904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526371989
    },
    {
        "content": "<p><code>reverse (range' a b) = map (λ i, a+b-i) (range' a b)</code> is not true</p>",
        "id": 126580905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372003
    },
    {
        "content": "<p>I changed all statements so many times...</p>",
        "id": 126580910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372023
    },
    {
        "content": "<p>I'm rather confused by the dual use of <code>range'</code> btw, could you give it another name? <code>range''</code> maybe?</p>",
        "id": 126580927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372042
    },
    {
        "content": "<p>You mean in the name of <code>reverse_range'</code>?</p>",
        "id": 126580953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372081
    },
    {
        "content": "<p>I mean <code>range' a b = [a, ..., b]</code> vs <code>range' a b = [a, ..., a+b]</code></p>",
        "id": 126580963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372111
    },
    {
        "content": "<p>pretty sure both functions are being called <code>range'</code></p>",
        "id": 126580968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372125
    },
    {
        "content": "<p>I don't redefine range'</p>",
        "id": 126580970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372130
    },
    {
        "content": "<p>What is your definition?</p>",
        "id": 126580973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372152
    },
    {
        "content": "<p>I use your range'</p>",
        "id": 126580974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372160
    },
    {
        "content": "<p>oh I see</p>",
        "id": 126581016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372175
    },
    {
        "content": "<p>But always in <code>range' a (b+1-a)</code></p>",
        "id": 126581018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372196
    },
    {
        "content": "<p>In that case I need to state the theorem above with your bounds</p>",
        "id": 126581019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372199
    },
    {
        "content": "<p><code>reverse (range' a (b+1-a)) = map (λ i, a+b-i) (range' a (b+1-a))</code></p>",
        "id": 126581022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372217
    },
    {
        "content": "<p>yes, this is correct</p>",
        "id": 126581026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372224
    },
    {
        "content": "<p>(not that I can prove it, but I can check it on examples)</p>",
        "id": 126581030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372238
    },
    {
        "content": "<p>But I wanted to deduce it from a version involving only  <code>range' a b</code> in LHS</p>",
        "id": 126581093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372372
    },
    {
        "content": "<p>hence the \"arithmetic\" trouble</p>",
        "id": 126581097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372381
    },
    {
        "content": "<p>But indeed this is the statement which makes <code>big.range_anti_mph</code> trivial to prove from the previous results</p>",
        "id": 126581150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372441
    },
    {
        "content": "<p>Well, there are a lot of free endpoints in the reverse theorem, maybe you need to generalize it?</p>",
        "id": 126581152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372451
    },
    {
        "content": "<p>what reverse theorem?</p>",
        "id": 126581159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372476
    },
    {
        "content": "<p>I'm thinking:</p>\n<div class=\"codehilite\"><pre><span></span>reverse (range&#39; a (n + 1)) = map (λ i, c-i) (range&#39; b (n + 1))\n</pre></div>\n\n\n<p>subject to an equation relating a,b,c</p>",
        "id": 126581276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372658
    },
    {
        "content": "<p>Actually I think we need another generalization of <code>range'</code> that varies the step too</p>",
        "id": 126581305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372759
    },
    {
        "content": "<p>that would make this easy</p>",
        "id": 126581346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526372766
    },
    {
        "content": "<p>I need to go to my office, but the situation improved a lot: <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L335-L341\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L335-L341\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L335-L341</a> Thank you very much</p>",
        "id": 126581425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372905
    },
    {
        "content": "<p>I hope I'll be able to prove that last missing lemma later if you don't have time to do it properly</p>",
        "id": 126581440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372950
    },
    {
        "content": "<p>I did it properly. Here are the lemmas I added:</p>\n<div class=\"codehilite\"><pre><span></span>theorem map_add_range&#39; (a) : ∀ s n : ℕ, map ((+) a) (range&#39; s n) = range&#39; (a + s) n\n| s 0     := rfl\n| s (n+1) := congr_arg (cons _) (map_add_range&#39; (s+1) n)\n\ntheorem range_succ_eq_map (n : ℕ) : range (n + 1) = 0 :: map succ (range n) :=\nby rw [range_eq_range&#39;, range_eq_range&#39;, range&#39;,\n       add_comm, ← map_add_range&#39;];\n   congr; exact funext one_add\n\ntheorem reverse_range&#39; : ∀ s n : ℕ,\n  reverse (range&#39; s n) = map (λ i, s + n - 1 - i) (range n)\n| s 0     := rfl\n| s (n+1) := by rw [range&#39;_concat, reverse_append, range_succ_eq_map];\n  simpa [show s + (n + 1) - 1 = s + n, from rfl, (∘),\n    λ a i, show a - 1 - i = a - succ i,\n    by rw [nat.sub_sub, add_comm]; refl]\n  using reverse_range&#39; s n\n</pre></div>",
        "id": 126582724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526375279
    },
    {
        "content": "<p>Thank you Mario! I already had the first one at <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L126\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L126\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L126</a></p>",
        "id": 126584480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526378284
    },
    {
        "content": "<p>Maybe I should learn to do induction using pattern matching</p>",
        "id": 126584495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526378330
    },
    {
        "content": "<p>I read too quickly, I thought you proved the lemma I needed</p>",
        "id": 126602871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526406173
    },
    {
        "content": "<p>But your RHS doesn't even contains <code>range'</code></p>",
        "id": 126602882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526406205
    },
    {
        "content": "<p>Proving the lemma I stated from what you proved seems to be as much work as a direct proof, no?</p>",
        "id": 126602935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526406294
    },
    {
        "content": "<p>You still have some algebra before you get to the exact version you need, but you can put <code>reverse_range'</code>, <code>range_eq_range'</code>, <code>map_add_range'</code> and <code>map_map</code> together and then do some algebra</p>",
        "id": 126610298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526415649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem range&#39;_eq_map_range (s n : ℕ) : range&#39; s n = map ((+) s) (range n) :=\nby rw [range_eq_range&#39;, map_add_range&#39;]; refl\n\nexample (a b : ℕ) : reverse (range&#39; a (b+1-a)) = map (λ i, a+b-i) (range&#39; a (b+1-a)) :=\nbegin\n  rw [reverse_range&#39;, range&#39;_eq_map_range, map_map],\n  apply map_congr, intros i H,\n  simp at *,\n  rw [nat.add_sub_add_left, nat.add_sub_cancel&#39;], {refl},\n  refine (le_total _ _).resolve_left (λ h, _),\n  rw sub_eq_zero_of_le h at H,\n  exact not_lt_zero _ H\nend\n</pre></div>",
        "id": 126610881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526416461
    },
    {
        "content": "<p>Thank you very much Mario! I'm still not convinced this is simpler than a direct attack on this lemma, but I very much relieved to have it.</p>",
        "id": 126613014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419360
    },
    {
        "content": "<p>What is this <code>resolve_left</code> thing?</p>",
        "id": 126613022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419372
    },
    {
        "content": "<p>The state at the point where you write this, <code>a b i : ℕ,\nH : i &lt; b + 1 - a\n⊢ b + 1 ≥ a</code> is typically something that could have led me to harm my computer.</p>",
        "id": 126613109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419453
    },
    {
        "content": "<p>I also note that you used <code>simp at *</code> in the middle of a proof. Isn't this frowned upon according to mathlib's docs?</p>",
        "id": 126613166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419533
    },
    {
        "content": "<p>That's actually a really subtle thing, it wouldn't work if it was <code>i &lt;= b+1-a</code></p>",
        "id": 126613168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419535
    },
    {
        "content": "<p>What do you mean it wouldn't work? The statement would still be true, right?</p>",
        "id": 126613248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419607
    },
    {
        "content": "<p>no</p>",
        "id": 126613250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419611
    },
    {
        "content": "<p>This is crazy</p>",
        "id": 126613267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419632
    },
    {
        "content": "<p>if i is zero then b+1 could be less than a</p>",
        "id": 126613279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419650
    },
    {
        "content": "<p>Did I mentioned I hate this substraction?</p>",
        "id": 126613341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419704
    },
    {
        "content": "<p>the argument is basically that when you subtract small minus large you get 0, so since i is less than the subtraction it isn't zero so it is in the proper domain</p>",
        "id": 126613362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419732
    },
    {
        "content": "<p>You could also have taken a &lt;= b+1 as an assumption to the theorem if you like</p>",
        "id": 126613460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419815
    },
    {
        "content": "<p>I still don't know what <code>resolve_left</code> stands for</p>",
        "id": 126613497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419880
    },
    {
        "content": "<p><code>or.resolve_left</code></p>",
        "id": 126613508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526419898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The type of <code>le_total _ _</code> is <code>or _ _</code></p>",
        "id": 126613559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526419933
    },
    {
        "content": "<p>So <code>(le_total _ _).resolve_left</code> means <code>or.resolve_left (le_total _ _)</code></p>",
        "id": 126613569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526419954
    },
    {
        "content": "<p>Thanks</p>",
        "id": 126613577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419962
    },
    {
        "content": "<p>to both of you</p>",
        "id": 126613580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526419969
    },
    {
        "content": "<p>So the strategy here is some variation on a case disjunction, right?</p>",
        "id": 126613601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420011
    },
    {
        "content": "<p>Is it possible to use <code>by_cases</code> instead? (I only try to understand, I don't really want to use <code>by_cases</code>)</p>",
        "id": 126613632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420042
    },
    {
        "content": "<p><code>by_cases</code> uses <code>p or not p</code> instead of any arbitrary <code>p or q</code></p>",
        "id": 126613653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420060
    },
    {
        "content": "<p>It's true that <code>le_total</code> is almost but not quite like this</p>",
        "id": 126613672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420122
    },
    {
        "content": "<p>however I don't see the difference between <code>or.resolve_left (le_total _ _)</code> and <code>le_of_not_le</code></p>",
        "id": 126613749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420251
    },
    {
        "content": "<p>I still don't understand why the goal after this <code>refine</code> is <code>false</code></p>",
        "id": 126613805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420311
    },
    {
        "content": "<p><code>refine (le_total _ _).resolve_left (λ h, _)</code></p>",
        "id": 126613808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420324
    },
    {
        "content": "<p>the expected type of <code>(λ h, _)</code> is <code>not (le _ _)</code></p>",
        "id": 126613820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420343
    },
    {
        "content": "<p>so <code>h</code> has type <code>le _ _</code></p>",
        "id": 126613832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420356
    },
    {
        "content": "<p>so <code>_</code> has type <code>false</code></p>",
        "id": 126613837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420362
    },
    {
        "content": "<p>Indeed the mysterious line has the same effect as <code>apply le_of_not_le,\n  by_contradiction h,</code></p>",
        "id": 126613899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420443
    },
    {
        "content": "<p>try <code>refine le_of_not_le (λ h, _)</code></p>",
        "id": 126613905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420464
    },
    {
        "content": "<p><code>le_of_not_le</code> would also have worked</p>",
        "id": 126613910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526420469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> entao eu ganho?</p>",
        "id": 126613915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420491
    },
    {
        "content": "<p>vc ganhou</p>",
        "id": 126613925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526420519
    },
    {
        "content": "<p>:D</p>",
        "id": 126613971,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526420530
    },
    {
        "content": "<p>The proof of <code>le_of_not_le</code> is exactly this <code>or.resolve_left le_total</code></p>",
        "id": 126614006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420607
    },
    {
        "content": "<p>But indeed Kenny's solution will probably be easier to remember for me</p>",
        "id": 126614057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420648
    },
    {
        "content": "<p>So, what should we do with all those lemmas we discussed in the last few days. Do you want me to prepare a PR? Are you doing it yourself?</p>",
        "id": 126614194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420874
    },
    {
        "content": "<p>I've got a pot brewing, you can hold onto them locally until then</p>",
        "id": 126614274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526420947
    },
    {
        "content": "<p>No problem</p>",
        "id": 126614284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526420972
    },
    {
        "content": "<p>I extracted everything from my bigop file. It's now all in <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/pending_lemmas.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/pending_lemmas.lean\">https://github.com/PatrickMassot/bigop/blob/master/src/pending_lemmas.lean</a> if you want to make sure you have everything that was discussed here</p>",
        "id": 126614634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526421415
    },
    {
        "content": "<p>It's bedtime now. Thank you very much again!</p>",
        "id": 126614653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526421463
    },
    {
        "content": "<p>I have three substractions now <span class=\"emoji emoji-1f628\" title=\"fearful\">:fearful:</span> <code>H : N ≥ 1, hyp : 0 ≤ i ∧ i &lt; N ⊢ N - (N - 1 - i) = i + 1</code></p>",
        "id": 126636219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526461509
    },
    {
        "content": "<p>Isn't it a way to first prove that we would get the same result in Z, because each substraction comes with its relevant inequality, and then <code>ring</code>?</p>",
        "id": 126636280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526461619
    },
    {
        "content": "<p>yes, of course</p>",
        "id": 126636450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526461952
    },
    {
        "content": "<p>just use <code>int.cast_sub</code></p>",
        "id": 126636462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526461986
    },
    {
        "content": "<p>how does that work?</p>",
        "id": 126636524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462082
    },
    {
        "content": "<p>that is, use <code>int.cast_inj</code> to convert the natural number equality to a Z equality, and then use <code>int.cast_add</code>, <code>int.cast_sub</code> etc lemmas to move the arrows down to the bottom</p>",
        "id": 126636528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462095
    },
    {
        "content": "<p>Looking at the statement is pretty puzzling</p>",
        "id": 126636531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462096
    },
    {
        "content": "<p>simp will do the latter part</p>",
        "id": 126636540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462110
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_self</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 126636541,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526462115
    },
    {
        "content": "<p>and the winner is...</p>",
        "id": 126636544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526462132
    },
    {
        "content": "<p>^ or just prove it directly</p>",
        "id": 126636547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462138
    },
    {
        "content": "<p>Thanks Chris, but I'm really tired of those direct proofs</p>",
        "id": 126636600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462206
    },
    {
        "content": "<p>I want a systematic method</p>",
        "id": 126636603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {i N : ℕ} (H : N ≥ 1) (hyp : 0 ≤ i ∧ i &lt; N) : N - (N - 1 - i) = i + 1 :=\nby rw [nat.sub_sub, add_comm, nat.sub_sub_self hyp.2]\n</pre></div>",
        "id": 126636607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462222
    },
    {
        "content": "<p>and the winner is...</p>",
        "id": 126636616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526462232
    },
    {
        "content": "<p>Is it poor form to use <code>exact hyp.2</code> instead of <code>exact nat.succ_le_of_lt hyp.2</code>?</p>",
        "id": 126636619,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526462248
    },
    {
        "content": "<p>meh</p>",
        "id": 126636625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462264
    },
    {
        "content": "<p>maybe you should replace <code>exact hyp.2</code> with <code>cc</code></p>",
        "id": 126636629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526462275
    },
    {
        "content": "<p>I mean, it isn't like you can't prove <code>H</code> from <code>hyp</code>...</p>",
        "id": 126636671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526462302
    },
    {
        "content": "<p>in general you should minimize your implicit definitional unfolding, but some things are too foundational to change at this point and I assume it will stay that way</p>",
        "id": 126636673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462306
    },
    {
        "content": "<p>I don't know how to use <code>int.cast_inj</code></p>",
        "id": 126636676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462341
    },
    {
        "content": "<p>oops, I mean <code>int.coe_nat_inj'</code></p>",
        "id": 126636746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462429
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {i N : ℕ} (H : N ≥ 1) (hyp : 0 ≤ i ∧ i &lt; N) : N - (N - 1 - i) = i + 1 :=\nby rw [← int.coe_nat_inj&#39;, int.coe_nat_sub, int.coe_nat_sub, int.coe_nat_sub]\n</pre></div>\n\n\n<p>produces a bunch of side conditions about less equal stuff</p>",
        "id": 126636832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462633
    },
    {
        "content": "<p>actually it's a bit messy since the side conditions themselves involve natural number subtraction, so you need to rewrite them too or else prove them directly</p>",
        "id": 126636880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462693
    },
    {
        "content": "<p>If you want to take this route I would suggest not writing natural number subtraction at all when you can help it, so that you don't need to deal with nested subtractions and the like</p>",
        "id": 126636937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462796
    },
    {
        "content": "<p>that is, just use integer subtraction and convert back to natural numbers at the end with <code>int.to_nat</code> if necessary</p>",
        "id": 126636946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526462828
    },
    {
        "content": "<p>\"not writing natural number subtraction at all\" is my greatest Lean dream</p>",
        "id": 126637007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526462954
    },
    {
        "content": "<p>A simple way to actually do that is to replace <code>m - n</code> everywhere with <code>int.to_nat (m - n)</code> (where the subtraction there is actually integer subtraction now)</p>",
        "id": 126637069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526463018
    },
    {
        "content": "<p>I need to go, I'll try tonight. Thanks you!</p>",
        "id": 126637078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526463039
    },
    {
        "content": "<p>That way the funky zero saturation operator is explicit</p>",
        "id": 126637080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526463043
    },
    {
        "content": "<blockquote>\n<p>I want a systematic method</p>\n</blockquote>\n<p>How about this: replace every occurrence of <code>X &lt;= Y</code> with <code>Y = X + c</code> and replace every occurrence of <code>X &lt; Y </code> with <code>Y = X + c + 1</code>, and then just use <code>add_sub_cancel</code> or whatever it's called -- <code>a + b - b = a</code>. It would not surprise me if this algorithm worked every time.</p>",
        "id": 126643379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526474922
    },
    {
        "content": "<p>Example: you know <code>i &lt; N</code> and you want to prove <code>N - (N - 1 - i) = i + 1</code>, well, write <code>N = i + 1 + j</code> and -- oh -- you also need <code>X - (Y + Z) = X- Y - Z</code> -- you get <code>N - (j + 1 + i - (1 + i))</code> which is <code>N - j</code> which is <code>i + 1 + j - j</code> which is <code>i + 1</code></p>",
        "id": 126643448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475056
    },
    {
        "content": "<p>I am assuming that your mathematician's goals never actually rely on the fact that a - b = 0 if b&gt;a</p>",
        "id": 126643465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475101
    },
    {
        "content": "<p>This should reduce everything to <code>nat.sub_sub</code> (if memory serves -- is it called that?) and <code>add_sub_cancel</code> or whatever it's called (not in front of Lean right now).</p>",
        "id": 126643674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475385
    },
    {
        "content": "<p>oh and associativity and commutativity of course</p>",
        "id": 126643689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475394
    },
    {
        "content": "<p>Make them simp lemmas and see if simp can do it after you make the substitutions</p>",
        "id": 126643699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475416
    },
    {
        "content": "<p>(if they're not simp lemmas already)</p>",
        "id": 126643713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475441
    },
    {
        "content": "<p>Might not be the optimal approach but it looks pretty systematic to me</p>",
        "id": 126643719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475456
    },
    {
        "content": "<blockquote>\n<p>replace every occurrence of <code>X &lt;= Y</code> with `Y = X + c</p>\n</blockquote>\n<p>This bit sounds hard to do with <code>simp</code>, since it involves casing on exists.</p>",
        "id": 126643809,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526475550
    },
    {
        "content": "<p>you just introduce another variable</p>",
        "id": 126643817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475574
    },
    {
        "content": "<p>you do all that before you start the simp</p>",
        "id": 126643823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526475591
    }
]