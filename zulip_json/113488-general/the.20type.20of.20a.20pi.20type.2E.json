[
    {
        "content": "<p>After a few months break I am revisiting lean basics. I'm looking back at dependent types.</p>\n<p>I understand why this typechecks: <code>((λ k: nat, eq.refl k) : (Π k : nat, k = k))</code> essentially we have a function, which returns a type, which depends on the parameter the function takes. We need this because we want to have a family of proofs 0 = 0, 1 = 1, etc.</p>\n<p>But I don't get why these typecheck: <code>((Π k : nat, k = k) : Prop)</code> or <code>((Π k: nat, Prop) : Type)</code>. The rule seems to be that the type signature of any pi type \"forgets\" the parameters that the type on the left depends on  and behaves as if it was a simple type.</p>\n<p>Are there any particular reasons of why that is or is it just the way it is?</p>",
        "id": 123762898,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521140911
    },
    {
        "content": "<p>Yes. Let's look at the non-dependent case first. Let's first notice that everything has a type:</p>\n<div class=\"codehilite\"><pre><span></span>(λ n : ℕ, n+1) : ℕ → ℕ\nℕ → ℕ : Type 0\nType 0 : Type 1\n-- and so on\n</pre></div>",
        "id": 123763082,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521141206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111040\">@Adam Kurkiewicz</span> if A has type u and B has type v, then <code>A -&gt; B</code> has type <code>max u v</code></p>",
        "id": 123763084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521141207
    },
    {
        "content": "<p>And <code>ℕ → ℕ</code> is basically syntactic sugar for <code>Π n : ℕ, ℕ</code></p>",
        "id": 123763161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521141357
    },
    {
        "content": "<blockquote>\n<p>The rule seems to be that the type signature of any pi type \"forgets\" the parameters that the type on the left depends on and behaves as if it was a simple type.</p>\n</blockquote>\n<p>That's correct. </p>\n<blockquote>\n<p>Are there any particular reasons of why that is or is it just the way it is?</p>\n</blockquote>\n<p>For one thing it is useful. But let's look at an alternative:</p>\n<div class=\"codehilite\"><pre><span></span>(Π k : nat, k = k) : nat -&gt; Prop\n</pre></div>\n\n\n<p>That means that that proposition is not true on its own. It would be true about a given number. But that's not the case. <code>Π</code> is the same as <code>∀</code>. The statement is not \"if you give me a number, I'll state that it is equal to itself\". It is \"every number is equal to itself\". If you want the first, you'll use <code>(λ k : nat, k = k) : nat -&gt; Prop</code>. It is not an assertion on its own. You feed it a natural number and then the result will state something about that natural number.</p>",
        "id": 123763501,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521141899
    },
    {
        "content": "<p>I see. So it doesn't forget the type of the parameter, it just takes the maximum of the type of the parameter and the type of the type. So <code>Prop</code> is effectively <code>Type -1</code>, right? And since <code>nat : Type 0</code>, then <code>k : Type -1</code> and <code>k = k : Type -1</code> is <code>Type -1</code>, so the total result is <code>Type max -1 -1</code>, which is <code>Type -1</code>, which is <code>Prop</code>. This might be a little bit barbarian, but I think I'm getting it.</p>",
        "id": 123763607,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521142065
    },
    {
        "content": "<p>A less barbarian way of seeing is that <code>Prop</code> and <code>Type</code> are both syntactic sugar for <code>Sort</code>: <code>Prop = Sort 0</code> and <code>Type u = Sort (u+1)</code></p>",
        "id": 123763673,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521142167
    },
    {
        "content": "<p>I am surprised you would care so much about universes (given that you are a beginner I assume). This information is not very useful in my opinion :).</p>",
        "id": 123763727,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521142217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I actually do not think that my original statement was correct. The type of the parameter is not forgotten, it's the maximum like <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> said, for example this typechecks <code>#check ((Π k: Type 0, Prop) : Type 1)</code></p>",
        "id": 123763751,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521142279
    },
    {
        "content": "<p>Really? For small proofs maybe but as soon as you have types within types, you have to start caring about universes</p>",
        "id": 123763757,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521142295
    },
    {
        "content": "<p>Not quite. You can rely on <code>Type*</code> to do the work for you.</p>",
        "id": 123763803,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521142343
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I actually do not think that my original statement was correct. The type of the parameter is not forgotten, it's the maximum like <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> said, for example this typechecks <code>#check ((Π k: Type 0, Prop) : Type 1)</code></p>\n</blockquote>\n<p>That's true, in that sense, it does not forget. More specifically, it does not forget the universe of the parameter. The type itself becomes unavailable though</p>",
        "id": 123763826,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521142440
    },
    {
        "content": "<p>I've largely ignored universes so far, and most of the underlying type theory, but given that I might be teaching lean to others from next semester I'm trying to make sure I know at least a little bit of the foundations.</p>",
        "id": 123763874,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521142500
    },
    {
        "content": "<p>Interesting detail:</p>\n<div class=\"codehilite\"><pre><span></span>#check ((Π k: Type 7, k = k) : Prop)\n</pre></div>\n\n\n<p>If the result type is Prop, the whole thing can stay in Prop</p>",
        "id": 123763883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521142517
    },
    {
        "content": "<p>I think you've done well to ignore them for the most part :P!</p>",
        "id": 123763889,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521142538
    },
    {
        "content": "<p>I think I agree. I don't particularly like to have to specify them. I wonder what justify that design choice</p>",
        "id": 123763932,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521142586
    },
    {
        "content": "<p>I use <code>Type*</code> and only think about it once I run into issues. From my experience, I find it not too difficult to fix them post-facto. I have yet to encounter a case where I wish I had considered it beforehand. But perhaps I avoid the kinds of things that might require more universe-thought. I mostly write certificates of functional programs.</p>",
        "id": 123764002,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521142726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> hmm... So it turns out it's not <code>max u v</code>after all? It can't be, since in this case it would have to be <code>Type 7</code> as opposed to <code>Prop</code>?</p>",
        "id": 123764081,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521142844
    },
    {
        "content": "<p>It's actually <code>imax u v</code> which is 0 if <code>v</code> is 0, and otherwise <code>max u v</code>.</p>",
        "id": 123764133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521142923
    },
    {
        "content": "<p>&lt;deleted&gt;</p>",
        "id": 123764146,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521142954
    },
    {
        "content": "<p>Useful to know mainly because you might see <code>imax</code> in Lean output/error messages and wonder what it means, I think.</p>",
        "id": 123764165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521143036
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, this will definitely come useful at some point.</p>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I really like your example with natural numbers. I think it's another productive way of thinking about Pi types.</p>",
        "id": 123764339,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521143303
    },
    {
        "content": "<p>Do you mean that <code>nat -&gt; Prop</code> example?</p>",
        "id": 123764351,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521143356
    }
]