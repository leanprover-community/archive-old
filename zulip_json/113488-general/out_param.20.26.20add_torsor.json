[
    {
        "content": "<p>I'm <a href=\"https://github.com/leanprover-community/mathlib/compare/affine-out-param\">trying</a> to make the <code>G</code> argument of <code>add_torsor G P</code> an <code>out_param</code> so that Lean will automatically find the tangent space for an affine space. Sometimes it works but sometimes it fails. E.g.,  I had to leave <code>G</code> as an explicit argument of <code>vsub_set</code> and it fails to deal with <code>vector_span</code>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Is it a bug or a feature?</p>",
        "id": 204806734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595515518
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> / where does it fail?</p>",
        "id": 204806871,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595515568
    },
    {
        "content": "<p>The code in the branch fails at <code>vsub_set_subset_vector_span</code> in <code>linear_algebra/affine_space</code>.</p>",
        "id": 204812737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595518087
    },
    {
        "content": "<p>With or without up arrow it fails to figure out that <code>vector_span k s</code> is a <code>submodule k V</code>, not <code>submodule k ?</code>.</p>",
        "id": 204812825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595518140
    },
    {
        "content": "<p>If I remove <code>variable (G)</code> from <a href=\"https://github.com/leanprover-community/mathlib/compare/affine-out-param#diff-18d1caa988490eead83b1d692f8bd89fR220\">here</a>, then it fails on <code>vsub_set_empty</code>.</p>",
        "id": 204813046,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595518240
    },
    {
        "content": "<p>This is probably because while <code>V</code> is an out param, the type class parameter <code>[add_comm_group V]</code> is not an out param.</p>",
        "id": 204813918,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595518689
    },
    {
        "content": "<p>I added more <code>out_param</code>s, now instance resolution in the LHS of <code>vector_span_def</code> fails. It says that <code>_inst_4</code> is not defeq to what it's looking for. I don't understand why.</p>",
        "id": 204817229,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595520309
    },
    {
        "content": "<p>This is also unclear to me.</p>",
        "id": 204817513,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595520429
    },
    {
        "content": "<p>It's because you declared it as an <code>abbreviation</code></p>",
        "id": 206258228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596808003
    },
    {
        "content": "<p>if it's a <code>class</code> then it works fine</p>",
        "id": 206258267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596808026
    },
    {
        "content": "<p>In fact even <code>@[class] abbreviation</code> works</p>",
        "id": 206258333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596808058
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">bar</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 206258735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596808303
    },
    {
        "content": "<p>I think what's happening is that by declaring it an <code>abbreviation</code> for a class, lean reuses the instance cache for <code>bar</code>, which means it's searching for <code>bar ? B</code> when only <code>foo k A B</code> is in the context (it apparently doesn't unfold the hypotheses too)</p>",
        "id": 206258871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596808368
    },
    {
        "content": "<p>Thank you for the explanation!</p>",
        "id": 206275872,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596816422
    },
    {
        "content": "<p>Do you think this will be enough to unblock you?</p>",
        "id": 206276160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596816587
    },
    {
        "content": "<p>I'll try tonight.</p>",
        "id": 206276826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596816921
    },
    {
        "content": "<p>I wonder if I'll have to duplicate all <code>add_torsor</code> instances as <code>affine_space</code> instances.</p>",
        "id": 206277001,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596817001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I made it compile with <code>notation</code>. I tried <code>@[class] abbreviation</code> and it failed.</p>",
        "id": 206356875,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596908249
    },
    {
        "content": "<p>CI should build oleans in 10-20 minutes. If you can checkout <a href=\"https://github.com/leanprover-community/mathlib/tree/affine-out-param\">https://github.com/leanprover-community/mathlib/tree/affine-out-param</a> and make it build with <code>class</code> or <code>@[class] abbreviation</code>, this would be wonderful.</p>",
        "id": 206356927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596908364
    },
    {
        "content": "<p>But I guess we can just use <code>add_torsor</code> everywhere.</p>",
        "id": 206356930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596908389
    },
    {
        "content": "<p>I wish we had a way to make two names completely equivalent.</p>",
        "id": 206357257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596908927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> What do you think about using <code>add_torsor</code> directly?</p>",
        "id": 206359175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596912179
    },
    {
        "content": "<p>I suggest you don't use <code>abbreviation</code> (why are you using it here in the first place?). Shouldn't <code>@[class] def</code> be just as good?</p>",
        "id": 206359386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596912534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">affine_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n</code></pre></div>\n\n\n<p>doesn't work</p>",
        "id": 206359595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596912922
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">125</span><span class=\"o\">:</span><span class=\"mi\">66</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span>\n<span class=\"err\">⊢</span> <span class=\"n\">add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 206359601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596912936
    },
    {
        "content": "<p>(at the definition of <code>vector_span</code>)</p>",
        "id": 206359610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596912952
    },
    {
        "content": "<p>Linear algebra uses <code>abbreviation</code>s to get automatic upgrades from <code>semimodule</code> to <code>module</code>.</p>",
        "id": 206359671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596913056
    },
    {
        "content": "<p>I also tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">abbreviation</span> <span class=\"n\">affine_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">abbreviation</span> <span class=\"n\">affine_space</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 206359881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596913420
    },
    {
        "content": "<p>Just declare instances for what you want</p>",
        "id": 206360395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596914231
    },
    {
        "content": "<p>I don't think you should try to do \"automatic upgrading\" because the classes differ in what's an out_param</p>",
        "id": 206360399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596914262
    },
    {
        "content": "<p>I don't want them to differ at all.</p>",
        "id": 206360868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596915187
    },
    {
        "content": "<p>Should some combination of <code>out_param</code>s work?</p>",
        "id": 206360885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596915239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/out_param.20.26.20add_torsor/near/206359175\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> What do you think about using <code>add_torsor</code> directly?</p>\n</blockquote>\n<p>Of course  I prefer reading <code>affine_space</code>, but if the decision is between a nice name vs nice elaboration then I prefer nice elaboration of course.</p>",
        "id": 206360924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596915251
    },
    {
        "content": "<p>I suggest using <code>add_torsor</code> for now, and reevaluate this decision after migration to Lean 4.</p>",
        "id": 206360929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596915296
    },
    {
        "content": "<p>I based the use of <code>abbreviation</code> directly on how it's used for <code>vector_space</code>, to give a familiar name in that particular context. If <code>abbreviation</code> causes problems here, using <code>add_torsor</code> seems reasonable, but the module doc string would need some careful revisions, to say that affine spaces are represented using <code>[module k V] [add_torsor V P]</code> rather than defining <code>affine_space</code>, and to say why things are implemented that way. Likewise if Euclidean affine spaces need to use <code>normed_add_torsor</code> rather than <code>euclidean_affine_space</code> to get the benefit of <code>out_param</code>. (Making <code>V</code> implicit in the Euclidean context would mean the notation for angles becomes <code>∠ A B C</code>, as in normal informal geometry, rather than the present <code>∠ V A B C</code>.)</p>",
        "id": 206361563,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596916186
    },
    {
        "content": "<p>If <code>add_torsor</code> is used directly, it should still be possible to use <code>affine_space</code> as a namespace where appropriate. The documentation of mathlib naming conventions says very little about when to put things in a namespace and I don't think I've been very consistent about it for affine spaces. Some results for affine subspaces are in the <code>affine_subspace</code> namespace, some in the <code>affine_space</code> namespace. For results about affine independence I didn't put them in a namespace at all, since names involving <code>affine_independent</code> seem globally unambiguous enough.</p>",
        "id": 206361856,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596916756
    },
    {
        "content": "<p>The practical rule comes from the dot notation: put things in the namespace of the main assumption or ingredient.</p>",
        "id": 206361921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596916844
    },
    {
        "content": "<p>That's why <code>affine_subspace.direction</code> has to be in that namespace, for example, and why <code>weighted_vsub</code> is in the <code>finset</code> namespace. It seems less obviously relevant for many of the lemmas, but maybe e.g. those with <code>affine_independent</code> as a hypothesis should actually be in a <code>affine_independent</code> namespace to allow use of dot notation there.</p>",
        "id": 206362003,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596916944
    },
    {
        "content": "<p>One other question occurs to me: does use of <code>out_param</code> for <code>add_torsor</code> have implications for the possibility of relating additive and multiplicative actions and torsors with <code>to_additive</code> in future?</p>",
        "id": 206362032,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596917022
    },
    {
        "content": "<p>In the same branch I'm removing <code>add_action</code>, <code>add_torsor</code>, and <code>affine_space</code> namespaces.</p>",
        "id": 206362037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596917038
    },
    {
        "content": "<p>Because names use <code>vadd</code>/<code>vsub</code> anyway, so there are no name conflicts.</p>",
        "id": 206362082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596917086
    },
    {
        "content": "<p>I think at least <code>simplex</code> (currently <code>affine_space.simplex</code>) could do with being in a namespace, there are lots of different concepts that get called a simplex so it seems questionable to claim <code>_root_.simplex</code> for this particular one. Likewise <code>triangle</code>.</p>",
        "id": 206362090,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1596917124
    },
    {
        "content": "<p>Pushed angles without <code>V</code></p>",
        "id": 206362776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596918250
    }
]