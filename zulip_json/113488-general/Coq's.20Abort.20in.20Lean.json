[
    {
        "content": "<p>What is Lean's equivalent of Abort in Coq?</p>",
        "id": 135406580,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539008575
    },
    {
        "content": "<p>what does it do?</p>",
        "id": 135406598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Abort terminates (gives up on) a failing or incomplete proof (whereas Coq's \"Admitted\" gives up and accepts the proposition being proved as an axiom, like sorry in Lean).</p>",
        "id": 135406720,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539008722
    },
    {
        "content": "<p>Lean doesn't have this. I guess it makes more sense with the line-based input approach to coq</p>",
        "id": 135406812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008778
    },
    {
        "content": "<p>but in lean once you have written <code>def</code> you are committed to either finishing it or getting an error or warning</p>",
        "id": 135406836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008809
    },
    {
        "content": "<p>For pedagogical purposes in any case it'd be good to have, as one can then exhibit proof strategies that don't work out. Students can see how the tactic state evolves until one gets stuck and gives up.</p>",
        "id": 135407728,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539009535
    },
    {
        "content": "<p>Usually we use <code>sorry</code> for that</p>",
        "id": 135407747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539009556
    },
    {
        "content": "<p>Yes but sorry accepts the proposition axiomatically, which in general is not what one wants to do. E.g., when showing why P \\or \\not P isn't provable without em.</p>",
        "id": 135418308,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539020646
    },
    {
        "content": "<p>You can use <code>run_cmd</code>: it allows you to run tactics and failing to prove the goal has no consequences</p>",
        "id": 135418336,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539020715
    },
    {
        "content": "<p><code>example</code> may be more appropriate in that case</p>",
        "id": 135418499,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539020940
    },
    {
        "content": "<p><code>example</code> has the down side that, if you use <code>sorry</code>, it still produces warnings.</p>",
        "id": 135418627,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539021071
    },
    {
        "content": "<p>There is always the trick used in the tests: use <code>sorry</code> in a <code>have</code> subproof that doesn't get used</p>",
        "id": 135418882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539021371
    },
    {
        "content": "<blockquote>\n<p>There is always the trick used in the tests: use <code>sorry</code> in a <code>have</code> subproof that doesn't get used</p>\n</blockquote>\n<p>There are work-arounds, albeit with some compromises, but wouldn't it be cleaner to just provide an \"abort\" tactic. The context for this suggestion is not expert use of Lean but rather early undergraduate education, where every inelegant complexity causes additional pain and suffering amongst students.</p>",
        "id": 135478380,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539099459
    },
    {
        "content": "<p>Note that <code>Abort</code> is not a tactic but a built-in command in Coq. We would need to change the <code>begin...end</code> syntax and parts of the elaborator for something similar.</p>",
        "id": 135479771,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539100753
    },
    {
        "content": "<p>From what (little) I know about Coq, <code>Abort</code> isn't a tactic, it's a top-level command. I don't think there's a way to implement it as a tactic in Lean 3, at least not in a way that mimics the usage of the Coq command. This seems like the kind of thing you might be able to do in Lean 4.</p>",
        "id": 135479775,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539100755
    },
    {
        "content": "<p>Nice timing :)</p>",
        "id": 135479780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539100765
    },
    {
        "content": "<p>Haha, good timing!</p>",
        "id": 135479782,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539100767
    },
    {
        "content": "<p>:D</p>",
        "id": 135479784,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539100772
    },
    {
        "content": "<p>Amazing duo</p>",
        "id": 135479789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539100785
    },
    {
        "content": "<p>To keep repeating Sebastian, I agree that using <code>example</code> is the Lean-style way to do this.</p>",
        "id": 135479859,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539100815
    },
    {
        "content": "<p>To show a failing proof attempt, start an example and don't finish it.</p>",
        "id": 135479876,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539100840
    },
    {
        "content": "<p>No, the Lean way is to finish the proof.</p>",
        "id": 135479889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539100860
    },
    {
        "content": "<p>There's no problem leaving an attempt unfinished like there is in Coq, it doesn't stop the processing of future declarations.</p>",
        "id": 135479907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539100871
    },
    {
        "content": "<p>Even if <code>==</code> suddenly appear in the proof</p>",
        "id": 135479921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539100892
    },
    {
        "content": "<p>What if we treated <code>abort</code> like <code>sorry</code> except that, when it appears in an example, it doesn't produce warnings?</p>",
        "id": 135494007,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539114775
    },
    {
        "content": "<blockquote>\n<p>What if we treated <code>abort</code> like <code>sorry</code> except that, when it appears in an example, it doesn't produce warnings?</p>\n</blockquote>\n<p>It would need both (1) to not produce warnings, and (2) to not accept the goal axiomatically.</p>\n<p>And, yes,  to Rob L. Abort is a command, not a tactic, in Coq.</p>\n<p>By the way, Coq's command, analogous to Lean's sorry, is Admitted. It gives up on the current proof and accepts the goal axiomatically. By contrast, Abort gives up on the current proof but discards rather than accepts the current goal.</p>",
        "id": 135516025,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1539142043
    },
    {
        "content": "<p>I think examples can't be invoked from other proofs so that part is already there.</p>",
        "id": 135516089,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539142199
    },
    {
        "content": "<p>I've only used Coq for  simple things. Specifically, I don't know how <code>Abort</code> works in nested proofs like they describe in the manual. Here's something that very roughly approximates its behavior in the top-level case. If you use <code>example</code>, the environment will be the same before and after processing this, and there are no warnings. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">abort</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">abort</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">all_goals</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">abort</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">abort</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135528161,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539161914
    },
    {
        "content": "<p>But I still think the Lean-style way to do this is to just leave the example unfinished.</p>",
        "id": 135528193,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539161990
    }
]