[
    {
        "content": "<p>Here's my example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2.adj</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m_2.adj</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>\n<p>and doesn't fail without the import.<br>\nPresumably this is from the symm attribute on <code>simple_graph.edge_symm</code> - should this be removed?</p>",
        "id": 229242046,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615174042
    },
    {
        "content": "<p>Yes, that attribute should be removed.  There are no uses of <code>symmetry</code> when it comes to <code>simple_graph.adj</code>, but if it were somehow useful a fix would be to have a lemma that's an implication rather than a bi-implication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[symm]</span> <span class=\"kd\">lemma</span> <span class=\"n\">edge_symm'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">G.sym</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 229252704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1615183988
    },
    {
        "content": "<p>Done both in <a href=\"https://github.com/leanprover-community/mathlib/issues/6736\">#6736</a></p>",
        "id": 230718741,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615997479
    }
]