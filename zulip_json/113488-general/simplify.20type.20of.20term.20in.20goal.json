[
    {
        "content": "<p>My goal contains an expression like <code>g ≫ f</code>. If I hover over <code>f</code> and <code>g</code> in VSCode, I see that <code>g : X ⟶ Y</code> and <code>f : Y ⟶ really_complicated_stuff</code>. I know that <code>really_complicated_stuff = simple_stuff</code>. I even have a simp lemma for that. What I want to do is do a rewrite using a lemma <code>g ≫ f = ...</code>, which is stated for <code>f : Y ⟶ simple_stuff</code>. However, when I try that, Lean complains that it can't find <code>g ≫ f</code> in the goal, even when the pretty printer literally prints <code>g ≫ f</code>. What can I do?</p>\n<p>If I do <code>set f' := f with h</code>, Lean even can't <code>rw ←h</code> because of type check difficulties. Please advise.</p>",
        "id": 290199483,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658299645
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 290199739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658299885
    },
    {
        "content": "<p>Hmm, your example doesn't seem to typecheck. Do you want <code>f : Y \\hom simple_stuff</code>? You are talking about <code>f : simple_stuff</code> halfway through your message.<br>\nI think it is hard to debug this without more details.</p>",
        "id": 290199745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658299894
    },
    {
        "content": "<blockquote>\n<p>even when the pretty printer literally prints <code>g ≫ f</code>. What can I do?</p>\n</blockquote>\n<p>You can use <code>set_option pp.all true</code> to check a little more thoroughly whether they're really the same</p>",
        "id": 290199872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658300008
    },
    {
        "content": "<p>Fixed typo in question</p>",
        "id": 290200001,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658300121
    },
    {
        "content": "<p>Though I do not have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> as well, I can confirm this occurs on me from time to time, where I would like to dsimp on the type of the terms. And it is quite annoying to fix, usually resulting in some ugly change or erw.</p>",
        "id": 290200018,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658300143
    },
    {
        "content": "<p>(Hopefully the <code>really_complicated_stuff = simple_stuff</code> is defeq. It's evil to talk about equality of objects otherwise.)</p>",
        "id": 290200092,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658300199
    },
    {
        "content": "<p>Yes they are defeq. The equality is a simp lemma proved with <code>rfl</code>. I managed to circumvent the problem by making <code>f</code> start out as <code>Y ⟶ simple_stuff</code> rather than <code>Y ⟶ complicated_stuff</code></p>",
        "id": 290296758,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658350215
    }
]