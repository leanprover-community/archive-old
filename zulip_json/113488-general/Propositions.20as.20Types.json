[
    {
        "content": "<p>I'm not clear why the definition of <code>p1</code> below is not a type error. What can it possibly mean for <code>p1</code> to be a proof of a proof of a proposition?</p>\n<div class=\"codehilite\"><pre><span></span>constant U : Type\nconstant u0 : U\nconstant u1 : u0 -- type error\n\nconstant p0 : Prop\nconstant p1 : p0 -- no type error!\nconstant p2 : p1 -- type error\n</pre></div>\n\n\n<p>I thought of <code>U</code> and <code>Prop</code> as being of the same \"universe level\", but apparently they're not.</p>",
        "id": 125127870,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523838595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"113073\">@Lyle Kopnicky</span> Before I answer, do you mind editing the topic to your post (and don't forget to select \"Change later messages to this topic\"). Maybe set it to \"Propositions as Types\"</p>",
        "id": 125127979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523838805
    },
    {
        "content": "<p>Let's have a look at what kind of beast <code>Prop</code> is. <code>Prop</code> is actually synonymous with <code>Sort 0</code>, that is, a sort in universe 0. <code>Sort 0</code> has type <code>Sort 1</code> and <code>Sort 1</code> has type <code>Sort 2</code>:</p>\n<div class=\"codehilite\"><pre><span></span>Prop : Sort 1\nSort 1 : Sort 2\nSort 2 : Sort 3\n...\n</pre></div>",
        "id": 125128027,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523838941
    },
    {
        "content": "<p>For <code>e0 : e1</code> (a type judgement) to make sense, e1 must be a sort, i.e. there must be a universe <code>u</code> such that <code>e1 : Sort u</code>.</p>",
        "id": 125128076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839030
    },
    {
        "content": "<p>Thanks!</p>\n<p>We can see that <code>p1 : p0</code> satisfies this constraint because <code>p0 : Sort 0</code>. Similarly, <code>u0 : U</code> because there is a <code>u</code> (1), such that <code>U : Sort u</code>. Note that <code>Type u = Sort (u+1)</code></p>",
        "id": 125128126,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839148
    },
    {
        "content": "<p>We have the same problem for <code>u1 : u0</code> as for <code>p1 : p0</code></p>",
        "id": 125128133,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839189
    },
    {
        "content": "<blockquote>\n<p>I'm not clear why the definition of <code>p1</code> below is not a type error. What can it possibly mean for <code>p1</code> to be a proof of a proof of a proposition?</p>\n</blockquote>\n<p>No, <code>p0</code> is the proposition and <code>p1</code> is the proof.</p>",
        "id": 125128230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523839337
    },
    {
        "content": "<p>If we omit universes for a moment, a type <code>t</code> is a term (or expression) such that <code>t : Sort</code> and that allows you to type expressions <code>e</code>: <code>e : t</code>.</p>\n<p>That means that <code>Sort</code> must somehow be a type. This is where universes become important. If we still ignore them we have <code>Sort : Sort</code> but that invites paradoxes so we have to rank sorts: <code>Sort u : Sort (u+1)</code></p>",
        "id": 125128238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839384
    },
    {
        "content": "<p>Ah, that makes sense, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , thanks.</p>",
        "id": 125128244,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523839423
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> . If <code>Prop</code> is <code>Sort 0</code>,  what sort does <code>p0</code> have? Is it <code>Sort (-1)</code>?</p>",
        "id": 125128296,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523839533
    },
    {
        "content": "<p><code>p0</code> is not a sort</p>",
        "id": 125128337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523839603
    },
    {
        "content": "<p>Is <code>Type</code> a sort?</p>",
        "id": 125128345,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523839655
    },
    {
        "content": "<p>Type = Sort 1</p>",
        "id": 125128383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523839683
    },
    {
        "content": "<p>I see why you would think that. <code>Sort u</code> is inhabited by sorts. They are not necessarily inhabited by sorts themselves.</p>\n<blockquote>\n<p>p0 is not a sort</p>\n</blockquote>\n<p>p0 is a sort but it is not equal to <code>Sort u</code> for any u.</p>",
        "id": 125128384,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839685
    },
    {
        "content": "<p>what <strong><em>sort</em></strong> of nonsense is this</p>",
        "id": 125128390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523839714
    },
    {
        "content": "<p>It is a sort, it can be on the right hand side of <code>:</code></p>",
        "id": 125128395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839745
    },
    {
        "content": "<p>It is not a type of sorts though</p>",
        "id": 125128399,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523839765
    },
    {
        "content": "<p>now I'm having jamais vu on sort</p>",
        "id": 125128401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523839793
    },
    {
        "content": "<p>I guess I am thinking that everything has some \"universe level\", where <code>Sort 1</code> is level 1, <code>Sort 2</code> is level 2, etc.  Then if you can write <code>a : b</code>, <code>a</code> is one level lower than <code>b</code>. And you bottom out at some point, so that you can no longer write <code>a : b</code> if <code>b</code>'s level is too low.</p>",
        "id": 125128459,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523839874
    },
    {
        "content": "<p>So, if <code>Type</code> is at level 1, <code>U</code> is at level 0 (though it's not synonymous with <code>Sort 0</code>), and <code>u0</code> is at level -1, and we can't write <code>u1 : u0</code> because <code>u0</code> has too low of a level. Does that make any sense?</p>",
        "id": 125128525,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840002
    },
    {
        "content": "<p>You could think of it that way, that's true. It's important to note that \"too low a level\" makes a term not a type. We normally reserve that universe terminology for types. There is a problem with thinking of level -1 though</p>",
        "id": 125128530,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840025
    },
    {
        "content": "<p>I think of <code>u0</code> as the value level.</p>",
        "id": 125128574,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840058
    },
    {
        "content": "<p>Even though that can be confusing because types are values too.</p>",
        "id": 125128578,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840079
    },
    {
        "content": "<p>So, <code>Sort 0</code> is the lowest level of types, and just below that is the value level. Things that are not types.</p>",
        "id": 125128594,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840131
    },
    {
        "content": "<p>We can have some data <code>d</code> of type <code>t</code> with <code>t : Sort 3</code>. You would probably think of it as being in universe 2 but <code>d</code> is still not the type of any other terms.</p>",
        "id": 125128595,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840139
    },
    {
        "content": "<p>OK, yeah, I guess my analogy breaks down there.</p>",
        "id": 125128648,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840214
    },
    {
        "content": "<p>But what confuses me is, if <code>Prop : Sort 1</code>, then <code>Prop</code> would be at the same level as <code>U</code>... level 0. So you should be able to have <code>p0 : Prop</code>, but not <code>p1 : p0</code>.</p>",
        "id": 125128703,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840292
    },
    {
        "content": "<p>That would be going to \"too low of a level\".</p>",
        "id": 125128707,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840307
    },
    {
        "content": "<p>So I guess my concept of \"too low of a level\" doesn't really work, either.</p>",
        "id": 125128719,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840363
    },
    {
        "content": "<p>So think of it this way: we're talking about a formal system focused on terms. Some terms <code>t</code> are types. Every term <code>t'</code> has a type such that <code>t' : t</code>. Every type has type <code>t : Sort u</code> for some universe <code>u</code></p>",
        "id": 125128736,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840402
    },
    {
        "content": "<p>Then in <code>p1 : p0</code>, <code>p0</code> must be a type. And <code>p0 : Prop</code>, but <code>Prop</code> is synonymous with <code>Sort 0</code>, so that works.</p>",
        "id": 125128828,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840542
    },
    {
        "content": "<p>Exactly</p>",
        "id": 125128841,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840590
    },
    {
        "content": "<p>But is <code>Type</code> synonymous with some sort?</p>",
        "id": 125128893,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840673
    },
    {
        "content": "<p>sort 1</p>",
        "id": 125128895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523840678
    },
    {
        "content": "<p>OK</p>",
        "id": 125128905,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840732
    },
    {
        "content": "<p>And <code>Type 1 = Sort 2</code>, <code>Type 2 = Sort 3</code>, and so on?</p>",
        "id": 125128945,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840779
    },
    {
        "content": "<p>That's right</p>",
        "id": 125128946,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840798
    },
    {
        "content": "<p>So, <code>Prop</code> is just the universe below <code>Type</code>.</p>",
        "id": 125128997,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523840910
    },
    {
        "content": "<p>Yep!</p>",
        "id": 125129003,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523840939
    },
    {
        "content": "<p>Coming from Haskell, where we have a value level, and a type level (which is like <code>Type</code>), and a kind level (which is like <code>Type 1</code>), and then... well, they've sort of unified the levels from <code>Type 1</code> up... I'm trying to figure out what the analogy is to <code>Prop</code> there.</p>",
        "id": 125129065,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841046
    },
    {
        "content": "<p>What does it mean to have another type level, <em>below</em> what I thought of as the lowest level?</p>",
        "id": 125129072,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841085
    },
    {
        "content": "<p>Haskell doesn't really have a type <code>Prop</code>. types in <code>Prop</code> are a bit like data type that are guaranteed to be erased at run time</p>",
        "id": 125129115,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841138
    },
    {
        "content": "<p>Haskell erases all the types at runtime anyway. Well, except maybe if you use existential types.</p>",
        "id": 125129131,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841204
    },
    {
        "content": "<p>What I'm saying is that the values of a type in <code>Prop</code> are erased at run time, not just the type itself</p>",
        "id": 125129135,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841240
    },
    {
        "content": "<p>Gotcha.</p>",
        "id": 125129175,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841255
    },
    {
        "content": "<p>Have you ever used the singleton library in Haskell?</p>",
        "id": 125129179,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841275
    },
    {
        "content": "<p>No, but I've seen it demonstrated.</p>",
        "id": 125129183,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841287
    },
    {
        "content": "<p>Are you saying that the singletons are also values that are erased at runtime?</p>",
        "id": 125129251,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841365
    },
    {
        "content": "<p>Not quite no. So far as I know they haven't added erasure for those types. There's still an interesting comparison</p>",
        "id": 125129267,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841434
    },
    {
        "content": "<p>I'll take a look at it sometime, thanks.</p>",
        "id": 125129270,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523841473
    },
    {
        "content": "<p><code>singleton</code> hinges on the idea of having type level natural numbers (and other objects). If you have <code>n0</code> and <code>n1</code> are type level natural numbers, <code>n0 .&lt;= n1</code> is the type of a proof that shows that <code>n0 ≤ n1</code>. It is a data type and it is uninhabited (except for <code>undefined</code>) unless the value of <code>n0</code> is less or equal to that of <code>n1</code>. As types <code>n0</code> and <code>n1</code> have only one value (again, except for <code>undefined</code>): the number they represent.</p>",
        "id": 125129361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841615
    },
    {
        "content": "<p><code>Prop</code>s are a bit like those <code>.&lt;=</code> types (I'm not sure of the exact syntax, sorry)</p>",
        "id": 125129363,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841636
    },
    {
        "content": "<p>Correction: the singleton operator is <code>%&lt;=</code>, not <code>.&lt;=</code></p>",
        "id": 125129369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841692
    },
    {
        "content": "<p>Does it clarify things?</p>",
        "id": 125129370,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523841703
    },
    {
        "content": "<p>It seems analogous to Prop, yes. But I'm struggling to line it up with the universes.</p>",
        "id": 125129566,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842131
    },
    {
        "content": "<p>When you're getting started, you can mostly ignore universes. You can simply use <code>Type</code> and <code>Prop</code>. Higher universes become necessary when you bring in existential types.</p>",
        "id": 125129575,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523842196
    },
    {
        "content": "<p>OK. I meant that I'm imagining what the universes are in Haskell, and trying to figure out which level these propositions defined with the singleton library live at.</p>",
        "id": 125129632,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842293
    },
    {
        "content": "<p>I think the analogy with Haskell's term, type and kind is somewhat wobbly.</p>",
        "id": 125129682,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523842411
    },
    {
        "content": "<p>I was thinking that Haskell's \"type\" is like <code>Type</code>, and the lowest-level kind is like <code>Type 1</code>.</p>",
        "id": 125129732,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842494
    },
    {
        "content": "<p>Or... maybe <code>Type</code> is a kind, so instances of that are types.</p>",
        "id": 125129746,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842556
    },
    {
        "content": "<p>The need for universes in Lean comes from a requirement that the language be a consistent logic. Haskell doesn't have that requirement. I believe the requirement for Haskell to separate terms and types is historical. It started off with an ML style language and made a lot of changes over time including <code>RankNTypes</code> and higher kinded types.</p>",
        "id": 125129787,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523842608
    },
    {
        "content": "<p>Right.</p>",
        "id": 125129789,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842622
    },
    {
        "content": "<p>If we forget about Haskell's existential types and GADTs, I think its types are <code>Type 0</code> and its kinds are <code>Type 1</code></p>",
        "id": 125129797,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523842672
    },
    {
        "content": "<p>Yeah, makes sense. Except now they have unified <code>Type 1</code>, <code>Type 2</code>, and so forth...</p>",
        "id": 125129843,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842738
    },
    {
        "content": "<p>So, these type-level naturals would have type <code>Type 1</code>?</p>",
        "id": 125129894,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842822
    },
    {
        "content": "<p>Maybe this will all make more sense if I look at Idris. It should have similar power to Lean but be easier to compare to Haskell.</p>",
        "id": 125129941,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523842934
    },
    {
        "content": "<p>So, translate concept from Lean to Idris, then from Idris to Haskell. Or vice versa.</p>",
        "id": 125129987,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523843046
    },
    {
        "content": "<p>Let me give you an example where <code>Type 1</code> is needed in Lean.</p>",
        "id": 125129989,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523843055
    },
    {
        "content": "<p>OK</p>",
        "id": 125129997,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523843124
    },
    {
        "content": "<p>Hi Lyle,<br>\nThere are three kinds of things in Haskell: terms, types, and kinds. The same trichotomy appears in Lean, but kinds have kinds too</p>",
        "id": 125130000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843142
    },
    {
        "content": "<p><code>(Σ t : Type 0, list t) : Type 1</code>. This is basically an existential type. Because it \"contains\" a <code>Type 0</code>, it has to live in universe 1</p>",
        "id": 125130001,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523843143
    },
    {
        "content": "<p>Mario to the rescue! Thanks!</p>",
        "id": 125130039,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523843165
    },
    {
        "content": "<p>Also kinds are types and types are terms so it forms a subset relation</p>",
        "id": 125130043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843169
    },
    {
        "content": "<p>A kind (or a sort) is a term of the form <code>Sort u</code> for some <code>u</code>. A type is a term whose type is a kind, and a term is anything which is well typed</p>",
        "id": 125130049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843228
    },
    {
        "content": "<p>Any term has a type which is a type, which means that if <code>e : t</code> then <code>t : Sort u</code> for some <code>u</code></p>",
        "id": 125130051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843254
    },
    {
        "content": "<p>Here <code>e</code> and <code>t</code> are both logically related to <code>u</code>, which you might call the level of the expression, but obviously their relation to <code>u</code> is slightly different. <code>t</code> is level 1 means that <code>t : Sort 1</code> while <code>e</code> has type in level 1 since <code>e : t : Sort 1</code></p>",
        "id": 125130098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843358
    },
    {
        "content": "<p>Right, that was my understanding so far.</p>",
        "id": 125130101,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523843396
    },
    {
        "content": "<p>In Haskell, there are values, types, and kinds which correspond roughly to terms in types of level 1, types in level 1, and <code>Sort 1</code> with maybe some variations on it</p>",
        "id": 125130146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843439
    },
    {
        "content": "<p>The algebra of kinds in Haskell is not as rich as Lean's, they only have one universe</p>",
        "id": 125130153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843471
    },
    {
        "content": "<p>I think they call it <code>*</code></p>",
        "id": 125130155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843479
    },
    {
        "content": "<p>but it is closest to <code>Sort 1</code> aka <code>Type</code></p>",
        "id": 125130158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843495
    },
    {
        "content": "<p>Yeah, they actually call it <code>Type</code> now, in newer versions</p>",
        "id": 125130246,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523843688
    },
    {
        "content": "<p>So, how do the type-level nats fit into this?</p>",
        "id": 125130254,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523843726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think it's closer to <code>Type*</code> because of existential types and GADTs</p>",
        "id": 125130255,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523843748
    },
    {
        "content": "<p>It's one universe, but it's system F so it is impredicative</p>",
        "id": 125130296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843777
    },
    {
        "content": "<p>and somehow contradiction is avoided by a hair</p>",
        "id": 125130297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523843797
    },
    {
        "content": "<p>I thought because of <code>undefined</code> you couldn't consider the whole thing a consistent logic</p>",
        "id": 125130342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523843901
    },
    {
        "content": "<p>That's true too, but System F itself is consistent if you leave out bottom</p>",
        "id": 125130355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844002
    },
    {
        "content": "<p>there are lots of extensions that break consistency because Haskell wants to be turing complete</p>",
        "id": 125130402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523844044
    },
    {
        "content": "<p><a href=\"http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#kind-polymorphism-and-type-in-type\" target=\"_blank\" title=\"http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#kind-polymorphism-and-type-in-type\">http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#kind-polymorphism-and-type-in-type</a></p>\n<p>The <code>TypeInType</code> extension allows kinds to be as intricate as types, allowing explicit quantification over kind variables, higher-rank kinds, and the use of type synonyms and families in kinds, among other features.</p>",
        "id": 125131020,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523845467
    },
    {
        "content": "<p>I am not a haskell expert, but from what I can tell, type level nats are a way to have nats as types, so that you can quantify over them without breaking the value/type distinction (and thus get dependent types over nats)</p>",
        "id": 125131031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523845544
    },
    {
        "content": "<p>In lean this is not necessary because it's fully dependent anyway. Haskell is getting closer and closer to dependent type theory as time goes on, but it's not there yet</p>",
        "id": 125131168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523845860
    },
    {
        "content": "<p>Yeah, since in Haskell you can't write a function from values to types, but you can write a function from types to types, these type-level nats stand in for values, but can be used in functions that produce types.</p>",
        "id": 125131214,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523845937
    },
    {
        "content": "<p><code>array A : nat -&gt; Type</code> is an example of a dependent type family in lean</p>",
        "id": 125131264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846111
    },
    {
        "content": "<p>I see what you're saying about the one universe in Haskell. Traditionally in Haskell, you have kind <code>*</code>, which is Lean's <code>Sort 1</code>, and you have types whose type is <code>*</code>, and you have values of those types. With the <code>TypeInType</code> extension, the kinds can be treated like types that now have their own types, but it's all still one universe.</p>",
        "id": 125131313,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846242
    },
    {
        "content": "<p>Oh right, there was something else I wanted to say about your earlier example: <code>U : Type</code> and <code>Prop : Type</code>, so these can be equated (<code>U = Prop</code> is well formed), but they are nevertheless treated differently, since if <code>u : U</code> then <code>e : u</code> is malformed but if <code>p : Prop</code> then <code>h : p</code> is okay.</p>",
        "id": 125131354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846329
    },
    {
        "content": "<p>You can't prove that a type \"is\" a universe, it must be so syntactically</p>",
        "id": 125131362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846357
    },
    {
        "content": "<p>Hmm, OK. Well that's because <code>Prop</code> is also a sort.</p>",
        "id": 125131404,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846428
    },
    {
        "content": "<p>exactly</p>",
        "id": 125131405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846437
    },
    {
        "content": "<p>It is possible to consider type in type in dependent type theory, this would be a relatively small change to a lean-like language, but it is inconsistent by Girard's paradox so it is not usually used in languages that aspire to a sound proof theory</p>",
        "id": 125131410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846475
    },
    {
        "content": "<p>In fact, forgetting the universes is the first step in compiling lean programs</p>",
        "id": 125131444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846523
    },
    {
        "content": "<p>Right</p>",
        "id": 125131499,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846685
    },
    {
        "content": "<p>In Haskell you can have kind <code>* -&gt; *</code>, e.g. <code>List : * -&gt; *</code>. So in Lean would <code>List</code> have type <code>Type -&gt; Type</code>? Then what's the type of <code>Type -&gt; Type</code>? Is that <code>Type 1</code>?</p>",
        "id": 125131502,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846688
    },
    {
        "content": "<p>Indeed, <code>list</code> has type <code>list : Type u -&gt; Type u</code>, which itself has type <code>Type (u+1)</code></p>",
        "id": 125131512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846726
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 125131514,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846739
    },
    {
        "content": "<p>Well, that helps. I have a lot more to learn about Lean. I've been working through <em>Logic &amp; Proof</em>.</p>",
        "id": 125131556,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846770
    },
    {
        "content": "<p>Most type families are universe polymorphic like this, but if we restrict to <code>Type</code>, we have <code>list.{0} : Type -&gt; Type : Type 1</code></p>",
        "id": 125131558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846782
    },
    {
        "content": "<p>Most things that you think of as kinds will have type <code>Type 1</code> if you replace <code>*</code> with lean's <code>Type</code> everywhere</p>",
        "id": 125131567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523846870
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 125131614,
        "sender_full_name": "Lyle Kopnicky",
        "timestamp": 1523846972
    },
    {
        "content": "<blockquote>\n<p>In lean this is not necessary because it's fully dependent anyway. Haskell is getting closer and closer to dependent type theory as time goes on, but it's not there yet</p>\n</blockquote>\n<p>I watched a talk by Edward Kmett on youtube recently -- \"typeclasses against the world\" (about Haskell and typeclasses) and, if I understood correctly, Kmett said at some point that a problem with typeclasses in DTT was that you get diamonds, and in Haskell these couldn't occur.</p>",
        "id": 125138177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523862437
    }
]