[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem aux3 (n : nat) (H1 : ¬n &lt; 3) (H2 : even n) : aux (n - 2) &lt; aux n :=\nbegin\n  have H3 := le_of_not_gt H1,\n  rw [aux, aux, if_neg H1, if_pos H2],\n  let m := n - 3,\n  have H4 : n = m + 3,\n  { dsimp [m], rw [nat.sub_add_cancel H3] },\n  rw H4 at *,\n  rw nat.add_sub_assoc,\n  rw nat.add_sub_assoc,\n  rw nat.add_sub_assoc,\n  { simp,\n    by_cases m + 1 &lt; 3,\n    { simp [h],\n      apply add_lt_add_left,\n      exact dec_trivial },\n    { simp [h, even_of_even_add_two _ H2],\n      apply nat.lt_add_of_pos_right,\n      exact dec_trivial } },\n  exact dec_trivial,\n  exact dec_trivial,\n  exact dec_trivial\nend\n</pre></div>",
        "id": 124368857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334246
    },
    {
        "content": "<p>this isn't MWE. I would understand if you can't read it off the lines</p>",
        "id": 124368864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334271
    },
    {
        "content": "<p>(it matters in this context, not because I'm a constructivist, it has nothing to do with my constructivism, I really need this to be constructive)</p>",
        "id": 124368909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334308
    },
    {
        "content": "<p>I suspect it's the <code>dec_trivial</code>, but natural inequality should be decidable</p>",
        "id": 124368916,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334345
    },
    {
        "content": "<p>update: I removed every <code>dec_trivial</code> and proved the inequalities using <code>constructor</code>, it's still classical</p>",
        "id": 124368998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334464
    },
    {
        "content": "<p>It's <code>le_of_not_gt</code>, of course.</p>",
        "id": 124369007,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522334504
    },
    {
        "content": "<p>oh, how do I fix it?</p>",
        "id": 124369050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334527
    },
    {
        "content": "<p>If you really, really don't want classical logic, then you should probably prove a specialized version of <code>le_of_not_gt</code> for decidable linear orders.</p>",
        "id": 124369100,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522334625
    },
    {
        "content": "<p>is there no simple fix for naturals</p>",
        "id": 124369109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334640
    },
    {
        "content": "<p>Why do you need this as a constructive proof? There is no computable content.<br>\nYou can constructively prove <code>le_of_not_gt</code> for <code>nat</code> using the decidability of <code>lt</code> on natural numbers.</p>",
        "id": 124369153,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522334653
    },
    {
        "content": "<p>because the content is outside</p>",
        "id": 124369161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334679
    },
    {
        "content": "<p>this is just a part</p>",
        "id": 124369163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522334681
    },
    {
        "content": "<p>But rewriting <code> ¬n &lt; 3 </code> to <code>n &lt;= 3</code> is not a problem for decidability in Lean. You are fine as long as only your proofs are classical.</p>",
        "id": 124369331,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522334949
    },
    {
        "content": "<p>oh and for the sake of completeness, the final product is here <a href=\"https://github.com/kckennylau/Lean/blob/master/recursion.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/recursion.lean\">https://github.com/kckennylau/Lean/blob/master/recursion.lean</a></p>",
        "id": 124380166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522351386
    }
]