[
    {
        "content": "<p>As the title states. What does <code>{x // p x}</code> mean? VS Code doesn't seem to have a go-to-definition for <code>//</code>, and it's of course very hard to search for symbolic notation.</p>",
        "id": 215177148,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604125420
    },
    {
        "content": "<p><code>{x // p x}</code> is the subtype of all elements <code>x</code> satisfying <code>p x</code>.</p>",
        "id": 215177216,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604125526
    },
    {
        "content": "<p>Ah, so it's just slightly abbreviated set-builder notation? That makes sense, thanks.</p>",
        "id": 215177266,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604125613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359992\">@Robert Maxton</span> Note that you can <code>#print notation +</code> etc...<br>\nBut I think it doesn't work in this case, because there is special kernel support for <code>//</code>.</p>\n<p>I don't know how well versed you are in type theory. There is a difference between <code>{x | p x}</code> (which is a <code>set X</code>) and <code>{x // p x}</code> which is a <code>Type</code>.</p>",
        "id": 215177272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604125639
    },
    {
        "content": "<p><code>{x // p x}</code> is notation for <code>subtype p</code>.</p>",
        "id": 215177274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604125651
    },
    {
        "content": "<p>Subtypes are discussed in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">Section 7.3 of Theorem Proving in Lean</a>.</p>",
        "id": 215177322,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604125772
    },
    {
        "content": "<p>Ah, thanks. I should really just read that book lol.</p>",
        "id": 215177488,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604126127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Note that you can even write <code>#print +</code> to get the same output.</p>\n<p>I just learned that <code>#print notation</code> without arguments prints all known notation.</p>",
        "id": 215178562,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604128494
    },
    {
        "content": "<p><code>#print</code> is good at telling the user about the notation declared in Lean, but it doesn't tell anything useful about the notation declared in C++.</p>\n<p>It would be nice if <code>#print {</code> gave as output all the (built-in) notations involving <code>{</code>.</p>",
        "id": 215178734,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604128843
    },
    {
        "content": "<p>And similarly for all built-in notation.</p>",
        "id": 215178815,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604129019
    },
    {
        "content": "<p>Looking at the list given by <code>#print notation</code> the following notation is built-in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"bp\">!</span>\n<span class=\"n\">fail</span><span class=\"bp\">!</span>\n<span class=\"o\">⟨</span>\n<span class=\"k\">fun</span>\n<span class=\"bp\">@@</span>\n<span class=\"kd\">by</span>\n<span class=\"k\">if</span>\n<span class=\"k\">calc</span>\n<span class=\"bp\">```</span><span class=\"o\">(</span>\n<span class=\"k\">show</span>\n<span class=\"bp\">.</span><span class=\"o\">(</span>\n<span class=\"k\">match</span>\n<span class=\"o\">{</span>\n<span class=\"bp\">`</span>\n<span class=\"n\">sformat</span><span class=\"bp\">!</span>\n<span class=\"k\">suffices</span>\n<span class=\"bp\">@</span>\n<span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"k\">let</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span>\n<span class=\"k\">assume</span>\n<span class=\"o\">(::)</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span>\n<span class=\"o\">(</span>\n<span class=\"o\">(:</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">:)</span>\n<span class=\"kt\">Sort</span>\n<span class=\"n\">sorry</span>\n<span class=\"n\">trace</span><span class=\"bp\">!</span>\n<span class=\"bp\">``</span><span class=\"o\">(</span>\n<span class=\"n\">format</span><span class=\"bp\">!</span>\n<span class=\"kt\">Type</span>\n<span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"bp\">%%</span>\n<span class=\"n\">pformat</span><span class=\"bp\">!</span>\n<span class=\"k\">do</span>\n<span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">.</span><span class=\"n\">_</span>\n<span class=\"o\">()</span>\n<span class=\"k\">have</span>\n<span class=\"kd\">begin</span>\n<span class=\"bp\">^.</span>\n</code></pre></div>\n<p>and the following characters are special as well, but not marked as built-in notation (I'm probably missing some):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">}</span>\n<span class=\"bp\">//</span>\n<span class=\"bp\">|</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">λ</span>\n<span class=\"bp\">Π</span>\n<span class=\"bp\">→</span>\n<span class=\"o\">,</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">numeral</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>(I'm excluding keywords like <code>def</code>, <code>variable</code>, <code>namespace</code>, <code>end</code>.)</p>",
        "id": 215178915,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604129168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <code>fail!</code>, <code>format!</code>, <code>pformat!</code>, <code>trace!</code> are not built-in, they are <code>user_notation</code></p>",
        "id": 215599426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604504765
    }
]