[
    {
        "content": "<p>When I typed<br>\ntheorem test (n : ℕ) : ¬ (7 ∣ 2^n + 1) := sorry<br>\nwhy does Lean complain that <br>\nfailed to synthesize type class instance for<br>\nn : ℕ<br>\n⊢ has_pow ℕ ℕ?<br>\nThanks in advance.</p>",
        "id": 308879210,
        "sender_full_name": "Fan Zheng",
        "timestamp": 1668030138
    },
    {
        "content": "<p>You need to import some libraries in order for powering on nats to be defined, for example if you are using mathlib you can do <code>import data.nat.basic</code> at the top of the file</p>",
        "id": 308880611,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668030669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562644\">Fan Zheng</span> <a href=\"#narrow/stream/113488-general/topic/power.20in.20natural.20number/near/308879210\">said</a>:</p>\n<blockquote>\n<p>When I typed<br>\ntheorem test (n : ℕ) : ¬ (7 ∣ 2^n + 1) := sorry<br>\nwhy does Lean complain that <br>\nfailed to synthesize type class instance for<br>\nn : ℕ<br>\n⊢ has_pow ℕ ℕ?<br>\nThanks in advance.</p>\n</blockquote>\n<p>this looks like one of the minif2f imo problems, which import  this file <a href=\"https://github.com/openai/miniF2F/blob/main/lean/src/minif2f_import.lean\">https://github.com/openai/miniF2F/blob/main/lean/src/minif2f_import.lean</a> and additionally uses these locales : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">rat</span>\n</code></pre></div>\n<p>With both imports and locales, you should be good to go for anything defined in minif2f :)</p>",
        "id": 308940238,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1668069191
    },
    {
        "content": "<p>Right, I am just reproducing the proof given in the metaAI paper. In this regard, is there an easy way to know what to import and open_locale for a proof to work? The chat tool only gives statement, not the environment.</p>",
        "id": 308959596,
        "sender_full_name": "Fan Zheng",
        "timestamp": 1668076483
    },
    {
        "content": "<p>as said previously, if you import everything from minif2f_import and open the right locales it should work. (be aware that our proofs may only be valid for lean_version = \"leanprover-community/lean:3.30.0\" and mathlib rev = \"9a8dcb9be408e7ae8af9f6832c08c021007f40ec\" which you can set in your leanpkg.toml)</p>",
        "id": 308960601,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1668076827
    },
    {
        "content": "<p>also, it might be safer to grab statements directly from minif2f : <a href=\"https://github.com/openai/miniF2F/blob/main/lean/src/valid.lean\">https://github.com/openai/miniF2F/blob/main/lean/src/valid.lean</a></p>",
        "id": 308960704,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1668076867
    },
    {
        "content": "<p><a href=\"https://github.com/openai/miniF2F/blob/main/leanpkg.toml\">https://github.com/openai/miniF2F/blob/main/leanpkg.toml</a> and <a href=\"https://github.com/facebookresearch/miniF2F/blob/main/leanpkg.toml\">https://github.com/facebookresearch/miniF2F/blob/main/leanpkg.toml</a> both say lean 3.42.0 and cb2b02fff213ed6f65bebd64446baac64137dcda; is the paper not using the same versions as what you released?</p>",
        "id": 308967683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668079642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/power.20in.20natural.20number/near/308967683\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/openai/miniF2F/blob/main/leanpkg.toml\">https://github.com/openai/miniF2F/blob/main/leanpkg.toml</a> and <a href=\"https://github.com/facebookresearch/miniF2F/blob/main/leanpkg.toml\">https://github.com/facebookresearch/miniF2F/blob/main/leanpkg.toml</a> both say lean 3.42.0 and cb2b02fff213ed6f65bebd64446baac64137dcda; is the paper not using the same versions as what you released?</p>\n</blockquote>\n<p>The facebookresearch/miniF2F contains updates to miniF2F unrelated to the HTPS paper, but used in <a href=\"https://arxiv.org/abs/2210.12283\">https://arxiv.org/abs/2210.12283</a> <br>\nWe tried to keep the lean /mathlib version fixed for the duration of the HTPS project (we didn't want performances bouncing up and down along with changes in mathlib), only including whatever changes necessary to match miniF2F/v1 with our set-up.</p>\n<p>I'm currently in the process of trying to update our API to lean 3.48 but it's a bit difficult (mathlib grew in size and our API keeps the entire parse of mathlib around in RAM ...) . I hope the next update is lean 4 :p</p>",
        "id": 308971562,
        "sender_full_name": "Timothee Lacroix",
        "timestamp": 1668081044
    },
    {
        "content": "<blockquote>\n<p>mathlib grew in size and our API keeps the entire parse of mathlib around in RAM</p>\n</blockquote>\n<p>Sounds similar to the reason that the Lean web editor is stuck on an old version!</p>",
        "id": 308973716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668081812
    },
    {
        "content": "<p>I´ve got another question on the same theorem. I rewrote the proof a little bit. It seems that it also checked, but  when I move the cursor to some of the lines, the tactic state seems wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.dvd_iff_mod_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mod_eq_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">obviously</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">nat.mul_mod</span><span class=\"o\">],</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.le_succ_of_le</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For example, when I put the cursor on the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>the tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>but I was expecting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>which is the case in the original proof. Also, when I move the cursor to the next line, it seems that only n : ℕ is pushed into the hypothesis. I can´t see IH, but it seems hidden, because later it is used anyway.</p>",
        "id": 309012313,
        "sender_full_name": "Fan Zheng",
        "timestamp": 1668093918
    },
    {
        "content": "<p>Please, <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 309012867,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668094065
    }
]