[
    {
        "content": "<p>If I have a <code>(a : alternating_map R M N ι)</code> and want to cast it to a multilinear_map, I seem to have no choice but to spell out <code>(a : multilinear_map R (λ i : ι, M) N)</code> which is a mouthful. Is there any way I can train the unifier to let me put underscores in there? Ideally I could write<code>(a : multilinear_map _ _ _)</code> and lean would work it out.</p>",
        "id": 221681994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609870781
    },
    {
        "content": "<p>The problem I guess is that in theory there could be a coercion to some other multilinear map too</p>",
        "id": 221682297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609870931
    },
    {
        "content": "<p>so is this what unification hints do?</p>",
        "id": 221682358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609870964
    },
    {
        "content": "<p>In part this is me trying to answer the question \"what do unification hints do\"</p>",
        "id": 221682853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609871201
    },
    {
        "content": "<p>I heard very early on in Lean 4 development that they weren't planning on having them so I never took them seriously. Now it turns out that they are there in Lean 4 too so perhaps it's time I figured out what they are.</p>",
        "id": 221683070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609871315
    },
    {
        "content": "<p>I went back through the zulip history and found:</p>\n<ul>\n<li>The tests in <code>lean</code> 3, which are completely contrived and seem mostly to be \"these are a backdoor for <code>irreducible</code>\", which probably is a useful trick to know</li>\n<li>The <a href=\"https://github.com/rwbarton/lean-omin/blob/master/old/unification_hints.lean\">lean-omin</a> notes on them</li>\n<li><a href=\"https://lean-forward.github.io/lean-together/2019/slides/demo_structures.lean\">That Lean Together 2019 workshop</a> <del>that I dropped the link to</del></li>\n</ul>",
        "id": 221683387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609871457
    },
    {
        "content": "<p>If you figure them out (and they seem useful), please write something up for the community webpage!</p>",
        "id": 221687141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609873289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> see Eric's post for some pointers about unification hints. <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 221746672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609924303
    },
    {
        "content": "<p>There is actually a research paper about them: <a href=\"https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf\">https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf</a></p>",
        "id": 222014008,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1610060366
    },
    {
        "content": "<p>Some more motivation for the original question - can unification hints make this legal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n\n<span class=\"c1\">-- fails without filling the underscores. Can we teach lean to guess?</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃+*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→+*</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226628519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613551797
    }
]