[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131039906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533643421
    },
    {
        "content": "<p>Ooh, and if you don't know a name, but you know a <em>proof</em>... that's fine too.</p>",
        "id": 131040023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533643579
    },
    {
        "content": "<p>Johan, I think Kenny might have generated a proof of this once, when I was trying to figure out induction.</p>",
        "id": 131040821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533644618
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/\">https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/</a></p>",
        "id": 131040877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533644656
    },
    {
        "content": "<p>check out def4 in <a href=\"https://github.com/kckennylau/Lean/blob/master/proofs_by_induction.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/proofs_by_induction.lean\">https://github.com/kckennylau/Lean/blob/master/proofs_by_induction.lean</a></p>",
        "id": 131040889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533644705
    },
    {
        "content": "<p>Apparently it uses a lemma called <code>chris</code>. I'm not sure if this is the official mathlib-sanctioned name.</p>",
        "id": 131040899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533644759
    },
    {
        "content": "<p>Ok, thanks. I'll take a look in a minute!</p>",
        "id": 131041195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533645048
    },
    {
        "content": "<p>I proved a slightly weaker version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_⟩</span>  <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">insert_erase</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n    <span class=\"n\">sum_insert</span> <span class=\"o\">(</span><span class=\"n\">not_mem_erase</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">add_left_inj</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">sum_bij</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">vne_of_ne</span> <span class=\"o\">(</span><span class=\"n\">mem_erase</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">veq_of_eq</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_of_lt</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">mem_erase</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ne_of_vne</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131042444,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533646584
    },
    {
        "content": "<p>Why is it weaker?</p>",
        "id": 131042466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646642
    },
    {
        "content": "<p>Also, apparently I ought to be using <code>finset.range</code>...</p>",
        "id": 131042478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646657
    },
    {
        "content": "<p>I used <code>⟨n, nat.lt_succ_self _⟩</code> instead of <code>\\u n</code></p>",
        "id": 131042484,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533646678
    },
    {
        "content": "<p>Aaah, but that is better.</p>",
        "id": 131042536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646706
    },
    {
        "content": "<p>Silly me didn't understand that <code>\\u n</code> is difficult.</p>",
        "id": 131042543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646723
    },
    {
        "content": "<p>I think you can use <code>nat.le_refl _</code> for some golfing.</p>",
        "id": 131042561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646757
    },
    {
        "content": "<p>But I will first think about the <code>finset.range</code> version. Maybe it becomes a whole lot easier.</p>",
        "id": 131042583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646791
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 131046567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650928
    },
    {
        "content": "<p>So, that might not be even worth stating as a lemma.</p>",
        "id": 131046594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533650968
    },
    {
        "content": "<p>what's the use of this lemma if you could just <code>simp</code>?</p>",
        "id": 131046619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533650993
    },
    {
        "content": "<p>That's exactly my point.</p>",
        "id": 131046678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533651017
    }
]