[
    {
        "content": "<p>hello I am trying to solve an induction problem but I am getting an error message</p>\n<p>theorem test_ind (n : nat) : (3^n -1) % 2 = 0 := <br>\nnat.rec_on n rfl (λ n ih, by simp only [add_succ, ih])</p>\n<p>error:<br>\nsimplify tactic failed to simplify</p>\n<p>can someone tell me what I am doing wrong and how to fix it</p>",
        "id": 174148625,
        "sender_full_name": "John Rowan",
        "timestamp": 1566831342
    },
    {
        "content": "<p>Why would that work?</p>",
        "id": 174148853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566831514
    },
    {
        "content": "<p>Do you mean <code>pow_succ</code> instead of <code>add_succ</code>?</p>",
        "id": 174148890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566831552
    },
    {
        "content": "<p>I am completely new to lean and I am trying to prove that (3^n-1) is divisible by 2 for all natural numbers and I am not really sure of the syntax to write</p>",
        "id": 174149074,
        "sender_full_name": "John Rowan",
        "timestamp": 1566831659
    },
    {
        "content": "<p>there is a red line under the keyword simp and I am getting the error simplify tactic failed to simplify</p>",
        "id": 174149183,
        "sender_full_name": "John Rowan",
        "timestamp": 1566831733
    },
    {
        "content": "<p>i tried pow_succ and now it is saying tactic failed, there are unsolved goals</p>",
        "id": 174149311,
        "sender_full_name": "John Rowan",
        "timestamp": 1566831834
    },
    {
        "content": "<p>I'm afraid you are overoptimistic about what can be proven automatically here</p>",
        "id": 174149384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566831865
    },
    {
        "content": "<p>so youre saying that this is not possible</p>",
        "id": 174149456,
        "sender_full_name": "John Rowan",
        "timestamp": 1566831920
    },
    {
        "content": "<p>It's possible, but you'll have to help Lean a bit</p>",
        "id": 174149583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566832013
    },
    {
        "content": "<p>Do you have the maths library mathlib at hand?</p>",
        "id": 174149599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566832023
    },
    {
        "content": "<p>i don't think so, i am totally new to lean</p>",
        "id": 174149654,
        "sender_full_name": "John Rowan",
        "timestamp": 1566832068
    },
    {
        "content": "<p>You should have a look at the installation instructions at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/README.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/README.md\">https://github.com/leanprover-community/mathlib/blob/master/README.md</a></p>",
        "id": 174149737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566832102
    },
    {
        "content": "<p>im using vscode</p>",
        "id": 174149738,
        "sender_full_name": "John Rowan",
        "timestamp": 1566832102
    },
    {
        "content": "<p>ok i think that it is working because i can #eval things, but how do i go about solving this proof with mathlib?</p>",
        "id": 174150509,
        "sender_full_name": "John Rowan",
        "timestamp": 1566832629
    },
    {
        "content": "<p>Did you install everything?</p>",
        "id": 174150535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566832651
    },
    {
        "content": "<p>i didn't do anything, i just read through the installation page and it said run #eval 1+1 and it should be working and it worked</p>",
        "id": 174150686,
        "sender_full_name": "John Rowan",
        "timestamp": 1566832739
    },
    {
        "content": "<p>Each OS specific install page ends with a link to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a> which is OS-independent. Did you make sure that also works?</p>",
        "id": 174150850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566832826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test_ind</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_zero_of_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_left</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174150924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566832873
    },
    {
        "content": "<p>The first thing I do is get rid of the ugly <code>%</code>... I don't know how to deal with it <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 174150952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566832899
    },
    {
        "content": "<p>this only problem now is that there is a red squiggly line under apply here { apply nat.pow_pos, exact dec_trivial } but there is no error message</p>",
        "id": 174151524,
        "sender_full_name": "John Rowan",
        "timestamp": 1566833289
    },
    {
        "content": "<p>actually there is an error because of it, unknown identifier 'nat.pow_pos'</p>",
        "id": 174151571,
        "sender_full_name": "John Rowan",
        "timestamp": 1566833325
    },
    {
        "content": "<p>That lemma is probably from mathlib that you don't want to install...</p>",
        "id": 174151603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566833359
    },
    {
        "content": "<p>Am I missing somewhere to look for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">modeq_add</span> <span class=\"o\">(</span><span class=\"n\">mod_modeq</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mod_modeq</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 174153222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566834485
    },
    {
        "content": "<p>I can't find it in mathlib. Of course the proof is very short, but the statement is pretty natural for people who, unlike Johan and I, like <code>%</code></p>",
        "id": 174153272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566834532
    },
    {
        "content": "<p>i definetly just installed the mathlib and i am still getting an error at apply unknown identifier 'nat.pow_pos' do i have to import something?</p>",
        "id": 174153643,
        "sender_full_name": "John Rowan",
        "timestamp": 1566834777
    },
    {
        "content": "<p>Anyway, I had a break from Huber rings and wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">modeq_add</span> <span class=\"o\">(</span><span class=\"n\">mod_modeq</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mod_modeq</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test_ind</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n     <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span>\n <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>                                   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Of course this is not really the dream proof. Good automation should take as input only the hint to prove <code>(3^(n+1) - 1) % 2 = ((2*3^n % 2) + ((3^n - 1) % 2)) % 2</code>, prove it automatically, and then take the hint <code>simp [ih]</code>. I'm pretty sure there are proof assistants which can already do that, but this still is a weak point of Lean.</p>",
        "id": 174153769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566834844
    },
    {
        "content": "<p>In order to get <code>nat.pow_pos</code> you need to import <code>data.nat.basic</code></p>",
        "id": 174153980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566834997
    },
    {
        "content": "<p>(in my snippet this is imported by transitivity from <code>data.nat.modeq</code>)</p>",
        "id": 174154018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835029
    },
    {
        "content": "<p>ahh thanks both of your code snippets work on my lean now, ill just have to study them a while, try to get the hang of lean and mathlib</p>",
        "id": 174154367,
        "sender_full_name": "John Rowan",
        "timestamp": 1566835273
    },
    {
        "content": "<p>Did you use the <code>update-mathlib</code> script to make sure you're acting nicely to your computer by having a compiled mathlib?</p>",
        "id": 174154465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835322
    },
    {
        "content": "<p>i tried to do that and i got the command not found error in bash</p>",
        "id": 174154542,
        "sender_full_name": "John Rowan",
        "timestamp": 1566835370
    },
    {
        "content": "<p>I should also say that the playground  you chose (easy property of natural numbers) is actually a tricky one. That's because computer are picky about inclusions of sets of numbers. They make it much harder to ignore the fact that <code>ℕ</code> isn't actually contained in <code>ℤ</code>. Playing with more abstract objects is actually less frustrating</p>",
        "id": 174154686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835474
    },
    {
        "content": "<p>What OS are you using?</p>",
        "id": 174154690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835483
    },
    {
        "content": "<p>windows</p>",
        "id": 174154828,
        "sender_full_name": "John Rowan",
        "timestamp": 1566835576
    },
    {
        "content": "<p>sigh...</p>",
        "id": 174155049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835780
    },
    {
        "content": "<p>Maybe you can find some help in the conversation at <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20VSCode.20Extension.3F\" title=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20VSCode.20Extension.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20to.20use.20VSCode.20Extension.3F</a></p>",
        "id": 174155150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566835849
    },
    {
        "content": "<p>For the record, here a nicer proof:</p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.parity tactic.norm_num\n\ntheorem test_ind (n : nat) : (3^n -1) % 2 = 0 :=\nhave 3^n ≥ 1, by { apply nat.succ_le_of_lt, apply nat.pow_pos, norm_num },\nby { rw [←nat.even_iff], simp * with parity_simps }\n</pre></div>\n\n\n<p>The <code>rw</code> command changes the goal to <code>even (3^n-1)</code>. The simplifier should have been able to show <code>3^n ≥ 1</code>, in which case it would have been an easy one-liner. (The sticking point is that it can't show <code>3 &gt; 0</code>.) In fact, <code>parity_simps</code> should include <code>←nat.even_iff</code>, so the proof <em>should</em> have been <code>simp with parity_simps</code>.</p>",
        "id": 174171970,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566849595
    },
    {
        "content": "<p>Can we use this as an opportunity to make <code>simp with parity_simps</code> work?</p>",
        "id": 174186862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566865300
    },
    {
        "content": "<p>I’m not near a copy of Lean yet, but does <code>@[simp] lemma foo (n k : nat) : (n+1)^k \\ge 1 \\iff true := sorry</code> handle the first <code>have</code>?</p>",
        "id": 174186932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566865398
    },
    {
        "content": "<p>(Found a copy of Lean) It does work. We should definitely add it. It is so much nicer if crap like this could be solved with <code>simp with parity_simps</code>. And indeed even nicer if <code>simp</code>, or a friend, could look at the goal and realize for itself that it should clearly be using <code>parity_simps</code>.</p>",
        "id": 174188269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566867265
    },
    {
        "content": "<p>Does someone want to do this? We’d need:</p>",
        "id": 174188318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566867361
    },
    {
        "content": "<p>1. Prove the lemma <code>foo</code> I wrote above, give it a name, and a home in <code>data.nat.basic</code>.<br>\n2. In <code>data.nat.parity</code>, add a lemma which is just the reverse of the existing nat.even_iff, and mark it as @[parity_simps].<br>\n3. Add an example somewhere <code>example (n : nat) : (3^n - 1) % 2 = 0 := by simp with parity_simps</code> to verify it works.<br>\n4. Make your first PR to mathlib. :-)</p>",
        "id": 174188464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566867540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236802\">@John Rowan</span> , <span class=\"user-mention\" data-user-id=\"232317\">@Ainsley Pahljina</span>, <span class=\"user-mention\" data-user-id=\"232998\">@Eamon Barrett</span>?</p>",
        "id": 174188536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1566867624
    },
    {
        "content": "<p>This is all very cute, but would fail with more complicated examples, or the same kind of result with <code>% 3</code> instead of <code>%2</code>. I think we must keep in mind the larger goal of making calculations more convenient, especially with natural numbers. We really need more tactics to escape nat subtraction hell. Note that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p>works. So we only need a tactic to turn the nat version into that version, with side conditions like <code>1 &lt;= 3^n</code> (and tactics discharging as many such goals as possible). I know Floris has some preliminary work in the direction. This would allow writing the exact same proof we would write on paper.</p>",
        "id": 174212079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566898991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I didn't think of the <code>n+1</code> trick. That is a good solution. It will let the simpilfier solve some trivial &lt;= goals.<br>\nThere is another annoyance with the &lt;= / &gt;= notation:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma foo (n k : nat) : (n+1)^k ≥ 1 ↔ true := sorry\n\nexample (n : nat) : 3^n ≥ 1 := by simp\n\n-- fails\nexample (n : nat) : 1 ≤ 3^n := by simp\n</pre></div>\n\n\n<p>We should probably have the simplifier replace &gt;= by &lt;=. Also, the simplifier doesn't need the \"iff true\" part.</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma bar (m n : nat) : m ≥ n ↔ n ≤ m :=\niff.rfl\n\n@[simp] lemma foo (n k : nat) : 1 ≤ (n+1)^k :=\nby { apply nat.succ_le_of_lt, apply nat.pow_pos, apply nat.succ_pos }\n\nexample (n : nat) : 3^n ≥ 1 := by simp\n\nexample (n : nat) : 1 ≤ 3^n := by simp\n</pre></div>\n\n\n<p>Also, we should probably have the corresponding theorems for the version of <code>pow</code> in <code>algebra.group_power</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The point is well taken. We need better support for calculation on <code>nat</code>.</p>",
        "id": 174231223,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1566914150
    },
    {
        "content": "<p>Agreed, <code>gt_iff_lt</code> and <code>ge_iff_le</code> should become simp lemmas.</p>",
        "id": 174241534,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566920666
    },
    {
        "content": "<p>Patrick Massot referred to some preliminary code I wrote for this. The idea (that Patrick had) is to move the problem to <code>int</code> and then use <code>ring</code>. The code is below. I use a limited list of simp lemmas to push all casts inside the expression. Does <code>norm_cast</code> provide a tactic/simp-set to do this? I tried to make a simp set from the <code>move_cast</code> cache, or from all <code>move_cast</code> instances, and neither really moves all casts inside.</p>",
        "id": 174244063,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566922165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">section</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_coe</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_mod</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_simp_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">simp_arg_type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_bit0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_bit1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_mod</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp_arg_type</span><span class=\"bp\">.</span><span class=\"n\">expr</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">move_to_int</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">apply</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_injective</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">repeat</span>\n    <span class=\"o\">(</span><span class=\"n\">my_simp_list</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">simp</span> <span class=\"n\">none</span> <span class=\"n\">tt</span> <span class=\"n\">l</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">ns</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">])</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">rewrite_target</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test_ind</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">move_to_int</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_mod</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174244077,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566922176
    },
    {
        "content": "<p>There are two instances of <code>has_coe nat int</code>. The one which we use everywhere is <code>int.has_coe</code>instead of the more general <code>nat.cast_coe</code>. Is the reason for this for performance? Because otherwise it would be nicer to always use the general coercion (now we have to prove all coercion-lemmas twice).</p>",
        "id": 174244314,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1566922313
    },
    {
        "content": "<p>Two reasons: (1) It's faster: it is O(1) where the general cast is exponential; (2) it is forced on us by core - <code>int.has_coe</code> is declared in core and you get it whenever you write the <code>\\u</code> without additional adornment. Thinking about it now, we should be able to solve this with a priority setting.</p>",
        "id": 174267816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566937454
    },
    {
        "content": "<p>Yes, I was thinking about a priority setting (and reordering <code>nat_cast_eq_coe_nat</code>). When you say it is faster, do you mean computation in the VM or type-class inference search? If it's computation in the VM then we should keep the status quo. Proving all lemmas twice isn't that bad.</p>",
        "id": 174368549,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567003110
    },
    {
        "content": "<p>it is a faster function for the VM</p>",
        "id": 174383864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567013159
    },
    {
        "content": "<blockquote>\n<p>We should probably have the simplifier replace &gt;= by &lt;=.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, I just made <a href=\"https://github.com/leanprover-community/mathlib/issues/1418\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1418\">#1418</a>, which does this. I think it will open the way to making <code>simp</code> much stronger at inequalities.</p>",
        "id": 175213453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568002901
    },
    {
        "content": "<p>Thanks for doing that. I think it is the right way to go. I'll merge in a day or two if nobody objects.</p>",
        "id": 175248545,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1568040554
    }
]