[
    {
        "content": "<p>What does <code>∃ x ∈ xs, p x </code> translate to? The lean output shows <code>∃ (x : a) (_h : x ∈ xs), p x</code>, but what does this translate to? What does a value of this type look like?</p>",
        "id": 265085504,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607445
    },
    {
        "content": "<p>it literally means <code>∃ (x : a), ∃ (_h : x ∈ xs), p x</code></p>",
        "id": 265085562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607483
    },
    {
        "content": "<p>Ah, so it's iterated.</p>",
        "id": 265085585,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607500
    },
    {
        "content": "<p>So values are triples then.</p>",
        "id": 265085608,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607520
    },
    {
        "content": "<p>The part that is weird there is the second existential, which says that there exists a proof of <code>x in xs</code> such that <code>p x</code> holds. This is just the same as <code>x ∈ xs /\\ p x</code></p>",
        "id": 265085677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607540
    },
    {
        "content": "<p>All binders like this are iterated when you use multiple variables in the binder group</p>",
        "id": 265085736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607577
    },
    {
        "content": "<p>It's not exactly the same as that though because I tried giving it that type and it didn't work.</p>",
        "id": 265085763,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607597
    },
    {
        "content": "<p>in surprisingly many cases this turns out to be the right thing</p>",
        "id": 265085766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607601
    },
    {
        "content": "<p>right, it's not defeq but it is logically equivalent</p>",
        "id": 265085804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607623
    },
    {
        "content": "<p>Right.</p>",
        "id": 265085833,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607639
    },
    {
        "content": "<p>and there is a simp lemma that will rewrite it to a conjunction if you prefer</p>",
        "id": 265085839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607641
    },
    {
        "content": "<p>Which?</p>",
        "id": 265085910,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607664
    },
    {
        "content": "<p>but you can construct and destruct it with <code>\\&lt;h1, h2\\&gt;</code> either way</p>",
        "id": 265085913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607669
    },
    {
        "content": "<p>the simp lemma will turn the existential into a conjunction</p>",
        "id": 265085932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607681
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_prop\">docs#exists_prop</a></p>",
        "id": 265085982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639607708
    },
    {
        "content": "<p>Cool. Thanks.</p>",
        "id": 265086159,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639607811
    }
]