[
    {
        "content": "<p>I've been going over the documentation but I'm having some trouble  writing simple concrete tuples using <code>fin n</code> as index type (trying to avoid using vectors). I feel like I should be able to write something like the following </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Lean wants an additional case </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</code></pre></div>\n\n\n<p>If  <code>fin 2</code> is a type with two elements, each being a <code>nat</code> with evidence that this <code>nat</code> is less than two, what is the third case trying to account for?</p>",
        "id": 206893200,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1597372445
    },
    {
        "content": "<p>the third case can be proved impossible, but lean can't show it immediately</p>",
        "id": 206893279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597372622
    },
    {
        "content": "<p>You should use <code>fin.cons</code> to construct functions like this</p>",
        "id": 206893286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597372642
    },
    {
        "content": "<p>You can also do tt for 0 and ff for the rest</p>",
        "id": 206893445,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597372866
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin2</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fin2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">fz</span>      <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"n\">fz</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"n\">def</span> <span class=\"n\">silly&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">silly</span> <span class=\"n\">fz</span>      <span class=\"c1\">-- ff</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"n\">fz</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">silly&#39;</span> <span class=\"mi\">0</span>      <span class=\"c1\">-- ff</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">silly&#39;</span> <span class=\"mi\">1</span>      <span class=\"c1\">-- tt</span>\n</code></pre></div>",
        "id": 206898693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597381671
    }
]