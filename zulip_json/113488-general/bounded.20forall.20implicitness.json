[
    {
        "content": "<p>I just came across <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/set/lattice.lean#L6\">this question</a> asked by Mario three years ago. Each time we write <code>∀ x ∈ a, ...</code> we really mean <code>∀ {x : X}, x ∈ a → ...</code> rather than <code>∀ (x : X), x ∈ a → ...</code>. Is this something we should now change (I guess it used to be locked in core)?</p>",
        "id": 200651721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591955338
    },
    {
        "content": "<p>That would be really nice... it would also be a major refactor (-;</p>",
        "id": 200656163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591958882
    },
    {
        "content": "<p>You could also write <code>∀ {x ∈ a},</code> if you want both arguments to be implicit.</p>",
        "id": 200656536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591959236
    },
    {
        "content": "<p>More seriously, it is a single line in <code>parser.cpp</code> that would need to be changed.</p>",
        "id": 200656676,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591959326
    },
    {
        "content": "<p>Personally, I don't like this style though.  It messes error-reporting up too much when you write term-mode proofs.</p>",
        "id": 200656827,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591959443
    },
    {
        "content": "<p>Do you have an example of messing up? Note that I don't have a strong opinion here, I only stumbled on this old question by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 200658740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591961277
    },
    {
        "content": "<p>Something like the following.  Note that neither of the two underscores has an error message:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ε</span><span class=\"o\">},</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>This used to be a much bigger problem because without the error messages you had no idea what to fill in for the underscores.  This has actually improved recently, now you can at least see a goal if you move over the underscore: <code>⊢ ⁇ &gt; 0</code>.</p>",
        "id": 200666246,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591966642
    },
    {
        "content": "<p>Another advantage of explicit arguments is that you can more easily provide the proof via a tactic, like <code>foo x (by simp)</code>.</p>",
        "id": 200666297,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591966671
    },
    {
        "content": "<p>Ok, we probably won't start a giant refactor if it could then bite us.</p>",
        "id": 200674684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970995
    },
    {
        "content": "<p>(Actually, it isn't my question. You probably attributed it to me because I made the initial mathlib commit, but it dates back to <a href=\"https://github.com/avigad/library_dev/commit/b6b10ddf74f34c83954bc3d97844f3e364fd64da#diff-d076c0ad9beb03e207eb6ed5d354f5d5R13\">library_dev</a> and was asked by Jeremy.)</p>",
        "id": 200708237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591987120
    },
    {
        "content": "<p>Oh I see. I should be careful with git blame from that time.</p>",
        "id": 200708345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591987191
    },
    {
        "content": "<p>So this is some question about Lean 2 maybe?</p>",
        "id": 200708424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591987213
    },
    {
        "content": "<p>no, library_dev is still lean 3</p>",
        "id": 200708453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591987229
    },
    {
        "content": "<p>it was written from scratch, more or less</p>",
        "id": 200708472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591987242
    },
    {
        "content": "<p>I don't think there are any files that were actually recognizably ported from lean 2, except maybe something like <code>algebra.group</code></p>",
        "id": 200708542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591987282
    },
    {
        "content": "<p>as for the question at hand, I think it would be better to default to <code>∀ {{ε}}, ε &gt; 0 → ...</code></p>",
        "id": 200708768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591987397
    }
]