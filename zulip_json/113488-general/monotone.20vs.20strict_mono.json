[
    {
        "content": "<p>Dear All,</p>\n<p>I noticed that <code>monotone</code> assumes <code>preorder</code>, while <code>strict_mono</code> assumes <code>has_lt</code>.  In the spirit of generalizing, I thought that I would change the assumptions on <code>monotone</code> to just <code>has_le</code> and essentially everything works smoothly... except that one of the tests of <code>apply_fun</code> fails.</p>\n<p>If you want to take a look, this is on the branch <code>adomani_monotone_strict</code>.  The only <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/927254027\">issue</a> for CI is the failed <code>apply_fun</code> test.  Note that the failure is not terrible: it created three side goals, instead of two, and only two get closed.  You can close the remaining goal with <code>apply order_embedding.monotone</code>, though this is not the point.</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I am pinging you, since you said that you were interested in this issue <a href=\"#narrow/stream/144837-PR-reviews/topic/.237645.20ordered_monoid/near/240782082\">here</a></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/f8dea056e5596e68162e878b8a53517caeff3ee3/test/apply_fun.lean#L57\">Permalink to GitHub line with one unsolved goal</a></p>",
        "id": 242323323,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623405335
    },
    {
        "content": "<p>It looks like <code>apply_fun</code> tries to call <code>mono</code>, which now fails because of the change (so you get an unsolved goal). <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> would you be able to take a look?</p>",
        "id": 242374400,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623431104
    },
    {
        "content": "<p>It seems like the issue is that <code>mono</code> needs to assume <code>monotone â‡‘fin.cast_succ</code> which it cannot discharge automatically (anymore?) and just leaves the goal there. Is there a proof that <code>fin.cast_succ</code> is monotone somewhere?</p>",
        "id": 242375224,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1623431522
    },
    {
        "content": "<p>Yes, it is an order_embedding iirc</p>",
        "id": 242376926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623432348
    },
    {
        "content": "<p>Thank you for looking into this issue!</p>\n<p>It is partially satisfying that I am not the only one who is surprised by this behaviour.</p>\n<p>Btw, while it would be nice to be able to simply state monotonicity as a condition on a general relation, I do not actually have a use case for the definition with <code>has_le</code> as opposed to <code>preorder</code>.</p>",
        "id": 242388907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623437922
    }
]