[
    {
        "content": "<p>Why is a thing like this not possible?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">gsmul</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gsmul</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_of_nat</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_of_nat</span><span class=\"o\">,</span> <span class=\"n\">succ_smul</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_neg</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 151232278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382073
    },
    {
        "content": "<p>That's a funny well founded relation.</p>",
        "id": 151232459,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544382346
    },
    {
        "content": "<p>I wouldn't say it's funny. I think it's very natural.</p>",
        "id": 151232508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382378
    },
    {
        "content": "<p>I'm just nesting the inductive property of <code>int</code> and <code>nat</code>.</p>",
        "id": 151232522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382414
    },
    {
        "content": "<p>But you haven't told lean what it is. I would just prove <code>map_smul</code> first for naturals</p>",
        "id": 151232523,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544382417
    },
    {
        "content": "<p>I think you need to be more explicit about the well founded relation</p>",
        "id": 151232531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382429
    },
    {
        "content": "<p>or use lemmas like chris says</p>",
        "id": 151232532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382452
    },
    {
        "content": "<p>You could do <code>using_well_founded</code> but proving <code>map_smul</code> first is more sensible</p>",
        "id": 151232534,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544382454
    },
    {
        "content": "<p>But why can't I just nest inductive properties?</p>",
        "id": 151232535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382457
    },
    {
        "content": "<p>because that's not what you did</p>",
        "id": 151232537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382466
    },
    {
        "content": "<p>Hmm, so what did I do?</p>",
        "id": 151232579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382490
    },
    {
        "content": "<p>you call <code>(n+1)</code> case from <code>-[1+n]</code> case</p>",
        "id": 151232580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382490
    },
    {
        "content": "<p>that's not structurally well founded</p>",
        "id": 151232584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382507
    },
    {
        "content": "<p>Sure, but <code>n+1</code> is an <code>of_nat</code>, and I had proven those already.</p>",
        "id": 151232587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382519
    },
    {
        "content": "<p>that's called a lemma</p>",
        "id": 151232588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382526
    },
    {
        "content": "<p>/me sighs...</p>",
        "id": 151232591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382540
    },
    {
        "content": "<p>when you write it all in one big induction lean has no choice but to assume everything depends on everything else</p>",
        "id": 151232598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544382570
    },
    {
        "content": "<p>But don't you think this is a typical strategy for proving things about Z? Does this deserve special support?</p>",
        "id": 151232655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382628
    },
    {
        "content": "<p>Or should I prove <code>map_smul</code> for add_monoid homs? (Btw, I think there is no instance from <code>add_group_hom</code>s to <code>add_monoid_hom</code>s).</p>",
        "id": 151232663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544382673
    },
    {
        "content": "<blockquote>\n<p>But don't you think this is a typical strategy for proving things about Z? Does this deserve special support?</p>\n</blockquote>\n<p>I think the typical strategy is to use <code>int.induction_on</code></p>",
        "id": 151232711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544382739
    },
    {
        "content": "<p>Here's a horrible proof using <code>using_well_founded</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">gsmul</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gsmul</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_of_nat</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_coe</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_of_nat</span><span class=\"o\">,</span> <span class=\"n\">succ_smul</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"err\">⊤</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_neg</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">map_gsmul</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">using_well_founded</span>\n  <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">inv_image</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">i</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 151233000,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544383298
    },
    {
        "content": "<p>I understand why you suggest the other strategy...</p>",
        "id": 151233113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544383453
    }
]