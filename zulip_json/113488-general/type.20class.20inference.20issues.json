[
    {
        "content": "<p>I have been struggling with type class inference lately. The two main issues are<br>\n(1) The error <code>maximum class-instance resolution depth has been reached</code><br>\n(2) In some cases (which are hard to reproduce in minimal examples) I get incredibly long elaboration times (10-30 seconds for a single definition), and I suspect this is completely caused by type class inference (the eventual error I often get is that the type-class max depth is reached).</p>\n<p>Problem 1 can be easily solved by setting the <code>class.instance_max_depth</code> option higher. Problem 2 makes this solution for problem 1 not that attractive, if type class inference then takes even longer.</p>\n<p>I have some concrete and some open-ended questions:<br>\nQ.1 What does <code>instance_max_depth</code> exactly mean? Does it mean the depth/height of the search tree, or the total number of instances in the solution? For example, in the following example I have to set the depth to 125, with 124 it fails:</p>\n<div class=\"codehilite\"><pre><span></span>import ring_theory.algebra linear_algebra.tensor_product\n\nvariables {R : Type*} [comm_ring R]\nvariables {M : Type*} {N : Type*} [ring M] [ring N]\nvariables [algebra R M] [algebra R N]\n\nlocal notation M ` ⊗[`:100 R `] ` N:100 := tensor_product R M N\n\nnamespace tensor_product\nset_option class.instance_max_depth 125\n\nprotected def mul : M ⊗[R] N →ₗ[R] M ⊗[R] N →ₗ[R] M ⊗[R] N :=\nbegin\n  refine tensor_product.lift ⟨λ m, ⟨λ n, _, _, _⟩, _, _⟩,\n  all_goals { sorry }\nend\n</pre></div>\n\n\n<p>Q.2 Does the option <code>trace.class_instances</code> show the complete trace or does Lean/VSCode truncate the trace somewhere? In traces where I get the max-depth reached error, the highest depth I can find is typically <code>(11)</code> or <code>(12)</code><br>\nQ.3 In the trace, I see the same type class search over and over again (in a single definition). Is the caching of type class instances failing me, or is something else going on?<br>\nQ.4 What are type-class best practices? Do I want to add instances to short-circuit the type class inference? For example, in the example above, if I add the following local instances I don't have to increase the max depth at all:</p>\n<div class=\"codehilite\"><pre><span></span>protected def add_comm_group&#39; : add_comm_group (M ⊗[R] N) := by apply_instance\nprotected def module&#39; : module R (M ⊗[R] N) := by apply_instance\nlocal attribute [instance, priority 2000] tensor_product.add_comm_group&#39; tensor_product.module&#39;\nprotected def lmap_add_comm_group : add_comm_group (M ⊗[R] N →ₗ[R] M ⊗[R] N) := by apply_instance\nprotected def lmap_module : module R (M ⊗[R] N →ₗ[R] M ⊗[R] N) := by apply_instance\nlocal attribute [instance, priority 2000]\n  tensor_product.lmap_add_comm_group tensor_product.lmap_module\n</pre></div>\n\n\n<p>Are there other tips/tricks to keep type-class inference happy/under control?</p>",
        "id": 158624456,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1550246246
    },
    {
        "content": "<p>PS: The reason for the example in Q.1 is that I'm surprised I would need to go to depth 100+.</p>",
        "id": 158653876,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1550268398
    },
    {
        "content": "<p>I just had another problem with type class inference. <br>\nI have an instance (with <code>pp.all true</code>):</p>\n<div class=\"codehilite\"><pre><span></span>_inst_3 : @is_ring_hom.{u_1 u_2} α β (@comm_ring.to_ring.{u_1} α _inst_1) (@comm_ring.to_ring.{u_2} β _inst_2) f\n</pre></div>\n\n\n<p>But the trace shows that this instance does not unify with its own type, even with <code>pp.all</code> true.</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_9 : @is_ring_hom.{u_1 u_2} α β (@comm_ring.to_ring.{u_1} α _inst_1) (@comm_ring.to_ring.{u_2} β _inst_2) f := _inst_3\nfailed is_def_eq\n</pre></div>\n\n\n<p>The error occurs here:<br>\n<a href=\"https://github.com/fpvandoorn/formalabstracts/blob/is_ring_hom/src/ring_theory/basic.lean#L28\" target=\"_blank\" title=\"https://github.com/fpvandoorn/formalabstracts/blob/is_ring_hom/src/ring_theory/basic.lean#L28\">https://github.com/fpvandoorn/formalabstracts/blob/is_ring_hom/src/ring_theory/basic.lean#L28</a></p>",
        "id": 158653999,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1550268488
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"mi\">123</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"c1\">--error</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">10</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>what the hell is going on here?! it doesn't seem to be a diamond</p>",
        "id": 276937942,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648505935
    },
    {
        "content": "<p>(I never even considered that numeric dot notation supported double digits)</p>",
        "id": 276938080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648506032
    },
    {
        "content": "<p>What's the error message?</p>",
        "id": 276938104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648506057
    },
    {
        "content": "<p>it just cannot find the instance</p>",
        "id": 276938248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648506160
    },
    {
        "content": "<p>it seens that <code>linear_ordered_semiring.decidable_lt</code> isn't an instance, but the <code>linear_order</code> version is and ther'es also clearly a <code>linear_order</code> instance, so it should be able to find it</p>",
        "id": 276938397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648506288
    },
    {
        "content": "<p>If I enable <code>trace.class_instances</code>, then first of all it looks like <code>linear_order.decidable_lt</code> is not considered an instance. So I add that attribute and get the following trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_order.decidable_lt</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 276981575,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648547781
    },
    {
        "content": "<p>Looks like it's struggling with the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt</span> <span class=\"n\">R</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">R</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_partial_order</span> <span class=\"n\">R</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_semiring.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_semiring.to_ordered_semiring</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">))))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.mk</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_order.le</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_order.lt</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span>\n        <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 276981930,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648547999
    },
    {
        "content": "<p><code>?x_2 a b</code> should be inferred as the <code>linear_order</code> instance deriving from <code>h : linear_ordered_semiring R</code>, but apparently it's just being treated as opaque and never inferred.</p>",
        "id": 276982206,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648548129
    },
    {
        "content": "<p>Maybe this is the \"pi instance bug\" we've seen before with finsupp?</p>",
        "id": 276982283,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648548189
    }
]