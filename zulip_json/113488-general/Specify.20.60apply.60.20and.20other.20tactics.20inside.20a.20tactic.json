[
    {
        "content": "<p>I have a question about calling tactics in meta programming.  I'm making an AI* which will control certain common tactics (like apply, simp, rw, ...).  How within my own custom tactic (say within a <code>do ... return ()</code> block), do I say to run the apply tactic?  The issue is the parameter.  Here are three use cases.  How do I do them?</p>\n<ol>\n<li><code>apply h</code> where <code>h</code> is from the local context.  I know how to access and look at the (the expressions of the) local context.  So let's assume I know which hypothesis <code>h</code> I want to use in apply.  How do I specify that inside a tactic?</li>\n<li><code>apply true.intro</code> where <code>true.intro</code> is just an example of a theorem in the environment.  Let's say I already know the name of that theorem, e.g. <code>true.intro</code>.  How do I apply it?</li>\n<li><code>apply (f h)</code> where <code>f h</code> is an example of a compound term.  Again, let's say I know how to find <code>f</code> and <code>h</code> and they are either in the local context or the environment.</li>\n</ol>\n<p>If (3) is much harder, I am happy with solutions to (1) or (2).  Do the same basic ideas apply for tactics which takes lists of terms like <code>rw</code> or <code>simp</code>?</p>\n<p>*When I say \"I am making an AI\", what I really mean is that I am making a prototype of a tool which lets one control tactics from outside of Lean.  I'm trying to do it through Lean's IO and not the Lean server, hence the questions.  (See more <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F\" title=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F\">here</a> about this project.)</p>",
        "id": 187216567,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580671461
    },
    {
        "content": "<p>For 2, if I understand correctly, you could use <code> `[apply true.intro] </code></p>",
        "id": 187218455,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580674834
    },
    {
        "content": "<p>For 1, or more generally, you can just apply <code>tactic.apply</code> or even <code>tactic.interactive.apply</code> directly</p>",
        "id": 187218541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580674959
    },
    {
        "content": "<p>Let me be more clear.  This will be done entirely programmatically and dynamically.  I assume I can't enter  <code> `[apply n] </code>, where <code>n</code> is a <code>name</code>/<code>expr</code>/other?</p>",
        "id": 187221084,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580679313
    },
    {
        "content": "<p>Anyway, I'm looking at this set of notes: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a></p>",
        "id": 187221089,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580679335
    },
    {
        "content": "<p>You should use <code>tactic.apply</code></p>",
        "id": 187221213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580679510
    },
    {
        "content": "<p>it takes an argument of type <code>expr</code>, which you can construct from any of the mentioned sources</p>",
        "id": 187221217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580679532
    },
    {
        "content": "<p>the interactive <code>apply</code> tactic is just a shim over <code>tactic.apply</code> that parses the input pre-expression first</p>",
        "id": 187221295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580679656
    },
    {
        "content": "<p>assuming \"I know which hypothesis <code>h</code>\" means a predicate <code>pred : expr -&gt; tactic bool</code>, you can try something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">try_apply_pred</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">try_trace_apply</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;applied {e.to_string}&quot;</span> <span class=\"bp\">&lt;|&gt;</span>\n         <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;failed to apply {e.to_string}&quot;</span> <span class=\"k\">in</span>\n  <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mfilter</span> <span class=\"n\">pred</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">try_trace_apply</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- H : false → true</span>\n<span class=\"c1\">-- ⊢ true</span>\n  <span class=\"n\">try_apply_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n<span class=\"c1\">-- H : false → true</span>\n<span class=\"c1\">-- ⊢ false</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187221305,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1580679680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Where I am struggling is that <code>expr</code> is a very broad category of objects.  What form does the expression need to be in? For example, what expression would I use for <code>true.intro</code>?  How do I get that from its declaration?</p>",
        "id": 187222325,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681625
    },
    {
        "content": "<p>true.intro has no arguments, so <code> `(true.intro)</code> suffices</p>",
        "id": 187222368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681660
    },
    {
        "content": "<p>Other functions are more complicated because of universe parameters and such</p>",
        "id": 187222373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>, thanks!  I think that gives me the answer for (1).  I use <code>tactic.apply e</code> where <code>e</code> is the object from the local context.  (I think it is of the form <code>local_const</code>.)</p>",
        "id": 187222383,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681718
    },
    {
        "content": "<p>there is also <code>tactic.applyc</code> which takes a <code>name</code> that refers to a constant</p>",
        "id": 187222389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681734
    },
    {
        "content": "<p>i.e. <code>tactic.applyc ``true.intro</code></p>",
        "id": 187222394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So let's say, I'm willing to loop over all <code>thm</code> declarations and try apply with all of them, would <code>tactic.applyc nm</code> where <code>nm</code> is the name from the declaration be the right approach?</p>",
        "id": 187222443,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681802
    },
    {
        "content": "<p>sure</p>",
        "id": 187222446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681809
    },
    {
        "content": "<p>(Obviously, I'm not going to do that loop, but that is the idea I'm looking for.)</p>",
        "id": 187222450,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681823
    },
    {
        "content": "<p>note that if it is successful, you need to be sure to revert the state afterward if you want to backtrack</p>",
        "id": 187222467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681862
    },
    {
        "content": "<p>This covers <code>apply</code>.  Is there a general principle for other tactics like <code>rw</code>?</p>",
        "id": 187222516,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681897
    },
    {
        "content": "<p>there are non-interactive versions of all the tactics</p>",
        "id": 187222521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681916
    },
    {
        "content": "<p>those are more suitable for use from programs and drivers</p>",
        "id": 187222529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580681941
    },
    {
        "content": "<p>Ok.  I think I'm going to just need to experiment and look a the code (when it is not in C++).  Thanks!</p>",
        "id": 187222536,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580681972
    },
    {
        "content": "<p>Check out <code>init.meta.tactic</code> for the list of core tactics</p>",
        "id": 187222584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580682016
    },
    {
        "content": "<p>it's not comprehensive though; there are other files that define more core tactics, and some non-builtin tactics are also probably worth treating atomically like <code>simp</code></p>",
        "id": 187222597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580682101
    }
]