[
    {
        "content": "<p>Say I have two type classes <code>foo</code> and <code>bar</code>. What is the idiomatic way of making a type class <code>foobar</code> that represents <code>foo</code>and <code>bar</code>together in the sense that if a type has instances of <code>foo</code> and <code>bar</code>, it will also have an instance of <code>foobar</code>.</p>",
        "id": 267129248,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641511458
    },
    {
        "content": "<p>Question. Let's say you explicitly provide some type <code>X</code> an instance of <code>foobar X</code>. Would you also want to now, \"for free\", get <code>foo X</code> and <code>bar X</code> instances?</p>",
        "id": 267129343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641511555
    },
    {
        "content": "<p>No. The type class <code>foobar</code> won't have any methods.</p>",
        "id": 267129447,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641511643
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">as_foo</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">as_bar</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foobar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">α.</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foobar</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Like that?</p>",
        "id": 267129794,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641511862
    },
    {
        "content": "<p>But with that,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 267129839,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641511905
    },
    {
        "content": "<p>Ah, so to make a class with no methods, you use a period. I didn't know that.</p>",
        "id": 267129976,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641511987
    },
    {
        "content": "<p>Hmm... this is not working for me. Let me create a MWE.</p>",
        "id": 267130016,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641512030
    },
    {
        "content": "<p>Here's my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">t0_space</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t0_prop</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">r2_space</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">r2_prop</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">t3_space</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">t0_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">r2_space</span> <span class=\"n\">X.</span> <span class=\"c1\">--  error: function expected at t0_space term has type Prop</span>\n</code></pre></div>",
        "id": 267130303,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641512271
    },
    {
        "content": "<p>I think X is implicit in t0_space right now</p>",
        "id": 267130459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512393
    },
    {
        "content": "<p>So <code>t0_space X</code> makes no sense</p>",
        "id": 267130519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512420
    },
    {
        "content": "<p>Change <code>variables {</code> to <code>variables (</code>?</p>",
        "id": 267130572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512472
    },
    {
        "content": "<p>Ah crap. I did not notice that.</p>",
        "id": 267130752,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641512602
    },
    {
        "content": "<p>Yep, that worked. Thanks a lot.</p>",
        "id": 267130854,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641512665
    },
    {
        "content": "<p>For posterity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">t0_space</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t0_prop</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">r2_space</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">r2_prop</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">t3_space</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">t0_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">r2_space</span> <span class=\"n\">X.</span>\n</code></pre></div>",
        "id": 267131153,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641512917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/type.20class.20for.20combination.20of.20two.20type.20classes/near/267129839\">said</a>:</p>\n<blockquote>\n<p>But with that,</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that the above \"<code>foobar.mk</code>\", or the pair of projections <code>foobar.to_foo</code>/<code>foobar_to.bar</code>, can't both be instances due to Lean 3's typeclass implementation. Since an instance for <code>foobar T</code> would lead to a looping search <code>foobar T → foo T (via the above) → foobar T (via </code>foobar.to_foo<code>) → foo T → foobar T →</code>. Lean 4 should fix this specific issue because it only starts one search for each equal goal.</p>",
        "id": 267171913,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641550468
    }
]