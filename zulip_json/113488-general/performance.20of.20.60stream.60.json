[
    {
        "content": "<p>Once we move <code>stream</code> from core to <code>mathlib</code> (see <a href=\"https://github.com/leanprover-community/mathlib/issues/9988\">#9988</a>), I'm going to review <code>stream</code> API (there are some duplicates, lots of lemmas should be <code>@[simp]</code> etc). Since it is used in meta code, probably I should not make performance worse that it is now. So, I have a few questions:</p>\n<ol>\n<li>Is there an easy way to benchmark a single function? Something like <code>%timeit</code> in Jupyter notebooks.</li>\n<li>\n<p>How much does Lean cache? E.g., if I have<br>\n  ```<br>\n  def f1 : ℕ → ℕ<br>\n  | 0 := 1<br>\n  | (n + 1) := f1 n + 5</p>\n<p>def g1 (f : ℕ → ℕ) : ∀ n, list ℕ<br>\n| 0 := []<br>\n| (n + 1) := g1 n ++ [f n]</p>\n<p>#eval g1 f1 10<br>\n<code>``\nthen how many times will it compute </code>f 2`?</p>\n</li>\n<li>\n<p>Am I right that <code>stream</code> is designed to be used with recursively defined functions, so I should assume that <code>stream.nth</code> is probably <em>not</em> $O(1)$?</p>\n</li>\n</ol>",
        "id": 259154670,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635279180
    },
    {
        "content": "<p>I'm not aware of any code that uses <code>stream</code>. It is not particularly computationally efficient. Well, it's a function type, so it is as computationally efficient as the functions you use to build it, but if you just chain <code>cons</code> or something you will get linear time functions. Lean does not do any kind of memoization here, so a function is run exactly as many times as you call it. In your example, you call <code>f1 9</code>, <code>f1 8</code>, ..., <code>f1 0</code>, and each <code>f1 n</code> calls all previous values, so <code>f1 2</code> is called a total of 8 times. You can verify this by putting <code>trace</code> in the computation of <code>f1</code>.</p>",
        "id": 259155630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635279667
    },
    {
        "content": "<p>I saw an <code>import data.stream</code>in <code>control.fix</code> and assumed that it is used for some purpose.</p>",
        "id": 259155825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635279780
    },
    {
        "content": "<p>Ah, I suspected it might be Simon's doing. He likes FP style programs</p>",
        "id": 259155871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635279814
    },
    {
        "content": "<p>Another file that imports <code>data.stream</code> is <code>system.random.basic</code>.</p>",
        "id": 259156008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635279886
    },
    {
        "content": "<p>Am I right that I may refactor <code>stream</code> without computational complexity in mind?</p>",
        "id": 259156068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635279925
    },
    {
        "content": "<p>I tried commenting out everything that depends on <code>stream</code> in <code>control.fix</code>, <code>control.lawful_fix</code>, and <code>system.random.basic</code> and it seems that there are no other consequences in <code>tactic</code>, <code>meta</code> and <code>system</code></p>",
        "id": 259156304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635280042
    },
    {
        "content": "<p>the material that is there is mostly theoretical, e.g. connecting it to omega-CPO's and <code>part</code>. I thought that it might get used by slim_check in its <code>sampleable</code> type class but the fact that commenting it out has no consequences says otherwise</p>",
        "id": 259156732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635280257
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 259156927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635280355
    }
]