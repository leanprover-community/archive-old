[
    {
        "content": "<p>Have we ever considered dropping the <code>_theory</code> end of some top folders? Typically, <code>category</code>, <code>measure</code>, <code>probability</code> would all stay very understandable. <code>field</code>,<code>group</code> and <code>ring</code> are arguable. <code>number</code> would be a funny one to have, but we could rename it to <code>arithmetic</code> which is still shorter than <code>number_theory</code>!</p>",
        "id": 269464744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643224105
    },
    {
        "content": "<p>Haskell has <code>Data.Numbers.Primes</code> which is a bit like <code>number.*</code></p>",
        "id": 269485630,
        "sender_full_name": "David Wärn",
        "timestamp": 1643232718
    },
    {
        "content": "<p>I kind of like this idea. Combining it with with what David mention that Haskell does, what about <code>categories</code>, <code>measures</code>, <code>probabilities</code>, <code>fields</code>, <code>groups</code>, <code>rings</code>, <code>numbers</code>, etc.?</p>",
        "id": 269486110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643232963
    },
    {
        "content": "<p>Why even have the plural? It's shorter without.</p>",
        "id": 269486167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643232993
    },
    {
        "content": "<p>I think the plural form is in somewhat common usage for \"<em>blank</em> theory.\" \"We will cover group theory, ring theory, and field theory\" -&gt; \"We will cover groups, rings, and fields.\"</p>",
        "id": 269486409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643233104
    },
    {
        "content": "<p>So are you suggesting renaming <code>order</code> to <code>orders</code>?</p>",
        "id": 269486729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643233267
    },
    {
        "content": "<p>This also distinguishes <code>group</code> in <code>algebra.group</code> vs <code>groups</code> (where I guess the first would be basic facts about <code>group</code> as an algebraic structure, and the second is all the rest?)</p>",
        "id": 269486733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643233268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/269486733\">said</a>:</p>\n<blockquote>\n<p>This also distinguishes <code>group</code> in <code>algebra.group</code> vs <code>groups</code> (where I guess the first would be basic facts about <code>group</code> as an algebraic structure, and the second is all the rest?)</p>\n</blockquote>\n<p>I take that as a bug, not a feature <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 269486781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643233300
    },
    {
        "content": "<p>I'm also suggesting renaming <code>computability</code> to <code>computabilities</code></p>\n<p>(I kid, I kid)</p>",
        "id": 269487002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643233424
    },
    {
        "content": "<p>Starting with <a href=\"https://github.com/leanprover-community/mathlib/pull/11988\">#11988</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/11989\">#11989</a>. If you're happy with those, more will follow (but probably one by one because they'll typically touch a huge number of files).</p>",
        "id": 271659421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644628051
    },
    {
        "content": "<p>I'm not 100% convinced by this change. mathlib doesn't hesitate to make breaking changes if there's a clear improvement. But this is a change that potentially breaks a <em>lot</em> of links to the repo and docs, for at best a slight improvement.</p>",
        "id": 272000244,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644942882
    },
    {
        "content": "<p>Agreed. But if we want to make the change, we should do it earlier rather than later.</p>",
        "id": 272002919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644944003
    },
    {
        "content": "<p>Also, the PR you blocked (<a href=\"https://github.com/leanprover-community/mathlib/pull/12052\">#12052</a>) is literally about one file, so it not breaking.</p>",
        "id": 272003115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644944058
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12053\">#12053</a> is a different story.</p>",
        "id": 272003202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644944086
    },
    {
        "content": "<p>This is tangential, but probably at some point (maybe doc-gen4?) we should start building docs for every commit of mathlib so that we can have permalinks.</p>",
        "id": 272003627,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1644944251
    },
    {
        "content": "<p>Every commit sounds a bit extreme. What about every Lean release?</p>",
        "id": 272003809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644944321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272002919\">said</a>:</p>\n<blockquote>\n<p>Agreed. But if we want to make the change, we should do it earlier rather than later.</p>\n</blockquote>\n<p>Probably its better to try and build consensus with a poll for such a change before making a PR</p>",
        "id": 272004079,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644944417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272003115\">said</a>:</p>\n<blockquote>\n<p>Also, the PR you blocked (<a href=\"https://github.com/leanprover-community/mathlib/pull/12052\">#12052</a>) is literally about one file, so it not breaking.</p>\n</blockquote>\n<p>Not breaking, but I think whether we rename these directories or not is a decision to be made for all at once.</p>",
        "id": 272014950,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644948667
    },
    {
        "content": "<p>/poll should we strip <code>_theory</code>?<br>\nYes<br>\nNo</p>",
        "id": 272015619,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644948965
    },
    {
        "content": "<p>Instead of just voting, I'd also like to ask why people are voting each way.</p>",
        "id": 272016101,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644949188
    },
    {
        "content": "<p>And I would like to know which folders exactly. We don't have to rename them all.</p>",
        "id": 272016224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644949230
    },
    {
        "content": "<p>Personally, I find typing stuff like <code>(ring_theory/polynomial/cyclotomic/eval):...</code> crazy long and any way to shorten that sort of thing would be much appreciated</p>",
        "id": 272019399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644950630
    },
    {
        "content": "<p>It means that the actual description seems to get lost in the file naming</p>",
        "id": 272019476,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644950651
    },
    {
        "content": "<p>That's an indication that commit naming guidelines might need to change. What's more inflexible/not worth changing, the actual folder structure, or the guidelines for naming commits to help us with bookkeeping?</p>",
        "id": 272019617,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644950716
    },
    {
        "content": "<p>We could say that commit naming guidelines allow eliding the parent folders, if it's clear from \"cyclotomic/eval\" where you're working on. Or, since a PR name only ever is written once, maybe it's okay to have that cost?</p>",
        "id": 272019798,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644950803
    },
    {
        "content": "<p>Basically, I'm trying to deconvolute the various reasons we might or might not want to rename.</p>",
        "id": 272019846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644950830
    },
    {
        "content": "<p>There is a temporal aspect here too. Both PR names (human generated) or in old docgen builds (auto-generated) can go stale when our \"filesystem\" changes. One argument for not renaming is to prevent links from going stale. This carries the implied thought that it is too difficult to go back and update old links to point to new targets, when/if the filesystem changes. And for sure, this retroactive update is globally impossible because files get split, deleted, etc.</p>",
        "id": 272020257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951013
    },
    {
        "content": "<p>There's also changes to directory names vs. changes to namespace names.</p>",
        "id": 272020373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951082
    },
    {
        "content": "<p>I want to address namespace names as well. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens\">docs#topological_space.opens</a> is a bit of a mouthful. I would like to rename it to <code>topology.opens</code>.</p>",
        "id": 272020526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951138
    },
    {
        "content": "<p>So all of that to say, Rob's request of sharing motivations for a vote is <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 272020535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951140
    },
    {
        "content": "<p>I don't understand what mouthful means here. Bytes in a file (at this point in computing) are cheap. Editors help with autocompletion and discovery. I agree that writing it out explicitly might be more painful than a shorter one. Can we ask, how can our tooling be more helpful, instead of changing our existing bookkeeping approaches?</p>",
        "id": 272020715,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951239
    },
    {
        "content": "<p>Can we, instead of renames, have aliases of namespace, for example?</p>",
        "id": 272020817,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951278
    },
    {
        "content": "<p>That doesn't solve my main issue: the subsequent unreadability of the docs.</p>",
        "id": 272020850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951300
    },
    {
        "content": "<p>Ah! That is a really good point. Verbosity of the underlying declaration names is maximized in the auto-generated docs. And you're proposing to reduce the verbosity by attacking the declaration names themselves. With the implication that having an intricate docs decl name folding/hiding is hard/long term/etc. Right?</p>",
        "id": 272021070,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272020850\">said</a>:</p>\n<blockquote>\n<p>the subsequent unreadability of the docs</p>\n</blockquote>\n<p>Can you give an example? Is it that the docs like to use qualified names everywhere?</p>",
        "id": 272021072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951401
    },
    {
        "content": "<p>Yes exactly!</p>",
        "id": 272021130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951426
    },
    {
        "content": "<p>At the source level it doesn't seem like <em>too</em> big a deal, after all you just write a few imports and open statements once at the top</p>",
        "id": 272021147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951432
    },
    {
        "content": "<p>Maybe it would be okay to just not use qualified names in the docs? since you can click/hover to find the full name anyways</p>",
        "id": 272021330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951500
    },
    {
        "content": "<p>I find that dangerous. The docs are meant be the ultimate source of knowledge before digging in the source. I personally use the docs a lot to check the fully qualified name while my machine is busy orange bar helling me.</p>",
        "id": 272021457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951558
    },
    {
        "content": "<p>If the doc generator decided to use dot notation then you already don't really know the name</p>",
        "id": 272021804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951663
    },
    {
        "content": "<p>The reason I am harping on this is because I have a similar issue in my work: \"do we change the data to fit the tooling better, or do we make the tooling better itself?\" Of course, it's easier to delete a row in Excel than to write a tool that knows which row to delete. But there is a middle ground -- don't _delete_ the row, just add a new column of \"marked for deletion\" and let the tooling know about it. That way your data integrity is upkept, and downstream analysis is happy.</p>",
        "id": 272021837,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951675
    },
    {
        "content": "<p>My idea is thus to shorten namespaces without losing semantic information. For example, does <code>topological_space.opens</code> really tell you more than <code>topology.opens</code>? Not really, maybe that it takes an instance in rather than an object called <code>topology</code>, at best.</p>",
        "id": 272021845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951678
    },
    {
        "content": "<p>I would say that the *.lean _source_ is the ultimate source of knowledge.</p>",
        "id": 272021881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951691
    },
    {
        "content": "<p>Yeah, the source is already often easier to read than the docs for other reasons (it's just hard to reconstruct what a human would want to write/read from the Lean type, I guess).</p>",
        "id": 272022145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951773
    },
    {
        "content": "<p>Yes, but that's harder to access, for the reasons pointed above. It's hard to sustain several instances of the source-code at once while you can open as many tabs of the docs as you want.</p>",
        "id": 272022150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951774
    },
    {
        "content": "<p>I would rather the docs used opened <code>opens</code> instead of either <code>topological_space.opens</code> or <code>topology.opens</code> in that case.</p>",
        "id": 272022170,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951786
    },
    {
        "content": "<p>And I even disagree that the source code is the ultimate source of knowledge at all, actually. The docs give library-wide information which is inaccessible from a local inspection of the source code. Typically, what instances does a typeclass have.</p>",
        "id": 272022344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951859
    },
    {
        "content": "<p>Then the docs are doing \"too many things\" -- they are explorable and cross-linked compiled interpretations of the source, with understanding of the depth of expressions. And they are meant to be in one-to-one correspondence with the source itself.</p>",
        "id": 272022345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951859
    },
    {
        "content": "<p>it's not that hard to access is it? there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id/src\">src#id</a> and per-declaration source links in the docs</p>",
        "id": 272022355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644951864
    },
    {
        "content": "<p>But some files are really mangled namespace-wise and figuring out the fully qualified name of a declaration then involves reconstructing the file's sectioning.</p>",
        "id": 272022491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644951931
    },
    {
        "content": "<p>I absolutely agree with you on the stance that it is hard from the source to capture \"global\" information about things like \"all the typeclass instances defined\" -- that's the \"compiled interpretation\" aspect. But here we're just talking about the verbosity of the folder structure.</p>",
        "id": 272022499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644951936
    },
    {
        "content": "<p>The point I am trying to get across is, yes, getting namespacing and modules and file boundaries right is hard, and how those interplay with source writing, documentation generation, discoverability, importing, clashing/shadowing etc. And just doing renames, which are really work-arounds of the system, will work for some issues! But it's symptomatic, not etiological. And you have to make the choice of how often you have these symptomatic adjustments.</p>",
        "id": 272022750,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644952037
    },
    {
        "content": "<p>It would be helpful if the online listing of the source code gave a way of seeing what you'd get from typing <code>#where</code> at a given position.</p>",
        "id": 272041764,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644960975
    },
    {
        "content": "<p>While you're at it, you could ask for the proof state as well--I wonder how expensive it would be to record &amp; store that during typechecking?</p>",
        "id": 272046144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644963413
    },
    {
        "content": "<p>basically what alectryon does, it's around 2-3x to run AST+get all the proof states at relevant points iirc</p>",
        "id": 272047103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644963880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272046144\">said</a>:</p>\n<blockquote>\n<p>While you're at it, you could ask for the proof state as well--I wonder how expensive it would be to record &amp; store that during typechecking?</p>\n</blockquote>\n<p>I'm not sure what this means -- proof state where? The docs don't show declaration bodies, just types.</p>",
        "id": 272051713,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644966802
    },
    {
        "content": "<p>Regardless,<br>\n<span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272041764\">said</a>:</p>\n<blockquote>\n<p>It would be helpful if the online listing of the source code gave a way of seeing what you'd get from typing <code>#where</code> at a given position.</p>\n</blockquote>\n<p>is basically impossible with the current docs architecture.</p>",
        "id": 272051805,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644966867
    },
    {
        "content": "<p>In the source, at each line say</p>",
        "id": 272051864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644966909
    },
    {
        "content": "<p>What would be the point of knowing what <code>#where</code> outputs actually? Depending on the file, there might be a lot of junk.</p>",
        "id": 272051877,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644966929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/_theory.20top.20folders/near/272051864\">said</a>:</p>\n<blockquote>\n<p>In the source, at each line say</p>\n</blockquote>\n<p>Oh, like on GitHub?</p>",
        "id": 272051899,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644966953
    },
    {
        "content": "<p>Well, replacing the source links which currently post to the source hosted on GitHub</p>",
        "id": 272052829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644967643
    },
    {
        "content": "<p>e.g. for agda there is stuff like <a href=\"https://agda.github.io/agda-stdlib/Algebra.Structures.html\">https://agda.github.io/agda-stdlib/Algebra.Structures.html</a>, which is the source but hyperlinked</p>",
        "id": 272053028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644967797
    },
    {
        "content": "<p>Well, the point is that <code>#where</code> tells you all the current namespaces and variables, so you don’t have to scroll back through the file to reconstruct them. Easier to extract that information from the junk than from the file itself.</p>",
        "id": 272078103,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644992948
    },
    {
        "content": "<p>Ah and I guess your point is that you need this information to understand the actual types of definitions/lemmas in the source.</p>",
        "id": 272099688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645008573
    }
]