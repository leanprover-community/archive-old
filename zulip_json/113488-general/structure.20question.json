[
    {
        "content": "<p>I was just checking I'd got symmetry working with <code>ne</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">class zero_ne_one_class (α : Type u) extends has_zero α, has_one α :=</span>\n<span class=\"cm\">(zero_ne_one : 0 ≠ (1:α))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">zero_ne_one_class</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and this worked fine. But actually I didn't expect it to work, I expected Lean to moan that it couldn't find an instance of <code>has_zero R</code> etc. The <code>zero_ne_one_class</code> instance seems to have magicked them up!</p>\n<p>But that's weird, because this fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">class topological_ring extends topological_add_monoid α, topological_monoid α : Prop :=</span>\n<span class=\"cm\">(continuous_neg : continuous (λa:α, -a))</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">S : Type</span>\n<span class=\"cm\">⊢ topological_space S</span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">S : Type</span>\n<span class=\"cm\">⊢ ring S</span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">S : Type,</span>\n<span class=\"cm\">_inst_1 : topological_ring S</span>\n<span class=\"cm\">⊢ has_zero S</span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">S : Type,</span>\n<span class=\"cm\">_inst_1 : topological_ring S</span>\n<span class=\"cm\">⊢ has_zero S</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Structures are still a bit weird to me. Is this got something to do with the \"old\" structure command or is this yet another weirdness about structures?</p>",
        "id": 169662096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562261139
    },
    {
        "content": "<p>Aah, I see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">topological_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_add</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 169662173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562261242
    },
    {
        "content": "<p>\"Extends\" gets done automatically, the square bracket stuff doesn't. And there is no doubt some great reason involving diamonds or something which means that it can't extend them.</p>",
        "id": 169662229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562261289
    },
    {
        "content": "<p>Exactly</p>",
        "id": 169662456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562261646
    }
]