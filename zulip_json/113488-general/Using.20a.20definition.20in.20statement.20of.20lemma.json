[
    {
        "content": "<p>How do I correctly use <code>collinear</code> in <code>triangle_non_degen</code> ? Seems like since the type of <code>collinear</code> is <code>Prop</code>, it should work as I have it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">triangle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₁</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₀₂</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₀</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₁₂</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₀</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i₂₁</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p₀</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₁</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p₂</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">triangle_non_degen</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀₀</span> <span class=\"o\">:</span> <span class=\"n\">T.p₀</span> <span class=\"bp\">∉</span> <span class=\"n\">T.l₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">collinear</span> <span class=\"o\">(</span><span class=\"n\">T.p₀</span> <span class=\"n\">T.p₁</span> <span class=\"n\">T.p₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 321751748,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673929169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> <code>collinear L T.p₀ T.p₁ T.p₂</code> should do it.</p>",
        "id": 321751959,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673929422
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>. Give Antonella a big hug for me! <span aria-label=\"hug\" class=\"emoji emoji-1f917\" role=\"img\" title=\"hug\">:hug:</span></p>",
        "id": 321752764,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1673930265
    }
]