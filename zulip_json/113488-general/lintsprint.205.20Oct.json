[
    {
        "content": "<p>I am launching the mathlib lintsprint.</p>\n<p>As you might know, there is an ongoing effort to document and clean up mathlib. We have a set of linters that run on every pull request, and check whether all definitions have docstrings, whether simp-lemmas are in the right form, whether there are unused arguments, etc....<br>\nSuch a linter is introduced at a certain point in time, and from then on, all <em>new</em> code has to pass the linter. But we cut the <em>old</em> code some slack. All the old code that doesn't pass the linters, is listed in the file <code>scripts/nolints.txt</code>.<br>\nAs of today, that file looks like this: <a href=\"https://github.com/leanprover-community/mathlib/blob/f2044a57a2e7347a84c53c0a076355be56e04e9a/scripts/nolints.txt\">https://github.com/leanprover-community/mathlib/blob/f2044a57a2e7347a84c53c0a076355be56e04e9a/scripts/nolints.txt</a></p>",
        "id": 212265245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882008
    },
    {
        "content": "<p>I've run <code>grep \"^-- \" scripts/nolints.txt | wc -l</code>, which reports that there are <code>211</code> files about which the linter is unhappy. In total there are ~1500 problematic declarations right now, which means about 7~8 per file on average.</p>",
        "id": 212265253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882024
    },
    {
        "content": "<p>I've just submitted <a href=\"https://github.com/leanprover-community/mathlib/issues/4411\">#4411</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/4412\">#4412</a>, which take care of the first two files <code>algebra/direct_limit</code> and <code>algebra/direct_sum</code>.</p>",
        "id": 212265261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882033
    },
    {
        "content": "<p>How can you join?</p>\n<ul>\n<li>Choose a chunk from <a href=\"https://github.com/leanprover-community/mathlib/blob/f2044a57a2e7347a84c53c0a076355be56e04e9a/scripts/nolints.txt\">https://github.com/leanprover-community/mathlib/blob/f2044a57a2e7347a84c53c0a076355be56e04e9a/scripts/nolints.txt</a> and write a post in this thread where you claim to work on those linting errors.</li>\n<li>Create a PR in which you fix the linting errors (and nothing else!).</li>\n<li>Label the PR with <code>awaiting-review</code> and <code>lintfix</code>. If the PR has a total diff of &lt; 15 lines, also add <code>easy</code>.</li>\n</ul>",
        "id": 212265304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882045
    },
    {
        "content": "<p>If we have 10 people that each fix 10 linting errors, and we keep this up for 15 workdays (~3 weeks), then the nolints file will be empty!</p>",
        "id": 212265309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882049
    },
    {
        "content": "<p>If you join, please resist the temptation to refactor code (beyond removing unused arguments, and hence possibly changing the order of variables).<br>\nIf you see code that ought to be refactored, add a comment explaining this, but don't start the refactor in a <code>lintfix</code> PR.</p>",
        "id": 212265577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882327
    },
    {
        "content": "<p>Should we remove those lines from the <code>nolints.txt</code> file for the PR, too?</p>",
        "id": 212265864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601882628
    },
    {
        "content": "<p>No, we have <a href=\"https://github.com/leanprover-community/azure-scripts/blob/master/.github/workflows/nolints.yml\">a github action workflow</a> which takes care of those once a day.</p>",
        "id": 212265955,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601882678
    },
    {
        "content": "<p>For reference: this is how the length of <code>nolints.txt</code> has been shrinking over time: <a href=\"https://leanprover-community.github.io/mathlib_stats/nolints.png\">https://leanprover-community.github.io/mathlib_stats/nolints.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://leanprover-community.github.io/mathlib_stats/nolints.png\"><img src=\"https://leanprover-community.github.io/mathlib_stats/nolints.png\"></a></div>",
        "id": 212266099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601882817
    },
    {
        "content": "<p>logic/relation</p>",
        "id": 212267955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601884159
    },
    {
        "content": "<p>category_theory/adjunction/* <a href=\"https://github.com/leanprover-community/mathlib/issues/4415\">#4415</a></p>",
        "id": 212270481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601886056
    },
    {
        "content": "<p>category_theory/whiskering <a href=\"https://github.com/leanprover-community/mathlib/issues/4417\">#4417</a></p>",
        "id": 212271932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601887127
    },
    {
        "content": "<p>data/W <a href=\"https://github.com/leanprover-community/mathlib/issues/4418\">#4418</a></p>",
        "id": 212272091,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601887221
    },
    {
        "content": "<p>data/array/lemmas <a href=\"https://github.com/leanprover-community/mathlib/issues/4419\">#4419</a></p>",
        "id": 212272633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601887638
    },
    {
        "content": "<p>data/buffer/basic <a href=\"https://github.com/leanprover-community/mathlib/issues/4420\">#4420</a></p>",
        "id": 212272895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601887862
    },
    {
        "content": "<p>data/dlist/{basic,instances} <a href=\"https://github.com/leanprover-community/mathlib/issues/4422\">#4422</a></p>",
        "id": 212273801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601888526
    },
    {
        "content": "<p>linear_algebra/*</p>",
        "id": 212274139,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601888784
    },
    {
        "content": "<p>data/fintype/basic <a href=\"https://github.com/leanprover-community/mathlib/issues/4424\">#4424</a></p>",
        "id": 212276395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601890364
    },
    {
        "content": "<p>data/fin2 <a href=\"https://github.com/leanprover-community/mathlib/issues/4426\">#4426</a></p>",
        "id": 212277686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601891213
    },
    {
        "content": "<p>category_theory/monad/* <a href=\"https://github.com/leanprover-community/mathlib/issues/4428\">#4428</a></p>",
        "id": 212279185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601892294
    },
    {
        "content": "<p>I'll do category_theory/limits/* if <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> isn't already on it</p>",
        "id": 212279466,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1601892485
    },
    {
        "content": "<p>Awesome, haven't touched it.</p>",
        "id": 212279477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601892499
    },
    {
        "content": "<p>data/num (at some point today)</p>",
        "id": 212280027,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1601892931
    },
    {
        "content": "<p>category_theory/yoneda <a href=\"https://github.com/leanprover-community/mathlib/issues/4429\">#4429</a></p>",
        "id": 212280106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601892964
    },
    {
        "content": "<p>order/conditionally_complete_lattice <a href=\"https://github.com/leanprover-community/mathlib/issues/4434\">#4434</a></p>",
        "id": 212289668,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601899513
    },
    {
        "content": "<p>Everyone who contributed to todays sprint: we just had 14 PRs merged by bors in one batch! That's a record!</p>",
        "id": 212305824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601907853
    },
    {
        "content": "<p>order/rel_iso <a href=\"https://github.com/leanprover-community/mathlib/issues/4441\">#4441</a></p>",
        "id": 212317727,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601912598
    },
    {
        "content": "<p>data/pnat/basic<br>\ndata/pnat/factors <a href=\"https://github.com/leanprover-community/mathlib/issues/4443\">#4443</a></p>",
        "id": 212329498,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601918051
    },
    {
        "content": "<p>algebra/ring/basic - actually <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  took care of this</p>",
        "id": 212333531,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601920211
    },
    {
        "content": "<p>data/int/*, data/nat/prime</p>",
        "id": 212335597,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601921240
    },
    {
        "content": "<p>control/traversable/{basic,equiv,instances,lemmas} <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a></p>",
        "id": 212336491,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601921658
    },
    {
        "content": "<p>I'll take care of files in <code>topology/algebra</code></p>",
        "id": 212345813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601926169
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4446\">#4446</a></p>",
        "id": 212347821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601927396
    },
    {
        "content": "<p>The bad side of this sprint is it encourages people to fix linting errors without creating module docstrings...</p>",
        "id": 212347907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601927422
    },
    {
        "content": "<p>I guess we should have a module docstring linter...</p>",
        "id": 212350126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601928578
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/7f74e6b/src/topology/algebra/uniform_group.lean#L229\">https://github.com/leanprover-community/mathlib/blob/7f74e6b/src/topology/algebra/uniform_group.lean#L229</a></p>",
        "id": 212350339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601928677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> TODO: when modules are changed to have more explicit base ring, then change replace `is_Z_bilin`</span>\n<span class=\"cm\">by using `is_bilinear_map ℤ` from `tensor_product`. -/</span>\n</code></pre></div>",
        "id": 212350378,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601928696
    },
    {
        "content": "<p>Opened issue <a href=\"https://github.com/leanprover-community/mathlib/issues/4449\">#4449</a></p>",
        "id": 212350729,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601928886
    },
    {
        "content": "<p>Fixing non-linting issue was forbidden by Johan <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 212359472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601933447
    },
    {
        "content": "<p><code>measure_theory/*</code> is almost done, I'll finish it.</p>",
        "id": 212366517,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601938671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4453\">#4453</a> should do the rest of the <code>category_theory</code> linting, except for <code>category_theory/limits/*</code> which Markus is going to have a go at, and <code>Kleisli</code>. I'm inclined to generalise that to arbitary monads rather than documenting the existing definition (which is specific to monads in <code>Type</code>).</p>",
        "id": 212366576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601938704
    },
    {
        "content": "<p>And getting a start on Patrick's very reasonable suggestion that we work on module-docs as well, <a href=\"https://github.com/leanprover-community/mathlib/issues/4454\">#4454</a>, completing the module docs for <code>category_theory/monoidal/*</code>.</p>",
        "id": 212368205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601939930
    },
    {
        "content": "<p>nolints.txt is down 193 lines today! <a href=\"https://github.com/leanprover-community/mathlib/issues/4456\">#4456</a></p>",
        "id": 212374796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601946406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/lintsprint.205.20Oct/near/212366576\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4453\">#4453</a> should do the rest of the <code>category_theory</code> linting, except for <code>category_theory/limits/*</code> which Markus is going to have a go at, and <code>Kleisli</code>. I'm inclined to generalise that to arbitary monads rather than documenting the existing definition (which is specific to monads in <code>Type</code>).</p>\n</blockquote>\n<p>For the latter, I've got an old version here: <a href=\"https://github.com/b-mehta/topos/blob/master/src/kleisli.lean\">https://github.com/b-mehta/topos/blob/master/src/kleisli.lean</a>, which I can move to mathlib pretty easily instead, if you like</p>",
        "id": 212455284,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602003185
    },
    {
        "content": "<p>yes please!</p>",
        "id": 212492133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602022000
    }
]