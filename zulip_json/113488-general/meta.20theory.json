[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- the rest of this file doesn't need the `noncomputable` keyword (modulo caveats)</span>\n</code></pre></div>\n<p>Is there an equivalent</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"n\">theory</span> <span class=\"c1\">-- make all the defs in this file `meta`</span>\n</code></pre></div>",
        "id": 252057237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630826386
    },
    {
        "content": "<p>Actually, can I create a new command <code>mdef</code> that does <code>meta def</code>? (I'll change <code>mdef</code> to <code>laat</code> locally. Which is the dutch word for \"let\".)<br>\nI want someone to play with lean without bothering about well-founded recursion.</p>",
        "id": 252057350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630826500
    },
    {
        "content": "<p>Is this even possible in Lean 3, or should I use Lean 4 for this?</p>",
        "id": 252085361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630857938
    },
    {
        "content": "<p>it's not implemented in lean 3, but it might be possible to do</p>",
        "id": 252098281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630871970
    }
]