[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_mul_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- Should this be {x y} or (x y) or ⦃x y⦄?</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mul_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_mul_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">mul_equiv</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mul_equiv</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective_of_left_inverse</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"k\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"o\">],</span> <span class=\"kn\">end</span>\n  <span class=\"bp\">..</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">hom</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_equiv</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">units</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map_equiv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">units</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"c1\">--  hom := λ a b, units.ext $ h.hom} -- fails</span>\n<span class=\"c1\">--  hom := λ a b, units.ext $ by exact h.hom} -- fails</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mul_equiv</span>\n</pre></div>\n\n\n<p>In the perfectoid project we have a bunch of groups, rings, linearly ordered commutative monoids etc which are canonically isomorphic, so I've been trying to extend <code>equiv</code> to more general situations (see <a href=\"https://github.com/leanprover-community/mathlib/issues/789\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/789\">#789</a>). Why am I having trouble with the last line here?</p>",
        "id": 161001985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552835151
    },
    {
        "content": "<p>Could it be the case that the <code>hom</code> field in the structure might need different brackets to the def? I should get this right now because I want to build a bunch of equivs on top of this.</p>",
        "id": 161002130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552835353
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">monotone</span>\n<span class=\"c1\">-- monotone : Π {α : Type u_1} {β : Type u_2} [_inst_1 : preorder α] [_inst_2 : preorder β],</span>\n<span class=\"c1\">--   (α → β) → Prop</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">monotone</span>\n<span class=\"c1\">-- ∀ ⦃a b : α⦄, a ≤ b → f a ≤ f b</span>\n</pre></div>\n\n\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/789\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/789\">#789</a> Chris encouraged me to define <code>mul_equiv</code> for two types with <code>has_mul</code> as a bijection which preserved <code>*</code>. I want <code>le_equiv</code> and I was going to use <code>monotone</code> but this needs a preorder, rather than just a <code>has_le</code>.</p>\n<p>What is the best idea here? Can I weaken the definition of <code>monotone</code> to only demand <code>has_le</code>? Should I not define <code>le_equiv</code> and instead stick to <code>preorder_equiv</code>?</p>",
        "id": 161002635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552836153
    },
    {
        "content": "<p>I think you should PR a modification of <code>monotone</code> which assumes only <code>has_le</code></p>",
        "id": 161005085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552840013
    },
    {
        "content": "<p>In your def <code>is_mul_hom</code> I don't see any reason to have implicit <code>x</code> and <code>y</code>. Make them explicit and your problem in map_equiv will disappear (using <code>hom := λ a b, units.ext $ h.hom _ _</code>)</p>",
        "id": 161005140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552840089
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/bounds/near/147878878\" title=\"#narrow/stream/116395-maths/topic/bounds/near/147878878\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/bounds/near/147878878</a> is the reason why I don't just PR this modification of <code>monotone</code>. I already observed that some stuff in mathlib only needed <code>has_le</code> but Mario seemed to think it was better to have it defined on preorders. I remember being surprised at the time.</p>",
        "id": 161006629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552842493
    },
    {
        "content": "<blockquote>\n<p>In your def <code>is_mul_hom</code> I don't see any reason to have implicit <code>x</code> and <code>y</code>. Make them explicit and your problem in map_equiv will disappear (using <code>hom := λ a b, units.ext $ h.hom _ _</code>)</p>\n</blockquote>\n<p>Mario wrote <code>monotone</code> and he used <code>{{ }}</code>. Note that <code>is_mul_hom</code> is \"forall x y, P = Q\" whereas monotone is \"forall {{x y}}, P -&gt; Q\". Does the implication make a difference?</p>",
        "id": 161006867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552842850
    },
    {
        "content": "<p>it does</p>",
        "id": 161007302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552843513
    },
    {
        "content": "<p>you could use <code>{{ }}</code> for is_mul_hom but it wouldn't make a difference</p>",
        "id": 161007309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552843542
    },
    {
        "content": "<p>Ok, PR updated, although I don't really understand what's going on.</p>",
        "id": 161007938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552844569
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/algebra/group.lean#L597\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/algebra/group.lean#L597\">https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/algebra/group.lean#L597</a></p>\n<p>Mathlib currently has implicits for <code>map_mul</code> there. If I change them then <code>algebra.big_operators</code> breaks . Is it worth changing?</p>",
        "id": 161008826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552846037
    }
]