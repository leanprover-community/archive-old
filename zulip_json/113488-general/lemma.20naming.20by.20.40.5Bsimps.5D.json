[
    {
        "content": "<p>I'm copying this comment from <a href=\"https://github.com/leanprover-community/mathlib/issues/4169\">#4169</a> to get more visibility. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> @others: opinions?</p>\n<p>This was in response to <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s comment:</p>\n<blockquote>\n<p>Hmmm, I really like <code>simps</code>! Would it be possible to have the new names use <code>coe</code> instead of <code>to_fun</code>? Because, when I see a simp-lemma whose name ends in <code>to_fun</code> I assume that it is a lemma that turns <code>f.to_fun</code> into a coerced <code>(f : _ → _)</code>.</p>\n<p>Or will this require ugly hackery?</p>\n</blockquote>\n<p>I've been thinking about custom naming of <code>@[simps]</code>.</p>\n<p>Just renaming a projection should not be a problem. The nontrivial thing is to decide on the syntax to (1) do this automatically every time and (2) do this once for a specific <code>simps</code> attribute (if we want that). <br>\nAn even easier thing to do is to is just to rename all projections that are coercions <code>coe</code> (and have no further control over it).</p>\n<p>However, there are still questions like</p>\n<ul>\n<li>do we want the lemma name <code>coe_foo</code> or <code>foo_coe</code>? The former seems more standard in mathlib, but the latter is probably be more standard for all projections not named <code>coe</code>.</li>\n<li>What to do with multiple projections. For example, the following lemma generated by <code>simps</code> came up in <a href=\"https://github.com/leanprover-community/mathlib/issues/4155\">#4155</a>: </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">fixed_points</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom_to_fun_to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">faithful_mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">to_alg_hom</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>If we rename the projections, this might become <code>fixed_points.to_alg_hom_coe_coe</code>. There is already an option to only use the last projection name, so that it would become <code>fixed_points.to_alg_hom_coe</code>. That is satisfactory in this case, but in other cases you might want more freedom (if projection <code>X</code> and then <code>Y</code> is applied, I want the name to be <code>foo_Z</code> instead of <code>foo_X_Y</code>).</p>",
        "id": 210565589,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600457631
    },
    {
        "content": "<p>Thanks a lot for looking into this Floris. I'm afraid that I can't be of much help. But it's clear that simps adds some really nice icing on the cake that is mathlib/lean.</p>",
        "id": 210595235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600486619
    },
    {
        "content": "<p>The low-hanging fruit is done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4663\">#4663</a>. We can now rename projection names to a different string. We cannot rename a string of projections into 1 short name, and we cannot override the custom name once we have specified it. But the features of <a href=\"https://github.com/leanprover-community/mathlib/issues/4663\">#4663</a> should cover 95+% of the cases.</p>",
        "id": 213673815,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602973817
    }
]