[
    {
        "content": "<p>when i use a \"real\" programming language, i like to use an autoformatter, because i don't like to think about formatting my code beyond \"good enough\". is there an autoformatter or one planned for lean?</p>",
        "id": 209511839,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599659065
    },
    {
        "content": "<p>Nothing for Lean 3. I guess we're all waiting for Lean 4.</p>",
        "id": 209511966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599659137
    },
    {
        "content": "<p>But it might be really hard to do this for Lean 4, because its syntax is <em>extremely</em> flexible.</p>",
        "id": 209512079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599659175
    },
    {
        "content": "<p>Is there a linter? I saw mathlib used one, but it didn't seem general purpose</p>",
        "id": 209515181,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599660407
    },
    {
        "content": "<p>(Something that doesn't fully do the autoformatting but at least complains for whatever style lean files might want to follow)</p>",
        "id": 209515213,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599660425
    },
    {
        "content": "<p>The linting is different from usual linters</p>",
        "id": 209515275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599660469
    },
    {
        "content": "<p>The mathlib linters check that a theorem uses all its assumptions, things like that.</p>",
        "id": 209515356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599660486
    },
    {
        "content": "<p>Or bad simp-lemmas, or using <code>&gt;</code> instead of <code>&lt;</code></p>",
        "id": 209515400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599660503
    },
    {
        "content": "<p>ah</p>",
        "id": 209515458,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599660539
    },
    {
        "content": "<p>They aren't even technically capable of inspecting the syntax that the user wrote.</p>",
        "id": 209515519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599660571
    },
    {
        "content": "<p>Because they operate on a level behind the parser.</p>",
        "id": 209515553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599660586
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 209515920,
        "sender_full_name": "Julian Berman",
        "timestamp": 1599660723
    },
    {
        "content": "<p>Bumping this year-old thread. Are we still waiting for lean4? Is the lean4 syntax now fully specified and unchanging?</p>",
        "id": 255954302,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1633270409
    },
    {
        "content": "<p>The Lean 4 syntax is so extensible I'm not sure this \"fully specified and unchanging\" question makes sense. But Lean 4 can definitely autoformat itself.</p>",
        "id": 255954664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633270790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 255954714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633270810
    },
    {
        "content": "<p>Aha, so a lean4 autoformatter would of course be a lean4 codebase. This makes sense.</p>\n<p>Meanwhile, we are N years away from mathlib4 being the \"main\" mathlib. What is N? If N is large, does it justify a lean3 autoformatter in the meantime? I've noticed on many PRs that formatting causes several rounds of asynchronous communication, while also being largely automatable.</p>",
        "id": 255954847,
        "sender_full_name": "Matt Kempster",
        "timestamp": 1633270950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/autoformatter.20for.20lean/near/255954664\">said</a>:</p>\n<blockquote>\n<p>The Lean 4 syntax is so extensible I'm not sure this \"fully specified and unchanging\" question makes sense. But Lean 4 can definitely autoformat itself.</p>\n</blockquote>\n<p>Well enough for the goal view at least, but not for formatting source code. <a href=\"https://github.com/leanprover/lean4/blob/af12c91b0a50db2e474a1e9e04960966eea85499/tests/lean/Reformat.lean.expected.out\">https://github.com/leanprover/lean4/blob/af12c91b0a50db2e474a1e9e04960966eea85499/tests/lean/Reformat.lean.expected.out</a> shows the current state, though many edge case are not present in there.</p>",
        "id": 255954945,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633271052
    },
    {
        "content": "<p>Yes, my understanding is there is no hope to write a Lean 4 autoformatter in any other language. And we hope N is less than one.</p>",
        "id": 255955048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633271170
    },
    {
        "content": "<p>Formatting code with sensible line breaks is an art and someone would likely need to spend a month or so solely on the Lean 4 formatter to achieve remotely acceptable output</p>",
        "id": 255955064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633271193
    },
    {
        "content": "<p>One of my hopes for the Lean 4 version of the Bernardy pretty-printer is to figure out the best way to leverage it as a library for making formatters; I think it can significantly reduce the amount of work needed to get good (but still customizable) formatting.  I haven't pushed the update yet, but I implemented a much more efficient handling for blocks of text to allow for incorporation of docs and comments.</p>\n<p>If anyone's actually interested in making a full-blown formatter, get in touch and I'll work with you to figure out the best way to adapt it to work with Lean syntax trees.</p>",
        "id": 255990391,
        "sender_full_name": "Chris B",
        "timestamp": 1633306480
    }
]