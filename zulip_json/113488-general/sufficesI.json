[
    {
        "content": "<p>Could we have an \"instance version\" of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suffices\">tactic#suffices</a>? This would complete the <code>have</code>, <code>haveI</code>, <code>suffices</code> square.</p>",
        "id": 281613926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652037542
    },
    {
        "content": "<p>Do you have a practical use in mind for it?</p>",
        "id": 281614007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652037666
    },
    {
        "content": "<p>It has the same applications as <code>haveI</code>. For example I have this proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">subtype.is_empty_of_false</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hbk</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">det_is_empty</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>This would read slightly better as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">sufficesI</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">det_is_empty</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subtype.is_empty_of_false</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hbk</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 281614097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652037771
    },
    {
        "content": "<p>Ideally <code>is_empty</code> would not be a class in the first place, and you could just write <code>apply det_is_empty</code> and then the rest.</p>",
        "id": 281614408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038263
    },
    {
        "content": "<p>Sure, but</p>\n<ol>\n<li>It should be a class</li>\n<li>My specific problem has little to do with the tactic gap that I just uncovered</li>\n</ol>",
        "id": 281614473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652038330
    },
    {
        "content": "<p>But I think this is really a representative example--my biggest problem with type class abuse is precisely that it makes these kinds of proofs more awkward. In the best case you make <code>I</code> duplicates of a bunch of tactics but it's still worse than just proving stuff normally; here you had to spell out the exact <code>is_empty</code> statement you need.</p>",
        "id": 281614579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038552
    },
    {
        "content": "<p>I think what would make the situation more tolerable is something like an <code>apply</code> tactic that turns failed instance searches into new goals</p>",
        "id": 281614629,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038597
    },
    {
        "content": "<p>We should either have both <code>haveI</code> and <code>sufficesI</code> or none of them, because they fulfill the exact same role. Is your solution to delete <code>haveI</code>?</p>",
        "id": 281614647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652038663
    },
    {
        "content": "<p>??</p>",
        "id": 281614702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038701
    },
    {
        "content": "<p>There's a mismatch between <code>have</code> and <code>suffices</code>. This mismatch shouldn't exist. What is your solution to it?</p>",
        "id": 281614713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652038737
    },
    {
        "content": "<p>Why do I need a solution?</p>",
        "id": 281614728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038766
    },
    {
        "content": "<p>I think adding <code>sufficesI</code> is okay; but it doesn't address the real issue</p>",
        "id": 281614730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652038780
    },
    {
        "content": "<p>Sure, we can also add <code>applyI</code> which does what you say. I think this would be ideal.</p>",
        "id": 281614773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652038805
    },
    {
        "content": "<p>We have <code>apply_with</code></p>",
        "id": 281614780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652038820
    },
    {
        "content": "<p>And you can just use <code>suffices : foo, { resetI, bar }</code>.</p>",
        "id": 281614789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652038847
    },
    {
        "content": "<p>How does one use <code>apply_with</code>?</p>",
        "id": 281614801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652038897
    },
    {
        "content": "<p><code>apply_with ... { instances := ff }</code></p>",
        "id": 281614866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652038929
    },
    {
        "content": "<p>Does that mean <em>all</em> instance arguments will become new goals? That's probably not ideal either</p>",
        "id": 281614984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652039155
    },
    {
        "content": "<p>Yeah, that's what it does. When I do it I usually have to do <code>any_goal { apply_instance }</code> right after</p>",
        "id": 281615104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652039299
    },
    {
        "content": "<p>It might be that adding a <code>tactic.swap</code> at the end of the <code>haveI</code> tactic would generate the <code>sufficesI</code> tactic.<br>\nI'm not at a computer, so cannot check now, though.</p>",
        "id": 281616904,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652041988
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#exactI\">tactic#exactI</a> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exactI</span> <span class=\"n\">det_is_empty</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subtype.is_empty_of_false</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hbk</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>Or there's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">det_is_empty</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subtype.is_empty_of_false</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hbk</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>but <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfreezingI\">tactic#unfreezingI</a> doesn't focus the goal.</p>",
        "id": 281617787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652043294
    },
    {
        "content": "<p>For longer proofs inside the first <code>suffices</code> goal, you can put <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a> at the beginning. I think the value-add of <code>haveI</code> is that you don't have to do <code>have : foo, { ...}, resetI, ...</code> with the <code>resetI</code> potentially far away from the <code>have</code>.</p>",
        "id": 281617931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652043492
    }
]