[
    {
        "content": "<p>Should we have a typeclass for things where <code>0 = \\bot</code>? There are quite a number of examples:</p>\n<ul>\n<li><code>nat</code>,</li>\n<li><code>nnreal</code>,</li>\n<li><code>with_zero G</code> (for <code>G</code> a linearly ordered comm monoid),</li>\n<li><code>X → Y</code>, whenever <code>Y</code> is an instance of the class under discussion</li>\n<li><code>finsupp X Y</code>, idem dito</li>\n</ul>",
        "id": 202654196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593671353
    },
    {
        "content": "<p>Question is inspired by: <a href=\"https://github.com/leanprover-community/mathlib/pull/3094/files#diff-b49cdf1ee39a90ada5463a413001d526R97\">https://github.com/leanprover-community/mathlib/pull/3094/files#diff-b49cdf1ee39a90ada5463a413001d526R97</a></p>",
        "id": 202654206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593671388
    },
    {
        "content": "<p><code>zero_le</code> is a theorem of <code>canonically_ordered_monoid</code> but we could generalize it</p>",
        "id": 202655279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672635
    },
    {
        "content": "<p>I see, because I guess that <code>X →\\0 nat</code> is not a canonically ordered monoid, right?</p>",
        "id": 202655333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672716
    },
    {
        "content": "<p>I think it is?</p>",
        "id": 202655382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672737
    },
    {
        "content": "<p>Are canonically ordered monoids totally ordered?</p>",
        "id": 202655412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672746
    },
    {
        "content": "<p>no</p>",
        "id": 202655416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672754
    },
    {
        "content": "<p>I see</p>",
        "id": 202655419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672757
    },
    {
        "content": "<p>multiset is a good example too</p>",
        "id": 202655421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593672767
    },
    {
        "content": "<p>So only <code>with_zero G</code> in the above list is not canonically ordered. The others are.</p>",
        "id": 202655444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672788
    },
    {
        "content": "<p>The ideals of a Dedekind domain are canonically ordered, the elements of a UFD aren't, but they only form a pre-order</p>",
        "id": 202655652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593672964
    },
    {
        "content": "<p>Wait they are canonically ordered</p>",
        "id": 202655667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593672981
    },
    {
        "content": "<p>Preordered</p>",
        "id": 202655671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593672990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202655652\">said</a>:</p>\n<blockquote>\n<p>The ideals of a Dedekind domain are canonically ordered</p>\n</blockquote>\n<p>But multiplicative... sorry, we don't support that.</p>",
        "id": 202655695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593673034
    },
    {
        "content": "<p>So, should this be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">zero_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_bot</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_eq_bot</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">\\</span><span class=\"n\">bot</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Or should this use a different setup?</p>",
        "id": 202655795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593673106
    },
    {
        "content": "<p>I guess <code>zero_eq_bot</code> is a bad name for the class, because we want to reserve that name for the lemma...</p>",
        "id": 202655811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593673130
    },
    {
        "content": "<p>We had zero_ne_one_class but look what happened to that</p>",
        "id": 202655850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673174
    },
    {
        "content": "<p>That was different.. it extended <code>has_one</code> and <code>has_zero</code></p>",
        "id": 202655906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593673205
    },
    {
        "content": "<p>I'm just saying that the name changed later</p>",
        "id": 202655975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673266
    },
    {
        "content": "<p>Aha, ok</p>",
        "id": 202655991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593673286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202655795\">said</a>:</p>\n<blockquote>\n<p>So, should this be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">zero_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_bot</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_eq_bot</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">\\</span><span class=\"n\">bot</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Or should this use a different setup?</p>\n</blockquote>\n<p>I don't know why Lean doesn't know that this is a <code>Prop</code>, it should, but alright this is <code>Prop</code></p>",
        "id": 202656008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593673304
    },
    {
        "content": "<p>Zero_eq_bot_class is just asking to be renamed</p>",
        "id": 202656019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673311
    },
    {
        "content": "<p>Kenny it's a bug in structure</p>",
        "id": 202656084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673342
    },
    {
        "content": "<p>T2 spaces were types for a long time for this reason</p>",
        "id": 202656114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593673374
    },
    {
        "content": "<p>I don't like that class because it says nothing other than literally <code>0 = bot</code></p>",
        "id": 202657444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674496
    },
    {
        "content": "<p>at the very least I want <code>0</code> and <code>bot</code> to have some algebraic meaning</p>",
        "id": 202657469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674515
    },
    {
        "content": "<p>like it should extend <code>order_bot</code> or something so that you can prove <code>zero_le</code></p>",
        "id": 202657512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674529
    },
    {
        "content": "<p>Also, what about preorders satisfying <code>zero_le</code> but not <code>0 = bot</code>?</p>",
        "id": 202657543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593674558
    },
    {
        "content": "<p>Those are ugly</p>",
        "id": 202657738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593674727
    },
    {
        "content": "<p>With_top int is used in valuations</p>",
        "id": 202657991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593674947
    },
    {
        "content": "<p>But not with_bot int</p>",
        "id": 202658007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593674966
    },
    {
        "content": "<p>with_bot int wouldn't be one of these, right?</p>",
        "id": 202658088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675024
    },
    {
        "content": "<p>This whole thing is so weird. Mathematicians use different kinds of structures with + and *, and different kinds of structures with bot and top</p>",
        "id": 202658107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675046
    },
    {
        "content": "<p>I think I would rather have this be a <code>zero_le_class</code> that doesn't say anything about bot</p>",
        "id": 202658128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675066
    },
    {
        "content": "<p>With_bot int has 0 ne bot but it's clearly an ugly class</p>",
        "id": 202658134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675077
    },
    {
        "content": "<p>You would never need it, you'd instead use eint</p>",
        "id": 202658146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675108
    },
    {
        "content": "<p>I'm not really sure what the motivation for the question is TBH</p>",
        "id": 202658202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675128
    },
    {
        "content": "<p>Which also has zero ne bot and is a bit more respectable</p>",
        "id": 202658203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675129
    },
    {
        "content": "<p>If you think in this kind of way you end up isolating structures such as a group with 0, something which I consider rather a clever insight</p>",
        "id": 202658252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675171
    },
    {
        "content": "<p>group with zero has some respectable axioms though</p>",
        "id": 202658285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675194
    },
    {
        "content": "<p>this has just one equality</p>",
        "id": 202658296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675200
    },
    {
        "content": "<p>UFD should be a predicate on monoid with 0</p>",
        "id": 202658320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675221
    },
    {
        "content": "<p>why with zero? It doesn't talk about zero at all</p>",
        "id": 202658467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675313
    },
    {
        "content": "<p>Because rings have 0 and you're stuck with them</p>",
        "id": 202658483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675335
    },
    {
        "content": "<p>\"all elements that are not zero-like have a unique factorization\"</p>",
        "id": 202658502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675361
    },
    {
        "content": "<p>Eg nat</p>",
        "id": 202658560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593675380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202658202\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure what the motivation for the question is TBH</p>\n</blockquote>\n<p>See the second post of the thread</p>",
        "id": 202658587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593675432
    },
    {
        "content": "<p>I don't think this is a general class. <code>nat.bot_eq_zero</code> simply calculates the value of <code>bot : nat</code> according to the definition. I would call it <code>nat.bot_eq</code></p>",
        "id": 202658850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675657
    },
    {
        "content": "<p>This looks more like a definition unfolding simp lemma, and we generally don't make those into classes</p>",
        "id": 202658876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Let me <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> my question: What should the statement of <code>finsupp.has_inf</code> look like?</p>",
        "id": 202658945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593675745
    },
    {
        "content": "<p>well you can state it over a canonically ordered monoid and still cover all your targets</p>",
        "id": 202658990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593675817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 202659113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593675938
    },
    {
        "content": "<p>Actually that class doesn't have an inf</p>",
        "id": 202659200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593676007
    },
    {
        "content": "<p>you could define it, but there is also <code>decidable_linear_ordered_cancel_add_comm_monoid</code> which is not the lub of those classes but is an ub below <code>nat</code></p>",
        "id": 202659227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593676054
    },
    {
        "content": "<p>In my code, I just defined the lattice structure on finsupps to nat, because I only really care about finsupps representing factorizations. It occurs to me that it might be nice to be able to define such factorizations with enats, so that we can prime-factorize 0, in which case canonically_ordered_add_monoid would also suffice. Thus I think canonically_ordered_add_monoid would work for all applications I can imagine at the moment</p>",
        "id": 202716776,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593709761
    },
    {
        "content": "<p>Actually, no, this won't work right. I need <code>canonically_ordered_add_monoid</code>s that are also (semi-)lattices</p>",
        "id": 202717019,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593709886
    },
    {
        "content": "<p>In order to define (semi-)lattice operations</p>",
        "id": 202717042,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593709903
    },
    {
        "content": "<p>And the other property I need is zero_le</p>",
        "id": 202717160,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593709948
    },
    {
        "content": "<p>Does <code>decidable_linear_ordered_cancel_add_comm_monoid</code> work on <code>enat</code>?</p>",
        "id": 202717360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710045
    },
    {
        "content": "<p>I guess it's not cancellative</p>",
        "id": 202717388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710062
    },
    {
        "content": "<p>We really need to rename that class to <code>dlocacm</code></p>",
        "id": 202717399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593710066
    },
    {
        "content": "<p>I want to popularize more acronymy</p>",
        "id": 202717424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710082
    },
    {
        "content": "<p>Acronyms really make the code inscrutable. I think the cost to readability often exceeds any benefit</p>",
        "id": 202717558,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593710152
    },
    {
        "content": "<p>Then we should use less words</p>",
        "id": 202717720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710217
    },
    {
        "content": "<p>I want a character limit on concept names</p>",
        "id": 202717758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710237
    },
    {
        "content": "<p>something like <code>DLO_cancel_add_comm_monoid</code> would work for me as well</p>",
        "id": 202717858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710277
    },
    {
        "content": "<p>plus you can put the expansion in the docstring</p>",
        "id": 202717927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710292
    },
    {
        "content": "<p>So I think if I was in a vacuum, I'd use something like <code>[semilattice_inf_bot] [fact zero_eq_bot]</code> and then feel icky about using fact (<code>[semilattice_inf] [fact zero_le]</code> would work, but such a thing is provably an instance of the other thing already!)</p>",
        "id": 202718200,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593710407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202717758\">said</a>:</p>\n<blockquote>\n<p>I want a character limit on concept names</p>\n</blockquote>\n<p>Why? How much do each character cost you?</p>\n<p>Because concepts can be phrases, maybe the documentation should treat them as a series of words rather than one huge word.</p>",
        "id": 202718458,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593710529
    },
    {
        "content": "<p>I think readability is significantly hampered in theorems like <code>decidable_linear_ordered_cancel_add_comm_monoid.to_decidable_linear_ordered_add_comm_monoid</code></p>",
        "id": 202718554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710591
    },
    {
        "content": "<p>At a certain point we should say \"okay this sequence of words is a unit now, let's acronym and continue\"</p>",
        "id": 202718708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710660
    },
    {
        "content": "<p>that way we can keep recursively acronyming to keep the size bounded</p>",
        "id": 202718804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593710707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202658320\">said</a>:</p>\n<blockquote>\n<p>UFD should be a predicate on monoid with 0</p>\n</blockquote>\n<p>I have half-baked ideas on this now, which you can see at <a href=\"https://github.com/leanprover-community/mathlib/blob/freek-70/roadmap/divisibility_lattice.lean\">https://github.com/leanprover-community/mathlib/blob/freek-70/roadmap/divisibility_lattice.lean</a> if you want. I think that we could have a series of divisibility typeclasses on monoids, ranging from \"reasonably defined dvd\" to <code>gcd_domain</code> minus <code>[integral_domain]</code> to <code>UFD</code> minus <code>[integral_domain]</code>.</p>",
        "id": 202719137,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593710864
    },
    {
        "content": "<p>In the case of UFD, unfortunately, the only way to unify the case of monoids with zero and without zero that occurs to me is to use a <code>finsupp primes enat</code> definition of factorization, but enats are messy, and the zero and nonzero cases have different ways of reducing to regular nats</p>",
        "id": 202719688,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593711100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/113488-general/topic/types.20with.200.20.3D.20bot/near/202718200\">said</a>:</p>\n<blockquote>\n<p>So I think if I was in a vacuum, I'd use something like <code>[semilattice_inf_bot] [fact zero_eq_bot]</code> and then feel icky about using fact (<code>[semilattice_inf] [fact zero_le]</code> would work, but such a thing is provably an instance of the other thing already!)</p>\n</blockquote>\n<p>Actually,  because <code>[semilattice_inf]</code> has <code>inf_idem</code>, the inf of two finsupps is still a finsupp even without zero_le. It's just that I'd have to use filter or something to define the supports of infs and sups, although I could prove lemmas to simplify those in some cases.</p>",
        "id": 202723400,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593712783
    },
    {
        "content": "<p>(of course a bot instance still requires zero_le)</p>",
        "id": 202723476,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593712803
    },
    {
        "content": "<p>I've made some progress at <a href=\"https://github.com/leanprover-community/mathlib/issues/3335\">#3335</a>, but there's still some awkward assumptions where there should be typeclass inference</p>",
        "id": 203471800,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594360540
    },
    {
        "content": "<p>I think everything I want to do really applies to <code>finsupp</code>s with values in <code>nat</code>, <code>enat</code>, <code>nnreal</code>, or <code>ennreal</code>.</p>",
        "id": 203859643,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594746459
    },
    {
        "content": "<p>Right, so we need to have a typeclass that applies to all those cases</p>",
        "id": 203859727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594746489
    },
    {
        "content": "<p>It would be enough to assume that I'm working with a <code>canonically_ordered_add_monoid</code> which is also compatibly a <code>decidable_linear_order</code></p>",
        "id": 203859746,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594746498
    },
    {
        "content": "<p>I think this is a job for <code>tactic.pi_instances</code>?</p>",
        "id": 203859814,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594746537
    },
    {
        "content": "<p>Well... it's not really a pi type</p>",
        "id": 203860028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594746640
    },
    {
        "content": "<p>So... I'm not so sure</p>",
        "id": 203860058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594746654
    },
    {
        "content": "<p>Well, I'm just wondering what in this file <a href=\"https://github.com/leanprover-community/mathlib/blob/6c1ae3b/src/order/bounded_lattice.lean#L21\">https://github.com/leanprover-community/mathlib/blob/6c1ae3b/src/order/bounded_lattice.lean#L21</a> allows typeclasses like <code>semilattice_inf_bot</code> to extend <code>semilattice_inf</code> and <code>order_bot</code> simultaneously with the same <code>le</code></p>",
        "id": 203860422,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594746847
    },
    {
        "content": "<p><code>set_option old_structure_cmd true</code></p>",
        "id": 203860534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594746907
    },
    {
        "content": "<p>That's the magic bit that makes them share fields that they have in common</p>",
        "id": 203860585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594746937
    },
    {
        "content": "<p>Is there a way to do this when you have a lemma that wants to use two typeclass instances that have fields in common, or do you just need to make a new typeclass extending both, with that command?</p>",
        "id": 203860733,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594746997
    },
    {
        "content": "<p>I think you need a new class</p>",
        "id": 203861099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594747176
    },
    {
        "content": "<p>So you mentioned two classes... are they sufficient to prove <code>0 \\le x</code> for all <code>x</code>?</p>",
        "id": 203861216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594747213
    },
    {
        "content": "<p>Just <code>canonically_ordered_add_monoid</code> is enough for <code>zero_eq_bot</code></p>",
        "id": 203862729,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594747942
    },
    {
        "content": "<p>So what do you need the DLO for?</p>",
        "id": 203862800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594747981
    },
    {
        "content": "<p>Or rather, what is the kind of statement for which you need both?</p>",
        "id": 203862840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594748003
    },
    {
        "content": "<p>To show that <code>(inf f g).support</code> is the intersection of <code>f.support</code> and <code>g.support</code></p>",
        "id": 203862854,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594748012
    },
    {
        "content": "<p>Aha, I see</p>",
        "id": 203862903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594748039
    },
    {
        "content": "<p>I need the fact that <code>inf x y = 0</code> iff <code>x = 0 or y = 0</code></p>",
        "id": 203862949,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594748043
    },
    {
        "content": "<p>I guess we need a linearly canon.ord.add.mon in that case</p>",
        "id": 203862983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594748068
    },
    {
        "content": "<p>And if I want to put an instance of <code>canonically_ordered_add_monoid</code> on <code>finsupp</code>, then some things also break, which I'm fairly sure can be fixed under the DLO assumption</p>",
        "id": 203863016,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594748097
    },
    {
        "content": "<p>I'll make that extra class and try everything out later today. Should the extra class be defined in the same file as <code>canonically_ordered_add_monoid</code>?</p>",
        "id": 203863091,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1594748147
    },
    {
        "content": "<p>Ok, so wherever canon.ord.add.mon is defined, you can add another type that is a linear version</p>",
        "id": 203863097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594748149
    }
]