[
    {
        "content": "<p>We don't use <code>@[to_additive]</code> on definitions/lemmas involving <code>pow</code> (<code>a ^ n</code>). <br>\nAm I correct in believing that the only reason that we don't do that is that the additive version <code>smul</code> (<code>n â€¢ a</code>) has the arguments switched?</p>\n<p>If so, I'll try to teach <code>@[to_additive]</code> to switch these arguments.</p>",
        "id": 241312006,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622664138
    },
    {
        "content": "<p>That would be very nice if there is no hidden bad consequence.</p>",
        "id": 241312327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622664302
    },
    {
        "content": "<p>Yes, I think that's the only reason.</p>",
        "id": 241312446,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622664362
    },
    {
        "content": "<p>It's maybe complicated by the fact that smul has an additive counterpart, vadd.</p>",
        "id": 241321495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622668877
    },
    {
        "content": "<p>But I guess that probably isn't used much for nat.</p>",
        "id": 241321537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622668903
    },
    {
        "content": "<p>I think the main reason is that <code>to_additive</code> gets confused about theorems involving addition/multiplication on <code>nat</code></p>",
        "id": 241345517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622691761
    },
    {
        "content": "<p>How often is <code>to_additive</code> used to actually convert something about multiplication on <code>nat</code> to something about addition on <code>nat</code>?  If it is not so much (and is easy to implement) maybe it makes sense to prevent <code>to_additive</code> to ever convert <code>nat.[something]</code> to <code>nat.[something_else]</code>?</p>",
        "id": 241352579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622701618
    },
    {
        "content": "<p>that's definitely the intent, but it is techically difficult to achieve, because <code>to_additive</code> is roughly just doing a find and replace of <code>add</code> for <code>mul</code></p>",
        "id": 241352613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622701678
    },
    {
        "content": "<p>It's not that it sees <code>nat.mul</code> and turns it into <code>nat.add</code>, it sees <code>has_mul.mul nat nat.has_mul</code> and turns it into <code>has_add.add nat nat.has_mul</code> (because <code>has_mul.mul -&gt; has_add.add</code> is among the rewrites but not <code>nat.has_add -&gt; nat.has_mul</code> which we don't want anyway), resulting in a type error</p>",
        "id": 241352708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622701790
    },
    {
        "content": "<p>Ok, thanks for the explanation!  I had been looking at the <code>to_additive</code> code, but cannot make much progress in understanding the mechanics of it.</p>\n<p>What you wrote already explains it better than I had understood!</p>",
        "id": 241352791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622701847
    },
    {
        "content": "<p>I will say one more thing and will likely shut up afterwards, since I am not really sure that I can contribute much.</p>\n<p>The failing examples that I have seen could have been solved by replacing some (explicit or implicit) <code>n + 1</code> to a <code>n.succ</code>.  Could it be made so that <code>to_additive</code> first replaces all <code>+ 1</code> (on <code>nat</code>) to <code>.succ</code> and then does its magic?</p>",
        "id": 241352951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622702031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/to_additive.20and.20pow/near/241345517\">said</a>:</p>\n<blockquote>\n<p>I think the main reason is that <code>to_additive</code> gets confused about theorems involving addition/multiplication on <code>nat</code></p>\n</blockquote>\n<p>Yes, I've noticed that now as well, and I'm keeping this on hold until the other PR is merged. The first tests are very promising though.</p>",
        "id": 241359320,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622707441
    }
]