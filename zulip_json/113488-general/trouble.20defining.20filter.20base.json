[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">filter_basis</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span> <span class=\"o\">},</span> <span class=\"c1\">-- WHY DOES THIS NOT WORK?</span>\n    <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">ℱ</span> <span class=\"o\">:=</span> <span class=\"n\">ℬ.filter</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ℱ.ne_bot</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.of</span> <span class=\"n\">ℱ</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't figure out what the problem is though.</p>",
        "id": 267658728,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641941851
    },
    {
        "content": "<p>Sadly, the syntax you are trying to use there simply does not exist.</p>",
        "id": 267659038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641942011
    },
    {
        "content": "<p>Oh. What is the correct syntax then?</p>",
        "id": 267659181,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641942080
    },
    {
        "content": "<p>You can write <code>sets := { W | ∃ V ∈ 𝒱, W = f ⁻¹' V ∩ A },</code></p>",
        "id": 267659301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641942128
    },
    {
        "content": "<p>The thing before the <code>|</code> has to be a variable</p>",
        "id": 267659334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641942148
    },
    {
        "content": "<p>Ah, I see. For some reason, I thought the set comprehension syntax was more flexible.</p>",
        "id": 267659433,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641942207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/trouble.20defining.20filter.20base/near/267659334\">said</a>:</p>\n<blockquote>\n<p>The thing before the <code>|</code> has to be a variable</p>\n</blockquote>\n<p>or a <code>∈</code></p>",
        "id": 267660113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641942578
    },
    {
        "content": "<p>That's not completely true... e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 267660301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641942672
    },
    {
        "content": "<p>Aha. So I tried <code>{ (f ⁻¹' V ∩ A) | V ∈ 𝒱 },</code> and that works.</p>",
        "id": 267660504,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641942780
    },
    {
        "content": "<p>Wait really??</p>",
        "id": 267660699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641942897
    },
    {
        "content": "<p>Aha, a \"new\" feature (added around 3.18 apparently)</p>",
        "id": 267660726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641942907
    },
    {
        "content": "<p>Yep! This syntax was added fairly recently</p>",
        "id": 267660988,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641943081
    },
    {
        "content": "<p>It's weird that you have to add parentheses though.</p>",
        "id": 267661870,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641943629
    },
    {
        "content": "<p>I assume it's because a variable is also an expression, but if we interpret it as an expression then the translation changes (it involves an existential and an equality).</p>",
        "id": 267662785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641944198
    }
]