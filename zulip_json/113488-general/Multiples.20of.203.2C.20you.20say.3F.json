[
    {
        "content": "<p>Perhaps a bit off-topic, but how familiar and/or interested are typical undergraduate mathematicians with the following type of question?</p>\n<blockquote>\n<p>Let <code>S</code> be the smallest set satisfying the following conditions:<br>\n- <code>0 ∈ S</code><br>\n- For any <code>n ∈ S</code>, we have <code>n + 3 ∈ S</code></p>\n<p>Let <code>S'</code> be the smallest set satisfying the following conditions:<br>\n- <code>30 ∈ S'</code><br>\n- <code>21 ∈ S'</code><br>\n- For any <code>n, m ∈ S'</code>, we have <code>n + m ∈ S'</code><br>\n- For any <code>n, m ∈ S'</code> with <code>n ≥ m</code>, we have <code>n - m ∈ S'</code></p>\n<p>Prove that <code>S = S'</code>.</p>\n</blockquote>\n<p>Asking because I am considering translating such an exercise to Lean (for <a href=\"https://www.codewars.com/\" title=\"https://www.codewars.com/\">Codewars</a>) once my midterms are over and I get a bit more free time, but I would like to assess the value of such a translation beforehand.</p>\n<p>(The official invitation to join Codewars will hopefully be sent in a few weeks, after we have a few Lean challenges available on the site)</p>",
        "id": 192365170,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1585647166
    },
    {
        "content": "<p>That looks like a pretty cool problem. I think that this could be attacked in tactic mode using the kind of tactics which people will have learnt by playing the natural number game.</p>",
        "id": 192370635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585650513
    },
    {
        "content": "<p>Thanks for your input, I will definitely translate the problem into Lean when I have the time then <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 192371727,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1585651296
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_21</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"mi\">21</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_30</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"mi\">30</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_sub</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">S&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">S&#39;_0</span> <span class=\"o\">:</span> <span class=\"n\">S&#39;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">S&#39;_add3</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">S&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">S&#39;</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">S&#39;_eq_S</span> <span class=\"o\">:</span> <span class=\"n\">S&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192372354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585651781
    },
    {
        "content": "<p>that's the meta version if you wanna be pedantic</p>",
        "id": 192374351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585653090
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 192374460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653142
    },
    {
        "content": "<p>if you translate it more literally you might get <code>def S : set nat := \\bigint ...</code></p>",
        "id": 192374529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585653187
    },
    {
        "content": "<p>but your translation is the easiest to work with</p>",
        "id": 192374557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585653216
    },
    {
        "content": "<p>I prefer to think that \"let S be the smallest set such that ...\" is mathematician-speak for <code>inductive</code></p>",
        "id": 192374574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585653227
    },
    {
        "content": "<p>This is clearly cheating. But I guess this kind of cheating is allowed on codewars.</p>",
        "id": 192377651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585655298
    },
    {
        "content": "<p>The cheating is in the question isn't it? How do we know there is such a smallest set? Are we supposed to prove that an arbitrary intersection of sets satisfying the axioms used to define S also satisfies the axioms? There will be one tactic which does all of these I guess? <code>obviously</code>?</p>",
        "id": 192378178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585655666
    },
    {
        "content": "<p>Mario's formalisation is wrong. This question has nothing to do with nat subtraction.</p>",
        "id": 192380166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585656909
    },
    {
        "content": "<p>Surely you have to put all that n&gt;=m stuff in and work in integers :-)</p>",
        "id": 192380295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585656971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"c1\">-- because obviously S is a set of reals</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- I&#39;d happily make it an arbitrary ring</span>\n<span class=\"n\">def</span> <span class=\"n\">S_like</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S_like</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">S_like</span> <span class=\"o\">(</span><span class=\"err\">⋂</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- what tactic am I?</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">hT</span> <span class=\"o\">:=</span> <span class=\"n\">hT</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hT</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">hT</span> <span class=\"o\">:=</span> <span class=\"n\">hT</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"n\">ht</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hT</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">⋂₀</span><span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">S_like</span> <span class=\"n\">T</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 192380406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585657068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Multiples.20of.203.2C.20you.20say.3F/near/192378178\" title=\"#narrow/stream/113488-general/topic/Multiples.20of.203.2C.20you.20say.3F/near/192378178\">said</a>:</p>\n<blockquote>\n<p>The cheating is in the question isn't it? How do we know there is such a smallest set? Are we supposed to prove that an arbitrary intersection of sets satisfying the axioms used to define S also satisfies the axioms? There will be one tactic which does all of these I guess? <code>obviously</code>?</p>\n</blockquote>\n<p>The tactic that does all this is called the <code>inductive</code> command and associated equation compiler</p>",
        "id": 192381716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585657854
    },
    {
        "content": "<p>I'm confused - I <em>did</em> put <code>n &gt;= m</code> in</p>",
        "id": 192381803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585657914
    },
    {
        "content": "<p>yes you could do this in integers too, it's not very different</p>",
        "id": 192381882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585657942
    },
    {
        "content": "<p>pretty sure my version literally typechecks if you replace <code>nat</code> with <code>int</code></p>",
        "id": 192381904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585657960
    },
    {
        "content": "<p>I don't appreciate your insinuating that nat subtraction is wrong, particularly when there is an <code>n &gt;= m</code> assumption in the context. That is just as good as actual subtraction, it behaves nicely and should be a <code>nat</code></p>",
        "id": 192382023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585658036
    },
    {
        "content": "<p>You are implicitly assuming the theorem that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">S\\subseteq\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>.</p>",
        "id": 192395796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585664389
    },
    {
        "content": "<p>Yes I am, because this is type theory and I cannot do otherwise</p>",
        "id": 192400856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585666701
    },
    {
        "content": "<p>In order to typecheck the original statement I have to ask the mathematically meaningless question of what type <code>21</code> has. It looks like a <code>nat</code> to me, and nothing in the statement suggests otherwise, so <code>nat</code> it is. You could do it with <code>int</code> if you wanted, the statement is the same, or perhaps you could do it in an arbitrary ring if you like. Well, not quite, it has to be an ordered ring, but I think it is still true in that setting</p>",
        "id": 192401244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585666890
    },
    {
        "content": "<p>But I cannot just let it be unbounded as in set theory and prove that it is bounded</p>",
        "id": 192401359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585666930
    },
    {
        "content": "<p>so it would seem that a satisfactory formulation of the problem is impossible in lean by this standard</p>",
        "id": 192401410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585666958
    }
]