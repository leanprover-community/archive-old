[
    {
        "content": "<p>I got this error message after using the <code>refl</code> tactic,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">∥</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n\n\n<p>The context is too large to reproduce reasonably here and obviously I shouldn't be able to construct a simple example of this behavior here.  Any idea why this could happen?</p>",
        "id": 199543419,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127255
    },
    {
        "content": "<p>What type is <code>x</code>?</p>",
        "id": 199543451,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127281
    },
    {
        "content": "<p><code>x : \\alpha</code> <code>\\alpha : Type*</code>.</p>",
        "id": 199543515,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127300
    },
    {
        "content": "<p><code>\\alpha</code> is a module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> also.</p>",
        "id": 199543562,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127326
    },
    {
        "content": "<p>Can you copy paste the goal state?</p>",
        "id": 199543628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127371
    },
    {
        "content": "<p>Perhaps one of the two's is of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> and one is of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> or something like that, how would I check that?</p>",
        "id": 199543632,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127372
    },
    {
        "content": "<p><code>∥2 • x + -(y n + y m)∥ = ∥2 • x + -(y n + y m)∥</code></p>",
        "id": 199543644,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127382
    },
    {
        "content": "<p>No, I mean everything (also the assumptions)</p>",
        "id": 199543656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127393
    },
    {
        "content": "<p>Can you print what the goal is after <code>set_option pp.all true</code></p>",
        "id": 199543663,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127399
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">hilbert_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n<span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">x_def</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⊤</span><span class=\"o\">,</span>\n<span class=\"n\">S_def</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n<span class=\"n\">δ_def</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">a_def₁</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">a</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">S</span><span class=\"o\">)),</span>\n<span class=\"n\">a_def₂</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">a</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">y</span><span class=\"err\">∥</span><span class=\"o\">),</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"mi\">2</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">∥</span>\n</code></pre></div>",
        "id": 199543712,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127406
    },
    {
        "content": "<p><code>set_option pp.all true</code> will show you the gory details.</p>",
        "id": 199543717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127409
    },
    {
        "content": "<p>Use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">code</span>\n<span class=\"n\">more</span> <span class=\"n\">code</span>\n<span class=\"bp\">```</span>\n</code></pre></div>\n\n\n<p>for code blocks</p>",
        "id": 199543743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127426
    },
    {
        "content": "<p>Does <code>simp</code> help?</p>",
        "id": 199543795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127450
    },
    {
        "content": "<p>What's the definition of <code>hilbert_space</code>?</p>",
        "id": 199543813,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127460
    },
    {
        "content": "<p>It might change some invisible things</p>",
        "id": 199543814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_norm</span><span class=\"bp\">.</span><span class=\"n\">norm</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_has_norm</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">innerc_product_space_is_normed_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hilbert_space</span><span class=\"bp\">.</span><span class=\"n\">to_innerc_product_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_semigroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib_mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_mul_action</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">to_distrib_mul_action</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">α</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">nat_semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">))</span>\n             <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_has_neg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_semigroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_norm</span><span class=\"bp\">.</span><span class=\"n\">norm</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_has_norm</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">innerc_product_space_is_normed_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hilbert_space</span><span class=\"bp\">.</span><span class=\"n\">to_innerc_product_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_semigroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib_mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_mul_action</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">to_distrib_mul_action</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">α</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero_comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">field</span><span class=\"o\">)))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">α</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">normed_field</span><span class=\"o\">))</span>\n                         <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n                         <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">))</span>\n             <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_has_neg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_semigroup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)))))</span>\n</code></pre></div>",
        "id": 199543845,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127478
    },
    {
        "content": "<p>I think you might have two different <code>module ℂ α</code> instances.</p>",
        "id": 199543850,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127481
    },
    {
        "content": "<p>Also, it seems like you constructed <code>y</code> using choice, so I guess you need to use <code>some_spec</code> at some point</p>",
        "id": 199544022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127566
    },
    {
        "content": "<p><code>class hilbert_space (α : Type*) [add_comm_group α] [module ℂ α] extends innerc_product_space α, complete_space α.</code></p>",
        "id": 199544035,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">innerc_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">sesq_form</span> <span class=\"n\">ℂ</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ring_anti_equiv</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">involutive</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"n\">conj</span> <span class=\"n\">conj_involutive</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">herm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">nonneg</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">definite</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sesq</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199544069,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127596
    },
    {
        "content": "<p>Try <code>congr</code></p>",
        "id": 199544094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591127614
    },
    {
        "content": "<p>You have two different <code>mul_action</code>s in that printout</p>",
        "id": 199544125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127632
    },
    {
        "content": "<p>The <code>2</code> on the left is a <code>nat</code>, but the <code>2</code> on the right is <code>complex</code> I think.</p>",
        "id": 199544199,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127662
    },
    {
        "content": "<p>Yup</p>",
        "id": 199544203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127666
    },
    {
        "content": "<p>So I hope <code>simp</code> will help</p>",
        "id": 199544215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127675
    },
    {
        "content": "<p>Do we have those simp lemmas?</p>",
        "id": 199544277,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127699
    },
    {
        "content": "<p>I hope so</p>",
        "id": 199544298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127706
    },
    {
        "content": "<p>After <code>simp</code> with pp : <code>⊢ ∥2 • x + (-y m + -y n)∥ = ∥2 • x + (-y m + -y n)∥</code></p>",
        "id": 199544312,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300684\">@Keefer Rowan</span> So the problem is that the <code>\\bu</code> is used in two different ways</p>",
        "id": 199544336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127725
    },
    {
        "content": "<p>Do we have that <code>(2 : \\N) \\bu x = x + x</code>? And then <code>(2:\\C) \\bu x</code> is given by the module structure?</p>",
        "id": 199544424,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127773
    },
    {
        "content": "<p>What should <code>simp</code> normal form be for this. Move everything to <code>nat</code> I guess is the only choice.</p>",
        "id": 199544438,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127781
    },
    {
        "content": "<p>I bet <code>simp [bit0]</code> will work.</p>",
        "id": 199544454,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591127792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300684\">Keefer Rowan</span> <a href=\"#narrow/stream/113488-general/topic/refl.20fails.20to.20prove.20.60a.3Da.60/near/199544424\">said</a>:</p>\n<blockquote>\n<p>Do we have that <code>(2 : \\N) \\bu x = x + x</code>? And then <code>(2:\\C) \\bu x</code> is given by the module structure?</p>\n</blockquote>\n<p><code>rw [show 2 = 1 + 1, from rfl, add_smul]</code></p>",
        "id": 199544598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n</code></pre></div>\n\n\n<p>showed it. </p>\n<p>Thanks all!</p>\n<p>Any way to get the pp to show types of numerals?</p>",
        "id": 199544765,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1591127929
    },
    {
        "content": "<p>That's a nice idea. Probably if they aren't <code>nat</code>?</p>",
        "id": 199545267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591128160
    },
    {
        "content": "<p>Could something like <code>elide</code> be used for that? (Not <code>elide</code> itself, but similar concept maybe?)</p>",
        "id": 199545352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591128210
    }
]