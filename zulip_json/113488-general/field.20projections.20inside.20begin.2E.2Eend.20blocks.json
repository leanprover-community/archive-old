[
    {
        "content": "<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">xbar</span> <span class=\"o\">:=</span> <span class=\"n\">x.bar</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">xbaz</span> <span class=\"o\">:=</span> <span class=\"n\">x.baz</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Unfortunately, lean does not like it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"bp\">'</span><span class=\"n\">foo.baz'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">explicit</span> <span class=\"n\">argument</span> <span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's weird that <code>x.bar</code> works, but <code>x.baz</code> doesn't. How do I work around this?</p>",
        "id": 263943914,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638836627
    },
    {
        "content": "<p>If I change from <code>class</code> to <code>structure</code>, the error goes away.</p>",
        "id": 263944002,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638836690
    },
    {
        "content": "<p>It's because (strangely) it takes the <code>foo</code> implicitly as an instance argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo.baz</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">foo.baz : Π [self : foo], ℕ → ℕ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 263944098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638836770
    },
    {
        "content": "<p>It's annoying to try to use instances as values. In this case you should imitate <code>topological_space</code> and only define your thing to be a class after the fact, like here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/a8c086fe2de3c950a50932c953aa9a1d44543391/src/topology/basic.lean#L65\">https://github.com/leanprover-community/mathlib/blob/a8c086fe2de3c950a50932c953aa9a1d44543391/src/topology/basic.lean#L65</a><br>\nThis way the field projections will be generated with more useful types.</p>",
        "id": 263944136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638836812
    },
    {
        "content": "<p>Let me try.</p>",
        "id": 263944311,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638836962
    },
    {
        "content": "<p>Yep, seems to work. That's one interesting \"gotcha\". I'll have to keep it in mind.</p>",
        "id": 263944402,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638837016
    }
]