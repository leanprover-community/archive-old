[
    {
        "content": "<p>If someone could help me diagnose the following issue, of <code>simp</code> failing to work, I would be very happy. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- succeeds, using `ring_hom.map_zero`</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- I really want this to work!</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails, only uses `h`, leaves unsolved goal `⇑i 0 = 0`</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"c1\">-- works, so this is a syntax level problem</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"c1\">-- fails, couldn&#39;t find `⇑i 0` in the goal `⇑i 0 = 0`...</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"c1\">-- fails, error at https://gist.github.com/semorrison/61d25641003cdba43dda1f07246661bb</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds, but is unbearably sad</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192226398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585557810
    },
    {
        "content": "<p>So the issue is once again with having the wrong <del>type class instances</del> types.  This doesn't work either:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192227785,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585558702
    },
    {
        "content": "<p>This doesn't work either:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 192228507,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585559168
    },
    {
        "content": "<p>But this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 192229945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585560085
    },
    {
        "content": "<p>So the difference is between <code>(0 : R)</code> and <code>(0 : R.α)</code>, for the simp lemma to apply they should be reducibly definitionally equal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span> <span class=\"c1\">-- we just need to make this work</span>\n</pre></div>",
        "id": 192230065,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585560149
    },
    {
        "content": "<p>Not sure if this is the right solution, but this makes all the <code>simp</code>s work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n  <span class=\"n\">SemiRing</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span>\n  <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span>\n  <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span>\n  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">induced_category</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span>\n  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">bundled</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_sort</span>\n</pre></div>",
        "id": 192230263,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585560245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how do you do such efficient <code>simp</code> debugging? <code>simp</code> is one of those areas of Lean where for years I just figured it was magic and left it at that. But there have been some really interesting <code>simp</code> threads recently, and the linter and your paper with Floris and Rob have both given me a much better idea about what <code>simp</code> actually does (I had no idea what a confluent rewriting system was about a week ago). But these posts of yours above are still quite amazing. What tools are you using?</p>",
        "id": 192231266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585560814
    },
    {
        "content": "<p>The posts in this thread are roughly the steps I took:</p>\n<ol>\n<li>Original failing example was <code>example {R S : CommRing} (i : R ⟶ S) (r : R) (h : r = 0) : i r = 0 := by simp [h]</code></li>\n<li>If I manually replace <code>r</code> by <code>0</code> then it works.  What happens if I let simp replace it for me <code>... := begin simp only [h], simp end</code>.</li>\n<li>Oh wow, now the goal is <code>⊢ i 0 = 0</code> but simp can't solve it!?!  But simp could solve <code>i 0 = 0</code> previously.  Obviously there must be some difference between these two goals.</li>\n<li>Let's do <code>set_option pp.all true</code> and use good old <code>vimdiff</code>.  So the zeros are different???</li>\n<li>Hypothesis validated! simp can solve <code>i (0 : R.α) = 0</code> but not <code>i (0 : R) = 0</code>.</li>\n<li>Let's check if <code>(0 : R.α) = (0 : R)</code> are reducibly equivalent (i.e., what simp requires for matching).  <code>example : (0 : R.α) = (0 : R) := by reflexivity transparency.reducible</code></li>\n<li>Great, they're not!  Let's do <code>set_option trace.type_context.is_def_eq true</code> and <code>set_option trace.type_context.is_def_eq_detail true</code> and see what it doesn't unfold.  I searched for the last occurrence of \"failed\", and then marked the offending definitions as reducible.</li>\n</ol>",
        "id": 192232283,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585561352
    },
    {
        "content": "<p>Fantastic, thank you. I made it halfway through step 4. :-)</p>",
        "id": 192233621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585562033
    },
    {
        "content": "<p>I observed that the zeroes were different, but also that the <code>ring_hom</code> arguments of <code>coe_fn</code> were different, and despaired of knowing which one to pursue. I suspect that actually the difference there is actually the same difference as the one in the zeroes that you identified.</p>",
        "id": 192233742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585562096
    },
    {
        "content": "<p>I will investigate if that <code>[reducible]</code> attribute breaks things elsewhere.</p>",
        "id": 192233787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585562117
    },
    {
        "content": "<p><span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 192233800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585562123
    },
    {
        "content": "<p>This is great Gabriel -- many thanks for this extra info.</p>",
        "id": 192234607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585562551
    },
    {
        "content": "<p>Is it possible to argue that <code>simp</code> ought to behave as though instances are <code>reducible</code> by default? Instance search itself already does this as far as I can tell.</p>",
        "id": 192426566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585677599
    },
    {
        "content": "<p>I was quite confused by <a href=\"https://github.com/leanprover-community/mathlib/issues/2290\" title=\"https://github.com/leanprover-community/mathlib/issues/2290\">#2290</a> until I realized that the original issue was not with typeclass search but with <code>simp</code>.</p>",
        "id": 192426724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585677661
    },
    {
        "content": "<p>I think there's some special hack in <code>type_context</code> for this.  Let me look.</p>",
        "id": 192426803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585677707
    },
    {
        "content": "<p>If you could confirm my theory about instance search seeing instances as reducible (<a href=\"#narrow/stream/113488-general/topic/instance.20matching/near/176678244\" title=\"#narrow/stream/113488-general/topic/instance.20matching/near/176678244\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/instance.20matching/near/176678244</a>) that would also be great</p>",
        "id": 192426986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585677792
    },
    {
        "content": "<p>Or perhaps that is what you are referring to.</p>",
        "id": 192427005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585677805
    },
    {
        "content": "<p>Another example of <code>simp</code> not working: <a href=\"https://github.com/leanprover-community/mathlib/blob/algebra-bundled/src/ring_theory/algebra.lean#L134\" title=\"https://github.com/leanprover-community/mathlib/blob/algebra-bundled/src/ring_theory/algebra.lean#L134\">here</a> <code>rw</code> succeeds while <code>simp</code> fails (it's in the <code>algebra-bundled</code> branch).</p>",
        "id": 192427121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585677847
    },
    {
        "content": "<p>Yes, I've seen cases of this as well but this one is probably simpler. Maybe it's worth trying to track down these issues now that it could potentially result in fixing them.</p>",
        "id": 192427406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585677966
    },
    {
        "content": "<p>I think there are two things going on:</p>\n<ol>\n<li>type-class resolution indeed has a special feature, unification is done using \"instance\" transparency.  Instance transparency unfolds instances even if they're not reducible.</li>\n<li>During unification of implicit and instance-implicit arguments, transparency is temporarily upgraded to semireducible: <a href=\"https://github.com/leanprover-community/lean/blob/9c57e4cd150cf036e6a8a8303a94f854f738994e/src/library/type_context.cpp#L2544-L2557\" title=\"https://github.com/leanprover-community/lean/blob/9c57e4cd150cf036e6a8a8303a94f854f738994e/src/library/type_context.cpp#L2544-L2557\">https://github.com/leanprover-community/lean/blob/9c57e4cd150cf036e6a8a8303a94f854f738994e/src/library/type_context.cpp#L2544-L2557</a></li>\n</ol>",
        "id": 192428317,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585678382
    },
    {
        "content": "<p>I'm not sure what this means for our example here.  The <code>R</code> and <code>R.α</code> terms should only occur in implicit arguments, so they should actually unify even in simp.</p>",
        "id": 192428582,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585678490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/unbearable.20unhappiness.20of.20.60simp.60.20not.20working/near/192428582\" title=\"#narrow/stream/113488-general/topic/unbearable.20unhappiness.20of.20.60simp.60.20not.20working/near/192428582\">said</a>:</p>\n<blockquote>\n<p>The <code>R</code> and <code>R.α</code> terms should only occur in implicit arguments.</p>\n</blockquote>\n<p>No they don't.  Did you know that <code>has_zero.zero</code> has an explicit argument?</p>",
        "id": 192429031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585678699
    },
    {
        "content": "<p>I'm not sure if this means we should change <code>has_zero.zero</code> and <code>has_one.one</code>.</p>",
        "id": 192429236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585678794
    },
    {
        "content": "<p>is the idea then that the \"wrong\" (syntactically) form of the type gets chosen when we encounter the type for the first type as an implicit argument (where we could have chosen to reduce the type, but we had no reason to yet) and then later we see the type as an explicit argument to something else and there we're not allowed to match it semireducibly?</p>",
        "id": 192429328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585678817
    },
    {
        "content": "<p>This might explain also why <code>simp</code> so often fails to apply things like <code>category.comp_id</code></p>",
        "id": 192429365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585678840
    },
    {
        "content": "<p>because the object in question (which might be written in several definitionally equivalent ways, for example as an application of the identity functor) appears as an explicit argument of <code>category.id</code> but not as an explicit argument of anything else</p>",
        "id": 192429467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585678894
    },
    {
        "content": "<p>Of course this is especially insidious here where the notation <code>0</code> hides the explicit argument</p>",
        "id": 192429674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585678978
    },
    {
        "content": "<p>This is the issue in this thread.  When we first see <code>0</code>, Lean assigns it the \"wrong\" type and later the simp lemmas don't apply because <code>0</code> has the type as an explicit argument.</p>",
        "id": 192429680,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585678981
    },
    {
        "content": "<p>and in this case we got lucky because the type that appeared as an explicit argument was something that could be reduced after expanding the definition of an instance?</p>",
        "id": 192429854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585679058
    },
    {
        "content": "<p>whereas if the roles had been swapped, even marking the instance as <code>reducible</code> would not help, right?</p>",
        "id": 192429878,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585679074
    },
    {
        "content": "<p>The order of reduction shouldn't matter.  Lean reduces both sides of the unification problem.</p>",
        "id": 192430122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585679180
    },
    {
        "content": "<p>Oh, I see, okay.</p>",
        "id": 192430150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585679194
    },
    {
        "content": "<p>But anyways <code>simp</code>'s behavior vis-à-vis 2. above still seems \"inconsistent\". If it tried to solve the unification problems in a different order, it would succeed.</p>",
        "id": 192431059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585679608
    },
    {
        "content": "<p>This issue is a big pain in category theory and it's the reason why we have proofs like <code>simp, dsimp, simp</code> and arguably the reason why we have so many <code>rfl</code>-lemmas and maybe why <code>simps</code> even exists. It's nice to at least know why it happens now.</p>",
        "id": 192431369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585679742
    },
    {
        "content": "<p>It's particularly frustrating that <code>simp</code> won't notice that two types are definitionally equal in examples like this where if they weren't definitionally equal then the original expression wouldn't even type check!</p>",
        "id": 192432127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585680114
    },
    {
        "content": "<p>I'm not sure if we were talking about the same thing.  If you unify two function applications, then Lean first unifies the explicit arguments with reducible transparency, and then the implicit ones with semireducible transparency.  (It could of course still be that this makes the \"wrong\" assigment to a metavariable which appears explicitly in another subterm.)</p>",
        "id": 192432357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585680225
    },
    {
        "content": "<p>Right, I'm talking about the situation where a metavariable will also appear later in an explicit argument of a subterm.</p>",
        "id": 192432804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585680454
    },
    {
        "content": "<p>If we could somehow defer the semireducible-transparency unification in the outer term until after the inner term, then both unifications would succeed</p>",
        "id": 192433255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585680672
    },
    {
        "content": "<p>I think I just encountered another example of this. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `pderivative v p` is the partial derivative of `p` with respect to `v` -/</span>\n<span class=\"n\">def</span> <span class=\"n\">pderivative</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">single</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pderivative_monomial_single</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">pderivative</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pderivative</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">sum_single_index</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- don&#39;t worry about this for now; this is an actual missing simp lemma.</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> failed to apply `zero_mul`! -/</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">],</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192502875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585733623
    },
    {
        "content": "<p>When looking at this PR I noticed that some zeros were <code>finsupp</code> zeros and some were <code>mv_polynomial</code> zeros. This stopped <code>zero_add</code> from working at all at some point. Or are you convinced that this is unrelated? It might be (I need to work on my OWLS talk for the next few hours so don't want to investigate right now)</p>",
        "id": 192503101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585733761
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192269030\" title=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192269030\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192269030</a></p>",
        "id": 192503201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585733814
    },
    {
        "content": "<p>I suspect this is the same issue.</p>",
        "id": 192503403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585733951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think you've hit a completely different issue here.  This works and applies <code>zero_mul</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n</pre></div>",
        "id": 192504005,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734286
    },
    {
        "content": "<p>what does that even mean? :-)</p>",
        "id": 192504038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585734308
    },
    {
        "content": "<p>Try <code>set_option trace.simplify true</code> and behold the output:</p>",
        "id": 192504087,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734333
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[simplify] eq: ?m_2 ?m_3 0 = 0\n[simplify] eq: ?m_1 ?m_2 0\n...\n</pre></div>",
        "id": 192504108,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734348
    },
    {
        "content": "<p>I think simp is missing an <code>instantiate_mvars</code> here.</p>",
        "id": 192504121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734361
    },
    {
        "content": "<p>The <code>change _</code> tactic is the quickest hack I could think of to instantiate the metavariables in the goal.</p>",
        "id": 192504187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734380
    },
    {
        "content": "<p>oh!</p>",
        "id": 192504469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585734570
    },
    {
        "content": "<p>What do you mean when you say \"I think simp is missing an instantiate_mvars here\"?</p>",
        "id": 192504697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585734693
    },
    {
        "content": "<p>We've had this problem with other tactics as well, but I can't remember the issue number.  At some point <code>simp</code> does <code>tgt ← target</code> when it should actually do <code>tgt ← target &gt;&gt;= instantiate_mvars</code>.</p>",
        "id": 192505050,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/unbearable.20unhappiness.20of.20.60simp.60.20not.20working/near/192429236\" title=\"#narrow/stream/113488-general/topic/unbearable.20unhappiness.20of.20.60simp.60.20not.20working/near/192429236\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if this means we should change <code>has_zero.zero</code> and <code>has_one.one</code>.</p>\n</blockquote>\n<p>Did anyone (<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>) investigate this? I have just been trying a little, but without much success. To make the type argument in <code>has_zero</code> and <code>has_one</code> implicit I used:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">has_zero</span>     <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">has_one</span>      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">has_zero</span> <span class=\"n\">has_one</span>\n</pre></div>\n\n\n<p>but it quickly led to woe.  In various places in <code>library/init/algebra/ring.lean</code>, <code>rw mul_zero</code> fails to work at all. (You can still <code>erw mul_zero, refl</code>...)</p>",
        "id": 192505052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585734876
    },
    {
        "content": "<p>With your definition, the typeclass argument is explicit, which is also not good.</p>",
        "id": 192505168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734949
    },
    {
        "content": "<p>This is how you make parameters implicit:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192505255,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585734981
    },
    {
        "content": "<p>okay!</p>",
        "id": 192505718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585735221
    },
    {
        "content": "<p>I will try that at some point too. For now I'm recompiling with <code>t ← target &gt;&gt;= instantiate_mvars</code> in <code>simp_target</code>.</p>",
        "id": 192505756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585735246
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, was the problem here that <code>convert</code> ought to have called <code>instantiate_mvars</code>itself, before returning all the goals?</p>",
        "id": 192506345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585735583
    },
    {
        "content": "<p>Maybe it's not <code>simp</code>'s job to worry about this.</p>",
        "id": 192506364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585735602
    },
    {
        "content": "<p>This is the latest PR I could find related to this issue: <a href=\"https://github.com/leanprover-community/mathlib/issues/1520\" title=\"https://github.com/leanprover-community/mathlib/issues/1520\">#1520</a>  I think the general idea is that we want to fix both tactics.</p>",
        "id": 192506767,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585735856
    },
    {
        "content": "<p>Summary: for the issue with <code>mul_zero</code> in <code>mv_polynomial.lean</code>, changing <code>simp</code> to instantiate_mvars in <code>target</code> first worked great, but changing <code>convert</code> did not.</p>",
        "id": 192512603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585739771
    },
    {
        "content": "<p>Do you think it's reasonable to PR <code>t ← target &gt;&gt;= instantiate_mvars</code> to core?</p>",
        "id": 192517048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585742678
    },
    {
        "content": "<p>Yes, please PR it.</p>",
        "id": 192517417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585742894
    }
]