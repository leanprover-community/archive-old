[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">25</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_zero.mpr</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- internally an awkward `0`</span>\n  <span class=\"c1\">-- h : 25 * n - n = 0</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- `h` now has a better `0`</span>\n  <span class=\"c1\">-- h : 25 * n - n = 0</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : 24 * n = 0</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231077877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616182229
    },
    {
        "content": "<p>Something similar happened recently in one of my PR, here <a href=\"https://github.com/leanprover-community/mathlib/blob/1e2d820fb10b2a008e346e4f689f9be40c85cf32/src/geometry/euclidean/basic.lean#L200-L201\">https://github.com/leanprover-community/mathlib/blob/1e2d820fb10b2a008e346e4f689f9be40c85cf32/src/geometry/euclidean/basic.lean#L200-L201</a></p>",
        "id": 231079147,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616182810
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">ring</span>\n</code></pre></div>\n<p>works, but <code>ring</code> alone doesn't.</p>",
        "id": 231079194,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616182832
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3326\">#3326</a> has a few other examples</p>",
        "id": 231079245,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616182850
    },
    {
        "content": "<p>(and moreover I don't what happened, I modified <code>normed_group</code> and this stopped working)</p>",
        "id": 231079277,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616182867
    },
    {
        "content": "<p>Anyone have examples of this happening on terminal <code>ring</code> calls?</p>",
        "id": 231095009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616190898
    },
    {
        "content": "<p><code>ring at h</code> is actually a completely different tactic under the hood, it's more like <code>simp_to_SOP</code></p>",
        "id": 231095162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616190986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ring.20not.20idempotent/near/231095009\">said</a>:</p>\n<blockquote>\n<p>Anyone have examples of this happening on terminal <code>ring</code> calls?</p>\n</blockquote>\n<p><a href=\"https://github.com/alreadydone/formalising-mathematics/commit/6439475f106653b8eafbb1bf477e9c7d30e10e8b#diff-c9570b5dd291456377e1056063c7c8d2876960e4c2ae01f618661f4c2ea73da6R475\">https://github.com/alreadydone/formalising-mathematics/commit/6439475f106653b8eafbb1bf477e9c7d30e10e8b#diff-c9570b5dd291456377e1056063c7c8d2876960e4c2ae01f618661f4c2ea73da6R475</a><br>\nAll that the first <code>ring</code> does is a <code>dsimp</code>.<br>\n(edit: and Bryan's example in <a href=\"https://github.com/leanprover-community/mathlib/issues/3326\">#3326</a>)</p>",
        "id": 231122611,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1616216471
    },
    {
        "content": "<p>a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 231141472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616240748
    },
    {
        "content": "<p>Bryan's version is also not terminal, that's not a goal <code>ring</code> can solve</p>",
        "id": 231141532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616240809
    },
    {
        "content": "<p>Put another way, <code>ring</code> proves theorems in the language of commutative rings. When given non-theorems, it instead does some <em>debug-only</em> heuristic rewriting for the purpose of showing the user why the goal is failing that is not necessarily idempotent and should not be used in robust proofs</p>",
        "id": 231141671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616240960
    },
    {
        "content": "<p>I wonder if we should split it out into a separate tactic, perhaps <code>ring_nf</code> or <code>ring_normal_form</code>. Then <code>ring</code> could still call <code>ring_nf</code> when it fails, but it would _also_ print a <code>Try this: ring_nf</code> message, to make clear that <code>ring</code> itself is failing.</p>",
        "id": 231178246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616282640
    },
    {
        "content": "<p>I think that's a good idea. It's pretty easy to get confused about the two functions</p>",
        "id": 231179876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616284677
    },
    {
        "content": "<p>Here</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6888/commits/4afb7e9984d8ab3c1adfa4356ed84df2fd6a2f78\">https://github.com/leanprover-community/mathlib/pull/6888/commits/4afb7e9984d8ab3c1adfa4356ed84df2fd6a2f78</a></p>\n<p><code>ring_nf</code> is not idempotent. Is using it twice OK or should I prove it by hand (it just a bunch of <code>rw</code>)?</p>",
        "id": 231930744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616748136
    },
    {
        "content": "<p>Potentially related: <a href=\"https://github.com/leanprover-community/mathlib/issues/3326\">https://github.com/leanprover-community/mathlib/issues/3326</a></p>",
        "id": 231931382,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616748539
    },
    {
        "content": "<p>As my comment above indicates, I don't think you should be using <code>ring_nf</code> at all, certainly not if you are just trying to close a goal. That's what <code>ring</code> is for</p>",
        "id": 231968144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616766928
    },
    {
        "content": "<p>In the commit that adds <code>ring_nf</code>, I didn't make any attempt to eliminate the existing uses in order to keep the refactor manageable, but arguably every new use of <code>ring_nf</code> should be examined to see whether it isn't supposed to be a proof by <code>congr, ring</code> or something</p>",
        "id": 231968383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616767025
    }
]