[
    {
        "content": "<p><code>obtain</code> is basically a destructuring <code>have</code>, that is, a combination of <code>have</code> and <code>rcases</code>, right?<br>\nWould it be sensible to have a matching destructuring <code>suffices</code>?</p>",
        "id": 194034769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586959327
    },
    {
        "content": "<p>It's the same thing but with the goals in another order, right? It would have n+1 goals with n \"conclusions\" following the case split and then 1 proof of the target type</p>",
        "id": 194034968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959422
    },
    {
        "content": "<p>Do we have a <code>rotate 1</code> tactic? Because it should have the same effect</p>",
        "id": 194035115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959470
    },
    {
        "content": "<p>that is, move the first goal to the end and move everything else up by one</p>",
        "id": 194035153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959488
    },
    {
        "content": "<p>I actually would like to rename <code>obtain</code> to <code>let</code></p>",
        "id": 194035248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959535
    },
    {
        "content": "<p>or possibly <code>have</code>; <code>have</code> is more correct but <code>let</code> lines up with term mode better</p>",
        "id": 194035370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959572
    },
    {
        "content": "<p>If we did rename <code>obtain</code> to <code>have</code>, then destructuring <code>suffices</code> could be called just <code>suffices</code></p>",
        "id": 194035569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959674
    },
    {
        "content": "<p><code>obtain</code> is called obtain instead of have because <code>have</code> was locked in core. <code>obtain</code> is what <code>have</code> should be, in the very same way that <code>rintro</code> is what <code>intro</code> should be, and <code>rcases</code> is what <code>cases</code> should be.</p>",
        "id": 194035675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959698
    },
    {
        "content": "<p>Unlike <code>rcases</code>, <code>obtain</code> backwards compatibly extends <code>have</code> syntax</p>",
        "id": 194035758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959733
    },
    {
        "content": "<p><code>rintro</code> is also backward compatible</p>",
        "id": 194035819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959756
    },
    {
        "content": "<p>I also with <code>rcases</code> and <code>rintros</code> could clear all autogenerated names after doing their <code>rfl</code> magic. When I replace one name of <code>rcases</code> with <code>_</code> it is either because a later <code>rfl</code> will discard it or because I don't plan to use it.</p>",
        "id": 194035900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959795
    },
    {
        "content": "<p>Lean doesn't care about backward compatibility, right?</p>",
        "id": 194035987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194035370\" title=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194035370\">said</a>:</p>\n<blockquote>\n<p>or possibly <code>have</code>; <code>have</code> is more correct but <code>let</code> lines up with term mode better</p>\n</blockquote>\n<p>Yeah, this is annoying</p>",
        "id": 194036041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586959840
    },
    {
        "content": "<p>I think it's term mode's fault though</p>",
        "id": 194036080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586959857
    },
    {
        "content": "<p>and so <code>have</code> is better</p>",
        "id": 194036100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586959863
    },
    {
        "content": "<p>I often use <code>rcases</code> with a lot of underscores, but only half the time they are unnamed because of later <code>rfl</code>, the other half of the time they are just not going to be referred to, even if they appear in the goals or something</p>",
        "id": 194036325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586959957
    },
    {
        "content": "<p>and given stuff like <code>assumption</code> or <code>simp *</code> I think it would be a breaking change to delete auto named variables</p>",
        "id": 194036433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960004
    },
    {
        "content": "<p>or <code>tidy</code></p>",
        "id": 194036727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960100
    },
    {
        "content": "<p>though <code>tidy</code> could adapt I suppose</p>",
        "id": 194036762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194035987\" title=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194035987\">said</a>:</p>\n<blockquote>\n<p>Lean doesn't care about backward compatibility, right?</p>\n</blockquote>\n<p>Leo will do what he does, but I care about backward compatibility, at least to the extent that I feel the pain of updating a large codebase like mathlib following a big change. That is to say, changes are not verboten but they must be weighed against the cost of updating many proof scripts</p>",
        "id": 194036800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960129
    },
    {
        "content": "<p>If you want to shoulder that responsibility, well okay then</p>",
        "id": 194036967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960185
    },
    {
        "content": "<p><code>git grep '\\bcases.*with' | wc -l</code> is obviously a bit crude, but it's around 1000 lines which is indeed quite a lot</p>",
        "id": 194037041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960220
    },
    {
        "content": "<p>and some uses without <code>with</code> would be affected as well</p>",
        "id": 194037061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960227
    },
    {
        "content": "<p>I think this is bad style to have useful autogenerated names, but ok.</p>",
        "id": 194037185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586960278
    },
    {
        "content": "<p>Of course such a change would be much easier for the Lean 4 refactoring tools.</p>",
        "id": 194037312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586960312
    },
    {
        "content": "<p>I think that in isabelle style you don't name anything and just use assumption or lookup by type</p>",
        "id": 194037318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960315
    },
    {
        "content": "<p>More precisely what is bad style is to refer to an autogenerated name by name</p>",
        "id": 194037454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960383
    },
    {
        "content": "<p>Why is <code>rcases</code> incompatible with <code>cases</code>? Can't the parser check whether we have <code>\\&lt;</code> or not?</p>",
        "id": 194037605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586960434
    },
    {
        "content": "<p>I recall some discussion about that</p>",
        "id": 194037660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960455
    },
    {
        "content": "<p>If the stuff following <code>with</code> starts with <code>\\&lt;</code> then use <code>rcases</code>, otherwise use ancient <code>cases</code></p>",
        "id": 194037671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586960460
    },
    {
        "content": "<p>The only questionable spot is <code>rcases _ with a</code></p>",
        "id": 194037711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960476
    },
    {
        "content": "<p>because that fits in both grammars</p>",
        "id": 194037731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960488
    },
    {
        "content": "<p>(oh, maybe that's what Patrick meant by \"useful\")</p>",
        "id": 194037839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960525
    },
    {
        "content": "<p>Currently, I think both <code>rcases</code> and <code>cases</code> treat that as one case split, but compatibility with <code>have</code> and friends would require that to behave the same as <code>have a := _</code></p>",
        "id": 194037892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960552
    },
    {
        "content": "<p>I wouldn't care if <code>cases _ with a</code> is broken. I would never write that.</p>",
        "id": 194038170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586960663
    },
    {
        "content": "<p>this is especially problematic for destructuring something like <code>inhabited A</code> using <code>cases</code> because <code>cases h with a</code> is the only reasonable way to write it</p>",
        "id": 194038191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960674
    },
    {
        "content": "<p>Why not <code>cases h with \\&lt;a\\&gt;</code>?</p>",
        "id": 194038284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586960708
    },
    {
        "content": "<p><code>cases</code> definitely treats it as one case split, <code>rcases</code> is rarely used with this syntax (I found a couple uses by Sebastien)</p>",
        "id": 194038333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960732
    },
    {
        "content": "<p>Anyway, we can make a choice in that corner case, and fix the breakage. It will be a lot less then the 1000 results from Reid's grep.</p>",
        "id": 194038351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586960740
    },
    {
        "content": "<p>There's ~125 uses of <code>cases _ with a</code> for single-letter variables <code>a</code></p>",
        "id": 194038471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960776
    },
    {
        "content": "<p>What if we remove <code>rcases</code> and just use <code>obtain</code>/<code>have</code>?</p>",
        "id": 194038704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960862
    },
    {
        "content": "<p>there's also <code>rcases with a | b</code> to consider so determining which case you're in is not quite as simple as described above</p>",
        "id": 194038801,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586960884
    },
    {
        "content": "<p>Hmmm, good point</p>",
        "id": 194038841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586960900
    },
    {
        "content": "<p><code>cases</code> still needs to exist for the non-<code>with</code> version, and it can also be used as the lower level single split version</p>",
        "id": 194038919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586960933
    },
    {
        "content": "<p>I wonder if there are cases where the <code>rcases</code> order is more readable. I know I have written some mile long <code>rcases</code> patterns</p>",
        "id": 194039144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961017
    },
    {
        "content": "<p>I like this but actually removing <code>rcases</code> would have the largest maintenance burden so far. I suppose we could just deprecate it (in which case what has changed really?)</p>",
        "id": 194039204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961050
    },
    {
        "content": "<p>It has a weird name so deprecating it shouldn't be a problem</p>",
        "id": 194039292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961093
    },
    {
        "content": "<p>I imagine when Lean 4 comes around and all of mathlib is rewritten, it being deprecated means you'll get the transition for free</p>",
        "id": 194039301,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586961101
    },
    {
        "content": "<p>Is it possible to do something like <code>open tactic.interactive.core</code> to cause <code>foo</code> in interactive mode to be understood as <code>tactic.interactive.core.foo</code>?</p>",
        "id": 194039381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961123
    },
    {
        "content": "<p>no, the only thing that affects this lookup is <code>begin [foo] end</code></p>",
        "id": 194039440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961156
    },
    {
        "content": "<p>hmm. Presumably we'd need <code>have</code> for a while before <code>rcases</code> is available (for example, in the core library)</p>",
        "id": 194039523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961210
    },
    {
        "content": "<p>I was hoping we could play with the namespaces in the core library</p>",
        "id": 194039552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961228
    },
    {
        "content": "<p>I was planning to move <code>rcases</code> into the core library for this</p>",
        "id": 194039565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961234
    },
    {
        "content": "<p>rather than renaming all <code>have</code> to <code>have_</code> or whatever</p>",
        "id": 194039575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961239
    },
    {
        "content": "<p>ahh, hmm</p>",
        "id": 194039607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961242
    },
    {
        "content": "<p>because it involves replacing <code>have</code></p>",
        "id": 194039645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961251
    },
    {
        "content": "<p>I wonder if kenny will start a \"have is slow\" thread after this change though</p>",
        "id": 194039766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961312
    },
    {
        "content": "<p>I was also worried about that. Those are very core tactics, and maybe slowing them down is a bad idea.</p>",
        "id": 194039894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586961363
    },
    {
        "content": "<p>we definitely need to make sure that <code>have x := foo</code> and such are fast-pathed</p>",
        "id": 194039902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961363
    },
    {
        "content": "<p>so is the summary:</p>\n<ul>\n<li>Leave <code>cases</code> alone</li>\n<li>Move <code>rcases</code> into core</li>\n<li>Deprecate <code>rcases</code> but incorporate its functionality into <code>have</code> (effectively replacing <code>obtain</code>) and <code>suffices</code></li>\n</ul>",
        "id": 194039932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586961377
    },
    {
        "content": "<p>Currently, <code>obtain h,</code> fails</p>",
        "id": 194040258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586961515
    },
    {
        "content": "<p>Are these remarks by Keeley relevant: <a href=\"https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486\" title=\"https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486\">https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486</a> ?</p>",
        "id": 194044111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586962938
    },
    {
        "content": "<p>It sounds like we can transparently repurpose all <code>begin ... end</code> block to be <code>begin [foo] ... end</code></p>",
        "id": 194044262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586963011
    },
    {
        "content": "<p>Well, it's no longer relevant if the plan is to move <code>have</code> into core</p>",
        "id": 194044472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194044111\" title=\"#narrow/stream/113488-general/topic/destructuring.20.60suffices.60/near/194044111\">said</a>:</p>\n<blockquote>\n<p>Are these remarks by Keeley relevant: <a href=\"https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486\" title=\"https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486\">https://github.com/leanprover-community/mathlib/pull/2300#discussion_r408577486</a> ?</p>\n</blockquote>\n<p>Oh, <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> is back! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194044775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586963209
    },
    {
        "content": "<p>But yes, to be clear, you could already do the <code>[foo]</code> thing by <code>local instance</code>-ing a particular <code>interactive.executor</code></p>",
        "id": 194045189,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1586963386
    },
    {
        "content": "<p>(Maybe with a command or something to add sugar to make it look nicer)</p>",
        "id": 194045426,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1586963471
    },
    {
        "content": "<p>(And as a result the namespace under which the interactive tactics are resolved is changed---I think, at any rate it should do this)</p>",
        "id": 194045505,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1586963495
    }
]