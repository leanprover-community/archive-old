[
    {
        "content": "<p>I've been around for long enough to have seen the situation where you have no goals but <code>end</code> doesn't work because</p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, result contains meta-variables\nstate:\nno goals\n</pre></div>\n\n\n<p>You can try and get out of this hole with the <code>recover</code> tactic.</p>\n<p>I've been playing with the category theory library this evening, and something pretty cool happened, and I have no idea why. We're in one of these situations where the goal should be relatively straightforward when you work out what it says. My strategy in such situations is to do a mass of unfolding, and when <code>dsimp</code> suddenly tidies a bunch of stuff up, save my position with <code>show [blah]</code> and then press on. So I managed to fill in a sorry this evening, and my first complete proof looked like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">right_unitor_hom</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">œÅ_</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">‚äó</span> <span class=\"mi\">ùüô</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">rid</span> <span class=\"n\">R</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">rid</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">comm</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">flip</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n<span class=\"c1\">--  unfold tensor_product.lift,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_linear</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lid</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_linear</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">lsmul</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- tensor_product.lift.tmul used here</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- tensor_product.lift.tmul&#39;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This proof is actually just two lines long -- each <code>squeeze_simp</code> just does one rewrite (<code>tmul</code> and <code>tmul'</code> are definitionally equal, one has <code>to_fun</code> in and the other has a coercion), and all the definitional unfolding is just to get things into a shape where the rewrite can happen. This proof compiles no problem. So then I refactored the proof so it was just <code>show X, rw tensor_product.lift.tmul', show Y,  rw tensor_product.lift.tmul'</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">right_unitor_hom</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">œÅ_</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">‚äó</span> <span class=\"mi\">ùüô</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">((</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n          <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">m_1</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n           <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n           <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n         <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals!</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and I got the <code>result contains metavariables</code> error. I was really surprised when I tried <code>recover</code> though -- four goals, some of which weren't definitional. I killed them all and <em>still</em> I got the error! A second <code>recover</code> and they were finally gone. My proof ended up looking like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">right_unitor_hom</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">œÅ_</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">‚äó</span> <span class=\"mi\">ùüô</span><span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">((</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n          <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">m_1</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n           <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n           <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n         <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals!</span>\n  <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"c1\">-- four goals!</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">tmul_add</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals!</span>\n  <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"c1\">-- two goals!</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">smul_tmul</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">m_1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">add_tmul</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>My question: How come I managed to avoid these six secret metavariables in my first proof? Where did they come from?</p>\n<p>One cannot immediately reproduce this at home, but because of the new tooling it is <em>much</em> easier than before. The following commands (run in a directory where there's not a subdirectory called <code>mathlib</code>):</p>\n<div class=\"codehilite\"><pre><span></span>leanproject get mathlib\ncd mathlib/\ngit checkout enriched\nleanproject get-cache\n</pre></div>\n\n\n<p>will give you Scott's branch, fully compiled. The <code>right_unitor_hom</code> lemma is on <a href=\"https://github.com/leanprover-community/mathlib/blob/59e93168fdde51321c40828755ed297706ff2520/src/algebra/category/Module/monoidal.lean#L149\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/59e93168fdde51321c40828755ed297706ff2520/src/algebra/category/Module/monoidal.lean#L149\">line 149 of <code>src/algebra/category/Module/monoidal.lean</code></a> </p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 191039911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584564411
    },
    {
        "content": "<p>Some of the random goals are I think the <code>add  := _</code> and <code>smul := _</code>. I tried replacing the first <code>show</code> with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">‚Ü•</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n      <span class=\"o\">((</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n          <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n           <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n           <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n         <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">‚äó‚Çú</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>and I get </p>\n<div class=\"codehilite\"><pre><span></span>LEAN ASSERTION VIOLATION\nFile: /home/travis/build/leanprover-community/lean/src/frontends/lean/elaborator.cpp\nLine: 3174\nTask: /home/buzzard/Encfs/Computer_languages/Lean/lean-projects/mathlib/src/algebra/category/Module/monoidal.lean: Module.monoidal_category.right_unitor_hom\nm_ctx.match(e, *val2)\n</pre></div>\n\n\n<p>Something is a bit weird here.</p>",
        "id": 191043431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584566273
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/leanprover-community/lean/issues/123\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/123\">https://github.com/leanprover-community/lean/issues/123</a> again.</p>",
        "id": 191043549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584566324
    },
    {
        "content": "<p>no, you can do set-theoretic trickery. Wait, we're on the wrong thread.</p>",
        "id": 191043932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584566527
    }
]