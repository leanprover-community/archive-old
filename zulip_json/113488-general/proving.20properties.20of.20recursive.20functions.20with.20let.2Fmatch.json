[
    {
        "content": "<blockquote>\n<p>After some experimenting I realise that using either let or match in a recursive definition like this is a lousy idea.</p>\n</blockquote>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for your ideas. But the main point here is precise that your second -- and the standard definition -- for splitAt traverses the list twice. The implementation of splitAt with only one traverse of the list was proposed as an exercise in <a href=\"https://www.amazon.com/Thinking-Functionally-Haskell-Richard-Bird/dp/1107452643\">https://www.amazon.com/Thinking-Functionally-Haskell-Richard-Bird/dp/1107452643</a>. During the Haskell course, I am trying to use Lean to formalize some informal (equational) proofs from the book. But clearly, not all of them are obvious to formalize...</p>",
        "id": 229477026,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1615296960
    },
    {
        "content": "<p>I conjecture that most of them will not be too bad if you know some of the tricks. Would you like to post some <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> examples of things which you think might not be obvious to formalise?</p>",
        "id": 229484770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615300007
    },
    {
        "content": "<p>Sure, I will share more examples. The problem is that once functions are optimized in a way or another, proofs became more difficult, as the example above. But for some properties such as <code>map f . map g = map (f . g)</code> we done, see <a href=\"https://github.com/emap-aa/demo-lean/blob/main/src/fp.lean#L60-L69\">https://github.com/emap-aa/demo-lean/blob/main/src/fp.lean#L60-L69</a></p>",
        "id": 229531086,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1615315689
    },
    {
        "content": "<p>One more case <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , the <code>reverse (reverse xs)</code> was fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rev_rev_id</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"bp\">∘</span> <span class=\"n\">reverse</span><span class=\"o\">)</span> <span class=\"n\">xs</span>  <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">,</span><span class=\"n\">append</span><span class=\"o\">],</span>\n\n <span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">reverse</span><span class=\"o\">,</span>\n <span class=\"n\">unfold</span> <span class=\"n\">comp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">rev_aux</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But why I can't use the point-free Haskell style in the declaration?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rev_rev_id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"bp\">∘</span> <span class=\"n\">reverse</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231472040,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1616507025
    },
    {
        "content": "<p>Because lean doesn't know what type of list you're stating it aabout</p>",
        "id": 231472315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616507124
    },
    {
        "content": "<p><code>(reverse ∘ reverse) = (id : list a → list a)</code> should work</p>",
        "id": 231472378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616507149
    },
    {
        "content": "<p>Hum, but Lean understood <code>#check reverse ∘ reverse = id</code>.</p>",
        "id": 231472416,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1616507162
    },
    {
        "content": "<p>yes, but it put wildcards in. Those aren't allowed in lemma statements.</p>",
        "id": 231472484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616507184
    },
    {
        "content": "<p>Thank you</p>",
        "id": 231472834,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1616507308
    },
    {
        "content": "<p>Turns out the proof is more complex anyway.</p>",
        "id": 231472855,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1616507322
    },
    {
        "content": "<p>The proof should only have two more steps of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">funext</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>and then your proof above.</p>",
        "id": 231481494,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616510581
    }
]