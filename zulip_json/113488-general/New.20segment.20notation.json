[
    {
        "content": "<p>I'm redefining everything in <code>analysis.convex.basic</code> to take in <code>k</code>, the underlying <code>ordered_semiring</code>, as an argument (it's currently always <code>ℝ</code>). So the notation <code>[x, y]</code> for <code>segment x y</code> needs changing to mention <code>k</code>.</p>\n<p>What do you think of <code>[x -[k] y]</code>? This has also the advantage to make sure Lean isn't confused with <code>list</code> notation.</p>",
        "id": 252166035,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630930131
    },
    {
        "content": "<p>I think I could learn to like it (-;</p>",
        "id": 252168479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630931443
    },
    {
        "content": "<p>Would you even go to the extent of liking <code>]x -[k] y[</code> for <code>open_segment k x y</code>? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 252168571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630931493
    },
    {
        "content": "<p>I personally have never liked the inverted brackets notation. And I'm sure that syntax highlighters will also start crying (-;</p>",
        "id": 252169417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630931895
    },
    {
        "content": "<p>Speaking only for myself, <code>]x -[k] y[</code> is a stretch too far.</p>",
        "id": 252169418,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630931895
    },
    {
        "content": "<p>How about <code>[x, y][k]</code>?</p>",
        "id": 252171146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630932781
    },
    {
        "content": "<p>Or even <code>[x,y:k]</code> (if that's possible) or <code>[x,y;k]</code> etc?</p>",
        "id": 252171232,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630932827
    },
    {
        "content": "<p>Also you can likely keep the notation as <code>[x, y]</code> for places where k can be inferred</p>",
        "id": 252171245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630932834
    },
    {
        "content": "<p>Maybe <code>k ⬝ [x, y]</code> to resemble the singleton span notation?</p>",
        "id": 252171553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630932970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/113488-general/topic/New.20segment.20notation/near/252171232\">said</a>:</p>\n<blockquote>\n<p>Or even <code>[x,y:k]</code> (if that's possible) or <code>[x,y;k]</code> etc?</p>\n</blockquote>\n<p>That's probably very bad considering type annotations.</p>",
        "id": 252171818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630933099
    },
    {
        "content": "<p>Even with the semicolon?</p>",
        "id": 252171837,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630933112
    },
    {
        "content": "<p>No, with the semicolon it should be fine.</p>",
        "id": 252171862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630933130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/New.20segment.20notation/near/252171553\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>k ⬝ [x, y]</code> to resemble the singleton span notation?</p>\n</blockquote>\n<p>This could be the best option but it slightly bothers me that this notation sort-of suggests <code>[x, y]</code> has a meaning on its own.</p>",
        "id": 252171893,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630933153
    },
    {
        "content": "<p>My notation tries to look like the betweenness operator <code>[a - b - c]</code></p>",
        "id": 252171899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630933159
    },
    {
        "content": "<p>I think I like <code>[x,y;k]</code>. It's concise, which is good.</p>",
        "id": 252172092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630933228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/New.20segment.20notation/near/252171899\">said</a>:</p>\n<blockquote>\n<p>My notation tries to look like the betweenness operator <code>[a - b - c]</code></p>\n</blockquote>\n<p>and also like the <code>linear_map</code> and <code>continuous_linear_map</code> notation <code>E →ₗ[k] F</code> and <code>E →L[k] F</code></p>",
        "id": 252172400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630933370
    },
    {
        "content": "<p>Yaël, are you resurrecting <a href=\"https://github.com/leanprover-community/mathlib/issues/4787\">#4787</a>? In any case I wouldn't recognize any of the proposed notations,  and I really hope the plain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x, y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span> notation will be kept for the real case.</p>",
        "id": 252213573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1630955753
    },
    {
        "content": "<p>Yes, but that's not what this PR is doing. <a href=\"https://github.com/leanprover-community/mathlib/issues/4787\">#4787</a> generalizes to arbitrary affine spaces. I'm first generalizing to arbitrary <strong>vector spaces</strong>, then I will have a follow-up PR to generalize to affine spaces.</p>",
        "id": 252214097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630956146
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x, y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span> notation is local anyway. So you can define it when needed for the real case, sure.</p>",
        "id": 252214155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630956199
    }
]