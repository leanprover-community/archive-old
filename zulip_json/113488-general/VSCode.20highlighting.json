[
    {
        "content": "<p>How hard would it be to have a VSCode extension setting defining a list of extra words that should be highlighted (say in tactic mode if this makes sense)?</p>",
        "id": 223161389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611001843
    },
    {
        "content": "<p>VS Code expects grammars to be provided as a file, so I don't see an easy way to modify the grammar dynamically: <a href=\"https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide#contributing-a-basic-grammar\">https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide#contributing-a-basic-grammar</a></p>\n<p>See also <a href=\"https://github.com/microsoft/vscode/issues/53885\">https://github.com/microsoft/vscode/issues/53885</a></p>\n<p>VS Code does support <a href=\"https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide\">semantic highlighting</a> but this looks to me like a big project.</p>\n<p>I'm sure Gabriel wouldn't mind a PR which just added some extra keywords to this file: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json\">https://github.com/leanprover/vscode-lean/blob/master/syntaxes/lean.json</a></p>\n<p>The grammar doesn't currently have any way of detecting what's in tactic mode or not at the moment though.</p>",
        "id": 223162355,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611002761
    },
    {
        "content": "<p>Too bad. Thanks for answering. I'm pretty sure Gabriel wouldn't like my list.</p>",
        "id": 223162620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611002951
    },
    {
        "content": "<p>Let me clarify the criteria for inclusion in the vscode syntax highlighting: I will add it if and only if it is used in mathlib.</p>",
        "id": 223199428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611045932
    },
    {
        "content": "<p>Let me clarify that my list is absolutely not for general consumption <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 223199522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611045977
    },
    {
        "content": "<p>It's part of my controlled natural language experiment.</p>",
        "id": 223199535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611045992
    },
    {
        "content": "<p>So it's also French as well?  Yes, the chances are not good.</p>",
        "id": 223199563,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611046019
    },
    {
        "content": "<p>It might be possible to use the same trick that we use for Lean 4 here.  Have two syntax highlighting files, and the extension sets a property on the file that changes the highlighting.  This could even be in two different extension.  But this takes work and time.</p>",
        "id": 223199797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611046168
    },
    {
        "content": "<p>Yes, it is. If you feel brave, open the next block</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">applique</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">appliqu</span><span class=\"bp\">é`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`à`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">on</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">obtient</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">que</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">tel</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">convient</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">les</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">deux</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">une</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">contradiction</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">conclut</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">par</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">calcule</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">dans</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">combine</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">remplace</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">contrapose</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">discute</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">selon</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">il</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">suffit</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">de</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`</span><span class=\"n\">montrer</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n</code></pre></div>\n</div></div>",
        "id": 223199805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611046179
    },
    {
        "content": "<p>I need to prepare Lean+mathlib+VScode+extension bundles for my course anyway. I may simply hack the grammar there.</p>",
        "id": 223199902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611046249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, if these are keywords for your natural language tactics, would you consider <code>begin[natural] end</code>? If so, I think the lean grammar could do something like \"if you see this funny tactic block, delegate to another syntax highlighter\"</p>",
        "id": 223199970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611046317
    },
    {
        "content": "<p>Which at least would mean there are only a few lines of weirdness in lean-vscode instead of an unexpected pile of French words!</p>",
        "id": 223200094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611046405
    },
    {
        "content": "<p>Je suis curieux de voir ce que ça va donner. Tu pourras poster un exemple de tes fichiers quand tu seras content de ce à quoi ça ressemble ?</p>\n<p>(Sorry for the French, but it feels in line with the discussion :-)</p>",
        "id": 223200375,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611046626
    },
    {
        "content": "<p>Again, I never suggested to add any word to the official VScode extension. I was asking about a new variable in settings that any user (or Lean project) could set.</p>",
        "id": 223200381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611046630
    },
    {
        "content": "<p>It looks like you might be looking for an \"injection grammar\"</p>",
        "id": 223200707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611046843
    },
    {
        "content": "<p><a href=\"https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide#injection-grammars\">https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide#injection-grammars</a></p>",
        "id": 223200743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611046859
    },
    {
        "content": "<p>Which at least would mean you don't have to fork lean-vscode, you can just distribute a custom extension alongside it</p>",
        "id": 223200881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611046940
    },
    {
        "content": "<p>Thanks for the pointer Eric!</p>",
        "id": 223201275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611047229
    },
    {
        "content": "<p>Small sample for <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">m154</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">tactiques</span>\n\n<span class=\"c1\">-- Définition de « limite de f en x₀ = y₀ »</span>\n<span class=\"c1\">-- Lean n'a pas besoin de parenthèse dans f(x)</span>\n<span class=\"kd\">def</span> <span class=\"n\">continue_en</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"c1\">-- Une suite u est une fonction de ℕ dans ℝ</span>\n<span class=\"c1\">-- Définition de « u tend vers l »</span>\n<span class=\"kd\">def</span> <span class=\"n\">limite_suite</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"c1\">-- Si f est continue en x₀ et la suite u tend vers x₀ alors la suite f ∘ u,</span>\n<span class=\"c1\">-- qui envoie n sur f (u n), tend vers f x₀</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">limite_suite</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continue_en</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">limite_suite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">Montrons</span> <span class=\"n\">que</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"n\">Soit</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">Par</span> <span class=\"n\">hf</span> <span class=\"n\">appliqu</span><span class=\"bp\">é</span> <span class=\"bp\">à</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">obtient</span> <span class=\"n\">δ</span> <span class=\"n\">tel</span> <span class=\"n\">que</span>\n    <span class=\"o\">(</span><span class=\"n\">δ_pos</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n  <span class=\"n\">Par</span> <span class=\"n\">hu</span> <span class=\"n\">appliqu</span><span class=\"bp\">é</span> <span class=\"bp\">à</span> <span class=\"o\">[</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">δ_pos</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">obtient</span> <span class=\"n\">N</span> <span class=\"n\">tel</span> <span class=\"n\">que</span>\n    <span class=\"o\">(</span><span class=\"n\">Hu</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">),</span>\n  <span class=\"n\">Montrons</span> <span class=\"n\">que</span> <span class=\"n\">N</span> <span class=\"n\">convient</span><span class=\"o\">,</span>\n  <span class=\"n\">Soit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">Par</span> <span class=\"n\">Hf</span> <span class=\"n\">il</span> <span class=\"n\">suffit</span> <span class=\"n\">de</span> <span class=\"n\">montrer</span> <span class=\"n\">que</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n  <span class=\"n\">On</span> <span class=\"n\">conclut</span> <span class=\"n\">par</span> <span class=\"n\">Hu</span> <span class=\"n\">appliqu</span><span class=\"bp\">é</span> <span class=\"bp\">à</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n_ge</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">croissante</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">croissante</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">croissante</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">croissante</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">Soit</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">Supposons</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">Montrons</span> <span class=\"n\">que</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n  <span class=\"n\">Par</span> <span class=\"n\">hf</span> <span class=\"n\">appliqu</span><span class=\"bp\">é</span> <span class=\"bp\">à</span> <span class=\"o\">[</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">obtient</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n  <span class=\"n\">On</span> <span class=\"n\">conclut</span> <span class=\"n\">par</span> <span class=\"n\">hg</span> <span class=\"n\">appliqu</span><span class=\"bp\">é</span> <span class=\"bp\">à</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223201319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611047268
    },
    {
        "content": "<p>Let me emphasize again that the main goal is not to make Lean easier to write (students actually manage to write Lean code), but to make it easier to go from Lean to paper.</p>",
        "id": 223201485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611047394
    },
    {
        "content": "<p>I would love to have an english version of this!</p>",
        "id": 223201533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611047405
    },
    {
        "content": "<p>To be honest, I'm surprised by how well it works. I'm almost thinking we should maybe think a bit about seriously using something like this even in mathlib.</p>",
        "id": 223201630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611047474
    },
    {
        "content": "<p>we only need to also have versions with lowercases letter, and replace <code>.</code> by something else, so that we can end sentences with  <code>.</code> instead of <code>,</code>.</p>",
        "id": 223201950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611047669
    },
    {
        "content": "<p>and <code>and</code> should be a noop.</p>",
        "id": 223201979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611047690
    },
    {
        "content": "<p>It definitely helps here that French is disjoint from Lean keywords.</p>",
        "id": 223202032,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611047726
    },
    {
        "content": "<p>Do <code>begin[foo] end</code> blocks get custom parsers (eg, can choose something other than commas), or just a custom monad type?</p>",
        "id": 223202235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611047860
    },
    {
        "content": "<p>This is awesome! Those proofs are really cool!</p>",
        "id": 223202747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611048200
    },
    {
        "content": "<p>Note that those tactics are not only aliases for the standard tactics with crazy parsers, they also work more to prove stuff we would never write on paper. For instance <code>On conclut par H</code> looks like an alias to <code>exact</code> but it also tries <code>apply H</code> and <code>linarith only [H]</code>.</p>",
        "id": 223203545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611048747
    },
    {
        "content": "<p>They also do some cleanup compared to their vanilla versions, for instance beta-reductions.</p>",
        "id": 223203608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611048789
    },
    {
        "content": "<p>And they work to hide intuistionistic madness.</p>",
        "id": 223203713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611048853
    },
    {
        "content": "<p>Blurring the distinction between <code>or.elim</code> and excluded middle, or between <code>cases</code> and <code>choose</code>.</p>",
        "id": 223203769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611048897
    },
    {
        "content": "<p>Also, <code>Montrons que</code> is not only <code>change</code>. If the goal is a disjunction, it will try <code>left, change ...,</code> and <code>right, change ...</code>.</p>",
        "id": 223205124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611049764
    },
    {
        "content": "<p>Patrick this is really fabulous. I would imagine that people like Hales and Koepke would be very interested in what you are doing. Thanks for sharing!</p>",
        "id": 223210294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611053098
    },
    {
        "content": "<p>I agree that this is very cool <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> !</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting/near/223161389\">said</a>:</p>\n<blockquote>\n<p>How hard would it be to have a VSCode extension setting defining a list of extra words that should be highlighted (say in tactic mode if this makes sense)?</p>\n</blockquote>\n<p>I think if you just wanted a set of words to have different styling throughout the document, you could do this with <a href=\"https://code.visualstudio.com/api/references/vscode-api#TextEditorDecorationType\">decorations in VSCode</a>. This is how the <a href=\"https://github.com/rsbondi/highlight-words\">highlight-words</a> extension works for example. The disadvantage of not using the grammar is that it'd be harder to, say, not do the highlighting within comments.</p>",
        "id": 223235918,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1611067634
    },
    {
        "content": "<p>Very meta. <a href=\"/user_uploads/3121/bxRsezbwZ5sQxxnbQf7_71f9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bxRsezbwZ5sQxxnbQf7_71f9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bxRsezbwZ5sQxxnbQf7_71f9/image.png\"></a></div>",
        "id": 251739999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630598771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting/near/223201533\">said</a>:</p>\n<blockquote>\n<p>I would love to have an english version of this!</p>\n</blockquote>\n<p>I looked hard for typical food staples of english cuisine, but unfortunately none of them have made it into Zulip yet.</p>",
        "id": 251884437,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1630677556
    }
]