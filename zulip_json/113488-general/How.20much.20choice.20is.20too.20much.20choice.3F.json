[
    {
        "content": "<p>In a few reviews, I've suggested changing code <em>within theorems</em> along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">h.some</span> <span class=\"n\">h.some_spec</span><span class=\"o\">,</span> <span class=\"c1\">-- edit, thanks Johan: no need to use long `classical` names</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with my argument being \"there's no need to use choice here\". Of course, the counterargument is \"but it saves me a line if I do it with <code>.some</code> and <code>.some_spec</code>\". Where does mathlib draw the line for using choice vs not?</p>",
        "id": 233855755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617987044
    },
    {
        "content": "<p>I've seen a clear argument that there are many cases that it's \"mathematically\" convenient, but is \"syntactically\" convenient a good enough reason too?</p>",
        "id": 233855864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617987109
    },
    {
        "content": "<p>Presumably <code>have := foo h.1 h.2</code> doesn't work?</p>",
        "id": 233856020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617987171
    },
    {
        "content": "<p>Right, projections only work on structures, because to work on props they'd have to be non-computable</p>",
        "id": 233856134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617987227
    },
    {
        "content": "<p>This is the same question I ask when I get takeaways :b<br>\nI feel like it's nice to not use choice, it's nice to not have to mark things <code>noncomputable</code> that are in principle computable</p>",
        "id": 233856329,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617987300
    },
    {
        "content": "<p>But if you're proving a theorem I suspect you won't have to mark it noncomputable.</p>",
        "id": 233856409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617987341
    },
    {
        "content": "<p>For example the structure I'm currently working on has a computable solution (the problem is in general in NEXP tho, so not realistic...) but I have to mark a fair few defs <code>noncomputable</code> cos of it</p>",
        "id": 233856410,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617987342
    },
    {
        "content": "<p>Right, I'm specifically talking about theorems here</p>",
        "id": 233856456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617987364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/How.20much.20choice.20is.20too.20much.20choice.3F/near/233856020\">said</a>:</p>\n<blockquote>\n<p>Presumably <code>have := foo h.1 h.2</code> doesn't work?</p>\n</blockquote>\n<p><del>If we wanted to encourage this type of use, we could add:</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">classical.some</span> <span class=\"bp\">←</span> <span class=\"n\">Exists.witness</span>\n<span class=\"n\">alias</span> <span class=\"n\">classical.some_spec</span> <span class=\"bp\">←</span> <span class=\"n\">Exists.spec</span>\n</code></pre></div>\n<p><del>and then use <code>foo h.witness h.spec</code></del> (edit: we already have these)</p>",
        "id": 233856560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617987405
    },
    {
        "content": "<p>I personally think there's a lot going for that proposal.</p>",
        "id": 233857664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617987858
    },
    {
        "content": "<p>Doing so feels tantamount to saying \"<code>Exists.rec</code> is constructivist nonsense\". But maybe that is the stance of many mathlib users.</p>",
        "id": 233858795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617988331
    },
    {
        "content": "<p>Maybe there's a tactic that could be written for this case which gives us the best of both worlds: something short which doesn't introduce choice if it doesn't have to?</p>",
        "id": 233859135,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617988483
    },
    {
        "content": "<p>Don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a> already?</p>",
        "id": 233859410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617988588
    },
    {
        "content": "<p>I guess that was one of those things which is hard to find because the docs for core lean don't reference things in mathlib, thanks <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>!</p>",
        "id": 233860279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617988957
    },
    {
        "content": "<p>I think that we should have parts of the library that clearly declare \"we avoid <code>classical.choice</code> here\", and for the rest of the library <code>h.some</code> is OK.</p>",
        "id": 233863794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617990530
    },
    {
        "content": "<p>I think using <code>cases</code>/<code>obtain</code> here is stylistically better, and gives you the ability to name the parts of the expression. It's \"fine\" to use <code>h.some</code> but I would prefer to avoid it in these trivial cases. Ideally, eventually, the \"second wave\" of AC-free formalization will wash over this statement and eliminate the unnecessary use of AC, but that's only worthwhile if all dependencies of the theorem are already AC-free, which is not the case for the vast majority of mathlib theorems, so this isn't actually a matter of avoiding choice for the most part.</p>",
        "id": 233921609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618025350
    },
    {
        "content": "<p>Plus, I can't think of many examples where you can't refactor the <code>obtain</code> version to actually be shorter. For the given example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">true</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233921745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618025515
    },
    {
        "content": "<p>If <code>h.some</code> and <code>h.some_spec</code> isn't duplicating a big expression in place of <code>h</code>, then that means it's a local hypothesis, so you can probably do some variation at the point where <code>h</code> is introduced to pattern match on it instead</p>",
        "id": 233921851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618025592
    }
]