[
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/unused.20arguments/near/171995564\" title=\"#narrow/stream/113488-general/topic/unused.20arguments/near/171995564\">Mario said</a> (regarding whether variables should be implicit or explicit in an iff statement)</p>\n<blockquote>\n<p>The rule is that if it's an iff then it should be implicit if it appears on both sides of the iff. That is, iffs are treated as a pair of implications, and are implicit if they would be implicit in both one-directional versions</p>\n</blockquote>\n<p>But what about the following session? I only use mathlib to get a topological group; I don't know how far into the hierarchy one needs to go in order to see this phenomenon:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">uniform_group</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--rw silly, -- fails</span>\n  <span class=\"c1\">--rw @silly, -- fails</span>\n  <span class=\"c1\">-- rw @silly _, -- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> All fail with this error:</span>\n<span class=\"cm\">  invalid rewrite tactic, failed to synthesize type class instance</span>\n<span class=\"cm\">  -/</span>\n<span class=\"c1\">--  rw @silly _ _ _, -- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  invalid rewrite tactic, failed to synthesize type class instance</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">4 goals</span>\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ nonempty G</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ Type</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ group ?m_1</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ topological_space ?m_1</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">silly</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- works but now we have four goals e.g. ⊢ group G</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- explicit G version</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">silly2</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">silly2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  4 goals</span>\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ nonempty G</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ group G</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ topological_space G</span>\n\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : group G,</span>\n<span class=\"cm\">_inst_2 : topological_space G,</span>\n<span class=\"cm\">_inst_3 : topological_group G</span>\n<span class=\"cm\">⊢ topological_group G</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">silly2</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"c1\">-- works -- only one goal.</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is this evidence that G should be explicit in <code>silly</code>?</p>",
        "id": 176608876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569448551
    },
    {
        "content": "<p>I think it's evidence that something is wrong with <code>rw</code>: it should just work in all cases. Why doesn't it automatically deal with those side goals? I've seen behavior like this before, and I would love to know what's going on.</p>",
        "id": 176609242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569448833
    },
    {
        "content": "<p>Could it have something to do with the fact that <code>nonempty</code> is itself a class?</p>",
        "id": 176609265,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569448861
    },
    {
        "content": "<p>mathlib-free version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  rw silly, -- fails</span>\n<span class=\"c1\">--  rw @silly G, -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">silly</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly2</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- rw silly2, -- fails</span>\n<span class=\"c1\">--  rw @silly2 G, -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"n\">silly2</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"c1\">-- works -- perhaps different elaboration strat to the previous line?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176609311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569448895
    },
    {
        "content": "<p>The issue isn't that <code>nonempty</code> is a class. Maybe it's a bug in <code>rw</code>? I've also seen it before, but catching out a student; it's now catching me out though. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"c1\">-- rofl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  rw silly, -- fails</span>\n<span class=\"c1\">--  rw @silly G, -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">silly</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly2</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- rw silly2, -- fails</span>\n<span class=\"c1\">--  rw @silly2 G, -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"n\">silly2</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"c1\">-- works -- perhaps different elaboration strat to the previous line?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176609554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449103
    },
    {
        "content": "<p>Maybe related: in the first example, <code>apply silly.mp</code> succeeds but creates side goals for <code>foo G</code> and <code>bar G</code>, while <code>refine silly.mp _</code> works correctly</p>",
        "id": 176609704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569449260
    },
    {
        "content": "<p>I am rather surprised that <code>rw @silly2 G</code> fails at the end but <code>rw silly2 G</code> works. I know that the <code>@</code> can cause some stuff to be elaborated differently but that fact is not in the context of a rewrite. It would be great if this were a bug in <code>rw</code>, because I like Mario's rule; perhaps there needs to be an exception for when iterated typeclasses are involved though?</p>",
        "id": 176609797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449359
    },
    {
        "content": "<p>If <code>silly</code> only depends on <code>foo G</code> and not <code>bar G</code> then <code>rw silly</code> works in the first example but <code>apply silly.mp</code> still creates a side goal <code>foo G</code></p>",
        "id": 176609822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569449386
    },
    {
        "content": "<p>Also if <code>bar G</code> doesn't depend on <code>foo G</code> then <code>rw silly</code> succeeds. That seems to suggest that <code>rw</code> might be trying to solve the goals in the wrong order?</p>",
        "id": 176609910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569449438
    },
    {
        "content": "<p>Yes, if <code>bar</code> doesn't depend on <code>foo</code> then everything seems to work exactly as one might expect it to.</p>",
        "id": 176609962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449502
    },
    {
        "content": "<p>Side issue: debugging is hard because in contrast to the usual situation where you can see exactly which instance Lean failed to infer, here we just get this generic message <code>failed to synthesize type class instance</code>. Is there any way of looking at the trace of a rewrite like there is for <code>simp</code>?</p>",
        "id": 176610107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449635
    },
    {
        "content": "<p>I would have just written <code>apply silly.1</code> in most of these cases</p>",
        "id": 176610173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569449677
    },
    {
        "content": "<p>I also feel that the problem is that <code>rw</code> does type-class inference in the wrong order. If you provide underscores, then type-class inference will fire for those arguments <em>before</em> rewrite does anything.</p>",
        "id": 176610177,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569449684
    },
    {
        "content": "<p>Mario I'm sure you would have noticed that you don't even have to apply silly</p>",
        "id": 176610221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569449720
    },
    {
        "content": "<p>that's fair</p>",
        "id": 176610235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569449739
    },
    {
        "content": "<blockquote>\n<p>I would have just written <code>apply silly.1</code> in most of these cases</p>\n</blockquote>\n<p>Yes, that's what we did to work around it, but I figured it was worth getting to the bottom of.</p>",
        "id": 176610238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449743
    },
    {
        "content": "<p>the rule that I gave is optimized for using <code>.1</code> and <code>.2</code> to apply bidirectional theorems</p>",
        "id": 176610317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569449797
    },
    {
        "content": "<p>Does it work if you use <code>=</code> instead of <code>&lt;-&gt;</code>?</p>",
        "id": 176610344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569449825
    },
    {
        "content": "<p>One could imagine a big chain of rewrites though, where you don't want to stop and apply something.</p>",
        "id": 176610362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569449844
    },
    {
        "content": "<blockquote>\n<p>Does it work if you use <code>=</code> instead of <code>&lt;-&gt;</code>?</p>\n</blockquote>\n<p>Nope:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">silly</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid rewrite tactic, failed to synthesize type class instance</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">G : Type,</span>\n<span class=\"cm\">_inst_1 : foo G,</span>\n<span class=\"cm\">_inst_2 : bar G</span>\n<span class=\"cm\">⊢ P G</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176610652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450104
    },
    {
        "content": "<p>don't forget to use <code>refine silly.1 _</code> to avoid the apply bug :)</p>",
        "id": 176610671,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450121
    },
    {
        "content": "<p>I think I can explain all behavior except <code>rw @silly _ _</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">constant</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- rw @silly, -- fails: rw infers arguments in wrong order?</span>\n  <span class=\"c1\">-- rw @silly G, -- fails: rw infers arguments in wrong order?</span>\n  <span class=\"c1\">-- rw @silly G _, -- succeeds: `foo` is inferred before rw is called</span>\n  <span class=\"c1\">-- rw @silly G _ _, -- succeeds: `foo` and `bar` are inferred before rw is called</span>\n  <span class=\"c1\">-- rw @silly _, -- fails: rw infers arguments in wrong order?</span>\n  <span class=\"c1\">-- rw @silly _ _, -- fails?</span>\n  <span class=\"c1\">-- rw @silly _ _ _, -- works, but generates too many new goals: couldn&#39;t infer type-class arguments before rw</span>\n  <span class=\"c1\">-- rw silly, -- presumably same as `rw @silly` because names are treated differently than expressions</span>\n  <span class=\"c1\">-- rw id silly, -- same as `rw @silly _ _ _`</span>\n  <span class=\"c1\">-- refine silly.mpr _, -- preferred solution</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176610734,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450149
    },
    {
        "content": "<p>Oh <code>rw @silly _ _</code> probably fails for the same reason: it tries to synthesize <code>bar G</code> when <code>foo G</code> has not been synthesized yet.</p>",
        "id": 176610830,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450246
    },
    {
        "content": "<p><code>rw @silly _ _</code> is failing to synthesize <code>bar G</code> because when it tries it's <code>bar ?m_1</code> right?</p>",
        "id": 176610833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450251
    },
    {
        "content": "<p>what is the error <code>rw infers arguments in wrong order</code>?</p>",
        "id": 176610836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450258
    },
    {
        "content": "<p>that is my human-written reason that rw fails.</p>",
        "id": 176610849,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid rewrite tactic, failed to synthesize type class instance\nstate:\nG : Type,\n_inst_1 : foo G,\n_inst_2 : bar G\n⊢ P G\n</pre></div>",
        "id": 176610859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450294
    },
    {
        "content": "<p>I know, but what exactly is happening by your estimation</p>",
        "id": 176610862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450296
    },
    {
        "content": "<p>I think that type class inference fails on <code>foo ?m_1</code> before it has decided that <code>?m_1=G</code></p>",
        "id": 176610890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450325
    },
    {
        "content": "<p>but this is just a guess and I don't know how to find out if I'm right.</p>",
        "id": 176610909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450345
    },
    {
        "content": "<p>my estimation is that <code>rw</code> tries to infer <code>@bar G ?m</code> and fails before inferring <code>?m : foo G</code>.</p>",
        "id": 176610911,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450346
    },
    {
        "content": "<p>it shouldn't do that</p>",
        "id": 176610969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450380
    },
    {
        "content": "<p>Aah floris' suggestion is more refined than mine.</p>",
        "id": 176610971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450382
    },
    {
        "content": "<p>I think Kevin's guess is wrong because it doesn't happen if <code>bar</code> is not involved</p>",
        "id": 176610985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569450400
    },
    {
        "content": "<blockquote>\n<p>it shouldn't do that</p>\n</blockquote>\n<p>Agreed, but <em>does</em> it do that?</p>",
        "id": 176611000,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569450420
    },
    {
        "content": "<p>what's the error message?</p>",
        "id": 176611024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450450
    },
    {
        "content": "<blockquote>\n<p>I think Kevin's guess is wrong because it doesn't happen if <code>bar</code> is not involved</p>\n</blockquote>\n<p>My guess can't be right because if it were right then we would have noticed this much much earlier</p>",
        "id": 176611028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450464
    },
    {
        "content": "<blockquote>\n<p>what's the error message?</p>\n</blockquote>\n<p>Still the one I quoted.</p>",
        "id": 176611067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450482
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>it shouldn't do that</p>\n</blockquote>\n<p>Agreed, but <em>does</em> it do that?</p>\n</blockquote>\n<p>This you can test with <code>set_option trace.class_instances true</code>, the first output is</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : @bar G ?m__fresh.293.7708 := _inst_2\nfailed is_def_eq\n</pre></div>",
        "id": 176611085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569450485
    },
    {
        "content": "<p>It's the \"rubbish\" version of the failed to synthesize type class instance error, when it doesn't tell you the type of the instance it failed to syntheize</p>",
        "id": 176611104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450515
    },
    {
        "content": "<p>In fact, that's the only relevant output because <code>rw</code> just gives up when that fails</p>",
        "id": 176611115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569450539
    },
    {
        "content": "<p>ah, <code>synth_instances()</code> works in reverse order</p>",
        "id": 176611126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450548
    },
    {
        "content": "<p>Also if <code>bar</code> doesn't depend on <code>foo</code>, then you can see in the trace it solves <code>bar</code> first and then <code>foo</code></p>",
        "id": 176611167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569450597
    },
    {
        "content": "<p>that's what gets called in <code>rewrite_core()</code> after the pattern matches (so G is unified) with the list of instance metavariables that were inserted in order to fill the pis in the equation</p>",
        "id": 176611227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450625
    },
    {
        "content": "<p>You should never be solving the instances in reverse order -- things wouldn't even typecheck if I fed them to Lean in reverse order when I was defining the function.</p>",
        "id": 176611240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/apply_tactic.cpp#L96-L97\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/apply_tactic.cpp#L96-L97\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/apply_tactic.cpp#L96-L97</a></p>",
        "id": 176611295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450717
    },
    {
        "content": "<p>I don't know if it's an optimization or what</p>",
        "id": 176611340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450732
    },
    {
        "content": "<p>It certainly looks like a conscious decision though doesn't it ;-)</p>",
        "id": 176611353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450750
    },
    {
        "content": "<p>if only Leo were active right now...</p>",
        "id": 176611425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569450839
    },
    {
        "content": "<p>don't even think about it.</p>",
        "id": 176611473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450857
    },
    {
        "content": "<p>I'm going to go to bed before I snap and just ask him :-/</p>",
        "id": 176611489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569450894
    },
    {
        "content": "<p>Looks like that code was added in this commit: <a href=\"https://github.com/leanprover-community/lean/commit/f7fe2a775c1492184278931dc223648b95d9ce64#diff-cd4a348ea2537f9e3471d8c015145d5eR80-R91\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/commit/f7fe2a775c1492184278931dc223648b95d9ce64#diff-cd4a348ea2537f9e3471d8c015145d5eR80-R91\">https://github.com/leanprover-community/lean/commit/f7fe2a775c1492184278931dc223648b95d9ce64#diff-cd4a348ea2537f9e3471d8c015145d5eR80-R91</a></p>\n<p>I couldn't find any issue that corresponded to the commit message though.</p>",
        "id": 176611573,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569450964
    },
    {
        "content": "<p>It was effectively moved from elsewhere in that commit though, so you'd have look farther back</p>",
        "id": 176611594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451006
    },
    {
        "content": "<p>I'll just change it to forwards and find out what breaks</p>",
        "id": 176611637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451067
    },
    {
        "content": "<p>It's been there since the beginning: <a href=\"https://github.com/leanprover-community/lean/commit/61a845c0050c7617ce9df7e2071883d1c24f3a27\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/commit/61a845c0050c7617ce9df7e2071883d1c24f3a27\">https://github.com/leanprover-community/lean/commit/61a845c0050c7617ce9df7e2071883d1c24f3a27</a></p>",
        "id": 176611830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569451245
    },
    {
        "content": "<p>Well, the core library built successfully at least</p>",
        "id": 176612052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451461
    },
    {
        "content": "<p>do Kevin's tests work?</p>",
        "id": 176612295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569451731
    },
    {
        "content": "<p>Yes</p>",
        "id": 176612380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451807
    },
    {
        "content": "<p>PR?</p>",
        "id": 176612392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569451817
    },
    {
        "content": "<p>though <code>apply</code> still generates side conditions</p>",
        "id": 176612395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451818
    },
    {
        "content": "<p>I think that's something else</p>",
        "id": 176612405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569451832
    },
    {
        "content": "<p>Can you build mathlib? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 176612414,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569451852
    },
    {
        "content": "<blockquote>\n<p>Can you build mathlib? <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n</blockquote>\n<p>in progress</p>",
        "id": 176612438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451867
    },
    {
        "content": "<p>I was hoping the <code>apply</code> thing was related just because the code was in <code>tactic_apply.cpp</code>, but it wasn't really consistent with the fact that it also occurred with only one class involved</p>",
        "id": 176612525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569451940
    },
    {
        "content": "<p>Could you give a simple example of the apply behavior?</p>",
        "id": 176612546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569451974
    },
    {
        "content": "<p>is \"replace <code>rw silly</code> with <code>apply silly.1</code> in Kevin's examples\" good enough?</p>",
        "id": 176612599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452030
    },
    {
        "content": "<p>and you get subgoals |- foo G, |- bar G?</p>",
        "id": 176612671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569452074
    },
    {
        "content": "<p>Yep, with the main goal <code>nonempty G</code> first</p>",
        "id": 176612712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452114
    },
    {
        "content": "<p>Actually, hang on</p>",
        "id": 176612825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452197
    },
    {
        "content": "<p>Ah, never mind. I thought I saw something else going on, but it was due to other stuff in the same file (the second example).<br>\nThe order of the new goals is also the same (<code>nonempty G</code> then <code>foo G</code> then <code>bar G</code>) with both standard Lean and my modified version.</p>",
        "id": 176612951,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452335
    },
    {
        "content": "<p>I get no typeclass instance trace corresponding to a proof of <code>foo G</code> or <code>foo ?m_1</code></p>",
        "id": 176613292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569452587
    },
    {
        "content": "<blockquote>\n<p>PR?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/pull/67\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/67\">https://github.com/leanprover-community/lean/pull/67</a></p>",
        "id": 176613477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452758
    },
    {
        "content": "<p>but of course it's potentially breaking compatibility</p>",
        "id": 176613527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569452781
    },
    {
        "content": "<p>if mathlib builds, I think this should be safe</p>",
        "id": 176613569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569452864
    },
    {
        "content": "<p>it's apparently rarely exercised but I don't see how this will cause any new errors</p>",
        "id": 176613619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569452899
    },
    {
        "content": "<p>It looks like the problem isn't with apply:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- apply silly, --works</span>\n  <span class=\"c1\">-- apply @silly, --works</span>\n  <span class=\"c1\">-- apply (@silly _), --works</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">silly</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"c1\">--leaves |- foo G</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176613863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453149
    },
    {
        "content": "<p>Mathlib did build</p>",
        "id": 176613896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569453215
    },
    {
        "content": "<p>I think the issue is that <code>i_to_expr_for_apply</code> gets called with the pexpr <code>(@silly _ _)</code>  first, and no expected type, which generates the subgoal for <code>|- ?m : Type</code> and for <code>|- foo ?m</code>, then <code>apply_core</code> is called with the resulting expr, which unifies <code>?m := G</code> and leaves the <code>|- foo G</code> goal</p>",
        "id": 176614009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453323
    },
    {
        "content": "<p><code>apply</code> itself knows how to handle this when it does its own metavariable instantiations: it delays them until after unification</p>",
        "id": 176614093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453390
    },
    {
        "content": "<p>but these metavariables are created before <code>apply_core</code> is called so it doesn't know about them</p>",
        "id": 176614102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453413
    },
    {
        "content": "<p>So you changed two things: <code>silly</code> has only <code>foo</code> and not <code>bar</code>, and it's no longer a biconditional.</p>",
        "id": 176614266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569453588
    },
    {
        "content": "<p>the biconditional was confusing matters, and the foo/bar thing was exercising the wrong bug</p>",
        "id": 176614336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453618
    },
    {
        "content": "<p>you get the same result with <code>silly.2</code> with the earlier version if you fix the <code>synth_instances</code> bug</p>",
        "id": 176614358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453663
    },
    {
        "content": "<p>The same result as <code>apply (@silly _ _)</code> you mean?</p>",
        "id": 176614383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569453706
    },
    {
        "content": "<p>yes</p>",
        "id": 176614387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453711
    },
    {
        "content": "<p>OK, right</p>",
        "id": 176614391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569453716
    },
    {
        "content": "<p>because <code>synth.2</code> is elaborated first to <code>(synth ?m ?m').2</code> with the <code>?m'</code> subgoal added, then <code>apply</code> is called</p>",
        "id": 176614434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453733
    },
    {
        "content": "<p>I don't see an obvious way to fix this besides passing the new goals to <code>apply_core</code> so it can include them in the accounting, or maybe trying to infer them again after calling <code>apply_core</code></p>",
        "id": 176614544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453836
    },
    {
        "content": "<p>it's not easy to find out if they are pending instance resolution though</p>",
        "id": 176614628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453884
    },
    {
        "content": "<p>because that depends on the binder on the application that generated them</p>",
        "id": 176614641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453904
    },
    {
        "content": "<p>you can approximate it by looking at the type and seeing if it's a class, but this will have the wrong behavior for <code>{_ : nonempty A}</code> binders</p>",
        "id": 176614722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569453968
    },
    {
        "content": "<p>I think I see, <code>apply</code> is going to do the work of guessing how many <code>_</code>s to insert (hopefully correctly), so before that we don't know how to infer metavariables in the given expression from the target type</p>",
        "id": 176615248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569454493
    },
    {
        "content": "<p>Mario, I'll make you explain all this to me next time we meet. I am guessing is that this might explain the trouble I had when I tried unbundling things in the algebraic hierarchy. IIRC, I wanted to do things like <code>foo {α : Type} [has_mul α] [commutative (@mul α)]</code> and was having similar problems.</p>",
        "id": 176621086,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1569461681
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 176624909,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1569467006
    }
]