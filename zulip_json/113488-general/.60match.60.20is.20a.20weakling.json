[
    {
        "content": "<p>...oops... MWE was too minimal... one moment please</p>",
        "id": 167826068,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560237969
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;a zero&quot;</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;a successor&quot;</span>\n</pre></div>\n\n\n<p>darn where did the question go? ;-)</p>",
        "id": 167826210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560238155
    },
    {
        "content": "<p>Sorry, the real example is more interesting, I promise! (thanks though :) ) One moment please...</p>",
        "id": 167826219,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560238179
    },
    {
        "content": "<p>How come the <code>match</code> compiler is such a weakling? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>It seems that in a situation of cross-dependence like this the match compiler freaks out. Am I doing something wrong? Is there any way to get that first case to compile properly?</p>",
        "id": 167826778,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560238714
    },
    {
        "content": "<p>(Sorry it's a bit complicated, but as my last attempt should attest, I broke it making it simpler!)</p>",
        "id": 167827163,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560239147
    },
    {
        "content": "<p>What happens if you fill in the sorrys? Presumably nothing changes?</p>",
        "id": 167827256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560239229
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p><em>shrug</em></p>",
        "id": 167827928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560239985
    },
    {
        "content": "<p>I have never understood <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#inaccessible-terms\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#inaccessible-terms\">inaccessible terms</a> properly, and I thought it might be that, but then I ran into the cheap fix.</p>",
        "id": 167828006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560240055
    },
    {
        "content": "<p>Thanks again Kevin. Putting that back in doesn't fix my real use case, but it gives me hope. I'll continue to mess around before I get bold enough to post it.</p>",
        "id": 167828608,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560240565
    },
    {
        "content": "<p>Also I had no idea about inaccessible terms, so thanks again!</p>",
        "id": 167828621,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560240580
    },
    {
        "content": "<p>Note that putting <code>0</code> in there changes the pattern match so it is doing cases on nat instead of foo</p>",
        "id": 167829991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560241825
    },
    {
        "content": "<p>the inaccessible pattern would be writing <code>.(0)</code> in that spot</p>",
        "id": 167830002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560241850
    },
    {
        "content": "<p>and it doesn't fix the problem</p>",
        "id": 167830011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560241862
    },
    {
        "content": "<p>Wait, what's the problem? You haven't actually finished the match</p>",
        "id": 167830108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560241954
    },
    {
        "content": "<p>this works fine</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 167830114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560241964
    },
    {
        "content": "<blockquote>\n<p>Wait, what's the problem? You haven't actually finished the match</p>\n</blockquote>\n<p>How can <code>| _ _ _ _ _ _ := sorry</code> not finish the match?</p>",
        "id": 167835867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560247373
    },
    {
        "content": "<p>now that's a better question. There are certain circumstances where lean can't adequately use the catchall branch to fill in the missing cases</p>",
        "id": 167836465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560247934
    },
    {
        "content": "<p>I remember Rob bringing this up a long long time ago in an issue on lean repo</p>",
        "id": 167836506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560247992
    },
    {
        "content": "<p>This is a known problem for a while: <a href=\"https://github.com/leanprover/lean/issues/1594\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1594\">https://github.com/leanprover/lean/issues/1594</a></p>",
        "id": 167906954,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560303629
    },
    {
        "content": "<p>In this case, the best solution is probably to just give all cases yourself. Hopefully that is not too painful in the actual example.</p>",
        "id": 167906974,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560303676
    }
]