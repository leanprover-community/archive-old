[
    {
        "content": "<p>I have a fun little puzzle for people who like that kind of \"fun little puzzle\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 271139002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644331961
    },
    {
        "content": "<p>This ought to be <code>cases k, cases j, linarith</code>.</p>",
        "id": 271139271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644332093
    },
    {
        "content": "<p><code>namespace profinitely_filtered_pseudo_normed_group_with_Tinv</code> will save you this time</p>",
        "id": 271139277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644332097
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order.lt_succ_iff_lt_or_eq\">docs#succ_order.lt_succ_iff_lt_or_eq</a></p>",
        "id": 271139290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644332107
    },
    {
        "content": "<p><code>s/linarith/omega/</code>?</p>",
        "id": 271139612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644332241
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order.lt_succ_iff\">docs#succ_order.lt_succ_iff</a> along with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_iff_lt_or_eq\">docs#le_iff_lt_or_eq</a>?</p>",
        "id": 271139913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644332370
    },
    {
        "content": "<p>or rather the more general version of <code>lt_succ_iff</code> which takes in a proof that <code>k</code> is not maximal rather than inferring it from <code>no_max_order</code>.</p>",
        "id": 271140096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644332425
    },
    {
        "content": "<p>I did not know that we had a coercion from <code>fin n</code> to <code>fin (n + 1)</code></p>",
        "id": 271142200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644333244
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fin.lt_def</span><span class=\"o\">,</span> <span class=\"n\">fin.ext_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nat.lt_succ_iff_lt_or_eq</span>\n</code></pre></div>\n</div></div>",
        "id": 271142537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644333381
    },
    {
        "content": "<p>My way using <code>succ_order</code> would be much easier if <code>fin</code> addition was absorbent...</p>",
        "id": 271142669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644333433
    },
    {
        "content": "<p><code>k + 1</code> really shouldn't appear in the statement at all</p>",
        "id": 271142758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644333472
    },
    {
        "content": "<p>The <code>succ</code> I'm getting is <code>λ a, if a = fin.last n then fin.last n else a + 1</code>, not <code>λ a, a + 1</code> as you would expect.</p>",
        "id": 271142764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644333473
    },
    {
        "content": "<p>There is already a function for this, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ\">docs#fin.succ</a>. But then the right hand side is awkward, maybe it should be about <code>fin.cast_succ j</code>.</p>",
        "id": 271142969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644333558
    },
    {
        "content": "<p><code>simp</code> changes the statement to <code>j &lt; k.succ ↔ j &lt; ⇑fin.cast_succ k ∨ j = ⇑fin.cast_succ k</code></p>",
        "id": 271143143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644333634
    },
    {
        "content": "<p>There may be a <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue here. The full context is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">set</span> <span class=\"n\">submodule</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n          <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">basis.flag</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"bp\">|</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">})</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">basis.flag_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.flag</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">basis.flag_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.flag</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">basis.flag_mono</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">b.flag</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pain</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>  <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">basis.flag_span_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b.flag</span> <span class=\"n\">k</span> <span class=\"bp\">⊔</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">b.flag</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">basis.flag</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">span_union</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">image_singleton</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">image_union</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pain</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271143440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644333769
    },
    {
        "content": "<p>You can see the weird goal is generated by <code>simp</code> in the suffices.</p>",
        "id": 271143526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644333811
    },
    {
        "content": "<p>Maybe the correct path is to forget about fin and define a function on nat.</p>",
        "id": 271143654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644333860
    },
    {
        "content": "<p>In <code>basis.flag</code> shouldn't <code>b</code> be a basis of size <code>n</code>?</p>",
        "id": 271144145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644334060
    },
    {
        "content": "<p>I don't really care. Maybe I was too cautious there.</p>",
        "id": 271144430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334172
    },
    {
        "content": "<p>I mean, if <code>M</code> is dimension 3 then a flag has 4 subspaces (of dimensions 0, 1, 2, 3)</p>",
        "id": 271144552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644334212
    },
    {
        "content": "<p>Oh I see. I got my counting wrong.</p>",
        "id": 271145001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334374
    },
    {
        "content": "<p>Now I need to fight casts and inclusion even in the definition of <code>basis.flag</code> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 271145450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/fin.20hell/near/271143654\">said</a>:</p>\n<blockquote>\n<p>Maybe the correct path is to forget about fin and define a function on nat.</p>\n</blockquote>\n<p>This seems very reasonable. You could even use int if there was some use for it.</p>",
        "id": 271146216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644334856
    },
    {
        "content": "<p>Just as we have tactics#zify to transition from N to Z, we should have <code>nify</code> to transition from fin to N.</p>",
        "id": 271337134,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644436171
    },
    {
        "content": "<p>You can always \"cases i\" to destruct your fin into the underlying nat value. And then rely on simp lemmas</p>",
        "id": 271344137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644439250
    }
]