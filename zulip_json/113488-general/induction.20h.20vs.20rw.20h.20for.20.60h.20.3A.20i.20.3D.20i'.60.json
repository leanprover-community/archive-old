[
    {
        "content": "<p>I was surprised to see <code>tidy?</code> generate <code>induction h</code> when <code>h</code> is an equality. I'm a little puzzled by the meaning of this, especially since <code>rw h</code> fails.  The goal state was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">si</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">si</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>and after <code>induction h</code> becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">si</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">si</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Can someone explain to me the intuition here?</p>",
        "id": 214818606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603881492
    },
    {
        "content": "<p>I don't know exactly what's going on here, but the reason <code>rw</code> doesn't work is probably because there is a term in the goal whose type contains <code>i</code>, which means that it is harder to generate the motive (the argument called <code>C</code> in the type of <code>eq.rec</code>) when making the proof term. <code>induction</code> on equality is basically just substitution, but the <code>induction</code> tactic has better support for computing the motive than <code>rw</code>, and makes the substitution everywhere. I think somehow it's easier to compute the motive when you rewrite at all your hypotheses, and also easier when one side of the equality is just a local constant.</p>",
        "id": 214820686,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1603882797
    },
    {
        "content": "<p>Thanks, your wording made me realize that <code>induction h</code> is doing the same thing as <code>subst h</code> (which unlike <code>rw h</code>, also works)</p>",
        "id": 214821100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603883048
    },
    {
        "content": "<p>For more context of what's going on, I'm trying to prove the trivial-but-somehow-not-refl statement in <a href=\"#narrow/stream/113488-general/topic/Difficulty.20with.20dependent.20rewrites/near/214686669\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Difficulty.20with.20dependent.20rewrites/near/214686669</a></p>",
        "id": 214821245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603883143
    }
]