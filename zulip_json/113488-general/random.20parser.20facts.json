[
    {
        "content": "<p>New discovery while reading the lean source: These are both legal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span>\n</pre></div>\n\n\n<p>and they add a new type isomorphic to <code>unit</code>. (I would have guessed that the second one works, but the first one is a parser trick.) However these don't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">bad</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bad</span><span class=\"bp\">.</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 160530131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552349232
    },
    {
        "content": "<p>who would read the lean source...</p>",
        "id": 160530675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552349786
    },
    {
        "content": "<p>how else do you learn about undocumented features (and \"features\")?</p>",
        "id": 160530775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552349896
    },
    {
        "content": "<p>aha, here is the random parser fact I was looking for: You may know that you can write <code>{}</code> before the binder of a structure or inductive to make the arguments implicit. This is used for example to make <code>list.nil</code> have no explicit args:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">regular1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">regular2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">regular2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">regular1</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- regular1.mk : Π {α : Type} (l : list α), ℕ → regular1 α l</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">regular1</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"c1\">-- Π {α : Type} {l : list α}, regular1 α l → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">regular2</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- regular2.mk : Π {α : Type} (l : list α), regular2 α l</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">implicit1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">implicit2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">implicit2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">implicit1</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- implicit1.mk : Π {α : Type} {l : list α}, ℕ → implicit1 α l</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">implicit1</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"c1\">-- implicit1.foo : Π {α : Type} {l : list α}, implicit1 α l → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">implicit2</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- implicit2.mk : Π {α : Type} {l : list α}, implicit2 α l</span>\n</pre></div>\n\n\n<p>It turns out there is a third mode, triggered by <code>()</code> before the colon instead. But the parser code here is buggy, so you have to put a space between the parens so it doesn't look like the unit star token:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">explicit1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span> <span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">explicit2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">explicit2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">explicit1</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- explicit1.mk : Π (α : Type) (l : list α), ℕ → explicit1 α l</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">explicit1</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"c1\">-- explicit1.foo : Π (α : Type) (l : list α), explicit1 α l → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">explicit2</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"c1\">-- explicit2.mk : Π (α : Type) (l : list α), explicit2 α l</span>\n</pre></div>",
        "id": 160532761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552352179
    },
    {
        "content": "<p>so every <code>def</code> is invoking an instance of the axiom schema...</p>",
        "id": 160532880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352314
    },
    {
        "content": "<p>nonsequitur much?</p>",
        "id": 160532888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552352333
    },
    {
        "content": "<p>yeah sorry it's a random remark</p>",
        "id": 160532908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352373
    },
    {
        "content": "<p>I suppose random facts are on topic here</p>",
        "id": 160532920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552352400
    },
    {
        "content": "<p>so what do you think anyway</p>",
        "id": 160532971,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352411
    },
    {
        "content": "<p>every structure / inductive / class / def is invoking an axiom of the axiom schema, all in the name of definitional equalities</p>",
        "id": 160532981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352430
    },
    {
        "content": "<p>I suppose there's no way around this</p>",
        "id": 160532988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352445
    },
    {
        "content": "<p>I literally have no idea what you are talking about. It's not related to the context on this thread as far as I can tell</p>",
        "id": 160533202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552352691
    },
    {
        "content": "<p>I mean, when you create an inductive type, you're effectively adding axioms to the system right</p>",
        "id": 160533238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552352753
    },
    {
        "content": "<p>yes, <code>inductive</code> is a mechanism for using an axiom schema built into lean. <code>structure</code> and <code>class</code> are fancy ways to say <code>inductive</code>, and <code>def</code> is not an axiom in any sense</p>",
        "id": 160533536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552353144
    },
    {
        "content": "<p>you're adding a new constant and adding an axiom that the constant \"unfolds\" to a certain value</p>",
        "id": 160533556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552353207
    },
    {
        "content": "<p>when you say <code>def n := 5</code> you're adding the constant <code>n : nat</code> and the axiom <code>n._equations._eqn_1 : n = 5</code></p>",
        "id": 160533568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552353237
    },
    {
        "content": "<blockquote>\n<p>you're adding a new constant and adding an axiom that the constant \"unfolds\" to a certain value</p>\n</blockquote>\n<p>no, definitions in DTT don't work like this</p>",
        "id": 160533642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552353291
    },
    {
        "content": "<p>they are abbreviations for certain terms, so there is no axiom of equality</p>",
        "id": 160533668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552353327
    },
    {
        "content": "<p>I see</p>",
        "id": 160533684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552353356
    },
    {
        "content": "<p>but for practical reasons definitions are supported by the kernel, which implements definition unfolding as a reduction rule</p>",
        "id": 160533685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552353358
    },
    {
        "content": "<p>Ooh, good topic. Did you know that you can let-bind notations like in</p>\n<div class=\"codehilite\"><pre><span></span>#eval let infix + := nat.mul in 1 + 2\n</pre></div>\n\n\n<p>? Is anybody using that? Because implementing that in pure Lean is basically impossible and so this will probably not work in Lean 4 and I wonder if anybody will even notice.</p>",
        "id": 160647362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469132
    },
    {
        "content": "<p>what? news to me</p>",
        "id": 160647524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469194
    },
    {
        "content": "<p>Yeah, me too until I read the source some time ago</p>",
        "id": 160647569,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469250
    },
    {
        "content": "<p>that's pretty cool though</p>",
        "id": 160647574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469256
    },
    {
        "content": "<p>I like the idea of expression-local notations</p>",
        "id": 160647630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469286
    },
    {
        "content": "<p>Well, don't get too attached to it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 160647646,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469313
    },
    {
        "content": "<p><code>structure</code> has something similar with those <code>(infix bla)</code> binders</p>",
        "id": 160647657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469325
    },
    {
        "content": "<p>Yes, that's okay (more or less, it's a pain in the macro expander), because the extended parser (terms) is not the one being executed (commands)</p>",
        "id": 160647691,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469375
    },
    {
        "content": "<p>What about an <code>infix</code> tactic? How hard is that?</p>",
        "id": 160647694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469381
    },
    {
        "content": "<p>that seems more doable and just as expressive</p>",
        "id": 160647749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469409
    },
    {
        "content": "<p>I hope the parser isn't going to end up being a second tactic language</p>",
        "id": 160647811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469481
    },
    {
        "content": "<p>That's not much better (or worse) because tactic parsing is still part of the big term parser recursion</p>",
        "id": 160647836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469512
    },
    {
        "content": "<p>oh, I see... you won't be able to parse the following expressions until you run the tactic</p>",
        "id": 160647906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469569
    },
    {
        "content": "<p>but you can't run the tactic until you've parsed the tactic block</p>",
        "id": 160647927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469586
    },
    {
        "content": "<p>okay, I'm convinced... kill it with fire</p>",
        "id": 160647950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469631
    },
    {
        "content": "<p>Yes, it would not be a true tactic but part of the tactic block notation. Then it's no harder or easier than notation-let</p>",
        "id": 160647951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469633
    },
    {
        "content": "<p>So let's just pretend this feature has never existed...</p>",
        "id": 160648019,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552469696
    },
    {
        "content": "<p>but what about expressions that we want to parse with a parser that we don't have at parse time? I was thinking more like a real <code>infix</code> tactic</p>",
        "id": 160648053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469733
    },
    {
        "content": "<p>Some kind of super quoting expression should be available</p>",
        "id": 160648068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469760
    },
    {
        "content": "<p>This is also important for many custom parsers... for example if I want to have a block of code in another language inline and parse it with a custom parser</p>",
        "id": 160648162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552469823
    },
    {
        "content": "<p>Would this allow us to take a step towards unifying <code>group</code> and <code>add_group</code> and still have natural notation?</p>",
        "id": 160648422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552470081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure I'm following. When using a DSL, you usually statically know its grammar and where it can occur in the Lean grammar (e.g. \"as the second argument to this tactic\"). Then everything works out.</p>",
        "id": 160648880,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552470548
    },
    {
        "content": "<p>heh, I'm familiar with lots of languages where the grammar is not statically known (hint: lean is one of them)</p>",
        "id": 160648959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552470614
    },
    {
        "content": "<p>It's certainly not changed at tactic execution time</p>",
        "id": 160648990,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552470662
    },
    {
        "content": "<p>I was thinking of parsing more like \"read random junk until you see STOP_NOW\"</p>",
        "id": 160649009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552470678
    },
    {
        "content": "<p>and then you might have to read another file (analogous to lean imports or oleans) to tell you what tokens are valid and how to parse them</p>",
        "id": 160649124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552470790
    },
    {
        "content": "<p>and this happens from lean's perspective at tactic execution time</p>",
        "id": 160649137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552470811
    },
    {
        "content": "<p>All I want to know is whether we'll be able to do <code>{t * s for t in T, s in S if t \\ne 7}</code> for S and T subsets of a monoid</p>",
        "id": 160654766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552476445
    },
    {
        "content": "<p>Oh that's trivial</p>",
        "id": 160655026,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552476699
    }
]