[
    {
        "content": "<p>I'm wondering what everyone thinks about moving mathlib to 3.5? It seems we've accumulated a fair few small fixes there by now, and it would be nice to have them. (As an example, earlier today someone wanted <code>symmetry at h</code> but had to learn about <code>symmetry' at h</code>.)</p>",
        "id": 179097843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572046454
    },
    {
        "content": "<p>There's of course some hassle to move the community to a new default version. But I don't see any reason at this point that we should be fearful of switching to a \"community\" version; that is, it should be no more intimidating that switching from 3.4.1 to 3.4.2.</p>",
        "id": 179097872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572046498
    },
    {
        "content": "<p>I'm guessing that when it becomes time to start thinking about migration plans to Lean 4, it's also going to be useful to have some flexibility on the Lean 3 side.</p>",
        "id": 179097911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572046553
    },
    {
        "content": "<p>We talked about this a bit in portland. One thing we have to get right is the lean update pipeline; everyone has forgotten how to do that and unless it's really painless no one will be incentivized to do it and bad things will happen</p>",
        "id": 179098225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572046976
    },
    {
        "content": "<p>Are there any backwards incompatible changes that need to be made to mathlib in this instance, I seem to remember mathlib compiling fine with community? The only issue I had was that as olean files are linked to the lean version update-mathlib became useless. It would be good as a first step to compile oleans for community too and make update-mathlib use the ones depending on the lean version.</p>",
        "id": 179098303,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1572047052
    },
    {
        "content": "<p>In the upgrade to 3.5, there should be no backward incompatibilities</p>",
        "id": 179098312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572047085
    },
    {
        "content": "<p>but I want to restart an update schedule if we start moving ahead with 3.5, and we can't be backward compatible forever (indeed, a lot of the things we want to change are blocked precisely because of backward compatibility)</p>",
        "id": 179098373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572047163
    },
    {
        "content": "<blockquote>\n<p>One thing we have to get right is the lean update pipeline</p>\n</blockquote>\n<p>Related question: Is there any way to get <code>elan update</code> to check and update to the latest commit of 3.5? Running <code>elan toolchain install leanprover-community/lean:nightly</code> each time works well enough, but is less convenient (mainly because I can never remember the precise command).</p>",
        "id": 179100448,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572049617
    },
    {
        "content": "<blockquote>\n<p>The only issue I had was that as olean files are linked to the lean version update-mathlib became useless. It would be good as a first step to compile oleans for community too and make update-mathlib use the ones depending on the lean version.</p>\n</blockquote>\n<p>I think at one point Mario suggested that we remove the version / commit check for olean files from Lean 3.5.0c. It's a tiny change, I could PR it this weekend.</p>",
        "id": 179100595,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572049823
    },
    {
        "content": "<p>wow yeah if that is possible  that would be great. I guess that would restrict us from every changing the olean format in community, but that seems really unlikely anyway right?</p>",
        "id": 179100831,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1572050218
    },
    {
        "content": "<p>Yep, <a href=\"#narrow/stream/113488-general/topic/online.20leanprover/near/169492357\" title=\"#narrow/stream/113488-general/topic/online.20leanprover/near/169492357\">here's</a> the previous discussion.</p>",
        "id": 179100898,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572050301
    },
    {
        "content": "<p>I'm not too hot on the idea of removing that check. The tactics API changes in Lean 3.5.0 so the olean files for 3.5.0 refer to symbols that don't make sense in 3.4.2</p>",
        "id": 179103151,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572053828
    },
    {
        "content": "<p>Also, right now, we don't have a 3.5 release. I'm thinking of getting one more feature in and making a release on November 1.</p>",
        "id": 179103206,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572053915
    },
    {
        "content": "<p>I don't want it breaking on <em>every commit</em> though</p>",
        "id": 179103743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572054920
    },
    {
        "content": "<p>How about we only break it when the lean core library changes? We could hash all the Lean files in <code>library</code> and make the version string something like <code>3.5-&lt;library-hash&gt;</code></p>",
        "id": 179104078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572055459
    },
    {
        "content": "<p>I don't see why we need to deliberately break it at all. Let it break itself</p>",
        "id": 179106132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572059319
    },
    {
        "content": "<p>The olean file refers to things by their names, so it's not any more brittle than a lean file would be</p>",
        "id": 179106151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572059382
    },
    {
        "content": "<p>I just think it will be no fun to debug if you run into trouble</p>",
        "id": 179106308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572059639
    },
    {
        "content": "<p>I think you will cause trouble much more frequently by doing this. Is there any chance of noting the version difference and reporting it if anything goes wrong in the import?</p>",
        "id": 179107496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572061816
    },
    {
        "content": "<p>The kind of issue that I expect is tactics and definitions crashing when running them if the api they rely on has changed. This is not something that will happen necessarily when processing imports</p>",
        "id": 179107627,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572062100
    },
    {
        "content": "<p>Would there be a \"release 3.5.0\" or would you expect users to keep upgrading Lean like they upgrade mathlib?</p>",
        "id": 179115618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572077877
    },
    {
        "content": "<p>there would be a release 3.5, but there would also be 3.5.1 and the wait would be a lot less than 3.4.2 -&gt; 3.5.0</p>",
        "id": 179115719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572078015
    },
    {
        "content": "<p>It depends a bit on how fast 3.5 starts moving once people are actually using it. But hopefully every month or two we would bump to <code>3.5.(n+1)</code>.</p>",
        "id": 179115728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572078048
    }
]