[
    {
        "content": "<p>Is the following expected behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category_theory.category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≅</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.is_iso</span> <span class=\"n\">g.hom</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- ok.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.is_iso</span> <span class=\"n\">f.hom</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 261068565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636585316
    },
    {
        "content": "<p>The iso symbols have different meanings right? I'm not at lean and haven't got my glasses on so can't see whether the squiggles are the same or not</p>",
        "id": 261070056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636586134
    },
    {
        "content": "<p>Those are both category theory isos</p>",
        "id": 261070077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636586148
    },
    {
        "content": "<p>So presumably X and Y are being promoted to terms</p>",
        "id": 261070248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636586237
    },
    {
        "content": "<p>I see, and the point is that you can let A and B be those coerced terms and then the typeclass system finds it</p>",
        "id": 261070399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636586312
    },
    {
        "content": "<p>Well, the <code>A</code> and <code>B</code> are terms in a type <code>C</code> (which has a category instance)</p>",
        "id": 261070564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636586424
    },
    {
        "content": "<p>I'm just noting that when you have an isomoprhism <code>e</code> between two objects <code>A</code> and <code>B</code> in an arbitrary category <code>C</code>, then typeclass inference finds the <code>is_iso e.hom</code> instance. But when the category is <code>Type u</code>, this fails.</p>",
        "id": 261070637,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636586486
    },
    {
        "content": "<p>Oh of course you just let Type u be the category, oh I had completely misunderstood, I should go to bed</p>",
        "id": 261070815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636586597
    },
    {
        "content": "<p>I've met this somewhere else. The thing is that the inference somehow finds <code>(λ x, x) ≫ f.hom</code> defeq to <code>f.hom</code> so it goes into an infinite loop.<br>\nusing <code>attribute [irreducible] category_theory.types</code> fixes it for me, although I don't know if this causes more problem for you.</p>",
        "id": 261072479,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1636587640
    },
    {
        "content": "<p>Hmm... That's strange. </p>\n<p>I guess another option would be to do some bundling.</p>",
        "id": 261072804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636587857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> nice debug. This is quite a sad failure.</p>",
        "id": 261097808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636611651
    },
    {
        "content": "<p>This could be solved by setting priorities. Either or both of the following lines solve the issue, and could be added globally in the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">900</span><span class=\"o\">]</span> <span class=\"n\">category_theory.is_iso.comp_is_iso</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">category_theory.is_iso.of_iso</span>\n</code></pre></div>",
        "id": 261122457,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636630859
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10276\">#10276</a></p>",
        "id": 261144455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636643098
    },
    {
        "content": "<p>Please leave a comment that explains the gist of this thread</p>",
        "id": 261144807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636643259
    },
    {
        "content": "<p>done</p>",
        "id": 261145228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636643478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I meant in the actual code. I left a suggestion.</p>",
        "id": 261148192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636644872
    },
    {
        "content": "<p>Oh, gotcha</p>",
        "id": 261148223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636644890
    }
]