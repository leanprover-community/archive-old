[
    {
        "content": "<p>Yesterday, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> asked for the current mathlib import graph, without having to install anything. This is available at  <a href=\"https://www.yworks.com/yed-live/?file=https://gist.githubusercontent.com/PatrickMassot/a23fb34e1b26409f10013de07525ece8/raw/ae80aec753cbf37b36ca683c94db08b99f0cf36b/import_graph\" title=\"https://www.yworks.com/yed-live/?file=https://gist.githubusercontent.com/PatrickMassot/a23fb34e1b26409f10013de07525ece8/raw/ae80aec753cbf37b36ca683c94db08b99f0cf36b/import_graph\">https://www.yworks.com/yed-live/?file=https://gist.githubusercontent.com/PatrickMassot/a23fb34e1b26409f10013de07525ece8/raw/ae80aec753cbf37b36ca683c94db08b99f0cf36b/import_graph</a>, but this will require your web browser to be patient.</p>",
        "id": 192182495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499474
    },
    {
        "content": "<p>Do you have it in some text format (e.g., graphviz)?</p>",
        "id": 192182782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585499830
    },
    {
        "content": "<p>Sure.</p>",
        "id": 192182790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499842
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/B8xqOu3E-LLZT1PPoy9c_NND/import_graph.dot\" title=\"import_graph.dot\">import_graph.dot</a></p>",
        "id": 192182800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499865
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 192182802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585499871
    },
    {
        "content": "<p>Do we have any tool to determine unneeded <code>import</code>s?</p>",
        "id": 192182853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585499904
    },
    {
        "content": "<p>I think we used to have something testing that in CI, but it was driving people crazy.</p>",
        "id": 192182862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585499935
    },
    {
        "content": "<p>The <code>category_theory.limits.shapes.constructions.sums</code> module doesn't have any edges: <a href=\"https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/sums.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/sums.lean\">https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/sums.lean</a></p>",
        "id": 192182881,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585499982
    },
    {
        "content": "<p>Yes, this is among the most sober files in mathlib.</p>",
        "id": 192182943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500039
    },
    {
        "content": "<p>I think this was already noticed when writing the mathlib paper, but somehow it was decided not to fix it.</p>",
        "id": 192182957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500065
    },
    {
        "content": "<p>Probably it's meant as a placeholder</p>",
        "id": 192182965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500084
    },
    {
        "content": "<p>There are 648 nodes in this graph (and 1764 edges), we can afford a couple of empty nodes.</p>",
        "id": 192183028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500160
    },
    {
        "content": "<p>But note that <a href=\"https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/finite_products.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/finite_products.lean\">https://github.com/leanprover-community/mathlib/blob/38544f14662d9d1fd97bd1fb132213c546292025/src/category_theory/limits/shapes/constructions/finite_products.lean</a> is conceptually closely related to that file, it almost counts as an edge.</p>",
        "id": 192183065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585500237
    },
    {
        "content": "<p>I didn't know this was allowed! It reminds me of all the directories <a href=\"https://github.com/HoTT/HoTT/tree/master/coq/theories\" title=\"https://github.com/HoTT/HoTT/tree/master/coq/theories\">here</a> (when I was recently trying to figure out what maths has been done in HoTT theories)</p>",
        "id": 192184455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585502070
    },
    {
        "content": "<p>This not really allowed, this is more like overlooked.</p>",
        "id": 192184480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585502137
    },
    {
        "content": "<blockquote>\n<p>I think this was already noticed when writing the mathlib paper, but somehow it was decided not to fix it.</p>\n</blockquote>\n<p>Was it decided or just forgotten? The \"placeholder\" has been empty for 7 months, I think a PR deleting empty files would be welcome.</p>",
        "id": 192185236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585503248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20import.20graph/near/192182853\" title=\"#narrow/stream/113488-general/topic/mathlib.20import.20graph/near/192182853\">said</a>:</p>\n<blockquote>\n<p>Do we have any tool to determine unneeded <code>import</code>s?</p>\n</blockquote>\n<p>Simon and Mario's olean-rs tool does this, iirc</p>",
        "id": 192185249,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585503285
    },
    {
        "content": "<p>This is why I wrote it was more overlooked than allowed.</p>",
        "id": 192185255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585503299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20import.20graph/near/192182853\" title=\"#narrow/stream/113488-general/topic/mathlib.20import.20graph/near/192182853\">said</a>:</p>\n<blockquote>\n<p>Do we have any tool to determine unneeded <code>import</code>s?</p>\n</blockquote>\n<p>ooh found one <a href=\"/user_uploads/3121/dJVN2wfhPTgjeCphoiC1JxbT/import.png\" title=\"import.png\">import.png</a> Might take a while to do it by hand though</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dJVN2wfhPTgjeCphoiC1JxbT/import.png\" title=\"import.png\"><img src=\"/user_uploads/3121/dJVN2wfhPTgjeCphoiC1JxbT/import.png\"></a></div>",
        "id": 192185626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585503830
    },
    {
        "content": "<p>I'm not sure this is what Yury wanted.</p>",
        "id": 192185681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585503867
    },
    {
        "content": "<p>But maybe it is.</p>",
        "id": 192185686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585503881
    },
    {
        "content": "<p>Oh -- imports which aren't used?</p>",
        "id": 192185687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585503887
    },
    {
        "content": "<p>There are two kinds of useless imports. Those which are unused and those which would be imported by transitivity anyway.</p>",
        "id": 192185704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585503908
    },
    {
        "content": "<p>I guess that is the more important issue. I should imagine that the loop above makes no difference to anything.</p>",
        "id": 192185705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585503909
    },
    {
        "content": "<p>I was talking about something like <a href=\"https://github.com/leanprover-community/mathlib/pull/2282/files#diff-66f08ece38e86b3511a0261beaa7dc87\" title=\"https://github.com/leanprover-community/mathlib/pull/2282/files#diff-66f08ece38e86b3511a0261beaa7dc87\">this</a></p>",
        "id": 192186095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585504508
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/38\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/38\">https://github.com/leanprover-community/mathlib-tools/pull/38</a> for people interested in import graphs. It's purely about imports, not things being actually used.</p>",
        "id": 192187632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585506650
    },
    {
        "content": "<p>I just wrote (I thought I should remember how to write python) <code>lean-deps</code>, which you use as follows.</p>\n<p>Let's look at the dependency tree for <code>src/category_theory/types.lean</code>, restricting to import chains ending within <code>src/category_theory</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$ ./lean-deps src/category_theory/types.lean src/category_theory/\nsrc/category_theory/types.lean\n├── src/category_theory/functor_category.lean\n│   └── src/category_theory/natural_transformation.lean\n│       └── src/category_theory/functor.lean\n│           ├── src/category_theory/category/default.lean\n│           └── src/tactic/reassoc_axiom.lean\n│               └── ≪ src/category_theory/category/default.lean ≫\n└── src/category_theory/fully_faithful.lean\n    └── src/category_theory/isomorphism.lean\n        └── ≪ src/category_theory/functor.lean ≫\n</pre></div>\n\n\n<p>Dependencies which occur multiple times are shown wrapped in <code>≪ ... ≫</code>, and their further transitive dependencies are omitted. (You can omit repeats entirely using <code>lean-deps -o</code>, or show their dependencies too with <code>lean-deps -a</code>.</p>\n<p>Without a second argument, <code>lean-deps</code> shows dependencies all the way down. It takes a few seconds on files deep in the hierarchy, but seems usable. You can also specify one or more specific files as second arguments, so we can analyze the somewhat surprising dependency of the Hahn-Banach theorem theorem on the category theory library as follows:</p>\n<div class=\"codehilite\"><pre><span></span>$ ./lean-deps -o src/analysis/normed_space/hahn_banach.lean src/category_theory/category/default.lean\nsrc/analysis/normed_space/hahn_banach.lean\n└── src/analysis/normed_space/operator_norm.lean\n    └── src/topology/metric_space/lipschitz.lean\n        └── src/category_theory/endomorphism.lean\n            └── src/category_theory/category/default.lean\n</pre></div>",
        "id": 192205845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535569
    },
    {
        "content": "<p>This seems pretty duplicative, of course, with what Patrick has done, but I find the text mode output very satisfying.</p>",
        "id": 192205933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535714
    },
    {
        "content": "<p>I prove that <code>list.prod</code> of Lipschitz <code>End</code>s is Lipschitz.</p>",
        "id": 192205936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585535727
    },
    {
        "content": "<p>Perhaps we could just combine the two, so <code>leanproject import-graph -from XXX</code> but with no filename prints an ASCII tree on stdout</p>",
        "id": 192205977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535763
    },
    {
        "content": "<p>Also, I think <code>leanproject import-graph</code> doesn't yet support using both <code>-from</code> and <code>-to</code>, which I think is very helpful for understanding a particular chain.</p>",
        "id": 192205988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535824
    },
    {
        "content": "<p>My code is at <a href=\"https://gist.github.com/semorrison/d27e35ed5eac96b0dec939f72fada56d\" title=\"https://gist.github.com/semorrison/d27e35ed5eac96b0dec939f72fada56d\">https://gist.github.com/semorrison/d27e35ed5eac96b0dec939f72fada56d</a>.</p>",
        "id": 192206045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535915
    },
    {
        "content": "<p>I think I'll stop playing with it until hearing from Patrick.</p>",
        "id": 192206050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585535928
    },
    {
        "content": "<p>I think this also duplicates functionality in <code>olean-rs</code></p>",
        "id": 192207779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585538750
    },
    {
        "content": "<p>you have to calculate this info in order to read any lean file</p>",
        "id": 192207822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585538787
    },
    {
        "content": "<p>it should be a lot faster than a few seconds too ('cause Rust and all that)</p>",
        "id": 192207836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585538835
    },
    {
        "content": "<p>oh I see, you are calling lean a bunch of times to process the files. Yeah, <code>olean-rs</code> will be a lot faster, since it just does the same thing lean does but without the text processing and elaboration</p>",
        "id": 192207944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585539095
    },
    {
        "content": "<p>The dependencies of an olean file are all literally written in the first line</p>",
        "id": 192208010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585539188
    },
    {
        "content": "<p>I just want ASCII trees, in a tool whose installation procedure is already covered by <code>pip install mathlib-tools</code>. :-)</p>",
        "id": 192209170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585541132
    },
    {
        "content": "<p>how feasible is it to link an olean-rs library build to a python project? I would guess it's possible, not sure about how distribution works</p>",
        "id": 192209501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585541630
    },
    {
        "content": "<p><code>lean --deps</code> is much faster than running lean.  It doesn't import anything, it just parses the first command in the file and outputs the imported files.</p>",
        "id": 192230774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585560557
    },
    {
        "content": "<p>I worked a bit on this, see <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/38/commits/6a94d737f54fd259d7ee228e2ef56b5b4f997a45\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/38/commits/6a94d737f54fd259d7ee228e2ef56b5b4f997a45\">https://github.com/leanprover-community/mathlib-tools/pull/38/commits/6a94d737f54fd259d7ee228e2ef56b5b4f997a45</a>. The motivation for adding ascii art output is very low for me, but feel free to add a commit to this PR. I also just realized I didn't interpret \"support using both <code>--from</code> and <code>--to</code>\" in the same way as Scott. I added this possibility, but it return the intersection of the subgraphs that each option would have generated, whereas Scott's example suggest generating only the shortest path from one file to the other. For comparison, here is the current output of </p>\n<div class=\"codehilite\"><pre><span></span>leanproject import-graph --to analysis.normed_space.hahn_banach --from category_theory.category.default hb.pdf\n</pre></div>\n\n\n<p><a href=\"/user_uploads/3121/oMG7VwMiOT61e9YWTIrcskk5/hb.pdf\" title=\"hb.pdf\">hb.pdf</a></p>",
        "id": 192277178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585584050
    },
    {
        "content": "<p>Note that my version clearly points out the culprit: <code>topology.metric_space.lipschitz</code> randomly imports two category theory files.</p>",
        "id": 192277805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585584325
    },
    {
        "content": "<p>which are used in three isolated lemmas in the middle of the file.</p>",
        "id": 192278001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585584414
    },
    {
        "content": "<p>Is there something bad with importing category theory files?</p>",
        "id": 192288339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585588822
    },
    {
        "content": "<p>How else should I argue about long compositions of self-maps?</p>",
        "id": 192288398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585588845
    },
    {
        "content": "<p>This was described as \"somewhat surprising\", not bad (especially coming from Scott).</p>",
        "id": 192288562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585588914
    },
    {
        "content": "<p>Then there is the question of optimizing the import graph, but this is a complicated question.</p>",
        "id": 192288662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585588944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, how do I run <code>leanproject</code> from a branch of mathlib-tools?</p>",
        "id": 192329030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585610161
    },
    {
        "content": "<p>I tried:</p>\n<ul>\n<li>checkout the git repository on branch <code>imports</code></li>\n<li>locate <code>leanproject.py</code> in <code>mathlibtools</code></li>\n<li>try running it, get \"permission denied\"</li>\n<li><code>chmod u+x ...</code></li>\n<li>run it, get error message</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>import: delegate library support not built-in &#39;&#39; (X11) @ error/import.c/ImportImageCommand/1282.\n./leanproject.py: line 13: syntax error near unexpected token `(&#39;\n./leanproject.py: line 13: `from mathlibtools.lib import (LeanProject, log, LeanDirtyRepo,&#39;\n</pre></div>\n\n\n<p>after the usual help text.</p>\n<p>Am I meant to instead be using <code>pip</code> to install the branch version?</p>",
        "id": 192329146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585610249
    },
    {
        "content": "<p>(Actually, not after the usual help text: instead it prints help text from ImageMagick...)</p>",
        "id": 192329224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585610324
    },
    {
        "content": "<p>Using <code>leanproject</code> without installing the mathlibtools package is definitely not supported, even when developing it. The correct workflow is </p>\n<div class=\"codehilite\"><pre><span></span>git checkout imports\npip install .\n</pre></div>\n\n\n<p>If you are modifying it you can <code>pip install -e .</code> to avoid constantly running <code>pip install</code>.</p>",
        "id": 192365579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647366
    },
    {
        "content": "<p>The ImageMagick thing is hilarious, I wonder what your shell is trying to launch <code>leanproject.py</code> directly (this file has no shebang indicating this should be ran using python).</p>",
        "id": 192365760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647482
    },
    {
        "content": "<p>Since you don't seem to be familiar with python packaging, let me point out that the name similarity between the user-facing script <code>leanproject</code> and the file <code>leanproject.py</code> is not what create the user facing script, which comes from <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/setup.py#L15-L18\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/setup.py#L15-L18\">https://github.com/leanprover-community/mathlib-tools/blob/master/setup.py#L15-L18</a>.</p>",
        "id": 192366154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585647705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what is the status of this thread? Do you still want to contribute to <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/38\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/38\">https://github.com/leanprover-community/mathlib-tools/pull/38</a> or should we merge it?</p>",
        "id": 192976415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586118135
    },
    {
        "content": "<p>I added some documentation to what you'd done. My attempts to add text mode output failed, so I added some comments to the PR in case anyone else wants to take this up again.</p>",
        "id": 192988425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586137866
    },
    {
        "content": "<p>I'll use my <a href=\"https://gist.github.com/semorrison/d27e35ed5eac96b0dec939f72fada56d\" title=\"https://gist.github.com/semorrison/d27e35ed5eac96b0dec939f72fada56d\"><code>lean-deps</code></a> script myself for the \"dependencies between X and Y\" question.</p>",
        "id": 192988433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586137909
    },
    {
        "content": "<p>I still don't understand the specification here. What do you mean by \"dependencies between X and Y\" ? Why isn't my version the answer?</p>",
        "id": 193016891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586165917
    },
    {
        "content": "<p>Remember the answer of my version is <a href=\"user_uploads/3121/oMG7VwMiOT61e9YWTIrcskk5/hb.pdf\" title=\"user_uploads/3121/oMG7VwMiOT61e9YWTIrcskk5/hb.pdf\">https://leanprover.zulipchat.com/user_uploads/3121/oMG7VwMiOT61e9YWTIrcskk5/hb.pdf</a></p>",
        "id": 193017045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586166023
    },
    {
        "content": "<p>Oh, I see, that's great. I just never managed to run it locally (because I only worked out today that I needed to install graphviz for anything to work), and missed the link you provided to the PDF.</p>",
        "id": 193020111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586167853
    },
    {
        "content": "<p>I saw in the code the line </p>\n<div class=\"codehilite\"><pre><span></span>    if to and from_:\n        G = graph.path(start=from_, end=to)\n</pre></div>\n\n\n<p>and made an (incorrect) assumption about what it was doing.</p>",
        "id": 193020169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586167910
    },
    {
        "content": "<p><code>topology.metric_space.antilipschitz</code> imports <code>topology.metric_space.lipschitz</code> ;-)</p>",
        "id": 193020689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586168201
    },
    {
        "content": "<p>I'm sorry I thought the doc was clear. Please feel free to clarify it. It's still not quite true that graphviz is required. You can output graphml or gexf and look at them using yed or Gephi for instance.</p>",
        "id": 193020868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586168333
    },
    {
        "content": "<p>But it's true you need some graph visualization software to see the graph.</p>",
        "id": 193020891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586168351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what is this timing stuff you added in the import graph branch?</p>",
        "id": 193021179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586168522
    },
    {
        "content": "<p>I guess this is a git accident.</p>",
        "id": 193021221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586168542
    },
    {
        "content": "<p>git accident!</p>",
        "id": 193027185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586172216
    },
    {
        "content": "<p>/me looks it up in the git manual</p>",
        "id": 193027343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172282
    },
    {
        "content": "<p>Ok, I cleanup up and forced push. I'm afraid you lost the authorship here, but I hope it's not too bad.</p>",
        "id": 193031987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586175286
    },
    {
        "content": "<p>no worries :-)</p>",
        "id": 193037255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586178005
    },
    {
        "content": "<p>Hello! I'm interested in joining in on this project - I really like following theorem dependencies when I take notes so this project is pretty cool.</p>\n<p>I'm particularly interested in making user-friendly visualizations - stuff like color-coding the ideas or bigger themes underlying the theorems, replacing Lean theorem names with more commonly known names, that sort of thing</p>",
        "id": 198799175,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590516336
    },
    {
        "content": "<p>You are looking for <a href=\"https://github.com/leanprover-community/leancrawler\">leancrawler</a></p>",
        "id": 198800654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590517097
    },
    {
        "content": "<p>See eg the graph at <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a></p>",
        "id": 198800713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590517125
    },
    {
        "content": "<p>Here nodes are colored by auto-generated cluster, and sized by outgoing degree, but you can play endlessly with variations</p>",
        "id": 198800831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590517177
    },
    {
        "content": "<p>I posted mathlib data less than one week ago I think.</p>",
        "id": 198800984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590517231
    },
    {
        "content": "<p>Note that you can also get a much cruder graph by using leanproject to generate import graphs</p>",
        "id": 198801041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590517255
    },
    {
        "content": "<p>That's a very pretty graph</p>",
        "id": 198801844,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590517601
    },
    {
        "content": "<p>Thank you though! Good to know</p>",
        "id": 198801932,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590517666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>PS C:\\mathlib&gt; leanproject import-graph --from .\\src\\linear_algebra\\basis.lean\nThe node .\\src\\linear_algebra\\basis.lean is not in the graph.\nPS C:\\mathlib&gt; leanproject import-graph --from linear_algebra.basis\n[WinError 2] &quot;dot&quot; not found in path.\nPS C:\\mathlib&gt;\n</code></pre></div>",
        "id": 198818571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590525574
    },
    {
        "content": "<p>what's the canonical way to use <code>leanproject import-graph</code>?</p>",
        "id": 198818594,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590525581
    },
    {
        "content": "<p><code>leanproject import-graph</code> works for me</p>",
        "id": 198818682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590525612
    },
    {
        "content": "<p>What happens if you pass it paths with forward slashes?</p>",
        "id": 198818717,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590525636
    },
    {
        "content": "<p>Oh hang on, it seems like <code>import-graph</code> wants to use <code>dot</code>, which it doesn't seem like you have?</p>",
        "id": 198818767,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590525669
    },
    {
        "content": "<p>what is <code>dot</code>?</p>",
        "id": 198818834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590525716
    },
    {
        "content": "<p>It's a graph-drawing program. <a href=\"https://graphviz.gitlab.io/download/\">https://graphviz.gitlab.io/download/</a></p>",
        "id": 198818908,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590525745
    }
]