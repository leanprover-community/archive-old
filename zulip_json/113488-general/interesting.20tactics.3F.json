[
    {
        "content": "<p>Hello general. I am giving a talk next week about algorithmic problem solving to an audience of mathematicians. I would like to highlight some of the interesting uses of tactics within mathlib. Suggestions?</p>",
        "id": 238408462,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620783894
    },
    {
        "content": "<p>The <code>continuity</code> tactic might be worth a mention, as well as the use of <code>simp</code>  to prove integrals</p>",
        "id": 238411511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620786339
    },
    {
        "content": "<p><code>tidy</code> to clean up side conditions in category theory</p>",
        "id": 238411613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620786408
    },
    {
        "content": "<p>A <code>grobner</code> tactic doesn't exist, but it is mathematically interesting and could exist. <code>ring</code>, of course, although I don't know how impressive it is</p>",
        "id": 238411760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620786592
    },
    {
        "content": "<p>The Risch algorithm is a good talking point, although to my knowledge it's never been implemented in full anywhere</p>",
        "id": 238411888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620786689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238411511\">said</a>:</p>\n<blockquote>\n<p>The <code>continuity</code> tactic might be worth a mention, as well as the use of <code>simp</code>  to prove integrals</p>\n</blockquote>\n<p>Thanks, great suggestion. There are over 80 <code>@[continuity]</code> tags.</p>",
        "id": 238412061,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620786830
    },
    {
        "content": "<p>Oh, <code>norm_num</code> looks like a boring tactic but I think it is more interesting when used to prove e to ten decimals</p>",
        "id": 238412134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620786883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238411613\">said</a>:</p>\n<blockquote>\n<p><code>tidy</code> to clean up side conditions in category theory</p>\n</blockquote>\n<p>This is a great one.</p>",
        "id": 238412293,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620786993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238412134\">said</a>:</p>\n<blockquote>\n<p>Oh, <code>norm_num</code> looks like a boring tactic but I think it is more interesting when used to prove e to ten decimals</p>\n</blockquote>\n<p>Indeed :)</p>",
        "id": 238412336,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620787027
    },
    {
        "content": "<p><code>linarith</code> is great for just not having to worry about an entire class of problems that mathematicians are ill suited to solve directly</p>",
        "id": 238412364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620787076
    },
    {
        "content": "<p>Is there a diagram chaser? Or does tidy handle this?</p>",
        "id": 238412600,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620787254
    },
    {
        "content": "<p>There is <code>rewrite_search</code>, although it got stuck in PR limbo for a while and I'm not sure if it landed</p>",
        "id": 238412662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620787311
    },
    {
        "content": "<p>I know its a bit silly but I always liked <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dec_trivial\">tactic#dec_trivial</a>, the fact that lean automatically determines that certain propositions are decidable based on some simple rules via typeclass search, and then executes the code to decide the proposition always seemed quite magic to me. I'm thinking of proofs like <a href=\"#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219197\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/quickest.20way.20to.20kill.20.22trivial.20mod.20N.22.3F/near/194219197</a> or more complex variations on the same idea (i.e. which numbers are sums of 3 cubes mod 9, where writing an actual argument takes longer than just instructing lean to case-bash) where this is a very transparent way of saying just check all the cases.</p>",
        "id": 238412711,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1620787324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238412662\">said</a>:</p>\n<blockquote>\n<p>There is <code>rewrite_search</code>, although it got stuck in PR limbo for a while and I'm not sure if it landed</p>\n</blockquote>\n<p>A version of <code>rewrite_search</code> was merged in <a href=\"https://github.com/leanprover-community/mathlib/issues/4841\">#4841</a>.</p>",
        "id": 238412917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620787523
    },
    {
        "content": "<p>Based on a quick skim, <code>rewrite_search</code> seems similar to SMT-style E-graph + heuristic instantiation, but without the E-graph and with more focus on the heuristic.</p>",
        "id": 238413299,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620787827
    },
    {
        "content": "<p>I guess it is literally heuristic bidirectional search in rewrite space.</p>",
        "id": 238413417,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620787941
    },
    {
        "content": "<p>It would be nice if we had a tactic for that that was written by someone who is familar with the theory. I think we've been bumbling about in the space</p>",
        "id": 238413479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620788013
    },
    {
        "content": "<p>At some point lean3 had a reasonable E-matching tactic, written by Leo on top of the SMT infrastructure. But E-matching might not be a good heuristic for most mathlib domains.</p>",
        "id": 238413599,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620788110
    },
    {
        "content": "<p>That does ring a bell. I never really learned how to use the <code>@[ematch]</code> attributes correctly. I think we dropped it because there was a bug and no one knew the code well enough to fix it</p>",
        "id": 238413744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620788234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238413744\">said</a>:</p>\n<blockquote>\n<p>I never really learned how to use the <code>@[ematch]</code> attributes correctly.</p>\n</blockquote>\n<p>This is somewhat of a dark art.</p>",
        "id": 238414151,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620788573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> If the audience is mathematicians, I think even <code>simp</code> and <code>rw</code> deserve quite some attention. They are certainly the most used \"real\" tactics. (In some sense <code>apply</code> and <code>exact</code> or not \"real\" tactics.)<br>\nBut especially <code>simp</code> breaks the <code>A = B</code> symmetry that mathematicians have fundamentally ingrained. So explaining what makes a good <code>simp</code>-lemma might be useful/interesting.</p>",
        "id": 238421114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620795225
    },
    {
        "content": "<p><code>simp</code> is an especially interesting example because it has almost unbounded scope, it is as powerful as the simp lemmas that go into it</p>",
        "id": 238421589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620795655
    },
    {
        "content": "<p>like the example with solving integrals, it does things people would not have originally expected - the user basically gets to \"program\" it using simp lemmas</p>",
        "id": 238421675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620795724
    },
    {
        "content": "<p>I'm thinking of this: <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/228351477\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/228351477</a></p>",
        "id": 238421847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620795903
    },
    {
        "content": "<p>Another, which isn't a tactic: <em>typeclass inference</em>. The fact that Lean automatically figures out that <code>polynomial B</code> is a commutative ring, and a module and an algebra over <code>B</code> is just very very nice.<br>\nIn LTE we also (ab)use it with <code>fact</code>s to prove all sorts of annoying trivial inequalities about real numbers.</p>",
        "id": 238423959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620798097
    },
    {
        "content": "<p>The ematch bug was pretty simple: any lemma that required two different copies of the same typeclass (but for different types) killed it. This made it useless in category theory as soon any functor was involved, because there would be both the source and target <code>category</code> instance.</p>",
        "id": 238432586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620804407
    },
    {
        "content": "<p>Did nobody mention <code>nlinarith</code> yet? A potted and probably slightly inaccurate version of its history: <code>linarith</code> is a powerful tool for 1st year undergraduate analysis, because it turns out that many times in analysis you say stuff like \"well <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">|a-b|&lt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>b</mi><mo>−</mo><mi>c</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">|b-c|&lt;y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>c</mi><mo>−</mo><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">|c-d|&lt;z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> so clearly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mo>−</mo><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">|a-d|&lt;x+y+z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>\" and doing this manually is a real drag, but if you invoke <code>abs_lt</code> then <code>linarith</code> does it all for you. However it didn't know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^2\\geq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.950078em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> because this wasn't linear, so <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> added what seemed to me at least to be a \"minor\" extension to <code>linarith</code> which knew this and a couple of other nonlinear facts like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>≥</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>a</mi><mi>b</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a,b\\geq0\\implies ab\\geq0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and called it <code>nlinarith</code>, and the result was a tool which, for me, was surprisingly powerful. <a href=\"#narrow/stream/116395-maths/topic/linarith.20power/near/231508238\">Here's Heather</a> using it with manifolds, and if you define the integers as a mathematician would, as a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, then there's a <a href=\"#narrow/stream/116395-maths/topic/integer.20multiplication.20and.20nlinarith/near/215105486\">really annoying goal to prove when checking that multiplication is well-defined</a>, and <code>nlinarith</code> solves it immediately (the argument is circular but this doesn't matter for pedagogical purposes).</p>",
        "id": 238433578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620805040
    },
    {
        "content": "<p>Kind of off-topic, but I think the quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> becomes easier to deal with if you make it a <code>quot</code> instead of a <code>quotient</code>. Namely it's the <code>quot</code> by the inductive family of props relating <code>(a, b)</code> and <code>(a + k, b + k)</code>. Then defining multiplication using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.lift₂\">docs#quot.lift₂</a> should leave you with a simpler goal.</p>",
        "id": 238440308,
        "sender_full_name": "David Wärn",
        "timestamp": 1620808674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238421675\">said</a>:</p>\n<blockquote>\n<p>the user basically gets to \"program\" it using simp lemmas</p>\n</blockquote>\n<p>Similar with <code>tidy</code>. Is there an analogue of Coq's <code>auto</code> in lean3? i.e. a programmable tree search?</p>",
        "id": 238483534,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620829948
    },
    {
        "content": "<p>I see the extensible <code>back_chaining</code>tactic is still there, but I can't find a single use in mathlib</p>",
        "id": 238483947,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620830075
    },
    {
        "content": "<p>We don't currently have a reasonably fully-featured proof search procedure except possibly gptf. I'm working on an auto-like tactic, but it'll be a while until that's ready for use.</p>",
        "id": 238484717,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620830357
    },
    {
        "content": "<p>Interesting. FYI <code>auto</code> gets a lot of mileage in Coq. A few months back I cloned a dozen top Coq libraries and grepped for tactic occurrences, and <code>auto</code> was used 40,000 times. In contrast, <code>ring</code> appeared 4,000 times and <code>field</code> 400 times.</p>",
        "id": 238485644,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620830652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> programmable tree-search (in lean4) is on my critical path as well</p>",
        "id": 238485950,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620830746
    },
    {
        "content": "<p>Yeah, these tactics tend to be big workhorses (in Isabelle and ACL2 as well, even compared to Sledgehammer). It'll be interesting to see to what extent they apply to mathlib since the proofs here are less computer sciency. I'm planning to port to Lean 4 as well; I just started in Lean 3 so that I would have a staple API and a big library on which to test the thing.</p>",
        "id": 238487348,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620831240
    },
    {
        "content": "<p>FWIW I wouldn't recommend porting this kind of tactic. There are many new opportunities that could be exploited by a clean-slate design in lean4, thanks to e.g. built-in discrimination trees, better support for environment caching, etc.</p>",
        "id": 238490667,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620832392
    },
    {
        "content": "<p>Interesting. I'll message you privately to avoid derailing the thread further.</p>",
        "id": 238492600,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620833078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/interesting.20tactics.3F/near/238433578\">said</a>:</p>\n<blockquote>\n<p>nlinarith</p>\n</blockquote>\n<p>The original <code>nlinarith</code> was from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , a light wrapper around <code>linarith</code> that did what the Coq <code>nlinarith</code> docs claimed to do. I updated it a bit to do what (I think) Coq's <code>nlinarith</code> actually does. Then had to speed up <code>linarith</code> because some reasonable goals were too slow.</p>",
        "id": 238493970,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1620833544
    },
    {
        "content": "<p>Anothern interesting tactic that I think hasn't been mentioned (and is perhaps underused) is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#solve_by_elim\">tactic#solve_by_elim</a></p>",
        "id": 238556452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620860332
    }
]