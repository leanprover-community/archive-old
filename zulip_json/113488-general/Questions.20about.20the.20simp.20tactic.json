[
    {
        "content": "<p>A couple of questions about the simp tactic</p>\n<p>If I use <code>simp only [band_tt]</code> on an expression that looks like <code>(tt &amp;&amp; tt &amp;&amp; ... n times ... &amp;&amp; tt) || (expression of length m not involving &amp;&amp;)</code> should I expect it to take O(mn) time, or O(m + n) time?</p>\n<p>Will simp do simplifications in the order I specify? For example, on <code>(tt &amp;&amp; tt &amp;&amp; ... n times ... &amp;&amp; tt) &amp;&amp; ff</code>, what is the complexity of  <code>simp only [band_tt, band_ff]</code> versus <code>simp only [band_ff, band_tt]</code>?</p>",
        "id": 238953003,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1621145127
    },
    {
        "content": "<p>The order of the list does not matter.</p>",
        "id": 238953543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621145785
    },
    {
        "content": "<p>I think O(m+n) here, but I've not thought about this much.</p>",
        "id": 238953558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621145829
    },
    {
        "content": "<p>A more practical question: If I have a cycle of simplifications that would cause an infinite loop of rewrites on their own, but there is another simplification which can escape that cycle, is it guaranteed to escape or might it loop infinitely?</p>",
        "id": 238953786,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1621146096
    },
    {
        "content": "<p>it will likely loop</p>",
        "id": 238954223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621146566
    },
    {
        "content": "<p>On the order of lemmas presented to <code>simp</code>. I find that it <em>does</em> matter.</p>\n<p>Here's a simple example. What's curious to me is that the second example succeeds if <code>simp</code> is replaced with <code>simp_rw</code>, while the first would fail with the same replacement. Can any explain how the function of <code>simp</code> depends on the order of the lemmas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>  <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>  <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248846330,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628516060
    },
    {
        "content": "<p>I can't check right now, but if you add <code>set_option trace.simplify.rewrite true</code> before the examples, you should be able to see the precise sequence of rewrites that <code>simp</code> performs in each case.</p>",
        "id": 248846649,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1628516215
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>. I can see what happens in those particular cases now. I'm curious to know if a human reader can determine in advance in what order the lemmas will be applied. It makes a difference as to whether the application will fail or not.</p>\n<p>Is there a 'meta simp' that tries all permutations?</p>",
        "id": 248847127,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628516441
    },
    {
        "content": "<p>This is partially because <code>add_assoc</code> is not a great simp lemma. You can add <code>add_left_comm</code> to both and then  both will work.</p>",
        "id": 248847185,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628516466
    },
    {
        "content": "<p><code>add_assoc</code> can lead to states in the term permutation tree that are terminal and <code>simp</code> can't do anything else about it.</p>",
        "id": 248847269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628516502
    },
    {
        "content": "<p>In general, for ring like things like <code>+, *, /\\, \\/</code>, doing <code>[op_assoc, op_comm, op_left_comm]</code> will be a <code>ring</code>-like simp.</p>",
        "id": 248847550,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628516618
    },
    {
        "content": "<p>Another way of explaining the issue here is I guess that the lemmas which you gave to simp do not form a confluent rewrite system</p>",
        "id": 248853256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628518843
    },
    {
        "content": "<p>Ooh, I think that's the concept I was trying to express. Is there a nice way for a human to determine whether a given set of lemmas do indeed form a confluent rewrite system?</p>",
        "id": 248853949,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628519141
    }
]