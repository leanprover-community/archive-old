[
    {
        "content": "<p>Say I have m : set α → set α and f : filter α. How do I \"map\" m on f?</p>",
        "id": 267127907,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641510590
    },
    {
        "content": "<p>You need some conditions on <code>m</code> to know that any such result is again a filter.</p>",
        "id": 267128026,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641510635
    },
    {
        "content": "<p>I'm not too worried about that since I can use <code>filter.generate</code> to get a filter back.</p>",
        "id": 267128064,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641510664
    },
    {
        "content": "<p>maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map\">docs#filter.map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.comap\">docs#filter.comap</a> are relevant.</p>",
        "id": 267128067,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641510667
    },
    {
        "content": "<p>Unfortunately, <code>map</code> and <code>comap</code> are not going to work.</p>",
        "id": 267128120,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641510717
    },
    {
        "content": "<p>It sounds like you want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">filter.generate</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">''</span> <span class=\"n\">f.sets</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't know if that is a sensible construction though.</p>",
        "id": 267128258,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641510789
    },
    {
        "content": "<p>Remind me what <code>''</code> does.</p>",
        "id": 267128385,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641510852
    },
    {
        "content": "<p>it's the image of a set under a function, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image\">docs#set.image</a></p>",
        "id": 267128441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641510906
    },
    {
        "content": "<p>Ah, that's right. I had forgotten about it. Thanks.</p>",
        "id": 267128491,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641510942
    },
    {
        "content": "<p>I think the bigger question is: what do you want this map of m on f to do, or what properties do you want it do have?</p>",
        "id": 267128988,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641511283
    },
    {
        "content": "<p>Isn't there some Galois connection between sets and filters somewhere?</p>",
        "id": 267129597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641511748
    },
    {
        "content": "<p>sure: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.gi_generate\">docs#filter.gi_generate</a></p>",
        "id": 267130453,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641512388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/filter.20map.20on.20the.20set.20level/near/267128988\">said</a>:</p>\n<blockquote>\n<p>I think the bigger question is: what do you want this map of m on f to do, or what properties do you want it do have?</p>\n</blockquote>\n<p>I have defined the closure <code>cl</code> of a set as an operator of type set X -&gt; set X. I want to build the \"closure\" of a filter by applying <code>cl</code> to each of the sets in the filter.</p>",
        "id": 267130593,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641512493
    }
]