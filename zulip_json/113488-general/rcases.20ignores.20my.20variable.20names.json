[
    {
        "content": "<p>I'm so confused by <code>rcases</code> and the fact that it seems to <em>almost</em> entirely ignore the variable names I suggest.</p>\n<p>Here's my code (sorry for the huge types, but it's what I'm working with):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">val.nil</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">val.nat</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">car</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcar</span>\n<span class=\"bp\">|</span> <span class=\"n\">cdr</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcdr</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">val.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tcdr</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tint</span><span class=\"o\">),</span> <span class=\"n\">fn</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span>\n<span class=\"bp\">|</span> <span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z_case</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_case</span><span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tout</span> <span class=\"n\">trest</span><span class=\"o\">))</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n    <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"n\">trest</span><span class=\"o\">)</span> <span class=\"n\">tout</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">z</span> <span class=\"n\">val.nat</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"bp\">|</span> <span class=\"n\">qux</span> <span class=\"o\">),</span>\n    <span class=\"n\">iterate</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212143069,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601684018
    },
    {
        "content": "<p>If you put it in the editor and look at the end of the line with rcases, what complete baffles me is that only \"bar\" gets used.</p>",
        "id": 212143132,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601684071
    },
    {
        "content": "<p>the <code>car</code> constructor is nearly identical to <code>cdr</code>, so why should <code>bar</code> work, but not <code>foo</code>???</p>",
        "id": 212143162,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601684109
    },
    {
        "content": "<p>normally for a case with 5 arguments to the constructor one would have something like <code>⟨x₁, x₂, x₃, x₄, x₅⟩</code></p>",
        "id": 212144482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601685752
    },
    {
        "content": "<p>rather than a single variable like <code>bar</code>--what is <code>bar</code> meant to represent?</p>",
        "id": 212144511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601685804
    },
    {
        "content": "<p>The fact that I don't know what I'm doing :P</p>",
        "id": 212144521,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601685822
    },
    {
        "content": "<p>in this case it's more complicated because of the inductive family--also note that impossible cases should still have a corresponding <code>_</code> alternative in <code>rcases</code></p>",
        "id": 212144577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601685859
    },
    {
        "content": "<p>I think I kinda figured it out. The problem was I have so many implicit variables and apparently rcases binds names to those even though you don't see them.</p>",
        "id": 212144587,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601685885
    },
    {
        "content": "<p>The other thing that confuses me is that \\&lt;a, b\\&gt; is used to bind variables within a constructor... but \\&lt;\\&gt; (open and close) matches an empty case split? Or something?</p>",
        "id": 212144624,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601685956
    },
    {
        "content": "<p>I'm not sure why <code>rintro \\&lt;\\&gt;</code> works to eliminate an empty type.</p>",
        "id": 212144674,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601685994
    },
    {
        "content": "<p>I think that is kind of a hack to account for the fact that you can't write <code>_ | _ | ... | _</code> with 0 <code>_</code>s</p>",
        "id": 212144678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601686019
    },
    {
        "content": "<p>especially when nested inside another structure</p>",
        "id": 212144681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601686031
    },
    {
        "content": "<p>not with that attitude!</p>",
        "id": 212144690,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601686038
    },
    {
        "content": "<p>yeah I'm not sure if my huge inductive type family is a good idea or not</p>",
        "id": 212144756,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601686094
    },
    {
        "content": "<p>I'm trying to represent primitive recursive functions, which I want to basically always be well-typed so I figured I'd build the typing rules into the function type itself, but maybe that's bad style?</p>",
        "id": 212144780,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601686136
    },
    {
        "content": "<p>is it better to have a separate <code>has_type</code> predicate?</p>",
        "id": 212144798,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601686164
    },
    {
        "content": "<p>yes</p>",
        "id": 212145123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601686541
    },
    {
        "content": "<p>BTW mathlib already has primitive recursive functions, they are defined as an inductive predicate over either <code>nat -&gt; nat</code> or <code>vector nat n -&gt; nat</code></p>",
        "id": 212145205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601686594
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.primrec\">docs#nat.primrec</a></p>",
        "id": 212145219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601686622
    },
    {
        "content": "<p>but it should be possible to make your approach work, since the index type isn't very complicated</p>",
        "id": 212145318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601686750
    },
    {
        "content": "<p>On the topic of primrec... the downside of one big inductive type like that, is that you can't reuse it for other complexity classes. It would be fun to have the <a href=\"https://en.wikipedia.org/wiki/Grzegorczyk_hierarchy\">https://en.wikipedia.org/wiki/Grzegorczyk_hierarchy</a> in mathlib</p>",
        "id": 212152293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601698410
    }
]