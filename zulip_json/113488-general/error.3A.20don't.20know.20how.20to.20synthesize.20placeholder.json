[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">function</span> <span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">envelope</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">envelope</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">constant</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">envelope</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">envelope</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">weakly_adh_restrictive</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">envelope.pure</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"n\">envelope.pure</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When I run this through Lean, it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">86</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>I'm not sure how to fix this. Which placeholder is it talking about?</p>",
        "id": 268467766,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642546443
    },
    {
        "content": "<p>I guess <code>G</code>. Lean can't work out <code>G</code> from what you've given it.</p>",
        "id": 268468022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642546565
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weakly_adh_restrictive</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">envelope.pure</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ℱ.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">envelope.pure</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 268468065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642546602
    },
    {
        "content": "<p>Ah, yeah. That makes sense actually.</p>",
        "id": 268468097,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642546619
    },
    {
        "content": "<p>It can work out <code>X</code> from <code>ℱ</code> but you didn't give it enough clues for <code>G</code>.</p>",
        "id": 268468132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642546638
    },
    {
        "content": "<p>Indeed. Thank you. Hmm... now I need to figure out how many _ to put in the real code when I use <code>@envelope.pure</code>.</p>",
        "id": 268468550,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642546823
    },
    {
        "content": "<p>Maybe I should just change the definition of <code>envelope.pure</code> to take G instead of this hackery.</p>",
        "id": 268468741,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642546912
    }
]