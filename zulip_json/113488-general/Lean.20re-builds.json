[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What criterion does <code>leanpkg</code> use to decide whether a certain file has to be rebuilt or not? I'm caching <code>.olean</code> files on travis and the whole thing gets rebuilt anyway. If I also cache <code>.lean</code> files, then the rebuild is more conservative.</p>",
        "id": 129503329,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531348326
    },
    {
        "content": "<p>It's modification time.</p>",
        "id": 129504063,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531349454
    },
    {
        "content": "<p>It's curious that caching doesn't play well with that.</p>",
        "id": 129504133,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531349546
    },
    {
        "content": "<p>Is the <code>.lean</code> modification time recorded inside the <code>.olean</code> file?</p>",
        "id": 129504141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531349571
    },
    {
        "content": "<p>No, but we also compare the olean modification times with the imports.  So the olean files need to be newer than the lean files and also in the same temporal order as the import order.</p>",
        "id": 129504298,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1531349783
    },
    {
        "content": "<p>Yes, I noticed that. Caching <code>~/.elan</code> became necessary for any <code>.olean</code> files to be reused at all</p>",
        "id": 129506308,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531352828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you know what is up with the latest build failure? <a href=\"https://travis-ci.org/leanprover/mathlib/jobs/404668129\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/mathlib/jobs/404668129\">https://travis-ci.org/leanprover/mathlib/jobs/404668129</a> It seems like <code>travis_long</code> is messing with some kind of change detection</p>",
        "id": 129786566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531790042
    },
    {
        "content": "<p>what might be happening is a sort of race condition: some builds share the same cache  (for example, the builds of the same branch) so it's possible that one build finishes its stage one, uploads its new version of the cache, then the other build does the same and then the first build tries to start its stage two. I have guarded stage two so that it fails when the binaries in the cache were built from a different commit. The only thing to do is to restart the build.</p>",
        "id": 129786753,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531790298
    },
    {
        "content": "<p>One may try to remove that guard but what would happen then is that Travis would try to redo all the work of stage 1 only to fail at the end.</p>",
        "id": 129786773,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531790363
    },
    {
        "content": "<p>I chose to make it fail as quickly as possible</p>",
        "id": 129786777,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531790379
    },
    {
        "content": "<p>That will probably happen at time of high affluence. It's annoying but it should still be better than before. Would it make it better if it sent you an email when it happens?</p>",
        "id": 129787237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531790980
    },
    {
        "content": "<p>I always get an email when it fails</p>",
        "id": 129787294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531791049
    },
    {
        "content": "<p>but I've reset the build a few times and it's still not working</p>",
        "id": 129787309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531791082
    },
    {
        "content": "<p>This email would tell you its a race condition. Nothing you can't check yourself, that's true</p>",
        "id": 129787310,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791086
    },
    {
        "content": "<p>The whole build or only stage two?</p>",
        "id": 129787319,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791100
    },
    {
        "content": "<p>I'm starting to consider it might be worth letting the build restart in stage two when there's a race condition. With the cache, the build time sometimes gets much shorter than 45 minutes; it might just succeed</p>",
        "id": 129787399,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791228
    },
    {
        "content": "<p>Does stage 1 ever use the cache?</p>",
        "id": 129787441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531791253
    },
    {
        "content": "<p>If we give the old oleans to lean and let it sort them out we may gain a big improvement on many commits</p>",
        "id": 129787454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531791292
    },
    {
        "content": "<p>It does. but that doesn't cause significant trouble. The cache contains code and binaries. Stage 1 just discards the code from the cache and ensure the right code from <code>git</code> is used.</p>",
        "id": 129787471,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791328
    },
    {
        "content": "<p>That's actually what has been happening</p>",
        "id": 129787477,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791353
    },
    {
        "content": "<p>Ok, I'll remove the guard. That will be easier to handle.</p>",
        "id": 129787579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791501
    },
    {
        "content": "<p>When stage 2 fails, be sure to restart the whole thing</p>",
        "id": 129787582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531791527
    }
]