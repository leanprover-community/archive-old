[
    {
        "content": "<p>Should there be a <code>leanproject pull</code> that does <code>git pull</code> and <code>leanproject get-mathlib-cache</code>?<br>\nI see people getting confused by changed tomls and lots of breaking code because they use <code>leanproject up</code>.</p>",
        "id": 233615428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617868352
    },
    {
        "content": "<p>What happens if it pulls, but the oleans haven't been uploaded yet?</p>",
        "id": 233615711,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617868529
    },
    {
        "content": "<p>I think that's unlikely to happen. If people only use <code>leanproject up</code> to bump mathlib, and then push. Then others can <code>lp pull</code> to see the results.</p>",
        "id": 233616033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617868793
    },
    {
        "content": "<p>Isn't this what the git hooks that leanproject provides were meant to be for?</p>",
        "id": 233616367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617868939
    },
    {
        "content": "<p>So that <code>git pull</code> gets the cache</p>",
        "id": 233616390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617868961
    },
    {
        "content": "<p>But also so does <code>git checkout some_old_branch_with_an_older_mathlib</code></p>",
        "id": 233616492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617869024
    },
    {
        "content": "<p>I never use <code>leanproject up</code> because I don't really understand what it does. For the liquid project I always do <code>git pull</code>, <code>leanproject get-m</code>, <code>leanproject build</code>.</p>",
        "id": 233618509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617870360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20pull/near/233616367\">said</a>:</p>\n<blockquote>\n<p>Isn't this what the git hooks that leanproject provides were meant to be for?</p>\n</blockquote>\n<p>Probably, but maybe <code>lp pull</code> could still do the same thing?</p>",
        "id": 233618759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617870504
    },
    {
        "content": "<p>I just added a <code>pull</code> command to leanproject because the combination  <code>git pull &amp;&amp; leanproject get-mathlib-cache</code> (or<code>git pull &amp;&amp; leanproject get-cache</code> when working on mathlib) is so common and requires some additional care when upstream bumps mathlib. Please upgrade your <code>leanproject</code> using <code>pip install -U mathlibtools</code> and report any issue.</p>",
        "id": 253863452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1631966470
    },
    {
        "content": "<p>I just tried this on LTE, and it seems to work flawlessly</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lp pull\nPulling from origin\nLooking <span class=\"k\">for</span> lean-liquid oleans <span class=\"k\">for</span> a80e1d714\n  locally...\n  Found <span class=\"nb\">local</span> lean-liquid oleans\nLocated matching cache\nApplying cache\n  files extracted: <span class=\"m\">1721</span> <span class=\"o\">[</span><span class=\"m\">00</span>:07, <span class=\"m\">244</span>.17/s<span class=\"o\">]</span>\n</code></pre></div>",
        "id": 253884521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631988574
    },
    {
        "content": "<p>Works perfectly for me as well.</p>",
        "id": 254007396,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632122367
    },
    {
        "content": "<p>Hmm, I'm having trouble with this in LTE:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean-liquid$ leanproject get-mathlib-cache\nSHA b<span class=\"s1\">'fbc9e5e306b8cd0a8ecccdb759ca09f16c44af86'</span> could not be resolved, git returned: b<span class=\"s1\">'fbc9e5e306b8cd0a8ecccdb759ca09f16c44af86 missing'</span>\n</code></pre></div>",
        "id": 254035888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138217
    },
    {
        "content": "<p>Hmm, I think there's a missing <code>git fetch</code> that I might have removed by accident</p>",
        "id": 254036126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632138348
    },
    {
        "content": "<p>Probably because I thought it made no sense for <code>get-cache</code>. Clearly it makes sense for <code>get-mathlib-cache</code></p>",
        "id": 254036233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632138407
    },
    {
        "content": "<p>Can you run with <code>--debug</code> to get the full traceback?</p>",
        "id": 254036626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632138633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> sorry, I already did a <code>cd _target/deps/mathlib</code> and <code>leanproject get-cache</code>. Now the problem is no longer reproducible.</p>",
        "id": 254036929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138795
    },
    {
        "content": "<p>Probably after another mathlib bump I can post the debug trace.</p>",
        "id": 254036958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This is not the output I am looking for, right?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lp get-mathlib-cache\nLooking <span class=\"k\">for</span> lean-liquid oleans <span class=\"k\">for</span> 6ea816834\n  locally...\n  Found <span class=\"nb\">local</span> lean-liquid oleans\nLocated matching cache\nApplying cache\n  files extracted: <span class=\"m\">1752</span> <span class=\"o\">[</span><span class=\"m\">00</span>:07, <span class=\"m\">235</span>.14/s<span class=\"o\">]</span>\n</code></pre></div>\n<p>I think it did what I intended: extracting 1752 files looks like it was working with mathlib oleans. But the output is talking about <code>lean-liquid</code> oleans. Is that a bug?</p>",
        "id": 254844705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632580753
    },
    {
        "content": "<p>Oh whoops, that's a bug for sure!</p>",
        "id": 254846299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632582140
    },
    {
        "content": "<p>I guess the project name is populated wrongly in get-mathlib-cache</p>",
        "id": 254846326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632582175
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/blob/89426c098138f2c1270f05eca59360354863fd25/mathlibtools/lib.py#L583\">https://github.com/leanprover-community/mathlib-tools/blob/89426c098138f2c1270f05eca59360354863fd25/mathlibtools/lib.py#L583</a> is the wrong line</p>",
        "id": 254846462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632582262
    },
    {
        "content": "<p><code>self.name</code> should be <code>\"mathlib\"</code></p>",
        "id": 254846500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632582310
    },
    {
        "content": "<p>I just had the same error (ping)</p>",
        "id": 257057846,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1633955875
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/pull/119\">https://github.com/leanprover-community/mathlib-tools/pull/119</a> fixes the bug in the message</p>",
        "id": 257058743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633956317
    },
    {
        "content": "<p>CI fails on that PR, but it fails on master too (due to updates to <code>mypy</code>)</p>",
        "id": 257059271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633956581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you know what changed in mypy?</p>",
        "id": 257109205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633981874
    },
    {
        "content": "<p>No idea, it looks like it was already broken in the last commit you pushed. Presumably it just got cleverer and looks for things it didn't look for before</p>",
        "id": 257109307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633981929
    },
    {
        "content": "<p>Too bad, it sounded like you had something precise in mind</p>",
        "id": 257109371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633981973
    },
    {
        "content": "<p>I'll investigate</p>",
        "id": 257109384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633981979
    },
    {
        "content": "<p>I had a quick look; maybe it's an upstream bug in GitPython?</p>",
        "id": 257109448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982026
    },
    {
        "content": "<p><a href=\"https://github.com/gitpython-developers/GitPython/issues/1095\">https://github.com/gitpython-developers/GitPython/issues/1095</a></p>",
        "id": 257109450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982027
    },
    {
        "content": "<p>Previously it had no type information, now it seems to have incomplete ones</p>",
        "id": 257109464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982039
    },
    {
        "content": "<p>A better issue link is <a href=\"https://github.com/gitpython-developers/GitPython/issues/1349\">https://github.com/gitpython-developers/GitPython/issues/1349</a></p>",
        "id": 257109587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982109
    },
    {
        "content": "<p>At any rate, the fix is probably just to tell mypy to be quiet somehow</p>",
        "id": 257109604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982119
    },
    {
        "content": "<p>From the error log:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">git_helpers.py</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"s2\">\"git.Commit\"</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">git_helpers.py</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"s2\">\"git.Commit\"</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">git_helpers.py</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"s2\">\"git.Commit\"</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">git_helpers.py</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"kn\">attribute</span> <span class=\"s2\">\"Commit\"</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">lib.py</span><span class=\"o\">:</span><span class=\"mi\">429</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Incompatible</span> <span class=\"n\">types</span> <span class=\"k\">in</span> <span class=\"n\">assignment</span> <span class=\"o\">(</span><span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span> <span class=\"s2\">\"None\"</span><span class=\"o\">,</span> <span class=\"kd\">variable</span> <span class=\"n\">has</span> <span class=\"n\">type</span> <span class=\"s2\">\"Repo\"</span><span class=\"o\">)</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">lib.py</span><span class=\"o\">:</span><span class=\"mi\">673</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Argument</span> <span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"s2\">\"Path\"</span> <span class=\"n\">has</span> <span class=\"n\">incompatible</span> <span class=\"n\">type</span> <span class=\"s2\">\"Union[str, PathLike[Any], None]\"</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"s2\">\"Union[str, PathLike[str]]\"</span>\n<span class=\"n\">mathlibtools</span><span class=\"bp\">/</span><span class=\"n\">lib.py</span><span class=\"o\">:</span><span class=\"mi\">954</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Unsupported</span> <span class=\"n\">right</span> <span class=\"n\">operand</span> <span class=\"n\">type</span> <span class=\"n\">for</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"s2\">\"Callable[[], IterableList[Head]]\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The first four and the last one are probably a bug in the upstream mypy stubs, the 5th is mypy being annoying because it now knows how to ask what type something is and can't deduce <code>Optional[T]</code> from <code>if x then: y = z else y = None</code>, the 6th looks like a mixture of an actual possible crash in a corner case we don't care about and some <code>str</code>/<code>bytes</code> stupidity, and the last one also looks like a bug</p>",
        "id": 257109998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633982354
    },
    {
        "content": "<p>I can confirm I locally managed to go from zero error to errors with updating GitPython (without updating mypy)</p>",
        "id": 257111833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633983363
    },
    {
        "content": "<p>Maybe we just pin gitpython for now?</p>",
        "id": 257112073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633983546
    },
    {
        "content": "<p>No, I think I can fix things anyway.</p>",
        "id": 257112272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633983701
    },
    {
        "content": "<p>There was one remaining weird failure, I gave up on that one.</p>",
        "id": 257112922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633984090
    }
]