[
    {
        "content": "<p>I just spent the morning messing around with our VS code widget for the first time. I can't really justify spending any more time on this since it's just a toy but I thought I'd share what I have in case someone else fancies picking up where I've left off.</p>",
        "id": 245950382,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626264311
    },
    {
        "content": "<p>The following gist <a href=\"https://gist.github.com/ocfnash/fb61a17d0f1598edcc752999f17b70c6\">https://gist.github.com/ocfnash/fb61a17d0f1598edcc752999f17b70c6</a> (which works against Mathlib master) allows you to create pictures like this:</p>",
        "id": 245950452,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626264351
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/F8fRsG1l66vxsFAs_DWkrzXA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/F8fRsG1l66vxsFAs_DWkrzXA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/F8fRsG1l66vxsFAs_DWkrzXA/image.png\"></a></div>",
        "id": 245950508,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626264365
    },
    {
        "content": "<p>Perhaps some small room for improvement when it comes to styling ;-)</p>",
        "id": 245950541,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626264385
    },
    {
        "content": "<p>Just to emphasise the point: this is Lean reading our Mathlib definition for the Dynkin diagram of E₈ and rendering it.</p>",
        "id": 245950719,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626264508
    },
    {
        "content": "<p>I thought about this when looking at your PR, but thought \"there's no way Oliver will want to spend the time on that\"!</p>",
        "id": 245952422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626265616
    },
    {
        "content": "<p>Is there a way to tell lean \"use this widget view in the goal state\"?</p>",
        "id": 245952575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626265720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Dynkin.20diagrams/near/245952575\">said</a>:</p>\n<blockquote>\n<p>Is there a way to tell lean \"use this widget view in the goal state\"?</p>\n</blockquote>\n<p>Not at the moment.  But the goal state is defined in mathlib, so you can contribute a PR. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245952627,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626265752
    },
    {
        "content": "<p>you can use a custom tactic mode</p>",
        "id": 245953676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626266358
    },
    {
        "content": "<p>Another thing that would be cool would be to somehow take the output of a #html command and insert it into doc-gen - or even allow docstrings to contain such a command which is parsed and executed by doc-gen</p>",
        "id": 245953730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626266395
    },
    {
        "content": "<p>There's a lean4 example that adds a DSL for html, <a href=\"https://github.com/leanprover/lean4/blob/master/tests/playground/webserver/Webserver.lean#L162-L165\">https://github.com/leanprover/lean4/blob/master/tests/playground/webserver/Webserver.lean#L162-L165</a>.</p>\n<p>How hard would it be to write an HTML parser in lean3 meta? I know it's harder than the lean4 approach, and I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser\">docs#lean.parser</a> isn't up to the job, but presumably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser\">docs#parser</a> would be.</p>\n<p>I don't think we can support that syntax in lean3, but something like <code>html!\"&lt;div&gt;${some_var}&lt;/div&gt;\"</code> would be almost as good.</p>",
        "id": 245998857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626286670
    },
    {
        "content": "<p>Oh wow, Lean 4 really is full of treats. I have no idea how hard it would be to do something along the lines of what you suggest in Lean 3.</p>",
        "id": 246024368,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1626298205
    },
    {
        "content": "<p>There is a <code>format!</code> macro in lean 3 that does a simpler version of this</p>",
        "id": 246034499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626305040
    },
    {
        "content": "<p>The <code>format!</code> does parsing character by character using pattern matching, which feels way more painful than a monadic approach using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser\">docs#parser</a></p>",
        "id": 246040231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626310390
    },
    {
        "content": "<p>you sure about that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"bla {baz}\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- meta def foo : format → format :=</span>\n<span class=\"c1\">-- λ (baz : format), id_rhs format (to_fmt \"bla \" ++ to_fmt baz ++ to_fmt \"\")</span>\n</code></pre></div>\n<p>It uses character parsing in order to parse the expression, but the generated code is just string appends</p>",
        "id": 246041221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311616
    },
    {
        "content": "<p>In this case you would be using a <code>format!</code> like macro for the frontend, which uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser\">docs#parser</a> to parse the expression and produces appropriate applications of html constructors</p>",
        "id": 246041275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311700
    },
    {
        "content": "<p><code>format!</code> doesn't need any fancy parsing because it's just looking for uses of <code>{</code></p>",
        "id": 246041294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626311727
    },
    {
        "content": "<p>I think I meant to say what you said. Yes, the parser should be building a pexpr not an html object</p>",
        "id": 246041391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626311882
    },
    {
        "content": "<p>Hello, I ported this to Lean 4 :) The server-side code is <a href=\"https://github.com/Vtec234/lean4/commit/1b07045f1964afe3736817d913d0be4d24b3394f#diff-dff28f769417890811bff74122dbf867344a56b64666612cb176724bb09923df\">here</a> and it looks like <a href=\"/user_uploads/3121/Hs0Tb1JpdvmPUkSU4_1Il5z-/screenshot.png\">this</a>. PR TBD</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Hs0Tb1JpdvmPUkSU4_1Il5z-/screenshot.png\" title=\"this\"><img src=\"/user_uploads/3121/Hs0Tb1JpdvmPUkSU4_1Il5z-/screenshot.png\"></a></div>",
        "id": 257005783,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1633921617
    },
    {
        "content": "<p>Nice work!</p>",
        "id": 257034809,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633943409
    },
    {
        "content": "<p>Do you think we could adapt this to Hasse diagrams (representing orders)?</p>",
        "id": 267379767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641765431
    },
    {
        "content": "<p>It could certainly be done for appropriate values of \"we\".</p>",
        "id": 267418375,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641809402
    },
    {
        "content": "<p>Am I right in saying that drawing a hasse diagrams is essentially just a task of drawing a directed graph from a boolean adjacency matrix?</p>",
        "id": 267418585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641809540
    },
    {
        "content": "<p>In which case, my response would probably be \"just output some stuff for graphviz, because graph layout is hard and probably out of scope\"</p>",
        "id": 267418654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641809595
    },
    {
        "content": "<p>For import graphs we have a super simple implementation of graphviz output at <a href=\"https://github.com/alexjbest/dag-tools/blob/master/src/dag.lean#L39\">https://github.com/alexjbest/dag-tools/blob/master/src/dag.lean#L39</a><br>\nIt would be really really cool if it was possible to load external js in the widget view to render this automatically, but unfortunately this seems quite hard due to various security type features of vscodes web views</p>",
        "id": 267420251,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641810547
    },
    {
        "content": "<p>Outputting stuff for graphviz should work out. Is going through the adjacency relation how the Dynkin stuff works?</p>",
        "id": 267423685,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641812385
    },
    {
        "content": "<p>Sort of but it's pretty hacky. The function <a href=\"https://gist.github.com/ocfnash/fb61a17d0f1598edcc752999f17b70c6#file-render-dynkin-lean-L73\">get_edge_html</a> consumes a pair of natural numbers representing two nodes and returns a list of edges (which in this case is always of length 0 or 1).</p>",
        "id": 267425829,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1641813486
    }
]