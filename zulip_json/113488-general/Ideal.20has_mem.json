[
    {
        "content": "<p>I don't get why <code>test₁</code> type checked but <code>test₂</code> will result in deterministic timeout...?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test₂</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148853358,
        "sender_full_name": "AHan",
        "timestamp": 1543573568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133545\">@AHan</span> What happens if you remove the <code>[comm_ring ...]</code> instance? It should derive it automatically, I hope.</p>",
        "id": 148854580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543575350
    },
    {
        "content": "<p>And also the proof is only one <code>rw</code> long</p>",
        "id": 148854942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543575815
    },
    {
        "content": "<p>If order to find out the relevant lemma, you start by writing <code>ideal.mem_span</code> because you want something about ideals saying something belongs to a span, then you pause to inspect what autocompletions are suggested, and choose the relevant one.</p>",
        "id": 148855036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543575921
    },
    {
        "content": "<p>@AHan if you pasted minimal _working_ examples (i.e. with all the imports needed to run the example) then my life would be slightly easier -- I'd just be able to cut and paste.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">--variables [comm_ring (mv_polynomial ℕ α)]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- this works</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test₂</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- no timeout any more</span>\n</pre></div>",
        "id": 148855180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543576124
    },
    {
        "content": "<p>you second import is probably unnecessary</p>",
        "id": 148855293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576283
    },
    {
        "content": "<p>So your problem is what Johan suggested. If alpha is a field then Lean <em>already knows</em> that the multivariate polynomial ring over alpha is a commutative ring. This fact is already in the \"type class inference system\" because Lean spotted that it was true, and put it there automatically. My <code>example</code> above shows that the fact that the polynomial ring is a commutative ring can be proved using the <code>apply_instance</code> tactic -- which means that Lean already internally has a term of type <code>comm_ring (mv_polynomial ℕ α)</code>. The line you wrote and I commented out makes a second term of that type. Now Lean's type class system works under the assumption that for typeclasses like <code>comm_ring</code>, there should be at most one term of each type, and if Lean has more than one term of a given typeclass then Lean can get confused. I don't know why this leads to a timeout in your case (some of the CS people here would be able to explain it I'm sure) but I can see the rule you broke, and breaking rules like this can lead to all sorts of random problems.</p>",
        "id": 148855406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543576420
    },
    {
        "content": "<p>What is slightly more mysterious is why <code>lemma test₂ (a : mv_polynomial ℕ α) : a ∈ (ideal.span ({a} : set (mv_polynomial ℕ α))) := \nby rw ideal.mem_span_singleton</code> works without any extra step</p>",
        "id": 148855565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576626
    },
    {
        "content": "<p>The trick is <a href=\"https://github.com/leanprover/mathlib/blob/master/algebra/ring.lean#L73\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/algebra/ring.lean#L73\">https://github.com/leanprover/mathlib/blob/master/algebra/ring.lean#L73</a></p>",
        "id": 148855576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576668
    },
    {
        "content": "<p>Although <code>dvd_refl</code> is not definitionaly true, it is marked as <code>refl</code>, and it seems <code>rw</code> tries (all?) such lemmas to close goals</p>",
        "id": 148855635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576734
    },
    {
        "content": "<p>it calls <code>refl</code></p>",
        "id": 148855654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543576794
    },
    {
        "content": "<p>How do you ask lean whether a particular lemma has been marked as <code>refl</code> and, if yes, where? I found the above line using grep</p>",
        "id": 148855734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576877
    },
    {
        "content": "<p>if you print the lemma you can see any attributes</p>",
        "id": 148855777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543576924
    },
    {
        "content": "<p>good</p>",
        "id": 148855782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576936
    },
    {
        "content": "<p>what about finding the line attaching the attribute?</p>",
        "id": 148855789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543576954
    },
    {
        "content": "<p>no luck</p>",
        "id": 148855798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543576972
    },
    {
        "content": "<p>In <code>@[refl, simp, priority 100] theorem dvd_refl</code> what has priority 100?</p>",
        "id": 148855824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543577041
    },
    {
        "content": "<p>priority in which process? simp?</p>",
        "id": 148855903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543577097
    },
    {
        "content": "<p>Oh +1 to that question! I thought priority was just for type classes.</p>",
        "id": 148855990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577234
    },
    {
        "content": "<p>I don't know why that's there. It's only for typeclasses</p>",
        "id": 148855993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543577244
    },
    {
        "content": "<p>oh cool, I'm going back to mathlib and I'm going to give all the lemmas I proved priority 20000</p>",
        "id": 148855997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577271
    },
    {
        "content": "<p>You should give them priority 37. Just to make a point.</p>",
        "id": 148856047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543577331
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> can go code diving to ascertain if this is the case</p>",
        "id": 148856049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543577334
    },
    {
        "content": "<p>is it explicitly set by some line?</p>",
        "id": 148856057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543577354
    },
    {
        "content": "<p>or did lean do it</p>",
        "id": 148856059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543577361
    },
    {
        "content": "<p>When Lean gets sponsored by Coca Cola and the user gets a little Coca Cola ad each time your lemma is used, every dev will want to make sure their lemmas are being used as much as possible.</p>",
        "id": 148856061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577363
    },
    {
        "content": "<p>\"This factorization was brought to you by the refreshing taste of... Coca Cola\"</p>",
        "id": 148856126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543577419
    },
    {
        "content": "<p>If (not when) that day arrives, I'll go back to pen and paper proofs.</p>",
        "id": 148856150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543577481
    },
    {
        "content": "<p>Just install adblock on vscode</p>",
        "id": 148856208,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543577540
    },
    {
        "content": "<p>And waste precious CPU cycles. The real world is so debased. (And pure math is an ivory tower, yes I know.)</p>",
        "id": 148856284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543577647
    },
    {
        "content": "<p>So if you write <code>#print dvd_refl</code> directly after the definition in core Lean in <code>init/algebra/ring.lean</code>, already the priority is 100. If you remove the <code>simp</code> tag then the priority also disappears.</p>",
        "id": 148856305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577713
    },
    {
        "content": "<p>Aah!</p>",
        "id": 148856318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577743
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/master/library/init/algebra/ring.lean#L11\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/algebra/ring.lean#L11\">https://github.com/leanprover/lean/blob/master/library/init/algebra/ring.lean#L11</a></p>",
        "id": 148856373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577795
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/- Make sure instances defined in this file have lower priority than the ones\n   defined for concrete structures -/\n</pre></div>\n\n\n<p>And simp lemmas too :-)</p>",
        "id": 148856392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577863
    },
    {
        "content": "<p>Yeah that's it -- my <code>dvd_refl</code> now has priority 37.</p>",
        "id": 148856457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543577966
    },
    {
        "content": "<p>MWE</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pat</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pat</span>\n</pre></div>",
        "id": 148856531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578120
    },
    {
        "content": "<p>gives <code>@[simp, priority 100] theorem pat : 1 + 1 = 2 := of_as_true trivia</code></p>",
        "id": 148856583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578161
    },
    {
        "content": "<p>Removing the <code>set_option</code> line remove any priority number</p>",
        "id": 148856586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578182
    },
    {
        "content": "<p>Is this a bug in <code>set_option</code> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?</p>",
        "id": 148856595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578195
    },
    {
        "content": "<p>so, does it affect simp?</p>",
        "id": 148856596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543578200
    },
    {
        "content": "<p>Yes!</p>",
        "id": 148856655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">200</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pat</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">37</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">kevin</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 148856671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578331
    },
    {
        "content": "<p>Changing priorities does change which lemma is used, so it's not a bug in <code>set_option</code>, it's an undocumented feature</p>",
        "id": 148856714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578363
    },
    {
        "content": "<p>whoa!</p>",
        "id": 148856727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543578402
    },
    {
        "content": "<p>Or maybe we didn't read the documentation seriously enough</p>",
        "id": 148856729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578418
    },
    {
        "content": "<p>For instance, maybe we didn't read the source code...</p>",
        "id": 148856737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578430
    },
    {
        "content": "<p>Yeah, it's clearly spelled out in line 11386</p>",
        "id": 148856747,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543578463
    },
    {
        "content": "<p>The documentation file <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp</a> mentions priority  all over the place</p>",
        "id": 148856927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543578788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks for the suggestion and explanation!!</p>",
        "id": 148857208,
        "sender_full_name": "AHan",
        "timestamp": 1543579314
    },
    {
        "content": "<p>I still wonder whether <code>set_option default_priority</code> setting both instance and simp priority is intended behavior. It would also be nice to know whether <code>simp</code> would be faster without this mechanism, which seems to be used nowhere</p>",
        "id": 148857259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543579346
    },
    {
        "content": "<blockquote>\n<p>I still wonder whether <code>set_option default_priority</code> setting both instance and simp priority is intended behavior.</p>\n</blockquote>\n<p>The real problem is the <code>priority</code> attribute itself. It doesn't make any sense that it's <code>[simp, priority 1000]</code> instead of something like <code>[simp:1000]</code> in the first place (and when <code>priority</code> is gone, <code>default_priority</code> without any extra qualifier doesn't make much sense either). I doubt this will still be the case in Lean 4.</p>\n<blockquote>\n<p>It would also be nice to know whether <code>simp</code> would be faster without this mechanism, which seems to be used nowhere</p>\n</blockquote>\n<p>I don't think so, it's still using the head-symbol index.</p>",
        "id": 148857918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543580483
    },
    {
        "content": "<p>The printing thing seems easy enough to correct at <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp#L175-L180\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp#L175-L180\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/tactic/simp_lemmas.cpp#L175-L180</a></p>",
        "id": 148857993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543580637
    },
    {
        "content": "<p>but it's very probably not worth the trouble</p>",
        "id": 148858035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543580648
    }
]