[
    {
        "content": "<p>I am curious as to why is the following is not a more common pattern in functional programming languages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FoobarCore</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">FoobarCore</span> <span class=\"bp\">`</span><span class=\"n\">FoobarCore.foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">FoobarCore</span> <span class=\"bp\">`</span><span class=\"n\">FoobarCore.bar</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Foobar</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma</span> <span class=\"n\">FoobarCore</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foobar</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foobar</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">FoobarCore.foo</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Foobar</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">FoobarCore.bar</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">FoobarCore</span> <span class=\"bp\">``</span><span class=\"n\">FoobarCore.foo</span><span class=\"o\">)</span> <span class=\"n\">Foobar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">FoobarCore</span> <span class=\"bp\">``</span><span class=\"n\">FoobarCore.bar</span><span class=\"o\">)</span> <span class=\"n\">Foobar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"n\">Foobar</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">FoobarCore</span> <span class=\"n\">n.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foobar</span>\n</code></pre></div>\n<p>(or a similar variant where <code>tag</code> is a <code>Nat</code> or <code>Fin</code>)</p>\n<p><code>FoobarCore</code> could be represented as a untagged union and <code>Foobar</code> as its tagged version while still keeping both type safe.  This would also (I believe) more easily enable constructing subtypes of the union type.</p>",
        "id": 254470604,
        "sender_full_name": "Mac",
        "timestamp": 1632363950
    },
    {
        "content": "<p>In Haskell (and I guess most other functional programming languages) types can only depend on things that aren't computationally relevant, usually other types. So <code>FoobarCore</code> has to be implemented as a tagged union because a function that matches on it learns about <code>tag</code>, which is in some sense already an argument of the function but not one that is accessible at runtime.</p>",
        "id": 254520793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632397445
    }
]