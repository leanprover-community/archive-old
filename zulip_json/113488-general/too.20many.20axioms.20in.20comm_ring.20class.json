[
    {
        "content": "<p>I have to put a ring structure on a slightly complicated type (a subtype, consisting of functions with some properties). Every verification is going to be quite messy -- even defining zero and one will take some effort. So I really want to minimise the amount of stuff I want to prove. I am sure that Lean is asking me to do too much by default -- for example it wants a proof of add_comm, add_zero and zero_add, and the same story with multiplication and one. Of course I can deduce zero_add from add_zero once I've proved add_comm but in some sense I'm wondering why I am even being asked to do this, because this is true for every commutative ring. Is there a way of \"fixing\" this?</p>",
        "id": 123389686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520412917
    },
    {
        "content": "<p>The usual solution is to write a variant on <code>mk</code> that asserts only the properties you want to prove and proves the rest. This can be done generally for <code>comm_ring</code>, to provide several interfaces depending on which axioms you want.</p>",
        "id": 123389751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413062
    },
    {
        "content": "<p>Warning: you can get into trouble if you do this for data fields, like we've discussed about deriving a topology from a metric</p>",
        "id": 123389795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413121
    },
    {
        "content": "<p>Aah I see. So there's an argument for <code>comm_ring.mk'</code> which takes what I need and builds the rest. I remember seeing this in the construction of the rationals -- I think there are about 4 constructors in the end.</p>",
        "id": 123389808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413168
    },
    {
        "content": "<p>Re: data fields. Once you have one and neg you can define zero ;-) so perhaps I should be careful here.</p>",
        "id": 123389869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413243
    },
    {
        "content": "<p>If you want to derive zero or something else, one option is to have it be an optional argument, so that the user can still set up their desired choice of defeq equivalence class here</p>",
        "id": 123389984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413449
    },
    {
        "content": "<p>that's what many structures do by default</p>",
        "id": 123389986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413465
    },
    {
        "content": "<p>Oh, something annoying has happened.</p>",
        "id": 123389991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    Fring := λ U OU,{\n      add := _,\n      zero := _,\n      add_comm := _,\n      add_assoc := _,\n      one := _,\n      zero_add := _,\n      neg := _,\n      add_left_neg := _,\n      mul := _,\n      mul_assoc := _,\n      add_zero := _,\n      one_mul := _,\n      mul_one := _,\n      left_distrib := _,\n      right_distrib := _,\n      mul_comm := _\n    },\n</pre></div>",
        "id": 123390000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413511
    },
    {
        "content": "<p>There's my set-up (I'm not going to do mk' right now, I'm going to prove it's a ring and see what happens)</p>",
        "id": 123390004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413526
    },
    {
        "content": "<p>and I was expecting red underlines on all the _s</p>",
        "id": 123390010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413537
    },
    {
        "content": "<p>but I only have one under add_assoc</p>",
        "id": 123390012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413541
    },
    {
        "content": "<p>I mean on the _ of add_assoc</p>",
        "id": 123390015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413555
    },
    {
        "content": "<p>Am I expected to remember that addition takes two inputs? I thought Lean was going to tell me that.</p>",
        "id": 123390058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413591
    },
    {
        "content": "<p>Hm, I can probably explain why add_assoc specifically, but it's not all that relevant. They are all actually required, but lean won't be able to even contemplate the later stuff until you finish the early stuff</p>",
        "id": 123390070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413636
    },
    {
        "content": "<p>add_assoc is telling me I have a type mismatch!</p>",
        "id": 123390082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413667
    },
    {
        "content": "<p>with what?</p>",
        "id": 123390085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413676
    },
    {
        "content": "<p>Wooah -- maybe type class inference is randomly doing stuff? How do I check that?</p>",
        "id": 123390126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413690
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at field &#39;add_assoc&#39;\n  ?m_1\nhas type\n  ∀\n  (a b c :\n    (λ (U : set (X R))\n     (HU :\n       (λ (X_1 : set (X R)),\n          set.mem (lattice.complete_boolean_algebra.neg X_1) {A : set (X R) | ∃ (E : set R), Spec.V E = A})\n         U),\n       {f // ∀ (u : X R),\n          U u →\n          (∃ (g : R),\n             set.mem u (Spec.D&#39; g) ∧\n               set.subset (Spec.D&#39; g) U ∧\n                 ∃ (r : localization.away g),\n                   ∀ (Q : X R) (HQQ : set.mem Q U) (H2 : set.mem Q (Spec.D&#39; g)), f Q HQQ = canonical_map g Q H2 r)})\n      U\n      OU), ?m_1 (?m_1 a b) c = ?m_1 a (?m_1 b c)\nbut is expected to have type\n  ∀\n  (a b c :\n    (λ (U : set (X R)) (HU : (λ (X_1 : set (X R)), -X_1 ∈ {A : set (X R) | ∃ (E : set R), Spec.V E = A}) U),\n       {f // ∀ (u : X R),\n          U u →\n          (∃ (g : R),\n             u ∈ Spec.D&#39; g ∧\n               Spec.D&#39; g ⊆ U ∧\n                 ∃ (r : localization.away g),\n                   ∀ (Q : X R) (HQQ : Q ∈ U) (H2 : Q ∈ Spec.D&#39; g), f Q HQQ = canonical_map g Q H2 r)})\n      U\n      OU), a + b + c = a + (b + c)\n</pre></div>",
        "id": 123390130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413708
    },
    {
        "content": "<p>So far I wrote nothing.</p>",
        "id": 123390131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413714
    },
    {
        "content": "<p>what's all that about localizations? What's the theorem?</p>",
        "id": 123390144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413749
    },
    {
        "content": "<p>What does that add even mean on the bottom line?</p>",
        "id": 123390145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413750
    },
    {
        "content": "<p>The ?m_1 presumably means \"you didn't tell me what add meant yet\"</p>",
        "id": 123390151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413770
    },
    {
        "content": "<p>it's <code>@has_add.add &lt;your type&gt; ?m_1 a b</code></p>",
        "id": 123390153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413772
    },
    {
        "content": "<p>which prints as <code>a + b</code></p>",
        "id": 123390154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413781
    },
    {
        "content": "<p>Oh I see it's just some pretty printer cuteness</p>",
        "id": 123390158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413790
    },
    {
        "content": "<p>I told you my objects were complicated ;-)</p>",
        "id": 123390208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413822
    },
    {
        "content": "<p>this is probably some artifact of structure <code>notation</code> command</p>",
        "id": 123390210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413829
    },
    {
        "content": "<p>are you familiar with making defs for things?</p>",
        "id": 123390213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413841
    },
    {
        "content": "<p>I have heard of <code>definition</code></p>",
        "id": 123390216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413851
    },
    {
        "content": "<p>if that's what you mean</p>",
        "id": 123390223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413867
    },
    {
        "content": "<p>I'm trying to understand why your goal is a mile long before you start the proof</p>",
        "id": 123390231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413894
    },
    {
        "content": "<p>In brief, my objects are functions which are well-behaved locally</p>",
        "id": 123390234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413902
    },
    {
        "content": "<p>you left out the statement of the theorem above</p>",
        "id": 123390236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413909
    },
    {
        "content": "<p>I am defining a ring structure</p>",
        "id": 123390241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413922
    },
    {
        "content": "<p>on a complex type</p>",
        "id": 123390276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413925
    },
    {
        "content": "<p>on what?</p>",
        "id": 123390279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413927
    },
    {
        "content": "<p>give the type a name</p>",
        "id": 123390288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413935
    },
    {
        "content": "<p>It's a subtype of a pi type</p>",
        "id": 123390289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413941
    },
    {
        "content": "<p>Here's a toy example</p>",
        "id": 123390297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413950
    },
    {
        "content": "<p>do not prove an instance for a messy type</p>",
        "id": 123390299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413962
    },
    {
        "content": "<p>I want to consider functions on a topological space which are \"locally well-behaved\"</p>",
        "id": 123390301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413966
    },
    {
        "content": "<p>it will make typeclass inference cry</p>",
        "id": 123390303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413972
    },
    {
        "content": "<p>I am not using type class inference at all</p>",
        "id": 123390305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413981
    },
    {
        "content": "<p>I gave up on it</p>",
        "id": 123390311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413986
    },
    {
        "content": "<p>I'm not talking about the mathematical specifics of the type</p>",
        "id": 123390313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520413989
    },
    {
        "content": "<p>I don't need it</p>",
        "id": 123390314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520413990
    },
    {
        "content": "<p>I don't understand what you are asking but I am certainly interested in what you are thinking</p>",
        "id": 123390320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414005
    },
    {
        "content": "<p>what's the theorem? like paste the statement here</p>",
        "id": 123390321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414023
    },
    {
        "content": "<p>There is no theorem</p>",
        "id": 123390323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414030
    },
    {
        "content": "<p>I don't know why you keep asking this</p>",
        "id": 123390324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414034
    },
    {
        "content": "<p>I am trying to put a ring structure on a type</p>",
        "id": 123390326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414039
    },
    {
        "content": "<p>I am making a 1000 line definition</p>",
        "id": 123390368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414052
    },
    {
        "content": "<p>yes that</p>",
        "id": 123390369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414052
    },
    {
        "content": "<p>instance, def, theorem, it's all the same</p>",
        "id": 123390372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414061
    },
    {
        "content": "<p>:-)</p>",
        "id": 123390373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414064
    },
    {
        "content": "<p>My type is a subtype of a pi type</p>",
        "id": 123390376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414077
    },
    {
        "content": "<p>and the details involve a lot of commutative algebra</p>",
        "id": 123390390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414106
    },
    {
        "content": "<p>what exactly do you want to know about it?</p>",
        "id": 123390398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414124
    },
    {
        "content": "<p>and I have a convoluted way of adding and multiplying two such things</p>",
        "id": 123390403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414154
    },
    {
        "content": "<p>Okay, toy example:</p>\n<div class=\"codehilite\"><pre><span></span>instance : ring {x // ∀ y, x is more awesome than y} :=\nsorry\n</pre></div>\n\n\n<p>bad</p>\n<div class=\"codehilite\"><pre><span></span>def awesome_sauce := {x // ∀ y, x is more awesome than y}\ninstance : ring awesome_sauce :=\nsorry\n</pre></div>\n\n\n<p>good</p>",
        "id": 123390451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414192
    },
    {
        "content": "<p>whatever is the difference?</p>",
        "id": 123390471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414251
    },
    {
        "content": "<p>I am getting the sense you typed some big term after <code>ring</code></p>",
        "id": 123390472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition structure_presheaf_of_rings_on_affine_scheme (R : Type*) [comm_ring R]\n: presheaf_of_rings (X R)\n:= { PT := structure_presheaf_of_types_on_affine_scheme R,\n    Fring := λ U OU,{\n      add := _,\n      zero := _,\n      add_comm := _,\n      add_assoc := _,\n      one := _,\n      zero_add := _,\n      neg := _,\n      add_left_neg := _,\n      mul := _,\n      mul_assoc := _,\n      add_zero := _,\n      one_mul := _,\n      mul_one := _,\n      left_distrib := _,\n      right_distrib := _,\n      mul_comm := _\n    },\n    res_is_ring_morphism := sorry,\n}\n</pre></div>",
        "id": 123390473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414280
    },
    {
        "content": "<p>I typed that</p>",
        "id": 123390509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414283
    },
    {
        "content": "<p>I am right in the middle of a complex mathematical object</p>",
        "id": 123390515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414299
    },
    {
        "content": "<p>and your simple example is too simple for me to currently make sense of</p>",
        "id": 123390520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414316
    },
    {
        "content": "<p>In that case, you should probably define that <code>Fring</code> field in its own lemma</p>",
        "id": 123390526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414325
    },
    {
        "content": "<p>Why does this make any difference?</p>",
        "id": 123390531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414340
    },
    {
        "content": "<p>But of course I will do this now you tell me to</p>",
        "id": 123390538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414347
    },
    {
        "content": "<p>My sense is that typeclass inference generally does poorly with inferring typeclasses on complicated things</p>",
        "id": 123390549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414384
    },
    {
        "content": "<p>it needs to know when not to unfold</p>",
        "id": 123390553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414400
    },
    {
        "content": "<p>and definitions are the best way to indicate this</p>",
        "id": 123390597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414410
    },
    {
        "content": "<p>I am not ever using typeclass inference</p>",
        "id": 123390599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414413
    },
    {
        "content": "<p>it causes me too much trouble</p>",
        "id": 123390602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414420
    },
    {
        "content": "<p>you are, <em>inside the structure instance itself</em></p>",
        "id": 123390604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414428
    },
    {
        "content": "<p>?</p>",
        "id": 123390607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414432
    },
    {
        "content": "<p>because it's actually proven in stages, a semigroup plus some more stuff to make it a monoid, group, ring, then comm_ring</p>",
        "id": 123390616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414460
    },
    {
        "content": "<p>this I knew</p>",
        "id": 123390629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414468
    },
    {
        "content": "<p>But is this really typeclass inference?</p>",
        "id": 123390639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414504
    },
    {
        "content": "<p>and after the initial stages, it uses the semigroup instance to find the <code>+</code> which is used in later proofs</p>",
        "id": 123390641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414513
    },
    {
        "content": "<p>It's not just \"comm_ring extends ring so let's just copy the fields\"?</p>",
        "id": 123390643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414520
    },
    {
        "content": "<p>Actually, that depends on whether it is using the old or new structure command</p>",
        "id": 123390686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414549
    },
    {
        "content": "<p>:-)</p>",
        "id": 123390688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414554
    },
    {
        "content": "<p>I am using the default structure command</p>",
        "id": 123390690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414564
    },
    {
        "content": "<p>It looks like we don't do error recovery after that field type mismatch error. I could change that, but a smaller example would be nice :) .</p>",
        "id": 123390692,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520414571
    },
    {
        "content": "<p>I feel like the definition of a ring is extremely small compared to the monster I am creating.</p>",
        "id": 123390699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414612
    },
    {
        "content": "<p>Eh, I guess it shouldn't be hard to construct one by myself</p>",
        "id": 123390703,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520414628
    },
    {
        "content": "<p>This is not a big deal at this point</p>",
        "id": 123390747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414652
    },
    {
        "content": "<p>Even if it doesn't make a difference, I would recommend making this a definition and proving in stages simply for proof engineering reasons</p>",
        "id": 123390748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414655
    },
    {
        "content": "<p>I see.</p>",
        "id": 123390750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414662
    },
    {
        "content": "<p>you should try to keep your goal size down to something human readable</p>",
        "id": 123390752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414681
    },
    {
        "content": "<p>I thought I'd fix things up with <code>add_assoc := sorry</code> for the time being</p>",
        "id": 123390767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414742
    },
    {
        "content": "<p>I got</p>",
        "id": 123390770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414755
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at field &#39;add_assoc&#39;\n  sorry\nhas type\n  ∀\n  (a b c :\n    (λ (U : set (X R))\n     (HU :\n       (λ (X_1 : set (X R)),\n          set.mem (lattice.complete_boolean_algebra.neg X_1) {A : set (X R) | ∃ (E : set R), Spec.V E = A})\n         U),\n...\n</pre></div>",
        "id": 123390781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414762
    },
    {
        "content": "<p>Wasn't expecting that!</p>",
        "id": 123390811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414766
    },
    {
        "content": "<p>did you sorry the <code>add</code> field first?</p>",
        "id": 123390821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414784
    },
    {
        "content": "<p>that fixes it</p>",
        "id": 123390824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414796
    },
    {
        "content": "<p>Ok so here's a question</p>",
        "id": 123390832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414820
    },
    {
        "content": "<p>First I have a red line under add_assoc.</p>",
        "id": 123390838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414828
    },
    {
        "content": "<p>I can't fix it with a sorry</p>",
        "id": 123390840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414833
    },
    {
        "content": "<p>I sorry the add and this fixes both.</p>",
        "id": 123390841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414840
    },
    {
        "content": "<p>Q) Where does the new red line appear?</p>",
        "id": 123390842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414844
    },
    {
        "content": "<p>And how do I fix it?</p>",
        "id": 123390844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414848
    },
    {
        "content": "<p>A) zero_add</p>",
        "id": 123390846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414853
    },
    {
        "content": "<p>I can fix it by sorrying the zero and zero_add.</p>",
        "id": 123390847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414862
    },
    {
        "content": "<p>Now I have a type mismatch at add_left_neg</p>",
        "id": 123390849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414877
    },
    {
        "content": "<p>I love the randomness of it all</p>",
        "id": 123390890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414889
    },
    {
        "content": "<p>it's whack a mole, I know</p>",
        "id": 123390891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414891
    },
    {
        "content": "<p>Here's how you can derive the answer: First, find the first nested structure that is not complete</p>",
        "id": 123390898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414934
    },
    {
        "content": "<p>so in the original case, that's <code>semigroup</code></p>",
        "id": 123390904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414946
    },
    {
        "content": "<p>next, find all fields that have nothing dependent on them</p>",
        "id": 123390909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414969
    },
    {
        "content": "<p>ha ha, I sorried all the data fields and now I have <code>don't know how to synthesize placeholder</code> on every other field apart from add_left_neg. ???</p>",
        "id": 123390913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520414974
    },
    {
        "content": "<p>so in this case <code>add_assoc</code> because <code>add</code> has <code>add_assoc</code> depending on it</p>",
        "id": 123390916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520414987
    },
    {
        "content": "<p>when you sorry it out, it is considered complete and you get the next error, because of the error recovery issue Sebastian mentioned</p>",
        "id": 123390967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415046
    },
    {
        "content": "<p>I have a grant deadline for Friday, I'd better go to work. Thanks for the comments. I will move the ring structure to a definition. Do I need to annotate the definition with reducible or irreducible or whatever?</p>",
        "id": 123390980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415091
    },
    {
        "content": "<p>But if you sorry <code>add_assoc</code> without <code>add</code>, then I think the sorry macro gets into trouble because the type it needs to be has a metavariable in it</p>",
        "id": 123390981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415098
    },
    {
        "content": "<p>no, the regular reducibility is fine</p>",
        "id": 123390986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415121
    },
    {
        "content": "<p>I think I deserve another achievement for making sorry fail to find its own type</p>",
        "id": 123391025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415132
    },
    {
        "content": "<p>Thanks to Kenny's hard work on localisation lemmas we nearly have schemes, although not in a way Assia would approve of, as when I have defined this ring structure we will have a definition but no way of constructing examples :-)</p>",
        "id": 123391044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415212
    },
    {
        "content": "<p>I will then need to prove one more theorem and then we can have examples</p>",
        "id": 123391045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415230
    },
    {
        "content": "<p>what's the most trivial scheme?</p>",
        "id": 123391085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415247
    },
    {
        "content": "<p>Mario -- you always said that the test case for you was whether one could prove any lemmas about the object</p>",
        "id": 123391087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415252
    },
    {
        "content": "<p>is a ring a scheme over itself?</p>",
        "id": 123391088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415261
    },
    {
        "content": "<p>but I will work on Assia's comments first -- she wants to see examples first.</p>",
        "id": 123391091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415274
    },
    {
        "content": "<p>The spectrum of a ring is an affine scheme</p>",
        "id": 123391094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415284
    },
    {
        "content": "<p>and an affine scheme is a scheme</p>",
        "id": 123391096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415290
    },
    {
        "content": "<p>voila</p>",
        "id": 123391099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415297
    },
    {
        "content": "<p>do that</p>",
        "id": 123391100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415300
    },
    {
        "content": "<p>but I will be able to define a scheme correctly in Lean</p>",
        "id": 123391108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415317
    },
    {
        "content": "<p>without ever proving that an affine scheme is a scheme</p>",
        "id": 123391110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415322
    },
    {
        "content": "<p>because a scheme is an object with property X that looks locally like an affine scheme</p>",
        "id": 123391111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415341
    },
    {
        "content": "<p>and I did not prove that affine schemes have property X yet</p>",
        "id": 123391114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415354
    },
    {
        "content": "<p>but one can formulate \"I look locally like an affine scheme\" without mentioning X</p>",
        "id": 123391155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415370
    },
    {
        "content": "<p>so first I want the definition of a scheme</p>",
        "id": 123391159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415389
    },
    {
        "content": "<p>and then I need to prove one more theorem</p>",
        "id": 123391160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415395
    },
    {
        "content": "<p>I think you are not ready for assia's criterion yet</p>",
        "id": 123391165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415425
    },
    {
        "content": "<p>Thanks for the definition comments.</p>",
        "id": 123391170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415453
    },
    {
        "content": "<p>she talked about examples in situations where you already have the fundamental theorem of mystuffoids</p>",
        "id": 123391171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415455
    },
    {
        "content": "<p>you are still in the definition crafting stage</p>",
        "id": 123391176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415478
    },
    {
        "content": "<p>This is a fundamental issue</p>",
        "id": 123391177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415478
    },
    {
        "content": "<p>which goes beyond Lean</p>",
        "id": 123391214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415483
    },
    {
        "content": "<p>It's something I have found when lecturing</p>",
        "id": 123391220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415487
    },
    {
        "content": "<p>You introduce a new concept in a lecture</p>",
        "id": 123391222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415497
    },
    {
        "content": "<p>typically a new structure</p>",
        "id": 123391224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415501
    },
    {
        "content": "<p>and then you want to do two things simultaneously:</p>",
        "id": 123391226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415511
    },
    {
        "content": "<p>(1) give basic examples</p>",
        "id": 123391227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415514
    },
    {
        "content": "<p>(2) prove basic lemmas (e.g. subsets, quotients,  products, whatever)</p>",
        "id": 123391232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415531
    },
    {
        "content": "<p>(consequences of axioms)</p>",
        "id": 123391237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415544
    },
    {
        "content": "<p>and whenever I do this in a lecture I never know whether to do (1) or (2) first</p>",
        "id": 123391241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415556
    },
    {
        "content": "<p>because they are independent and both very important</p>",
        "id": 123391242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415565
    },
    {
        "content": "<p>they are both important, of course. They are even closely related since (1) is basically stuff that implies X and (2) is stuff implied by X</p>",
        "id": 123391245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415587
    },
    {
        "content": "<p>They are both \"the first thing you should do after you defined the concept\"</p>",
        "id": 123391246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415600
    },
    {
        "content": "<p>Still, I should concentrate on defining the concept first. Cheers!</p>",
        "id": 123391288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415615
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 123391290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520415630
    },
    {
        "content": "<p>Current state of things at <a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/scheme.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/scheme.lean\">https://github.com/kbuzzard/lean-stacks-project/blob/master/src/scheme.lean</a></p>",
        "id": 123391305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415694
    },
    {
        "content": "<p>probably lines 268 - 305 should be moved into a definition, if my understanding of what you're saying is correct. OK I really am gone now.</p>",
        "id": 123391348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520415771
    },
    {
        "content": "<p>dammit I refactored into a definition and then started with <code>  add := λ f₁ f₂, ⟨_,_⟩,</code> and got an assertion violation. I am going to roll back a bit I think. Does anyone have any advice as to which version to pick?</p>",
        "id": 123392619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418478
    },
    {
        "content": "<p>when I get an assertion violation in the middle of writing something, I try to finish writing it and see if it's okay once it is once again well-formed</p>",
        "id": 123392672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520418586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"k.buzzard@imperial.ac.uk\" data-user-id=\"110038\">@Kevin Buzzard</span>  I think a simpler solution for you would be to first start defining the operations, i.e. <code>instance : has_add (Fring)</code>, ... do this for all the data. Then you see at least that this works. Then you proof stat it is a monoid, a group, a semiring etc. this allows you to have a clear overview what's happening.</p>",
        "id": 123392781,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1520418731
    },
    {
        "content": "<p>In maths we care about refactoring to a far lesser degree.</p>",
        "id": 123392795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418773
    },
    {
        "content": "<p>I've seen lecturers write a proof and then in the middle stop and say \"oh, hmm, Ok we will need this:\" and then write \"sublemma : ...\" and just insert something in the middle, and then press on.</p>",
        "id": 123392803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418804
    },
    {
        "content": "<p>Either that or just splurge through everything.</p>",
        "id": 123392808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418819
    },
    {
        "content": "<p>And then we get \"and as we see from the proof of Theorem B, X -&gt; Y\" later on</p>",
        "id": 123392856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418852
    },
    {
        "content": "<p>and everyone is fine with this</p>",
        "id": 123392859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418859
    },
    {
        "content": "<p>PS I am not using instances at all. I wanted to completely avoid type class inference and also any coercions as much as possible, so I had a tight control over what was going on.</p>",
        "id": 123392877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520418904
    },
    {
        "content": "<p>Oh this is a really nice way of doing it. Thanks. My definitions are getting smaller and smaller, apparently this is what I should be aiming at.</p>",
        "id": 123393347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520419895
    },
    {
        "content": "<blockquote>\n<p>I've seen lecturers write a proof and then in the middle stop and say \"oh, hmm, Ok we will need this:\" and then write \"sublemma : ...\" and just insert something in the middle, and then press on.</p>\n</blockquote>\n<p>You should view this as analogous to writing a proof, then in the middle editing the statement, and returning to the proof. The fact that lectures are limited to a linear format is simply because of practical concerns of blackboard presentation, but we often think about things out of order like this. A lean script should not reflect these amendations themselves, so that at the end everything fits together.</p>",
        "id": 123393512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520420187
    },
    {
        "content": "<p>I added some of these comments to <a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md</a></p>",
        "id": 123393622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420441
    },
    {
        "content": "<p>Are you interested in a PR Mario? A lot of those WIPs are (a) works in progress and (b) already helpful for me in their current form.</p>",
        "id": 123393634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420469
    },
    {
        "content": "<p>I am just letting them grow organically at this point rather than trying to tidy them.</p>",
        "id": 123393638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420486
    },
    {
        "content": "<p>The advantage of a PR is that they become more visible to people. The disadvantage is that they become your problem.</p>",
        "id": 123393643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420505
    },
    {
        "content": "<p>I am happy either way; a lot depends on how seriously you take that docs directory.</p>",
        "id": 123393645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420521
    },
    {
        "content": "<p>My workflow now is much better now we're at zulip. If I have time I update my local docs. If I don't then I just star the messages and come back later.</p>",
        "id": 123393687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420564
    },
    {
        "content": "<p>I'm talking about when people give me good advice which I would like to keep track of.</p>",
        "id": 123393693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520420585
    },
    {
        "content": "<p>o_O</p>",
        "id": 123394051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421315
    },
    {
        "content": "<p>how clean is this:</p>",
        "id": 123394054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421318
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition structure_presheaf_value_is_comm_ring {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U)\n: comm_ring (structure_presheaf_value U HU)\n:= {\n  add := (structure_presheaf_value_has_add U HU).add,\n  mul := (structure_presheaf_value_has_mul U HU).mul,\n  zero := (structure_presheaf_value_has_zero U HU).zero,\n  one := (structure_presheaf_value_has_one U HU).one,\n  add_comm := by simp,\n  zero_add := by simp,\n  add_zero := by simp,\n  neg := (structure_presheaf_value_has_neg U HU).neg,\n  add_left_neg := by simp,\n  add_assoc := by simp,\n  mul_assoc := by simp [mul_assoc],\n  one_mul := by simp,\n  mul_one := by simp,\n  left_distrib := by simp [left_distrib],\n  right_distrib := by simp [right_distrib],\n  mul_comm := by simp [mul_comm]\n}\n</pre></div>",
        "id": 123394057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421323
    },
    {
        "content": "<p>:-)</p>",
        "id": 123394059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421343
    },
    {
        "content": "<p>My original proofs were worse</p>",
        "id": 123394101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421408
    },
    {
        "content": "<p>but because I wrote <a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/simp.md</a></p>",
        "id": 123394112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421433
    },
    {
        "content": "<p>I remembered the \"how to use simp better\" thing -- i.e \"if your proof looks like <code>funext (λ f,subtype.eq (funext (λ P,by simp)))</code></p>",
        "id": 123394122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421480
    },
    {
        "content": "<p>then you might want to consider being more optimistic with when exactly you use simp\"</p>",
        "id": 123394161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520421491
    },
    {
        "content": "<p>Why is there the messy thing with <code>(structure_presheaf_value_has_add U HU).add</code>? As it is currently, there should be no difficulty making this thing an instance, and then it will pick those fields up automatically</p>",
        "id": 123394226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520421698
    },
    {
        "content": "<p>even if you can't make them instances, you can use <code>..structure_presheaf_value_has_add U HU</code> etc to add the operations</p>",
        "id": 123394345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520421855
    },
    {
        "content": "<p>Re: PRs, I'm okay with docs of any kind. My recommendation is to try to write them with an authoritative locution style; I will let you know if you say false things. If you don't know something, leave it out, say you don't know in the doc, or ask about it here and then put in whatever you find out.</p>",
        "id": 123394770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520422639
    },
    {
        "content": "<p>Messy thing: I am not concerned with such issues at the minute. I am completely avoiding instances simply because writing all this code is taking my Lean understanding to a new level and I realised that I did not trust myself to do all the clever things instances could do for me, and I would occasionally have problems with instances, so I decided to never use them just to see what like would be like without them. The advantage of doing it my way is that I can take one look and understand what is happening. I am still a learner.</p>",
        "id": 123395558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520424433
    },
    {
        "content": "<p>I am always muddled about this .. thing. I forget the syntax, I never know whether it has to go at the beginning or the end or whether it doesn't matter, just stupid things which people your age only need to be told once but people my age need to have a reference for and basic examples of. I don't have the time right now to fart around with .. trying to make it work and as you can see from <a href=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md\">https://github.com/kbuzzard/mathlib/blob/master/docs/WIPs/structures.md</a> I have also not found the time to figure it out once and for all and then document it. I am afraid I need docs to work efficiently, and if stuff isn't documented properly then I shy away from it.</p>",
        "id": 123395617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520424597
    },
    {
        "content": "<p>Instead of declaring <code>mk'</code>s, the algebraic hierarchy could be amended with superclass defaults like</p>\n<div class=\"codehilite\"><pre><span></span>class add_comm_monoid (α : Type u) extends add_monoid α, add_comm_semigroup α :=\n(add_zero := by simp [add_comm, zero_add])\n</pre></div>",
        "id": 123396002,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520425241
    },
    {
        "content": "<p>that doesn't actually work right now tho</p>",
        "id": 123396500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520426120
    },
    {
        "content": "<p>It doesn't?</p>",
        "id": 123396588,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520426289
    },
    {
        "content": "<p>nvm, I misread what you are doing there</p>",
        "id": 123397155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520427500
    },
    {
        "content": "<blockquote>\n<p>Why is there the messy thing with <code>(structure_presheaf_value_has_add U HU).add</code>? As it is currently, there should be no difficulty making this thing an instance, and then it will pick those fields up automatically</p>\n</blockquote>\n<p>My co-author got their hands on it and now it looks like this:</p>",
        "id": 123402113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520436666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition structure_presheaf_value_is_comm_ring {R : Type*} [comm_ring R] (U : set (X R)) (HU : is_open U)\n: comm_ring (structure_presheaf_value U HU) :=\nby refine {\n  add := (+),\n  zero := 0,\n  neg := ((structure_presheaf_value_has_neg U HU).neg),\n  mul := (*),\n  one := 1,\n  .. };\n{simp [mul_assoc, left_distrib, right_distrib]} &lt;|&gt; simp [mul_comm]\n</pre></div>",
        "id": 123402117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520436677
    },
    {
        "content": "<p>I really like <span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span>’s suggestion for putting in superclass defaults in the algebraic hierarchy, at least where they are “uncontroversial”. I didn’t even know you can do that.</p>",
        "id": 123404579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520440743
    },
    {
        "content": "<p>It's not a very old feature :)</p>",
        "id": 123404588,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520440774
    }
]