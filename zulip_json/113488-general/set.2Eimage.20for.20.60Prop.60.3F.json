[
    {
        "content": "<p><code>set.image : Π {α : Type u} {β : Type v}, (α → β) → set α → set β</code> is in core. Is there any particular reason why we don't have this for <code>Sort u</code> and <code>Sort v</code>? I've just been working on <a href=\"https://github.com/leanprover-community/mathlib/issues/7199\">#7199</a> , seeing if I can golf Eric's suggested proof of <code>independent.disjoint_supr</code> and I've run into the issue that I can use <code>set.range</code> if the source is a <code>Sort u</code> but I can't use <code>set.image</code>. I have it in my head that there's a good reason for this, but I can't remember it! Furthermore I'm not sure I can break down my proof into \"if \\iota is a Prop, then it's trivial, else do this...\"</p>",
        "id": 235157498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618827456
    },
    {
        "content": "<p>Aah, I've come up with a workaround -- instead of having a variable <code>{ι : Sort*}</code>, I just have this as a direct input to the function, and Lean will secretly turn it into <code>Type*</code> and nobody will ever notice!</p>",
        "id": 235157896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618827675
    },
    {
        "content": "<p>Kevin, you have made me now <em>so</em> curious to look at this workaround... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 235158030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618827747
    },
    {
        "content": "<p>Damiano I'm so obsessed with this stupid thing -- this is the reason I'm not helping with the condensed branch thing!</p>",
        "id": 235158092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618827797
    },
    {
        "content": "<p>No worries: I was expecting that I should be maintaining the <code>toric</code> branch.  I had been able to do so successfully, now with a unique exception!</p>",
        "id": 235158239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618827861
    },
    {
        "content": "<p>You do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">independent_def'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">independent</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"bp\">|</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">}))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and because Lean knows that <code>t '' _</code> only makes sense for types, when the theorem is elaborated iota has magically changed to a Type but the maintainers don't notice so you don't get hassle about changing it back to a Sort.</p>",
        "id": 235158303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618827910
    },
    {
        "content": "<p>Thanks for sharing the trick!</p>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I am sure that now no one will notice that this is what is going on!</p>",
        "id": 235158486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618828019
    },
    {
        "content": "<p>The problem is that <code>set</code> isn't even allowed for <code>Prop</code></p>",
        "id": 235159477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618828632
    },
    {
        "content": "<p>You're not allowed to have a set of proofs for some design reason</p>",
        "id": 235159514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618828662
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set/src\">src#set</a> defines <code>set</code> as <code>def set (α : Type u) := α → Prop</code> not <code>def set (α : Sort u) := α → Prop</code></p>",
        "id": 235159625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618828723
    },
    {
        "content": "<p>So obviously you can't take an image of a function from sort, because the set you'd be taking the image over isn't allowed to exist</p>",
        "id": 235159668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618828771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/set.2Eimage.20for.20.60Prop.60.3F/near/235159514\">said</a>:</p>\n<blockquote>\n<p>You're not allowed to have a set of proofs for some design reason</p>\n</blockquote>\n<p>There are roughly two reasons:</p>\n<ol>\n<li>Sets (or lists) of proofs are not useful.  (Since proofs are subsingletons.)</li>\n<li>Using Sort instead of Type often makes inference of universe levels harder.  This is because you then get expressions like <code>max ?u 1</code> or <code>imax ?u 1</code> which are hard to unify (but would be trivial if <code>?u = ?v+1</code>).  (Historical note: in early versions of Lean 3, <code>Type u</code> used to be defined as <code>Sort (max u 1)</code>.  This resulted in lots of problems with type inference.  Switching to <code>Sort (u+1)</code> solved many of them.)</li>\n</ol>",
        "id": 235161447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618829876
    },
    {
        "content": "<p>I think I'd dispute (1) - as a result of this choice, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finprod/src\">src#finprod</a> has to use plift to lift its sets of proofs to Type, which definitely introduces some awkardness. Perhaps not as much as (2) resolves though.</p>",
        "id": 235162443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618830464
    },
    {
        "content": "<p>Why do we want <code>finprod</code> to support Prop in the first place?  Is this for <code>∏ᶠ n &lt; 10, n^2</code>?</p>",
        "id": 235162787,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618830644
    },
    {
        "content": "<p>Yes</p>",
        "id": 235163119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618830862
    },
    {
        "content": "<p>(Side note: I'm not 100% sold on elaborating <code>∏ᶠ n &lt; 10, p n</code> as <code>∏ᶠ n, ∏ᶠ H : n &lt; 10, p n</code>.  One issue is that <code>simp</code> can rewrite the second product on its own, breaking the \"bound quantifier\" syntax. We've had this recently with <code>∏ x ∈ set.image f, g x</code>.)</p>",
        "id": 235163240,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618830955
    },
    {
        "content": "<p>(that's already how <code>supr</code> / <code>Union</code> is elaborated anyway though, right?)</p>",
        "id": 235163459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618831082
    },
    {
        "content": "<p>Yes, it is consistent.  But also consistently problematic.</p>",
        "id": 235163557,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618831130
    },
    {
        "content": "<p>We have a different convention for <code>finset.prod</code> though.</p>",
        "id": 235163660,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618831193
    },
    {
        "content": "<p>As a reminder, what was the problematic simplification?</p>",
        "id": 235163751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618831232
    },
    {
        "content": "<p>AFAICR <code>⨅ x ∈ set.range f, g x</code> would simplify to <code>⨅ x, ⨅ H : ∃ y, f y = x, g x</code>, which you probably don't want.  You can undo it with another simp lemma, but it would be better if the initial step didn't happen in the first place.</p>",
        "id": 235164203,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618831498
    },
    {
        "content": "<p>I assume you mean <code>set.range</code>?</p>",
        "id": 235164791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618831885
    },
    {
        "content": "<p>By the way, is this really a good simp lemma? It turns something into an existential, which is not very good as a normal form because it is hard to manipulate (Lean will almost never be able to guess the right <code>y</code> to discharge such a proof obligation).</p>",
        "id": 235165662,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618832413
    },
    {
        "content": "<p>I'd cautiously support removing it, for the reasons that you mention.</p>",
        "id": 235165961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618832610
    },
    {
        "content": "<p>There are other ones as well though: <code>⊓ x ∈ A ∩ B, p x</code> simplifies to <code>⊓ x, ⊓ H : x ∈ A ∧ x ∈ B, p x</code>.</p>",
        "id": 235166527,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618832794
    },
    {
        "content": "<p><code>set</code> for <code>Prop</code>s would be nice in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/wide_subquiver\">docs#wide_subquiver</a>. It would allow one to speak  uniformly of subgraphs of multigraphs and of simple graphs. But it's not a big issue</p>",
        "id": 235166738,
        "sender_full_name": "David Wärn",
        "timestamp": 1618832909
    },
    {
        "content": "<p>Is <code>⨅ (x : T) (h : x ∈ A ∩ B), p x</code> simplifying to <code>⨅ (x : T) (H : x ∈ A ∧ x ∈ B), p x</code> such a bad thing?</p>",
        "id": 235167457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618833362
    },
    {
        "content": "<p>The pretty printer already prints <code>⨅ x ∈ A ∩ B</code> as <code>⨅ (x : T) (h : x ∈ A ∩ B), p x</code>, which introduces most of the ugliness</p>",
        "id": 235167579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618833419
    },
    {
        "content": "<p>The problem is that then lemmas like <code>infi_union</code> no longer apply.  The pretty-printer issue will hopefully be fixed when the clover blooms.</p>",
        "id": 235168441,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618833816
    }
]