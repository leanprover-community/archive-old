[
    {
        "content": "<p>I would like to use lean to check some expressions in an external program. Currently I run <code>lean main.lean</code> where <code>main.lean</code> is on the fly created file, for example when I want to check <code>fun x, x</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n    <span class=\"n\">io.print</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>and I get <code>λ (x : ?M_1), x : ?M_1 → ?M_1</code>. The problem is that <code>lean main.lean</code> is super slow, is there a way to make this faster. Most probably, I should use <code>lean --server</code> unfortunately I was unable to figure out how does it work. Tried looking at the code of emacs package <code>lean-mode</code> but without a success.</p>",
        "id": 239963878,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1621789058
    },
    {
        "content": "<p>Have you seen <a href=\"https://github.com/leanprover-community/lean-client-python\">https://github.com/leanprover-community/lean-client-python</a> ? I think this might be useful, either as a library or to see how they handle communication with the Lean server.</p>",
        "id": 239964385,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1621789482
    },
    {
        "content": "<p>Sweet, I'm using Python inside of the external application anyway. I will definitely have a look at it!</p>",
        "id": 239964609,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1621789653
    },
    {
        "content": "<p>The lean server is definitely a good way to go, and if you are using python I recommend the lean-client-python mentioned above since it correctly handles the asynchronous issues you run into with the lean server.  It isn't well documented so here is some advice:</p>\n<ul>\n<li>The current master branch is broken when used with a recent version of Lean.  I recommend the branch on <a href=\"https://github.com/leanprover-community/lean-client-python/pull/19\">this PR</a>.</li>\n<li>I recommend using the trio server (not the qt server).</li>\n<li>There is really only one example so far and it isn't very detailed.  A TODO item of mine is to make some better examples.  (I'm not doing a good job on getting to it though. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</li>\n<li>There really is only <a href=\"https://github.com/leanprover-community/lean-client-python/blob/refactor-commands-api/examples/trio_example.py\">one example so far</a>.  Play with that. Besides that example, <a href=\"https://github.com/leanprover-community/lean-client-python/blob/refactor-commands-api/src/lean_client/commands.py\">this file</a> is the closest thing to documentation of the lean API server.</li>\n<li>Also, see some of the discussion and examples in this thread: <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20client.20for.20Python\">#Machine Learning for Theorem Proving &gt; Lean client for Python</a></li>\n<li>The two best ways to get information from the Lean server is to use the info server command and also to look in the messages for any errors.  (This is not documented, but maybe there are some examples in that Zulip thread.)</li>\n<li>If you have never used an asynchronous library like <code>asyncio</code> or <code>trio</code> before in Python, you can basically get by with two rules: (1) Every function which is defined with <code>async def foo(...):</code> should be called with <code>await foo(...)</code>.  (2) Every function <code>foo</code> which has an <code>await</code> inside its body should be declared with <code>async def foo(...):</code>.</li>\n<li>When you sync, you don't need to have an actual file on your computer.  The \"filename\" is just an identifier, so it can be \"dummy.lean\".  In that case, use the <code>contents</code> parameter to put in the string of your \"file\".</li>\n<li>I recommend using the same filename every time (or just a few filenames).  The server doesn't forget files, and if you use fresh filenames every time, you might start to have a memory leak.</li>\n<li>Every sync command takes at least a hardcoded 200 ms.  This isn't horrible, but for some applications where you are running many lean checks repeatedly it will be noticeable.</li>\n</ul>",
        "id": 239977477,
        "sender_full_name": "Jason Rute",
        "timestamp": 1621803331
    },
    {
        "content": "<p>Thank you very much Jason for the detailed answer and tips! </p>\n<p>The 200ms worries me a bit for my application because I'm developing a node based editor and using lean to check if the node graph is correctly set up. Thus each time user changes the network I might want to do several calls to lean to check the network.</p>",
        "id": 240098563,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1621883992
    },
    {
        "content": "<p>The only way I know of to get around the 200ms is by writing a light weight server (like a REPL) using Lean's metaprogramming framework.  That does require learning to program in Lean however...  I can point you to resources (or just look at previous similar conversations I've been in here on Zulip).</p>",
        "id": 240121810,
        "sender_full_name": "Jason Rute",
        "timestamp": 1621895836
    },
    {
        "content": "<p>Maybe widgets are another possible solution.  It would use the Lean server, but maybe (not sure) it would avoid the 200ms timeouts.  Again you would need to use Lean metapgramming and learn the widgets framework.  It probably isn't worth it.</p>",
        "id": 240121931,
        "sender_full_name": "Jason Rute",
        "timestamp": 1621895909
    },
    {
        "content": "<p>There is also Lean 4.  I don't know enough about it to give you solid advice, but it is a better programming language (more pleasant and faster) than Lean 3.</p>",
        "id": 240121990,
        "sender_full_name": "Jason Rute",
        "timestamp": 1621895959
    },
    {
        "content": "<p>Actually, I just looked at your application again, that is, checking expressions.   This is similar to what <span class=\"user-mention\" data-user-id=\"337523\">@Joe Palermo</span> is also doing (obviously likely for a different purpose).  You may want to look at conversations he has had on Zulip here, including this one: <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lean.20client.20for.20Python\">#Machine Learning for Theorem Proving &gt; Lean client for Python</a>.</p>",
        "id": 240123079,
        "sender_full_name": "Jason Rute",
        "timestamp": 1621896654
    },
    {
        "content": "<p>Concerning Lean 4, I'm really excited about it. However, I have spent one day attempting to translate my code from lean3 to lean4 and gave up. Right now, the lack of documentation of certain parts is just too big of a barrier for me. In particular, I'm doing some manipulations with <code>expr</code> and there is no chapter on metaprograming in the lean 4 manual. Furthermore, once I get the basics of my node graph editor done I will start using some parts of mathlib(linear algebra and basic calculus) and I'm not sure how is the move of mathlib to lean 4 is going(it it is happening at all).</p>",
        "id": 240189590,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1621950444
    },
    {
        "content": "<p>The written documentation is indeed lacking.  However we have very good oral documentation over in the lean4 stream.  Feel free to ask if you're running into any issues.</p>",
        "id": 240189928,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621950604
    },
    {
        "content": "<p>I will get the core done in lean 3 first, as I'm familiar with it, then I'm happy start translating it to lean 4 and  ask gazillion questions how to do this and that.</p>",
        "id": 240190764,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1621950963
    }
]