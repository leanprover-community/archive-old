[
    {
        "content": "<p>Why does <code>apply_rules</code> lazily fill in implicit arguments with the first possible thing it finds? In the below example, since <code>b</code> appears before <code>c</code>, it assumes that the implicit argument <code>a</code> from <code>foo.bar</code> should be <code>b</code>. Swapping the order of <code>{b c : nat}</code> to <code>{c b : nat}</code> fixes this, and so does just using <code>apply</code> (in which cases it leaves it as a meta variable).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- ⊢ b = c</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204991598,
        "sender_full_name": "Billy Price",
        "timestamp": 1595659765
    },
    {
        "content": "<p>I want <code>apply_rules</code> to leave things it can't infer as metavariables.</p>",
        "id": 204991644,
        "sender_full_name": "Billy Price",
        "timestamp": 1595659808
    },
    {
        "content": "<p>I think it treats the argument just as one more subgoal which is being proven from the context</p>",
        "id": 204991650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595659865
    },
    {
        "content": "<p>How do I make it stop doing that? I can understand why that's fine for propositions, because of proof irrelevance, but not for <code>nat</code>.</p>",
        "id": 204991755,
        "sender_full_name": "Billy Price",
        "timestamp": 1595660082
    },
    {
        "content": "<p>Also it doesn't appear to be related to the implicitness of the argument (<code>| bar (a) {d} : a = d → foo d</code> does the same thing</p>",
        "id": 204992579,
        "sender_full_name": "Billy Price",
        "timestamp": 1595661962
    },
    {
        "content": "<p>You want it to return two goals instead?</p>",
        "id": 204995676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667681
    },
    {
        "content": "<p>What does <code>apply</code> do, in this case? (I'm not sure why you're talking about <code>apply_rules</code> yet.)</p>",
        "id": 204995682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595667701
    },
    {
        "content": "<p>Apply rules produces two goals,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n\n<span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">ℕ</span>\n</code></pre></div>\n\n\n<p>Why doesn't <code>apply_rules</code> do the same thing?</p>\n<p>I'm using <code>apply_rules</code> because I have a larger inductive Proposition which I want to prove automatically by repeated application of all of the inductive constructors.</p>",
        "id": 205000116,
        "sender_full_name": "Billy Price",
        "timestamp": 1595676235
    },
    {
        "content": "<p>Would <code>repeat { constructor }</code> work for you?</p>",
        "id": 205049024,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595764376
    }
]