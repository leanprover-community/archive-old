[
    {
        "content": "<p>It took me 20 minutes to diagnose this deterministic time-out:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">infinite_cover</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">c&#39;</span> <span class=\"err\">⊆</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃₀</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>In my defence, the code was far longer to begin with, and probably about 15 were spent reducing it to this.</p>",
        "id": 130014811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532111650
    },
    {
        "content": "<p>I'm about to set off for home and I'll spill the beans if nobody has spotted it by the time I get in</p>",
        "id": 130015487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112523
    },
    {
        "content": "<p>I don't understand what you are asking for</p>",
        "id": 130015541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532112590
    },
    {
        "content": "<p>Cut and paste that code -- it times out</p>",
        "id": 130015604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112608
    },
    {
        "content": "<p>deterministic time-out</p>",
        "id": 130015613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112615
    },
    {
        "content": "<p><code>1 ≤ k ≤ n</code></p>",
        "id": 130015615,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532112617
    },
    {
        "content": "<p>:-)</p>",
        "id": 130015618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112621
    },
    {
        "content": "<p>I spotted it when I changed <code>n</code> to <code>1</code></p>",
        "id": 130015625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112630
    },
    {
        "content": "<p>I was quite surprised that the statement managed to parse</p>",
        "id": 130015658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112683
    },
    {
        "content": "<p>in retrospect</p>",
        "id": 130015659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112687
    },
    {
        "content": "<p>because obviously <code>k ≤ n</code> is also a nat</p>",
        "id": 130015677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112722
    },
    {
        "content": "<p>bigger than one no less</p>",
        "id": 130015719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112739
    },
    {
        "content": "<p>is <code>≤</code> left or right associative?</p>",
        "id": 130015737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532112770
    },
    {
        "content": "<p>left assoc, my bad</p>",
        "id": 130016247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113287
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>infix ≤        := has_le.le\n</pre></div>\n\n\n<p><code>infix</code> means <code>infixl</code></p>",
        "id": 130016271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113321
    },
    {
        "content": "<p>oh I see so it tried to find a Prop coercion for <code>n</code></p>",
        "id": 130016335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113378
    },
    {
        "content": "<p>and then it means \"if <code>1 &lt;= k</code> then <code>n</code>\"</p>",
        "id": 130016351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113393
    },
    {
        "content": "<p><code>1 ≤ k ≤ (n ≤ 1)</code> parses just fine</p>",
        "id": 130016440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113454
    },
    {
        "content": "<p>Because Prop has an order structure for some reason.</p>",
        "id": 130016450,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532113467
    },
    {
        "content": "<p>because Prop has a natural order structure...</p>",
        "id": 130016464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113494
    },
    {
        "content": "<p>which we use funky notation for</p>",
        "id": 130016479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113509
    },
    {
        "content": "<p>In fact I'm pretty sure boolean algebras are basically generalized Prop</p>",
        "id": 130016545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I just noticed that this error is a bit subtler than expected. It doesn't give a instance overflow error, it times out and produces no output in the trace. Do you know how the typeclass instance mechanism could run out of time without overflowing?</p>",
        "id": 130035267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532139430
    },
    {
        "content": "<p>example without trolling:</p>\n<div class=\"codehilite\"><pre><span></span>import analysis.real\nexample (n : ℕ) : Prop := n\n</pre></div>",
        "id": 130035317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532139548
    },
    {
        "content": "<p>Ah, I finally got an instance trace, and it does something I didn't think the typeclass inference engine does: it repeatedly does the same search, at the same depth level, which is why it timeouts from iteration rather than recursion. Here's the beginning, with the depth shown using indentation:</p>\n<div class=\"codehilite\"><pre><span></span>(0) ?x_3 : has_coe_to_sort ℕ := @coe_sort_trans ?x_5 ?x_6 ?x_7 ?x_8\n (1) ?x_7 : has_coe_t_aux ℕ ?x_6 := @coe_base_aux ?x_9 ?x_10 ?x_11\n  (2) ?x_11 : has_coe ℕ ?x_10 := int.has_coe\n (1) ?x_8 : has_coe_to_sort ℤ := @coe_sort_trans ?x_22 ?x_23 ?x_24 ?x_25\n  (2) ?x_24 : has_coe_t_aux ℤ ?x_23 := @coe_base_aux ?x_26 ?x_27 ?x_28\n   (3) ?x_28 : has_coe ℤ ?x_27 := @int.cast_coe ?x_49 ?x_50 ?x_51 ?x_52 ?x_53\n    (4) ?x_50 : has_zero ?x_49 := real.has_zero\n    (4) ?x_51 : has_one ℝ := real.has_one\n    (4) ?x_52 : has_add ℝ := real.has_add\n    (4) ?x_53 : has_neg ℝ := real.has_neg\n  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_55 ?x_56 ?x_57 ?x_58\n   (3) ?x_57 : has_coe_t_aux ℝ ?x_56 := @coe_base_aux ?x_59 ?x_60 ?x_61\n   (3) ?x_57 : has_coe_t_aux ℝ ?x_56 := @coe_trans_aux ?x_59 ?x_60 ?x_61 ?x_62 ?x_63\n    (4) ?x_53 : has_neg ℝ := @lattice.boolean_algebra.to_has_neg ?x_60 ?x_61\n     (5) ?x_61 : lattice.boolean_algebra ℝ := @lattice.complete_boolean_algebra.to_boolean_algebra ?x_62 ?x_63\n    (4) ?x_53 : has_neg ℝ := @add_group.to_has_neg ?x_55 ?x_56\n     (5) ?x_56 : add_group ℝ := real.add_group\n  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_58 ?x_59 ?x_60 ?x_61\n   (3) ?x_60 : has_coe_t_aux ℝ ?x_59 := @coe_base_aux ?x_62 ?x_63 ?x_64\n   (3) ?x_60 : has_coe_t_aux ℝ ?x_59 := @coe_trans_aux ?x_62 ?x_63 ?x_64 ?x_65 ?x_66\n     (5) ?x_56 : add_group ℝ := @add_comm_group.to_add_group ?x_59 ?x_60\n      (6) ?x_60 : add_comm_group ℝ := real.add_comm_group\n  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_62 ?x_63 ?x_64 ?x_65\n   (3) ?x_64 : has_coe_t_aux ℝ ?x_63 := @coe_base_aux ?x_66 ?x_67 ?x_68\n   (3) ?x_64 : has_coe_t_aux ℝ ?x_63 := @coe_trans_aux ?x_66 ?x_67 ?x_68 ?x_69 ?x_70\n      (6) ?x_60 : add_comm_group ℝ := @nonneg_comm_group.to_add_comm_group ?x_61 ?x_62\n       (7) ?x_62 : nonneg_comm_group ℝ := @linear_nonneg_ring.to_nonneg_comm_group ?x_63 ?x_64\n       (7) ?x_62 : nonneg_comm_group ℝ := @nonneg_ring.to_nonneg_comm_group ?x_63 ?x_64\n        (8) ?x_64 : nonneg_ring ℝ := @linear_nonneg_ring.to_nonneg_ring ?x_65 ?x_66\n      (6) ?x_60 : add_comm_group ℝ := @ring.to_add_comm_group ?x_63 ?x_64\n       (7) ?x_64 : ring ℝ := real.ring\n  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_66 ?x_67 ?x_68 ?x_69\n   (3) ?x_68 : has_coe_t_aux ℝ ?x_67 := @coe_base_aux ?x_70 ?x_71 ?x_72\n   (3) ?x_68 : has_coe_t_aux ℝ ?x_67 := @coe_trans_aux ?x_70 ?x_71 ?x_72 ?x_73 ?x_74\n       (7) ?x_64 : ring ℝ := @nonneg_ring.to_ring ?x_71 ?x_72\n        (8) ?x_72 : nonneg_ring ℝ := @linear_nonneg_ring.to_nonneg_ring ?x_73 ?x_74\n       (7) ?x_64 : ring ℝ := @domain.to_ring ?x_65 ?x_66\n        (8) ?x_66 : domain ℝ := real.domain\n</pre></div>",
        "id": 130036027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532141107
    },
    {
        "content": "<p>notice that <code>(2) ?x_25 : has_coe_to_sort ℝ</code> keeps coming up; this continues for all 38000 lines of output before it times out</p>",
        "id": 130036032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532141154
    },
    {
        "content": "<p>Oh whoa I just figured out why this is happening, and why it's called a \"prolog-like search\" - nota bene <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  :)</p>\n<p>Whenever it tries something which doesn't work, it reverts all the metavariable assignments up to that point and then tries again. Like here around the newline:</p>\n<div class=\"codehilite\"><pre><span></span>  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_55 ?x_56 ?x_57 ?x_58\n   (3) ?x_57 : has_coe_t_aux ℝ ?x_56 := @coe_base_aux ?x_59 ?x_60 ?x_61\n   (3) ?x_57 : has_coe_t_aux ℝ ?x_56 := @coe_trans_aux ?x_59 ?x_60 ?x_61 ?x_62 ?x_63\n    (4) ?x_53 : has_neg ℝ := @lattice.boolean_algebra.to_has_neg ?x_60 ?x_61\n     (5) ?x_61 : lattice.boolean_algebra ℝ := @lattice.complete_boolean_algebra.to_boolean_algebra ?x_62 ?x_63\n    (4) ?x_53 : has_neg ℝ := @add_group.to_has_neg ?x_55 ?x_56\n     (5) ?x_56 : add_group ℝ := real.add_group\n\n  (2) ?x_25 : has_coe_to_sort ℝ := @coe_sort_trans ?x_58 ?x_59 ?x_60 ?x_61\n   (3) ?x_60 : has_coe_t_aux ℝ ?x_59 := @coe_base_aux ?x_62 ?x_63 ?x_64\n   (3) ?x_60 : has_coe_t_aux ℝ ?x_59 := @coe_trans_aux ?x_62 ?x_63 ?x_64 ?x_65 ?x_66\n     (5) ?x_56 : add_group ℝ := @add_comm_group.to_add_group ?x_59 ?x_60\n      (6) ?x_60 : add_comm_group ℝ := real.add_comm_group\n</pre></div>\n\n\n<p>The line <code>(5) ?x_56 : add_group ℝ := real.add_group</code> is a failure, but it assigns a value to <code>?x_56</code> from the (2) line. So it rolls all the way back to the (2) line and replays the same assignments until it gets to the bad choice <code>real.add_group</code>, and tries something different, in this case <code>@add_comm_group.to_add_group ?x_59 ?x_60</code>.</p>",
        "id": 130037002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532143459
    },
    {
        "content": "<p>I wonder if typeclass search will change in lean 4. This seems like such a poor strategy I'm surprised it works as well as it does in mathlib. I know Leo thinks many things about lean 3 are fundamentally broken, and I wouldn't be surprised if this was on the list</p>",
        "id": 130037108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532143727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This is not how class inference should work, nor have I seen such a trace before. Class inference uses temporary mvars that can be unassigned individually. <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/type_context.cpp#L1405\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/type_context.cpp#L1405\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/src/library/type_context.cpp#L1405</a></p>",
        "id": 130044916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532161285
    },
    {
        "content": "<p>If you like I can make a mathlib-free example</p>",
        "id": 130044978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532161419
    },
    {
        "content": "<p>That would be great, thanks</p>",
        "id": 130045083,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532161603
    },
    {
        "content": "<p>I think this should do the trick (WARNING: this brings VSCode to its knees due to quantity of output)</p>\n<div class=\"codehilite\"><pre><span></span>@[priority 0] instance cast_coe {α} [has_zero α] [has_one α] [has_add α] : has_coe ℕ α := ⟨λ _, 0⟩\nconstant R : Type\ninstance : has_zero R := sorry\n\nset_option trace.class_instances true\nexample (n : ℕ) : Prop := n\n</pre></div>\n\n\n<p>The <code>constant R</code> is optional but gives the typeclass system something to fixate on rather than whatever random thing it finds first (usually <code>unsigned</code> for me on the init library and <code>real</code> when it is imported)</p>",
        "id": 130045431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532162343
    },
    {
        "content": "<p>hmm</p>\n<div class=\"codehilite\"><pre><span></span>$ lean +3.4.1 scratch.lean |&amp; wc -l\n381659\n $ lean +master scratch.lean |&amp; wc -l\n3342\n</pre></div>\n\n\n<p>I guess Leo fixed it already :D</p>",
        "id": 130045547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532162561
    },
    {
        "content": "<p>well... I'm glad it was fixed, although I'm still puzzled over the cause...</p>",
        "id": 130045637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532162746
    },
    {
        "content": "<p>Oh, looking at the trace from that version, I noticed that it searches for <code>(1) ?x_7 : has_coe_to_sort ℤ</code> 2826 times (with 26000 lines in between, not counting failures) before finally getting to <code>(1) ?x_7 : has_coe_to_sort ℕ</code>, which is the same typeclass search it started with. So I think if I let it run long enough it <em>would</em> hit the recursion limit, it would just take an extremely long time to do so.</p>",
        "id": 130046079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163583
    },
    {
        "content": "<p>Maybe it would be worth checking that it was not fixed by accident (since another modification could reinstate the bug), or at least add it to the test suite?</p>",
        "id": 130046129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532163650
    },
    {
        "content": "<p>Do you think the type class search could become more programmable for users? For instance we already saw that it would be nice to be able to tell it: whenever you're looking for <code>ring ?x_i</code> then you should give up on that branch.</p>",
        "id": 130046199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532163745
    },
    {
        "content": "<p>I'm not sure how much I should care about this bug, since it has to do with lean performance on an unsuccessful typeclass search anyway</p>",
        "id": 130046200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163747
    },
    {
        "content": "<p>I think \"negative instances\" would be great, they could probably speed up the search a lot. I.e. <code>unsigned</code> is not a field, stop looking there</p>",
        "id": 130046222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163825
    },
    {
        "content": "<p>Obviously I don't know either, this is far above my competences. My reaction is only triggered by Sebastian not knowing something has been fixed</p>",
        "id": 130046225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532163836
    },
    {
        "content": "<p>but there is a lot of planning necessary to get a feature like that right</p>",
        "id": 130046264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163852
    },
    {
        "content": "<p>and obviously it's up to Sebastian and Leo to make that happen</p>",
        "id": 130046266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163877
    },
    {
        "content": "<p>so I will just let them ponder and figure out whatever works</p>",
        "id": 130046275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163903
    },
    {
        "content": "<p>and soon Gabriel, according to Leo's talk</p>",
        "id": 130046291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532163931
    },
    {
        "content": "<p>The type context will remain in C++, so it will not be arbitrarily configurable like other parts (hopefully will)</p>",
        "id": 130046296,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532163955
    },
    {
        "content": "<p>is typeclass search done in the type context?</p>",
        "id": 130046340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532163976
    },
    {
        "content": "<p>You could still let users pass options to the C++ code, couldn't you?</p>",
        "id": 130046344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532164004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, it uses many type context internals. Still, reimplementing it on top of the new type context monad may be an interesting idea, now that I think about it.</p>",
        "id": 130103015,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532273433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sure, that's what I meant by \"not arbitrarily\". For the parts reimplemented in Lean, I'd like users to be able to completely replace the default implementations if they want to.</p>",
        "id": 130103045,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532273505
    },
    {
        "content": "<p>it would certainly be good if at least potential writing of the typeclass search could guide what of the type context gets exposed to lean</p>",
        "id": 130103086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532273535
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 130103093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532273553
    }
]