[
    {
        "content": "<p>Occasionally I run into a situation where Lean's type class inference system fails in the middle of a tactic mode proof -- say, for concreteness, that I attempted to infer that R was a ring, but type class inference didn't do it. Usually what happened was that I applied lemma X, perhaps to some elements of R, and this lemma needed R to be a ring but expected this proof to be supplied by type class inference but I have managed to construct R so that Lean didn't notice it was a ring. I can supply my own proof <code>H</code> that R is a ring though, and my fix is usually to replace <code>X</code> with <code>@X _ _ H _ _ ...</code>. Are there other ways of doing this though? I don't like that big pile of <code>_</code>s and I think that in the particular case I'm working on now I'd rather just inject <code>H</code> directly into the type class inference system somehow rather than using the <code>@</code> notation and then adding a whole bunch of <code>_</code>s. Is there a trick for doing this? In term mode I would create an instance but I'm in tactic mode.</p>",
        "id": 125208403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523989908
    },
    {
        "content": "<p><code>letI := H</code></p>",
        "id": 125208450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523989943
    },
    {
        "content": "<p>Oh, that's what it does ;-)</p>",
        "id": 125208489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523990033
    },
    {
        "content": "<p>Oh -- does this mean that my code is now likely to break in Lean 4? :-/</p>",
        "id": 125211480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523993987
    },
    {
        "content": "<p>Yes, but I don't see why it would be more likely than it was otherwise. There'll be a way to do that in lean4 I imagine, even if Mario has to write it.</p>",
        "id": 125211571,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523994095
    },
    {
        "content": "<p>The reason I mentioned this specifically was that I believe this might have been something which Leo (probably for an important reason) actively tried to stop people from doing.</p>",
        "id": 125215430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523999431
    },
    {
        "content": "<p>I think it was just that <code>have</code> could previously be used for introducing instances, which wasn't the intended behaviour, since most of the time, you don't want a <code>have</code> to be an instance, and it might confuse the type class system when every single <code>have</code> is marked instance.</p>",
        "id": 125215510,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523999603
    }
]