[
    {
        "content": "<p>Hi, is there a command that can do rewrites inside <code>forall</code> / <code>exists</code> (like <code>simp</code>) but does them in a predictable order (like <code>rw</code>)?</p>",
        "id": 186341187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734430
    },
    {
        "content": "<p>You mean without using <code>conv</code>?</p>",
        "id": 186341282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579734518
    },
    {
        "content": "<p>Yes.</p>",
        "id": 186341300,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734545
    },
    {
        "content": "<p>I just want to simplify <code>f '' s ⊆ t</code> to <code>∀ x ∈ s, f x ∈ t</code> inside <code>∀</code>. <code>rw</code> can't do it, and <code>simp only [image_subset_iff, subset_def]</code> applies the latter lemma first.</p>",
        "id": 186341446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734624
    },
    {
        "content": "<p>Currently I write <code>simp only [image_subset_iff], simp only [subset_def, mem_preimage] </code></p>",
        "id": 186341485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734681
    },
    {
        "content": "<p>oof, kevin beat me with the <code>conv</code></p>",
        "id": 186341508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734705
    },
    {
        "content": "<p>use <code>conv rw</code></p>",
        "id": 186341569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579734725
    },
    {
        "content": "<p>Do you mean <code>conv { (navigate), rw }</code>?</p>",
        "id": 186341622,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734793
    },
    {
        "content": "<p>I wanted to avoid explicit navigation.</p>",
        "id": 186341749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734900
    },
    {
        "content": "<p>It's inside 4 levels of <code>forall</code>, so I'll just stick to <code>simp only [], simp only []</code>.</p>",
        "id": 186341795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579734939
    },
    {
        "content": "<p>It's <code>set.ball_image_iff</code> if that helps...</p>",
        "id": 186341908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579735033
    },
    {
        "content": "<p>I guess it would not be hard to write a wrapper that looks like <code>rw [a, b]</code> and does <code>simp only [a], simp only [b]</code></p>",
        "id": 186341921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579735054
    },
    {
        "content": "<p>I've also been wanting a rewrite-under-binders tactic (I've been doing a lot of rewrites of the form <code>finset.prod s (λi, ...)</code>), so I'd be happy to program it :-)</p>",
        "id": 186371685,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579772124
    },
    {
        "content": "<p>Success:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 186396095,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579791398
    },
    {
        "content": "<p>At this point, the tactic is just:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `simp_rw` is a version of `simp` where rules are applied in the given order like `rw` does .-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">simp_rw</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"o\">:</span> <span class=\"n\">rw_rule</span><span class=\"o\">),</span>\n    <span class=\"k\">if</span> <span class=\"n\">rule</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"k\">then</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;simp_rw can only rewrite in forward direction&quot;</span>\n    <span class=\"k\">else</span> <span class=\"n\">simp</span> <span class=\"n\">none</span> <span class=\"n\">tt</span> <span class=\"o\">[</span><span class=\"n\">simp_arg_type</span><span class=\"bp\">.</span><span class=\"n\">expr</span> <span class=\"n\">rule</span><span class=\"bp\">.</span><span class=\"n\">rule</span><span class=\"o\">]</span> <span class=\"o\">[]</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"c1\">-- equivalent to `simp only [rule] at l`</span>\n</pre></div>",
        "id": 186396192,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579791461
    },
    {
        "content": "<p>I discussed a bit with <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and we came to the conclusion that rewriting in the reverse direction is probably best done by extending the C++ code for <code>simp</code>.</p>",
        "id": 186401513,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579794423
    },
    {
        "content": "<p>So the first edition of <code>simp_rw</code> won't have support for <code>simp_rw [←foo]</code> unfortunately</p>",
        "id": 186401670,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579794505
    },
    {
        "content": "<p>There's always <code>foo.symm</code></p>",
        "id": 186402851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579795169
    },
    {
        "content": "<p>Indeed! But <code>foo.symm</code> doesn't help if <code>foo : ∀x, bar x = baz x</code> :(</p>",
        "id": 186403100,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579795305
    },
    {
        "content": "<p>then it's <code>(foo _).symm</code> :-/</p>",
        "id": 186403177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579795327
    },
    {
        "content": "<p>The hope was that the tactic could just add these underscores and then apply the appropriate <code>symm</code>, but the types don't get inferred nicely when you do that</p>",
        "id": 186403303,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579795395
    },
    {
        "content": "<p>Here's the pull request: <a href=\"https://github.com/leanprover-community/mathlib/pull/1900\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1900\">https://github.com/leanprover-community/mathlib/pull/1900</a></p>",
        "id": 186410861,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579799391
    },
    {
        "content": "<p>You can build the symmetry transform manually (using app and lambda)</p>",
        "id": 186425680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579807764
    }
]