[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3103\">#3103</a> has just been merged. At the last step, I had to fix a weird build failure, as the PR was not building when merged with master. A way to fix the problem was to have two identical calls to <code>simp</code> in a row -- instead, I went for a single <code>dsimp</code>, but still I would like to understand what is going on. You can try it at home by opening current mathlib, and going to line 590 in <code>geometry/manifold/charted_space.lean</code>. The line reads currently</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>Initially, it was</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>which fails with current mathlib (but used to work with a mathlib from a few days ago). What is funny is that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>works. With <code>pp.all</code>, I can't spot a difference before and after the first <code>simp at hx</code>. I guess it has something to do with metavariables. Can someone remind me of the magical command to have even more details than <code>pp.all</code>?</p>",
        "id": 201817637,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592983129
    },
    {
        "content": "<p>Fun experiment: add <code>have hx := hx</code> and put your cursor on the second <code>hx</code>.  There are more metavariables than you might expect.</p>",
        "id": 201818965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592984310
    },
    {
        "content": "<p>There is also a pretty-print option to this effect:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">instantiate_mvars</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 201819113,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592984459
    },
    {
        "content": "<p>What! In this proof, the first line starts with</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">locality</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>which I thought is completely equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">locality</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>It turns out that they are not equivalent: with the first one, the types of <code>x</code> and <code>hx</code> are metavariables, and in the second one they are what they have to be.</p>\n<p>Is this normal/expected/buggy?</p>\n<p>(Before you ask, replacing <code>apply</code> with <code>refine</code> doesn't change this behavior)</p>",
        "id": 201820095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592985284
    },
    {
        "content": "<p>(Without the option <code>set_option pp.instantiate_mvars false</code>, the types of <code>x</code> and <code>hx</code> show up fine in the proof state).</p>",
        "id": 201820350,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592985517
    }
]