[
    {
        "content": "<p>Examples are an important part of mathematics - to test one's conjectures, help think concretely, etc.<br>\nCould people point out to me definitions of examples of the objects and structures defined in mathlib?<br>\nI have not found them.  For example I typed in \"sphere\" to the Github search, with the response:<br>\n   We couldn’t find any code matching 'sphere' in leanprover-community/mathlib<br>\nPerhaps they are in a different repository ?</p>",
        "id": 192912343,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1586013461
    },
    {
        "content": "<p>They ain't there</p>",
        "id": 192912533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586013637
    },
    {
        "content": "<p>If someone wrote examples, should they go in mathlib?  In the same file as the general definition?  In another file?  In another repository?</p>",
        "id": 192912568,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1586013719
    },
    {
        "content": "<p>Important examples (like spheres as manifolds) that will be used in future theorems should certainly go into mathlib.<br>\nFile organization is mostly a matter of how large things are--if you can define your example in 5 lines, maybe it can go in the same file as the general definition, but if you have a lot to say about it, then it should probably go in its own file.</p>",
        "id": 192913295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586014586
    },
    {
        "content": "<p>Undergraduates often ask me where all the finite groups are. As far as I know we don't even have the symmetric groups S_n.</p>",
        "id": 192913329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586014655
    },
    {
        "content": "<p>We do, it's called <code>perm</code> in <code>data.equiv.basic</code></p>",
        "id": 192913428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586014798
    },
    {
        "content": "<p>It's not, because that doesn't take <code>n</code></p>",
        "id": 192913483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586014846
    },
    {
        "content": "<p>And there are a whole bunch of theorems about S_n like e.g. they're solvable for n&lt;=4 and non-solvable for n&gt;=5</p>",
        "id": 192913496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586014895
    },
    {
        "content": "<p><code>perm (fin n)</code></p>",
        "id": 192913500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586014899
    },
    {
        "content": "<p>Exactly -- we don't have it.</p>",
        "id": 192913503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586014907
    },
    {
        "content": "<p>not every combination of definitions has to be a definition</p>",
        "id": 192913527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586014922
    },
    {
        "content": "<p>Yes but historically important definitions like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> should be definitions if we want mathematics undergraduates to find a library which they can understand and use.</p>",
        "id": 192913562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586014966
    },
    {
        "content": "<p>I think that <code>perm</code> is that (the name could be better)</p>",
        "id": 192913573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586014983
    },
    {
        "content": "<p>Just like how matrices are defined over fintypes, we would want to do the same here. So it really is just <code>perm A</code> where <code>fintype A</code></p>",
        "id": 192913597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015031
    },
    {
        "content": "<p>But then the theorem becomes much uglier. My <code>n &gt;= 5</code> becomes your <code>fintype.card A &gt;= 5</code>.</p>",
        "id": 192913661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015097
    },
    {
        "content": "<p>I don't deny it. But this tends to be shortsighted thinking, and we end up refactoring later anyway</p>",
        "id": 192913679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015132
    },
    {
        "content": "<p>You can always prove the ugly version first and deduce the <code>fin n</code> version</p>",
        "id": 192913758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015187
    },
    {
        "content": "<p>it's OK, because Scott is going to write a tactic which proves <code>solvable (perm (fin n)) iff solvable (perm A)</code> when <code>A.card = n</code></p>",
        "id": 192913764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015200
    },
    {
        "content": "<p>Somewhere deep in the PR list sit more group examples (by Neil).</p>",
        "id": 192913773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586015221
    },
    {
        "content": "<p>wouldn't you want to prove the <code>fin n</code> version first and then deduce the \"general\" version?</p>",
        "id": 192913781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586015230
    },
    {
        "content": "<p>I think Reid is right</p>",
        "id": 192913787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015240
    },
    {
        "content": "<p>The proof is that n&gt;=5 so there's an injection perm(fin 5) -&gt; perm(fin n) and perm(fin 5) is non-solvable by dec_trivial</p>",
        "id": 192913804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015278
    },
    {
        "content": "<p>We can get that compiling on the Azure cloud and then never worry about it again</p>",
        "id": 192913854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015304
    },
    {
        "content": "<p>well with that proof you could do the same thing with an injection from perm(fin 5) -&gt; perm A</p>",
        "id": 192913856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015311
    },
    {
        "content": "<p>oh but it would be much more hassle finding the injection, you'd need the axiom of choice or something</p>",
        "id": 192913874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015343
    },
    {
        "content": "<p>there exists an injection</p>",
        "id": 192913880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015360
    },
    {
        "content": "<p>by abstract nonsense</p>",
        "id": 192913883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015371
    },
    {
        "content": "<p>pretty sure you can get some mathlib statement off the shelf that gives you the exact function you want</p>",
        "id": 192913945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015414
    },
    {
        "content": "<p>For what it's worth, there is a folder <code>archive/examples</code>, where we decided to put things with pedagogical value that were too specific to really be part of mathlib. There's exactly one file there right now. <a href=\"https://github.com/leanprover-community/mathlib/tree/master/archive/examples\" title=\"https://github.com/leanprover-community/mathlib/tree/master/archive/examples\">https://github.com/leanprover-community/mathlib/tree/master/archive/examples</a></p>",
        "id": 192915663,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586017840
    },
    {
        "content": "<p>Thanks!  Perhaps there should be a directory structure in archive/examples parallel to that of mathlib.</p>",
        "id": 192916416,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1586018769
    },
    {
        "content": "<p>I think we need more than one example before it comes to that.</p>",
        "id": 192916456,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586018845
    },
    {
        "content": "<p>Another place to put examples which will not be used for further theory building is the <code>tutorial</code> directory, which deserves much more content.</p>",
        "id": 192936350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586051685
    }
]