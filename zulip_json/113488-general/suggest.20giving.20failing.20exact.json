[
    {
        "content": "<p>Mwe below gives an example where <code>suggest</code>gives an <code>exact</code> which then fails. The issue is fixed when I do <code>@card_le_of_subset _</code> but not <code>@card_le_of_subset</code> or <code>`@card_le_of_subset _ _</code> so it seems to be that monotone is defined as a quantification over arguments and <code>suggest</code> doesn't know the right number of underscores to put after the <code>@card_le_of_subset</code>.</p>\n<p>Would anyone care to elaborate (har!) on why <code>suggest</code> detects this lemma but fails to propose the right amount of elaboration for it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">â„•</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- suggest, -- Try this: exact card_le_of_subset ...</span>\n  <span class=\"c1\">-- exact card_le_of_subset, -- Invalid type ascription</span>\n  <span class=\"n\">apply</span> <span class=\"n\">card_le_of_subset</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264088253,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638919186
    },
    {
        "content": "<p>Also: <code>library_search</code> fails but <code>library_search!</code> finds <code>exact card_le_of_subset</code>.</p>",
        "id": 264088682,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638919428
    },
    {
        "content": "<p>Yeah this does occasionally happen. There might already be an issue for this on GitHub</p>",
        "id": 264089333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638919761
    },
    {
        "content": "<p>might be <del>issues#5659</del> <del>Edit: How do I link to a mathlib issue from Zulip?</del> <a href=\"https://github.com/leanprover-community/mathlib/issues/5659\">mathlib#5659</a></p>",
        "id": 264090151,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638920147
    },
    {
        "content": "<p>The Lean 3 pretty printer is often wrong; this isn't something specific to <code>exact</code>. If you were to tweak <code>suggest</code> so that it printed things with <code>pp.all true</code>, you'd discover its solution was in fact correct.</p>",
        "id": 264092546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638921471
    },
    {
        "content": "<p>This sort of thing stops being a problem in Lean 4.</p>",
        "id": 264092627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638921508
    }
]