[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you plan on having some Lean → MM0 compiler? Does such a thing even make sense to have?</p>",
        "id": 179311733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572340844
    },
    {
        "content": "<p>Yes it makes sense to have, and it would be valuable too as a way to prove consistency of lean (i.e. formally verifying my thesis)</p>",
        "id": 179311760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572340894
    },
    {
        "content": "<p>it's certainly easier to do than any other DTT based system from sheer familiarity and a precise specification, but DTT is still complicated</p>",
        "id": 179311824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572340959
    },
    {
        "content": "<p>Aha, that's about what I expected</p>",
        "id": 179311831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572340974
    },
    {
        "content": "<p>Also... is there some Makefile that I can use to compile stuff in your repo?</p>",
        "id": 179311857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572340996
    },
    {
        "content": "<p>Which incantations do I need to get <code>mm0-c</code> and friends working?</p>",
        "id": 179311872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341015
    },
    {
        "content": "<p>no makefile, but most of the things there are one line compile commands</p>",
        "id": 179311884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341024
    },
    {
        "content": "<p>to compile mm0-c, do <code>gcc main.c</code></p>",
        "id": 179311901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341036
    },
    {
        "content": "<p>to compile mm0-hs, <code>stack install mm0-hs</code> from the mm0-hs directory</p>",
        "id": 179311961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341056
    },
    {
        "content": "<p>The last one needs a stable internet connection, I fear</p>",
        "id": 179311992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341084
    },
    {
        "content": "<p>I'm on mobile atm</p>",
        "id": 179311999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341095
    },
    {
        "content": "<p>Ooh, there is actually a <code>make.sh</code> in that directory (-;</p>",
        "id": 179312047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341150
    },
    {
        "content": "<p>that adds a few more optimizations (profile guided optimization based on the result of verifying <code>peano.mmb</code>)</p>",
        "id": 179312117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341196
    },
    {
        "content": "<p>I see</p>",
        "id": 179312172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341274
    },
    {
        "content": "<p>it's hard to write C programs without a complicated compiler invocation, but it's so much easier to use when you can</p>",
        "id": 179312176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341280
    },
    {
        "content": "<p>And if I run <code>./a.out ../example/peano.mmb</code> and there is no output. This means all proofs are verfied?</p>",
        "id": 179312237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341313
    },
    {
        "content": "<p>yes</p>",
        "id": 179312250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341323
    },
    {
        "content": "<p>check the error code to be sure, but it should also give you an error dump if something goes wrong</p>",
        "id": 179312275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341348
    },
    {
        "content": "<p>This <code>main.gcda</code> file is containing optimizations for <code>gcc</code>?</p>",
        "id": 179312298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341378
    },
    {
        "content": "<p>Why does it get generated everytime?</p>",
        "id": 179312367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341425
    },
    {
        "content": "<p>yes, you turn on some profile generation flag in gcc and it instruments the program to produce that file as it runs, then you feed it back into the compiler for a second build</p>",
        "id": 179312370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341430
    },
    {
        "content": "<p>But the second build should leave me with an <code>a.out</code> that doesn't generate those files, right?</p>",
        "id": 179312396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341454
    },
    {
        "content": "<p>the second build doesn't generate the file</p>",
        "id": 179312402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341457
    },
    {
        "content": "<p>but it doesn't clean it up either</p>",
        "id": 179312428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341473
    },
    {
        "content": "<p>Doesn't work for me.</p>",
        "id": 179312434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341487
    },
    {
        "content": "<p>I run <code>./make.sh</code> and then <code>./a.out ../examples/peano.mmb</code>. Result: command passes without errors, but I do get the gcda file</p>",
        "id": 179312500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341529
    },
    {
        "content": "<p>I should note that <code>./make.sh</code> gave some errors from the <code>gcc</code> run</p>",
        "id": 179312514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341551
    },
    {
        "content": "<p>Errrr... warnigns</p>",
        "id": 179312521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>In file included from verifier_types.c:2,\n                 from verifier.c:1,\n                 from main.c:10:\nindex.c: In function ‘init_index’:\nindex.c:23:16: warning: taking address of packed member of ‘struct &lt;anonymous&gt;’ may result in an unaligned pointer value [-Waddress-of-packed-member]\n   23 |     gi_sorts = ih-&gt;p_sorts;\n      |                ^~\nIn file included from verifier_types.c:2,\n                 from verifier.c:1,\n                 from main.c:10:\nindex.c: In function ‘init_index’:\nindex.c:23:16: warning: taking address of packed member of ‘struct &lt;anonymous&gt;’ may result in an unaligned pointer value [-Waddress-of-packed-member]\n   23 |     gi_sorts = ih-&gt;p_sorts;\n      |\n</pre></div>",
        "id": 179312534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341575
    },
    {
        "content": "<p>But that doesn't sound very serious</p>",
        "id": 179312560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341591
    },
    {
        "content": "<p>what version?</p>",
        "id": 179312648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341646
    },
    {
        "content": "<p>I have gcc 8.3.0</p>",
        "id": 179312653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572341658
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>gcc --version\ngcc (GCC) 9.2.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</pre></div>",
        "id": 179312772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572341773
    },
    {
        "content": "<p>I updated to gcc 9 and fixed the warnings you found, and simplified <code>make.sh</code> to remove the extra options</p>",
        "id": 179313194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572342197
    },
    {
        "content": "<p>Nice. Seems to work now</p>",
        "id": 179313430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572342421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The file <code>types.c</code>... could that also have been called <code>sorts.c</code>?</p>",
        "id": 179313572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572342551
    },
    {
        "content": "<p>that's types in the C sense</p>",
        "id": 179313583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572342564
    },
    {
        "content": "<p>it's basically the definition of all the data structures in the file</p>",
        "id": 179313607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572342601
    },
    {
        "content": "<p>Aha <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 179313617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572342602
    },
    {
        "content": "<p>What's the purpose of <code>index.c</code>?</p>",
        "id": 179313781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572342733
    },
    {
        "content": "<p>This is some sort of special made dictionary? Where you look up mm0 declarations?</p>",
        "id": 179313832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572342809
    },
    {
        "content": "<p>It's a nonessential part of the verifier that finds the names of things so that error reporting isn't completely unreadable</p>",
        "id": 179313915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572342889
    },
    {
        "content": "<p>When you compile with <code>-D BARE</code> it leaves that whole file out</p>",
        "id": 179313948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572342910
    },
    {
        "content": "<p>Aha</p>",
        "id": 179314070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343014
    },
    {
        "content": "<p>Why is <code>g_store</code> called that? What does the <code>g</code> stand for?</p>",
        "id": 179314355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343230
    },
    {
        "content": "<p>global variable</p>",
        "id": 179314361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343237
    },
    {
        "content": "<p>Next: what does <code>HIGHWATER</code> mean?</p>",
        "id": 179314370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343253
    },
    {
        "content": "<p>As a Dutchy it brings scary memories to mind... but that's not what your are meaning there <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 179314396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343279
    },
    {
        "content": "<p>If the <code>-D HIGHWATER</code> compile option is enabled, it keeps statistics on how much of the various stacks are used, and reports the largest the stack ever got to</p>",
        "id": 179314418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343315
    },
    {
        "content": "<p>This is because the verifier doesn't reallocate if it runs out of space, it just fails, so it's helpful to know whether the memory limits are reasonable</p>",
        "id": 179314477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343367
    },
    {
        "content": "<p>I think the term comes from \"high-water mark\" used on ships</p>",
        "id": 179314530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So, roughly speaking, all the juicy bits are in <code>verifier.c</code>?</p>",
        "id": 179314689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343523
    },
    {
        "content": "<p>yes</p>",
        "id": 179314692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343527
    },
    {
        "content": "<p>there is a decent amount of comments and high level explanation in <code>types.c</code> though</p>",
        "id": 179314719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572343552
    },
    {
        "content": "<p>&lt;600 lines. Well done! I'll try to grasp it. But my train journey is almost over. So I'll have to postpone it for a while</p>",
        "id": 179314790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572343580
    },
    {
        "content": "<p>Another mm0 question: where do the community envisage the Lean proof of the prime number theorem living? Will it need maintaining by a human? By a machine? Will it go in mathlib somewhere? People might need it.</p>",
        "id": 179315129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572343903
    },
    {
        "content": "<p>I think on another thread I suggested breaking that part of the mm0 repo into its own repo, following standard lean repo practices. The <a href=\"http://set.mm\" target=\"_blank\" title=\"http://set.mm\">set.mm</a> export has some manually written setup and postprocessing files, with a big autogenerated folder sitting between them; all of this can be stored like a regular lean project repo, and you can build more dependent files in that repo. Basically it would be devoted to <a href=\"http://set.mm\" target=\"_blank\" title=\"http://set.mm\">set.mm</a> and the lean facts you can derive from it</p>",
        "id": 179315634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572344374
    },
    {
        "content": "<p>I see. So if I wanted to use PNT in some work I could just make this repo a dependency?</p>",
        "id": 179316268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572344894
    },
    {
        "content": "<p>yes</p>",
        "id": 179316309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572344938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I pushed a documentation upgrade to <code>verifier.c</code> in case you wanted to read it more carefully</p>",
        "id": 179330804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572357617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't see the push</p>",
        "id": 179348026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572367365
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/mm0/blob/master/mm0-c/verifier.c#L87\" target=\"_blank\" title=\"https://github.com/digama0/mm0/blob/master/mm0-c/verifier.c#L87\">https://github.com/digama0/mm0/blob/master/mm0-c/verifier.c#L87</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#define pop_stack() ({ \\</span>\n<span class=\"cp\">  ENSURE(&quot;unify stack underflow&quot;, g_stack_top &gt; g_stack); \\</span>\n<span class=\"cp\">  *(--g_stack_top); \\</span>\n<span class=\"cp\">})</span>\n</pre></div>\n\n\n<p>should this error message just say <code>\"stack underflow\"</code>, instead of <code>\"unify stack\"</code>?</p>",
        "id": 179348107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572367419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Talking of error messages: some of them are capitalized, others not. Certainly a minor issue.</p>",
        "id": 179502341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572498964
    },
    {
        "content": "<p>heh</p>",
        "id": 179502349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572498978
    },
    {
        "content": "<p>where?</p>",
        "id": 179502350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572498981
    },
    {
        "content": "<p>Also, thanks a lot for all the comments.</p>",
        "id": 179502351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572498981
    },
    {
        "content": "<p>L234 and L235 of <code>verifier.c</code></p>",
        "id": 179502355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572499007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>grep \"\\\"[A-Z]\" verifier.c</code></p>",
        "id": 179502367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572499062
    },
    {
        "content": "<p>You might want to <code>git grep</code> the entire project … — … if you care …</p>",
        "id": 179502410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572499087
    },
    {
        "content": "<p>fixed, I'll push later</p>",
        "id": 179502417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572499111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm confused. <a href=\"https://github.com/digama0/mm0/blob/master/mm0-hs/mm1.md\" target=\"_blank\" title=\"https://github.com/digama0/mm0/blob/master/mm0-hs/mm1.md\">https://github.com/digama0/mm0/blob/master/mm0-hs/mm1.md</a> is talking about <code>mmu</code> files, but your paper doesn't mention them, I think.</p>",
        "id": 179504029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501655
    },
    {
        "content": "<p>So the <code>mm0-c</code> folder is all about checking <code>mmb</code> files</p>",
        "id": 179504049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501677
    },
    {
        "content": "<p>And I think <code>mm0-hs</code> is about compiling certain files into <code>mmb</code> files</p>",
        "id": 179504053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501693
    },
    {
        "content": "<p>But I'm not sure if I completely grasp the flow diagram, and which programs are used in which parts</p>",
        "id": 179504111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501725
    },
    {
        "content": "<p>The <code>mmu</code> format was indeed omitted from the paper. It is basically a text version of <code>mmb</code> available for debugging purposes</p>",
        "id": 179504128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501754
    },
    {
        "content": "<p>In the flow diagram, the \"editor\" and \"compiler\" parts are <code>mm0-hs</code> and the \"verifier\" part is <code>mm0-c</code></p>",
        "id": 179504147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501821
    },
    {
        "content": "<p>Right... but the \"compiler\" is also part of the \"trusted core\", right?</p>",
        "id": 179504200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501860
    },
    {
        "content": "<p>no</p>",
        "id": 179504203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501864
    },
    {
        "content": "<p>Why not?</p>",
        "id": 179504206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501869
    },
    {
        "content": "<p>it produces an <code>mm0</code> file (or you provide an <code>mm0</code> file to check against) and an <code>mmb</code> file, and they stand on their own</p>",
        "id": 179504216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501904
    },
    {
        "content": "<p>But <code>verifier.c</code> only works with <code>mmb</code> files, right?</p>",
        "id": 179504230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501936
    },
    {
        "content": "<p>You are supposed to be able to read the <code>mm0</code> file to know what is being proven, and the <code>mmb</code> file is verified to prove the theorems in the <code>mm0</code> file by the verifier</p>",
        "id": 179504233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501947
    },
    {
        "content": "<p>Actually <code>mm0-c</code> is incomplete; the <code>mm0</code> checking part didn't make it in time for the paper</p>",
        "id": 179504278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501974
    },
    {
        "content": "<p>Aah, right</p>",
        "id": 179504281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572501982
    },
    {
        "content": "<p>Because for all I know, you just compile Fermat into <code>true</code>, and the proof is <code>trivial</code></p>",
        "id": 179504284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502003
    },
    {
        "content": "<p>exactly</p>",
        "id": 179504290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572502012
    },
    {
        "content": "<p>No wonder you can get &lt;1s compile times <span aria-label=\"angry devil\" class=\"emoji emoji-1f47f\" role=\"img\" title=\"angry devil\">:angry_devil:</span></p>",
        "id": 179504299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502031
    },
    {
        "content": "<p>Lol, I trust you</p>",
        "id": 179504302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502039
    },
    {
        "content": "<p>But I would like to see the <code>mm0</code> checking part at some point <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 179504306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502058
    },
    {
        "content": "<p>Note that the mm0 checking part is proportional to the size of the mm0 file. For a problem like Fermat this will be quite small</p>",
        "id": 179504312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572502068
    },
    {
        "content": "<p>The <code>c</code> code will not be proportional to anything</p>",
        "id": 179504361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502104
    },
    {
        "content": "<p>But the running time might be. And I will believe that it is negligable</p>",
        "id": 179504370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502126
    },
    {
        "content": "<p><code>mm0-hs</code> has a verifier that checks the <code>mm0</code> file, but it reads mmu files instead of mmb</p>",
        "id": 179504379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572502148
    },
    {
        "content": "<p>Aha</p>",
        "id": 179504382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502159
    },
    {
        "content": "<p>(that's <code>mm0-hs verify</code>, in the <code>Verifier.hs</code> file if you care to look)</p>",
        "id": 179504417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572502203
    },
    {
        "content": "<p>/me takes a break to munch on some breakfast <span aria-label=\"bread\" class=\"emoji emoji-1f35e\" role=\"img\" title=\"bread\">:bread:</span> <span aria-label=\"glass of milk\" class=\"emoji emoji-1f95b\" role=\"img\" title=\"glass of milk\">:glass_of_milk:</span></p>",
        "id": 179504443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572502215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there machinery to go back and forth between <code>mmu</code> and <code>mmb</code>?</p>",
        "id": 179507329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572506473
    },
    {
        "content": "<p>How hard is it going to be to do the <code>mm0</code> checking part in <code>mm0-c</code>? Sounds like you could do it in less than an afternoon...</p>",
        "id": 179507378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572506523
    },
    {
        "content": "<p>not directly right now; there should be a <code>mm0-hs</code> subcommand to do that</p>",
        "id": 179507383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572506534
    },
    {
        "content": "<p>I think it is not hard; for a while I was planning to add a way for mmb to help with distinctness checking (the map from names to indexes in the file should be injective), but I think that's probably overengineering and I'll just allocate a hashmap instead</p>",
        "id": 179507447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572506639
    },
    {
        "content": "<p>Do/will/should <code>mm1</code> files support unicode?</p>",
        "id": 179511920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512188
    },
    {
        "content": "<p>no</p>",
        "id": 179511924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512201
    },
    {
        "content": "<p>well, mm1 could, I guess, but mm0 doesn't</p>",
        "id": 179511936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512220
    },
    {
        "content": "<p>Right.</p>",
        "id": 179511946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512230
    },
    {
        "content": "<p>But <code>mm1</code> is the format that you want mathematicians to read, right?</p>",
        "id": 179511963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512259
    },
    {
        "content": "<p>mm1 is for the proof writer, mm0 is for the auditor</p>",
        "id": 179512025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512308
    },
    {
        "content": "<p>I fear that <code>mm0</code> is impenetrable for many mathematicians</p>",
        "id": 179512058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512350
    },
    {
        "content": "<p>My aim was \"average for a theorem prover language\"</p>",
        "id": 179512079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512375
    },
    {
        "content": "<p>with as close to zero support infrastructure to allow that as possible</p>",
        "id": 179512090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512400
    },
    {
        "content": "<p>unicode is above average</p>",
        "id": 179512143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512416
    },
    {
        "content": "<p>and it <em>does</em> complicate the verifier</p>",
        "id": 179512150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512430
    },
    {
        "content": "<p>but TBH there is a whole slew of landmines in the unicode spec, and lots of ways to make something misleading</p>",
        "id": 179512183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512478
    },
    {
        "content": "<p>not good for an audit</p>",
        "id": 179512196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512502
    },
    {
        "content": "<p>I'm pretty sure we have had a few threads here where we play with unicode and notations to apparently prove false</p>",
        "id": 179512254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572512536
    },
    {
        "content": "<p>Yep, that's certainly right</p>",
        "id": 179512498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512774
    },
    {
        "content": "<p>I think I would like to see how 100 lines of group (or monoid) theory look like in mm0</p>",
        "id": 179512522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572512823
    },
    {
        "content": "<p>I am currently trying to run <code>stack install mm0-hs</code></p>",
        "id": 179512707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You do allow infix notation. What would be the right way to setup the group operation. Would you have a global <code>g*</code> infix that is the global group operation?</p>",
        "id": 179512860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513186
    },
    {
        "content": "<p>Because I don't think you can do operator overloading, right?</p>",
        "id": 179512867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513200
    },
    {
        "content": "<p>Currently the <code>notation</code> command is limited to those with a unique constant at the start, but I think I can relax that to \"infixy\" notations that start with a variable but are followed by a unique constant. Then you could declare a notation <code>x `+g[` G `]` y</code></p>",
        "id": 179512986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513300
    },
    {
        "content": "<p>Alternatively, you could just have <code>x +g y</code> but it produces a \"group expression\" that is then evaluated in a particular group via <code>x =[G] y</code></p>",
        "id": 179513067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513369
    },
    {
        "content": "<p>I wonder if it is worth it.</p>",
        "id": 179513104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513421
    },
    {
        "content": "<p>Or you could just axiomatize groups and have <code>x + y</code></p>",
        "id": 179513120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513437
    },
    {
        "content": "<p>I would rather just write <code>add x (add y z)</code>, I guess</p>",
        "id": 179513128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513448
    },
    {
        "content": "<p>You can have all that in mm1 / your favorite editor</p>",
        "id": 179513133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513467
    },
    {
        "content": "<p>but mm0 is all about not hiding complicated stuff</p>",
        "id": 179513179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513484
    },
    {
        "content": "<p>Well, I'm interested in the first 100 lines of a reusable group theory library</p>",
        "id": 179513181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513485
    },
    {
        "content": "<p>And whether the group operation would be bundled or not, I don't know. But having it unbundled would mean that you can simply call the group op <code>mul</code> or <code>add</code> and write <code>mul x (mul y z)</code> which is just as readable as <code>x `*g[` G `]` ( `y `*g[` G `]` z)</code></p>",
        "id": 179513327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513610
    },
    {
        "content": "<p>Well, one thing that metamath had that mm0 doesn't is the ability to apply a binary operation using the notation <code>(a op b)</code></p>",
        "id": 179513358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513650
    },
    {
        "content": "<p>where <code>op</code> is a variable</p>",
        "id": 179513363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513655
    },
    {
        "content": "<p>So you could just have a variable called <code>+</code> and it would all work nicely</p>",
        "id": 179513380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513680
    },
    {
        "content": "<p>Well, you can have this if you want, can't you? You just have to use a character different than <code>(</code>, because that's already taken to override priority.</p>",
        "id": 179513466,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1572513759
    },
    {
        "content": "<p>But you could still define <code>@(a op b)</code> or something like that</p>",
        "id": 179513469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513764
    },
    {
        "content": "<p>Do you have namespacing?</p>",
        "id": 179513512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513826
    },
    {
        "content": "<p>no</p>",
        "id": 179513519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513830
    },
    {
        "content": "<p>again, that could be implemented at mm1 level</p>",
        "id": 179513566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513843
    },
    {
        "content": "<p>I'm taking a lot of cues from C here</p>",
        "id": 179513582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513859
    },
    {
        "content": "<p>Right, but that means that if I claim <code>def @</code>, then all the others will have to deal with it, and can't reuse that \"trick\"</p>",
        "id": 179513601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513881
    },
    {
        "content": "<p>You can't have a temporary def with a short name, because it pollutes the global library</p>",
        "id": 179513640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572513930
    },
    {
        "content": "<p>An MM0 file is usually built as one \"unit\", so you have to sort out all the global constraints</p>",
        "id": 179513654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513944
    },
    {
        "content": "<p>The hope is that this is fairly limited because you only care about a few theorems</p>",
        "id": 179513713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572513983
    },
    {
        "content": "<p>For actual proving work, you want MM1, which can add a bunch of namespacing, unicode, and whatever else, for your local theorems</p>",
        "id": 179513759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572514043
    },
    {
        "content": "<p>So you are saying that I shouldn't be interested in <code>group.mm0</code> but only in <code>group.mm1</code> and possibly <code>classification_fin_simp_grp.mm0</code>.</p>",
        "id": 179513775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572514060
    },
    {
        "content": "<p>right</p>",
        "id": 179513785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572514068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Are there plans to have a metamath -&gt; mm0 translator?</p>",
        "id": 179714871,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1572722360
    },
    {
        "content": "<p>Isn't that what <code>mm0-hs from-mm</code> does?</p>",
        "id": 179714932,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572722457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you have plans / vague ideas for the following?<br>\n- multiple file developments (one mm0 importing another mm0, hopefully not with a <code>#include</code> like mechanism, but rather some proper namespacing)<br>\n- multiple independent checkers for mm0/mmu/mmb (run automatically in CI, like in metamath, that's super neat)<br>\n- multiple interactive frontends (maybe specialized for different logics, like one for CIC, one for HOL, one for TLA… etc.), as it seems to me that interop between systems/teams should be on the mm0 level  rather than one more complex, more specialized formats such as mm1</p>",
        "id": 179778877,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1572842942
    },
    {
        "content": "<blockquote>\n<p>- multiple file developments (one mm0 importing another mm0, hopefully not with a #include like mechanism, but rather some proper namespacing)</p>\n</blockquote>\n<p>Explicitly no. This is implemented for MM1, but this is a huge complexity increase even there, and it also adds a lot of filesystem stuff to the trusted base</p>",
        "id": 179778933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572843003
    },
    {
        "content": "<blockquote>\n<p>- multiple independent checkers for mm0/mmu/mmb (run automatically in CI, like in metamath, that's super neat)</p>\n</blockquote>\n<p>Yes. There are already multiple checkers, written as I need them, and the spec is intended to be implementation agnostic as with metamath. Besides checkers written by me, I believe Giovanni Mascellani started working on a python checker but I don't know what the progress is on that</p>",
        "id": 179778952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572843104
    },
    {
        "content": "<blockquote>\n<p>- multiple interactive frontends (maybe specialized for different logics, like one for CIC, one for HOL, one for TLA… etc.), as it seems to me that interop between systems/teams should be on the mm0 level rather than one more complex, more specialized formats such as mm1</p>\n</blockquote>\n<p>That's right. I have vague plans about this, but this is really my dream for the future - I think this is the best way to get a really high quality front end on a metamath like backend</p>",
        "id": 179779008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572843187
    },
    {
        "content": "<p>I should qualify the MM0 importing thing by saying that I am actually segmenting the mm0 files on the repo using an include mechanism, but this is only recognized by the MM1 compiler and is intended as a pseudo feature so you can assemble MM0 files (by concatenation) for use by real MM0 verifiers</p>",
        "id": 179779067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572843352
    },
    {
        "content": "<p>Interesting. I was thinking of mm0/mmb files as a kind of compiled version with a stable ABI (like a <code>.o</code> file, in a way). Splitting large libraries into many such files (pairs of files, really) would then make incremental checking easy, and also to have different high-level tools tackle different parts of the library (say, a frontend with a <code>omega</code>-like tactic in a part, a frontend by another team with Gröbner basis working on another part). That would avoid relying too much on a single high level tool, imho.</p>\n<p>You could still have something that takes all the mm0/mmu files and concatenates them, in topological order, into a single file, for checking/releasing (kind of like single-file libraries in C such as sqlite).</p>",
        "id": 179779258,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1572843722
    },
    {
        "content": "<p>They are a lot like <code>.o</code> files, but they are still self contained</p>",
        "id": 179780375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572845908
    },
    {
        "content": "<p>You can conceivably combine a number of <code>.mmb</code> files together, where one proves theorem X using axiom Y, and the other proves theorem Y from axiom Z</p>",
        "id": 179780393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572845972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132878\">@Simon Cruanes</span> There isn't really much advantage to having the format itself note this \"splittability\" since it is basically a metatheoretic property of proofs that can be implemented by an untrusted transformer (i.e. a \"linker\" for proof files)</p>",
        "id": 179780453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572846096
    },
    {
        "content": "<p>If you think about how <code>.o</code> files work, they present \"unresolved symbols\" that are linked with other object files. It is unsafe to present these external symbols without declaring their types (and definitions, if examinable), but if you do that, it's not much different from having <code>axiom</code> and <code>def</code> declarations for these. OpenTheory also does something similar; there is no distinction made between an \"axiom\" as in something true according to the ambient foundation and an \"axiom\" meaning a theorem that has been proven elsewhere that will later be linked in</p>",
        "id": 179780582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572846310
    },
    {
        "content": "<blockquote>\n<p>also to have different high-level tools tackle different parts of the library (say, a frontend with a omega-like tactic in a part, a frontend by another team with Gröbner basis working on another part). That would avoid relying too much on a single high level tool, imho.</p>\n</blockquote>\n<p>Indeed I've been thinking about this a bit. It would be nice to have a heterogeneous proof construction approach, where different front ends are used for building different parts of the library that are later linked together using a common proof substrate. For instance, I'm writing an x86 compiler which is MM0 proof producing, but the front end for that doesn't really have the same style as the MM1 format. It is a lot more automatic, and the user is mostly providing hints along the way (assertion-decorated code), by comparison to regular theorems where you want lots of unification and proof search tactics</p>",
        "id": 179780781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572846642
    },
    {
        "content": "<blockquote>\n<p>Indeed I've been thinking about this a bit. It would be nice to have a heterogeneous proof construction approach, where different front ends are used for building different parts of the library that are later linked together using a common proof substrate.</p>\n</blockquote>\n<p>Other use cases for having heterogeneous proof construction that immediately come to me:<br>\n- custom decision procedures <em>as separate tools</em> (omega.exe? mathematica bridge? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)<br>\n- hammers (calling to Z3, CVC4, E and reconstruct a proof — no need to burden the main interactive prover with that)<br>\n- experimenting with alternative tactic languages (as is the case in Coq these days, just how many tactic languages do they have…)</p>",
        "id": 179842827,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1572881265
    },
    {
        "content": "<blockquote>\n<p>If you think about how <code>.o</code> files work, they present \"unresolved symbols\" that are linked with other object files.</p>\n</blockquote>\n<p>Pushing the analogy a bit too far, <code>.o</code> files have big shortcomings too. They don't specify a dependency order, nor do they protect against duplicate symbols.</p>\n<p>I think maybe just declaring a <code>module foo;</code> as the first statement of a <code>.mm0</code> file, and its dependencies just after that (<code>import bar;</code>) without roping in the exact filesystem details on how to import <code>bar</code>, could be a lightweight solution?</p>",
        "id": 179843084,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1572881408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do the mm0-c, mm0-hs and mm0-rs verify mmu and mmb proofs in polynomial time?</p>",
        "id": 248763084,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1628417355
    },
    {
        "content": "<p>They verify proofs in constant time. Namely &lt; 0.2 s. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 248763127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628417405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241097\">@Juho Kupiainen</span> I work out the asymptotic complexity of an ideal mm0 verifier (and mm0-c is the one that implements all the tricks) in the MM0 paper. It is O(n^2) worst case, but that worst case requires that a single theorem statement take up half of the entire proof content. In the common case where theorem statements are bounded by k, it takes O(nk) time, so roughly linear time.</p>\n<p>The other verifiers mm0-rs and mm0-hs do more things and aren't necessarily implemented optimally, in part because they also run tactics, do proof deduplication in order to create mmb files, and generally need a different data structure to do proof construction. Deduplication is the really important optimization, mm0-rs should still do it in most places, but maybe not all, and I know mm0-hs doesn't. That is, you can construct a term with a high duplication like <code>((x + x) + (x + x)) + ((x + x) + (x + x))</code> (imagine a complete binary tree like this of depth 60), and this is considered a \"small\" term because it only has 60 subterms, but processing this along the tree structure would take 2^60 steps.</p>\n<p>Metamath does deduplication of proofs, but not of lemma statements: the way it is defined requires that verifiers actually construct the full list of symbols for each step. That means that it is subject to this worst case example, for which metamath takes exponential time. I believe there is a more complex example using another of metamath's features that takes double exponential time, but I forget the details. However, in case it wasn't obvious, this is an extremely contrived counterexample, and for the most part metamath is also linear time and these optimizations give mm0 only a small boost (from 0.9 s -&gt; 0.2 s).</p>\n<blockquote>\n<p>Do you know what the case is with the Metamath verifier? You mention in the mm0 github README that it's possible to prove anything in Metamath because the proof checker doesn't check everything properly. Did I understand that correctly? Is it possible to check for the things that should be checked? Is the problem in the language or in the verifier?</p>\n</blockquote>\n<p>That's not quite what I mean (and I hope that's not what I said). Metamath's <code>set.mm</code> database is sound to the best of my knowledge, but because definitions are added as axioms, they have to adhere to some simple rules to ensure that they meet the usual standard for definition introduction in a logical system, which I coded as a \"definition checker\" that is currently run as part of CI. An example of a definition that fails the check is <code>liar := ¬ liar</code>. So the definition checker is an external application that is also critical for soundness, and it is this fact that motivated me to migrate it into the kernel in mm0.</p>\n<p>Another aspect that is critical for the current proof of soundness but has to be checked externally is the unambiguity of the <a href=\"http://set.mm\">set.mm</a> grammar. In order to minimize the distance between the textual representation of theorems and the proof checker's understanding of the statement, metamath theorems are represented as strings of tokens, which is an unusual choice for a theorem prover. This means that it is critical that the mapping from strings of tokens to trees has to be injective, which is an undecidable property of the grammar. In the case of <code>set.mm</code>, this property happens to be true, because there is a manual proof of it. That proof was later mechanized into a parser that constructs a parse table for the grammar, whose existence is a witness to the unambiguity of the grammar. This parse table construction is also run in CI. Again, MM0 wants to dodge this complication so it has a precedence parser built in to the verifier and its workings are part of the specification.</p>",
        "id": 248777583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628439387
    }
]