[
    {
        "content": "<p>Suppose I have the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">option_and</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">x₁</span> <span class=\"bp\">←</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span> <span class=\"bp\">←</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">band</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n</code></pre></div>\n<p>Running #eval (option_and none none) gives me none as expected.</p>\n<p>But I am not sure what tactic or rewrite I need to use to close the following result of the monadic computation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">th</span> <span class=\"o\">:</span> <span class=\"n\">option_and</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 231078989,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616182737
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">option_and</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">x₁</span> <span class=\"bp\">←</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span> <span class=\"bp\">←</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">band</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">th</span> <span class=\"o\">:</span> <span class=\"n\">option_and</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">option_and</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 231079225,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616182840
    },
    {
        "content": "<p>Alternatively,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">option_and</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">x₁</span> <span class=\"bp\">←</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span> <span class=\"bp\">←</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">band</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">th</span> <span class=\"o\">:</span> <span class=\"n\">option_and</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231079263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616182859
    },
    {
        "content": "<p>Haha woops thanks</p>",
        "id": 231079454,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616182950
    },
    {
        "content": "<p>And I don't know if you have a preference for monads or applicatives, because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">option.seq_none</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">option.seq_some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">option_and</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">band</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">o₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">o₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">th</span> <span class=\"o\">:</span> <span class=\"n\">option_and</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231080001,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616183235
    },
    {
        "content": "<p>I see, this is useful</p>",
        "id": 231092477,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616189354
    },
    {
        "content": "<p>surely <code>rfl</code> also works as a proof here</p>",
        "id": 231094837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616190788
    },
    {
        "content": "<p>yes it does</p>",
        "id": 231095256,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1616191067
    }
]