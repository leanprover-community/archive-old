[
    {
        "content": "<p>Is there a way to write to either <code>stdout</code> or <code>stderr</code> without resorting to <code>#print</code> or C++?</p>",
        "id": 271851394,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644856179
    },
    {
        "content": "<p>More generally what are the semantics of writing to <code>stdout</code> and <code>stderr</code> in Lean 3? Some experimentation has yielded unexpected (to me) behavior.</p>",
        "id": 271851648,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644856287
    },
    {
        "content": "<p>What are you trying to accomplish? Printing during program execution, during a tactic, or something else?<br>\nYou can write to stdout using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.print_ln\">docs#io.print_ln</a>, e.g. <code>io_test.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n\n<span class=\"kd\">meta</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">io.run_tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic.trace</span> <span class=\"s2\">\"I go to stderr\"</span><span class=\"o\">),</span>\n  <span class=\"n\">io.print_ln</span> <span class=\"s2\">\"I go to stdout\"</span>\n</code></pre></div>\n<p>then try</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean --run io_test.lean &gt; program.stdout <span class=\"m\">2</span>&gt; program.stderr\n</code></pre></div>",
        "id": 271866062,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644862440
    },
    {
        "content": "<p>Thanks. That was the behavior I observed. The only way I managed to get to <code>stderr</code> was via tracing in a def/lemma.  Is this the only way to get to <code>stderr</code>?</p>",
        "id": 271866441,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644862612
    },
    {
        "content": "<p>Generally <code>stderr</code> is much less crowded so parsing it with something external is cleaner.</p>",
        "id": 271866567,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644862679
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.unsafe_run_io\">docs#tactic.unsafe_run_io</a> to call io methods from the tactic monad</p>",
        "id": 271866873,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644862825
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tactic.unsafe_run_io</span> <span class=\"bp\">$</span> <span class=\"n\">io.print_ln</span> <span class=\"s2\">\"I go to stdout\"</span>\n</code></pre></div>\n<p>would let you trace some special tactic output to stdout if that is helpful?</p>",
        "id": 271866957,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644862878
    },
    {
        "content": "<p>Or do you want the reverse?</p>",
        "id": 271867032,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644862909
    },
    {
        "content": "<p>It looks like there are \"regular\" file-writing looking methods if that helps too. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n<span class=\"kd\">meta</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">stderr</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">io.stderr</span><span class=\"o\">,</span>\n  <span class=\"n\">io.fs.put_str_ln</span> <span class=\"n\">stderr</span> <span class=\"s2\">\"asdf\"</span>\n</code></pre></div>",
        "id": 271867835,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644863306
    },
    {
        "content": "<p>(or <code>io.fs.write</code>, or etc.)</p>",
        "id": 271867873,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644863322
    },
    {
        "content": "<p>Thanks. These are both helpful. </p>\n<p>This plus poking at filtering out constants should solve my use case.</p>",
        "id": 271891018,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874023
    },
    {
        "content": "<p>More broadly I don't understand why Lean writes to <code>stdout</code> vs <code>stderr</code> and would appreciate any philosophical insight</p>",
        "id": 271891157,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874086
    },
    {
        "content": "<p>It is pretty standard for a language to provide a <code>println</code> like function that writes to stdout by default</p>",
        "id": 271891225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874119
    },
    {
        "content": "<p>I agree with that. But why does tracing something in a proof environment write to stderr</p>",
        "id": 271891291,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874154
    },
    {
        "content": "<p>all of lean's diagnostic messages go to stderr, I think</p>",
        "id": 271891353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874187
    },
    {
        "content": "<p>I would have thought errors and warnings would get pushed to <code>stderr</code></p>",
        "id": 271891368,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874197
    },
    {
        "content": "<p>Unless I don't know how to use a computer (of which there is a serious chance), that is not the case</p>",
        "id": 271891484,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874233
    },
    {
        "content": "<p>Actually scratch that, it looks like all of lean's diagnostics go to stdout</p>",
        "id": 271891617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874299
    },
    {
        "content": "<p>Except for tracing in a proof</p>",
        "id": 271891643,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874312
    },
    {
        "content": "<p>As Alex pointed out or directly writing there as Julian did</p>",
        "id": 271891801,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874369
    },
    {
        "content": "<p>hm, you're right, the <code>trace</code> function prints to stderr even though it says</p>\n<blockquote>\n<p>This function has a native implementation that displays the given string in the regular output stream.</p>\n</blockquote>",
        "id": 271891993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874448
    },
    {
        "content": "<p>It makes some sense for it to write to stderr since it's not sequenced with regular writes</p>",
        "id": 271892041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874478
    },
    {
        "content": "<p>Seems like Lean 4 follows the Lean 3 approach too</p>",
        "id": 271892123,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874526
    },
    {
        "content": "<p><code>trace_state</code> and <code>tactic.trace</code> also write to stderr</p>",
        "id": 271892141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874542
    },
    {
        "content": "<p>What is your application?</p>",
        "id": 271892420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874677
    },
    {
        "content": "<p>Hmm I should take a look at <code>trace_state</code></p>",
        "id": 271892435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874680
    },
    {
        "content": "<p>it uses <code>trace_fmt</code> internally, same with <code>tactic.trace</code></p>",
        "id": 271892574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874704
    },
    {
        "content": "<p>Perhaps the commonality here is that all the stderr-writing functions are using the \"pure\" write functions, either <code>trace</code> or <code>trace_fmt</code></p>",
        "id": 271892905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874776
    },
    {
        "content": "<p>I am yak-shaving an autograder inside GitHub classroom. I already have a Lean 4 program that reads from naive <code>#print axiom</code>' coming out of Lean 3 checking a file</p>",
        "id": 271892931,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874782
    },
    {
        "content": "<p>I would gain amusement from internalizing everything in Lean 3 but not much else</p>",
        "id": 271893339,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874901
    },
    {
        "content": "<p>My brain is mush at this hour but can you say more about what you're trying to do in the autograder? You're doing stuff like making sure students aren't cheating by adding axioms or whatever?</p>",
        "id": 271893437,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644874945
    },
    {
        "content": "<p>The easiest thing to do would be to put a marker before the print axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n<span class=\"k\">#eval</span> <span class=\"n\">io.print_ln</span> <span class=\"s2\">\"===================\"</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">classical.em</span>\n</code></pre></div>",
        "id": 271893456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874958
    },
    {
        "content": "<p>If so the programmer in me says you'll have a better time if you ignore both stdout and stderr and write to a stream you fully own with whatever info you're trying to extract</p>",
        "id": 271893466,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644874963
    },
    {
        "content": "<p><a href=\"https://github.com/c0ppelius/lean-autograding\">https://github.com/c0ppelius/lean-autograding</a></p>",
        "id": 271893507,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874987
    },
    {
        "content": "<p>ha, ok or do the hacky thing and do that I guess</p>",
        "id": 271893509,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644874988
    },
    {
        "content": "<p>then just trim everything before the marker in the output</p>",
        "id": 271893514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644874990
    },
    {
        "content": "<p>I did the hacky thing</p>",
        "id": 271893533,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644874999
    },
    {
        "content": "<p>Or alternatively, just require that the lean proof is silent</p>",
        "id": 271893582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875030
    },
    {
        "content": "<p>mathlib does that</p>",
        "id": 271893636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875045
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">check_problem1</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">check_solutions</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"s2\">\"Problem 1\"</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">check_problem1</span>\n<span class=\"k\">#print</span> <span class=\"s2\">\"---\"</span>\n</code></pre></div>",
        "id": 271893659,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875059
    },
    {
        "content": "<p>oh yeah, I forgot about <code>#print string</code></p>",
        "id": 271893689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/stdout.20and.20stderr.20behavior/near/271893466\">said</a>:</p>\n<blockquote>\n<p>If so the programmer in me says you'll have a better time if you ignore both stdout and stderr and write to a stream you fully own with whatever info you're trying to extract</p>\n</blockquote>\n<p>Yes, I agree that this seems smarter</p>",
        "id": 271893795,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> The problem is that you can't control where <code>#print axioms</code> writes since it's not a regular tactic</p>",
        "id": 271893806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875161
    },
    {
        "content": "<p>Exactly</p>",
        "id": 271893857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875174
    },
    {
        "content": "<p>You can write your own print axioms though</p>",
        "id": 271893884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875192
    },
    {
        "content": "<p>But you can probably filter the environment for constants</p>",
        "id": 271893888,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875195
    },
    {
        "content": "<p>I have a code snippet for that lying around somewhere</p>",
        "id": 271893912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875208
    },
    {
        "content": "<p>If you want to drop when you find it, I would appreciate it</p>",
        "id": 271893953,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875235
    },
    {
        "content": "<p>I also wrote something that filters the environment by directory to read from a student's assignment</p>",
        "id": 271893995,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875262
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372208\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372208</a></p>",
        "id": 271894074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644875284
    },
    {
        "content": "<p>So I imagine it is not far from there to filter by constant</p>",
        "id": 271894087,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875290
    },
    {
        "content": "<p>Thanks</p>",
        "id": 271894125,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875314
    },
    {
        "content": "<p>Do you know about <code>lean --json</code>? It makes the output into a json stream and makes it easier to work with the output programmatically.</p>",
        "id": 271894424,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644875471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224377901\">said</a>:</p>\n<blockquote>\n<p>I'm not sure about the attribute, but those meta defs look worth PRing to me</p>\n</blockquote>\n<p>I echo this sentiment</p>",
        "id": 271894454,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875487
    },
    {
        "content": "<p>I know about the existence of <code>lean --json</code> but not much more. I should take a look</p>",
        "id": 271894589,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875558
    },
    {
        "content": "<p>Is it easy to understand what the keys are for the json stream?</p>",
        "id": 271894830,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875686
    },
    {
        "content": "<p>I think it is self explanatory, but not documented, if that makes sense.</p>",
        "id": 271894941,
        "sender_full_name": "Jason Rute",
        "timestamp": 1644875749
    },
    {
        "content": "<p>I can dump some stuff and learn</p>",
        "id": 271895062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644875797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/stdout.20and.20stderr.20behavior/near/271891368\">said</a>:</p>\n<blockquote>\n<p>I would have thought errors and warnings would get pushed to <code>stderr</code></p>\n</blockquote>\n<p>There are pretty standard tools that do print their trace to stderr, for example <code>strace</code> does so because the main program might be busy printing to stdout while it's spying on it. I think you can make an argument that it makes sense for the \"tracing\" and the \"regular stdout\" stream to be different because then you can, pipe/grep/whatever exactly the stream you want right in your shell instead of having to somehow split them up again.</p>",
        "id": 271900656,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1644878766
    },
    {
        "content": "<p>At least that's how I've always used this eh \"feature\" of strace.</p>",
        "id": 271900708,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1644878809
    },
    {
        "content": "<p>Ok. I think I have better mental model. If I assume Lean‚Äôs purpose is telling you when your proof is correct/incorrect then warnings/errors go to the usual place<code>stdout</code>. Less relevant output gets piped to <code>stderr</code>to avoid clutter.</p>",
        "id": 271973136,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1644931720
    }
]