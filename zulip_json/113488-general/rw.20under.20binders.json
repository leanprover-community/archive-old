[
    {
        "content": "<p>I was really surprised today in class when I couldn't get this working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- want to change |t - a n| to |a n - t| in the goal</span>\n  <span class=\"c1\">-- rw abs_sub_comm, -- fails</span>\n  <span class=\"c1\">-- simp_rw [abs_sub_comm] -- fails</span>\n  <span class=\"c1\">-- simp only [abs_sub_comm], -- fails</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span> <span class=\"c1\">-- works now</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I even tried using <code>conv</code> mode but then I couldn't enter the <code>forall</code> binder (I thought <code>funext</code> would work but it didn't; perhaps that only enters lambdas rather than pi types?). What am I missing? I specifically didn't want to do the <code>intros</code>.</p>",
        "id": 323336034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674588270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323336720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674588490
    },
    {
        "content": "<p>The trick when <code>simp_rw</code> doesn't want to rewrite with a commutativity lemma is to specify its arguments enough for it to not be a commutativity lemma anymore!</p>",
        "id": 323336844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674588535
    },
    {
        "content": "<p>Placeholders here are crucial, given that they are getting filled with variables local to the lambda we're rewriting in.</p>",
        "id": 323336962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674588575
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 323338421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674589078
    },
    {
        "content": "<p>That wouldn't work if <code>a</code> and <code>t</code> are quantified, but this would:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323338438,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674589082
    },
    {
        "content": "<p>I see! <code>simp only [abs_sub_comm]</code> doesn't work but <code>simp only [abs_sub_comm _]</code> doesn't end well at all.</p>",
        "id": 323338757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674589180
    }
]