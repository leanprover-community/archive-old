[
    {
        "content": "<p>Oh wow, there's even a non-terminal simp there...</p>",
        "id": 227604327,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614176254
    },
    {
        "content": "<p>An extremely slow nonterminal simp</p>",
        "id": 227604555,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614176332
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6401\">#6401</a></p>",
        "id": 227604837,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614176434
    },
    {
        "content": "<p>Ah, you beat me by 10 sec</p>",
        "id": 227604876,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614176461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/speedup-cau-seq-filter\">https://github.com/leanprover-community/mathlib/tree/speedup-cau-seq-filter</a></p>",
        "id": 227604877,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614176462
    },
    {
        "content": "<p>Curious that we came up with different <code>simp only</code>s</p>",
        "id": 227604984,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614176502
    },
    {
        "content": "<p>At first <code>squeeze_simp</code> timed out for me, so I tried <code>simp?</code>.  But that didn't give me all lemmas, so I had to do <code>squeeze_simp</code> afterwards and merge the two.</p>",
        "id": 227605112,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614176539
    },
    {
        "content": "<p>Great minds think alike! I did the same, but after <code>simp?</code> wasn't enough I just guessed that <code>ge_iff_le</code> was missing</p>",
        "id": 227605219,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614176589
    },
    {
        "content": "<p>As far as I can tell from the trace messages, there's more conditional simp lemmas here than I'd like.</p>\n<ul>\n<li><code>forall_prop_of_true</code> seems to trigger at every implication</li>\n<li>even better, <code>forall_prop_of_false</code> triggers a second time...</li>\n<li><code>exists_prop_of_true</code> is not as bad, but still triggers way too often</li>\n<li><code>function.injective.eq_iff</code> triggers at every function</li>\n<li>wtf is <code>imp_iff_right</code> a simp lemma?!?!?!?</li>\n</ul>",
        "id": 227606229,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614176999
    },
    {
        "content": "<p>It doesn't help that conditional simplification does not seem to be cached.  (Maybe that's because we're simplifying under binders here and get a different local constant every time, I didn't check.)</p>",
        "id": 227606445,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614177073
    },
    {
        "content": "<blockquote>\n<p>wtf is <code>imp_iff_right</code> a simp lemma?!?!?!?</p>\n</blockquote>\n<p>This will never fire, right? If it fires successfully then <code>simp</code> proves <code>a</code>, which means <code>a</code> simplifies to <code>true</code>, which means <code>a → b</code> has already simplified to <code>b</code>?</p>",
        "id": 227606860,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614177215
    },
    {
        "content": "<p>Well, it will always fire but never rewrite, which is even worse.</p>",
        "id": 227607087,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614177294
    },
    {
        "content": "<p>Right, that's what I meant... ugh</p>",
        "id": 227607163,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614177317
    },
    {
        "content": "<p>I love what has happened to this topic</p>",
        "id": 227607850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614177569
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6402\">#6402</a></p>",
        "id": 227608020,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614177631
    },
    {
        "content": "<p>BTW, if I disable all of the lemmas that I've listed, then simp only takes 740ms instead of 6600ms.</p>",
        "id": 227608711,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614177937
    },
    {
        "content": "<p>I have no clue what the first three are doing. Removing the last two seems like an obvious good move...</p>",
        "id": 227609499,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614178249
    },
    {
        "content": "<p>There was a little breakage from <code>function.injective.eq_iff</code> early on, not sure how much more is coming.</p>",
        "id": 227609577,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614178285
    },
    {
        "content": "<p>The <code>*_prop_of_*</code> lemmas are a hack because we can't define multiple congruence lemmas for a function symbol (and probably none for forall).  They only help with uber-dependently typed goals such as <code>∀ x : none.is_some, get x = a</code>.  In general you don't want to rewrite the domain of a pi, because then you get an ugly term in the codomain.  But for propositions, this doesn't matter.<br>\nThese lemmas should be removed from the simp set.  I don't think that would break much, because we avoid dependent types anyhow.  And if it does, it's better to fix this in the simplifier (on the c++ side).</p>",
        "id": 227610568,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614178691
    },
    {
        "content": "<p>There's a little more breakage so far from the <code>*_prop_of_*</code> but not too much. And I'm guessing it's all at the bottom. I'll make a second PR once I get a little farther locally</p>",
        "id": 227614293,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614180022
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6404\">#6404</a></p>",
        "id": 227614798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614180223
    },
    {
        "content": "<p>I do remember seeing a lot of <code>*_prop_of_*</code> in the output of <code>squeeze_simp</code> so I do think it is something we rely on quite a bit.</p>",
        "id": 227625536,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614183533
    }
]