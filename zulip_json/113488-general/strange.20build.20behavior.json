[
    {
        "content": "<p>I'm seeing some strange build behavior possibly related to <code>cache-olean</code>. I don't have time to confirm right now, but I think I saw similar with <code>update-mathlib</code> earlier.</p>\n<p>Steps:</p>\n<ul>\n<li>Get a fresh clone of mathlib and run <code>leanpkg configure</code>, <code>git reset --hard origin/lean-3.4.2</code>, <code>cache-olean --fetch</code>. This is successful and populates <code>src</code> with olean files.</li>\n<li>Create a new file <code>blah.lean</code> with the following content (sufficient, probably not necessary):</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply_fun</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n</pre></div>\n\n\n<ul>\n<li>Run <code>lean blah.lean --make</code>. It terminates after ~5 seconds, and appears to compile a few files in <code>logic</code> and <code>data</code>.</li>\n<li>Run <code>lean blah.lean --make</code> again. It appears to recompile everything.</li>\n</ul>",
        "id": 178101062,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571058399
    },
    {
        "content": "<p>I can't spare the CPU time for more testing right this second. Does anyone recognize this behavior?</p>",
        "id": 178101167,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571058493
    },
    {
        "content": "<p>i've also occasionally been getting this behavior after leanpkg-configure -&gt; update-mathlib</p>",
        "id": 178101262,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1571058597
    },
    {
        "content": "<p>Usually <code>find src | grep \"[.]olean$\" | xargs touch</code> fixes it for me</p>",
        "id": 178101355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571058656
    },
    {
        "content": "<blockquote>\n<p>Usually <code>find src | grep \"[.]olean$\" | xargs touch</code> fixes it for me</p>\n</blockquote>\n<p>That does it. Thanks!</p>",
        "id": 178101484,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571058752
    },
    {
        "content": "<p>Should this be part of the <code>cache-olean</code>/<code>update-mathlib</code> script?</p>",
        "id": 178101505,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571058768
    },
    {
        "content": "<p><code>find src -name *.olean -exec touch {} \\;</code> might be a bit less clunky</p>",
        "id": 178101574,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571058825
    },
    {
        "content": "<p>We could add it to <code>cache-olean</code> / <code>update-mathlib</code>. I don't know if we should do it every time though. It would be worth testing</p>",
        "id": 178102247,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571059370
    },
    {
        "content": "<blockquote>\n<p><code>find src -name *.olean -exec touch {} \\;</code> might be a bit less clunky</p>\n</blockquote>\n<p>This one probably won't work. Using <code>xargs</code> makes the timestamps all equal (as long as all the <code>.olean</code> file names fit on a single command line).</p>",
        "id": 178103650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571060491
    },
    {
        "content": "<p>I've been using <code>find src -name *.olean -exec touch +</code> by default now, and it seems to work well. <br>\nI'm guessing that the relative timestamps of the <code>.olean</code> files don't matter, but it only matters that <code>foo.olean</code> is newer than <code>foo.lean</code>.</p>",
        "id": 178118442,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1571071095
    },
    {
        "content": "<p>No, the .olean file is rebuilt if any transitive dependencies are newer: <a href=\"https://github.com/leanprover/lean/blob/master/src/library/module_mgr.cpp#L184-L187\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/library/module_mgr.cpp#L184-L187\">https://github.com/leanprover/lean/blob/master/src/library/module_mgr.cpp#L184-L187</a><br>\nHowever, <code>xargs --show-limits</code> tells me that it supports 131072 bytes per command (on my machine), so if <code>find</code> uses anywhere near that, it's most probably doing a single call...</p>",
        "id": 178139683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1571087476
    },
    {
        "content": "<p>On Windows the <code>-exec</code> option is also likely to work because I think by default the timestamp granularity of the filesystem is only 1 second</p>",
        "id": 178157614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571110272
    },
    {
        "content": "<p>I still find myself having to do this <code>find src | grep \"[.]olean$\" | xargs touch</code> thing (in this case when editing mathlib after a <code>git checkout lean-3.4.2</code> with all the fancy hooks set up so that <code>cache-olean</code> triggered automatically). Is this issue understood?</p>",
        "id": 182291241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575217944
    }
]