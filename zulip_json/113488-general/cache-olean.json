[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <code>cache-olean</code> doesn't seem to be working for me. I am on branch <code>lean-3.4.2</code>, I fetched and merged the latest version, and did this:</p>\n<div class=\"codehilite\"><pre><span></span>avigad@avigad-ThinkPad-T460:~/projects/mathlib$ cache-olean --fetch\nNo github section found in &#39;git config&#39;\nQuerying GitHub...\nDownloading nightly...\n... successfully extracted olean archive.\navigad@avigad-ThinkPad-T460:~/projects/mathlib$ lean --make\n</pre></div>\n\n\n<p>It is recompiling the whole library. That shouldn't happen, should it? Can you tell if I am doing something wrong?</p>",
        "id": 163469844,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1555422029
    },
    {
        "content": "<p>That certainly shouldn't happen</p>",
        "id": 163478705,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555427874
    },
    {
        "content": "<p>what if you do <code>cache-olean --fetch</code> and <code>leanpkg build</code> instead?</p>",
        "id": 163478786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555427910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I just want to give you a very big Thank You <span aria-label=\"trademark\" class=\"emoji emoji-2122\" role=\"img\" title=\"trademark\">:trademark:</span>. Using <code>update-mathlib</code> and <code>cache-olean</code> has made development so much smoother. It is so much easier to switch branches, and add quick contributions. Kudos!</p>",
        "id": 165144336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557304236
    },
    {
        "content": "<p>I'm really glad it helps :)</p>",
        "id": 165177803,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557332692
    },
    {
        "content": "<p>What is <code>cache-olean</code>? How do I find out how to use it?</p>",
        "id": 165177915,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557332763
    },
    {
        "content": "<p>It looks like it's documented here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md#caching-compilation\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md#caching-compilation\">https://github.com/leanprover-community/mathlib/blob/master/docs/howto-contribute.md#caching-compilation</a></p>",
        "id": 165178027,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1557332854
    },
    {
        "content": "<p>I get this error</p>\n<div class=\"codehilite\"><pre><span></span>dyn894-237:mathlib chrishughes$ cache-olean --fetch\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nError: no nightly archive found\nno cache found\n</pre></div>",
        "id": 165179945,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557334359
    },
    {
        "content": "<p>Did you cache a build?</p>",
        "id": 165180084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557334471
    },
    {
        "content": "<p>How do I do that?</p>",
        "id": 165180103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557334493
    },
    {
        "content": "<p>I was on the <code>master</code> branch</p>",
        "id": 165180111,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557334501
    },
    {
        "content": "<p>If you want to use the nightly, switch to the head of <code>lean-3.4.2</code></p>",
        "id": 165180181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557334550
    },
    {
        "content": "<p>And it works for my community branches right? How do I do that?</p>",
        "id": 165180314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557334641
    },
    {
        "content": "<p><code>lean-3.4.2</code> works by the way. Thanks.</p>",
        "id": 165180351,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557334674
    },
    {
        "content": "<p>For your branches, you build it first, then you call <code>cache-olean</code> and it will cache your build. When you switch to another branch and then come back, git will restore your binaries and you can pick up where you left off</p>",
        "id": 165180614,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557334831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> When we switch over to the archives on Scott's server you will have \"nightlies\" for every commit of every branch. Scott is polling github every minute, and then he just needs to compile. If I understand the setup correctly...</p>",
        "id": 165180620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557334838
    },
    {
        "content": "<p>It is still not connected to Scott's server</p>",
        "id": 165180627,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557334844
    },
    {
        "content": "<p>I tried using <code>cache-olean</code>, and it works for me. However, I'm on a Windows computer and configured git with <code>autocrlf = true</code>, so that my line endings are CRLF locally (that was what I was advised when I started using git). Running <code>cache-olean</code> changes all my line-endings to LF, and after doing <code>git checkout -- .</code> I think that Lean will try to rebuild the whole library from scratch.</p>\n<p>Should I just burn down my whole git repository to the ground and reclone it using <code>autocrlf = false</code> or is there a simpler workaround? (I don't think that any of the programs I use care whether the line endings are CRLF or LF.)</p>",
        "id": 165202745,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557350848
    },
    {
        "content": "<p>I remember seeing a commit that does what you describe but I can't seem to find it. I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> helped with this.</p>",
        "id": 165204526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557352209
    },
    {
        "content": "<p>Does <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s fix to lean 3.4.2 <a href=\"https://github.com/leanprover/lean/commit/92826917a252a6092cffaf5fc5f1acb1f8cef379\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/92826917a252a6092cffaf5fc5f1acb1f8cef379\">here</a> apply to this problem or not?</p>",
        "id": 165204732,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1557352412
    },
    {
        "content": "<p>It looks like it would. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> can you confirm that it actually causes you to recompile?</p>",
        "id": 165204847,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557352529
    },
    {
        "content": "<p>It did. The following finishes in a couple of seconds:</p>\n<div class=\"codehilite\"><pre><span></span>git checkout blessed/lean-3.4.2\ncache-olean --fetch\nleanpkg build\n</pre></div>\n\n\n<p>The following ran for a couple of minutes until I killed it:</p>\n<div class=\"codehilite\"><pre><span></span>git checkout blessed/lean-3.4.2\ncache-olean --fetch\ngit status\ngit checkout -- .\nleanpkg build\n</pre></div>",
        "id": 165204980,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557352644
    },
    {
        "content": "<p>I did change my <code>autocrlf</code> setting to false, and that works well.</p>",
        "id": 165205211,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557352842
    },
    {
        "content": "<p>I'm finally getting around to setting up <code>cache-olean</code>. After moving scripts to their own repo, the install directions need to be updated, but that's easy enough. More worrying, I got this trace checking out a branch. Any idea what's up here?</p>\n<div class=\"codehilite\"><pre><span></span>Trying to fetch cached olean\nQuerying remote Mathlib cache...\nError: revision not found\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nDownloading nightly...\nTraceback (most recent call last):\n  File &quot;/home/rob/.mathlib/bin/cache-olean&quot;, line 145, in &lt;module&gt;\n    fetch_mathlib(asset)\n  File &quot;/home/rob/.mathlib/bin/cache-olean&quot;, line 104, in fetch_mathlib\n    f.write(req.data)\nTypeError: __exit__() takes 1 positional argument but 4 were given\n</pre></div>",
        "id": 165903108,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558102147
    },
    {
        "content": "<p>As for updating the docs. Perhaps <code>setup_dev_scripts.sh</code> should be moved back to mathlib, and should check mathlib-scripts on Github for the scripts it needs to download?</p>",
        "id": 165903722,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558102583
    },
    {
        "content": "<p>It's curious. The line info in this error is not consistent with the version in <code>mathlib-tools</code>. Are you sure you have a recent version?</p>",
        "id": 165919243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558113929
    },
    {
        "content": "<p>I'm not at the office anymore so I can't check until Monday, but I think so... I had a fresh checkout of <code>mathlib-tools</code> for moving your PR over from mathlib.</p>",
        "id": 165919430,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558114064
    },
    {
        "content": "<p>Maybe not though. I'll check next week.</p>",
        "id": 165919503,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558114103
    },
    {
        "content": "<p>Ok, please keep me posted.</p>",
        "id": 165919519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558114115
    },
    {
        "content": "<p>Lately, whenever I run <code>cache-olean --fetch</code> I get an error that no nightly archive is found. This happens when I am on the master branch of mathlib-community (and also if I'm a couple commits behind master - is there a delay in the availability of binaries?).</p>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects/mathlib (master)\n$ cache-olean --fetch\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nError: no nightly archive found\nno cache found\n</pre></div>",
        "id": 165927504,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558119748
    },
    {
        "content": "<p>Oh wait, I forgot you had to be on the <code>lean-3.4.2</code> branch. Is this what <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/2\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/2\">https://github.com/leanprover-community/mathlib-tools/pull/2</a> is implementing?</p>",
        "id": 165927779,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558119944
    },
    {
        "content": "<blockquote>\n<p>I forgot you had to be on the lean-3.4.2 branch</p>\n</blockquote>\n<p>That's right</p>",
        "id": 165927871,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558119989
    },
    {
        "content": "<blockquote>\n<p>Is this what <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/2\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/2\">https://github.com/leanprover-community/mathlib-tools/pull/2</a> is implementing?</p>\n</blockquote>\n<p>That's a project that Scott and I are working on so that you can get a binary for every commit. It's not there yet.</p>",
        "id": 165927927,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558120031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any progress here?</p>",
        "id": 166483007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558726155
    },
    {
        "content": "<p>mathlib is moving ever so slightly faster. I'm finding that if one works on a bunch of related PRs, then it's really nice to be able to work on <code>master</code> instead of yesterdays <code>lean-3.4.2</code>. Are there any options on the horizon of publishing binaries for every commit of the last 3 days (say) and only storing 1 set of binaries per day for older versions of master?</p>",
        "id": 182737290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575618925
    },
    {
        "content": "<p>I have not looked into it. I think that's possible but you need every build of master to do a deployment. You can look in the travis file and in <code>scripts/deploy-nightly.sh</code>. <code>scripts/deploy-nightly.sh</code> should be changed a bit so that it does not push to <code>lean-3.4.2</code> when deploying the build. As for deleting old releases, I'm not sure how to do that. We can try with a cron job on travis.</p>",
        "id": 182781215,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1575651862
    },
    {
        "content": "<p>Another approach would be to look into Github actions. It might be easier to configure</p>",
        "id": 182781261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1575651896
    },
    {
        "content": "<p>Are there more people who think it would be useful to increase the frequency of binary releases? If it's just me, I don't think we should spend energy on this change.</p>",
        "id": 182784754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575653990
    },
    {
        "content": "<p>So, thumbs up on this message, if you would like to have binary releases for every commit on master for the last 3 days. And thumbs down if you don't want/need that.</p>",
        "id": 182784832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575654019
    },
    {
        "content": "<p>I even wish PRs buils would be available so that I have at least access to tactic state when reviewing complicated PRs.</p>",
        "id": 182785166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575654244
    },
    {
        "content": "<p>Github actions supports <a href=\"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts#uploading-build-and-test-artifacts\" target=\"_blank\" title=\"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts#uploading-build-and-test-artifacts\">attaching downloadable \"artifacts\"</a> to every build (on every branch), so all this is possible. Probably that can be integrated into the cache-olean script in a clever way too.</p>",
        "id": 182786340,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575655038
    },
    {
        "content": "<p>Are there statistics on the average number of commits to the github repo per day? (So not master, but all branches.)</p>",
        "id": 182786941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575655419
    },
    {
        "content": "<p>have a look at <a href=\"https://github.com/leanprover-community/mathlib/graphs/commit-activity\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/graphs/commit-activity\">https://github.com/leanprover-community/mathlib/graphs/commit-activity</a></p>",
        "id": 182791675,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1575658551
    },
    {
        "content": "<p>But that is commits to master, I guess</p>",
        "id": 182792363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575658962
    },
    {
        "content": "<p>Right, then I don't know how to do better</p>",
        "id": 182793874,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1575659963
    },
    {
        "content": "<p>I would be happier with builds on PR commits (as Patrick mentions) than more frequent master builds.</p>\n<ul>\n<li>master builds will be useful, but one question is when will they be available: the moment the commit happens or a couple hours later? In the latter case there is little improvement over the current situation.</li>\n<li>PR builds (<strong>also</strong> of failing builds, if possible - in this case all the <code>.olean</code> files that were succesfully produced) will be very useful: to build on top of the PR before it has been merged, to review in VSCode, and for failing builds: to fix build failures more easily.</li>\n</ul>",
        "id": 182794035,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575660029
    },
    {
        "content": "<p>I think instead of going in the direction of picking the right commits to cache the build of, I think getting sccache to support Lean might do a better job. What it does is every time you try to compile one file it checks if this exact file (with its exact contents and the exact content of its dependencies) has been compiled by any other user in the past.</p>",
        "id": 182794419,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1575660269
    },
    {
        "content": "<blockquote>\n<p>Github actions supports <a href=\"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts#uploading-build-and-test-artifacts\" target=\"_blank\" title=\"https://help.github.com/en/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts#uploading-build-and-test-artifacts\">attaching downloadable \"artifacts\"</a> to every build (on every branch), so all this is possible. Probably that can be integrated into the cache-olean script in a clever way too.</p>\n</blockquote>\n<p>I wonder how long they're stored, how predictable the URLs are, and if there's a cap on the artifact size. If those all have reasonable answers, I think this is a great reason to switch.</p>",
        "id": 182798425,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575662558
    },
    {
        "content": "<p>Also I've been getting annoyed with the random Travis failures because a PR happened to be merged during the build.</p>",
        "id": 182798458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575662583
    },
    {
        "content": "<p>I don't know the first thing about sccache, that sounds reasonable too.</p>",
        "id": 182798513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575662624
    },
    {
        "content": "<p>But there are independent reasons to switch to GitHub Actions for CI, so if it will let us cache oleans for all PRs without much effort, let's go for it.</p>",
        "id": 182798624,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575662681
    },
    {
        "content": "<blockquote>\n<p>I wonder how long they're stored, how predictable the URLs are, and if there's a cap on the artifact size.</p>\n</blockquote>\n<p>According to the page it looks like they're stored for 90 days, which is probably OK for PR's and non-cron master commits. For really old PRs, we would probably want to do a merge commit with master anyways, and that would trigger a new build.</p>\n<p>Not sure about the URLs, but I did see this:</p>\n<blockquote>\n<p>GitHub does not currently offer a REST API to retrieve uploaded artifacts.</p>\n</blockquote>\n<p>So, this might be tricky.</p>\n<p>I couldn't find any info about size caps, so my guess is that we'd be fine.</p>",
        "id": 182799280,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575663243
    }
]