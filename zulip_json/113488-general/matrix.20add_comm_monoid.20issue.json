[
    {
        "content": "<p>From LTE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"c1\">-- change to [add_comm_monoid R] to get failure</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reindex_linear_equiv_sum_empty_symm</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">reindex_linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">sum_empty</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum_empty</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">from_blocks</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_empty_apply_inl</span><span class=\"o\">,</span> <span class=\"n\">reindex_linear_equiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">from_blocks_apply₁₁</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 234122580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216537
    },
    {
        "content": "<p>I haven't investigated yet.</p>",
        "id": 234122615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216560
    },
    {
        "content": "<p>After ~10 secs I get an error on the <code>.symm</code> saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">matrix.add_comm_monoid</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">matrix.add_comm_monoid</span>\n</code></pre></div>",
        "id": 234122720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216612
    },
    {
        "content": "<p>My first idea is <code>decidable_eq</code> issues, but I guess <code>semiring R</code> would have those, not <code>add_comm_monoid</code>.</p>",
        "id": 234122812,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618216664
    },
    {
        "content": "<p>Never mind, I'm stupid <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 234123018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216778
    },
    {
        "content": "<p><code>reindex_linear_equiv</code> obviously needs <code>semiring</code></p>",
        "id": 234123027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216789
    },
    {
        "content": "<p>It's just that Lean is bad at letting me know this</p>",
        "id": 234123036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216798
    },
    {
        "content": "<p>It should have yelled at me in 0.1ms</p>",
        "id": 234123092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618216811
    },
    {
        "content": "<p>Well, how would it know from <code>(reindex_linear_equiv (sum_empty _) (sum_empty _)).symm</code> that the instance it needs is <code>semiring R</code>? So only if the unification succeeds, it can start giving \"missing instance\" errors.</p>",
        "id": 234123524,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618217050
    },
    {
        "content": "<p>I'm sure there is an explanation <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> But I still want it to yell at me faster <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 234123618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618217116
    },
    {
        "content": "<p>Yeah, it looks like the unifier is climbing up the entire inheritance hierarchy on both sides of <code>matrix.add_comm_monoid =?= matrix.add_comm_monoid</code>, hoping to find an instance where the <code>add</code> and <code>zero</code> happen to coincide. There should be a better way to do that.</p>",
        "id": 234124317,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618217472
    },
    {
        "content": "<p>It also keeps doing these kinds of weird loops, \"let's check that <code>semiring.to_add_comm_monoid =?= __inst_3</code> by checking the <code>add</code> and <code>zero</code> fields coincide. well, how do we get the <code>add</code> and <code>zero</code> fields to coincide? because <code>semiring.to_add_comm_monoid =?= __inst_3</code>. well, I guess we were already checking that, so never mind\" (repeat for each <code>add</code> field in each ancestor of <code>semiring</code> and each ancestor of <code>add_comm_monoid</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[type_context.is_def_eq_detail] [10]: (λ (i : n), semiring.to_add_comm_monoid R) i =?= (λ (i : n), _inst_3) i\n[type_context.is_def_eq_detail] unfold left&amp;right: add_comm_monoid.to_add_monoid\n[type_context.is_def_eq_detail] [10]: {add := add_comm_monoid.add ((λ (i : n), semiring.to_add_comm_monoid R) i),\n add_assoc := _,\n zero := add_comm_monoid.zero ((λ (i : n), semiring.to_add_comm_monoid R) i),\n zero_add := _,\n add_zero := _} =?= {add := add_comm_monoid.add ((λ (i : n), _inst_3) i),\n add_assoc := _,\n zero := add_comm_monoid.zero ((λ (i : n), _inst_3) i),\n zero_add := _,\n add_zero := _}\n[type_context.is_def_eq_detail] [11]: add_comm_monoid.add =?= add_comm_monoid.add\n[type_context.is_def_eq_detail] [12]: (λ (i : n), semiring.to_add_comm_monoid R) i =?= (λ (i : n), _inst_3) i\n[type_context.is_def_eq_detail] after whnf_core: semiring.to_add_comm_monoid R =?= _inst_3\n[type_context.is_def_eq_detail] unfold left: semiring.to_add_comm_monoid\n[type_context.is_def_eq_detail] [13]: {add := semiring.add ?m_1, add_assoc := _, zero := semiring.zero ?m_1, zero_add := _, add_zero := _, add_comm := _} =?= _inst_3\n[type_context.is_def_eq_detail] on failure: {add := semiring.add ?m_1, add_assoc := _, zero := semiring.zero ?m_1, zero_add := _, add_zero := _, add_comm := _} =?= _inst_3\n[type_context.is_def_eq_detail] [12]: semiring.add =?= add_comm_monoid.add\n[type_context.is_def_eq_detail] [13]: semiring.add =?= add_comm_monoid.add\n[type_context.is_def_eq_detail] on failure: semiring.add =?= add_comm_monoid.add\n</code></pre></div>",
        "id": 234125113,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1618217912
    }
]