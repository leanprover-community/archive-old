[
    {
        "content": "<p>Given <code>[fintype α]</code> and <code>[encodable α]</code>, we should have <code>α ≃ fin (card α)</code>. Does anyone see a nice way to prove that?</p>",
        "id": 185781933,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579144804
    },
    {
        "content": "<p>You probably want <code>to_fun x = ⟨card {y : α | encode y &lt; encode x}, _⟩</code>. This function is injective, hence bijective. Then it should be possible to use <code>nat.find</code> to build an inverse.</p>",
        "id": 185782952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579146126
    },
    {
        "content": "<p>Probably we can use <code>fintype.bij_inv</code> and <code>fintype.injective_iff_surjective_of_equiv</code>.</p>",
        "id": 185783639,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579147206
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">encodable</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span> <span class=\"n\">encodable</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_subtype_strict_mono</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">⊂</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">&lt;</span> <span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subtype_card</span><span class=\"o\">,</span> <span class=\"n\">subtype_card</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_lt_card</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_ssubset</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ssubset_def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span>\n    <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hpq</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_fin_card_of_encodable</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">encode</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">encode</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">card_subtype_lt</span> <span class=\"err\">$</span> <span class=\"n\">lt_irrefl</span> <span class=\"err\">$</span> <span class=\"n\">encode</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">bij_inv</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">left_inverse_bij_inv</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">right_inverse_bij_inv</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">equiv_fin</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">injective_iff_surjective_of_equiv</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">encode_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">encode</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">encode</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">],</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">this</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_subtype_strict_mono</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hz</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 185784904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579149095
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 185785095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579149287
    },
    {
        "content": "<p>I think this is in mathlib</p>",
        "id": 185790708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579158089
    },
    {
        "content": "<p><code>fintype.equiv_fin</code></p>",
        "id": 185790772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579158152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: <code>def equiv_fin (α) [fintype α] [decidable_eq α] : trunc (α ≃ fin (card α))</code>. There's a <code>trunc</code> there.<br>\n<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>: Thanks! Do you mind if I add it to the library? I need it to revise a PR.</p>",
        "id": 185809444,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579177306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  Use <code>trunc.out</code> to get rid of it</p>",
        "id": 185810062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579177778
    },
    {
        "content": "<p>It's not computable without the trunc, because there is no canonical ordering of the type</p>",
        "id": 185810153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579177836
    },
    {
        "content": "<p>Is it an advantage that Yuri's version is computable?<br>\n(Also, for the record, Yuri, <code>decidable_eq α</code> follows from <code>encodable α</code>.)</p>",
        "id": 185810381,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579178049
    },
    {
        "content": "<p>Background: I need <code>encodable (α → β)</code> where <code>α</code> is an encodable fintype and <code>β</code> is encodable. Right now we only have that when <code>α</code> is <code>fin</code>.</p>",
        "id": 185810797,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579178468
    },
    {
        "content": "<p>does it have to be computable?</p>",
        "id": 185810818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579178516
    },
    {
        "content": "<p>You tell me. It is towards a proof that finitely branching W types are encodable, which can be used e.g. to show that syntactic definitions are encodable. My guess is that yes, we want that to be computable.</p>",
        "id": 185810920,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579178617
    },
    {
        "content": "<p>Here's a nicer approach IMO: (The first lemma is a fragment of the proof of <code>fintype.equiv_fin</code>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nd</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">index_of_lt_length</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_iff_nth_le_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">nd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n   <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">index_of_lt_length</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">preimage</span><span class=\"bp\">.</span><span class=\"n\">decidable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode</span><span class=\"o\">,</span> <span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode_injective</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_trans</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_trans</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_antisymm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_antisymm</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_total</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_total</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sorted_univ</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">encodable</span><span class=\"bp\">.</span><span class=\"n\">encode&#39;</span> <span class=\"n\">α</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span><span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_sorted_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">sorted_univ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sort</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">length_sorted_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorted_univ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">length_sort</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sorted_univ_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorted_univ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sort_nodup</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">encodable_fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">encodable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">length_sorted_univ</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">equiv_fin</span> <span class=\"n\">mem_sorted_univ</span> <span class=\"n\">sorted_univ_nodup</span>\n</pre></div>",
        "id": 185812784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579180296
    },
    {
        "content": "<p>Looks good. I am leaving for Zurich in a couple of hours but I'll get this in while traveling. (And, to repeat, we can drop <code>[decidable_eq α]</code>.)</p>",
        "id": 185823661,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1579187878
    }
]