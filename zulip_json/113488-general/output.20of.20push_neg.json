[
    {
        "content": "<p>Would it be possible to write a function which, given an expression <code>H</code>, outputs the result of running <code>push_neg</code> on <code>H</code>?  So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">push_neg_fun</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">-- displays ∃ (n : ℕ), ∀ (p q : ℝ), p &lt; ↑n → q ≤ ↑n</span>\n</code></pre></div>",
        "id": 263089283,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638233548
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/reassoc_axiom.html#category_theory.reassoc_of\">https://leanprover-community.github.io/mathlib_docs/tactic/reassoc_axiom.html#category_theory.reassoc_of</a>.</p>",
        "id": 263091175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638235159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> interesting, can you please remind me what the <code>.</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">category_theory.reassoc_of</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">tactic.calculated_Prop</span> <span class=\"n\">β</span> <span class=\"n\">hh</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.derive_reassoc_proof</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>does?</p>",
        "id": 263092296,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638236234
    },
    {
        "content": "<p>The <code>.</code> is an \"auto_param\", which says \"if this argument is omitted, please run this tactic to synthesize a value\"</p>",
        "id": 263092329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638236277
    },
    {
        "content": "<p>I trying/failing to adapt this to your request at the moment. :-)</p>",
        "id": 263092369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638236286
    },
    {
        "content": "<p>I should say, the motivation is to allow my students to check their work for section 2.10 here:<br>\n<a href=\"https://www.people.vcu.edu/~rhammack/BookOfProof/Main.pdf#page=72\">https://www.people.vcu.edu/~rhammack/BookOfProof/Main.pdf#page=72</a></p>",
        "id": 263092474,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638236430
    },
    {
        "content": "<p>If you just want something usable, then this doesn't need to be a literal function, and could be a tactic, this would hopefully let you reuse more of the internals of push_neg</p>",
        "id": 263092680,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638236671
    },
    {
        "content": "<p>It's true that I can already do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now look at H</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it's rather unwieldy.  Is that what you mean?</p>",
        "id": 263092742,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638236759
    },
    {
        "content": "<p>Well it would essentially be doing that under the hood, but it could be wrapped up in a nice user command like <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##simp\">https://leanprover-community.github.io/mathlib_docs/commands.html##simp</a></p>",
        "id": 263092804,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638236818
    },
    {
        "content": "<p>Oh, I've never seen <code>#simp</code> before!  Indeed that (a <code>push_neg</code> version of that) seems exactly what I want.</p>",
        "id": 263092824,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638236846
    },
    {
        "content": "<p>The <code>reassoc_of</code> solution translates to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.push_neg</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">push_neg</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">calculated_Prop</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">derive_push_neg_proof</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calculated_Prop</span> <span class=\"bp\">%%</span><span class=\"n\">v</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">normalize_negations</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n   <span class=\"n\">unify</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.mp</span> <span class=\"bp\">%%</span><span class=\"n\">pr</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">),</span>\n   <span class=\"n\">exact</span> <span class=\"n\">pr</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">push_neg_of</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">tactic.calculated_Prop</span> <span class=\"n\">β</span> <span class=\"n\">hh</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.derive_push_neg_proof</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"n\">push_neg_of</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 263092913,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638236973
    },
    {
        "content": "<p>Yeah I don't think it would be too hard to make, changing the function at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.simp_cmd/src\">src#tactic.simp_cmd</a> to call <a href=\"https://leanprover-community.github.io/mathlib_docs/find/push_neg.normalize_negations/src\">src#push_neg.normalize_negations</a> instead of where it calls <code>e.simp</code> might already give something passable. Unfortunately its a bit late for me now to try it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 263092918,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638236982
    },
    {
        "content": "<p>Probably the separate <code>variables</code> line can be avoided.</p>",
        "id": 263092925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638236994
    },
    {
        "content": "<p>It may be too messy for your students: it prints out the <code>x</code> argument, which is the proof that the before and after props are equivalent...</p>",
        "id": 263092986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638237026
    },
    {
        "content": "<p>They don't want to see that.</p>",
        "id": 263092991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638237030
    },
    {
        "content": "<p>Indeed -- as opposed to just the \"after prop\", which I guess is what I was originally asking about ...</p>",
        "id": 263093018,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638237085
    },
    {
        "content": "<p>The <code>normalize_negations</code> comes from the internals of <code>push_neg</code>, is that right?</p>",
        "id": 263093084,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638237139
    },
    {
        "content": "<p>Oh lol Scott I just understood thats a really sneaky way of calling tactics from #check!</p>",
        "id": 263093104,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638237177
    },
    {
        "content": "<p>The <code>#simp</code> solution is much better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">push_neg</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[user_command]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">push_neg_cmd</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"#push_neg\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">types.texpr</span><span class=\"o\">,</span>\n\n  <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">mappings</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">synthesize_tactic_state_with_variables_as_hyps</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n\n  <span class=\"n\">result</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.of_tactic</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"o\">{</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">normalize_negations</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"n\">ts</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">result</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">push_neg</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"c1\">-- prints `∃ (n : ℕ), ∀ (p q : ℝ), p &lt; ↑n → q ≤ ↑n`</span>\n</code></pre></div>",
        "id": 263093279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638237375
    },
    {
        "content": "<p>Maybe we should factor out the generic code from <code>#simp</code>.</p>",
        "id": 263093292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638237396
    },
    {
        "content": "<p>This is so cool.  Thank you so much <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>!</p>",
        "id": 263093319,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638237435
    },
    {
        "content": "<p>I can put it in some bespoke mathlib version for my students if needed, but do you think it's worthy of joining mathlib proper?</p>",
        "id": 263093348,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638237480
    },
    {
        "content": "<p>A hackish version of the <code>reassoc</code> approach, but agreed that the custom command is the proper solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pn_calculated_Prop</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">derive_pn_proof</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">pn_calculated_Prop</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">push_neg.normalize_negations</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pn_of</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pn_calculated_Prop</span> <span class=\"n\">hh</span> <span class=\"bp\">.</span> <span class=\"n\">derive_pn_proof</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">normalized</span><span class=\"o\">:</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pn_of</span> <span class=\"n\">_</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pn_of</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 263093434,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638237567
    },
    {
        "content": "<p>This generalizes to any tactic that works on the goal (<code>norm_cast</code>, <code>ring_nf</code>, ...). There could be one generic command. Coming up with the right syntax is the hard part.</p>",
        "id": 263093681,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638237742
    },
    {
        "content": "<p>(This being the <code>#simp</code> approach that is)</p>",
        "id": 263093685,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638237753
    },
    {
        "content": "<p>I vote for <code>#run some_tactic on (my wonderful expression)</code></p>",
        "id": 263106954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638254721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">run</span> <span class=\"n\">ring_nf</span> <span class=\"n\">on</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">run</span> <span class=\"n\">simp</span> <span class=\"n\">on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">run</span> <span class=\"n\">push_neg</span> <span class=\"n\">on</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263107023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638254810
    },
    {
        "content": "<p>Heather, you can also have a look at how this is done in the beginning of <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/08_limits_negation.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/08_limits_negation.lean</a></p>",
        "id": 263114491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638262120
    },
    {
        "content": "<p>Maybe <code>#run_tactic</code> to avoid confusion with <code>run_cmd</code>?</p>",
        "id": 263121061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638265720
    },
    {
        "content": "<p>But that's sooo longgg <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 263121141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638265766
    },
    {
        "content": "<p>Whatabout <code>#run_tac</code>?</p>",
        "id": 263121168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638265792
    },
    {
        "content": "<p>Certainly better <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 263121259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638265820
    },
    {
        "content": "<p>To bump this old thread: I wrote a user command for <code>push_neg</code>, see <a href=\"https://github.com/leanprover-community/mathlib/pull/16775\">#16775</a> and <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/push_neg.20user.20command\">post</a>, and then remembered I'd already asked for it a year ago.  I am posting here in case anyone discovers the previous discussion.  My PR is pretty close to what <a href=\"#narrow/stream/113488-general/topic/output.20of.20push_neg/near/263093279\">Scott came up with</a>, but it would still be nice to generalize according to <a href=\"#narrow/stream/113488-general/topic/output.20of.20push_neg/near/263106954\">Johan's idea</a> of a <code>#run</code> user command.</p>",
        "id": 302939020,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665179056
    },
    {
        "content": "<p>By the way, I think in mathlib4 I want to have something like <code>#conv (tac) e</code> rather than doing this kind of thing for every conv tactic</p>",
        "id": 302939226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179199
    },
    {
        "content": "<p>Yes, this was Scott/Rob/Johan's idea in the old thread.</p>",
        "id": 302939272,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665179222
    },
    {
        "content": "<p>with the distinction that what we actually care about here are conv tactics, not regular tactics</p>",
        "id": 302939353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665179273
    }
]