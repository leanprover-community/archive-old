[
    {
        "content": "<p>Amelia just pointed out to me that in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.comp\">docs#ring_hom.comp</a> two of the semiring instances are <code>[]</code> and one is <code>{}</code>. This surprised me! Why do we do it like this? There's no mention of this phenomenon in the module doc.</p>",
        "id": 219462245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607601234
    },
    {
        "content": "<p>Something similar also happens in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comp\">docs#linear_map.comp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_neg\">docs#linear_map.map_neg</a>. Presumably finding the arguments by unification gives (used to give?) less diamonds than doing it by typeclass search?</p>",
        "id": 219463048,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1607601811
    },
    {
        "content": "<p>There's now a library note about this, somewhere</p>",
        "id": 219465116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607603284
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#implicit%20instance%20arguments\">https://leanprover-community.github.io/mathlib_docs/notes.html#implicit%20instance%20arguments</a></p>",
        "id": 219465130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607603300
    },
    {
        "content": "<p>As for why one is different to the others, it's probably an accident. Keeping track of which variables are currently in your scope is really hard!</p>",
        "id": 219465175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607603340
    },
    {
        "content": "<p>Oh -- so when this is happening there should be a library note? Thanks! Yes, I figured out (in the sense of \"Amelia explained it to me\") how it could work in principle but then I was confused why it was happening in some places but not others.</p>",
        "id": 219470867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607606792
    },
    {
        "content": "<p>Non-obvious design decisions like this are what comments are for generally, and library notes are supposed to be a mechanism to deduplicate and cross-link repeating issues</p>",
        "id": 219471122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607606976
    },
    {
        "content": "<p>This seems to be a repeating issue though -- we first discovered it in the lifting property <code>liftq</code> for quotient modules, and then in <code>mkq</code>, and then in <code>comp</code>.</p>",
        "id": 219471319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607607083
    },
    {
        "content": "<p>right, so it would be good to reference <code>implicit instance arguments</code> where it comes up, and then add specific comments about why it pertains to some but not all of the classes involved</p>",
        "id": 219471505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607607183
    },
    {
        "content": "<p>Here it's not really clear whether it's intentional, though it seems likely...</p>",
        "id": 219471687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607607265
    },
    {
        "content": "<p>Maybe I'll try and tweak docgen to add backreferences from the <code>notes</code> section...</p>",
        "id": 219471744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607607298
    },
    {
        "content": "<p>But the note _is_ there already: <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#ring_hom.to_monoid_with_zero_hom\">https://leanprover-community.github.io/mathlib_docs/algebra/ring/basic.html#ring_hom.to_monoid_with_zero_hom</a></p>",
        "id": 219471806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607607330
    },
    {
        "content": "<p>It's just not repeated for every single definition in the file</p>",
        "id": 219471825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607607345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> its not about diamonds, it's just faster to find it by unification than type class inference.</p>",
        "id": 219904382,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1607981220
    }
]