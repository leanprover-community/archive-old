[
    {
        "content": "<p>If I can <code>#eval f a b</code> to <code>tt</code>, should I make sure that <code>example : f a b = tt</code>is <code>rfl</code>? In my case, <code>b = g a</code> and <code>g</code> seems to be naughty enough for Lean being to unwilling to expand everything. (<code>f a a = tt</code> is indeed <code>rfl</code>)</p>",
        "id": 127532389,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1528096475
    },
    {
        "content": "<p>This may be a case where you suffer from the fact that definitional equality is not transitive.</p>",
        "id": 127540799,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528112326
    },
    {
        "content": "<p>Let's suppose <code>#reduce f x</code> evaluates to <code>tt</code>. Is there a general easy way to prove <code>example : f x = tt</code> if <code>rfl</code> doesn't get the job done (probably due to non-transitive defeq)?</p>",
        "id": 127618197,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1528227454
    },
    {
        "content": "<p>If <code>#reduce</code> works, then <code>rfl</code> should also</p>",
        "id": 127618259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528227500
    },
    {
        "content": "<p>Would there by any difference between <code>#eval</code> and <code>#reduce</code>?</p>",
        "id": 127618290,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1528227543
    },
    {
        "content": "<p>yes, the same statement doesn't hold if you use <code>#eval</code></p>",
        "id": 127618298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528227574
    },
    {
        "content": "<p>there are some terms that <code>#eval</code> can evaluate which <code>#reduce</code> gets stuck on due to axioms like <code>propext</code></p>",
        "id": 127618356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528227609
    },
    {
        "content": "<p>I would love to at least try <code>#reduce</code> but deterministic timeout is making it somewhat impossible. I am pretty sure everything I use is fairly computable tho. Should I just write a tactic that unfolds everything explicitly until <code>refl</code> or should I try to find a way to make the whole thing <code>rfl</code>? (In the case where <code>#eval f x</code> yields <code>tt</code> but <code>f x = tt</code> is not <code>rfl</code>.)</p>",
        "id": 127618595,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1528227887
    }
]