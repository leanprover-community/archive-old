[
    {
        "content": "<p>Can someone come up with a simple proof of this using <code>le_supr</code> or something? Am I just being stupid?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226569654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613506375
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_bsupr</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226569998,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613506524
    },
    {
        "content": "<p>Ah, it's <code>le_bsupr</code> that I needed! Thanks :)</p>",
        "id": 226570156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613506578
    },
    {
        "content": "<p>And I don't know how to write it on one line only. I always get errors with le_bsupr</p>",
        "id": 226570210,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613506603
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∈</span> <span class=\"n\">Hs</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">le_bsupr</span> <span class=\"n\">H</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 226570451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613506716
    },
    {
        "content": "<p>I basically always need to write <code>le_trans _ (le_bsupr _ h)</code> to get what I want when I think that <code>le_bsupr</code> would be enough. I don't get that lemma.</p>",
        "id": 226570554,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613506777
    },
    {
        "content": "<p>well your solution looks simple :)</p>",
        "id": 226570670,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613506815
    },
    {
        "content": "<p>Yeah, I agree it's annoying, same goes for <code>le_supr</code></p>",
        "id": 226570687,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613506823
    },
    {
        "content": "<p>Note that when you do <code>\\Sup (x \\in s)</code>, you're actually taking the supremum over x of the supremum over proofs of x \\in s</p>",
        "id": 226573411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613508180
    },
    {
        "content": "<p>Which is why le_supr doesn't match</p>",
        "id": 226573428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613508193
    },
    {
        "content": "<p>The <code>b</code> lemmas are sometimes just the same as two applications of the un-b lemmas, one on a type and one on a proof.</p>",
        "id": 226577136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613509955
    },
    {
        "content": "<p>what does <code>b</code> stand for? what does <code>r</code> stand for in <code>supr</code>? How am I supposed to remember these names?</p>",
        "id": 226578192,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613510426
    },
    {
        "content": "<p><code>b</code> = <code>binders</code> or something?</p>",
        "id": 226578228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613510447
    },
    {
        "content": "<p>sup is for two things, supr is for many. I think that b is for bounded, but I don't understand the reason behind that name</p>",
        "id": 226578345,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613510515
    },
    {
        "content": "<p>but <code>Sup</code> is also for many...</p>",
        "id": 226578413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613510533
    },
    {
        "content": "<p>oh yes, indeed. supr is Sup of a Range ? I guess you can remember it that way, since <code>supr s = Sup (set.range s)</code></p>",
        "id": 226578649,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613510654
    },
    {
        "content": "<p>Or yeah, <code>r</code>must be for range</p>",
        "id": 226578730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613510700
    },
    {
        "content": "<p>And <code>b</code> must be for <code>b</code>aah! I forgot to add the <code>b</code>.</p>",
        "id": 226578820,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613510743
    },
    {
        "content": "<p>b is for \"bounded\" as in \"one of the binders is x \\in y\"</p>",
        "id": 226578898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613510764
    },
    {
        "content": "<p>I am not sure <code>r</code> really is for range. It does not explain infi :) . I think it is just another variation on supremum, because several different ones were needed</p>",
        "id": 226578905,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613510769
    },
    {
        "content": "<p>the b stands for \"bounded\", as in bounded quantification</p>",
        "id": 226579259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613510925
    },
    {
        "content": "<p>ah, eric said this</p>",
        "id": 226579289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613510944
    },
    {
        "content": "<p>I wrote something about Union, sUnion and bUnion for my course notes last week: <a href=\"https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/\">https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/</a></p>",
        "id": 226579364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613510983
    }
]