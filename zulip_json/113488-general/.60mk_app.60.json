[
    {
        "content": "<p>How does the <code>mk_app</code> tactic work?</p>",
        "id": 131231220,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533899794
    },
    {
        "content": "<p>What does it apply to what? What name does it return?</p>",
        "id": 131231293,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533899948
    },
    {
        "content": "<p>It constructs an application of a theorem given by name, to a list of arguments</p>",
        "id": 131231495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900284
    },
    {
        "content": "<p>i.e. <code>mk_app ``eq [a, b]</code> will construct the term <code>%%a = %%b</code></p>",
        "id": 131231506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900317
    },
    {
        "content": "<p>where <code>a b : expr</code></p>",
        "id": 131231508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900325
    },
    {
        "content": "<p>What does %% mean?</p>",
        "id": 131231513,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900335
    },
    {
        "content": "<p>I mean that it's not <code>a</code> itself that is equal to <code>b</code>, it is the expression <code>a</code> represents</p>",
        "id": 131231522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900361
    },
    {
        "content": "<p>it's antiquotation but I'm using it schematically there</p>",
        "id": 131231565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900377
    },
    {
        "content": "<p>ok</p>",
        "id": 131231570,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900390
    },
    {
        "content": "<p>whats the difference between <code>pexpr</code> and <code>expr</code>?</p>",
        "id": 131231576,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900409
    },
    {
        "content": "<p>What do I type to get the expr representing <code>ℕ</code>?</p>",
        "id": 131231587,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900440
    },
    {
        "content": "<p><code> `(ℕ)</code> is the easy way</p>",
        "id": 131231601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900468
    },
    {
        "content": "<p>are the braces necessary?</p>",
        "id": 131231642,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900485
    },
    {
        "content": "<p>yes, without parens the backquote quotes <code>name</code>s</p>",
        "id": 131231647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900507
    },
    {
        "content": "<p>the parens signal an <code>expr</code> quotation</p>",
        "id": 131231649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900520
    },
    {
        "content": "<p>ok so<br>\n- <code> `(X) </code> means <code>expr</code> of<br>\n- <code> `X </code> means the name of<br>\n- <code> ``X  </code> means the <code>name</code>of with automatic namespace resolution<br>\n- <code>```X</code> means ?</p>",
        "id": 131231670,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900584
    },
    {
        "content": "<p>Another way to get the expr for N is <code>mk_const `nat</code></p>",
        "id": 131231717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900604
    },
    {
        "content": "<p>I can't get the backticks to work but the 3rd item in the list is supposed to have 2 backticks</p>",
        "id": 131231729,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900631
    },
    {
        "content": "<p>you have to put more quotes around the code block than are in it</p>",
        "id": 131231739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900654
    },
    {
        "content": "<p>like <code> ``x `n `` </code></p>",
        "id": 131231749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900670
    },
    {
        "content": "<p>see an earlier cheat sheet: <a href=\"#narrow/stream/113488-general/subject/Programming.20in.20Lean/near/129467739\" title=\"#narrow/stream/113488-general/subject/Programming.20in.20Lean/near/129467739\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/Programming.20in.20Lean/near/129467739</a></p>",
        "id": 131231831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900799
    },
    {
        "content": "<p>what is a <code>pexpr</code>?</p>",
        "id": 131231900,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900900
    },
    {
        "content": "<p>a pre-expression, which is the output of the parser</p>",
        "id": 131231910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900931
    },
    {
        "content": "<p>the difference between it and <code>expr</code> is the implicit arguments and other well typed data</p>",
        "id": 131231921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900954
    },
    {
        "content": "<p>ok.</p>",
        "id": 131231924,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900960
    },
    {
        "content": "<p>can I make an <code>expr</code> with an invalid type?</p>",
        "id": 131231967,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900972
    },
    {
        "content": "<p>yes</p>",
        "id": 131231969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533900975
    },
    {
        "content": "<p>so its just a syntax tree with implicit args etc</p>",
        "id": 131231974,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533900987
    },
    {
        "content": "<p>the tactics try to check stuff as they build exprs, for efficiency</p>",
        "id": 131231989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533901019
    },
    {
        "content": "<p>is there a fast way of writing <code>unit.star</code>?</p>",
        "id": 131231997,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901030
    },
    {
        "content": "<p><code>()</code></p>",
        "id": 131232003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533901035
    },
    {
        "content": "<p>for example, <code>mk_app</code> will tell you if the application you build is not well typed, but <code>expr.app</code> will not</p>",
        "id": 131232018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533901064
    },
    {
        "content": "<p>ah ok that makes sense.</p>",
        "id": 131232068,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901089
    },
    {
        "content": "<p>an <code>expr</code> is a bit more than a syntax tree, it is more like a full proof term, but it is not guaranteed to be correct</p>",
        "id": 131232085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533901131
    },
    {
        "content": "<p><code>pexpr</code> is more like a syntax tree</p>",
        "id": 131232091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533901145
    },
    {
        "content": "<p>is a <code>name</code> just the <code>namespace1.namespace2.foo</code> string stack?</p>",
        "id": 131232176,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901259
    },
    {
        "content": "<p>If I am inside a lambda expression with variable <code>x</code> and running a tactic, what would it's name be? <code>anonymous</code>?</p>",
        "id": 131232241,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901331
    },
    {
        "content": "<p>Also please could you help me untangle my misconceptions about how metavariables work in the following example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">scratch_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n    <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_meta_var</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n    <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">scratch_tac</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Which errors on <code>scratch_tac</code> with <code>invalid set_goals tactic, expressions must be meta-variables that have been declared in the current tactic_state</code></p>",
        "id": 131232535,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901830
    },
    {
        "content": "<p>I want to add a new goal which is <code>?x = ?x</code> where I don't know what <code>?x</code> is yet. If that makes sense</p>",
        "id": 131232558,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533901880
    },
    {
        "content": "<p>Are there any docs which tell me what is in <code>tactic_state</code>?</p>",
        "id": 131232741,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533902114
    },
    {
        "content": "<blockquote>\n<p>is a name just the namespace1.namespace2.foo string stack?</p>\n</blockquote>\n<p>yes</p>\n<blockquote>\n<p>If I am inside a lambda expression with variable x and running a tactic, what would it's name be? anonymous?</p>\n</blockquote>\n<p>It depends on whether the lambda has been abstracted or not. If the variable <code>x</code> is currently in the local context (i.e. left of the turnstile) then <code>x</code> will be represented in expressions as a <code>expr.local_const</code>. If <code>x</code> is bound in an expression, then it is nameless, <code>var 0</code> or such</p>",
        "id": 131232857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533902268
    },
    {
        "content": "<p>I think this is what you want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">scratch_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n   <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assert</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n</pre></div>",
        "id": 131233720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533903367
    },
    {
        "content": "<p>so re: names, I have <code>local_const : name → name → binder_info → expr → expr</code>, What do these entries correspond to?</p>",
        "id": 131243121,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533913519
    },
    {
        "content": "<p>pretty name, unique name, binder info, type (sometimes)</p>",
        "id": 131243187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913574
    },
    {
        "content": "<p>binder info means explicit, implicit, typeclass implicit, etc</p>",
        "id": 131243208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913601
    },
    {
        "content": "<p>you shouldn't trust the type, it is sometimes a dummy value</p>",
        "id": 131243243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913626
    },
    {
        "content": "<p>use <code>infer_type</code> on the variable instead</p>",
        "id": 131243254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913632
    },
    {
        "content": "<p><code>binder_info</code> implies something is being bound? Is it bound in the type?</p>",
        "id": 131243351,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533913700
    },
    {
        "content": "<p>every variable was bound at some point, but you have opened it to look inside the binder and now the variable is in the context</p>",
        "id": 131243381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913746
    },
    {
        "content": "<p>So it's the binder info for the original <code>lam</code> or <code>pi</code> that it was bound by?</p>",
        "id": 131243404,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533913789
    },
    {
        "content": "<p>yes</p>\n<div class=\"codehilite\"><pre><span></span>example {α : Type} (x : α) : α :=\nby do\n  expr.local_const pp_α uα bi_α t ← tactic.get_local `α,\n  guard (bi_α = binder_info.implicit),\n  expr.local_const pp_x ux bi_x t ← tactic.get_local `x,\n  guard (bi_x = binder_info.default),\n  `[exact x]\n</pre></div>",
        "id": 131243582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533913933
    },
    {
        "content": "<p>If this conversation were going about ten times more slowly I feel like I could learn something from it. I know that <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> had plans to learn something about tactics this summer, but my impression was that when he realised he had 100 questions he decided that it was unreasonable to spam the chat with them all, and of course I was no help. Chris and I between us can deal with essentially all the questions the other undergrads are throwing at us because we both now have a robust understanding of how to do mathematics in Lean, but we are still lacking a tactic guru and I don't quite know what to do about it.</p>",
        "id": 131243863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533914216
    },
    {
        "content": "<p>I have no spam shame.</p>",
        "id": 131244150,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533914462
    },
    {
        "content": "<p>I was just the same last August/Sept/Oct when I was learning dependent type theory. I don't regret it for one instant. Now when I see a newbie question that I can answer I try to answer it quickly to save Mario the bother.</p>",
        "id": 131244386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533914655
    },
    {
        "content": "<p>It's really important that the knowledge base expands quickly.</p>",
        "id": 131244571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533914864
    },
    {
        "content": "<p>Ok more tactics questions:<br>\nThis is the code for <code>abstract</code> from the core library:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">abstract</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">suffix</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zeta_reduce</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">fail_if_no_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">zeta_reduce</span> <span class=\"k\">then</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">zeta</span> <span class=\"k\">else</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">is_lemma</span> <span class=\"err\">←</span> <span class=\"n\">is_prop</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"n\">m</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">],</span>\n   <span class=\"n\">tac</span><span class=\"o\">,</span>\n   <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">num_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;abstract tactic failed, there are unsolved goals&quot;</span><span class=\"o\">),</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n   <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n   <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">zeta_reduce</span> <span class=\"k\">then</span> <span class=\"n\">zeta</span> <span class=\"n\">val</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">c</span>   <span class=\"err\">←</span> <span class=\"n\">mk_aux_decl_name</span> <span class=\"n\">suffix</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span>   <span class=\"err\">←</span> <span class=\"n\">add_aux_decl</span> <span class=\"n\">c</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"n\">is_lemma</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">e</span>\n</pre></div>\n\n\n<ul>\n<li><code>set_goals</code> seems to completely clobber the existing goals. It seems like it is just changing the field on <code>tactic_state</code> structure.  But if you can do this, what stops you from doing <code>m &lt;- mk_meta_var `(true), set_goals [m]</code> (or code to that effect) and just solving that?</li>\n<li>What is keeping track of the metavariables? Are these kept in <code>tactic_state</code>? </li>\n<li>Once I set a metavariable to be a goal and then solve it with a tactic, where is the proof term stored? How can I find out the status of a metavariable eg (fresh, partially instantiated etc)</li>\n<li>What stops me from making infinite-descent terms using metavariables? Eg I could solve <code>?m</code> with <code>f(?n)</code> and vice versa.</li>\n</ul>",
        "id": 131245099,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533915248
    },
    {
        "content": "<ul>\n<li>What does <code>instantiate_mvars</code> do? Is the metavariable eliminated from the state when I do this? What does it return?</li>\n</ul>",
        "id": 131245191,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533915328
    },
    {
        "content": "<ul>\n<li>Is <code>zeta</code> the one for reducing <code>let</code> bindings? I can't find it on google. Where can I find a list of the reductions in Lean?</li>\n</ul>",
        "id": 131245493,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533915540
    },
    {
        "content": "<blockquote>\n<p>set_goals seems to completely clobber the existing goals. It seems like it is just changing the field on tactic_state structure. But if you can do this, what stops you from doing m &lt;- mk_meta_var `(true), set_goals [m] (or code to that effect) and just solving that?</p>\n</blockquote>\n<p>Nothing. If you do, you will get a strange error message saying there are no goals left but metavariables remain, and your users will be confused</p>",
        "id": 131245627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915655
    },
    {
        "content": "<ul>\n<li>If the <code>zeta_reduce</code> option isn't set, it looks like this <code>abstract</code> tactic doesn't do anything. It just sets the goal to be the same as the original goal and runs <code>tac</code>.</li>\n</ul>",
        "id": 131245649,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533915680
    },
    {
        "content": "<blockquote>\n<p>What is keeping track of the metavariables? Are these kept in tactic_state? </p>\n</blockquote>\n<p>Yes. The <code>tactic_state</code> is essentially just a list of metavariables (the goals) plus a partial proof term (the result)</p>",
        "id": 131245669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915705
    },
    {
        "content": "<blockquote>\n<p>Nothing. If you do, you will get a strange error message saying there are no goals left but metavariables remain, and your users will be confused</p>\n</blockquote>\n<p>Ah so the task is to get rid of the metavars. The goal state doesn't matter. nice.</p>",
        "id": 131245734,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533915734
    },
    {
        "content": "<blockquote>\n<p>Once I set a metavariable to be a goal and then solve it with a tactic, where is the proof term stored? How can I find out the status of a metavariable eg (fresh, partially instantiated etc)</p>\n</blockquote>\n<p>The goals should be a subset of the metavariables in the result, so when they are assigned the result proof term is increased</p>",
        "id": 131245763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915782
    },
    {
        "content": "<p>Metavariables that you deal with in tactics are usually uninstantiated. There is no \"partially instantiated\", they are just instantiated to a term that contains more metavariables</p>",
        "id": 131245859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915860
    },
    {
        "content": "<p><code>get_assignment</code> returns the assignment to a metavar</p>",
        "id": 131245883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915885
    },
    {
        "content": "<blockquote>\n<p>What stops me from making infinite-descent terms using metavariables? Eg I could solve ?m with f(?n) and vice versa.</p>\n</blockquote>\n<p>I believe there is an occurs-check in <code>unify</code>, which is responsible for most metavariable assignment</p>",
        "id": 131245949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533915945
    },
    {
        "content": "<blockquote>\n<p>What does instantiate_mvars do? Is the metavariable eliminated from the state when I do this? What does it return?</p>\n</blockquote>\n<p><code>instantiate_mvars</code> takes an expr with embedded <code>mvar</code> constructors and replaces them with their assignments</p>",
        "id": 131246063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916024
    },
    {
        "content": "<p>The state is manually maintained, so metavars go away when you say so. However, <code>set_goals</code> automatically prunes assigned mvars</p>",
        "id": 131246098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916078
    },
    {
        "content": "<ul>\n<li>what happens if I try to use <code>exact e</code> where the expression depends on mvars that have already been assigned? will they be automatically assigned?</li>\n</ul>",
        "id": 131319264,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916122
    },
    {
        "content": "<blockquote>\n<p>Is zeta the one for reducing let bindings? I can't find it on google. Where can I find a list of the reductions in Lean?</p>\n</blockquote>\n<p>Yes. The zeta rule says that if <code>x : t := e</code> is in the context, then <code>x</code> reduces to <code>e</code></p>",
        "id": 131319278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916141
    },
    {
        "content": "<p>The reduction rules in lean are beta, zeta, delta, and iota, with additionally alpha and eta conversions (these are not reductions, just equalities)</p>",
        "id": 131392498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916209
    },
    {
        "content": "<blockquote>\n<p>If the zeta_reduce option isn't set, it looks like this abstract tactic doesn't do anything. It just sets the goal to be the same as the original goal and runs tac.</p>\n</blockquote>\n<p>The purpose of the <code>abstract</code> tactic is to take the result of the enclosed tactic script and save the result to a new auxiliary definition</p>",
        "id": 131392549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916290
    },
    {
        "content": "<p><code>return</code> is not an early abort in lean!</p>",
        "id": 131465729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916328
    },
    {
        "content": "<p>what is an auxillary definition?</p>",
        "id": 131538857,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916357
    },
    {
        "content": "<p>It basically just means produce a value with no side effects</p>",
        "id": 131538860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916363
    },
    {
        "content": "<p>it's just a definition with an obscure derived name</p>",
        "id": 131538882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916393
    },
    {
        "content": "<p>This line</p>\n<div class=\"codehilite\"><pre><span></span>   val ← if zeta_reduce then zeta val else return val,\n</pre></div>\n\n\n<p>is equivalent to the following imperative code:</p>\n<div class=\"codehilite\"><pre><span></span>if (zeta_reduce) {val = zeta(val)}\n</pre></div>",
        "id": 131539010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916509
    },
    {
        "content": "<p>yeah I'm ok with <code>return</code></p>",
        "id": 131539031,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916537
    },
    {
        "content": "<p>The original question was spawned from a lack of understanding of goals vs metavars</p>",
        "id": 131539087,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916579
    },
    {
        "content": "<p>goals are metavariables, but there are metavars in the result that are not goals, and there are also metavars that are not in the result</p>",
        "id": 131612227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916651
    },
    {
        "content": "<p>Right, and when you <code>set_goal m</code> and solve it. <code>m</code> is now assigned, but the actual proof term hasn't advanced</p>",
        "id": 131612294,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916698
    },
    {
        "content": "<p>I'm not actually sure when the advancing happens. Lean is very good at making assigned metavars act as though they weren't there at all</p>",
        "id": 131685438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916751
    },
    {
        "content": "<p>for most purposes you can just say that the proof term is advanced once you assign the metavar</p>",
        "id": 131758568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916781
    },
    {
        "content": "<blockquote>\n<p>I'm not actually sure when the advancing happens. Lean is very good at making assigned metavars act as though they weren't there at all</p>\n</blockquote>\n<p>yes this is what is throwing me</p>",
        "id": 131758569,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916785
    },
    {
        "content": "<p>there are a few gotchas to do with \"old\" metavars that are assigned but not purged, but these are fairly rare</p>",
        "id": 131758649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916825
    },
    {
        "content": "<p>If you ask for the <code>result</code>, I'm pretty sure you will see the result of all assignments</p>",
        "id": 131758686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916868
    },
    {
        "content": "<p>Note that you can't just assign a metavar - there is no direct function for this that I could see on a quick perusal</p>",
        "id": 131831823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916915
    },
    {
        "content": "<ul>\n<li>How does one purge a metavar?</li>\n<li>If I make a new metavar <code>m</code> trying to prove <code>false</code>, and then assign all metavars except <code>m</code>, can I still finish the proof?</li>\n</ul>",
        "id": 131831825,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533916916
    },
    {
        "content": "<p>when you assign a metavar indirectly through <code>unify</code>, these details are taken care of for you</p>",
        "id": 131831879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533916945
    },
    {
        "content": "<blockquote>\n<p>How does one purge a metavar?</p>\n</blockquote>\n<p>How does one not? Once a metavar is assigned it isn't eligible to be a goal anymore, <code>set_goals</code> will remove it</p>",
        "id": 131831937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917023
    },
    {
        "content": "<p>Would doing <code>set_goal [m]</code> and then <code>exact x</code> assign the metavar?</p>",
        "id": 131831942,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917027
    },
    {
        "content": "<p>yes, and it would also clear the goal</p>",
        "id": 131831985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917043
    },
    {
        "content": "<p><code>exact x</code> is basically just <code>unify m x</code></p>",
        "id": 131832011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917071
    },
    {
        "content": "<p>with some goal management, I think</p>",
        "id": 131832021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917093
    },
    {
        "content": "<blockquote>\n<p>If I make a new metavar m trying to prove false, and then assign all metavars except m, can I still finish the proof?</p>\n</blockquote>\n<p>Creating a metavar does not tie it to your proof. These \"dangling\" metavars are not tracked, and give that error you saw before if you try to set them as goals</p>",
        "id": 131832083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917160
    },
    {
        "content": "<p>so yes, this metavar would not affect anything</p>",
        "id": 131832146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533917180
    },
    {
        "content": "<p>ah ok so you can't even set a dangler as a goal</p>",
        "id": 131832149,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917188
    },
    {
        "content": "<p>ah I see <code>assert T</code> is changing the target to <code>T -&gt; target</code>. But <code>setgoal</code> doesn't do that stuff.</p>",
        "id": 131832484,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917495
    },
    {
        "content": "<p>So just let me reask two questions that I am still unsure about;</p>",
        "id": 131832712,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917677
    },
    {
        "content": "<ul>\n<li>How can I find the metavars that are currently in play?</li>\n</ul>",
        "id": 131832729,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917702
    },
    {
        "content": "<ul>\n<li>what happens if I try to use <code>exact e</code> where the expression depends on mvars that have already been assigned? will they be automatically assigned?</li>\n</ul>",
        "id": 131832759,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917745
    },
    {
        "content": "<blockquote>\n<p>The original question was spawned from a lack of understanding of goals vs metavars</p>\n</blockquote>\n<p>You've obviously not read the docs. See setion 8.5 of \"Programming in Lean\":</p>\n<p>\"8.5 Metavariables and Unification<br>\n[This section is still under construction. It will discuss the notion of a metavariable and<br>\nits local context, with the interesting bit of information that goals in the tactic state are<br>\nnothing more than metavariables.\"</p>",
        "id": 131832765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917757
    },
    {
        "content": "<p>As you can see, this is all very clearly documented :-)</p>",
        "id": 131832818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917780
    },
    {
        "content": "<p>yes I found that doc earlier and thought \"finally, one document that I can just read so I don't have to bother people by asking potentially silly questions\"</p>",
        "id": 131832870,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917848
    },
    {
        "content": "<p>I've read it twice!</p>",
        "id": 131832876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917858
    },
    {
        "content": "<p>What there is of it, anyway.</p>",
        "id": 131832882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917866
    },
    {
        "content": "<p>The parts that are there are high-qual. I hasten to add</p>",
        "id": 131832928,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533917890
    },
    {
        "content": "<p>Yes absolutely. The docs are excellent. There's just not enough of them.</p>",
        "id": 131832940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917906
    },
    {
        "content": "<p>Avigad writes very well.</p>",
        "id": 131832954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917920
    },
    {
        "content": "<p>And knows his stuff.</p>",
        "id": 131832960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533917926
    },
    {
        "content": "<p>I wonder whether we could write \"The Lean book\" in a similar fashion as \"The HoTT book\" was written, somewhere in the near future.</p>",
        "id": 131833085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918055
    },
    {
        "content": "<p>I learnt a lot about the basics of dependent type theory from doing all the exercises in Theorem Proving In Lean. What I need is a whole bunch of high quality basic exercises about exprs etc. Unfortunately learning meta mode is not high priority for me right now so it never happens. I feel my time is currently better spent telling other mathematicians about what I've managed to assimilate about doing mathematics in Lean. I will get to tactics in the end, but secretly hope some more docs will appear before I get there.</p>",
        "id": 131833095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533918066
    },
    {
        "content": "<blockquote>\n<p>How can I find the metavars that are currently in play?</p>\n</blockquote>\n<p>Lean doesn't make it particularly easy to get the full list. You are supposed to be responsible with your goal management so you don't \"drop\" any goals you will need later. But it is possible, while expensive, to just crawl the <code>result</code> looking for metavars. The <code>metavariables</code> tactic in mathlib does this</p>",
        "id": 131833119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918112
    },
    {
        "content": "<p>Right, so we have to lock Mario and Simon into a room for a day, and then that chapter will be a lot better!</p>",
        "id": 131833167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918133
    },
    {
        "content": "<blockquote>\n<p>what happens if I try to use exact e where the expression depends on mvars that have already been assigned? will they be automatically assigned?</p>\n</blockquote>\n<p>yes</p>",
        "id": 131833194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918179
    },
    {
        "content": "<p>As you know I am trying to write \"Lean for mathematicians\", but my plans have gone awry -- I had thought that my students would be completely unable to make any progress without my writing it, but they have somehow taught each other how to use Lean without my helping. Different people brought different skills to the table, and they just all talked to each other. So the book languished because I wasn't needed and I spent a lot of time getting some kind of overview of what exactly was already in mathlib.</p>",
        "id": 131833287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533918274
    },
    {
        "content": "<p>Would it make sense to start a book project in <code>leanprover-community</code>?</p>",
        "id": 131833428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918475
    },
    {
        "content": "<p>Maybe you should ask jeremy to go open source?</p>",
        "id": 131833481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533918519
    },
    {
        "content": "<p>I don't know Jeremy, and he doesn't know me. You know him a lot better... [hint hint]</p>",
        "id": 131833499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918544
    },
    {
        "content": "<p>Technically, it is already open source. We could just fork the existing book. But it is nice to ask for permission. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 131833589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918640
    },
    {
        "content": "<p>Maybe a PR on the existing project would be ok.</p>",
        "id": 131833625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533918688
    },
    {
        "content": "<blockquote>\n<p>But it is possible, while expensive, to just crawl the <code>result</code> looking for metavars. The <code>metavariables</code> tactic in mathlib does this</p>\n</blockquote>\n<p>How do I get <code>result</code>?</p>",
        "id": 131834197,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919369
    },
    {
        "content": "<p>is it the same as <code>interaction_monad.result</code></p>",
        "id": 131834219,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919414
    },
    {
        "content": "<p>In which case the relevant object is <code>tactic_result</code></p>",
        "id": 131834225,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919431
    },
    {
        "content": "<p>But there don't seem to be any consts in lean lib for inspecting <code>tactic_result</code></p>",
        "id": 131834298,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919499
    },
    {
        "content": "<p>I am talking about <code>tactic.result</code></p>",
        "id": 131834314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533919518
    },
    {
        "content": "<p>oops yes</p>",
        "id": 131834319,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919530
    },
    {
        "content": "<p><code>interaction_monad.result</code> is a simple inductive type containing the result of a tactic execution, which you can destruct with <code>match</code></p>",
        "id": 131834370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533919570
    },
    {
        "content": "<p>I got confused between <code>tactic_result</code> and <code>tactic_state</code>. <code>tactic_result  := interaction_monad.result tactic_state</code></p>",
        "id": 131834376,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919581
    },
    {
        "content": "<p>Sorry I just completely misread the source code. <code>tactic.result</code> is totally unrelated to <code>tactic_result</code>. Sorry</p>",
        "id": 131834539,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533919840
    },
    {
        "content": "<p>when you put it that way...</p>",
        "id": 131834547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533919863
    },
    {
        "content": "<p>How would one write <code>assert</code> using only <code>mk_metavar</code> and  <code>set_goal</code> moves? is it possible?</p>",
        "id": 131834650,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920021
    },
    {
        "content": "<p>something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">m</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">result</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_metavar</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">b</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_metavar</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">unify</span> <span class=\"n\">m</span>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 131834962,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920418
    },
    {
        "content": "<p>modulo any obvious errors</p>",
        "id": 131834983,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920461
    },
    {
        "content": "<ul>\n<li>If I use <code>get_goals</code>, I get a list of expressions. Is <code>target</code> just getting the first of these?</li>\n</ul>",
        "id": 131835112,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920629
    },
    {
        "content": "<p>Here's a decent approximation:</p>\n<div class=\"codehilite\"><pre><span></span>meta def assert&#39; (h : name) (t : expr) : tactic unit := do\n  g :: gs ← get_goals,\n  m₂ ← mk_meta_var t,\n  t&#39; ← infer_type g,\n  m₁ ← mk_meta_var (expr.pi h binder_info.default t t&#39;),\n  unify g (m₁ m₂),\n  set_goals (m₁ :: m₂ :: gs),\n  intro h &gt;&gt; skip\n</pre></div>\n\n\n<p>I don't know if there is a way to avoid the <code>intro</code> - you need a way to change the local context</p>",
        "id": 131835195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920762
    },
    {
        "content": "<p>It would be interesting to find a minimal list of fundamental tactics</p>",
        "id": 131835255,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920817
    },
    {
        "content": "<p>lean wasn't really designed for a small API</p>",
        "id": 131835276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920846
    },
    {
        "content": "<p>there are a lot of features which are still not quite available</p>",
        "id": 131835286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533920861
    },
    {
        "content": "<p>I know but it helps with learning, because if I find <code>meta constant ...</code> in <code>tactics.lean</code> I don't know whether I need to care about it to understand how lean works</p>",
        "id": 131835344,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533920905
    },
    {
        "content": "<p>Then I could just read the wordy explanation for the minimum fundamental tactics and read the code for the derived ones. I only have to grasp the fundamental ones</p>",
        "id": 131835444,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533921005
    },
    {
        "content": "<blockquote>\n<p>there are a lot of features which are still not quite available</p>\n</blockquote>\n<p>please could you give some examples?</p>",
        "id": 131835472,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533921058
    },
    {
        "content": "<p>lean 4 is planning to roll out quite a bit more API surface area</p>",
        "id": 131835503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921100
    },
    {
        "content": "<p>right now you can't do much with the parser or elaborator</p>",
        "id": 131835514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921121
    },
    {
        "content": "<p>there is <code>lean.parser</code> but it's not nearly enough to do everything you should be able to</p>",
        "id": 131835567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921145
    },
    {
        "content": "<p>you can't access the AST for the source or your place in it</p>",
        "id": 131835580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921184
    },
    {
        "content": "<p>of course I have a mile long wishlist but I don't know how helpful that is</p>",
        "id": 131835648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921268
    },
    {
        "content": "<p>there will also be a <code>type_context</code> monad for statefully dealing with the type context. Right now it gets reinitialized a lot which makes doing custom expr traversals really expensive in lean</p>",
        "id": 131835743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533921396
    },
    {
        "content": "<blockquote>\n<p>Now when I see a newbie question that I can answer I try to answer it quickly to save Mario the bother.</p>\n</blockquote>\n<p>I try to do the same, I think it's important. Mario, I think you should wait at least a couple of hours before answering a question almost anyone here could answer, this would be a better resource allocation policy.</p>",
        "id": 131843910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533931704
    },
    {
        "content": "<blockquote>\n<p>I spent a lot of time getting some kind of overview of what exactly was already in mathlib.</p>\n</blockquote>\n<p>Did you write anything about this recently? I need a break from uniform spaces so yesterday I started a new doc branch in my local fork. Maybe I should push it to the community fork immediately.</p>",
        "id": 131844058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533931917
    },
    {
        "content": "<blockquote>\n<p>Maybe you should ask jeremy to go open source?</p>\n</blockquote>\n<p>I'm not sure this is good idea. Those books, especially TPIL, have a unity of vision and style. It makes reading them feel like reading a book and not a technical reference. You can suggest improvements and additional topics, I did that and Jeremy used some. But otherwise I think we should rather write other sources of documentation.</p>",
        "id": 131844234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1533932125
    }
]