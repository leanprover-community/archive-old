[
    {
        "content": "<p>Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddMon</span> <span class=\"c1\">--doesn't work: invalid namespace name 'AddMon'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddMon</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">AddMon</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddMon</span> <span class=\"c1\">--now it works</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">of</span>\n</code></pre></div>\n<p>My guess is: As long as the namespace <code>AddMon</code> has never been declared, it is considered invalid to open it. And <code>AddMon</code> has never been declared as a namespace because all the definitions it contains were created by <code>to_additive</code>, and not manually. Is this correct? And how can it be fixed?</p>",
        "id": 252923064,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631380682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> Is this something that should be fixed in core?</p>",
        "id": 252923241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631380860
    },
    {
        "content": "<p>If someone who knows how namespaces work could comment on this issue, that would be great! This is actually occurring in a project I'm working on about filtered colimits: First, I defined a bunch of stuff in the namespace <code>Mon.filtered_colimits</code> with <code>@[to_additive]</code> everywhere. Later, for semirings, I would like to both open the namespaces <code>Mon.filtered_colimits</code>and <code>AddMon.filtered_colimits</code>.</p>",
        "id": 253140511,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631559135
    },
    {
        "content": "<p>As a temporary fix, I guess you could define a dumb thing in <code>AddMon</code> to make it openable?</p>",
        "id": 253140735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631559232
    },
    {
        "content": "<p>I could fix it by either</p>\n<ul>\n<li>Making an explicit empty namespace <code>AddMon.filtered_colimits</code> as above, or</li>\n<li>Referencing all the definitions I need by their full name <code>Add.filtered_colimits.xyz</code>.<br>\nWhile both of these options aren't terrible, they feel a little unsatisfactory...</li>\n</ul>",
        "id": 253140736,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631559232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/can't.20open.20namespace.20AddMon/near/253140735\">said</a>:</p>\n<blockquote>\n<p>As a temporary fix, I guess you could define a dumb thing in <code>AddMon</code> to make it openable?</p>\n</blockquote>\n<p>Yes, that's the temporary fix I'm going with. But would this be acceptable in mathlib?</p>",
        "id": 253140853,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631559269
    },
    {
        "content": "<p>I think it's fine if you include a comment explaining it. I wouldn't wait for the issue to be fixed in Lean 3 (though it could be an easy patch, I have no idea).</p>",
        "id": 253144084,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1631560619
    },
    {
        "content": "<p>Maybe even a <code>private</code> def would do it? I haven't tried.</p>",
        "id": 253145949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631561295
    },
    {
        "content": "<p>I think this can be patched on the mathlib side by modifying to additive to add the right namespace whenever it produces à la:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span> <span class=\"n\">tactic.set_env</span> <span class=\"bp\">$</span> <span class=\"n\">environment.add_namespace</span> <span class=\"n\">e</span> <span class=\"bp\">`</span><span class=\"n\">blah</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">blah</span>\n</code></pre></div>",
        "id": 253147279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631561880
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/618\">lean#618</a></p>",
        "id": 253153221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631564167
    },
    {
        "content": "<p>Oh to additive uses add decl, I take my comment back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253154863,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631564813
    },
    {
        "content": "<p>Hm, the PR reveals a <a href=\"https://github.com/leanprover-community/lean/pull/618#issuecomment-918632981\">thorny issue</a> which might require some design work. In short: does the internal declaration <code>foo.equations._eqn_1</code> in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>mean that <code>foo</code> and <code>foo.equations</code> should be namespaces? This affects the behavior of <code>open</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span> <span class=\"c1\">-- used to open bar.foo, now opens foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">end</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 253171315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631572678
    },
    {
        "content": "<p>Wow, thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! I would have never been able to fix this myself.</p>",
        "id": 253204228,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631601068
    },
    {
        "content": "<p>Should we try to come to some conclusion as to whether <code>foo.equations</code> should become a namespace? Or add the workaround to to_additive? I think I'm hitting this issue again in <a href=\"https://github.com/leanprover-community/mathlib/issues/9790\">#9790</a> so it would be nice to resolve it either way. Of course I should be able to work around it for now</p>",
        "id": 258057149,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634574401
    },
    {
        "content": "<p>Actually I guess I misread the PR, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> does this mean you've implemented option 2 there and are just waiting for review on the Lean PR?</p>",
        "id": 258058092,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634574743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Sorry about the confusion. The PR <a href=\"https://github.com/leanprover-community/lean/issues/618\">lean#618</a> is \"done\", it just needs review. I probably scared away all the reviewers with a long comment talking about a design question</p>",
        "id": 258075312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634581241
    }
]