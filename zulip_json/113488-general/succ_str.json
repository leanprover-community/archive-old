[
    {
        "content": "<p>What is <code>succ_str</code> in Lean 2? It's used in <a href=\"https://github.com/cmu-phil/Spectral\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral\">https://github.com/cmu-phil/Spectral</a> but doesn't seem to be defined anywhere.</p>",
        "id": 166438625,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692342
    },
    {
        "content": "<p>could you be more specific?</p>",
        "id": 166438720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558692432
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/cmu-phil/Spectral/blob/2913de520d4fb2c8177a8cbb7e64938291248d03/algebra/module_chain_complex.hlean#L11\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral/blob/2913de520d4fb2c8177a8cbb7e64938291248d03/algebra/module_chain_complex.hlean#L11\">https://github.com/cmu-phil/Spectral/blob/2913de520d4fb2c8177a8cbb7e64938291248d03/algebra/module_chain_complex.hlean#L11</a></p>",
        "id": 166438747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692473
    },
    {
        "content": "<p>It appears to be \"something with a successor\" but I'm guessing there is more to it than that</p>",
        "id": 166438813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692537
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/hott/homotopy/chain_complex.hlean#L26\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/hott/homotopy/chain_complex.hlean#L26\">https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/hott/homotopy/chain_complex.hlean#L26</a></p>",
        "id": 166438831,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558692564
    },
    {
        "content": "<p>\"Successor structure\"</p>",
        "id": 166438843,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558692587
    },
    {
        "content": "<p>Oh thanks</p>",
        "id": 166438846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692590
    },
    {
        "content": "<p>How did you find that so fast?</p>",
        "id": 166438975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692696
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean2/search?q=%22+succ_str+%22&amp;unscoped_q=%22+succ_str+%22\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/search?q=%22+succ_str+%22&amp;unscoped_q=%22+succ_str+%22\">https://github.com/leanprover/lean2/search?q=%22+succ_str+%22&amp;unscoped_q=%22+succ_str+%22</a></p>",
        "id": 166439098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558692825
    },
    {
        "content": "<p>Ah, I missed that it was part of the lean2 repo and not a separate hott library.</p>",
        "id": 166439171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558692880
    },
    {
        "content": "<p>:D</p>",
        "id": 166439397,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558693135
    },
    {
        "content": "<p>Yes, it's just a type with a successor function. The reason we used that is that if we have a sequence <code>X</code> of types over the natural numbers or the integers, then the maps can go from <code>X n -&gt; X (n+1)</code> or from <code>X n -&gt; X (n-1)</code>.</p>",
        "id": 166475834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558720946
    },
    {
        "content": "<p>(there are other options, for example maps <code>X (n-1) -&gt; X n</code> or <code>X (n+1) -&gt; X n</code>, which are equivalent (but not definitionally equal to) when indexing over the integers and \"almost equivalent\" when indexing over the natural numbers. We didn't feel a need to use these in Lean 2)</p>",
        "id": 166475996,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558721077
    },
    {
        "content": "<p>We also used other indexing types. For example for the long exact sequence of homotopy groups, we indexed over <code>nat \\times fin 3</code>. The reason is that if you index over <code>nat</code> then <code>X(3n)=\\pi_n(B)</code> and <code>X(3n+1)=\\pi_n(E)</code> and <code>X(3n+2)=\\pi_n(F)</code>(if you start with a map <code>E -&gt; B</code> with fiber <code>F</code>). However, there is no way to get these equalities definitionally, which would be a huge pain. You can get them definitionally if you index over <code>N x 3</code> (where <code>(n,i)</code> of course represents <code>3n+i</code>).</p>",
        "id": 166476188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558721254
    },
    {
        "content": "<p>This seems like a pretty good approach! Once the monoidal cats land, we should build additive/abelian cats and port this stuff over from Lean 2.</p>",
        "id": 166476445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558721462
    },
    {
        "content": "<p>Yes, it looks very useful. And sometimes you encounter Z/2-graded chain complexes or even just ungraded ones (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">d : A \\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">d</span><span class=\"mrel\">:</span><span class=\"mord mathit\">A</span><span class=\"mrel\">→</span><span class=\"mord mathit\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d^2 = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span>)</p>",
        "id": 166476598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558721578
    },
    {
        "content": "<p>I wondered if there might be some extra axiom like two elements with the same successor are equal... since I can't think of a reasonable situation where that would fail</p>",
        "id": 166476652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558721638
    },
    {
        "content": "<p>You can also read the comment at the top of this file with some explanation: <a href=\"https://github.com/leanprover/lean2/blob/master/hott/homotopy/LES_of_homotopy_groups.hlean\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/homotopy/LES_of_homotopy_groups.hlean\">https://github.com/leanprover/lean2/blob/master/hott/homotopy/LES_of_homotopy_groups.hlean</a></p>\n<p>One disadvantage is that these sequences are a bit hard to work with. For example, all the constructions with long exact sequences are with pointed sets, but then at the bottom of the LES-file we need to convince Lean that most of these pointed sets are actually groups (and most of those are abelian). This turned out to be a bit awkward.</p>",
        "id": 166476777,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558721721
    },
    {
        "content": "<p>Also, it is not quite general to capture short exact sequences (where some elements don't have a successor).<br>\nAnd as Reid mentions: it is interesting that we never have to use that the successor is injective (at least if we formulate all results in the right way)</p>",
        "id": 166476902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558721810
    },
    {
        "content": "<p>In Agda they used a different approach, which is definitely worth considering. <br>\nInstead of a single long exact sequence </p>\n<div class=\"codehilite\"><pre><span></span>... -&gt;\n\\pi_{n+2}(F) -&gt; \\pi_{n+2}(E) -&gt; \\pi_{n+2}(B) -&gt;\n\\pi_{n+1}(F) -&gt; \\pi_{n+1}(E) -&gt; \\pi_{n+1}(B) -&gt;\n\\pi_n(F) -&gt; \\pi_n(E) -&gt; \\pi_n(B) -&gt;\n...\n</pre></div>\n\n\n<p>you consider a sequence of short exact sequences </p>\n<div class=\"codehilite\"><pre><span></span>\\pi_{n+2}(B) -&gt; \\pi_{n+1}(F) -&gt; \\pi_{n+1}(E) -&gt; \\pi_{n+1}(B) -&gt; \\pi_n(F)\n</pre></div>\n\n\n<p>one for each <code>n</code>.</p>\n<p>This captures the same information and has the advantage that you only have to consider short exact sequences, not SESs and LESs separately. (And all my attempts to find a common generalization of LESs and SESs seems like it is more work than doing them separately.)</p>",
        "id": 166477407,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558722140
    },
    {
        "content": "<p>Won't we want the category of complexes anyway? As soon as we start doing homological algebra, derived categories, etc...</p>",
        "id": 166477611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558722276
    },
    {
        "content": "<p>So you would at least need a very good interface to \"long\" sequences.</p>",
        "id": 166477669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558722311
    },
    {
        "content": "<p>Oh, that's a good point. Once we start to talk about the category of LESs, then we would indeed want them as a single type.</p>",
        "id": 166477780,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558722379
    }
]