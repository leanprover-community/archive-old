[
    {
        "content": "<p>In LTE I'm hitting goals of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.has_scalar</span>\n</code></pre></div>\n<p>Should <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_scalar\">docs#finsupp.has_scalar</a> be removed, now that we have <code>smul_with_zero</code>?</p>",
        "id": 230573010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615921889
    },
    {
        "content": "<p>Those don't really sound interchangable to me</p>",
        "id": 230574795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615922572
    },
    {
        "content": "<p>Does refl not close that?</p>",
        "id": 230574810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615922582
    },
    {
        "content": "<p>Ah, but the typeclass argument on that instance should now be relaxed from semimodule to smul_with_zero</p>",
        "id": 230574894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615922628
    },
    {
        "content": "<p><code>refl</code> doesn't have the slightest intention of closing this goal <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 230575510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615922851
    },
    {
        "content": "<p>If you are interested in seeing where these come from, see <code>polyhedral_lattice/finsupp.lean</code> in the <code>polyhedral-basis</code> branch of LTE</p>",
        "id": 230575792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615922981
    },
    {
        "content": "<p>Would you mind showing it with pp.all?</p>",
        "id": 230576708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615923269
    },
    {
        "content": "<p>Sorry, just pp.implicit is enough</p>",
        "id": 230576753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615923290
    },
    {
        "content": "<p>Voila:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.normed_group</span> <span class=\"n\">ι</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_3</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℕ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.semiring</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.normed_group</span> <span class=\"n\">ι</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_3</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.semiring</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule.to_mul_action_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"n\">nat.semiring</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.normed_group</span> <span class=\"n\">ι</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_3</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.normed_group</span> <span class=\"n\">ι</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_3</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">finsupp.has_scalar</span> <span class=\"n\">ι</span> <span class=\"bp\">Λ</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.semiring</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_normed_group</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"bp\">Λ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_normed_group</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 230577682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615923623
    },
    {
        "content": "<p><del>ouch... lean could do a better job at linebreaks )-;</del> there, that looks better</p>",
        "id": 230577749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615923642
    },
    {
        "content": "<p>nat_semimodule is the culprit here</p>",
        "id": 230578667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615923995
    },
    {
        "content": "<p>Every \"compound\" type built out of additive monoids gets two nat-module structures; one elementwise (as this is how all other semimodule structures are inherited), and one derived from addition (which itself is elementwise)</p>",
        "id": 230579154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924165
    },
    {
        "content": "<p>These are rarely defeq</p>",
        "id": 230579188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924180
    },
    {
        "content": "<p>So we should kill the one coming from addition, right?</p>",
        "id": 230579612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615924317
    },
    {
        "content": "<p>I'm beginning to think so</p>",
        "id": 230579680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924330
    },
    {
        "content": "<p>Or put it in a locale at least</p>",
        "id": 230579711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924340
    },
    {
        "content": "<p>Maybe that just shouldn't be a global instance</p>",
        "id": 230579724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615924344
    },
    {
        "content": "<p>exactly</p>",
        "id": 230579728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615924347
    },
    {
        "content": "<p>Along with the one for int and rat</p>",
        "id": 230579736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924350
    },
    {
        "content": "<p>And the algebras for the same</p>",
        "id": 230579748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924356
    },
    {
        "content": "<p>But a lot of lemmas will then need to assume <code>[semimodule \\N M]</code>, which you could argue is mathematically redundant</p>",
        "id": 230579862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924398
    },
    {
        "content": "<p>Well... will it really be a lot?</p>",
        "id": 230579899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615924422
    },
    {
        "content": "<p>I'm less concerned about the cost of changing them, and more concerned about mathematicians thinking \"this is stupid, why am I telling lean my additive monoid had a nat-module structure\" and being told \"it's an implementation detail\"</p>",
        "id": 230580142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924511
    },
    {
        "content": "<p>It's all a bit annoying, because we have a proof that all these structures are equivalent, but it's not enough unless they're also defeq</p>",
        "id": 230580510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615924666
    },
    {
        "content": "<p>Well, at least for <code>semimodule nat M</code> we know it's a subsingleton.</p>",
        "id": 230582030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615925210
    },
    {
        "content": "<p>But for <code>has_scalar nat M</code> that's obviously not true.</p>",
        "id": 230582055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615925221
    },
    {
        "content": "<p>Right, but I think in this case both instances are derived from semimodules, and somehow lean can't see that?</p>",
        "id": 230582270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615925292
    },
    {
        "content": "<p><code>finsupp.has_scalar</code> is not projecting out of a semimodule instance on <code>finsupp</code>, right?</p>",
        "id": 230582799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615925479
    },
    {
        "content": "<p>Hmm, good point; the \"project out of  semimodule\" path is lower priority</p>",
        "id": 230583643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615925792
    },
    {
        "content": "<p>What happens if you lower a lot the piority of the bad nat semimodule instance (setting it to 10 or whatever)?</p>",
        "id": 230584650,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615926169
    },
    {
        "content": "<p>I suspect there are few if any situations where that would actually help</p>",
        "id": 230586014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615926674
    },
    {
        "content": "<p>But it wouldn't do any harm</p>",
        "id": 230586275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615926763
    },
    {
        "content": "<p>Normally, it means that the other instances should be found before, so I am curious what this gives in Johan's specific situation.</p>",
        "id": 230586315,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615926782
    },
    {
        "content": "<p>In my experience the usual cause is using nat's smul in a lemma statement about a general M, which has no other instances so chooses <code>nat.semimodule</code>, but then applying it to a compound type like <code>M := prod N P</code> which has a different instance.</p>",
        "id": 230589777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615928168
    },
    {
        "content": "<p>Does this mean that, just like for <code>[decidable ...]</code>, we should just assume <code>[semimodule \\N E]</code>in the lemmas that mention some nat multiplication. But the user is still free to use the nsmul multiplication if he likes.</p>",
        "id": 230592621,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615929310
    },
    {
        "content": "<p>Yes, that's what I'm thinking</p>",
        "id": 230593596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615929784
    },
    {
        "content": "<p>At which point, we may as well just hide the global instance behind a locale</p>",
        "id": 230593642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615929807
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"n\">add_comm_group.int_module</span>\n</code></pre></div>\n<p>solves all the issues</p>",
        "id": 230645931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615964257
    },
    {
        "content": "<p>But now I do use the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">polyhedral_lattice</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">normed_group</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- unfortunately, we need the following assumptions, for technical reasons</span>\n<span class=\"o\">[</span><span class=\"n\">nat_semimodule</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">int_semimodule</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n<span class=\"c1\">-- now we get to the actual definition</span>\n<span class=\"o\">(</span><span class=\"n\">finite_free</span> <span class=\"o\">:</span> <span class=\"n\">finite_free</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">polyhedral</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">),</span> <span class=\"n\">generates_norm</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230645946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615964281
    },
    {
        "content": "<p>Which seems slightly awkward</p>",
        "id": 230645984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615964289
    },
    {
        "content": "<p>There is now just one place at the API boundary where I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">ff</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">finite_free</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"n\">polyhedral_lattice.finite_free</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">polyhedral_lattice.int_semimodule</span> <span class=\"bp\">Λ</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.int_module</span> <span class=\"bp\">Λ</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">oops</span> <span class=\"n\">at</span> <span class=\"n\">ff</span><span class=\"bp\">Λ</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 230647001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615965217
    },
    {
        "content": "<p>So with a more principled refactor, I guess those could also be removed</p>",
        "id": 230647014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615965235
    },
    {
        "content": "<p>Shouldn't those be arguments not fields?</p>",
        "id": 230647986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615965936
    },
    {
        "content": "<p>Then I can't use <code>bundled</code> to build the category</p>",
        "id": 230648130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615966021
    },
    {
        "content": "<p>How do we bundle things like modules and algebras today, which also take multiple arguments?</p>",
        "id": 230648202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615966072
    },
    {
        "content": "<p>By hand: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/category/Algebra/basic.lean#L28\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/category/Algebra/basic.lean#L28</a></p>",
        "id": 230648326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615966137
    },
    {
        "content": "<p>I feel like that's probably the better approach</p>",
        "id": 230648581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615966316
    },
    {
        "content": "<p>But admittedly more work</p>",
        "id": 230648626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615966326
    }
]