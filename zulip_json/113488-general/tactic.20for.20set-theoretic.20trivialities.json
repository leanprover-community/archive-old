[
    {
        "content": "<p>I am beginning to tire of goals of the form <code>Ua ∩ Ub ∩ Uc ⊆ Ua ∩ Ub ∩ (Ua ∩ Uc)</code></p>",
        "id": 126866089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898248
    },
    {
        "content": "<p>Is there a tactic which solves them?</p>",
        "id": 126866091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898255
    },
    {
        "content": "<p>[these are sets]</p>",
        "id": 126866093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898261
    },
    {
        "content": "<p>[let me stress that I can solve them, it's just the novelty is wearing off]</p>",
        "id": 126866107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898312
    },
    {
        "content": "<p><code>by finish</code>?</p>",
        "id": 126866109,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526898314
    },
    {
        "content": "<p>didn't work for me for this one</p>",
        "id": 126866116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898353
    },
    {
        "content": "<p>cc and simp don't work either</p>",
        "id": 126866165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898425
    },
    {
        "content": "<p>[Prediction : in about 8 hours Scott wakes up and remarks that one of his secret tactics does the job immediately]</p>",
        "id": 126866176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898479
    },
    {
        "content": "<p><code>solve_by_elim</code>?</p>",
        "id": 126866279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526898642
    },
    {
        "content": "<p>Note that any such tactic will have to deal with the fact that <code>exact ⟨Ha,Hb,⟨Ha,Hc⟩⟩</code> is not a proof of <code>y ∈ Ua ∩ Ub ∩ (Ua ∩ Uc)</code> because of stupid left associativity of \\cap</p>",
        "id": 126866331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898744
    },
    {
        "content": "<p><code>solve_by_elim</code> doesn't work</p>",
        "id": 126866342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526898807
    },
    {
        "content": "<p>I think <code>finish</code> was intended to work on those goals</p>",
        "id": 126866351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526898836
    },
    {
        "content": "<p>but you may need to use its options</p>",
        "id": 126866401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526898853
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {α} (Ua Ub Uc : set α) : Ua ∩ Ub ∩ Uc ⊆ Ua ∩ Ub ∩ (Ua ∩ Uc) :=\nby simp [set.subset_def] {contextual := tt}\n</pre></div>",
        "id": 126866429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526898961
    },
    {
        "content": "<p>it reminds me I don't know what <code>finish</code> solves. Does it work on any boolean algebra?</p>",
        "id": 126866528,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526899098
    },
    {
        "content": "<p><code>by finish[set.subset_def]</code> also works</p>",
        "id": 126866532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899130
    },
    {
        "content": "<p>it works on the boolean algebra of propositions...</p>",
        "id": 126866533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526899140
    },
    {
        "content": "<p>that's why <code>subset_def</code> is needed here</p>",
        "id": 126866539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526899153
    },
    {
        "content": "<p>people just bloody abusing <code>finish</code></p>",
        "id": 126866767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899579
    },
    {
        "content": "<p>We're too classical for you</p>",
        "id": 126866773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899616
    },
    {
        "content": "<p>Do you think it's true in constructive maths?</p>",
        "id": 126866779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899627
    },
    {
        "content": "<p>I would have no idea :-)</p>",
        "id": 126866780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899634
    },
    {
        "content": "<p>of course it is</p>",
        "id": 126866782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899638
    },
    {
        "content": "<p>:-)</p>",
        "id": 126866783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899643
    },
    {
        "content": "<p>they're literally the same set</p>",
        "id": 126866784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899645
    },
    {
        "content": "<p>yeah but you never know with this constructive maths thing</p>",
        "id": 126866786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899654
    },
    {
        "content": "<p>Using <code>finish</code> does not only finishes the goal. It also conveys the meaning that the goal is now something we don't want to discuss at all</p>",
        "id": 126866787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899666
    },
    {
        "content": "<p>I mean not not P is literally the same as P, right?</p>",
        "id": 126866789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899671
    },
    {
        "content": "<p><em>t r i g g e r e d</em></p>",
        "id": 126866830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899691
    },
    {
        "content": "<p>Shouldn't you be revising for mechanics?</p>",
        "id": 126866833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899711
    },
    {
        "content": "<p>I see that you're proving mul_add</p>",
        "id": 126866836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899724
    },
    {
        "content": "<p>can't you prove that the two sets are equal instead?</p>",
        "id": 126866838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899729
    },
    {
        "content": "<p>Shouldn't you be marking?</p>",
        "id": 126866839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899729
    },
    {
        "content": "<p>I think equality is eaiser to prove</p>",
        "id": 126866840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899733
    },
    {
        "content": "<blockquote>\n<p>Shouldn't you be marking?</p>\n</blockquote>\n<p>oooooooh</p>",
        "id": 126866842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526899738
    },
    {
        "content": "<p>I've just proved something is a ring!</p>",
        "id": 126866843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899738
    },
    {
        "content": "<p>I'm sitting on the tube platform at South Ken, completely elated</p>",
        "id": 126866848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899761
    },
    {
        "content": "<p>[:= v happy]</p>",
        "id": 126866853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899777
    },
    {
        "content": "<p>Now if only someone had proved that a product of rings was a ring</p>",
        "id": 126866855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899795
    },
    {
        "content": "<p>oh wait</p>",
        "id": 126866886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899803
    },
    {
        "content": "<p>I think O_X(U) is a ring!</p>",
        "id": 126866904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899809
    },
    {
        "content": "<p>I still have to prove restriction is a ring homomorphism though</p>",
        "id": 126866905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899821
    },
    {
        "content": "<p>I will save that for after some marking</p>",
        "id": 126866906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899836
    },
    {
        "content": "<p>What I am actually pleased about is that I seriously engaged with quotient types for the first time in my life, and I have come out alive</p>",
        "id": 126866918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899890
    },
    {
        "content": "<p>Why is quot.lift called that?</p>",
        "id": 126866962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899926
    },
    {
        "content": "<p>It's the opposite of a lift, the way things are set up in my brain</p>",
        "id": 126866964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899938
    },
    {
        "content": "<p>It's a descent</p>",
        "id": 126866965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899943
    },
    {
        "content": "<p>I remember being puzzled by this terminology while reading TPIL</p>",
        "id": 126866966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899951
    },
    {
        "content": "<p>I think that this observation was genuinely something which added to my confusion when looking at quotient type stuff</p>",
        "id": 126866973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899965
    },
    {
        "content": "<p>This name was not at all intuitive for me</p>",
        "id": 126866975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526899978
    },
    {
        "content": "<p>Obviously</p>",
        "id": 126866976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526899978
    },
    {
        "content": "<p>Is this a CS thing Patrick?</p>",
        "id": 126866983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526900001
    },
    {
        "content": "<p>No idea</p>",
        "id": 126866984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526900009
    },
    {
        "content": "<p>Just crazyness if you ask me</p>",
        "id": 126866985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526900016
    },
    {
        "content": "<p>Anyway, we live and learn, and I've certainly learnt something over the last couple of days. Thanks to everyone that helped. I genuinely feel like a better Leaner.</p>",
        "id": 126867031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526900071
    },
    {
        "content": "<p><del>Leaner</del>Lea(r)ner</p>",
        "id": 126867301,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526900579
    }
]