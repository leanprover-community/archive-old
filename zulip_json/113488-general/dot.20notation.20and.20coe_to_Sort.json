[
    {
        "content": "<p>Currently, dot notation does not work for objects living in a subgroup, for instance <code>Lp</code> (in measure theory):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.l1_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.lp_space</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">measure_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Lp.foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">f.foo</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">measure_theory</span>\n</code></pre></div>\n<p>The reason is that when one writes <code>f : Lp α 1 μ</code> then <code>f</code> is not of the type <code>Lp α 1 μ</code> (this is a bundled subgroup), but of type <code>↥(Lp α 1 μ)</code>, with the little arrow indicating a coercion to Sort (here, a subtype of the space of almost everywhere defined functions). So, when one writes <code>f.foo</code>, Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">foo'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">coe_sort.foo'</span>\n</code></pre></div>\n<p>And this is completely normal. But really frustrating. Is there a way to make Lean understand dot notation in this kind of context?</p>",
        "id": 224999864,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612349763
    }
]