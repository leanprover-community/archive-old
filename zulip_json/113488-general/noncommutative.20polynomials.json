[
    {
        "content": "<p>I would really like to generalize as much as possible of <code>data/polynomial.lean</code> to noncommutative rings.</p>",
        "id": 202087906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177451
    },
    {
        "content": "<p>The two obstacles to me starting are:</p>\n<ol>\n<li>I know <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> has had plans to refactor this file, and I don't want to have two concurrent refactors going</li>\n<li>A lot of that file is written in terms of <code>C : R →ₐ[R] polynomial R</code>, expressed as an algebra hom, which won't make sense when <code>R</code> is noncommutative.</li>\n</ol>",
        "id": 202088074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177535
    },
    {
        "content": "<p>The minimal solution to 2. is presumably just to downgrade <code>C</code> to a <code>ring_hom</code>, maybe patching on <code>C_alg_hom</code> if it's needed in places.</p>",
        "id": 202088154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177569
    },
    {
        "content": "<p>Sorry, I got distracted by other refactors (mostly <code>measure_theory/</code>).</p>",
        "id": 202088306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593177632
    },
    {
        "content": "<p>no problem!</p>",
        "id": 202088336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177658
    },
    {
        "content": "<p>Do you have a suggestion for how to handle <code>C</code>?</p>",
        "id": 202088388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177682
    },
    {
        "content": "<p>I'm going to head off to sleep shortly, but unless you say that you're planning on doing this soon, I might have a go at a refactor tomorrow.</p>",
        "id": 202088527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593177739
    },
    {
        "content": "<p>Actually we might want to have <code>alg_hom</code> (under another name?) extending <code>ring_hom</code> and <code>linear_map</code>.</p>",
        "id": 202089743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178327
    },
    {
        "content": "<p>This makes sense without <code>algebra</code> structure.</p>",
        "id": 202089831,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178398
    },
    {
        "content": "<p>I want to see if I have this right.</p>\n<p>\"In maths\", an R-algebra A just means that </p>\n<ol>\n<li>R is a <code>comm_ring</code>, </li>\n<li>A is a <code>ring</code>, and </li>\n<li>we've chosen an <code>f : R →+* A</code> </li>\n<li>with the additional property that <code>f r * a = a * f r</code> (i.e. it lands in the centre) (this is the axiom <code>commutes'</code> in Lean).</li>\n</ol>\n<p>\"In Lean\", we model it slightly differently! In order to allow for good definitional reduction, we say that an R-algebra A means:</p>\n<ol>\n<li>R is a <code>comm_ring</code>, </li>\n<li>A is a <code>ring</code>, and </li>\n<li>we've chosen an <code>f : R →+* A</code> </li>\n<li>with the additional property that <code>f r * a = a * f r</code></li>\n<li><em>separately</em>, <code>has_scalar R A</code></li>\n<li>however there is an equation <code>r • x = f r * x</code></li>\n</ol>\n<p>Now, what if we want to talk about the case where <code>R</code> is noncommutative? \"In maths\", this is nothing but a ring homomorphism <code>R →+* A</code> between (not necessarily commutative) rings, so it doesn't get a name or a mention at all. The prototypical interesting example I want to think about is <code>R →+* polynomial R</code>, for non-commutative polynomials. I think what <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is suggesting is that we might want to have a Lean notion here, of a \"not-a-algebra\", defined as:</p>\n<ol>\n<li>R is a <code>ring</code>, </li>\n<li>A is a <code>ring</code>, and </li>\n<li>we've chosen an <code>f : R →+* A</code> </li>\n<li><em>separately</em>, <code>has_scalar R A</code></li>\n<li>however there is an equation <code>r • x = f r * x</code></li>\n</ol>\n<p>I suspect (perhaps regretfully) that we do actually need this in the noncommutative polynomial case. The point is that <code>polynomial R</code> <em>already</em> has a <code>has_scalar R (polynomial R)</code> (just thinking of <code>polynomial R</code> as <code>finsupp nat R</code>), and then separately we give is a multiplication, and it is a theorem, rather than a definition, that <code>r • x = f r * x</code>.</p>",
        "id": 202156157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593215062
    },
    {
        "content": "<p>So, if I have that right, should I begin the \"make noncommutative polynomials\" refactor be first introducing \"not-a-algebras\"? (Presumably everything about <code>alg_hom</code> will move to being about these gadgets; no need to make a second version.)</p>",
        "id": 202156262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593215205
    },
    {
        "content": "<p>What should they be called?</p>",
        "id": 202156268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593215212
    },
    {
        "content": "<p>OTOH, it seems that no one actually used the fact that we had set up <code>polynomial.C</code> as an <code>alg_hom</code>.</p>",
        "id": 202157894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593216954
    },
    {
        "content": "<p>Downgrading it to a <code>ring_hom</code> causes a few easily fixable breakages.</p>",
        "id": 202157940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593216969
    },
    {
        "content": "<p>So I think I'm going to proceed just on this basis.</p>",
        "id": 202157955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593216979
    },
    {
        "content": "<p>and see if we run into any trouble warranting not-a-algebras later. :-)</p>",
        "id": 202157971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593217010
    },
    {
        "content": "<p>I did not suggest introducing not-a-algebras, only using <code>mul_semiring_action_hom</code> instead of <code>alg_hom</code>s everywhere.</p>",
        "id": 202159509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593219187
    },
    {
        "content": "<p>(and probably <code>distrib_mul_action_hom</code>s instead of <code>linear_map</code>s)</p>",
        "id": 202159514,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593219212
    },
    {
        "content": "<p>But go ahead with <code>C : R →+* polynomial R</code>, we can easily change this later.</p>",
        "id": 202159563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593219274
    },
    {
        "content": "<p>It looks like it's going well just with a <code>ring_hom</code>.</p>",
        "id": 202159863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593219712
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3193\">#3193</a></p>",
        "id": 202163896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593225949
    },
    {
        "content": "<p>It was not as bad as I feared!</p>",
        "id": 202163906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593225962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/noncommutative.20polynomials/near/202157894\">said</a>:</p>\n<blockquote>\n<p>OTOH, it seems that no one actually used the fact that we had set up <code>polynomial.C</code> as an <code>alg_hom</code>.</p>\n</blockquote>\n<p>I think that's because it's a very recent change.</p>",
        "id": 202168890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593235114
    }
]