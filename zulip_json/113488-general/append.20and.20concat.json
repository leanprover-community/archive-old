[
    {
        "content": "<p>The names <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append\">docs#list.append</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.concat\">docs#list.concat</a> look like they are swapped around. Is this intentional? (I think there already was discussion about this somewhere, but I can't find it)</p>",
        "id": 299602232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663605463
    },
    {
        "content": "<p>More generally, all instances of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_append\">docs#has_append</a> look they ought to be called <code>has_concat</code>.</p>",
        "id": 299602375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663605508
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.cons\">docs#list.cons</a></p>",
        "id": 299606434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663606848
    },
    {
        "content": "<p>(I also remember seeing another discussion about this)</p>",
        "id": 299620640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663611692
    },
    {
        "content": "<p>The classic functional programming cute wordplay for appending an element to the end of a list is <code>snoc</code>.</p>",
        "id": 299620970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663611808
    },
    {
        "content": "<p>It's not uncommon to use \"appending\" or \"concatenating\" lists interchangeably, so I'd hesitate swapping the names. I think it'd be better to find a better name for <code>list.concat</code>.</p>",
        "id": 299621426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663611992
    },
    {
        "content": "<p>Note that we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.snoc\">docs#fin.snoc</a></p>",
        "id": 299621503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663612028
    },
    {
        "content": "<p>We should probably use snoc for lists as well...</p>",
        "id": 299621530,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663612037
    },
    {
        "content": "<p>I disagree. Concatenating always means \"putting two things of the same one after each other\". Appending can refer to concatenating, but not the other way around.</p>",
        "id": 299621753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663612117
    },
    {
        "content": "<p>And appending is the counterpart to prepending, which is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.cons\">docs#list.cons</a>.</p>",
        "id": 299621841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663612152
    },
    {
        "content": "<p>How does it sound renaming <code>append</code> to <code>concat</code>, and <code>concat</code> to <code>snoc</code>?</p>",
        "id": 299621963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663612193
    },
    {
        "content": "<p>it sounds like a massive name change affecting the whole language</p>",
        "id": 299622144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663612238
    },
    {
        "content": "<p>Not only the whole language (Lean3) but also Lean4</p>",
        "id": 299622412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663612328
    },
    {
        "content": "<p>Judge it yourself: <a href=\"https://github.com/leanprover-community/lean/pull/771\">lean#771</a></p>",
        "id": 299622748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663612467
    },
    {
        "content": "<p>Note that most uses should be unaffected as they use the <code>++</code> notation.</p>",
        "id": 299623373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663612693
    },
    {
        "content": "<p>I think we should try and find the past discussion before doing anything drastic</p>",
        "id": 299623433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663612719
    },
    {
        "content": "<p>This change also needs buy-in from the Lean 4 developers.</p>",
        "id": 299623564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663612772
    },
    {
        "content": "<p>I think it's worth splitting this discussion in two, since I guess renaming <code>concat</code> to <code>snoc</code> is comparatively uncontroversial</p>",
        "id": 299628122,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663614414
    },
    {
        "content": "<p>(Unfortunately) calling <code>(++)</code> \"append\" is pretty common in Haskell as well: <a href=\"https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-List.html#v:-43--43-\">https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-List.html#v:-43--43-</a></p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">infixr</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Append two lists [...]</p>\n</blockquote>",
        "id": 299628738,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663614676
    },
    {
        "content": "<p>From Haskell I expect <code>append</code> to have type <code>a -&gt; a -&gt; a</code> and <code>concat</code> to have type <code>[a] -&gt; a</code> (as in <a href=\"https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Monoid.html\">https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Monoid.html</a>)</p>",
        "id": 299629098,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663614824
    },
    {
        "content": "<p>What Haskell calls <code>concat</code> Lean calls <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.join\">docs#list.join</a> (which fits with monad terminology)</p>",
        "id": 299629221,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663614872
    },
    {
        "content": "<p>I have to say I find snoc quite a poor term</p>",
        "id": 299631174,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663615713
    },
    {
        "content": "<p>In (Common) Lisp, <code>append</code> joins two lists (non-destructively) and <code>concat</code> joins them destructively (i.e., by modifying the last pointer of the first list).<br>\nMagma uses <code>Append</code> to extend a sequence (the datatype similar to lists) by one element (at the end) and <code>cat</code> (an infix operator) to join sequences.</p>",
        "id": 299632476,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663616244
    },
    {
        "content": "<p>Another data point: <a href=\"https://www.swi-prolog.org/pldoc/doc_for?object=append/3\">https://www.swi-prolog.org/pldoc/doc_for?object=append/3</a></p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s s-Atom\">?</span><span class=\"nv\">List1</span><span class=\"p\">,</span> <span class=\"s s-Atom\">?</span><span class=\"nv\">List2</span><span class=\"p\">,</span> <span class=\"s s-Atom\">?</span><span class=\"nv\">List1AndList2</span><span class=\"p\">)</span>\n    <span class=\"nv\">List1AndList2</span> <span class=\"o\">is</span> <span class=\"s s-Atom\">the</span> <span class=\"s s-Atom\">concatenation</span> <span class=\"s s-Atom\">of</span> <span class=\"nv\">List1</span> <span class=\"s s-Atom\">and</span> <span class=\"nv\">List2</span>\n</code></pre></div>",
        "id": 299633161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663616544
    },
    {
        "content": "<p>My reasoning is etymological. <code>append</code> makes sense to me as <code>[a] -&gt; a -&gt; [a]</code> because <code>prepend</code> would then mean <code>a -&gt; [a] -&gt; [a]</code>, and <code>concatenate</code> comes from the latin roots for \"to chain together\", which makes sense for two objects of the same type. It's a bit surprising to me that Haskell append takes two containers, but I guess that's worth something. In Python, 'append' adds a single element to a list.</p>",
        "id": 299657267,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663627617
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  perhaps where you saw this was <a href=\"#narrow/stream/113488-general/topic/lists/near/298062291\">this thread</a> (where a relatively new user says that \"concatenate is ++\", so seems like this does indeed have the potential to confuse people as is).</p>",
        "id": 299657986,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663627971
    },
    {
        "content": "<p>That's the thread I was thinking of, thanks!</p>",
        "id": 299661959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663630354
    },
    {
        "content": "<p>For what it's worth, Python's use of the word \"append\" trips me up pretty much every time I've been away from the language for a while.</p>\n<p>If we're using etymologies here, then \"append\" is \"hang after\" and \"prepend\" is \"hang before.\" It's not clear that prepend couldn't mean <code>flip append</code>.</p>",
        "id": 299664136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663631990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/append.20and.20concat/near/299631174\">said</a>:</p>\n<blockquote>\n<p>I have to say I find snoc quite a poor term</p>\n</blockquote>\n<p>A nicer alternative for this is <code>list.push</code> (though this is not the function you'd want to use to for modeling stacks using <code>list</code>!)</p>",
        "id": 299664227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663632020
    },
    {
        "content": "<p>Then the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.push#doc\">docs4#Array.push</a> would be in terms of <code>List.push</code>.</p>",
        "id": 299664305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663632092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/append.20and.20concat/near/299664136\">said</a>:</p>\n<blockquote>\n<p>If we're using etymologies here, then \"append\" is \"hang after\" and \"prepend\" is \"hang before.\" It's not clear that prepend couldn't mean <code>flip append</code>.</p>\n</blockquote>\n<p>My reasoning is this: If this were the intended definition, there would have been no reason for the term prepend to have arisen as a portmanteau, since there would already have been a way to express the notion: instead of saying \"prepend list_b to a\" we could just say \"append a to list_b\".</p>",
        "id": 299671491,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663637730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/append.20and.20concat/near/299657267\">said</a>:</p>\n<blockquote>\n<p>My reasoning is etymological. <code>append</code> makes sense to me as <code>[a] -&gt; a -&gt; [a]</code> because <code>prepend</code> would then mean <code>a -&gt; [a] -&gt; [a]</code>, and <code>concatenate</code> comes from the latin roots for \"to chain together\", which makes sense for two objects of the same type. It's a bit surprising to me that Haskell append takes two containers, but I guess that's worth something. In Python, 'append' adds a single element to a list.</p>\n</blockquote>\n<p>Yes that's exactly my reasoning as well.</p>",
        "id": 299700056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663660458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/append.20and.20concat/near/299631174\">said</a>:</p>\n<blockquote>\n<p>I have to say I find snoc quite a poor term</p>\n</blockquote>\n<p>I agree. I think mathlib is inteded to be useful for mathematicians, and almost no mathematician will know that <code>snoc</code> is even a thing (and so will have problems finding it). I myself wouldn't without having read this conversation.</p>",
        "id": 299740137,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663677481
    },
    {
        "content": "<p>Well <code>cons</code> isn't a word I recognize from mathematics either, with terms like this there will always be some learning curve for the language, that seems unavoidable</p>",
        "id": 299749043,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663680368
    },
    {
        "content": "<p>I'd go so far as to say that <code>list</code> isn't really a word I recognise from mathematics!</p>",
        "id": 299784555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663686759
    },
    {
        "content": "<p>Just to put my two cents in - that's definitely not what I would have expected <code>concat</code> to mean. <code>append</code> is a bit more ambiguous, to be fair.</p>",
        "id": 300170697,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663855936
    },
    {
        "content": "<p>What should happen here? The current situation seems very weird and it keeps cropping up. See for example <a href=\"https://github.com/leanprover-community/mathlib/pull/17209\">#17209</a></p>",
        "id": 306745701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666989768
    },
    {
        "content": "<p>I personally think nothing should happen. It's not so hard to learn that \"append\" and \"concat\" mean what they do in Lean. Every language seems to make mutually incompatible choices, and there is no uniquely correct choice.</p>",
        "id": 306825416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667043539
    },
    {
        "content": "<p>Personally I think the way forward here is:</p>\n<ul>\n<li>Put together a document (gist) indicating the terminology used by as many languages as possible, both for and against the change</li>\n<li>Make an offer to deal with making the change in Lean 4</li>\n<li>Put forth the above two items to Leo to be the final arbiter</li>\n<li>If the change is OK'd for lean4, backport to Lean 3</li>\n</ul>",
        "id": 306832019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667046696
    },
    {
        "content": "<p>Item 1 could go in the docs as a library note even if we don't go forward with the other steps</p>",
        "id": 306832377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667046853
    },
    {
        "content": "<p>I had no idea <code>list.concat</code> existed. I was writing <code>l ++ [a]</code> instead of <code>list.concat l a</code> all the time. In fact, I have nearly 200 occurrences of terms like  <code>l ++ [a]</code> in my project!</p>",
        "id": 307075456,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1667213216
    },
    {
        "content": "<p>Do you feel like you didn't know about it because it is misnamed? Would you have thought of looking for <code>list.append</code>?</p>",
        "id": 307078586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667214456
    },
    {
        "content": "<p>I am not sure. I vaguely remember that, when I was starting with my project, I had trouble remembering that <code>++</code> was called <code>list.append</code> which I needed to know in order to write the lemma names by heart. IIRC <code>list.concat</code> was what I expected <code>++</code> to be called. Nevertheless, I am now very comfortable with <code>list.append</code> and I would have big trouble getting used to the other name.</p>",
        "id": 307079716,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1667214880
    },
    {
        "content": "<p>As for <code>list.concat</code>, I don't think I ever actively searched for a different way to write <code>l ++ [a]</code>.</p>",
        "id": 307079829,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1667214928
    },
    {
        "content": "<p>I can imagine <code>l.concat a</code> is slightly easier than <code>l ++ [a]</code> but, after I looked up <code>list.concat</code> now, it seems to me that <code>l ++ [a]</code> is better because more lemmata are available without converting it to the other form.</p>",
        "id": 307080630,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1667215188
    }
]