[
    {
        "content": "<p>Hello,<br>\nI'm trying to implement the following theorems described in Verified Functional<br>\nProgramming in Agda, p. 22-23, but to no avail:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notnotelim2</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotttprime</span> <span class=\"o\">:</span>\n    <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">lzero</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotffprime</span> <span class=\"o\">:</span>\n    <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">lzero</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ff</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Any help would be much appreciated.</p>",
        "id": 193025359,
        "sender_full_name": "Phiroc",
        "timestamp": 1586171073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notnotelim2</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>If you use underscores then you can see what is missing. In the first one, Lean is expecting a proof of <code>bnot (bnot tt) = tt</code>, but your term <code>bnot (bnot tt)</code> is not a proof of anything, it's just the term <code>tt</code> of type <code>bool</code>.</p>",
        "id": 193026614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586171858
    },
    {
        "content": "<p>In notnotelim2 you are trying to construct a function which eats a bool and spits out a proof. Hence for each possibility for bool, you need to give the proof for this possibility.</p>",
        "id": 193026719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586171918
    },
    {
        "content": "<p>For the second one, you are just trying to prove a theorem. There is no input of a bool. You are attempting to imput a bool with your line <code>| tt := rfl {lzero} {bool} {tt}</code>. You just need to supply a proof. Same for the third.</p>",
        "id": 193026798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586171980
    },
    {
        "content": "<p>Sorry, I was saying, could you please provide a hint as to how the proofs should be written?</p>",
        "id": 193027181,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172214
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 193027224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172235
    },
    {
        "content": "<p>So the Agda variants provided in Agda by Aaron Stump all boil down to <em>rfl</em>?</p>",
        "id": 193027443,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172346
    },
    {
        "content": "<p>I don't know anything about the book you're reading, or Agda. Lean has a proof-irrelevant Prop if that makes any difference.</p>",
        "id": 193027909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172661
    },
    {
        "content": "<p>Here's the book, if you're interested: <a href=\"https://dl.acm.org/doi/book/10.1145/2841316\" title=\"https://dl.acm.org/doi/book/10.1145/2841316\">https://dl.acm.org/doi/book/10.1145/2841316</a><br>\nI am using the theorems defined in it to learn Lean</p>",
        "id": 193028436,
        "sender_full_name": "Phiroc",
        "timestamp": 1586172984
    },
    {
        "content": "<p>And here are the above theorems, revisited.</p>\n<p>Many thanks, Kevin, for your help.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notnotelim</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotelim2</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotttprime</span> <span class=\"o\">:</span>\n    <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotffprime</span> <span class=\"o\">:</span>\n    <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 193028514,
        "sender_full_name": "Phiroc",
        "timestamp": 1586173054
    },
    {
        "content": "<p>The topic of chapter 3 in that book is what I try to cover in the natural number game.</p>",
        "id": 193028719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586173195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282193\">@Phiroc</span> </p>\n<p>Just for reference, strictly speaking your <code>notnotelim2</code> is not the same as the one in the book, which would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notnotelim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnottt</span> <span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotff</span> <span class=\"o\">:</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notnotelim2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">notnottt</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">notnotff</span>\n</pre></div>",
        "id": 193028952,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586173322
    }
]