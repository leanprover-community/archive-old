[
    {
        "content": "<p>The following gives a strange type mismatch error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">inf_sup_left</span>\n</code></pre></div>\n<p>Replacing <code>inf_sup_left</code> with the more explicit <code>@inf_sup_left α _ x y z</code> yields a very very long type mismatch error.</p>\n<p>Upon inspection, removing the <code>[complete_lattice α]</code> instance from the hypothesis makes everything fine. What could be going on here?</p>",
        "id": 242191066,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1623324347
    },
    {
        "content": "<p>You have two different lattice structures (coming from your two instances), for which the operations are completely unrelated. So Lean is confused.</p>",
        "id": 242191277,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623324452
    },
    {
        "content": "<p>Hm, the class tree is a bit complicated here, but I thought both extended <code>has_sup</code> and <code>has_inf</code> all the way down, so that these operators would be unambiguous. My ignorance of the more technical aspects of type classes might be showing here though; I'm not 100% sure what you mean.<br>\nIn context, I'd like to work with a complete lattice that is distributive, and rewrite somewhere with this lemma.</p>",
        "id": 242192202,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1623325018
    },
    {
        "content": "<p>The fact that both extend has_sup is exactly the problem. Your lemma doesn't have anything that says the two sups are the same.</p>",
        "id": 242192443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623325178
    },
    {
        "content": "<p>Just like if you take two integers as an argument, lean won't assume they are equal</p>",
        "id": 242192528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623325217
    },
    {
        "content": "<p>Oh, I see! That makes sense. I'm specifying two (potentially completely unrelated) structures on <code>α</code>.</p>",
        "id": 242192601,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1623325266
    },
    {
        "content": "<p>There is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_distrib_lattice\">docs#complete_distrib_lattice</a> class, which might interest you</p>",
        "id": 242192619,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623325289
    },
    {
        "content": "<p>for other code that you may have I mean. It is not useful for that example.</p>",
        "id": 242192715,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623325350
    },
    {
        "content": "<p>Right. In my case I want to specifically avoid the _infinite_ distributive property, as that's part of / related to the conclusions. But this discussion clears things up and I think I can find a way to make things work now.</p>",
        "id": 242192874,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1623325469
    }
]