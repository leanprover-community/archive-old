[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think you said that it is possible to evaluate proofs... do you have an example? can we also break proof irrelevance? maybe have an unsound but computable <code>non-classical.some</code>?</p>",
        "id": 151495074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577655
    },
    {
        "content": "<p>the axiom of choice is definitely nonconstructive</p>",
        "id": 151495093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577688
    },
    {
        "content": "<p>You can evaluate proofs by using <code>#reduce</code></p>",
        "id": 151495102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577704
    },
    {
        "content": "<blockquote>\n<p>the axiom of choice is definitely nonconstructive</p>\n</blockquote>\n<p>even unsound?</p>",
        "id": 151495105,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577716
    },
    {
        "content": "<p>no...</p>",
        "id": 151495107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577721
    },
    {
        "content": "<p>wait, I don't think I understand what you are asking</p>",
        "id": 151495151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577743
    },
    {
        "content": "<p>it's easy to compute a value if you are allowed to be wrong</p>",
        "id": 151495165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577768
    },
    {
        "content": "<p>so I want a function that <code>reduce</code>s to <code>0</code> when given the input <code>(⟨0, rfl⟩ : ∃ n, n = n)</code></p>",
        "id": 151495173,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577790
    },
    {
        "content": "<p>Not in the VM</p>",
        "id": 151495179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577808
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- Exists.intro 0 (eq.refl 0)</span>\n</pre></div>",
        "id": 151495180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577810
    },
    {
        "content": "<p>why not?</p>",
        "id": 151495182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577816
    },
    {
        "content": "<p>because that term has no representation in the VM</p>",
        "id": 151495187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577828
    },
    {
        "content": "<p>it is a neutral value, a \"unit\"</p>",
        "id": 151495190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577837
    },
    {
        "content": "<p>so <code>reduce</code> is not VM?</p>",
        "id": 151495232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577849
    },
    {
        "content": "<p>no</p>",
        "id": 151495233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577852
    },
    {
        "content": "<p>it is kernel reduction</p>",
        "id": 151495235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544577859
    },
    {
        "content": "<p>interesting</p>",
        "id": 151495236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577862
    }
]