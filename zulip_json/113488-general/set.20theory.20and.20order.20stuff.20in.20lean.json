[
    {
        "content": "<p>Hey all!<br>\nLean newbie here. I worked through the awesome natural number game, and I'm now trying to prove some theorems from a uni course.<br>\nThe first one is: For all sets A, (powerset A, subset) is a poset.<br>\nIn mathlib, I found: <code>set_theory.zfc.Set.powerset</code> and <code>init.algebra.order.partial_order</code>.<br>\nBut this code won't compile because powerset returns a <code>Set</code>, while partial_order expects a <code>Type</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">Set.powerset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Like I said, I'm new to lean, so I have no idea, whether any of these things are the right tools to prove the \"theorem\".<br>\nI'd really appreciate some help/links!</p>",
        "id": 261161050,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636650998
    },
    {
        "content": "<p>I think you could get a powerset that is a type using <code>{A : Set // A \\subseteq \\alpha}</code> (the <code>//</code> is the set-builder symbol for subtype)</p>",
        "id": 261162989,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1636651927
    },
    {
        "content": "<p>So the issue is that <code>set_theory.zfc.Set</code> is the wrong type for what you're looking for; remember from NNG, sets from normal mathematics are replaced by types here. <code>set_theory.zfc.Set</code> is an advanced concept, which is trying to recreate ZFC within Lean, and so is quite complicated. So if you remember that <code>α : Type</code> in Lean basically means <code>let α be a set</code>, you are actually looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a> (the <strong>type</strong> of all sets made up of the type α) instead, and your instance would instead be phrased as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I hope my comment makes sense to you, I found it confusing whilst writing it ngl</p>",
        "id": 261164728,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636652787
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> and <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>!</p>\n<p>I tried <code>{A : Set // A \\subseteq \\alpha}</code>, but that collided with <code>subset.partial_order</code>, which seems to be related to subsets, not powersets.</p>\n<p><code>set</code> does appear to be what I was looking for. <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a> also proved useful.<br>\nIt is defined as <code>def set (α : Type u) := α → Prop</code>, which I guess means that subsets are defined as predicate functions. I'll have to do some more research on <code>Prop</code>.</p>\n<p>Thanks again!</p>",
        "id": 261168731,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636655094
    },
    {
        "content": "<p>An easy way to think about why <code>set</code> is <code>α → Prop</code> is if you had the \"set of all things\". (We know that can't exist, but bear with me for a moment). Then, you can describe any set by saying, for each item in the set of all things, whether that item is in your set or not (<code>true</code> if it is, <code>false</code> if it isn't). But in Lean we do have the set of all sets! It's the parent type. But mostly, this is an implementation detail - it's pretty well encouraged here to ignore it :)</p>",
        "id": 261168954,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636655219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/set.20theory.20and.20order.20stuff.20in.20lean/near/261168954\">said</a>:</p>\n<blockquote>\n<p>But in Lean we do have the set of all sets! It's the parent type.</p>\n</blockquote>\n<p>This isn't correct. I think perhaps you meant to say \"set of all things\", like in your first sentence.</p>",
        "id": 261186191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636665945
    },
    {
        "content": "<p>Yes, that is what I meant - thanks</p>",
        "id": 261189597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636668477
    },
    {
        "content": "<p>To give a subset of X is to give, for every term of type X , the information of whether it's in the subset or not. Thus subsets of X are the same as maps from X to {true,false}</p>",
        "id": 261231209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636710730
    },
    {
        "content": "<p>Some background: One of my motivations for studying lean is that I want to create a dependently typed programming language. Understanding lean is supposed to give me some intuition for type theory before I tackle the HOTT book, or something like that.</p>\n<p>Prop is a real puzzler to me. Let me try to explain:<br>\nMaps from X to {true, false} make sense, but subsets are defines as maps from X to <code>Prop</code>.<br>\nMy understanding of Prop is that it is the type of all propositions. And those propositions are <em>again types</em>, and they are \"true\" if they are inhabited. So unit/true has a single element, but false has none. Similarly, <code>a &lt;= b : Prop</code> is a (dependent) type, and if it is inhabited, that means that <code>a</code> is indeed leq <code>b</code>.<br>\nNow, I could define a set of naturals less than some bound: <code>bounded_set := lambda (max : NN) (lambda (n : NN) n &lt;= max))</code> (this is supposed to mean: given a bound, construct the predicate function from <code>NN</code> to <code>Prop</code>).<br>\nThe problem is however: For some natural number, the predicate returns me a <code>Prop</code>. But how do I figure out whether that prop is inhabited (\"true\")?<br>\nFor example, I might want to do a case distinction between \"is in the set\" vs \"is not\". But that now means that I have to \"decide the Prop\", which, to my understanding, isn't possible because constructive math doesn't have the law of the excluded middle?</p>\n<p>Ok, that was a lot. I understand that this isn't a great question. I'm mostly confused, so I don't really know what to ask.. Maybe someone magically understands why I'm confused, of maybe you just have some nice \"resources\" that I could study to better understand Prop and especially how to \"use\" Prop.</p>",
        "id": 261264117,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636729370
    },
    {
        "content": "<p>That's what all the <code>decidable</code>/<code>decidable_pred</code>/<code>decidable_rel</code>/<code>decidable_eq</code> stuff is about: A decidability instance gives you a way (understand, an algorithm) to decide whether <code>p : Prop</code> is true or false.</p>",
        "id": 261264489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636729516
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite/src\">src#ite</a> (which implements <code>if</code> / <code>then</code>/<code>else</code> on props) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable/src\">src#decidable</a> might help</p>",
        "id": 261264668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636729578
    },
    {
        "content": "<p>By \"is true or false\", I don't mean \"is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/true\">docs#true</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a>\" because those are specific types. What I mean precisely is \"is inhabited or <code>p → false</code> is inhabited)</p>",
        "id": 261264736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636729605
    },
    {
        "content": "<p>that actually makes a lot of sense (having a proof/algorithm for deciding a prop)<br>\nthanks!</p>",
        "id": 261265236,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636729777
    },
    {
        "content": "<p>Prop is the type of all propositions, but before you can have a mental model of Prop you need to know what equality of propositions means. For example <code>2 + 2 = 4</code> and <code>3 + 3 = 6</code> are both strings of characters, so they're definitely not equal at that point. After processing they become <code>Prop</code>s   but if you are trying to get a handle on <code>Prop</code> you need to know whether they're equal or not. And Lean's propositional extensionality axiom says that <code>P = Q &lt;-&gt; (P &lt;-&gt; Q)</code> so because the sums are both (equivalent to) <code>true</code>, they're both equal. The thing which is so rich about <code>Prop</code> is that even though it only has two terms, <code>true</code> and <code>false</code> (assuming we're working in a fixed model of classical mathematics eg ZFC), there are so many ways we have of representing both of them as strings.</p>",
        "id": 261276071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636734263
    },
    {
        "content": "<p>Does this help? <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a> </p>\n<p>If there was a method to evaluate Props then you just disproved theorems of Goedel and Hilbert I should think. Maths is hard!</p>",
        "id": 261276351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636734377
    },
    {
        "content": "<p>In normal maths you are allowed functions for which you don't know the formula -- \"the smallest n such that this happens\", e.g. if G represents <a href=\"https://en.wikipedia.org/wiki/Waring%27s_problem\">Waring's G function</a> then we're happy to know that 4&lt;=G(3)&lt;=7 because G(3) is just the first time something happens, and we proved it doesn't happen for 3 and that it does happen for 7. In Lean you can make these functions but you can't evaluate them. In constructive maths you can't make them at all until you've proved that their value can be computed in finite time with some algorithm.</p>",
        "id": 261276935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636734659
    },
    {
        "content": "<p>\"In normal maths you are allowed functions for which you don't know the formula.\" Yeah, exactly, and I assumed something like that is also possible in lean.<br>\nIn particular, I was wondering: If you used lean to do \"normal\" programming, how would you do a conditional based on a runtime \"boolean\"? Say,<code>a &lt;= b</code> gives you a <code>Prop</code>, then you have to somehow <em>compute</em> whether it is true or not. For <em>general</em> <code>Prop</code>s there's no general way to do it (that'd be great, huh?) So <code>&lt;=</code> for (eg) naturals cannot give you \"just a Prop\"; it needs to give you some extra info to evaluate it.<br>\nIf I understand correctly, this is what <code>decidable</code> is about: It is an interface, which requires a function, which you can evaluate, to \"decide\" the corresponding <code>Prop</code>, effectively turning it into a boolean.<br>\n(Now, that raises some new questions: What does an actual <code>if</code> expression look like: Do you have to explicitly call the \"decider function\" - or is there a syntactic convenience if the types are known (eg: naturals)? How is Prop actually represented - is it a symbolic formula until you evaluate it? But I guess I can figure those out myself. If not, I'll start a new \"Understanding Prop\" thread :P )</p>\n<p>There were definitely some terms, like \"proof irrelevance\" and \"lean's propositional extensionality axiom\", that I'll look up, thanks!</p>",
        "id": 261375649,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636831266
    },
    {
        "content": "<p>It's true that there's no algorithm for deciding whether an arbitrary Prop is true or false, but if a and b are computable naturals then there's an algorithm for working out if a&lt;=b</p>",
        "id": 261376183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636832133
    },
    {
        "content": "<p>From a computational perspective, a <code>Prop</code> is not represented  by anything at all.<br>\n<code>if</code> takes an implicit <code>decidable</code> argument which contains the data of whether the proposition is true or false.</p>",
        "id": 261377324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636833663
    },
    {
        "content": "<p>Oh interesting!<br>\nDoes \"computational perspective\" mean \"implementation\" in this case? As in: Is prop simply a type-level construct, that is not processed by the kernel at all?<br>\nThough I don't see how that would work for <code>decidable</code>. My current mental model is this: Some expression like <code>a &lt;= b</code> has type Prop and needs to be \"decided\" to be used as a boolean (done automatically when used in an if). That sounds an awful lot like lazy evaluation. So in this case, one piece of code could \"produce\" the (decidable) prop <code>a &lt;= b</code>, and some other code, later, could evaluate the prop. In the meantime (implementation wise), the expression <code>a &lt;= b</code> needs to be represented symbolically in some way. Right?<br>\n(Links to the c++ source code would be interesting. If they're remotely readable :P )</p>",
        "id": 261415627,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636894143
    },
    {
        "content": "<p>This is a bit tricky to discuss since there are several meanings that \"computation\" could have. In your case I assume we're talking about the traditional ideas of compilation and execution. In this case the kernel behaves as a type checker, which is part of the compiler--in the compiler everything is an expression. At run time nothing is an expression, e.g., a value of type <code>nat</code> could be <code>succ (succ zero)</code> but not <code>1 + 1</code>.</p>",
        "id": 261416726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636895844
    },
    {
        "content": "<p>In this model (at least in Lean) propositions are effectively types and, like types, they have no representation at runtime</p>",
        "id": 261416785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636895915
    },
    {
        "content": "<p>What happens if you write something like <code>if a &lt;= b then x else y</code> is this:</p>\n<ul>\n<li><code>if a &lt;= b then x else y</code> really means <code>ite (a &lt;= b) x y</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> needs an argument <code>[decidable (a &lt;= b)]</code></li>\n<li>Type class inference will synthesize this instance using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decidable_le\">docs#nat.decidable_le</a> -- this is where the algorithm for deciding the proposition gets chosen</li>\n<li>Now we end up with code that is equivalent to something like <code>match (nat.decidable_le a b) with { is_true _ -&gt; x ; is_false _ -&gt; y }</code>.</li>\n</ul>\n<p>So at runtime, all that happens is we use the implementation of <code>nat.decidable_le</code>. But effectively what we have accomplished is to decide the proposition <code>a &lt;= b</code>.</p>",
        "id": 261417100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636896394
    },
    {
        "content": "<p>Ok, that helps a ton, many thanks!<br>\nSo if I wanted to extract the condition <code>a &lt;= b</code> into a helper function, I'd return a boolean instead of a Prop and \"force\" the evaluation of <code>nat.decidable_le</code> in the helper?</p>",
        "id": 261417467,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1636896998
    },
    {
        "content": "<p>I think there is a coercion for decidable propositions so you can write <code>(a &lt;= b : bool)</code> if that's what you want--internally it will use the same kind of mechanism</p>",
        "id": 261417781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636897512
    }
]