[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 203643502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594559844
    },
    {
        "content": "<p>why doesn't this instance cause loops in typeclass search?</p>",
        "id": 203643509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594559856
    },
    {
        "content": "<p>When looking for <code>has_coe_t a c</code> it first looks for instances for <code>has_coe a ?m</code> (which should only be a finite list, if you know <code>a</code>) and then looks for <code>has_coe_t b c</code> so as long as  we restrict the <code>has_coe</code> instances enough (no cycles, adherence to this library note: <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#use%20has_coe_t\">https://leanprover-community.github.io/mathlib_docs/notes.html#use%20has_coe_t</a>) there should not be a loop.</p>",
        "id": 203664298,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594593147
    },
    {
        "content": "<p>(instance arguments are filled in from right-to-left, to speed-up the search for classes like <code>algebra R A</code>).</p>",
        "id": 203664312,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594593181
    },
    {
        "content": "<p>But the trouble with <code>algebra_trans</code> would come from the identity <code>algebra R R</code>... that would cause loops anyway )-;</p>",
        "id": 203679660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594618615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> we can avoid that by having <code>algebra_t R R</code></p>",
        "id": 203680216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594619319
    },
    {
        "content": "<p>you won't ever have <code>algebra R R</code> to cause the loop</p>",
        "id": 203680243,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594619374
    },
    {
        "content": "<p>Aah, and you are saying that we should only ever use <code>algebra_t</code>?<br>\nBut aren't we still going to run into non-defeq diamonds?</p>",
        "id": 203680329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594619464
    },
    {
        "content": "<p>Like, I compose the algebra instance <code>int -&gt; rat</code> with <code>rat -&gt; real</code>, and this will not be defeq to <code>int -&gt; real</code>.</p>",
        "id": 203680395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594619537
    },
    {
        "content": "<p>That's why I think we should have a typeclass like <code>tower</code> or <code>commutes</code> that expresses the provable equality of these instances.</p>",
        "id": 203680399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594619564
    },
    {
        "content": "<p>fair</p>",
        "id": 203681040,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594620590
    }
]