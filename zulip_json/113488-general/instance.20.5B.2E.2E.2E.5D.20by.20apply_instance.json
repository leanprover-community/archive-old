[
    {
        "content": "<p>Dear All,</p>\n<p>in PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7940\">#7940</a>,  I seem to be in the following  situation.  I introduced one <code>instance</code> and noticed that two <code>instance</code>s that existed are now proved by <code>by apply_instance</code>.  Thus, I removed these two instances.</p>\n<p>However, CI now complains that one of the instances that I deleted is missing.</p>\n<p>Before I go and try to minimize an example, I thought of asking here, since I imagine that if this is expected behaviour, someone here in the chat will know!</p>\n<p>So, is there ever the need to have an explicit <code>instance</code> available, whose proof is <code>by apply_instance</code>?</p>\n<p>Thanks!</p>",
        "id": 242708627,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623749528
    },
    {
        "content": "<p>I'm no expert but my gut feeling is that there shouldn't be.</p>",
        "id": 242710048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623750357
    },
    {
        "content": "<p>Ok, I will try to minimize an example and debug this: I <em>think</em> that this is what is happening, but I am not entirely sure.</p>",
        "id": 242710191,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623750428
    },
    {
        "content": "<p>Not really minimal, but close, I hope!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.with_bot</span>\n\n<span class=\"c1\">--/-  if you remove the initial two dashes, the lemma below no longer works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">am_i_needed</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c1\">--/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_le_add_new</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">h₁</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 242711209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623750952
    },
    {
        "content": "<p>At least on my computer, when I remove the two dashes (<code>-</code>) to comment the <code>instance</code>, lemma <code>add_le_add_right</code> in the proof of lemma <code>add_le_add_new</code> no longer works.</p>",
        "id": 242711340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623751014
    },
    {
        "content": "<p>(I would try to minimize this further, but I am meeting a student in 3 minutes and wanted to get this out of the way before that! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 242711422,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623751064
    },
    {
        "content": "<p>it works for me with or without the instance, although maybe I'm not on the latest mathlib</p>",
        "id": 242712090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623751467
    },
    {
        "content": "<p>On the <code>adomani_covariant_instances</code> branch it doesn't work.</p>",
        "id": 242712400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623751651
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.with_bot</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">covariant_class</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"n\">has_add.add</span><span class=\"o\">)</span> <span class=\"n\">has_le.le</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p><code>bar</code> fails without <code>foo</code> on that branch</p>",
        "id": 242712667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623751816
    },
    {
        "content": "<p>(and then Lean ends up in that state where if you put a foot wrong you get excessive memory consumption errors which I usually fix by restarting VS Code)</p>",
        "id": 242712921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623751994
    },
    {
        "content": "<p>Kevin, thanks a lot for looking at this!  I think that on some version of <code>master</code>, the instance is there, which might explain why it appears to work for Mario.  Anyway, I am glad that someone else is seeing the same behaviour, since I was also getting lots of excessive memory afterwards and was not sure whether that had something to do with the issue.</p>",
        "id": 242715328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623753639
    },
    {
        "content": "<p>(in case you do not want to go to the <code>adomani_covariant_instances</code> branch, the <code>with_bot nat</code> appears when doing computations with the degree of polynomials.)</p>",
        "id": 242715405,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623753701
    },
    {
        "content": "<p>I went ahead and reintroduced the instances with the <code>by apply_instance</code> proof and a comment before them.  I want to make sure that nothing else breaks.  If you want to get to the stage where the weirdness happened, this is the commit hash is</p>\n<p><code>6d0a12adbf460f6d506294851cdedbf93d75f7f2</code></p>",
        "id": 242716155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623754255
    },
    {
        "content": "<p>In case anyone is interested, adding back the two <code>instance</code>s proved by <code>by apply_instance</code> made PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7940\">#7940</a> build successfully.  You can see that the previous attempt failed and that the only change has been to reintroduce the \"automatic\" instances.</p>\n<p>I am going to leave the PR as awaiting review, but if anyone has an idea of how to make this more efficient, I would be happy to hear any suggestion!</p>",
        "id": 242759142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623773788
    },
    {
        "content": "<p>I tried producing a shorter example, but failed.  Still, it seems from the builds of this PR that an <code>instance</code> that can be proven by <code>by apply_instance</code> need not be superfluous.</p>\n<p>I left comments about this above the relevant instances: should I do something else?</p>\n<p>Ideally, I would like to get rid of these instances, but, for the moment, I can live with keeping them, since I do think that their consequences are useful!</p>",
        "id": 243195912,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624041843
    },
    {
        "content": "<p>I have seen things like this in mathlib by the way, labelled as \"shortcuts for type class inference\". <a href=\"https://github.com/leanprover-community/mathlib/blob/28aee9512e32b393f1d28bd6a08eb5ccd6e055ed/src/data/rat/basic.lean#L451-L472\">Here</a> is a load in <code>data.rat.basic</code>. But I think your problem is different.</p>",
        "id": 243249694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624108580
    }
]