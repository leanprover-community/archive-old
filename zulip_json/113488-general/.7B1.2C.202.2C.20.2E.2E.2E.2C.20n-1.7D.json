[
    {
        "content": "<p>As Scott mentioned elsewhere, I had some difficulty defining the set {1, 2, ..., n-1} : <code>finset pnat</code>. I ended up using recursion--thanks Chris for providing the magical last line.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--- The set {1, 2, ..., n-1}</span>\n<span class=\"n\">def</span> <span class=\"n\">my_range</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ+</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span> <span class=\"bp\">::</span> <span class=\"n\">my_range</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I know <code>multiset</code> is not <code>finset</code>--using <code>multiset</code> made things a bit easier later because I wanted to subtract a sum over {1, 2, ..., n-1} from the same sum over {1, 2, ..., n} and this way I didn't have to prove that the element n is not in the former set. But I guess if I could define {1, 2, ..., n-1} in terms of stuff that's already in mathlib then checking that last side condition would also have been easy.</p>",
        "id": 134526569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537796052
    },
    {
        "content": "<p>Any suggestions?<br>\nI think I could have used <code>finset.range</code>, <code>finset.filter</code>, <code>finset.attach</code>, and <code>finset.map</code>, but that also sounded a bit awkward.</p>",
        "id": 134526586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537796090
    },
    {
        "content": "<p>I had to do something similar once, and I used <code>(finset.range n).erase 0</code>. I really should be defined though. We have <code>range'</code> on lists, perhaps it should be extended to finsets.</p>",
        "id": 134536670,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537805836
    },
    {
        "content": "<p>The extra complication here is that I need a <code>finset pnat</code></p>",
        "id": 134536735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537805894
    },
    {
        "content": "<p>Not a <code>finset nat</code></p>",
        "id": 134536741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537805900
    },
    {
        "content": "<p>Haskell has an <code>Enum</code> class, maybe we could adapt it...</p>",
        "id": 134536767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537805939
    },
    {
        "content": "<p>mathlib has <code>fintype</code> and <code>countable</code> which you may be able to use for this purpose</p>",
        "id": 134539021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537808641
    },
    {
        "content": "<p>I'm not sure it is good to rely on what the <code>countable</code> instance is. But the underlying idea is good. Namely, I could start with <code>range (n-1) : finset nat</code> and then <code>finset.map</code> the function which takes <code>n : nat</code> to <code>n+1 : pnat</code></p>",
        "id": 134539480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537809155
    },
    {
        "content": "<p>That's much simpler than the roundabout way I suggested earlier.</p>",
        "id": 134539489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537809184
    },
    {
        "content": "<p>what about changing range to <code>range : nat -&gt; nat -&gt; finset nat</code>?  With <code>range n m = {n, ..., m - 1}</code> or <code>range n m = {m + 1, ..., n}</code> if <code>m &lt; n</code></p>",
        "id": 134539635,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537809363
    },
    {
        "content": "<p>or adding an <code>interval</code> for this</p>",
        "id": 134539649,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537809375
    },
    {
        "content": "<blockquote>\n<p>I'm not sure it is good to rely on what the countable instance is.</p>\n</blockquote>\n<p>I think you're right. We need to assume a linear order on the elements. Maybe mapping the elements to integers would be better though.</p>",
        "id": 134541041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537811041
    },
    {
        "content": "<p>I would suggest using <code>finset.map succ_pnat (finset.range n.pred)</code></p>",
        "id": 134560767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537827813
    },
    {
        "content": "<p>Because computers were less prevalent when I was younger, I had done a lot of mathematics on paper before I seriously engaged with mathematical software. I remember being very surprised by this computer science idea of starting at 0 instead of 1, and for some time I would keep track of where I was summing from and whether it would be easier to start at 0 or 1 (in the sense that e.g. the indices are simpler if you make one choice over the other). In computer-sciency things it seems to me that 0 is often a good choice, but in maths the positive naturals do play an important role, and it is not uncommon that starting to sum at 1 is a natural thing to do.</p>\n<p>I still have a very poor understanding of why the following is not what is done: define pnat to be an inductive type with two constructors <code>one</code> and <code>succ</code>, write a tactic which proves everything about <code>pnat</code> from the corresponding statements for <code>nat</code> and then perhaps with a little human help prove the important things about prange(n)={1,2,...,n}.</p>",
        "id": 134579309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537859682
    },
    {
        "content": "<p>one downside of that is that <code>pnat</code> would certainly be much bigger this way</p>",
        "id": 134579385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537859817
    },
    {
        "content": "<p>Does that matter? Give it a coercion to nat, prove the lemmas, forget about it.</p>",
        "id": 134579676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537860170
    },
    {
        "content": "<p>You could say the same the other way around. To prove a type is inductive with some constructors you prove an appropriate <code>rec_on</code> theorem</p>",
        "id": 134579794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537860360
    },
    {
        "content": "<p>Fair point. I will need to think harder about why I was at some point concerned that pnat was \"only\" a subtype and see if any of my reasons make any sense in the cold light of day.</p>",
        "id": 134579923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537860585
    },
    {
        "content": "<p>I was surprised to see that there was no <code>pnat.rec_on</code> yet, which made my recursive definition more complicated than expected. I failed to make a note of that so it's good that that came up again.</p>",
        "id": 134589702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537874774
    },
    {
        "content": "<p>Just to clarify, in the particular case of the IMO problem I'm solving, there's no technical reason whatsoever that I couldn't just reindex things starting at 0--the only purpose I have for not doing that is to see what are the little issues like this which crop up when starting from 1. (And the problem does <em>say</em> \"a_1, a_2, ...\".)</p>",
        "id": 134589746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537874871
    }
]