[
    {
        "content": "<p>I'm finding it very convenient to be able to write things like <code>rintro (s : set X)</code> to simultaneously <code>intro</code> and <code>change</code> a hypothesis. How hard would it be to support the syntax <code>rintros (s₀ s₁ : set X)</code>?</p>",
        "id": 213999254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603243804
    },
    {
        "content": "<p>It's actually a bit of coincidence that the notation works out the same as a lambda binder, because it is parsed completely differently</p>",
        "id": 213999445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244049
    },
    {
        "content": "<p>in particular, <code>s : set X</code> there is a rcases pattern, so it's not clear whether this entails adding <code>s₀ s₁ : set X</code> as an rcases pattern as well</p>",
        "id": 213999466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244106
    },
    {
        "content": "<p>oh I see, hmm</p>",
        "id": 213999469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603244117
    },
    {
        "content": "<p>Right, it makes sense at top level like this but in general the <code>(x : t)</code> form makes sense nested inside other patterns as well...</p>",
        "id": 213999481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603244147
    },
    {
        "content": "<p>I mean we could have a special <code>rintro</code> parser to do this trick only at the top level, or we could do some more extension of <code>rcases_many</code> to allow interpreting <code>pat1 pat2 pat3</code> as a synonym for <code>&lt;pat1, pat2, pat3&gt;</code></p>",
        "id": 213999551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244218
    },
    {
        "content": "<p>which, oddly enough, might even unify <code>rcases with</code> syntax with <code>cases with</code></p>",
        "id": 213999574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244268
    },
    {
        "content": "<p>although if the default behavior of <code>as_tuple</code> is to transform <code>(&lt;p1, p2, p3&gt; : t)</code> into <code>[(p1:t), (p2:t), (p3:t)]</code> then that could break applications where you actually wanted<code>[(&lt;p1, p2, p3&gt; : t)]</code>. You could fix this with more brackets but it would be a breaking change</p>",
        "id": 213999759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244482
    },
    {
        "content": "<p>actually I don't think they can be treated as synonyms, it will break uses like <code>rintro (&lt;x, y&gt; : t) z</code> to look like <code>rintro (x : t) (y : t) z</code></p>",
        "id": 213999926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244734
    },
    {
        "content": "<p>or even just <code>rintro &lt;x, y&gt; z</code> -&gt; <code>rintro x y z</code> which is the most common use case</p>",
        "id": 213999950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603244763
    },
    {
        "content": "<p>Right, it would be nice to unify <code>rcases</code> and <code>cases</code>, but I think the translation would have to be <code>&lt;x y z&gt;</code> as a synonym for <code>&lt;x, y, z&gt;</code>, or <code>&lt;(x y z : int)&gt;</code> for <code>&lt;x : int, y : int, z : int&gt;</code></p>",
        "id": 214000231,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603245021
    },
    {
        "content": "<p>and that feels pretty weird (as well as not matching <code>cases</code>)</p>",
        "id": 214000245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603245043
    },
    {
        "content": "<p>It wouldn't really be unifying with <code>cases</code> in any case since cases uses unstructured names</p>",
        "id": 214000615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603245470
    },
    {
        "content": "<p>in the simple structure-destructuring case it might work though</p>",
        "id": 214000667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603245494
    },
    {
        "content": "<p>question: should <code>rintro ((x y : t) z w : u)</code> be allowed to work and intro 4 things?</p>",
        "id": 214000697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603245555
    },
    {
        "content": "<p>it sort of naturally falls out of the grammar I'm writing but it is admittedly a little weird</p>",
        "id": 214000723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603245579
    },
    {
        "content": "<p>So it would mean <code>rintro (x y : t) (z w : u)</code>?</p>",
        "id": 214001097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603245933
    },
    {
        "content": "<p>It seems pretty weird, but on the other hand nobody would have ever tried writing it if you hadn't mentioned it so it wouldn't matter <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 214001157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603245965
    },
    {
        "content": "<p>It would mean <code>rintro ((x : t) : u) ((y : t) : u) (z : u) (w : u)</code></p>",
        "id": 214001873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603246882
    },
    {
        "content": "<p>so that's using <code>change</code> twice at two different types</p>",
        "id": 214001936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603246930
    },
    {
        "content": "<p>Oh... I'm not sure if that's more weird or less weird. I guess less weird?</p>",
        "id": 214001937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603246931
    },
    {
        "content": "<p>I will file this under \"not my problem if you want to be weird\" then</p>",
        "id": 214001975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603246985
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4722\">#4722</a></p>",
        "id": 214003362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603248706
    },
    {
        "content": "<p>I didn't implement <code>&lt;x y z&gt;</code> though</p>",
        "id": 214003421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603248747
    },
    {
        "content": "<p>Another \"so you want to be weird, eh?\" is <code>rintro (: t) x</code> which could conceivably mean the same as <code>rintro x</code>. I'm explicitly flagging this one as a parse error though</p>",
        "id": 214004914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603251101
    },
    {
        "content": "<p>Hm, it occurs to me that with a simple switching of top level parser, we can also make <code>rintro x y : t</code> work (and mean <code>rintro (x : t) (y : t)</code>). Is that something people want?</p>",
        "id": 214011964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603261486
    },
    {
        "content": "<p>That looks pretty nice</p>",
        "id": 214013478,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603263086
    },
    {
        "content": "<p>oof, another special case: I tried this, and it means that <code>rintro,</code> or <code>rintro : t,</code> are parse errors (instead of no-ops). Good? Bad?</p>",
        "id": 214013815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603263362
    },
    {
        "content": "<p>Sounds fine to me</p>",
        "id": 214014560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603264028
    }
]