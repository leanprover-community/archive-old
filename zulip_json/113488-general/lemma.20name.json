[
    {
        "content": "<p>How should I call these lemmas?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">TODO_name</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">inv_mul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">TODO_name2</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">mul_inv</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197746779,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573484
    },
    {
        "content": "<p>I found myself doing this <code>rw</code> from right to left more than once, so I assume that it should be a named lemma.</p>",
        "id": 197746886,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573539
    },
    {
        "content": "<p><code>inv_smul_self_smul</code>?</p>",
        "id": 197746932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573567
    },
    {
        "content": "<p><code>smul_inv_smul</code>?</p>",
        "id": 197746948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589573577
    },
    {
        "content": "<p>Sorry, forgot to add the other one.</p>",
        "id": 197747008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573628
    },
    {
        "content": "<p><code>inv_smul_self_smul</code> and <code>self_smul_inv_smul</code>?<br>\n<code>smul_inv_smul</code> and <code>smul_smul_inv</code>?</p>",
        "id": 197747103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573664
    },
    {
        "content": "<p><code>smul_smul_inv</code> for the second</p>",
        "id": 197747107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589573665
    },
    {
        "content": "<p>I guess you could put <code>smul</code> and <code>inv</code> in either order, I don't think we're very consistent about this</p>",
        "id": 197747149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589573693
    },
    {
        "content": "<p>By the way, do you really need both the up arrow and the <code>:M</code>?</p>",
        "id": 197747190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589573718
    },
    {
        "content": "<p>Up arrow tells it to coerce after <code>⁻¹</code></p>",
        "id": 197747226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573749
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197747325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589573795
    },
    {
        "content": "<p>The dutch verb \"smullen\" means \"to enjoy/feast some food\" as in \"yummy yummy\".<br>\nSo <code>smul_smul_*</code> reads quite funny to me.</p>",
        "id": 197747374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573832
    },
    {
        "content": "<p>I suggest <code>yummy_yummy_inv</code></p>",
        "id": 197747400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573848
    }
]