[
    {
        "content": "<p>What's the easiest way to find where a \"failed\" was generated? I've been resorting to inserting trace statements in multiple files and now its just getting out of hand</p>",
        "id": 133643406,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536564673
    },
    {
        "content": "<p>also, in the tactic monad, is there a way to get a stacktrace?</p>",
        "id": 133643997,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536565474
    },
    {
        "content": "<p>There is the <code>vm</code> monad, which purports to be a debugger, but I don't know anyone who knows how to use it except possibly <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 133644045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536565550
    },
    {
        "content": "<p>What I usually do is that, if I have a function with three lines I add the following until I find the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_fn</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">stmt1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;line A&quot;</span><span class=\"o\">,</span>\n   <span class=\"n\">stmt2</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;line B&quot;</span><span class=\"o\">,</span>\n   <span class=\"n\">stmt3</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;line C&quot;</span>\n</pre></div>\n\n\n<p>When I have found the function that fails, I repeat in that function.</p>",
        "id": 133671919,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536595679
    },
    {
        "content": "<p>I've never used <code>vm</code> <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span> . I suppose it should be possible to write a <code>vm_monitor</code> that prints the stack trace whenever <code>failed</code> is called.</p>",
        "id": 133673961,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536597912
    },
    {
        "content": "<p>who wrote it?</p>",
        "id": 133674025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536597975
    },
    {
        "content": "<p>I had never used `vm_monitor and I gave it a try. Here's what I did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">debugger</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">vm_monitor</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_mon</span> <span class=\"o\">:</span> <span class=\"n\">vm_monitor</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"n\">vm</span><span class=\"bp\">.</span><span class=\"n\">curr_fn</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">vm</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">}</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">my_tactic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">debugger</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>It sets up a monitor that, before each instruction, prints the name of the enclosing function. It does not seem to be aware of failures but at least, you can figure out where the problem is by looking at the last printout</p>",
        "id": 133683100,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536607108
    },
    {
        "content": "<p>If you use the following instead, you can get an overview of the call nesting structure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">vm_monitor</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_mon</span> <span class=\"o\">:</span> <span class=\"n\">vm_monitor</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n  <span class=\"n\">step</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"n\">fn&#39;</span> <span class=\"err\">←</span> <span class=\"n\">vm</span><span class=\"bp\">.</span><span class=\"n\">curr_fn</span><span class=\"o\">,</span>\n     <span class=\"n\">n&#39;</span> <span class=\"err\">←</span> <span class=\"n\">vm</span><span class=\"bp\">.</span><span class=\"n\">call_stack_size</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"o\">,</span><span class=\"n\">some</span> <span class=\"n\">fn&#39;</span><span class=\"o\">))</span> <span class=\"err\">$</span> <span class=\"n\">vm</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"s2\">&quot;| &quot;</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">fn&#39;</span><span class=\"o\">,</span>\n     <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span><span class=\"o\">,</span><span class=\"n\">fn&#39;</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 133684138,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536608418
    }
]