[
    {
        "content": "<p>I am using lean to teach our 2nd year module on logic. The student numbers are up and I am looking for a more efficient way to assess the coursework (it doesn't count for much but they need to do it). How can I set up lean so that the student can run a script which produces an output saying with theorems they have proved (without using sorry). Ideally I would also rule out the use of advanced tactics.</p>",
        "id": 299735699,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1663675857
    },
    {
        "content": "<p>Sorry just saw that there is \"Lean for Teaching\".</p>",
        "id": 299735995,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1663675971
    },
    {
        "content": "<p>I think some of the setups in lean for teaching are more robust, but if you just want something quick and easy and trust that students aren't trying to break the system you can use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">environment</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">proved_thms</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">e.mfold</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e.decl_olean</span> <span class=\"n\">d.to_name</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">∧</span><span class=\"c1\">-- list decls in the current file only</span>\n        <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">quot</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prefix_of</span> <span class=\"n\">d.to_name</span> <span class=\"bp\">∧</span><span class=\"c1\">-- some axioms that are always there</span>\n        <span class=\"bp\">¬</span> <span class=\"n\">d.is_auto_or_internal</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"c1\">-- ignore junk</span>\n        <span class=\"bp\">¬</span> <span class=\"n\">d.value.contains_sorry</span> <span class=\"k\">then</span> <span class=\"c1\">-- check for literal sorry or unfinished proof</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">d.to_name</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"n\">proved_thms</span>\n</code></pre></div>\n<p>there are countless ways to cheat such a simple system but its simplicity can also be useful, for instance students can use a sorried statement to prove an unsorried one and it will count. Completely formally this isn't a proof, but of course this might be a situation where we would still award the point (assuming the exercises depend on each other)</p>",
        "id": 299738541,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663676935
    }
]