[
    {
        "content": "<p>I am trying to define a coercion of finsets of a subtype to finsets of a type, by just taking the image of the subtype-type coercion. The instance below seems to define this coercion correctly, but when I try to give some simple lemmas, I get strange behaviour:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_subtype_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}{</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"err\">↥</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_subtype_union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}{</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}(</span><span class=\"n\">X₁</span> <span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"err\">↥</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">X₁</span> <span class=\"err\">∪</span> <span class=\"n\">X₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The fact that <code>exact rfl</code> works as a proof for the lemma seems odd to me, but what is odder is that when I invoke the lemma at some <code>X₁  X₂</code> later, I get the trivial hypothesis <code>this: ↑X₁ ∪ ↑X₂ = ↑X₁ ∪ ↑X₂</code> rather than the intended <code>this: ↑(X₁ ∪ X₂) = ↑X₁ ∪ ↑X₂</code>. I don't see another way to state that my coercion commutes with union - what am I doing wrong?</p>",
        "id": 208625975,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1598914771
    },
    {
        "content": "<p>I think this is because Lean does \"outside-in elaboration\" (?): it sees <code>((X₁ ∪ X₂) : finset α)</code>, realizes that you want <code>X₁ ∪ X₂</code> to be a <code>finset α</code>, and derives that you want <code>∪</code> to be a function <code>? → ? → finset α</code>, and the only <code>∪</code> that matches is <code>finset α → finset α → finset α´, so it coerces </code>X₁<code> and </code>X₂<code> to </code>finset α` before taking the union.</p>\n<p>I haven't tried, but maybe <code>(((X₁ ∪ X₂) : finset ↥Y) : finset α)</code> on the LHS will yield better results</p>",
        "id": 208657537,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598948410
    },
    {
        "content": "<p>I also haven't tried it, but assuming the problem is indeed the outside-in elaboration, here's a previous thread where I hit the same problem and was offered some solutions:<br>\n<a href=\"#narrow/stream/113488-general/topic/.60has_inv.60.20in.20rings\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60has_inv.60.20in.20rings</a></p>",
        "id": 208681861,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598964500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/finset.20coercion.20strangeness/near/208657537\">said</a>:</p>\n<blockquote>\n<p>I think this is because Lean does \"outside-in elaboration\" (?): it sees <code>((X₁ ∪ X₂) : finset α)</code>, realizes that you want <code>X₁ ∪ X₂</code> to be a <code>finset α</code>, and derives that you want <code>∪</code> to be a function <code>? → ? → finset α</code>, and the only <code>∪</code> that matches is <code>finset α → finset α → finset α´, so it coerces </code>X₁<code> and </code>X₂<code> to </code>finset α` before taking the union.</p>\n<p>I haven't tried, but maybe <code>(((X₁ ∪ X₂) : finset ↥Y) : finset α)</code> on the LHS will yield better results</p>\n</blockquote>\n<p>and then you shouldn't need any type annotations on the RHS.</p>",
        "id": 208696184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598971148
    },
    {
        "content": "<p>Thank you, that did the trick - however, I'm getting some more strange behaviour. I am running into a problem when applying the lemma within a structure. The below is a minimal problematic example isomorphic to my own: </p>\n<p>Essentially, when I invoke the union lemma above, I can get into a situation where a seemingly tautological goal state involving the equality of two coerced finsets can't be proved by rw/refl/simp/trivial. I have tried extensive unfolding to try to find how the two sides of the equality are actually different, to no avail. The only suggestion I can find that they differ is with <code>--set_option pp.all true</code>, but the difference is so deeply buried in abstraction that I can't make any sense of it. </p>\n<p>In this example, <code>apply image_union</code> does solve my problem, but I am running into similar issues with more complicated examples that cause <code>linarith</code> to break, so I would really like to understand the issue. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- Coercion stuff</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">coe_subtype_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}{</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">union_lemma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}{</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">):</span>\n    <span class=\"o\">(((</span><span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"n\">Y</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">image_union</span>\n\n<span class=\"c1\">-- Structure</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subadditive_fn_on</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- restrict the subadditive function to a subset Y of the domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">restr</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">subadditive_fn_on</span> <span class=\"n\">γ</span><span class=\"o\">)(</span><span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subadditive_fn_on</span> <span class=\"o\">(</span><span class=\"err\">↥</span><span class=\"n\">Y</span><span class=\"o\">):=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">),</span>\n    <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n         <span class=\"n\">convert</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">hf</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- we now have S T: finset ↥Y</span>\n        <span class=\"c1\">-- goal state is ⊢ ↑(S ∪ T) = ↑S ∪ ↑T</span>\n        <span class=\"c1\">-- apply image_union, WORKS</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">union_lemma</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- goal state is now ⊢ ↑(S ∪ T) = ↑(S ∪ T)</span>\n        <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- Doesn&#39;t work...</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 208728810,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1598985372
    },
    {
        "content": "<p>This is a <code>decidable_eq</code> instance mismatch issue</p>",
        "id": 208729972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598985881
    },
    {
        "content": "<p><code>convert rfl</code> can take care of it</p>",
        "id": 208729982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598985885
    },
    {
        "content": "<p>Thank you!</p>\n<p>What would be the best way to, say, handle an invocation of linarith involving multiple expressions that are 'equal' in this way? Do I have to explicitly insert hypotheses that assert the equality of all relevant pairs (how do I even do this when they are syntatically identical?), or is there a way to equip linarith with the ability to see such equalities automatically?</p>",
        "id": 208730804,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1598986269
    },
    {
        "content": "<p><code>convert rfl</code> does basically the same as <code>congr'</code>, right?</p>",
        "id": 208732777,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598987075
    },
    {
        "content": "<p>pretty much</p>",
        "id": 208732932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598987147
    },
    {
        "content": "<p>Is there a way to stop the mismatch from happening in the first place?</p>",
        "id": 208733131,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1598987211
    },
    {
        "content": "<p>In this case: <code>union_lemma</code> states something about the union of two finsets, which is only defined for finsets over a decidable type. If you add <code>[decidable_eq \\a]</code>(or maybe <code>{h : decidable_eq \\a}</code>) as an argument to <code>union_lemma</code>, I expect that the issue will resolve.</p>",
        "id": 208733666,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598987431
    },
    {
        "content": "<p>In this case, adding <code>[hY : decidable_eq Y]</code> to <code>union_lemma</code> works, but I think that might result in problems in other examples.</p>",
        "id": 208734165,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598987646
    },
    {
        "content": "<p>Is there a good general solution to this? By this I mean one where <code>[decidable_eq Y]</code> is not being thrown indiscriminately into various lemma statements, and yet where apparently equal expressions are actually equal in a way that doesn't need to be explicitly nailed down and hit with <code>congr</code> each time. All I can think of is to bundle <code>decidable_eq</code> with <code>finset</code> in its own type, and essentially rewrite the <code>finset</code> API with that. All this will be occuring with multiple types, so a <code>variable</code> declaration isn't a solution.</p>",
        "id": 208815279,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1599049480
    },
    {
        "content": "<p>A more specific question - is there a way to make sure that all instances of <code>decidable_eq</code> come from <code>open_locale classical</code> rather than from elsewhere?</p>",
        "id": 208911035,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1599097606
    },
    {
        "content": "<p>Unfortunately this won't help, because there are theorems that contain partial dec_eq proofs in them that are not the classical one</p>",
        "id": 208912133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599098693
    },
    {
        "content": "<p>for example \"finset A has dec_eq if A does\"</p>",
        "id": 208912150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599098709
    },
    {
        "content": "<p>which will cause diamond problems along the lines <code>finset.dec_eq (classical.dec A) != classical.dec (finset A)</code></p>",
        "id": 208912182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599098755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319356\">@Pim Spelier</span> Take note, I think this is an example that helps show why we made polynomials classical</p>",
        "id": 208912361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599098910
    },
    {
        "content": "<p>(referencing <a href=\"#narrow/stream/113489-new-members/topic/Noncomputable.20polynomials/near/208745260\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Noncomputable.20polynomials/near/208745260</a> )</p>",
        "id": 208912473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599099007
    },
    {
        "content": "<p>For what I'm doing, (I think) I don't care about decidable_eq in any sense explicitly - it just apparently crops up implicitly when I want to describe the union of finsets. Does this mean there is no solution to my problems that doesn't involve keeping track of instances very carefully?</p>",
        "id": 208913572,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1599100317
    },
    {
        "content": "<p>I think the issue that prompted <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> to open <a href=\"https://github.com/leanprover-community/mathlib/issues/5622\">#5622</a> is another example of pain arising from <code>decidable_eq</code> + <code>classical</code>. Are there some general recommendations here? Some linter, or something to add to a library note?</p>",
        "id": 221728442,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609901688
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 221728487,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609901761
    },
    {
        "content": "<p>In my experience, the best we can do in API lemmas is to assume decidability of all propositions used both in LHS and RHS. In particular, do not assume <code>[decidable_eq α]</code> if we actually need <code>[decidable_pred (s : finset α)]</code></p>",
        "id": 221734331,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609909421
    },
    {
        "content": "<p>This way lemmas will work both in classical and non-classical settings.</p>",
        "id": 221734380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609909452
    },
    {
        "content": "<p>The issue with <code>equiv.perm.sign</code> in the PR was that the definition of <code>sign</code> is explicit in requiring <code>[decidable_eq α]</code> but some lemmas provided it just by <code>open_locale classical</code> instead of having it as a constraint in the arguments.</p>",
        "id": 221734801,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609909991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Can you give an example where <code>[decidable_pred (s : finset α)]</code> is needed? Is there a typo or is there a coercion from finsets to predicates that I'm missing?</p>",
        "id": 221734871,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609910089
    },
    {
        "content": "<p>This is a typo. I meant <code>[∀ x, decidable (x ∈ s)]</code></p>",
        "id": 221734973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910242
    },
    {
        "content": "<p>I don't remember if we have <em>definitions</em> that take <code>[∀ x, decidable (x ∈ s)]</code> as an argument. If not, then my example is irrelevant.</p>",
        "id": 221735028,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910284
    },
    {
        "content": "<p>Yes, we have: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.piecewise\">docs#finset.piecewise</a></p>",
        "id": 221735055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910358
    },
    {
        "content": "<p>E.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.piecewise_coe\">docs#finset.piecewise_coe</a> takes two <code>[decidable]</code> arguments instead of deducing one of them from the other.</p>",
        "id": 221735109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910413
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.piecewise_insert\">docs#finset.piecewise_insert</a> takes all <code>[decidable]</code> arguments it needs to use.</p>",
        "id": 221735125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910467
    },
    {
        "content": "<p>Possibly, we should require that the type of a lemma (not a proof term) involves no non-trivial <code>[decidable]</code> instances.</p>",
        "id": 221735191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910531
    },
    {
        "content": "<p>In particular, if we need both <code>[decidable_eq α]</code> and <code>[decidable_eq (option α)]</code> to state the lemma, then both should be present as arguments.</p>",
        "id": 221735283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609910681
    },
    {
        "content": "<p>Concretely, that means some lemmas in <code>src/group_theory/perm/option.lean</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/5593\">#5593</a> should take <code>[decidable_eq (option α)]</code> as well?</p>",
        "id": 221735573,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609911166
    },
    {
        "content": "<p>I think just on <code>α</code> is fine, because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.sign</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.option</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">show decidable_eq (option α), from λ (a b : option α), option.decidable_eq a b : decidable_eq (option α)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 221735652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609911259
    },
    {
        "content": "<p>Can we have a linter that verifies lemma statements do not use classical.decideable?</p>",
        "id": 221747903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609925342
    },
    {
        "content": "<p>I don't think we should necessarily do something about all such examples</p>",
        "id": 221749583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609926881
    }
]