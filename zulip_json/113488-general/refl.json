[
    {
        "content": "<p>why does lean automatically tag certain theorems with <code>@[_refl_lemma]</code>?</p>",
        "id": 123067472,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519778983
    },
    {
        "content": "<p>I want to know too!</p>",
        "id": 123067521,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519779011
    },
    {
        "content": "<p>That attribute means that it's a refl lemma (it was proven by <code>rfl</code>), and it is basically \"<code>@[simp]</code> for <code>dsimp</code>\"</p>",
        "id": 123068042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519779812
    },
    {
        "content": "<p>someday i'd like to write a boilerplate macro that goes into definitions and creates lemmas for each branch</p>",
        "id": 123069575,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519782283
    },
    {
        "content": "<p>although even better is if we could suggest names while  constructing a <code>def</code> using the equation compiler</p>",
        "id": 123069589,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519782339
    },
    {
        "content": "<blockquote>\n<p>That attribute means that it's a refl lemma (it was proven by <code>rfl</code>), and it is basically \"<code>@[simp]</code> for <code>dsimp</code>\"</p>\n</blockquote>\n<p>Is this necessary because definitional equality is not transitive?</p>",
        "id": 123069726,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519782530
    },
    {
        "content": "<p>No, it's just a way to guide the operation of <code>dsimp</code>. There are loads of things that are defeq, so how should it know you want <code>a + succ b</code> to \"unfold\" to <code>succ (a + b)</code> and not something else? Equation lemmas are used for this purpose, and the ones that are known to be definitional are legal for use by <code>dsimp</code></p>",
        "id": 123069868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519782772
    },
    {
        "content": "<p>Does <code>dsimp</code> use anything else?</p>",
        "id": 123069975,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519783007
    },
    {
        "content": "<p>It uses the bracket list of course, but most of its stuff comes from equation lemmas</p>",
        "id": 123070051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783146
    },
    {
        "content": "<blockquote>\n<p>someday i'd like to write a boilerplate macro that goes into definitions and creates lemmas for each branch</p>\n</blockquote>\n<p><code>def</code> does this currently...</p>",
        "id": 123070113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783222
    }
]