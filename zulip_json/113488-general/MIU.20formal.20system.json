[
    {
        "content": "<p>Thanks to all the excellent documentation out there, I've felt confident enough to try formalising a little system in Lean. I chose the MIU formal system, as described in Douglas Hofstadter's book <a href=\"https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach\">Gödel, Escher, Bach</a>.</p>\n<p>Using Lean, I proved that a particular typographical condition on strings gives a decision procedure for derivability. I'm sure the code is rough around the edges and could be much improved, but it works!</p>\n<p>The <a href=\"https://github.com/gihanmarasingha/miu_language\">MIU project is on GitHub</a>. Any thoughts or feedback from experienced Leaners (if that's the right word) are much appreciated!</p>",
        "id": 204710171,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1595445364
    },
    {
        "content": "<p>I'm not an experienced Leaner but I'd like to suggest that this go into <code>mathlib/archive</code>. Or any other community place a more experienced Leaner finds appropriate.</p>",
        "id": 204715113,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595448032
    },
    {
        "content": "<p>I agree!</p>\n<p>We generally have pretty high standards for <code>archive</code> --- if material coming into mathlib isn't considered \"relevant enough\" to go in the main library (i.e. it's unlikely to ever be reused), then it has to have good pedagogical value. I've only looked at this code briefly, but it does look nicely done, so getting it through a PR into <code>archive</code> seems quite plausible.</p>",
        "id": 204736146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595461711
    },
    {
        "content": "<p>(The advantages are: 1. hopefully you learn useful things by surviving a PR process, (and we try to be friendly) 2. it means the material won't bitrot away as Lean progresses, 3. it contributes useful material for new users to learn from.)</p>",
        "id": 204736224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595461785
    },
    {
        "content": "<p>Looking at <a href=\"https://github.com/gihanmarasingha/miu_language/blob/master/src/arithmetic.lean\">https://github.com/gihanmarasingha/miu_language/blob/master/src/arithmetic.lean</a> : a good general way to do this is to prove <code>∃ᶠ n in at_top, 2^(n:nat) ≡ 1 [MOD 3]</code> and similarly for <code>2 [MOD 3]</code>. Then you get the rest from <code>tendsto (pow 2) (at_top : filter nat) at_top</code>.</p>",
        "id": 204763215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595484060
    },
    {
        "content": "<p>(and general lemmas about <code>filter.eventually</code>, <code>filter.frequently</code>, and <code>filter.at_top</code>).</p>",
        "id": 204763234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595484085
    },
    {
        "content": "<p>And the lemma about <code>pow</code> follows from <code>∃ᶠ n in at_top, n ≡ a [MOD b]</code>.</p>",
        "id": 204763292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595484149
    },
    {
        "content": "<p>Thanks for the comments!</p>",
        "id": 205302790,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1595978800
    },
    {
        "content": "<p>How about presenting this theorem as a proof of <code>decidable_rel derivable</code>, by proving it is equivalent to <code>decstr</code> (without defining <code>decstr</code> directly)?</p>",
        "id": 205302967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595978985
    },
    {
        "content": "<p>that way you can just <code>#eval to_bool (derivable \"MU\")</code> and get <code>ff</code></p>",
        "id": 205303032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595979023
    },
    {
        "content": "<p>Also your <code>derivable</code> relation can be more clearly written like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">derivable</span> <span class=\"o\">:</span> <span class=\"n\">miustr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">derivable</span> <span class=\"s2\">&quot;MI&quot;</span>\n<span class=\"bp\">|</span> <span class=\"n\">r1</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">])</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">r2</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">r3</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">U</span> <span class=\"bp\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">r4</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">derivable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205303554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595979487
    },
    {
        "content": "<p>I still need to learn more about filters before I can implement <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> 's suggestion. I haven't yet made <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s suggested change.  Perhaps I should just make a PR to the mathlib archive and do required changes through code review before my teaching and admin overwhelms me.</p>\n<p>So, as per your LFTCM2020 video, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , can I ask someone to give me permission to push a branch?</p>\n<p>Also, <em>where</em> precisely should I ask for this to live? Should it go in (say) mathlib/archive/miu_language ? The directory structure  of archive isn't clear to me.</p>",
        "id": 206310061,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1596834700
    },
    {
        "content": "<p>I've sent you an invitation: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 206310212,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596834765
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 206310225,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1596834780
    },
    {
        "content": "<p><code>archive/miu_language</code> sounds like a good place</p>",
        "id": 206310257,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596834812
    },
    {
        "content": "<p><code>archive/miu_language</code> looks like a good choice.</p>",
        "id": 206310262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596834817
    },
    {
        "content": "<p>Slightly annoying issue: I've cloned mathlib and put my files in <code>archive/miu_language</code>, but I can't import (say) the file <code>basic.lean</code> in this directory to other files in the same directory as <code>archive</code> isn't in the lean path.</p>\n<p>Is there a way to import files that aren't in the path or to modify the path? If not, I can just put everything in one big file.</p>",
        "id": 206558639,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597140512
    },
    {
        "content": "<p>You can use relative imports <code>import .foo</code></p>",
        "id": 206558840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140685
    },
    {
        "content": "<p>This isn't allowed in the <code>src/</code> directory, but I guess is the right plan in <code>archive/</code>.</p>",
        "id": 206558854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597140703
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>! It works now.</p>",
        "id": 206558868,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597140716
    },
    {
        "content": "<p>Ah, I'm afraid committing the @derive suggestion broke things. How do I go back and fix it? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. Thanks!</p>",
        "id": 206562645,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597144035
    },
    {
        "content": "<p>Never mind, I think I've reverted successfully, but still not sure how to use <code>@derive</code> in this case.</p>",
        "id": 206563188,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597144530
    },
    {
        "content": "<p>Sorry more git noob question: when making edits as per the review suggestions, should I only commit the changes via the github interface or can I make them locally and push?</p>\n<p>Doing it via github doesn't allow me to check whether the edits work but making the changes locally presumably doesn't allow the commits to be registered as a response to the review.</p>\n<p>Thanks.</p>",
        "id": 206594795,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597162291
    },
    {
        "content": "<p>Either is fine. If you make the changes locally, just remember to add replies to and / or \"resolve\" the comments that you addressed.</p>",
        "id": 206595058,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597162415
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 206595157,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597162454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks for the really useful review feedback. I'm especially happy that your suggestion of removing <code>∃</code> in the <code>goodm</code> definition has enabled me to prove <code>decidable_pred derivable</code>, as per <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s idea.</p>\n<p>As the code has substantially changed since original PR, should I cancel the PR and create a new one or can the review process continue as it is?</p>",
        "id": 206693116,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597238909
    },
    {
        "content": "<p>github should be able to handle this fine. Make the changes on your local <code>miu</code> branch and push, and everything should just work fine -- old comments will be marked as resolved etc</p>",
        "id": 206695612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597240124
    },
    {
        "content": "<p>Only if I'm wrong and for some reason gh is a mess should you make a new PR, is my instinct.</p>",
        "id": 206695687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597240156
    },
    {
        "content": "<p>Thanks Kevin!</p>",
        "id": 206695794,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597240207
    },
    {
        "content": "<p>I'm reviewing it now. Did you just do this for fun or are you planning on using it for teaching?</p>",
        "id": 206697243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597240842
    },
    {
        "content": "<p>Just for fun.</p>\n<p>But due to the popularity of _Gödel, Escher, Bach_,  this project might be also be good for spread the good word among the nerd community. I'd be happy to write something up if that seems sensible. I've previously written popular articles for _Mathematics Today_, the IMA's newsletter.</p>",
        "id": 206699807,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1597241856
    },
    {
        "content": "<p>I am increasingly of the opinion that there's something here for the math nerd community if only we can figure out how to deliver it to them. You can turn what you have into a playable game where people can experiment with making various strings. If you host it on CoCalc then people won't even need to install lean. You could make some simple levels and then give them the statements of some of the theorems you've proved and get them to prove other ones as long as the argument is relatively straightforward. The goal should be to convince people they're proving theorems even though you've done the hard work behind the scenes</p>",
        "id": 206717891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597250014
    },
    {
        "content": "<p>Like me you have access to a huge number of undergraduates and the more toys we can offer them the better</p>",
        "id": 206717979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597250051
    }
]