[
    {
        "content": "<p>Is there a tactic which works like <code>apply f</code> except that, if unifying the goal with the result type of <code>f</code> fails, it introduces new goals stating that the terms which don't unify are equal?<br>\nExample: I want to prove a statement like <code>f ⁻¹' (u ∩ v) = ∅</code>. Suppose I know I want to use <code>preimage_empty : f ⁻¹' ∅ = ∅</code>. I would like to obtain <code>u ∩ v = ∅</code> as a new goal without spelling it out explicitly (in a <code>have</code> or similar).</p>",
        "id": 125558382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524470211
    },
    {
        "content": "<p>An interesting idea. You can effectively get the result by <code>refine cast _ f</code> and then <code>congr</code></p>",
        "id": 125558494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524470412
    },
    {
        "content": "<p>I'm interested in this question but I don't understand the answer at all. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> do your have a MWE so that Mario (or you) could be more explicit about to do this?</p>",
        "id": 125558636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524470662
    },
    {
        "content": "<p>Let me try to cook one up and try out Mario's suggestion</p>",
        "id": 125558645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524470700
    },
    {
        "content": "<p>OK, here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">singleton_inter_singleton_eq_empty</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">singleton_inter_eq_empty</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">preimage_inter</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ f ⁻¹&#39; ({x} ∩ {y}) = ∅</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">preimage_empty</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125558848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471103
    },
    {
        "content": "<p>If <code>p</code> has type <code>f ⁻¹' ∅ = ∅</code> and the goal is <code>f ⁻¹' (u ∩ v) = ∅</code>, then <code>refine cast _ p</code> will give the goal <code>(f ⁻¹' (u ∩ v) = ∅) = (f ⁻¹' ∅ = ∅)</code> and <code>congr</code> will skip all the same stuff to get to <code>u ∩ v = ∅</code>. Of course this has the usual <code>congr</code> caveats about going too far, but it seems like the right idea for Reid's problem</p>",
        "id": 125558894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471164
    },
    {
        "content": "<p><code>refine cast _ preimage_empty</code> guessed to replace the wrong part, though, leaving <code>⊢ ?m_3 ⁻¹' ∅ = ∅ = (f ⁻¹' ({x} ∩ {y}) = ∅)</code></p>",
        "id": 125558946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471278
    },
    {
        "content": "<p>no that's correct</p>",
        "id": 125559023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471404
    },
    {
        "content": "<p>what happens after <code>congr</code>?</p>",
        "id": 125559026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471416
    },
    {
        "content": "<p><code>congr</code> errors with \"tactic failed, there are no goals to be solved\" (even though there were 4 goals)</p>",
        "id": 125559043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471481
    },
    {
        "content": "<p>what is the first goal?</p>",
        "id": 125559090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471508
    },
    {
        "content": "<p>the goals are <code>⊢ Type ?</code>, <code>⊢ Type ?</code>, <code>⊢ ?m_1 → ?m_2</code>, and what I wrote above</p>",
        "id": 125559104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471555
    },
    {
        "content": "<p>I assume they are describing the type of <code>?m_3</code></p>",
        "id": 125559106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471565
    },
    {
        "content": "<p>yes</p>",
        "id": 125559107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471571
    },
    {
        "content": "<p>You don't want to run <code>congr</code> on those goals</p>",
        "id": 125559109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471584
    },
    {
        "content": "<p>you have to cycle through them or set up the refine right, I guess</p>",
        "id": 125559159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471609
    },
    {
        "content": "<p>I'm confused though because I thought it was the <code>{x} ∩ {y}</code> part I wanted to replace</p>",
        "id": 125559169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471656
    },
    {
        "content": "<p>The goal is to do it in two stages. The first stage replaces your goal with an equality between the \"apply\" theorem and the goal, and the second stage simplifies the equality by congruence until you just have the part(s) that aren't defeq</p>",
        "id": 125559218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471735
    },
    {
        "content": "<p><code>cast</code> has the type <code>A = B -&gt; A -&gt; B</code>, so <code>cast _ p</code> where <code>p : A</code> yields the goal <code>A = B</code></p>",
        "id": 125559225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471781
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 125559234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471809
    },
    {
        "content": "<p>I need to tell it to solve the third goal with <code>f</code></p>",
        "id": 125559235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471830
    },
    {
        "content": "<p>You could also try specifying <code>f</code> for the sake of the example</p>",
        "id": 125559236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471835
    },
    {
        "content": "<p>i.e. <code>refine cast _ (@preimage_empty _ _ f)</code></p>",
        "id": 125559276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471852
    },
    {
        "content": "<p>I just did <code>exact β, exact α, exact f, congr,</code>, and that also works, and leaves me with <code>⊢ ∅ = {x} ∩ {y}</code> like I wanted</p>",
        "id": 125559289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471901
    },
    {
        "content": "<p>Well, I would have preferred <code>⊢ {x} ∩ {y} = ∅</code> <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125559306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524471960
    },
    {
        "content": "<p>I'm not sure if congr will automatically unify when it can, but that would fix these metavars without your intervention</p>",
        "id": 125559349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524471975
    },
    {
        "content": "<p>I think <code>eq.mp</code> and <code>eq.mpr</code> are the same as <code>cast</code> and allow you to get the orientation right</p>",
        "id": 125559353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524472001
    },
    {
        "content": "<p>Yes, <code>refine cast _ preimage_empty, swap 4, congr</code> also worked</p>",
        "id": 125559421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472149
    },
    {
        "content": "<p>and <code>eq.mpr</code> eliminates the need for <code>symmetry</code></p>",
        "id": 125559424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472182
    },
    {
        "content": "<p>Final version is to replace the last two lines with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span> <span class=\"n\">preimage_empty</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ {x} ∩ {y} = ∅</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 125559473,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472249
    },
    {
        "content": "<p>This is helpful, I haven't used congr before</p>",
        "id": 125559482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472298
    },
    {
        "content": "<p>The <code>swap</code> business reminds me of those pairs of tactics which differ only in how the resulting goals get ordered; I guess <code>refine</code> has no such companion?</p>",
        "id": 125559542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472389
    },
    {
        "content": "<p>no, it just creates all metavars in the order it finds them</p>",
        "id": 125559594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524472476
    },
    {
        "content": "<p>There is enough going on here that it would not be unreasonable to have a tactic for it. Keep in mind though that it's not like apply in that it can't guess how many args to apply</p>",
        "id": 125559606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524472537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> we need you!</p>",
        "id": 125559612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524472561
    },
    {
        "content": "<p>if you don't get the args right your equality will be some statement like (\\forall x. ...) = (f 0 = 0) and congr will not do anything useful</p>",
        "id": 125559657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524472602
    },
    {
        "content": "<p>Right, I realized as I was asking the question that I don't really know how <code>apply</code> figures out how many args to insert</p>",
        "id": 125559662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524472615
    },
    {
        "content": "<p>I think it just applies as many as it can, or maybe counts how many nested pi are in the theorem type vs the target type and applies the difference</p>",
        "id": 125559679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524472681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What would you imagine a tactic doing?</p>",
        "id": 125568801,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524489732
    },
    {
        "content": "<p>Ideally, the first message of this thread</p>",
        "id": 125568812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524489783
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\"><pre><span></span>meta def bridge_gap (r : parse texpr) : parse (&quot;using&quot; *&gt; smallnat)? -&gt; tactic unit\n| none := refine ``(cast _ %%r) &gt;&gt; congr\n| (some n) := refine ``(cast _ %%r) &gt;&gt; congr_n n\n</pre></div>\n\n\n<p>This way you can do <code>bridge_gap rule using n</code> to limit the depth of <code>congr</code> or just <code>bridge_gap rule</code></p>",
        "id": 125572764,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524495697
    },
    {
        "content": "<p>I'm not sure of the name though. Maybe something like <code>fit</code> or <code>adapt_to</code> would be better</p>",
        "id": 125572815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524495734
    },
    {
        "content": "<p>I don't get why you need <code>swap</code> though</p>",
        "id": 125572849,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524495824
    },
    {
        "content": "<p>Can you do the example with it?</p>",
        "id": 125573226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524496367
    },
    {
        "content": "<p>I'm giving it a try. My computer is not helping today</p>",
        "id": 125573428,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524496621
    },
    {
        "content": "<p>Ok I think I see why <code>swap</code> was necessary. Here's a proof and a tactic that work:</p>",
        "id": 125575245,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">∩</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">bridge_gap</span> <span class=\"n\">preimage_empty</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">preimage_inter</span><span class=\"o\">,</span><span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">`</span><span class=\"err\">?</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span>\n<span class=\"n\">local</span> <span class=\"kn\">postfix</span> <span class=\"bp\">*</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">many</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bridge_gap</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;←&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;using&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">small_nat</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">sym</span><span class=\"bp\">.</span><span class=\"n\">is_none</span>\n     <span class=\"k\">then</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"err\">%%</span><span class=\"n\">v</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span>\n     <span class=\"k\">else</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">%%</span><span class=\"n\">v</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">),</span>\n   <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span>\n   <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"n\">congr</span> <span class=\"n\">congr_n</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">),</span>\n   <span class=\"n\">gs&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"err\">$</span> <span class=\"n\">gs&#39;</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 125575289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498749
    },
    {
        "content": "<p>I added an option to allow <code>bridge_gap ← preimage_empty</code> but the parser doesn't seem to like it</p>",
        "id": 125575597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524499085
    },
    {
        "content": "<p>Ok, it's now working. I put it here <a href=\"https://gist.github.com/cipher1024/0d3328135367269cc35f74f43ecbb302\" target=\"_blank\" title=\"https://gist.github.com/cipher1024/0d3328135367269cc35f74f43ecbb302\">https://gist.github.com/cipher1024/0d3328135367269cc35f74f43ecbb302</a> if you want to use it.</p>",
        "id": 125576655,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524500403
    },
    {
        "content": "<p>Let's get to 20! (I mean 20, not 20!)</p>",
        "id": 125576871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500657
    },
    {
        "content": "<p>noooo</p>",
        "id": 125576890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500698
    },
    {
        "content": "<p>my backlog is so long...</p>",
        "id": 125576902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524500719
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125576905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500732
    },
    {
        "content": "<p>He'll go hermit</p>",
        "id": 125576908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500740
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 125577105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500895
    },
    {
        "content": "<blockquote>\n<p>Let's get to 20! (I mean 20, not 20!)</p>\n</blockquote>\n<p>20 what?</p>",
        "id": 125577350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524501294
    },
    {
        "content": "<p>20 opened PR to mathlib</p>",
        "id": 125577366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524501312
    },
    {
        "content": "<p>Ah! I didn't open a PR. I don't know if it's generally useful</p>",
        "id": 125578498,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524503216
    },
    {
        "content": "<p>Or rather, I don't know if there's interest for this tactic to be in mathlib rather than in one particular project</p>",
        "id": 125578578,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524503342
    },
    {
        "content": "<p>20 :)</p>",
        "id": 125586345,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1524514565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Is this really a problem to have too many tactics in mathlib?</p>",
        "id": 125595892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524529705
    },
    {
        "content": "<p>I think it's good to prioritize the tactics that will have the most positive impact for the users of <code>mathlib</code>. On one hand, that makes better use of Mario's time and on the other hand, it minimizes the effort required to understand <code>mathlib</code>'s features</p>",
        "id": 125596043,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524529994
    },
    {
        "content": "<p>I have a new idea for you (which would simplify my current work). Assume <code>(*) : R → R → R</code> and <code>[is_associative (*))]</code>. I have an expression like <code>(a₁*(a₂*a₃)*a₄)*((a₅*a₆)*a₇)</code> (maybe I'm in conv mode so I only see this expression). I'd like to write <code>simon_new_magic_trick 4 5</code> and get an expression where parentheses are rearranged so that I see <code>(a₄*a₅)</code> in the middle.</p>",
        "id": 125596052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524530022
    },
    {
        "content": "<p>And I'm going to sleep (2:33 am here)</p>",
        "id": 125596095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524530052
    },
    {
        "content": "<p>We can talk about it some more tomorrow. Do you want it as a preparation for something in particular (e.g. <code>rw</code>) or do you foresee using it in combination with multiple other tactics?</p>",
        "id": 125596180,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524530248
    },
    {
        "content": "<p>As for syntax, I could think of calling it <code>ac_zoom a₄*a₅</code> (in case we want to consider commutativity too) in <code>conv</code> mode.</p>",
        "id": 125596233,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524530313
    },
    {
        "content": "<p>that does seem useful. I guess the algebraic normalization functionality got put by the wayside for lean 4</p>",
        "id": 125596308,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524530445
    },
    {
        "content": "<p>how about <code>ac_focus</code>? that sounds pretty neat</p>",
        "id": 125596313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530455
    },
    {
        "content": "<p>more generally being able to rewrite declaratively with wildcards like <code>_</code> would be sweet</p>",
        "id": 125596321,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524530476
    },
    {
        "content": "<blockquote>\n<p>I guess the algebraic normalization functionality got put by the wayside for lean 4</p>\n</blockquote>\n<p>What are you referring to?</p>",
        "id": 125596330,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524530514
    },
    {
        "content": "<blockquote>\n<p>more generally being able to rewrite declaratively with wildcards like <code>_</code> would be sweet</p>\n</blockquote>\n<p>Can you elaborate a bit on what that would look like?</p>",
        "id": 125596372,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524530533
    },
    {
        "content": "<p>Alternatively, the syntax could be an expression like <code>ac_zoom _*a₄*a₅</code> and this is ac-unified with the goal</p>",
        "id": 125596379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530555
    },
    {
        "content": "<p>you have <code>(a1 * (a2 * (a3 * (a4 * (a5 * a6)))))</code>, you want <code>a1 * a2 * (a3 * a4) * a5 * a6</code>, hmm, maybe something like <code>mytactic _ * _ * (a3 * a4) * _ * _</code></p>",
        "id": 125596441,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524530664
    },
    {
        "content": "<p>perhaps you could allow less <code>_</code> than variables and that would make the constraint search easier</p>",
        "id": 125596444,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524530696
    },
    {
        "content": "<p>I remember hearing awhile back that there was going to be a lot of algebra machinery going in</p>",
        "id": 125596455,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524530718
    },
    {
        "content": "<p>you could get by with only one <code>_</code> on left and right with assoc only, and just one <code>_</code> on left or right with ac</p>",
        "id": 125596459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530740
    },
    {
        "content": "<p>if there are too many holes you can just fill them eagerly</p>",
        "id": 125596503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530768
    },
    {
        "content": "<p>and fail if there aren't enough terms</p>",
        "id": 125596506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530787
    },
    {
        "content": "<p>commutativity only reasoning seems trickier</p>",
        "id": 125596511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524530822
    },
    {
        "content": "<p>You mean without associativity? Why is it trickier?</p>",
        "id": 125596583,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524530974
    },
    {
        "content": "<p>:( too bad floating point math is non-associative</p>",
        "id": 125596671,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524531092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Thanks, this <code>bridge_gap</code> worked in my real project too.<br>\nOnly I can't seem to get the ← feature to actually work (I tried <code>bridge_gap ←preimage_empty</code> with all combinations of space or no space around the arrow). But it works fine if I change ← to - for some reason.</p>",
        "id": 125596776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524531243
    },
    {
        "content": "<p>With ←, I get a parse error</p>",
        "id": 125596793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524531259
    },
    {
        "content": "<p>\"error: expression expected\", and then it continues in a confused state</p>",
        "id": 125596811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524531304
    },
    {
        "content": "<p>I had a hard time too with that notation. I don't understand why. It works fine with <code>rw</code>. Have you tried <code>&lt;-</code>? That worked better for me</p>",
        "id": 125596814,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524531305
    },
    {
        "content": "<p>Yes, that works... something about the arrow</p>",
        "id": 125596825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524531344
    },
    {
        "content": "<p>I decided not to spend more time investigating that issue because <code>&lt;-</code> works. It's still annoying</p>",
        "id": 125596872,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524531392
    },
    {
        "content": "<p>You have to use <code>tk \"&lt;-\"</code> instead of <code>tk \"←\"</code></p>",
        "id": 125597061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531760
    },
    {
        "content": "<p>by some weird setup on lean's part, the token that lean knows as <code>&lt;-</code> is parsed from both <code>&lt;-</code> and <code>←</code></p>",
        "id": 125597070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531802
    },
    {
        "content": "<p>so if you write <code>tk \"←\"</code> it doesn't work at all, and <code>tk \"&lt;-\"</code> works with both <code>&lt;-</code> and <code>←</code></p>",
        "id": 125597074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531832
    },
    {
        "content": "<p>Ah! I bet that was a fun lesson for you to learn!</p>",
        "id": 125597075,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524531835
    },
    {
        "content": "<p>Btw, can you think of a better name than <code>bridge_gap</code>?</p>",
        "id": 125597116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524531867
    },
    {
        "content": "<p>I expect this is in part because this is a built in notation (like the forward arrow for functions), since it shows up in <code>do</code> notation</p>",
        "id": 125597120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531880
    },
    {
        "content": "<p>That makes sense. I'm actually glad that notation is built in</p>",
        "id": 125597133,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524531925
    },
    {
        "content": "<p>Also I think that the polarity of <code>&lt;-</code> should be reversed</p>",
        "id": 125597137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531932
    },
    {
        "content": "<p><code>eq.mpr</code> is the forward one</p>",
        "id": 125597139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531943
    },
    {
        "content": "<p>I'm not, if I had my way all notation would be declared in lean</p>",
        "id": 125597186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531990
    },
    {
        "content": "<p>maybe I'll get it in lean 4</p>",
        "id": 125597187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524531996
    },
    {
        "content": "<p>but it does seem like a really hard one to do generically</p>",
        "id": 125597189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532022
    },
    {
        "content": "<p><code>convert</code>?</p>",
        "id": 125597202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532074
    },
    {
        "content": "<p>That's a bit too close to <code>conv</code>, no?</p>",
        "id": 125597243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524532101
    },
    {
        "content": "<p>to be fair it's actually doing a very similar thing</p>",
        "id": 125597245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532117
    },
    {
        "content": "<p>That's true</p>",
        "id": 125597248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524532140
    },
    {
        "content": "<p>every time i see <code>conv</code> i think it's talking about convolution</p>",
        "id": 125597254,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524532161
    },
    {
        "content": "<p>Is it something you'd like to have in <code>mathlib</code> btw?</p>",
        "id": 125597256,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524532166
    },
    {
        "content": "<p>little tactics like this are not a big deal</p>",
        "id": 125597260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532197
    },
    {
        "content": "<p>go right ahead</p>",
        "id": 125597312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532207
    },
    {
        "content": "<p>Cool</p>",
        "id": 125597315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524532218
    },
    {
        "content": "<p>I've been busy with my other obligations this past week, but I promise I'll finish updating mathlib and get on those PRs</p>",
        "id": 125597328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524532268
    },
    {
        "content": "<p>I think the amount of work you've put on <code>mathlib</code> is actually amazing. I think you shouldn't feel like you have to apologize</p>",
        "id": 125597577,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524532787
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/bGfjZkmMdvJegOrpJ6MnVKEB/22.png\" target=\"_blank\" title=\"22.png\">22</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bGfjZkmMdvJegOrpJ6MnVKEB/22.png\" target=\"_blank\" title=\"22\"><img src=\"/user_uploads/3121/bGfjZkmMdvJegOrpJ6MnVKEB/22.png\"></a></div>",
        "id": 125605769,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524550018
    },
    {
        "content": "<p>... for anyone keeping count.</p>",
        "id": 125605781,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524550062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wishing you luck. I just want to thank you for everything you're doing. Please don't feel any pressure from the game these guys are playing...</p>",
        "id": 125606413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524551389
    },
    {
        "content": "<p>/me wouldn't want another hermit</p>",
        "id": 125606414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524551397
    },
    {
        "content": "<p>I haven't followed the entire conversation, but, to be clear, I think the PR count should not be taken as a backlog waiting to be completed but rather as a sign of interest in the growth of mathlib.</p>",
        "id": 125606808,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524552186
    },
    {
        "content": "<p>Personally, I have my own backlog of things I want to contribute, but I'm waiting (patiently, mind you) for stabilization of mathlib wrt Lean.</p>",
        "id": 125606862,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524552266
    },
    {
        "content": "<p>I absolutely agree. I put in a couple of PR's for docs recently and once I did that I felt my job was done -- people can even see the docs if they want. There was no need at all to pester anyone to accept the PR's and I had plenty of other things to worry about. The fact that Lean doesn't keep changing at the minute is also really nice</p>",
        "id": 125609412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524556991
    },
    {
        "content": "<p>because I am not typing <code>leanpkg upgrade</code> all the time</p>",
        "id": 125609414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557006
    },
    {
        "content": "<p>so if I really wanted something in mathlib that wasn't there yet, I could just edit the mathlib in <code>_target</code> in my project</p>",
        "id": 125609417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524557025
    },
    {
        "content": "<p>Yes, this is what I did in <a href=\"https://github.com/PatrickMassot/mathlib/tree/wlog_ext\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/tree/wlog_ext\">https://github.com/PatrickMassot/mathlib/tree/wlog_ext</a>  (which is upstream + 2 PR)</p>",
        "id": 125609536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557185
    },
    {
        "content": "<p>I like <code>bridge_gap</code> (or whatever it ends up called). I had a primitive version that I was calling <code>its</code>. That is, I'd write <code>its X</code> as a generalised version of <code>exact X</code>, and I would be left with whatever goals were required to unify <code>X</code> with the actual goal.</p>",
        "id": 125616698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524570492
    },
    {
        "content": "<p>(of course, apostrophe man would probably complain)</p>",
        "id": 125616701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524570517
    },
    {
        "content": "<p>I'm certainly planning in discarding <code>its</code> in favour of this one once it's in mathlib.</p>",
        "id": 125616706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524570542
    },
    {
        "content": "<p>how about <code>itis</code>? Signed, Apostrophe man.</p>",
        "id": 125619917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524575960
    },
    {
        "content": "<p>What a cool super hero name :D</p>",
        "id": 125620284,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524576593
    },
    {
        "content": "<p>I submitted as <code>convert</code>. I'm not sure why <code>itis</code> works.</p>",
        "id": 125620361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524576673
    },
    {
        "content": "<p>I'm wondering if <code>refine_congr</code> would be a good name.</p>",
        "id": 125620365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524576678
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/QoX4a9GPQ88G78zBt2MfjLzX/2018-04-25.png\" target=\"_blank\" title=\"2018-04-25.png\">23</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QoX4a9GPQ88G78zBt2MfjLzX/2018-04-25.png\" target=\"_blank\" title=\"23\"><img src=\"/user_uploads/3121/QoX4a9GPQ88G78zBt2MfjLzX/2018-04-25.png\"></a></div>",
        "id": 125631877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524592625
    },
    {
        "content": "<p>Now I need to sleep</p>",
        "id": 125631910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524592681
    },
    {
        "content": "<p>it would be less than 23 if you finished all your [WIPs] :)</p>",
        "id": 125632009,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524592750
    }
]