[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/13894\">#13894</a>, I have a function signature that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fractional_digits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which I can <code>#eval</code> just fine. If I remove the <code> true → </code>, then I get a determistic timeout. What's going on here? Why is a proof argument affecting the runtime behavior?</p>",
        "id": 280949923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651535555
    },
    {
        "content": "<p>I just tried it without the <code>true -&gt;</code>, and it seems to work fine for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">fractional_digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span>\n<span class=\"c1\">-- [1, 4, 2, 8, 5, 7, 1, 4, 2, 8]</span>\n</code></pre></div>",
        "id": 280951388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651536879
    },
    {
        "content": "<p>Huh, that eval works. This is the one (from the PR) that fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">fractional_digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">12345</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">15</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280974042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651561099
    }
]