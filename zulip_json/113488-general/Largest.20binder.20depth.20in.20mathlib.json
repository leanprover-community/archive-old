[
    {
        "content": "<p>I got curious about this question because metamath has a soft limit on the number of simultaneous bound variables because it uses letters of the alphabet and there are only 26 of those (notwithstanding some extensions to add primes in some user mathboxes). MM0 also has a variable limit of 55 with the current verifier design (because this bit-packs nicely), although there is an extension point in case more are needed in the future. (Technically, both metamath and MM0 support more variables than this but these are for \"true\" variables, that can appear in binders, rather than \"local constants\" which are fixed through the proof.)</p>\n<p>Lean is a bit more binder-hungry than metamath because it uses binders for <code>have</code>, for example - is there some huge proof out there with 50+ variables?</p>\n<p>Here's a metaprogram to find out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">env.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">m2</span> <span class=\"o\">:=</span> <span class=\"n\">d.value.fold</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">max</span><span class=\"o\">),</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">m2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n      <span class=\"o\">(</span><span class=\"n\">d.to_name</span><span class=\"o\">,</span> <span class=\"n\">m2</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n</code></pre></div>\n<p>What would you guess?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Results</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>On core lean, it outputs <code>(widget.widget.component._mut_.with_state_0.inj_eq, 54)</code>. That means that there is a point somewhere in <code>widget.widget.component._mut_.with_state_0.inj_eq</code> that is under 54 nested binders (this is not counting all binders in the proof term, only the ones that all have to exist in the same context).</p>\n<p>If you run this on mathlib, you get <code>(linear_ordered_field.no_confusion_type, 134)</code>. I'm kind of surprised that it's not some big manual proof with a lot of <code>have</code>s like I predicted - instead it is just the crazy unpacking involved in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_field\">docs#linear_ordered_field</a> (which is an old_structure with 55 fields), and then <del>doubled</del> <em>tripled</em> because <code>no_confusion_type</code> needs to talk about two values of type <code>linear_ordered_field</code> unpacked into their components. (There is a third binder per field in <code>no_confusion_type</code> because it has an equality for each pair of fields that were unpacked.)</p>\n</div></div>",
        "id": 268526290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642592183
    }
]