[
    {
        "content": "<p>How can I tell <code>to_additive</code> to ignore some definitions?</p>",
        "id": 200783104,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592078466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mk_group_eq_mk_quotient_mul_mk_subgroup</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">group_equiv_quotient_times_subgroup</span> <span class=\"bp\">_⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200783109,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592078480
    },
    {
        "content": "<p>I am pretty sure that the problem in the example above is that <code>to_additive</code> changes <code>*</code> to <code>+</code>.</p>",
        "id": 200783117,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592078508
    },
    {
        "content": "<p>The lemma is true for both <code>group</code> and <code>add_group</code>, but the cardinals should always be multiplied!</p>",
        "id": 200783161,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592078531
    },
    {
        "content": "<p>See examples in <code>algebra.group_power</code></p>",
        "id": 200783180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592078595
    },
    {
        "content": "<p>I think you need to provide the additive proof by hand, but you can still add the attribute afterwards, so that it will be used by <code>to_additive</code>.</p>",
        "id": 200783191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592078622
    },
    {
        "content": "<p>state the lemma without <code>to_additive</code>, then state the additive version and prove it using the multiplicative version, then mark the multiplicative version as <code>attribute [to_additive add_name] mul_name</code></p>",
        "id": 200783242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592078653
    },
    {
        "content": "<p>Works perfectly! Thank you!</p>",
        "id": 200783327,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592078791
    },
    {
        "content": "<p>This is sort of hinted at in <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">the new tactic doc entry for <code>to_additive</code></a> in the sentence starting with \"Even when...\" but it might still be unclear. Suggestions for improvements are welcome!</p>",
        "id": 200783946,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592079799
    },
    {
        "content": "<p>It makes no sense to manually add <code>to_additive</code> if <code>to_additive</code> fails to correctly transport the type of the lemma. It makes sense if it transfers type but not proof.</p>",
        "id": 200784792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592080985
    },
    {
        "content": "<p>It is rare but possible for it to work even if it doesn't transfer the type, because two translated theorems can cancel each other out</p>",
        "id": 200784852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592081090
    },
    {
        "content": "<p>Probably we should have an ignore list (nat, perm) but my meta programming skills are not good enough.</p>",
        "id": 200784855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592081092
    },
    {
        "content": "<p>actually, when it is a whole network of theorems it's not that unreasonable that the mystery type only appears in some defeq goal and not explicitly in the theorem</p>",
        "id": 200784924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592081185
    }
]