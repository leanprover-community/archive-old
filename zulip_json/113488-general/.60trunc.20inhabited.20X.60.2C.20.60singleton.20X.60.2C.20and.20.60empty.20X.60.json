[
    {
        "content": "<p>I feel like we're missing some very basic typeclasses.</p>\n<ul>\n<li><code>singleton X</code>, the <code>Prop</code> version of <code>unique</code>, e.g. equivalent to <code>nonempty (unique X)</code> (&lt;~~ edit)</li>\n<li><code>just_one X</code>, (no idea how to name this one), equivalent to <code>trunc (unique X)</code>. i.e. it contains data, so one can use it computationally, but it is inside a quotient so extracting the data requires a proof that you're not really using it</li>\n<li>plain old <code>is_empty X</code>, just a synonym for <code>X -&gt; false</code>.</li>\n</ul>\n<p>Am I forgetting that some of these exist already somewhere? Can we talk about adding them otherwise?</p>",
        "id": 232077120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616836706
    },
    {
        "content": "<p>Mostly right now I want <code>singleton X</code>.</p>",
        "id": 232077130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616836728
    },
    {
        "content": "<p>We've had a thread about <code>empty</code> before</p>",
        "id": 232077207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616836828
    },
    {
        "content": "<p>I assume you meant <code>singleton X = nonempty (unique X)</code>?</p>",
        "id": 232077272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616836907
    },
    {
        "content": "<p>Can you give an example of a type that you can prove is <code>subsingleton</code> but not <code>unique</code> (at least, while avoiding choice)?</p>",
        "id": 232077336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616836986
    },
    {
        "content": "<p>The statement of any open conjecture?</p>",
        "id": 232077430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616837111
    },
    {
        "content": "<p>Lots of things are easily seen to be subsingletons but may or may not be empty. e.g. we show <code>subsingleton (is_limit c)</code> for any <code>c : cone F</code>.</p>",
        "id": 232077615,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616837314
    },
    {
        "content": "<p><code>unique X</code> is already a subsingleton so <code>just_one</code> is redundant</p>",
        "id": 232080414,
        "sender_full_name": "David Wärn",
        "timestamp": 1616840656
    },
    {
        "content": "<p>But we seem to be missing this fact</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subsingleton_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 232080939,
        "sender_full_name": "David Wärn",
        "timestamp": 1616841256
    },
    {
        "content": "<p>On the other hand, we have <code>def unique_unique_equiv : unique (unique α) ≃ unique α</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 232081290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616841674
    },
    {
        "content": "<p>Actually there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique.subsingleton_unique\">docs#unique.subsingleton_unique</a>, I just didn't look very closely...</p>",
        "id": 232081610,
        "sender_full_name": "David Wärn",
        "timestamp": 1616842058
    },
    {
        "content": "<p>Whoops, I meant \"singleton\" but not \"unique\"</p>",
        "id": 232082287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616842920
    },
    {
        "content": "<p>No, <code>just_one</code> is not redundant --- you can abuse <code>unique</code> by taking the <code>default</code> element out.</p>",
        "id": 232083573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616844356
    },
    {
        "content": "<p>With <code>just_one</code> you could be sure that your construction did not depend on the particular <code>unique</code> instance you were served up by typeclass inference.</p>",
        "id": 232083671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616844433
    },
    {
        "content": "<p>And this is really why I want <code>singleton</code>, which is my main desiderata today. A version of unique entirely uncontaminated by data. :-)</p>",
        "id": 232083683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616844469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.60trunc.20inhabited.20X.60.2C.20.60singleton.20X.60.2C.20and.20.60empty.20X.60/near/232083671\">said</a>:</p>\n<blockquote>\n<p>With <code>just_one</code> you could be sure that your construction did not depend on the particular <code>unique</code> instance you were served up by typeclass inference.</p>\n</blockquote>\n<p>Doesn't <code>unique.subsingleton_unique</code> already guarantee that? Or do you mean \"depend\" in a defeq-way, not just provably equal?</p>",
        "id": 232085361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616846406
    },
    {
        "content": "<p>You can use <code>[nonempty α] [subsingleton α]</code> for <code>[singleton α]</code></p>",
        "id": 232085634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616846701
    },
    {
        "content": "<p>You can use typeclasses to say k is a number field (a char zero field finite dimensional over Q) but I think we still want to be able to say it cleanly.</p>",
        "id": 232086198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616847348
    },
    {
        "content": "<p>This will be a lot easier in lean4, where <code>[nonempty α] [subsingleton α]</code> and <code>[singleton α]</code> can be made interchangeable; in lean 3 typeclass search can go only in one direction between the two styles, and forms a loop if you try both. This comes up for <code>integral_domain</code> vs <code>no_zero_divisors</code> <code>comm_ring</code> <code>nontrivial</code></p>",
        "id": 232086584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616847748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think others said this already, but <code>unique</code> is a subsingleton so <code>just_one</code> is equivalent to <code>unique</code></p>",
        "id": 232126954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616889062
    },
    {
        "content": "<p>Okay! I understand now, thanks.</p>",
        "id": 232126970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616889105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc.rec_on_subsingleton</span> <span class=\"n\">t</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 232127042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616889237
    },
    {
        "content": "<p>what are the use cases for <code>singleton</code>?</p>",
        "id": 232127091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616889261
    },
    {
        "content": "<p>I think <code>is_empty</code> was already being discussed in another issue</p>",
        "id": 232127097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616889275
    }
]