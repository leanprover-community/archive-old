[
    {
        "content": "<p>I've got a <code>n : pnat</code> and I want the <code>finset pnat</code> consisting of the divisors of <code>n</code>. I've already made an instance <code>has_dvd pnat</code> (woot!). What is now the cleanest way to get this finset?<br>\nOf course... ... <code>{ d | d \\| n }</code> will not work... ... ... <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 165739350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557944319
    },
    {
        "content": "<p>And <code>finset.range</code> lives in <code>finset nat</code>.</p>",
        "id": 165739367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557944337
    },
    {
        "content": "<p><code>(range (n : nat).succ).filter (\\| n)</code> gives the correct finset in nat.</p>",
        "id": 165739524,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557944458
    },
    {
        "content": "<p>I guess you want a version of <code>range</code> for <code>pnat</code>?</p>",
        "id": 165739551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557944484
    },
    {
        "content": "<p>I used this finset in <code>data.nat.totient</code></p>",
        "id": 165739661,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557944545
    },
    {
        "content": "<p>Did you give it a name?</p>",
        "id": 165740349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557944997
    },
    {
        "content": "<p>I really don't like the idea of duplicating all the <code>range</code> and <code>Ico</code>, etc... definitions and all their lemmas for <code>nat</code> and <code>pnat</code> and <code>int</code>... etc...</p>",
        "id": 165740486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557945064
    },
    {
        "content": "<p>I think I might do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pnat</span><span class=\"bp\">.</span><span class=\"n\">divisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and then provide a <code>fintype</code> instance</p>",
        "id": 165740985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557945354
    },
    {
        "content": "<p>It depends what you want to do with it, but you almost certainly want a finset.</p>",
        "id": 165742518,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557946233
    },
    {
        "content": "<p>Perhaps a good project would be to make list.range, list.Ico, and finset.Ico type polymorphic.</p>",
        "id": 165756240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557955623
    },
    {
        "content": "<p>I'm not sure we yet have an appropriate typeclass describing the behaviour of <code>succ</code> that makes this possible in nat, pnat, int, and friends.</p>",
        "id": 165756367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557955718
    },
    {
        "content": "<p>I guess it's just an ordered type where intervals are always finite. The order on finset has this property as well.</p>",
        "id": 165756665,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557955952
    },
    {
        "content": "<p>Well, you need some mechanism to actually list the elements in order, don't you? Merely asserting there's an order, and intervals are finite, doesn't let you make a <code>list</code>. I was imagining some sort of <code>has_succ</code> typeclass.</p>",
        "id": 165772853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557973032
    },
    {
        "content": "<p>It does let you make a <code>finset</code> though</p>",
        "id": 165773017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557973236
    },
    {
        "content": "<p>There was some talk about <code>enumerable</code> on this chat, some time ago.</p>",
        "id": 165781963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557985915
    }
]