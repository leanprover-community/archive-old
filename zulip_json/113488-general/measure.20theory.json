[
    {
        "content": "<p>Hey, this is just an ad for the rather large commit I just put out. It doesn't add too much new stuff, instead it is doing what I do best, proving the same things other people did but better. :) It's focused primarily on the measure theory development, with the hope that I can bring down some of the compile times in that area. But there are some more substantive changes:</p>\n<ul>\n<li><code>outer_measure.trim</code> is the truncation of an outer measure to a measurable space</li>\n<li><code>measure_space</code> was renamed to <code>measure</code>. There is a good sense of what a measure space could be, and this wasn't it.</li>\n<li><code>measure</code> and <code>outer_measure</code> now have coe_fn instances so you don't need to refer to the underlying <code>measure_of</code> function.</li>\n<li><code>measure</code> extends <code>outer_measure</code>, so in particular it contains a field that is the outer measure projection, rather than containing a function only defined on measurable sets and recovering the outer measure by extension. In order to ensure we don't add extra measures, we require that a measure is <code>trimmed</code> in the sense above.</li>\n<li><code>is_complete</code> asserts that a measure is complete (every null set is measurable)</li>\n<li><code>is_null_measurable</code> is the property of differing from a measurable set by a null set. It is proven that this is a sigma algebra, and a measure extends unchanged to this larger algebra; this is the completion of the measure.</li>\n<li><code>lebesgue</code> has mostly the same theorems but the proofs are rather different. In particular the proof that intervals are measured correctly uses compactness instead of the least upper bound property.</li>\n<li>Some more interval theorems were added; <code>Icc</code> is the closed interval</li>\n</ul>",
        "id": 129954535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032203
    },
    {
        "content": "<p>Mario do you know about Haar measure? There's a canonical measure on any locally compact Hausdorff topological group (for example the real numbers).</p>",
        "id": 129954606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032322
    },
    {
        "content": "<p>The proof is \"do the same as for the real numbers, but with an arbitrary locally compact Hausdorff topological group\".</p>",
        "id": 129954650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032358
    },
    {
        "content": "<p>although some details are a lot more fiddly if I'm honest...</p>",
        "id": 129954654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032375
    },
    {
        "content": "<p>I have heard of it, but I've never done anything with it besides getting uncomfortable about \"unique up to a multiplicative constant\"</p>",
        "id": 129954682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032422
    },
    {
        "content": "<p>Lebesgue is also only determined up to a multiplicative constant on a finite dimensional real vector space</p>",
        "id": 129954740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032480
    },
    {
        "content": "<p>Well, who said [0,1] should have measure 1...</p>",
        "id": 129954753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032485
    },
    {
        "content": "<p>Oh, I forgot to mention I added scalar multiplication of measures; they are unfortunately not a module since the base \"ring\" is <code>ennreal</code></p>",
        "id": 129954762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032505
    },
    {
        "content": "<p>If you talk about [0,1] then you've already chosen a basis of your 1-dimensional vector space</p>",
        "id": 129954773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032513
    },
    {
        "content": "<p>yes, my comment was supposed to be before yours :-)</p>",
        "id": 129954778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032530
    },
    {
        "content": "<p>Too bad we miss an opportunity to enjoy module type class hell</p>",
        "id": 129954790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032555
    },
    {
        "content": "<p>If CS people are happy to divide by 0, why can't they multiply by infinity?</p>",
        "id": 129954845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032597
    },
    {
        "content": "<p>Just make it 0 :-)</p>",
        "id": 129954851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032609
    },
    {
        "content": "<p>actually <code>ennreal</code> is surprisingly nice as an ordered semiring</p>",
        "id": 129954869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032632
    },
    {
        "content": "<p>the fact that it is a complete lattice really helps</p>",
        "id": 129954880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032653
    },
    {
        "content": "<p>That's the trouble: if I understand correctly Mario <em>is</em> happy to multiply by infinity</p>",
        "id": 129954881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032655
    },
    {
        "content": "<blockquote>\n<p>a basis of your 1-dimensional vector space</p>\n</blockquote>\n<p>It's not a vector space</p>",
        "id": 129954981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032769
    },
    {
        "content": "<p>affine space I should say</p>",
        "id": 129954991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032783
    },
    {
        "content": "<p>is there a notion of semi-vector space in the literature?</p>",
        "id": 129955000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032794
    },
    {
        "content": "<p>there are no negatives</p>",
        "id": 129955007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032801
    },
    {
        "content": "<p>I am amazed that this is not already in Lean</p>",
        "id": 129955061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032816
    },
    {
        "content": "<p>You know we already don't want to talk about semirings</p>",
        "id": 129955062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032816
    },
    {
        "content": "<p>I guess a monoid is just a semi-module over N</p>",
        "id": 129955070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032827
    },
    {
        "content": "<p>I find of am as well. We have semi everything else, but modules pick right up at rings</p>",
        "id": 129955085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032852
    },
    {
        "content": "<p>actually maybe that's a commutative monoid</p>",
        "id": 129955126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032892
    },
    {
        "content": "<p>A nat-semi-module is a commutative monoid</p>",
        "id": 129955195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032936
    },
    {
        "content": "<p>but if the scalar field is something else then it's different</p>",
        "id": 129955215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532032965
    },
    {
        "content": "<p>I'm curious about all this integration stuff in mathlib. I never tried to use it or even looked at it. Can we do crazy things like proving the integral of <code>id</code> on <code>[1, 2]</code> is <code>3/2</code>?</p>",
        "id": 129957474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532035006
    },
    {
        "content": "<blockquote>\n<p>Hey, this is just an ad for the rather large commit I just put out. It doesn't add too much new stuff, instead it is doing what I do best, proving the same things other people did but better. <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Thanks for that, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>!</p>",
        "id": 129979482,
        "sender_full_name": "Sean Leather",
        "timestamp": 1532067364
    },
    {
        "content": "<p>you were the one who mentioned the issue with <code>meaure'_union</code>, right? I may have gone a bit overboard. :)</p>",
        "id": 129979507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532067426
    },
    {
        "content": "<blockquote>\n<p>you were the one who mentioned the issue with <code>meaure'_union</code>, right? </p>\n</blockquote>\n<p>Indeed, I was.</p>\n<blockquote>\n<p>I may have gone a bit overboard. <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>No problem! As long as you think it improved things.</p>",
        "id": 129979565,
        "sender_full_name": "Sean Leather",
        "timestamp": 1532067487
    },
    {
        "content": "<p>Actually I have a problem too -- Fermat's Last Theorem can't currently be proved by <code>finish</code> -- can you fix it for me Mario?</p>",
        "id": 129981327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070316
    },
    {
        "content": "<p>Kevin, the proof is <code>by ᛗᛃᛟᛚᚾᛁᚱ</code></p>",
        "id": 129981388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070379
    },
    {
        "content": "<p>This is the <code>Mario</code> variation of the <code>ᛗᛃᛟᛚᚾᛁᚱ</code> tactic.</p>",
        "id": 129981390,
        "sender_full_name": "Sean Leather",
        "timestamp": 1532070385
    },
    {
        "content": "<p>Speaking of hammers... I would like the decomposition theorem for mixed Hodge modules.</p>",
        "id": 129981468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070494
    },
    {
        "content": "<p>Yeah well I would like perfectoid spaces but I spent an hour last night writing the universal property of quotient groups :-/</p>",
        "id": 129981485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070537
    },
    {
        "content": "<p>should have told me to write it lol</p>",
        "id": 129981494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070552
    },
    {
        "content": "<p>Can you do algebraically closed fields Kenny? Chris' polynomials in one variable got accepted</p>",
        "id": 129981498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070575
    },
    {
        "content": "<p>Things are happening :-)</p>",
        "id": 129981499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070584
    },
    {
        "content": "<p>have you proved that k[X] is UFD?</p>",
        "id": 129981561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070609
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/quotient_group.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/quotient_group.lean\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/quotient_group.lean</a></p>",
        "id": 129981569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070628
    },
    {
        "content": "<p>Do we even have a definition of UFD? It's pretty ugly</p>",
        "id": 129981574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070644
    },
    {
        "content": "<p>also I think we need \"a in L/K: a is integral over K iff K(a) is finite\"</p>",
        "id": 129981578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070654
    },
    {
        "content": "<blockquote>\n<p>Do we even have a definition of UFD? It's pretty ugly</p>\n</blockquote>\n<p>A is UFD iff (A\\{0})/A* is a free monoid :)</p>",
        "id": 129981588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070680
    },
    {
        "content": "<p>Blair is doing fdvs. Why not ask her if you can help?</p>",
        "id": 129981590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070687
    },
    {
        "content": "<p>We need more UG maths!</p>",
        "id": 129981636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532070730
    },
    {
        "content": "<p>So we need more UG's, so that we can prove things <code>by UG</code>. You do have access to two hammers!</p>",
        "id": 129981648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070783
    },
    {
        "content": "<p>let's say we've built L such that every polynomial in K[X] splits over L. How then do you show that L contains an algebraically closed field?</p>",
        "id": 129981650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070785
    },
    {
        "content": "<p>I think we should prove that K[X] is ED, that might help</p>",
        "id": 129981660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070833
    },
    {
        "content": "<p>That was almost there, right?</p>",
        "id": 129981699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070846
    },
    {
        "content": "<p>how should we prove \"L is algebraically closed iff every finite extension of L is L\"? that would involve building splitting fields</p>",
        "id": 129981706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070868
    },
    {
        "content": "<p>Except that the definition of ED wasn't optimal, so Chris had to work with degree + 1, or change the definition</p>",
        "id": 129981707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070873
    },
    {
        "content": "<p>I guess you want to do separable closure at the same time</p>",
        "id": 129981728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532070938
    },
    {
        "content": "<p>my point is, there's a long way to go before we build algebraic closure</p>",
        "id": 129981783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532070997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> there is no integral in mathlibs measure theory, yet.</p>",
        "id": 129985250,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1532077467
    },
    {
        "content": "<blockquote>\n<p>Oh, I forgot to mention I added scalar multiplication of measures; they are unfortunately not a module since the base \"ring\" is <code>ennreal</code></p>\n</blockquote>\n<p>Yeah, semimodules would be nice to have. But up to now I didn't find any literature on them.</p>",
        "id": 129985369,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1532077678
    },
    {
        "content": "<p>Oh, I didn't even imagine that. I was concerned about the fact that we don't have derivative and that could be a problem when wanting to compute integrals.</p>",
        "id": 129985492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532077907
    },
    {
        "content": "<p>Well, the basic theory of integrals in measure theory doesn't need derivatives. It starts with integration over the Lebesgue measure. But there is some theory to be developed up to this point.</p>",
        "id": 129985626,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1532078144
    },
    {
        "content": "<p>Sure, that's why I though we could have integrals but no mean of computing one</p>",
        "id": 129985681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532078223
    },
    {
        "content": "<p>But let's have normed spaces first <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129985691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532078249
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Oh, I forgot to mention I added scalar multiplication of measures; they are unfortunately not a module since the base \"ring\" is <code>ennreal</code></p>\n</blockquote>\n<p>Yeah, semimodules would be nice to have. But up to now I didn't find any literature on them.</p>\n</blockquote>\n<p>Maybe that's because most mathematicians think they're about as useless as <code>distrib</code>s? Having said that, the existence of distribs proves that computer scientists have very different opinions to mathematicians as to what is \"nice to have\". What would mathlib want semimodules for? Is this something to do with compile times or something?</p>",
        "id": 129985812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532078443
    },
    {
        "content": "<p>A related story : <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> decided to do group actions yesterday, and his first question was \"wait -- there's no mention of the inverse in the definition?\". \"No\", I replied. \"Oh dear, then we'll have to make it monoid actions if we want to get it into mathlib...\"</p>",
        "id": 129985886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532078585
    },
    {
        "content": "<p><code>semimodules</code> would help to abstract some basic proofs and syntax. we can abstract the scalar multiplication over <code>measure</code>, <code>outer_measure</code>, measurable functions into <code>ennreal</code>, integrable functions into <code>ennreal</code>, etc...</p>",
        "id": 129985954,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1532078733
    },
    {
        "content": "<blockquote>\n<p>there is no integral in mathlibs measure theory, yet.</p>\n</blockquote>\n<p>FYI I started working on that yesterday</p>",
        "id": 130014392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111161
    },
    {
        "content": "<p>nice</p>",
        "id": 130014435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532111173
    },
    {
        "content": "<p>Does it mean you'll do derivatives as well?</p>",
        "id": 130014452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111215
    },
    {
        "content": "<p>no, like Johannes said, those two are completely unrelated except for a certain fundamental theorem</p>",
        "id": 130014469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111241
    },
    {
        "content": "<p>obviously the fundamental theorem can't be stated until we have both parts</p>",
        "id": 130014474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111264
    },
    {
        "content": "<p>There are indeed completely unrelated except for their fundamental relation</p>",
        "id": 130014517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111290
    },
    {
        "content": "<p>Anyway, it's already great to work on integrals</p>",
        "id": 130014530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111324
    },
    {
        "content": "<p>I don't even think they operate on the same kinds of spaces. There are spaces with integrals but no derivatives and vice versa</p>",
        "id": 130014532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111339
    },
    {
        "content": "<p>sure</p>",
        "id": 130014540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111349
    },
    {
        "content": "<p>so it's not like they are really different sides of the same coin, as in you could use either one to define the other</p>",
        "id": 130014561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111399
    },
    {
        "content": "<p>but I guess people care about R -&gt; R and it's true there</p>",
        "id": 130014627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111432
    },
    {
        "content": "<p>it's an important special case, especially for teaching purposes</p>",
        "id": 130014634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111455
    },
    {
        "content": "<p>especially when it gives people the weird impression that these things are fundamentally related</p>",
        "id": 130014658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111499
    },
    {
        "content": "<p>they are related, but not fundamentally</p>",
        "id": 130014672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111517
    },
    {
        "content": "<p>in the foundational sense</p>",
        "id": 130014717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111527
    },
    {
        "content": "<p>Since you seem to be in an analytical mood, what about returning to the oldest open mathlib PR?</p>",
        "id": 130014722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532111535
    },
    {
        "content": "<p>Well, measure theory isn't quite analysis</p>",
        "id": 130014765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111619
    },
    {
        "content": "<p>Let's put it next on the list</p>",
        "id": 130014769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111631
    },
    {
        "content": "<p>that will set us up for derivatives</p>",
        "id": 130014820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532111659
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>there is no integral in mathlibs measure theory, yet.</p>\n</blockquote>\n<p>FYI I started working on that yesterday</p>\n</blockquote>\n<p>how is it now?</p>",
        "id": 135776602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539521819
    },
    {
        "content": "<p>Johannes has taken over on that development</p>",
        "id": 135776650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539521898
    },
    {
        "content": "<p>I think it might be merged now? I heard some talk about it but I haven't checked</p>",
        "id": 135776653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539521924
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/How.20much.20of.20analysis.20is.20formalised.3F/near/135735421\" title=\"#narrow/stream/116395-maths/subject/How.20much.20of.20analysis.20is.20formalised.3F/near/135735421\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/How.20much.20of.20analysis.20is.20formalised.3F/near/135735421</a></p>",
        "id": 135776655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539521935
    },
    {
        "content": "<p>ok</p>",
        "id": 135776663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539521953
    },
    {
        "content": "<p>Hi, I'm new to Lean and trying to learn more by implementing point processes. I'm already stuck on the first definition. I want to create a new structure for measures that only take values in <code>\\nat</code> and I am unsure why my approach doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">finite_point_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">in_nats</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measurable_set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>any help would be appreciated. If this is the wrong place to ask please just point me in the right direction. thanks~</p>",
        "id": 304033553,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665754673
    },
    {
        "content": "<p><code>ℕ</code> is a <strong>type</strong>, not a <strong>set</strong>, so <code>n ∈ ℕ</code> does not make sense. You want <code>n : ℕ</code> instead.</p>",
        "id": 304033856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665754741
    },
    {
        "content": "<p>Thanks, that is already helpful, sadly that did not fix the error yet. I'll play around a bit more and come back if I still can't fix it</p>",
        "id": 304034821,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665754983
    },
    {
        "content": "<p>In any case try to post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (including the imports and so on, the idea is that we can copy/paste your code and see what happens). Note that <code>measure</code> refers to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure\">docs#measure</a>, that is probably not what you want.</p>\n<p>Finally, it's probably a good idea to open a new conversation in the \"new members\" stream. I can move your message if you want.</p>",
        "id": 304035314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665755132
    },
    {
        "content": "<p>Yes, thanks, will keep in mind in the future. I got it working now. Yes, you can move this to the new members stream, didn't see it earlier</p>",
        "id": 304035916,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1665755296
    },
    {
        "content": "<p>Also, you might want your measure to take values in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat\">docs#enat</a> instead, since many (most?) point processes used in practice are only locally finite</p>",
        "id": 304036820,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1665755547
    }
]