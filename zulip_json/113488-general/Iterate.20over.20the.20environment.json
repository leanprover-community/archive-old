[
    {
        "content": "<p>I know essentially nothing about the metaprogramming framework so I am sorry if this question is somehow misconceived.</p>\n<p>I would like to write some new commands that summarise information about what Lean knows.  My idea was to start with <code>#print prefix</code> and modify it.  However, if I understand correctly, <code>#print prefix</code> is implemented by the function <code>print_prefix</code> defined in C++ in the file <code>src/frontends/lean/print_cmd.cpp</code>.  That uses a method called <code>for_each_declaration</code>.  In Lean I can do some inspection of the environment like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>  <span class=\"n\">do</span> <span class=\"n\">env</span> <span class=\"err\">‚Üê</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>However, I am not seeing anything in Lean that is equivalent to <code>for_each_declaration</code>.  Am I missing something?</p>\n<p>Incidentally, <code>tactic_writing.md</code> contains a link to \"Programming in Lean\", which is now dead.  I don't know whether \"Programming in Lean\" is still available somewhere, or whether it has been decided that it is too outdated to distribute.  But I have a copy that I downloaded a while ago, so this is not an immediate issue for me.</p>",
        "id": 159071899,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550759753
    },
    {
        "content": "<p><code>environment.fold</code> perhaps?</p>",
        "id": 159072116,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550759885
    },
    {
        "content": "<p>Thanks, that's probably what's required.  It looks like it will need some monadic yoga to use it.  I will try to work it out.</p>",
        "id": 159072387,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550760102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Programming in Lean is half done and out of date, and it is currently going through some restructuring. I think Simon plans to fill in several more chapters. It is currently available at <a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf</a> (same place as before, just without the link on the main page), or on github at <a href=\"https://github.com/avigad/programming_in_lean\" target=\"_blank\" title=\"https://github.com/avigad/programming_in_lean\">https://github.com/avigad/programming_in_lean</a></p>",
        "id": 159117492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550794951
    }
]