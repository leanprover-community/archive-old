[
    {
        "content": "<p>I'd like to have a tactic like <code>congr</code> but with associativity. Let's say <code>∘</code> is an associative operation (not commutative).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span>  <span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∘</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∘</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd like to call the tactic, then <code>b ∘ c = x ∘ y</code> would be the new goal.</p>",
        "id": 303302666,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665424044
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s tactic <code>move_add</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a> would be relevant for this kind of task?</p>",
        "id": 303303590,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665424468
    },
    {
        "content": "<p>[I specified the question.]</p>",
        "id": 303303937,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665424662
    },
    {
        "content": "<p>I wish <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slice\">tactic#slice</a> could be extended to associative operations instead of only working in category theory ... in fact it's a TODO in comments <a href=\"https://tqft.net/mathlib/tactic/slice\">file#tactic/slice</a></p>",
        "id": 303304881,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665425136
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assoc_rw\">tactic#assoc_rw</a> isn't what you want but is useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n<span class=\"bp\">.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">m</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">assoc_rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">assoc_rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ac_refl\">tactic#ac_refl</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ac_change\">tactic#ac_change</a></p>",
        "id": 303306336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665425759
    },
    {
        "content": "<p>Since my project contains 155 explicit invocations of <code>list.append_assoc</code> I think I should automate it. The above-mentioned tactic does not exist. What will you recommend me to start with if I want to write it myself? I don't have experience with metaprogramming.</p>",
        "id": 303374802,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665474212
    },
    {
        "content": "<p>Which tactic doesn't exist?</p>",
        "id": 303384396,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665478227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/303302666\">said</a>:</p>\n<blockquote>\n<p>I'd like to have a tactic like <code>congr</code> but with associativity. Let's say <code>∘</code> is an associative operation (not commutative).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span>  <span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∘</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∘</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd like to call the tactic, then <code>b ∘ c = x ∘ y</code> would be the new goal.</p>\n</blockquote>\n<p>this</p>",
        "id": 303389174,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665480223
    },
    {
        "content": "<p>[my workaround idea didn't work either]</p>",
        "id": 303389451,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665480331
    },
    {
        "content": "<p>A primitive implementation might just be:</p>\n<ul>\n<li>use the simplifier to left associate</li>\n<li>run <code>congr</code></li>\n<li>use the simplifier to right associate</li>\n<li>run <code>congr</code><br>\nYou should think pretty carefully about the specification of your tactic first before implementing it. (Mostly because for simple tactics the implementation follows directly from the spec.)</li>\n</ul>",
        "id": 303392754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665481687
    },
    {
        "content": "<p>Not exactly <code>congr</code> — it would attempt to match even the non-matching parts (before trying the other direction that might actually help to simplify the goal).</p>\n<p>Nevertheless, you are right that I should first carefully specify what I want from my tactic.</p>",
        "id": 303396631,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665483403
    },
    {
        "content": "<p>What should it do on <code>(a * b) * c = (a * c) * (b * d)</code>?</p>",
        "id": 303491289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665511303
    },
    {
        "content": "<p>This feels pretty underspecified to me</p>",
        "id": 303491537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665511378
    },
    {
        "content": "<p>Surely <code>b * c = c * b * d</code>? It's only assuming associativity, no commutatively, right?</p>",
        "id": 303538534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665532329
    },
    {
        "content": "<p>Why wouldn't it produce two goals, <code>b = c * b</code> and <code>c = d</code>?</p>",
        "id": 303551902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665543430
    },
    {
        "content": "<p>Oh, I see. I was imagining only \"splitting\" on <code>*</code> if at least one side matches. I doubt \"find minimal runs of non-matching elements\" has a unique answer.</p>",
        "id": 303552106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665543632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/303392754\">said</a>:</p>\n<blockquote>\n<p>A primitive implementation might just be:</p>\n<ul>\n<li>use the simplifier to left associate</li>\n<li>run <code>congr</code></li>\n<li>use the simplifier to right associate</li>\n<li>run <code>congr</code><br>\nYou should think pretty carefully about the specification of your tactic first before implementing it. (Mostly because for simple tactics the implementation follows directly from the spec.)</li>\n</ul>\n</blockquote>\n<p>Let's say I only want to do the longest matching prefix and the longest matching suffix. Would there a similarly easy solution?</p>",
        "id": 303565547,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665555612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, that sounds like a clearer spec, but I don't think your suggested implementation implements it.</p>",
        "id": 303628420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665581521
    },
    {
        "content": "<p>No, I agree. You'd replace <code>congr</code> with repeated application of lemmas like<br>\n<code>b = c -&gt; a * b = a * c</code>.</p>",
        "id": 303724231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665609939
    },
    {
        "content": "<p>What about <code>a * b * x * b * a = a * b * a</code>? Do you match the prefix or the suffix? I feel like most of this ambiguity is avoided by just having the user use <code>ac_change</code> in the first place to put things in whatever state they actually desire before using <code>congr</code>...</p>",
        "id": 303777525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665648493
    },
    {
        "content": "<p>How is <code>ac_change</code> that doesn't use commutativity?</p>",
        "id": 303793278,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665655026
    },
    {
        "content": "<p>I think ac_change only uses commutativity if it's available</p>",
        "id": 303809330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665661355
    },
    {
        "content": "<p>But I could be wrong</p>",
        "id": 303809348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665661360
    },
    {
        "content": "<p>Here, the operation <code>++</code> is only associative. It doesn't do what it is supposed to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ac_change</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">;</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303815962,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665663766
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303829194,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665666596
    },
    {
        "content": "<p>Is there a tactic like <code>ac_refl</code> but for operations that are associative and not commutative?</p>",
        "id": 303829563,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665666732
    },
    {
        "content": "<p>I'm not sure if one exists already but here is one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">.</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.assoc_refl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">match_eq</span><span class=\"o\">,</span>\n   <span class=\"n\">assoc_refl</span> <span class=\"n\">lhs.app_fn.app_fn</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">assoc_refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303848724,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665670924
    },
    {
        "content": "<p>Why not simply using <code>simp only [list.append_assoc]</code>?</p>",
        "id": 303849836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665671201
    },
    {
        "content": "<p>It may look like cheating but the example of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#group\">tactic#group</a> shows this idea can already go quite a long way.</p>",
        "id": 303850712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665671433
    },
    {
        "content": "<p>I think thats also a reasonable solution in this case, but to answer the question: some ways in which a specialized tactic can be better are if you want flexibility of the operation without needing to know the name of the appropriate lemma, and that the proofs produced are way shorter and more reasonable looking. But for most applications using simp is probably way more convenient.</p>",
        "id": 303850923,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665671496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/303849836\">said</a>:</p>\n<blockquote>\n<p>Why not simply using <code>simp only [list.append_assoc]</code>?</p>\n</blockquote>\n<p>I conclude that, in a similar manner how <code>ac_change</code> does <code>convert_to r n; try ac_refl</code>, I should implement <code>la_change</code> as <code>convert_to r n; try simp only [list.append_assoc]</code> ok?<br>\nIt will not fully automate what I wanted to do (as with <code>la_change</code> I have to create the new form of the goal in my head and write it down), but it will get me to a form which <code>congr</code> can then simplify really usefully.<br>\nAny other suggestion?</p>",
        "id": 303933322,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665699574
    },
    {
        "content": "<p>What does <code>(n : parse (tk \"using\" *&gt; small_nat)?)</code> mean?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/0c171f291c5e590f368974dc3a293c7b50de44a4/src/tactic/congr.lean#L228\">https://github.com/leanprover-community/mathlib/blob/0c171f291c5e590f368974dc3a293c7b50de44a4/src/tactic/congr.lean#L228</a></p>",
        "id": 304401036,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665993466
    },
    {
        "content": "<p>That a tactic takes an optional argument <code>using n</code> and <code>n</code> will be parsed as a natural number.</p>",
        "id": 304401907,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665993792
    },
    {
        "content": "<p>I am confused. Example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.append_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.append_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- I am talking about the goal remaining here.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leads to the goal <code>a ++ (b ++ c) ++ d = a ++ (x ++ y) ++ d</code> as I intended. However</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.append_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- I am talking about the goal remaining here.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leaves me with <code>a ++ (b ++ (c ++ d)) = a ++ (x ++ (y ++ d))</code> which I didn't ask for. Why?</p>",
        "id": 304407332,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1665995926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> are you still stumped by this?</p>\n<p>Note that <code>try {...}</code> means \"try this block and do it, unless you get an error\".  It does not mean \"try this block and do it only if you close the goal\".  The latter could probably be implemented as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"o\">{</span> <span class=\"n\">tactics</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>note the second layer of curly braces: this acts as <code>focus</code>.  The block will be executed only if it closes the goal.  You could also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tactics</span><span class=\"o\">,</span> <span class=\"n\">done</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to achieve the same effect.</p>",
        "id": 306049176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666710435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/306049176\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> are you still stumped by this?</p>\n</blockquote>\n<p>I gave up on implementing a tactic. I continue to prove stuff \"manually\". Nevertheless, your reply is useful!</p>",
        "id": 306193758,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666774729
    },
    {
        "content": "<p>If you change your mind and want some help with the tactic, let me know: I'd be happy to help and I think that I did something similar already.</p>\n<p>As has been commented before, the main obstacle that I view is figuring out which <em>exact</em> cases you want the tactic to solve:</p>\n<ul>\n<li>you may want to use the initial parentheses as a guide to match LHS with RHS,</li>\n<li>you may want to first remove all parentheses and then do the matching,</li>\n<li>you may want to have a heuristic that tries the longest actual match from the beginning, before splitting out side-goals,</li>\n<li>...</li>\n</ul>\n<p>All these are easy to implement, it is just a matter of deciding which would be the most useful.</p>",
        "id": 306200220,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666777022
    },
    {
        "content": "<p>I think I want to ignore the parentheses, match the longest prefix, then match the longest suffix of the remaining equality, and produce a single goal for what remained.</p>\n<p>In the example <code>a * b * x * b * a = a * b * a</code> by Eric Wieser, I want the tactic to output a goal that <code>x * b</code> is the neutral element.</p>",
        "id": 306211261,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666781097
    },
    {
        "content": "<p>This tactic isn't congr at all if you want it to manufacture a <code>1</code> term</p>",
        "id": 306225535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666786476
    },
    {
        "content": "<p>For me, it makes sense as a special case of the tactic I described. Would you specify it otherwise?</p>",
        "id": 306227130,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666787004
    },
    {
        "content": "<p>Ok, it was fairly close to code that I already had.  Below is something that works with a couple of examples.  Let me know if it also works on your use cases!  Some of the functions are a little hacky, so they may misbehave.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"sd\">/--  Let `l r` be two lists.  `in_match l r` is the longest, left-most consecutive</span>\n<span class=\"sd\">sublist of `l r`.  For example:</span>\n<span class=\"sd\">```lean</span>\n<span class=\"sd\">#eval in_match [1, 2, 3, 4] [1, 2, 4]  -- [1, 2]</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_match</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">in_match</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n\n<span class=\"sd\">/--  Let `l r` be two lists.  `split3 l r` is the ordered triple</span>\n<span class=\"sd\">`(initial, (mid_l, mid_r), final)`, where</span>\n<span class=\"sd\">`l = initial ++ mid_l ++ final, r = initial ++ mid_r ++ final`, with</span>\n<span class=\"sd\">* `initial` chosen greedily (via `in_match`);</span>\n<span class=\"sd\">* `final` chosen next and again greedily (via `in_match`, but starting from the end of the lists);</span>\n<span class=\"sd\">* `mid_l, mid_r` chosen to be what is left-over.</span>\n<span class=\"sd\">For example:</span>\n<span class=\"sd\">```lean</span>\n<span class=\"sd\">#eval split3 [0, 1, 2, 8, 6, 3, 7] [0, 1, 2, 4, 5, 6, 3, 7]</span>\n<span class=\"sd\">-- ([0, 1, 2], (([8], [4, 5]), [6, 3, 7]))</span>\n\n<span class=\"sd\">#eval split3 [0, 1, 2, 6, 3, 7] [0, 1, 2, 4, 5, 6, 3, 7]</span>\n<span class=\"sd\">-- ([0, 1, 2], (([], [4, 5]), [6, 3, 7]))</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">split3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">ini</span>         <span class=\"o\">:=</span> <span class=\"n\">in_match</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">lx_tail</span>     <span class=\"o\">:=</span> <span class=\"n\">l.drop</span> <span class=\"n\">ini.length</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">rx_tail</span>     <span class=\"o\">:=</span> <span class=\"n\">r.drop</span> <span class=\"n\">ini.length</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">lx_tail_rev</span> <span class=\"o\">:=</span> <span class=\"n\">lx_tail.reverse</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">rx_tail_rev</span> <span class=\"o\">:=</span> <span class=\"n\">rx_tail.reverse</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">fin</span>         <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">in_match</span> <span class=\"n\">lx_tail_rev</span> <span class=\"n\">rx_tail_rev</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">ini</span><span class=\"o\">,</span>\n    <span class=\"o\">((</span><span class=\"n\">lx_tail_rev.drop</span> <span class=\"n\">fin.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"n\">rx_tail_rev.drop</span> <span class=\"n\">fin.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">),</span>\n    <span class=\"n\">fin</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--  `sum_up_with_default e op l` folds the operation `op` over the list `l`, using the given</span>\n<span class=\"sd\">element `e` as output in the case of an empty list. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">sum_up_with_default</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>     <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">as.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">fla</span>\n\n<span class=\"sd\">/--  Similar to `sum_up_with_default e op l` except it does not take the default element `e`,</span>\n<span class=\"sd\">but fails in the case of an empty list. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">sum_up</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no initial match -- could use a unit here\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_up_with_default</span> <span class=\"n\">a</span> <span class=\"n\">op</span>\n\n<span class=\"sd\">/--  `assoc_unit oper typ` is a hacky way of extracting a unit for the (binary) operation `oper`</span>\n<span class=\"sd\">on the type `typ`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">assoc_unit</span> <span class=\"o\">(</span><span class=\"n\">oper</span> <span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">some</span> <span class=\"n\">las</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">oper.get_app_args.last'</span><span class=\"o\">,</span>\n<span class=\"n\">et</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">las</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">oper.get_app_fn.const_name</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_append.append</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_mul.mul</span>       <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span>       <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span><span class=\"s2\">\"the tactic does not support this operation\"</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"sd\">/--  `assoc_tac oper` is a hacky way of extracting a tactic for associating and eliminating</span>\n<span class=\"sd\">empty lists, multiplications by `1` or additions by `0` under the (binary) operation `oper`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">assoc_tac</span> <span class=\"o\">(</span><span class=\"n\">oper</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">oper.get_app_fn.const_name</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_append.append</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">list.nil_append</span><span class=\"o\">],</span> <span class=\"n\">done</span> <span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_mul.mul</span>       <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"n\">done</span> <span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span>       <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span> <span class=\"n\">done</span> <span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span><span class=\"s2\">\"the tactic does not support this operation\"</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">fla</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">fla</span>\n\n<span class=\"sd\">/--  `fla` tries to extract side-goals for the \"central part\" of an equality between two</span>\n<span class=\"sd\">iterated applications of a binary associative operation. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">fla</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span><span class=\"s2\">\"goal is not an equality\"</span><span class=\"o\">,</span>\n<span class=\"n\">et</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n<span class=\"n\">oper</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">lhs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no operation found\"</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">opl</span> <span class=\"bp\">←</span> <span class=\"n\">list_binary_operands</span> <span class=\"n\">oper</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n<span class=\"n\">opr</span> <span class=\"bp\">←</span> <span class=\"n\">list_binary_operands</span> <span class=\"n\">oper</span> <span class=\"n\">rhs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ini</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ldiff</span><span class=\"o\">,</span> <span class=\"n\">rdiff</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opl.split3</span> <span class=\"n\">opr</span><span class=\"o\">,</span>\n<span class=\"n\">sini</span>   <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"n\">ini</span><span class=\"o\">,</span>\n<span class=\"n\">smidl</span>  <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"n\">ldiff</span><span class=\"o\">,</span>\n<span class=\"n\">smidr</span>  <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"n\">rdiff</span><span class=\"o\">,</span>\n<span class=\"n\">sfin</span>   <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"n\">fin</span><span class=\"o\">,</span>\n<span class=\"n\">nleft</span>  <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">sini</span><span class=\"o\">,</span> <span class=\"n\">smidl</span><span class=\"o\">,</span> <span class=\"n\">sfin</span><span class=\"o\">],</span>\n<span class=\"n\">nright</span> <span class=\"bp\">←</span> <span class=\"n\">sum_up</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">sini</span><span class=\"o\">,</span> <span class=\"n\">smidr</span><span class=\"o\">,</span> <span class=\"n\">sfin</span><span class=\"o\">],</span>\n<span class=\"n\">l_eq</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">nleft</span><span class=\"o\">],</span>\n<span class=\"n\">r_eq</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">nright</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span>\n<span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pr_left</span><span class=\"o\">)</span>  <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">l_eq</span> <span class=\"o\">(</span><span class=\"n\">assoc_tac</span> <span class=\"n\">oper</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pr_right</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">r_eq</span> <span class=\"o\">(</span><span class=\"n\">assoc_tac</span> <span class=\"n\">oper</span><span class=\"o\">),</span>\n<span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"bp\">%%</span><span class=\"n\">pr_left</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">pr_right</span><span class=\"o\">)),</span>\n<span class=\"n\">congr</span>\n\n<span class=\"sd\">/--  `fla_with_unit` is similar to `fla` except that it also tries to extract a unit for the</span>\n<span class=\"sd\">operation and uses it to handle cases where the expressions to match leave some empty sublist. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">fla_with_unit</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">instantiate_mvars</span><span class=\"o\">,</span>\n<span class=\"n\">et</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n<span class=\"n\">oper</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">lhs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no operation found\"</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">un</span> <span class=\"bp\">←</span> <span class=\"n\">assoc_unit</span> <span class=\"n\">oper</span> <span class=\"n\">et</span><span class=\"o\">,</span>\n<span class=\"n\">opl</span> <span class=\"bp\">←</span> <span class=\"n\">list_binary_operands</span> <span class=\"n\">oper</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n<span class=\"n\">opr</span> <span class=\"bp\">←</span> <span class=\"n\">list_binary_operands</span> <span class=\"n\">oper</span> <span class=\"n\">rhs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ini</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ldiff</span><span class=\"o\">,</span> <span class=\"n\">rdiff</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">opl.split3</span> <span class=\"n\">opr</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">sini</span>   <span class=\"o\">:=</span>  <span class=\"n\">ini.sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"k\">let</span> <span class=\"n\">smidl</span>  <span class=\"o\">:=</span>  <span class=\"n\">ldiff.sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"k\">let</span> <span class=\"n\">smidr</span>  <span class=\"o\">:=</span>  <span class=\"n\">rdiff.sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"k\">let</span> <span class=\"n\">sfin</span>   <span class=\"o\">:=</span>  <span class=\"n\">fin.sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"k\">let</span> <span class=\"n\">nleft</span>  <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"n\">sini</span><span class=\"o\">,</span> <span class=\"n\">smidl</span><span class=\"o\">,</span> <span class=\"n\">sfin</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"k\">let</span> <span class=\"n\">nright</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"n\">sini</span><span class=\"o\">,</span> <span class=\"n\">smidr</span><span class=\"o\">,</span> <span class=\"n\">sfin</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">sum_up_with_default</span> <span class=\"n\">un</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">oper.mk_app</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]),</span>\n<span class=\"n\">l_eq</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">nleft</span><span class=\"o\">],</span>\n<span class=\"n\">r_eq</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">nright</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">],</span>\n<span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pr_left</span><span class=\"o\">)</span>  <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">l_eq</span> <span class=\"o\">(</span><span class=\"n\">assoc_tac</span> <span class=\"n\">oper</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pr_right</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">r_eq</span> <span class=\"o\">(</span><span class=\"n\">assoc_tac</span> <span class=\"n\">oper</span><span class=\"o\">),</span>\n<span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"bp\">%%</span><span class=\"n\">pr_left</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">pr_right</span><span class=\"o\">)),</span>\n<span class=\"n\">congr</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla_with_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla_with_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla_with_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306275957,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666800510
    },
    {
        "content": "<p>I produced two tactics:</p>\n<ul>\n<li><code>fla</code> applies associativity with your specifications, but fails if one of the 3 parts in which the expressions get split is empty;</li>\n<li><code>fla_with_unit</code> works like <code>fla</code>, except that it tries to make a guess as to what the unit of the operation should be and hopes for the best!</li>\n</ul>",
        "id": 306276547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666800670
    },
    {
        "content": "<p>Wow! Thanks a lot!!! Imma test it today.</p>",
        "id": 306379217,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666850132
    },
    {
        "content": "<p>Great!  If the tactic fails on some goals, please post the failure here and I will try to debug!</p>",
        "id": 306379701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666850456
    },
    {
        "content": "<p>It works great in many situations! However, it fails here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306407998,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666862756
    },
    {
        "content": "<p>What happens with this case is that the penultimate <code>congr'</code> already solves the goal.  If you replace the last line of <code>fla</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"n\">tactic.congr'</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(i.e. simply adding <code>try $ </code> at the beginning) fixes this issue.</p>",
        "id": 306414241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865218
    },
    {
        "content": "<p>Amazing!!! Thank you!!!</p>",
        "id": 306414670,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666865355
    },
    {
        "content": "<p>It was confusing because when I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">++</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">d</span> <span class=\"bp\">++</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fla</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it didn't match <code>[B] ++ [C] </code> with <code>[B, C]</code>. Hence I didn't expect <code>fla</code> to close the goal too early in the previous example.</p>",
        "id": 306414986,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666865469
    },
    {
        "content": "<p>Oh, that is probably because the 3-way split of the expressions is different: in the latter example, the expression have no common \"tail\", so everything is \"beginning\" or \"middle\".  The earlier example that you posted has a common \"tail\".  I think that this allows <code>congr</code> (that uses more defeqs and subsingleton) to be smarter and therefore close the goal too early!</p>",
        "id": 306415335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865600
    },
    {
        "content": "<p>Is it possible to add <code>fla</code> to the list of tactics that <code>hint</code> tries inside my project?</p>",
        "id": 306415510,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666865653
    },
    {
        "content": "<p>Note that I think that currently <code>[B] ++ [C]</code> and <code>[B, C]</code> are not considered a match by the first part of the tactic, but likely they are unified by congr.</p>",
        "id": 306415527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/306415510\">said</a>:</p>\n<blockquote>\n<p>Is it possible to add <code>fla</code> to the list of tactics that <code>hint</code> tries inside my project?</p>\n</blockquote>\n<p>I think yes, though I need to look up what command is the right one to get it on <code>hint</code>s radar.</p>",
        "id": 306415623,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865693
    },
    {
        "content": "<p>Maybe it is a simple as adding <code>@[hint_tactic]</code> before <code>meta def fla</code>?</p>",
        "id": 306415934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865784
    },
    {
        "content": "<p>this works, but suggests the full name <code>tactic.interactive.fla</code>.  I'll see if you can get <code>fla</code> only.</p>",
        "id": 306416099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865844
    },
    {
        "content": "<p>Don't worry about that.</p>",
        "id": 306416151,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666865864
    },
    {
        "content": "<p>Yes, instead of the attribute at the beginning, simply put <code>add_hint_tactic \"fla\"</code> after the definition.</p>",
        "id": 306416292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666865906
    },
    {
        "content": "<p>(I updated the tactic above with the <code>try</code> and the <code>hint</code>.)</p>",
        "id": 306416961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666866140
    },
    {
        "content": "<p>Debugging and feature requests are fun: feel free to come up with more complicated examples and post them here!</p>",
        "id": 306417240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666866257
    },
    {
        "content": "<p>BTW why is <code>fla</code> the name? Is it short for something?</p>",
        "id": 306418696,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666866840
    },
    {
        "content": "<p>Oh, I think it was \"Force Left Associative\"</p>",
        "id": 306419318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666867086
    },
    {
        "content": "<p>Feel free to suggest a different name!</p>",
        "id": 306419342,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666867097
    },
    {
        "content": "<p>I will add it to my project. How do you want credits to be written?</p>",
        "id": 306419403,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666867129
    },
    {
        "content": "<p>I do not particularly mind: if it is its own separate file, you could add a \"copyright\" header like the one for mathlib.</p>\n<p>In any case, most of the code here is stolen from similar code somewhere else already!</p>",
        "id": 306419565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666867203
    },
    {
        "content": "<p>Do you have any idea who else should get copyright, apart from you?</p>",
        "id": 306419709,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666867274
    },
    {
        "content": "<p>Not really, since I got a lot of this code from what I had been doing with <code>move_add</code> and that in turn was through the help of Arthur Paulino, Eric Wieser, Rob Lewis and whoever wrote the tactics that I browsed.</p>\n<p>I have a feeling that in this community (and certainly for myself) there is not such a big emphasis on <em>personal</em> copyright, as much as \"contributing to the whole\".</p>",
        "id": 306420481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666867603
    },
    {
        "content": "<p>I'm not adding it to mathlib but to my own project. Therefore, I don't know how much \"contributing to the whole\" is a valid concept here. So I want to give you a proper copyright.</p>",
        "id": 306420691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666867689
    },
    {
        "content": "<p>Ok, so let's ping <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> , <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and see if any of them wants to have some specific recognition for the code above.  I am certainly mostly indebted to the three of them for whatever knowledge of tactic-writing that I have.</p>",
        "id": 306420909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666867797
    },
    {
        "content": "<p>I don't mind copyrights. No need to mention me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 306421658,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1666868092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/congr.20with.20associativity/near/306419342\">said</a>:</p>\n<blockquote>\n<p>Feel free to suggest a different name!</p>\n</blockquote>\n<p>Would you mind if I simply call it <code>associativity</code>?</p>",
        "id": 306436237,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1666873432
    },
    {
        "content": "<p>No, I do not mind what the name ends up being.  <code>associativity</code> might be a little long, but since you might be the only user of this tactic, it is entirely up to you!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 306444342,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666875945
    }
]