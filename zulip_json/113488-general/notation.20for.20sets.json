[
    {
        "content": "<p>Often, when you write <code>{x, y, z}</code> as an argument, the typechecker goes insane unless you specify exactly what type they're meant to be; I wonder if this could be remedied with some notation <code>{...}ₛ</code> that specifically says it's a <code>set</code>? And maybe something similar for <code>finset</code> (I can't seem to find a subscript <code>f</code>, so maybe <code>ᶠ</code> would have to do?)</p>",
        "id": 291023703,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658923345
    },
    {
        "content": "<p>The code that parses these notations is in the <a href=\"https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/brackets.cpp#L85\">C++ Lean code</a>, not in mathlib, so I guess it's not that easy to add something custom. (It depends on <a href=\"https://github.com/leanprover-community/lean/blob/8d7a5b1e728492e368ef48c790157ae49e636b31/library/init/core.lean#L319\">has_insert/has_singleton/has_emptc instances</a>.)</p>",
        "id": 291059500,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658937093
    },
    {
        "content": "<p>At least there's <code>({x, y, z} : set _)</code>, which generalizes.</p>",
        "id": 291071033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658938484
    },
    {
        "content": "<p>I've thought it would be fun/useful to have <code>the X, x</code> as a synonym for <code>(x : X)</code>, using the usual parsing rules for constructs with a comma. It saves needing to put a parenthesis way at the end of an expression.</p>",
        "id": 291071381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658938636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20sets/near/291059500\">said</a>:</p>\n<blockquote>\n<p>The code that parses these notations is in the <a href=\"https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/brackets.cpp#L85\">C++ Lean code</a>, not in mathlib, so I guess it's not that easy to add something custom. (It depends on <a href=\"https://github.com/leanprover-community/lean/blob/8d7a5b1e728492e368ef48c790157ae49e636b31/library/init/core.lean#L319\">has_insert/has_singleton/has_emptc instances</a>.)</p>\n</blockquote>\n<p>oh, that's a shame, I thought there'd be recursive notation :/</p>",
        "id": 291071648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658938749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20sets/near/291071381\">said</a>:</p>\n<blockquote>\n<p>I've thought it would be fun/useful to have <code>the X, x</code> as a synonym for <code>(x : X)</code>, using the usual parsing rules for constructs with a comma. It saves needing to put a parenthesis way at the end of an expression.</p>\n</blockquote>\n<p>isn't this what <code>show X, from x</code> is meant to be? Although I've noticed it sometimes gets stuck in proof terms</p>",
        "id": 291071678,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658938776
    },
    {
        "content": "<p><code>show</code> has different elaboration rules, too. <code>the</code> would just be a synonym for a type ascription.</p>",
        "id": 291072231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658939018
    },
    {
        "content": "<p>what are the rules?</p>",
        "id": 291072449,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658939114
    },
    {
        "content": "<p><code>show X, from x</code> elaborates like <code>@id X x</code></p>",
        "id": 291072648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939193
    },
    {
        "content": "<p>Which is to say, it produces a bona fide term of type <code>X</code></p>",
        "id": 291072697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939220
    },
    {
        "content": "<p><code>(x : X)</code> produces a term of whatever type <code>x</code> was elaborated to in the presence of the hint <code>X</code></p>",
        "id": 291072734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/notation.20for.20sets/near/291072734\">said</a>:</p>\n<blockquote>\n<p><code>(x : X)</code> produces a term of whatever type <code>x</code> was elaborated to in the presence of the hint <code>X</code></p>\n</blockquote>\n<p>I'm confused how this is different - or can (x : X) typecheck to another type?</p>",
        "id": 291072988,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658939344
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵃᵒᵖ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">α</span><span class=\"bp\">ᵃᵒᵖ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291073013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939357
    },
    {
        "content": "<p>The <code>: X)</code> is erased before typechecking happens</p>",
        "id": 291073042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939378
    },
    {
        "content": "<p>It's only there to provide a hint while elaborating the things inside the brackets</p>",
        "id": 291073155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939418
    },
    {
        "content": "<p>right I see</p>",
        "id": 291073156,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658939419
    },
    {
        "content": "<p>how come <code>show</code> isn't just notation for <code>@id</code> then?</p>",
        "id": 291073184,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658939435
    },
    {
        "content": "<p>It's a macro</p>",
        "id": 291073573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939606
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">unit</span><span class=\"bp\">ᵃᵒᵖ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">unit.star</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e.to_raw_fmt</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[</span><span class=\"n\">macro</span> <span class=\"n\">annotation</span>\n  <span class=\"o\">(</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">this</span> <span class=\"n\">default</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">add_opposite</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">unit</span> <span class=\"o\">[]))</span>\n      <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">unit.star</span> <span class=\"o\">[]))]</span>\n</code></pre></div>",
        "id": 291073578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658939610
    },
    {
        "content": "<p>Found precisely how <code>show</code> parses: <a href=\"https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/builtin_exprs.cpp#L516\">https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/builtin_exprs.cpp#L516</a></p>\n<p><code>show X, from x</code> is exactly <code>(λ (this : X), this) x</code>, and then it's given the <code>show</code> annotation (a macro, like Eric said). There's some code, for example in the pretty printer, that prevents beta reduction, and the pretty printer recognizes this annotation and prints it back out as a <code>show</code>.</p>",
        "id": 291073713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658939655
    },
    {
        "content": "<p>Type ascriptions are also macros. Here's where they're elaborated: <a href=\"https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/elaborator.cpp#L830\">https://github.com/leanprover-community/lean/blob/bf12a6c9b74846b532a248617eae692d2c13f18b/src/frontends/lean/elaborator.cpp#L830</a></p>\n<p><code>(x : X)</code> elaborates in the following way:</p>\n<ol>\n<li>elaborate <code>X</code> without any expected type.</li>\n<li>ensure that <code>X</code> is a type, inserting a <code>has_coe_to_sort</code> coercion if necessary.</li>\n<li>try to synthesize any pending type class instances.</li>\n<li>elaborate <code>x</code> with the elaborated <code>X</code> as the expected type.</li>\n<li>letting <code>X'</code> be the type of the elaborated <code>x</code>, check to see if <code>X</code> is defeq to <code>X'</code>. If so, we're done elaborating. If not, we try to insert a coercion from <code>X'</code> to <code>X</code>.</li>\n</ol>\n<p>(Expected types during elaboration are, as far as I understand, just suggestions to help direct the elaborator.)</p>\n<p>One consequence is that it's happy with <code>X'</code> and <code>X</code> being defeq, but sometimes (like for typeclasses) you want to control <code>X'</code> syntactically. The <code>(id x : X)</code> trick is supposed to cause <code>x</code> to syntactically have <code>X</code> as its type. I guess <code>show X, from x</code> should be similar, but it uses function argument elaboration rules instead.</p>",
        "id": 291076036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658940672
    }
]