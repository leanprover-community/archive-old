[
    {
        "content": "<p>why does this have no problem:</p>\n<div class=\"codehilite\"><pre><span></span>class add_comm_monoid (α : Type u) extends add_monoid α, add_comm_semigroup α\n\nclass add_group (α : Type u) extends add_monoid α, has_neg α :=\n(add_left_neg : ∀ a : α, -a + a = 0)\n\nclass add_comm_group (α : Type u) extends add_group α, add_comm_monoid α\n</pre></div>\n\n\n<p>but this gives me an error?</p>\n<div class=\"codehilite\"><pre><span></span>class has_upair extends has_zmem α :=\n(upair : α → α → α)\n(zmem_upair_iff_eq_or_eq : ∀ x y z, z ∈ upair x y ↔ z = x ∨ z = y)\n\nclass has_sUnion extends has_zmem α :=\n(sUnion : α → α)\n(zmem_sUnion_iff_zmem_zmem : ∀ x z, z ∈ sUnion x ↔ ∃ t, z ∈ t ∧ t ∈ x)\n\nclass has_sUnion_upair extends has_sUnion α, has_upair α\n</pre></div>",
        "id": 123761005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521138422
    },
    {
        "content": "<p>error:</p>\n<div class=\"codehilite\"><pre><span></span>invalid &#39;structure&#39; header, field &#39;to_has_zmem&#39; from &#39;zfc.has_upair&#39; has already been declared\n</pre></div>",
        "id": 123761012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521138431
    },
    {
        "content": "<p>Why isn't <code>α</code> a parameter of <code>has_upair</code> and <code>has_sUnion</code>?</p>",
        "id": 123761063,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521138499
    },
    {
        "content": "<p>oh it's a variable I declared before</p>",
        "id": 123761069,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521138507
    },
    {
        "content": "<p>(sorry for not providing MWE)</p>",
        "id": 123761073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521138522
    },
    {
        "content": "<p>Ah! I see! This is what is called diamond-shaped inheritance scheme. It causes you to inherit <code>to_has_zmem</code> multiple times which causes it to clash with itself.</p>",
        "id": 123761280,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521138813
    },
    {
        "content": "<p>(C++ programmers also know that as \"diamond of death\")</p>",
        "id": 123761299,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521138836
    },
    {
        "content": "<p>They have been carefully exorcised from the basic libraries</p>",
        "id": 123761350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521138885
    },
    {
        "content": "<p>Is there a way to not make <code>has_upair</code> inherit <code>has_zmem</code>?</p>",
        "id": 123761435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521138985
    },
    {
        "content": "<p>You could change:</p>\n<div class=\"codehilite\"><pre><span></span>class has_upair extends has_zmem α :=\n</pre></div>\n\n\n<p>into</p>\n<div class=\"codehilite\"><pre><span></span>class has_upair [has_zmem α] :=\n</pre></div>",
        "id": 123761461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139033
    },
    {
        "content": "<p>then why does the first one work?</p>",
        "id": 123761472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139060
    },
    {
        "content": "<p>Good question. I wonder if that's because <code>add_comm_monoid</code> doesn't have fields. You can basically inline it in the <code>extends</code> clause of <code>add_comm_group</code></p>",
        "id": 123761601,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139184
    },
    {
        "content": "<p>If that's the case, you maybe could take advantage of it by splitting <code>has_upair</code> in two:</p>\n<div class=\"codehilite\"><pre><span></span>class has_upair_1 [has_zmem α] :=\n(upair : α → α → α)\n(zmem_upair_iff_eq_or_eq : ∀ x y z, z ∈ upair x y ↔ z = x ∨ z = y)\n\nclass has_upair_2 extends has_zmem α,  has_upair  α\n</pre></div>\n\n\n<p>I'm not sure if that would work but it might be worth a try</p>",
        "id": 123761784,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139371
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class has_sUnion_upair extends has_zmem α :=\n(upair : α → α → α)\n(zmem_upair_iff_eq_or_eq : ∀ x y z, z ∈ upair x y ↔ z = x ∨ z = y)\n(sUnion : α → α)\n(zmem_sUnion_iff_zmem_zmem : ∀ x z, z ∈ sUnion x ↔ ∃ t, z ∈ t ∧ t ∈ x)\n\ninstance has_sUnion_upair.to_has_sUnion [s : has_sUnion_upair α] : has_sUnion α :=\n{ ..s }\n\ninstance has_sUnion_upair.to_has_upair [s : has_sUnion_upair α] : has_upair α :=\n{ ..s }\n</pre></div>",
        "id": 123761803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139402
    },
    {
        "content": "<p>this is what i did</p>",
        "id": 123761807,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139406
    },
    {
        "content": "<p>The part I don't like about your solution is that I believe it forces you to duplicate the statement of your laws.</p>",
        "id": 123761870,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139478
    },
    {
        "content": "<p>the part I don't like about your solution is that I would have to have <code>has_zmem</code> as my hypothesis each time</p>",
        "id": 123761979,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139583
    },
    {
        "content": "<p>No. If you use <code>has_upair_2</code>, it comes with <code>has_zmem</code></p>",
        "id": 123762005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139628
    },
    {
        "content": "<p>oh...</p>",
        "id": 123762095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139719
    },
    {
        "content": "<p>so your solution is basically like \"distrib\"</p>",
        "id": 123762102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139731
    },
    {
        "content": "<p>create a useless class that only has distributivity</p>",
        "id": 123762106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521139739
    },
    {
        "content": "<p>You could say that</p>",
        "id": 123762194,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521139826
    },
    {
        "content": "<p>Actually, useless is not accurate: try commenting it out to see if it's useful</p>",
        "id": 123762295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521140007
    },
    {
        "content": "<p>I mean <code>distrib</code> is useless in the sense that no mathematician cares about it</p>",
        "id": 123762354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521140075
    },
    {
        "content": "<p>I think it's still useful. It might not be an interesting structure but for some theorems, you may only care about distributivity without a whole semiring</p>",
        "id": 123762436,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521140213
    },
    {
        "content": "<p>The same theorem or tactics could then be applicable whether you have a semiring or a distributive lattice</p>",
        "id": 123762495,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521140288
    },
    {
        "content": "<p>In the case of my solution, the <code>has_upair_1</code> is more of a coding trick, you're right. I think it happens rarely enough that it's an ugliness we can live with. I would prefer if diamond shaped inheritance was supported properly but it has been ruled out for performance reason</p>",
        "id": 123762702,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521140631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> The original code works because it is using the old structure command to merge the fields together. People seem to be scared of anything marked \"old\" though, so if you want to recover this behavior with the new structure command, rather than creating a useless typeclass, you should extend <code>has_upair</code> and restate the axioms of <code>has_sUnion</code>, then construct a parent instance for <code>has_sUnion</code> (or vice versa).</p>",
        "id": 123768060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521148853
    },
    {
        "content": "<p>so if I use old structure, everything will work?</p>",
        "id": 123769395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521150954
    },
    {
        "content": "<p>for some value of \"everything\"</p>",
        "id": 123769435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521150977
    },
    {
        "content": "<p>I guess whether or not it will work in Lean 4 is another matter...</p>",
        "id": 123770735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521153424
    },
    {
        "content": "<p>I guess the other thing is that presumably there was a reason the structure command was changed. Hmm, they might only be performance-related though.</p>",
        "id": 123770925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521153753
    },
    {
        "content": "<p>I think they are. Leo considered the price to be too high despite C++ and Eiffel offering the feature with reasonable performances</p>",
        "id": 123771129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521154108
    },
    {
        "content": "<p>eh, most large software projects have moved away from large inheritance trees</p>",
        "id": 123771153,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521154175
    },
    {
        "content": "<p>Have they? For performance reasons? I seem to remember it being a bottomless well of bugs in C++ because the design is kind of dumb. As far as I know, the feature is still in use in Eiffel code bases</p>",
        "id": 123771236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521154318
    },
    {
        "content": "<p>not for performance, but because most people do inheritance wrong. this is the feeling i get from the places i've worked at with large code-bases</p>",
        "id": 123771293,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521154406
    },
    {
        "content": "<p>if you asked most people what the liskov substitution principle was they'd cross their eyes and wonder what you'd had for breakfast</p>",
        "id": 123771351,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521154489
    },
    {
        "content": "<p>well, that's a bit unfair, LSP is a bit jargon-ny, but the point is, it's easy to shoot yourself in the foot with misuse of inheritance</p>",
        "id": 123771426,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521154658
    },
    {
        "content": "<p>I think that's one reason Eiffel got inheritance right. Have you ever used it?</p>",
        "id": 123772124,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521155948
    }
]