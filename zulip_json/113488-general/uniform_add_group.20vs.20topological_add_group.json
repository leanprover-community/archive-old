[
    {
        "content": "<p>We know that a topological additive abelian group is a uniform additive group, and that a uniform additive group is a topological additive group</p>",
        "id": 136891308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032027
    },
    {
        "content": "<p>but which one of them should be an instance? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 136891315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032037
    },
    {
        "content": "<p>if they are equivalent, then they should be the same</p>",
        "id": 136891448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032209
    },
    {
        "content": "<p>(I have a preference for the topological terminology)</p>",
        "id": 136891459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032237
    },
    {
        "content": "<p>a topological additive group is based on a topological space and an additive group; a uniform additive group is based on a uniform space and an additive group</p>",
        "id": 136891467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032251
    },
    {
        "content": "<p>they can't be the same, right</p>",
        "id": 136891473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032254
    },
    {
        "content": "<p>A topological add group has a uniform structure</p>",
        "id": 136891478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032262
    },
    {
        "content": "<p>so it's both</p>",
        "id": 136891487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032280
    },
    {
        "content": "<p>but that would cause a loop in the inferrence</p>",
        "id": 136891488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032295
    },
    {
        "content": "<p>how?</p>",
        "id": 136891490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032300
    },
    {
        "content": "<p>I'm saying delete uniform add group and replace it with top add group</p>",
        "id": 136891493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032318
    },
    {
        "content": "<p>aha</p>",
        "id": 136891536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032327
    },
    {
        "content": "<p>now?</p>",
        "id": 136891546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032353
    },
    {
        "content": "<p>Actually I guess this is already how uniform_add_group is defined</p>",
        "id": 136891551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032376
    },
    {
        "content": "<p>so it's just a rename</p>",
        "id": 136891553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032380
    },
    {
        "content": "<p>well, currently we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">uniform_add_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">uniform_continuous_sub</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 136891571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032411
    },
    {
        "content": "<p>maybe you don't need uniform continuity</p>",
        "id": 136891572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032423
    },
    {
        "content": "<p>oh, it's a predicate</p>",
        "id": 136891616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> will object, but I want it to be a class</p>",
        "id": 136891633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032477
    },
    {
        "content": "<p>indeed it is Hoelzl who introduced uniform add groups, at least according to <a href=\"https://github.com/leanprover/mathlib/commit/ba95269a65a77c8ab5eae075f842fdad0c0a7aaf#diff-da2fc75300f00796d9262c2c7c3bd09aR87\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/ba95269a65a77c8ab5eae075f842fdad0c0a7aaf#diff-da2fc75300f00796d9262c2c7c3bd09aR87\">this</a></p>",
        "id": 136891713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541032585
    },
    {
        "content": "<p>oh, wait we do need uniform continuity</p>",
        "id": 136891731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032640
    },
    {
        "content": "<p>Is the uniformity of a uniform add group uniquely defined?</p>",
        "id": 136891750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032671
    },
    {
        "content": "<p>Topological groups actually have two induced uniformities, the left and right uniformity</p>",
        "id": 136891808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032742
    },
    {
        "content": "<p>so topological add group and uniform add group aren't exactly the same</p>",
        "id": 136891834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032779
    },
    {
        "content": "<p>a uniform add group comes with a chosen uniformity, a top add group doesn't</p>",
        "id": 136891887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541032817
    },
    {
        "content": "<p>so what should I do?</p>",
        "id": 136892371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541033525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what do you think about this?</p>",
        "id": 136908449,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541061840
    },
    {
        "content": "<p>This is an implementation issue and I have no idea.</p>",
        "id": 136908529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541061961
    },
    {
        "content": "<p>I will comment though that with something like the Haar measure on a locally compact Hausdorff topological group, there are two: a left Haar measure and a right Haar measure, but mathematicians often just talk about \"the Haar measure\" and they have just randomly chosen one of them.</p>",
        "id": 136908576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541062014
    },
    {
        "content": "<p>But these are additive groups, which should always be abelian, and then the uniformities coincide.</p>",
        "id": 136909588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541063544
    },
    {
        "content": "<p>No -- Haar measure doesn't need abelian. It's Pontrjagin duality which needs abelian</p>",
        "id": 136909840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541063914
    },
    {
        "content": "<p>Sure, I know that. Infinite Galois groups have Haar measures...<br>\nSo I think my point is: in the non-commutative case we don't want an instance from <code>topological_group</code> to <code>uniform_group</code> because in that case we want the user to explicitly say \"Use the left uniformity\" (or \"use the left Haar measure\", etc...). But in the commutative case, the left and right uniformity agree (just as with Haar measures), so it would make sense if the system could automatically pick one. But then we get diamond issues, and maybe it is just not worth it.</p>",
        "id": 136911163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541065671
    },
    {
        "content": "<p>Oh I see! Sorry :-) What I'm suggesting is that we always use the left one.</p>",
        "id": 136926698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541084272
    },
    {
        "content": "<p>I was also confused by uniform_add_group in the beginning, and wanted to get rid of it and keep topological add groups. But then I had this completion diamond issue, and Johannes fixed it by using more uniform_add_group...</p>",
        "id": 136940731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541097058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the problem is that I'm cleaning up the perfectoid project in which you have an instance of topological add comm group -&gt; uniform add group</p>",
        "id": 136942309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541098486
    },
    {
        "content": "<p>which messes up everything</p>",
        "id": 136942317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541098491
    },
    {
        "content": "<p>How much breaks if you remove that instance?</p>",
        "id": 136942896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541099061
    },
    {
        "content": "<p>Everything about topological rings in the perfectoid project has been merged into mathlib, you can get rid of everything</p>",
        "id": 136944935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541101181
    },
    {
        "content": "<p>I don't think it's everything</p>",
        "id": 136945077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541101313
    },
    {
        "content": "<p>here's what is left of <code>for_mathlib/uniform_space.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">completion</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">uniform_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Cauchy</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pure_cauchy₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Cauchy</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Cauchy</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pure_cauchy</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pure_cauchy</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pure_cauchy_dense₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Cauchy</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Cauchy</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pure_cauchy₂</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">pure_cauchy₂</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">prod_range_range_eq</span><span class=\"o\">,</span> <span class=\"n\">closure_prod_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">pure_cauchy_dense</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pure_cauchy</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">de</span> <span class=\"o\">:</span> <span class=\"n\">dense_embedding</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pure_cauchy</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pure_cauchy</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">dense_embedding</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">dense_embedding_pure_cauchy</span> <span class=\"n\">dense_embedding_pure_cauchy</span>\n<span class=\"kn\">end</span> <span class=\"n\">pure_cauchy</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">uniform_space</span>\n</pre></div>",
        "id": 136945126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541101326
    },
    {
        "content": "<p>Are those lemmas used elsewhere in the perfectoid project?</p>",
        "id": 136945274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541101517
    },
    {
        "content": "<p>I don't know</p>",
        "id": 136945292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541101544
    },
    {
        "content": "<p>You can remove this.</p>",
        "id": 136948798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541105024
    }
]