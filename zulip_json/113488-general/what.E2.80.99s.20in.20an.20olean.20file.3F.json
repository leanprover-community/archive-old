[
    {
        "content": "<p>What’s in an olean file? In particular, does it contain proof objects for <code>Prop</code>s, or merely everything that’s needed by downstream module (i.e. an “interface file”)?<br>\n(I’m asking because I like <code>leanproject get-cache</code> when juggling PRs, but downloading 50MB everytime can be annoying or even prohibitively when working while traveling, so I’m curious if there is some redundancy here.)</p>",
        "id": 271463844,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644513676
    },
    {
        "content": "<p>There's certainly redundancy, because the cache you download typically contains the same <code>logic/basic.olean</code> file every time</p>",
        "id": 271464136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644513797
    },
    {
        "content": "<p>That’s yet another axis of redundancy, indeed. (And one that’s very temping for nerdy plans. <code>rsync</code>. content-addressable stores. etc :-))</p>",
        "id": 271464385,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644513894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/what.E2.80.99s.20in.20an.20olean.20file.3F/near/271463844\">said</a>:</p>\n<blockquote>\n<p>What’s in an olean file? In particular, does it contain proof objects for <code>Prop</code>s, or merely everything that’s needed by downstream module (i.e. an “interface file”)?</p>\n</blockquote>\n<p>Sadly, the answer to both of these is \"yes\"</p>",
        "id": 271464852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514104
    },
    {
        "content": "<p>since tactics and <code>#print</code> can see the content of an upstream definition, changes to the proof are visible downstream, so the \"interface\" can't exclude them</p>",
        "id": 271464985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514172
    },
    {
        "content": "<p><code>#reduce</code> and <code>dec_trivial</code> can also show different behavior depending on how a proposition is proved</p>",
        "id": 271465150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514237
    },
    {
        "content": "<p>The Lean 4 ones basically come down to a dump of an entire Lean <code>Environment</code> aka everything you have access to while doing meta programming, I'd suspect its similar in 3?</p>",
        "id": 271465188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644514257
    },
    {
        "content": "<p>yes</p>",
        "id": 271465211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514266
    },
    {
        "content": "<p>Ah, so it even <code>#print</code> looks through <code>lemmas</code> in <code>Prop</code>? Hmm, that makes such a separation into “interface” and “full proof objects” harder. Too bad, I guess I got overly excited switching to a theorem prover with proof irrelevance :-)</p>",
        "id": 271465991,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644514591
    },
    {
        "content": "<p>The olean file also includes line numbers and docstrings.  There's a lot more in there than just the interface.</p>",
        "id": 271466366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644514742
    },
    {
        "content": "<p>That I’d understand as the interface, as I need it to jump to a definition.</p>",
        "id": 271466404,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644514767
    },
    {
        "content": "<p>There's a lot more that should not be in there :) . Like bytecode/IR.</p>",
        "id": 271466440,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644514786
    },
    {
        "content": "<p>Maybe interface is a unsuitable word. “Anything of interest when <em>importing</em> the module”.</p>",
        "id": 271466508,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644514806
    },
    {
        "content": "<p>Line numbers are metadata that should be loaded by the server, but not lead to recompilation. Lean 4 is going in the right direction by moving some of this information to a separate .ilean file.</p>",
        "id": 271466573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644514838
    },
    {
        "content": "<p>GHC has a notion of “I need to look at this file, because some dependency’s <code>.hi</code> file changed, but actually I notice that none of the things affecting this module has actually changed, so I don't need to further process this file”. So it’s more fine-granular than just interface-changed-or-did-not-change, and you don’t need to produce separate files for each possible consumer (with their own “projection of interest” of the information), but I don't now how fine it actually gets.</p>",
        "id": 271467135,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644515101
    },
    {
        "content": "<p>Ah, that's interesting. And incompatible with a Nix-based build system (unless you do materialize the projection into its own file), ha ha...</p>",
        "id": 271468414,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644515640
    },
    {
        "content": "<p>IIRC the level of granularity depends on the \"subsystem\" in question. For example I think ordinary definitions are hashed individually, but there's only one hash for all the type family instances--that's because GHC checks that type family instances are consistent and adding any instance could break this property. (I guess maybe it can be done on a per-family basis.)<br>\nIn Lean, I guess the fact that tactics have free reign of the environment means that there are not many useful \"subsystems\" to hash separately, unless you want to speculate that there will be client modules that use only specific known tactics (e.g., hash the simp set in case a client module only uses simp).</p>",
        "id": 271473270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644517559
    },
    {
        "content": "<p>Incompatible is maybe a tad too strong a word. It's an optimization that wouldn't apply in nix-based system.</p>",
        "id": 271473402,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644517617
    },
    {
        "content": "<p>Ah, maybe we'd even have to worry about tactics inspecting the docstring or the line numbers :-)</p>",
        "id": 271473582,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644517684
    },
    {
        "content": "<p>Right and there are tactics (or tactic-like things) that really do inspect docstrings (<code>to_additive</code>).<br>\nBut in general, you could try to guess some partial \"view\" of the information in an olean file, that excludes stuff like position information and non-simp lemmas. Then when compiling a client module, track whether or not the process only involved information available through that \"view\", and if so record this fact--then you don't need to recompile the client if the upstream module changes but the view doesn't change.<br>\nIt sounds like a tricky thing to get right.</p>",
        "id": 271474303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644517975
    },
    {
        "content": "<p>Yes, it would be better if information could be left out completely (looking at you, irrelevant proof object) :-)</p>",
        "id": 271476575,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644519090
    },
    {
        "content": "<p>And bad recompilation avoidance is far worse than less recompilation avoidance.</p>",
        "id": 271476701,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644519139
    },
    {
        "content": "<p>But the irrelevant proof object wants to be looked at by stuff such as documentation generators :p</p>",
        "id": 271476840,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644519205
    },
    {
        "content": "<p>Really? The docs on <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/is_free_group.html\">https://leanprover-community.github.io/mathlib_docs/group_theory/is_free_group.html</a> only show equations for <code>def</code>s, not for <code>lemma</code>s.</p>",
        "id": 271477045,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644519296
    },
    {
        "content": "<p>Yeah that's a WIP thing for Lean 4, <a href=\"https://github.com/insightmind/LeanInk\">https://github.com/insightmind/LeanInk</a>, we're planning to eventually integrate it with doc-gen4</p>",
        "id": 271477290,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644519387
    },
    {
        "content": "<p>I don't actually know the extent to which it uses olean over the raw source files though so maybe we can get rid of it at least in the olean.</p>",
        "id": 271477424,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644519444
    },
    {
        "content": "<p>It doesn't use oleans directly</p>",
        "id": 271478889,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644519977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/what.E2.80.99s.20in.20an.20olean.20file.3F/near/271473402\">said</a>:</p>\n<blockquote>\n<p>Incompatible is maybe a tad too strong a word. It's an optimization that wouldn't apply in nix-based system.</p>\n</blockquote>\n<p>Incompatible in the sense that it would make me rather use a different build system that does support it :)</p>",
        "id": 271479089,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644520079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> FWIW, I had this SE question in mind even before you started this thread, so I finally wrote it down: <a href=\"https://proofassistants.stackexchange.com/questions/335/what-is-the-state-of-recompilation-avoidance-in-proof-assistants\">https://proofassistants.stackexchange.com/questions/335/what-is-the-state-of-recompilation-avoidance-in-proof-assistants</a>. Let's see if it actually works as an SE question...</p>",
        "id": 271565142,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644580380
    }
]