[
    {
        "content": "<p>I was trying to define Picard iteration on real-valued functions, which only involves <code>ℝ</code> and <code>ℕ</code>. So I was quite shocked when the error I got was <code>VM does not have code for 'ennreal.canonically_ordered_comm_semiring'</code>. mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.interval_integral</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P.recursive</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x₀</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">P.recursive</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">equation compiler failed to generate bytecode for 'P.recursive._main'</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">code generation failed, VM does not have code for 'ennreal.canonically_ordered_comm_semiring'</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[eqn_compiler] compiling</span>\n<span class=\"cm\">def P.recursive : ℕ → ℝ → ℝ</span>\n<span class=\"cm\">| 0 := λ (t : ℝ), x₀</span>\n<span class=\"cm\">| n.succ := λ (t : ℝ), x₀ + ∫ (s : ℝ) in 0..t, f s (P.recursive n s)</span>\n<span class=\"cm\">[eqn_compiler] recursive:          1</span>\n<span class=\"cm\">[eqn_compiler] nested recursion:   0</span>\n<span class=\"cm\">[eqn_compiler] using_well_founded: 0</span>\n<span class=\"cm\">[eqn_compiler] using unbounded recursion (meta-definition):</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P.recursive'</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">Pm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∫</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Pm</span> <span class=\"n\">s</span><span class=\"o\">)))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">definition 'P.recursive'' is noncomputable, it depends on 'interval_integral'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Using <code>nat.rec_on</code>, I get the error I expected, as clearly the problem with these definitions is that they should be marked as <code>noncomputable</code>. Why did I get an error about <code>ennreal</code>? Is it used in unbounded recursion?</p>",
        "id": 217775617,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1606234355
    },
    {
        "content": "<p>Also what do the numbers 1, 0, 0 next to recursive, nested recursive, etc. mean??</p>",
        "id": 217775686,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1606234389
    },
    {
        "content": "<p>measures take values in <code>ennreal</code>, I guess that's how they get involved.</p>",
        "id": 217775980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606234487
    },
    {
        "content": "<p>Aha! That makes more sense. Thanks</p>",
        "id": 217778122,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1606235381
    }
]