[
    {
        "content": "<p>How hard would it be to have an attribute <code>localized_instance</code> which</p>\n<ul>\n<li>protects the declaration</li>\n<li>nolints it for docstrings</li>\n<li>declares it as an instance in the specified local</li>\n</ul>",
        "id": 280926015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651521887
    },
    {
        "content": "<p>Working on <a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a>, <a href=\"https://tqft.net/mathlib/data/finset/pointwise\">file#data/finset/pointwise</a>, <a href=\"https://tqft.net/mathlib/order/filter/pointwise\">file#order/filter/pointwise</a> is a pain because one must write useless docstrings to the new instances, protect them and add them manually to the nearest pile of <code>localized ... in pointwise</code>. I wish I could just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[localized_instance pointwise, to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `set α` is a `mul_one_class` under pointwise operations if `α` is. -/</span>\n<span class=\"kd\">@[to_additive \"`set α` is an `add_zero_class` under pointwise operations if `α` is.\"]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"attribute [instance] set.mul_one_class set.add_zero_class\"</span> <span class=\"k\">in</span> <span class=\"n\">pointwise</span>\n</code></pre></div>\n<p>It would maybe even be better if we could extend the <code>instance</code> attribute instead of creating a new one.</p>",
        "id": 280926450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651522083
    },
    {
        "content": "<p>And one neat bonus would to make <code>check_reducibility</code> not throw errors when such localized instances are used in global ones. For example, the pointwise <code>filter</code> instances currently do not use the <code>set</code> ones, but I want to tweak them to improve the definitional unfolding and I find myself needing to localize them all as well to appease the linter.</p>",
        "id": 280926860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651522262
    },
    {
        "content": "<p>Is this different from your previous proposal? <a href=\"#narrow/stream/113488-general/topic/Automatic.20attribute.20localization/near/275732727\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Automatic.20attribute.20localization/near/275732727</a></p>",
        "id": 280927355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651522448
    },
    {
        "content": "<p>Thanks I couldn't find it anymore <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> It's the same underlying idea but I refined it to make sure it really behaves like <code>instance</code>.</p>",
        "id": 280927474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651522508
    },
    {
        "content": "<p>I think this is still subsumed by Lean 4's scoped instances feature</p>",
        "id": 280927682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651522605
    },
    {
        "content": "<p>So is the answer \"Wait for Lean 4\"?</p>",
        "id": 280927831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651522676
    },
    {
        "content": "<p>Also, I don't think <code>scoped _root_.pointwise.set.mul_one_class</code> is much more user-friendly than what we already have. I once again despair at the new scoping mechanism.</p>",
        "id": 280928380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651522923
    },
    {
        "content": "<p>Putting stuff in namespaces <code>set.pointwise</code>, <code>finset.pointwise</code>, <code>filter.pointwise</code> is not an option because you don't want to open three different <code>pointwise</code> namespaces every time you work on something.</p>",
        "id": 280928999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651523203
    },
    {
        "content": "<p>Potentially you can export <code>set.pointwise</code> to <code>pointwise</code>, but I haven't checked.</p>",
        "id": 280929299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651523355
    },
    {
        "content": "<p>Well anyway if I can't change your mind so as to why <code>scoped</code> is bad, we might as well backport it so that I can change mine.</p>",
        "id": 280929493,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651523433
    }
]