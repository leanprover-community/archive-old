[
    {
        "content": "<p>What's the fastest way to perform calculations involving fractional numbers? Specifically, I defined a complex number as a pair of rational numbers, and performed a Mandelbrot set test for 100000 iterations, which took several seconds. This is pretty slow, so what would be a better solution?</p>",
        "id": 204983075,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1595642991
    },
    {
        "content": "<p><span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>? (i.e. wait until Lean4 which will be much faster?)</p>",
        "id": 204983130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595643041
    },
    {
        "content": "<p>How are you doing the calculation?</p>",
        "id": 204983136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595643055
    },
    {
        "content": "<p>It's pretty simple, no thought to optimization.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">comp_rat</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℂ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">comp_rat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cadd</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"n\">i₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cmul</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span> <span class=\"bp\">-</span> <span class=\"n\">i₁</span> <span class=\"bp\">*</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">i₂</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204983233,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1595643194
    },
    {
        "content": "<p>I see mathlib has a floating point implementation, so I may try that one as well for comparison</p>",
        "id": 204983307,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1595643257
    },
    {
        "content": "<p>I assume you're using <code>#eval</code> (or equivalent <code>lean --run</code>)</p>",
        "id": 204983336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595643336
    },
    {
        "content": "<p><code>lean --run</code>, yeah</p>",
        "id": 204983344,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1595643359
    },
    {
        "content": "<p>I tried native.float, but it generates errors like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">kernel</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"kn\">check</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">x&#39;</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">usually</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">buggy</span> <span class=\"n\">tactic</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">builtin</span> <span class=\"n\">elaborator</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n  <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">float</span>\n<span class=\"n\">elaborated</span> <span class=\"n\">value</span><span class=\"o\">:</span>\n  <span class=\"mi\">3927</span> <span class=\"bp\">/</span> <span class=\"mi\">1250</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"kn\">definition</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">uses</span> <span class=\"n\">untrusted</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">float&#39;</span>\n</code></pre></div>\n\n\n<p>Can this error be suppressed or ignored in some way?</p>",
        "id": 204984660,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1595645639
    },
    {
        "content": "<p>You might have to put <code>meta</code> in front of your definitions?</p>",
        "id": 204984715,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595645696
    },
    {
        "content": "<p>The problem with rational number arithmetic is that the denominators (and usually numerators as well) grow exponentially in the number of operations</p>",
        "id": 204991010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595658547
    },
    {
        "content": "<p>You probably want to do some heuristic rounding and interval arithmetic once the denominator gets large enough</p>",
        "id": 204991023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595658594
    },
    {
        "content": "<p>What is your actual mandelbrot set test? I only see the core add/mul operations in your snippet. In order to know what kind of rounding is appropriate I would like to know how exactly you are doing the mandelbrot set test</p>",
        "id": 204991134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595658731
    }
]