[
    {
        "content": "<p>Does <code>squeeze_dsimp</code> actually ever report anything other than <code>dsimp only</code>? Amelia showed me a situation where <code>dsimp</code> worked, <code>squeeze_dsimp</code> reported <code>dsimp only</code>, which didn't work, and <code>squeeze_simp</code> reported <code>simp only [a bunch of lemmas which are true by refl]</code> and then <code>dsimp only [those lemmas]</code> worked. And indeed it's pretty easy to reproduce:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.associated</span>\n<span class=\"c1\">-- import random file which contains a simp lemma whose proof is `rfl`, in this case</span>\n<span class=\"c1\">-- `@[simp] lemma associates.mk_one [monoid α] : associates.mk (1 : α) = 1 := rfl`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- `simp only [associates.mk_one]`</span>\n  <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 1 = 1</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">squeeze_dsimp</span><span class=\"o\">,</span> <span class=\"c1\">-- `dsimp only`</span>\n  <span class=\"c1\">-- ⊢ 1 = 1</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"c1\">-- error: tactic failed to simplify</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">associates.mk_one</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ 1 = 1</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316506057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671308069
    },
    {
        "content": "<p>I was quite surprised to find that simp tracing and dsimp tracing seemed to be two totally different systems, when trying to understand what was going on.</p>",
        "id": 316506213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671308206
    },
    {
        "content": "<p>Yes. I have places where <code>squeeze_dsimp</code> correctly outputs <code>dsimp only [list.map]</code> for example.</p>",
        "id": 316506476,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671308385
    },
    {
        "content": "<p>That said, we all know <code>squeeze_dsimp</code> is unreliable.</p>",
        "id": 316506729,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671308536
    },
    {
        "content": "<p>To be honest, I don't know whether <code>squeeze_dsimp</code> ever outputs a rfl lemma. In my cases, they were definitions that were expanded.</p>",
        "id": 316506840,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671308628
    },
    {
        "content": "<p>Aah, very good! So if it manages to use an equation lemma, it might print something?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">list.map</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">list.map : Π {α : Type u} {β : Type v}, (α → β) → list α → list β</span>\n<span class=\"cm\">list.map._main : Π {α : Type u} {β : Type v}, (α → β) → list α → list β</span>\n<span class=\"cm\">list.map._main._meta_aux : Π {α : Type u} {β : Type v}, (α → β) → list α → list β</span>\n<span class=\"cm\">list.map._main.equations._eqn_1 : ∀ {α : Type u} {β : Type v} (f : α → β), list.map._main f list.nil = list.nil</span>\n<span class=\"cm\">list.map._main.equations._eqn_2 : ∀ {α : Type u} {β : Type v} (f : α → β) (a : α) (l : list α),</span>\n<span class=\"cm\">  list.map._main f (a :: l) = f a :: list.map._main f l</span>\n<span class=\"cm\">list.map._sunfold : Π {α : Type u} {β : Type v}, (α → β) → list α → list β</span>\n<span class=\"cm\">list.map.equations._eqn_1 : ∀ {α : Type u} {β : Type v} (f : α → β), list.map f list.nil = list.nil</span>\n<span class=\"cm\">list.map.equations._eqn_2 : ∀ {α : Type u} {β : Type v} (f : α → β) (a : α) (l : list α), list.map f (a :: l) = f a :: list.map f l</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">squeeze_dsimp</span><span class=\"o\">,</span> <span class=\"c1\">-- Try this: dsimp only [list.map]</span>\n  <span class=\"c1\">-- ⊢ list.nil = list.nil</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ list.nil = list.nil</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316509570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671310482
    },
    {
        "content": "<p>Yes but it isn't enough for <code>squeeze_dsimp</code> to be really useful.</p>",
        "id": 316509914,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671310718
    },
    {
        "content": "<p>It might be the case that <code>squeeze_dsimp</code> is better at suggesting <code>unfold [...]</code> than suggesting <code>dsimp only [...]</code> maybe.</p>",
        "id": 316510968,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671311506
    }
]