[
    {
        "content": "<p>When I write </p>\n<p>variable α : Type<br>\nvariable x:α <br>\ndef f: α → α → Prop:= λ x y, x=y</p>\n<p>#check f (x:α )</p>\n<p>I get messages: type mismatch at application f x term x has type α :Type but is expected to have Type Type: Type 1<br>\nWhat mean is it? please can you explain it.</p>",
        "id": 128980204,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530556288
    },
    {
        "content": "<p>Add <code>set_option pp.universes true</code> before your <code>#check</code> statement, that should be informative. Also, please encode your code snippets between ticks (<code> ` </code>) so that the font helps seeing what is code and what isn't</p>",
        "id": 128980473,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556573
    },
    {
        "content": "<p><code>f</code> has two arguments, <code>alpha</code> and <code>x</code>. You gave <code>x</code> but not <code>alpha</code></p>",
        "id": 128980495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530556603
    },
    {
        "content": "<p>So it thinks that <code>(x : alpha)</code> is the first argument to <code>f</code>, which is the <code>Type</code></p>",
        "id": 128980519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530556654
    },
    {
        "content": "<p>oh lol alpha is explicit</p>",
        "id": 128980570,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530556688
    },
    {
        "content": "<p>Good catch</p>",
        "id": 128980581,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530556725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"c1\">-- Π (α : Type), α → α → Prop</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"c1\">-- ?M_1 → ?M_1 → Prop</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- β → Prop</span>\n</pre></div>",
        "id": 128981193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530557426
    },
    {
        "content": "<p>I add ( set_option pp.universes true) but it not run. I do not understand why we need it. In fact, I need ( f(x: alpha) to definition next object. example</p>\n<p>( def g (e: α × α):  ℕ := if f e.1 e.2 then 2 else 0 )</p>",
        "id": 128981198,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530557440
    },
    {
        "content": "<p>If you use <code>{</code> <code>}</code> then beta is implicit</p>",
        "id": 128981203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530557448
    },
    {
        "content": "<p>You used nothing, which is the same as <code>(</code> <code>)</code>, for alpha, so it's explicit</p>",
        "id": 128981218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530557491
    },
    {
        "content": "<p>so then you have to give it.</p>",
        "id": 128981223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530557503
    },
    {
        "content": "<p><code>#check f α x -- α → Prop </code></p>",
        "id": 128981271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530557538
    },
    {
        "content": "<p>And my suspicion that universes  were the root of the trouble did not pan out so you can discard my advice</p>",
        "id": 128981276,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530557544
    },
    {
        "content": "<p>Thank you I fix it.</p>",
        "id": 128981563,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530557891
    },
    {
        "content": "<p>I have the following code </p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type}\n\ndefinition  f : α → list α→ ℕ\n| a     []          := 0\n| a     (b :: l)  :=   if a = b then  (f a l)+1  else f a l\n</pre></div>\n\n\n<p>and I received messages  </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for α : Type, f : α → list α→ ℕ, a b: α, l: list α ⊢ decidable (a=b)\n</pre></div>\n\n\n<p>If I used type <code> char</code> then it run. Please can you explain it and how to use type <code>α</code> in such cases</p>",
        "id": 129017496,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530618203
    },
    {
        "content": "<p>The <code>if a = b then t else f</code> is notation for <code>ite (a = b) t f</code>, where:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>So, Lean is looking for an instance <code>decidable (a = b)</code>. You can tell Lean to wait for an instance to appear until you actually use <code>f</code> by putting <code>[decidable_eq α]</code> before the colon (<code>:</code>).</p>",
        "id": 129017656,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530618410
    },
    {
        "content": "<p>Note how <code>decidable_eq</code> reduces:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">decidable_eq</span> <span class=\"c1\">-- λ (α : Sort u_1), Π (a b : α), decidable (a = b)</span>\n</pre></div>",
        "id": 129017730,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530618541
    },
    {
        "content": "<p>Thank you for that, Sean</p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type} [decidable_eq α]\n\ndefinition  f : α → list α→ ℕ\n| a     []        := 0\n| a     (b :: l)  :=   if a = b then  (f a l)+1  else f a l\n</pre></div>\n\n\n<p>It is Ok</p>",
        "id": 129017953,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530618885
    },
    {
        "content": "<p>Yes, that also works.</p>",
        "id": 129017975,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530618925
    },
    {
        "content": "<p>If you put <code>variables [decidable_eq α]</code> while learning, it's fine. But note that if you write other definitions or theorems using <code>α</code> after that, they will all have <code>[decidable_eq α]</code> in their type signatures, whether you want it that way or not.</p>",
        "id": 129018051,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619026
    },
    {
        "content": "<p>How to repair it</p>",
        "id": 129018069,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530619077
    },
    {
        "content": "<p>That's one of those things that can trip you up when you're writing larger collections of Lean code.</p>",
        "id": 129018070,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619079
    },
    {
        "content": "<p>You can use <code>section</code> or <code>namespace</code> to make the <code>variables</code> local to a region.</p>",
        "id": 129018118,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619104
    },
    {
        "content": "<p>So, if you know you want to write a bunch of things that need <code>decidable_eq</code>, you can:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"bp\">...</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">p</span> <span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- variables {α : Type} [decidable_eq α] not valid after this.</span>\n</pre></div>",
        "id": 129018151,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619175
    },
    {
        "content": "<p>Thank you for that. I used it.  I have more question</p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type}\n\ndefinition f (l:list α):Prop := head l = last l\n</pre></div>\n\n\n<p>and I received messages </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application head l = last l term last l has type l  ≠ nil →  α but is expected have type α\n</pre></div>\n\n\n<p>How use type which have condition as function last?</p>",
        "id": 129018476,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530619605
    },
    {
        "content": "<p>You should first check the types:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">head</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 129018562,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619736
    },
    {
        "content": "<p>Yes I used it</p>",
        "id": 129018577,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530619764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.list\nopen list\n</pre></div>",
        "id": 129018636,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530619807
    },
    {
        "content": "<p>So, in order to use <code>last</code>, you will need to prove <code>l ≠ list.nil</code>.</p>",
        "id": 129018642,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619827
    },
    {
        "content": "<p>I'm not sure what you want to do, but you could have that condition as a parameter to <code>f</code>.</p>",
        "id": 129018658,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530619877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">head_eq_last</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 129018745,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530620008
    },
    {
        "content": "<p>In fact I want definition f such that head of l equal tail of l. In general, I want used type have condition</p>",
        "id": 129018829,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530620114
    },
    {
        "content": "<p>should the empty list satisfy the definition?</p>",
        "id": 129018899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530620174
    },
    {
        "content": "<p>the empty list is not satisfy definition</p>",
        "id": 129018934,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530620233
    },
    {
        "content": "<p>Then you can write</p>\n<div class=\"codehilite\"><pre><span></span>definition head_eq_last (l : list α) : Prop := ∃ (h : l ≠ list.nil), head l = last l h\n</pre></div>",
        "id": 129018947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530620270
    },
    {
        "content": "<p>I try it but I received messages </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for α: Type, l: list α, h : l ≠ list.nil ⊢inhibited α\n</pre></div>",
        "id": 129019196,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530620608
    },
    {
        "content": "<p>That's a consequence of the type of <code>head</code>. Easy to fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">head_eq_last</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">),</span> <span class=\"n\">head</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">last</span> <span class=\"n\">l</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 129019478,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530621002
    },
    {
        "content": "<p>Thank you for that, I understood</p>",
        "id": 129019614,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530621157
    },
    {
        "content": "<p>Any time you see this message pattern:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span> <span class=\"bp\">...</span> <span class=\"err\">⊢</span> <span class=\"n\">C</span>\n</pre></div>\n\n\n<p>Lean is looking for either an existing instance <code>C</code> or a parameter such as <code>[C]</code>.</p>",
        "id": 129019630,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530621194
    },
    {
        "content": "<p>So, when you used <code>char</code>, it used the existing instance <code>decidable_eq char</code>.</p>",
        "id": 129019643,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530621227
    },
    {
        "content": "<p>when I restrict type <code> α </code> to type <code> fintype α </code>, I have problem. My code is</p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type}\n\ndef preimage (f:α → ℕ ) (u:ℕ ):set α  := λ x, f x=u\n\ndef card_image (f:(fintype α) → ℕ) (u:ℕ ):ℕ\n:= fintype.card (preimage g u)\n</pre></div>\n\n\n<p>and I received messages </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for α : Type, f : fintype α → ℕ, u : ℕ ⊢ fintype ↥(preimage f u)\n</pre></div>\n\n\n<p>I understand that Lean  find <code>fintype ↥(preimage f u)</code>. What mean is <code> ↥</code>?  can we show that <code>  preimage f u </code> have type <code> fintype</code>? How I fix it</p>",
        "id": 129126831,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530782373
    },
    {
        "content": "<p>This code should work. In the function <code>card_image</code>, the type of <code>f</code> should probably be <code>α → ℕ</code>. <code>fintype α</code> is more or less just the statement that <code>α</code> is finite. I also made <code>decidable_eq</code> an argument to the function as this is necessary to compute the <code>fintype</code> instance. You could also use the line<code>local attribute [instance] classical.prop_decidable</code> to achieve the same thing without <code>decidable_eq</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">preimage</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">u</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">preimage</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">card_image</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129127521,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530783477
    },
    {
        "content": "<p>Thank <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> for that. <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 129127861,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530783955
    },
    {
        "content": "<p>What mean is messages </p>\n<div class=\"codehilite\"><pre><span></span>maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 129156114,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530816023
    },
    {
        "content": "<p>That means that you need an instance for a certain type class. Lean is trying to find one for you but gives up. It might be because none exists or because the one that would work is, in a sense, unattainable by Lean. Do you know what type class you're trying to find an instance for?</p>",
        "id": 129156386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530816263
    },
    {
        "content": "<p>my type class is <code> fintype </code>. I have code 50 line. when I break it to two file then it run. But I run one file. it give messages</p>",
        "id": 129156858,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530816786
    },
    {
        "content": "<p>Can you great a <code>gist</code> on github and show me where you break it into two files?</p>",
        "id": 129157533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530817384
    },
    {
        "content": "<p><a href=\"https://gist.github.com/truonghoangle/b9fa69e939bcb6c20fcf96affc0fd965\" target=\"_blank\" title=\"https://gist.github.com/truonghoangle/b9fa69e939bcb6c20fcf96affc0fd965\">https://gist.github.com/truonghoangle/b9fa69e939bcb6c20fcf96affc0fd965</a><br>\nI break it after end direct_graph</p>",
        "id": 129158857,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530818752
    },
    {
        "content": "<p>Great! When you break it, what import do you give the new file?</p>",
        "id": 129158935,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530818796
    },
    {
        "content": "<p>I use only <code> import data.fintype </code></p>",
        "id": 129159094,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530818963
    },
    {
        "content": "<p>try copying all the imports. You probably use instances from the other modules</p>",
        "id": 129159141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530819003
    },
    {
        "content": "<p>You can remove one at a time until it breaks</p>",
        "id": 129159179,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530819018
    },
    {
        "content": "<p>Ok it is run. Thank you for that</p>",
        "id": 129159316,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1530819185
    }
]