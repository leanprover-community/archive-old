[
    {
        "content": "<p>I thought it was about time I read through theorem proving in Lean again, to make sure I understand it 100% now. I don't. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span>\n<span class=\"n\">def</span> <span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">ffa</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"s2\">&quot;inside foo&quot;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">fa</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ffa</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">fa</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 130048945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168571
    },
    {
        "content": "<p>Why does that last <code>#check</code> work? What if there had been a <code>foo.foo.fa</code>? Who wins? Can I control who wins?</p>",
        "id": 130048997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168650
    },
    {
        "content": "<p>you have a misplaced <code>#</code></p>",
        "id": 130048998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532168650
    },
    {
        "content": "<p>I'm on my phone, sorry</p>",
        "id": 130049000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168662
    },
    {
        "content": "<p>I think the definition closest to your \"#check\" wins</p>",
        "id": 130049002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532168679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"s2\">&quot;inside foo&quot;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">fa</span>      <span class=\"c1\">-- fa : ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">fa</span>  <span class=\"c1\">-- foo.fa : ℤ</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 130049014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532168724
    },
    {
        "content": "<p>In a nested namespace situation what are the rules?</p>",
        "id": 130049020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168749
    },
    {
        "content": "<p>And can I bend them with extra annotations? Is this to do with <code>private</code>?</p>",
        "id": 130049065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168814
    },
    {
        "content": "<p>Kenny, interchanging the definition order there doesn't change the result</p>",
        "id": 130049068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532168824
    },
    {
        "content": "<p>hmm</p>",
        "id": 130049071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532168848
    },
    {
        "content": "<p>surely Mario knows why</p>",
        "id": 130049072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532168860
    },
    {
        "content": "<p>well, it's not to hard to come up with a post hoc rule given this data</p>",
        "id": 130049076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532168880
    },
    {
        "content": "<p>I don't have access to lean right now</p>",
        "id": 130049119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168898
    },
    {
        "content": "<p>That's why I'm reading TPIL :-)</p>",
        "id": 130049121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532168916
    },
    {
        "content": "<p>Okay, here's the rule, I think: If you are in <code>namespace foo</code>, ignoring <code>open</code>s, you can refer to things in the root namespace, and in the <code>foo</code> namespace. You can also refer to things in namespaces below that by adding prefixes relative to one of these roots. If there is a conflict, then the stuff in namespace <code>foo</code> wins over the root namespace</p>",
        "id": 130049179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532169118
    },
    {
        "content": "<p>So <code>#check foo.fa</code> inside namespace <code>foo</code> refers to <code>foo.fa</code> relative to the root namespace. If there was a <code>foo.foo.fa</code> it would take precedence over this</p>",
        "id": 130049230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532169209
    },
    {
        "content": "<p>I think I meant <code>protected</code> not <code>private</code></p>",
        "id": 130049807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532170459
    },
    {
        "content": "<p>Difficult to check right now</p>",
        "id": 130049808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532170467
    },
    {
        "content": "<p>Something with <code>protected</code> marking cannot be referred to without its last namespace. So if <code>A.B.C</code> was declared <code>protected</code> then it could be referred to as <code>A.B.C</code> or <code>B.C</code> but not <code>C</code></p>",
        "id": 130049967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532170838
    },
    {
        "content": "<p>Something with <code>private</code> marking has a name which is rather obscured, usually something like <code>_private.12345.name</code>. Inside the section/namespace it is declared, you can use <code>name</code> as its short name, but after that it is essentially inaccessible. I don't think it participates in namespacing</p>",
        "id": 130050030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532171026
    },
    {
        "content": "<p>after some testing, it looks like you can't actually type <code>_private.12345.name</code> and refer to the private value since the <code>12345</code> is a numeric name part, which you can't type using the usual lean parser. You can refer to it using tactics though. Here's a silly example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">foo</span>\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">my_password</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">57</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I_haz_pass</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">my_password</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">def</span> <span class=\"n\">evil</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"bp\">``</span><span class=\"n\">I_haz_pass</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">evil</span> <span class=\"c1\">-- 57</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">evil</span> <span class=\"bp\">=</span> <span class=\"mi\">57</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 130050319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532171684
    },
    {
        "content": "<p>the lesson here is that <code>private</code> definitions are not an impermeable abstraction layer, if you want to use them to hide the details of a construction. If consistency depends on this (e.g. Dan Licata's trick) then it's not a good plan</p>",
        "id": 130050377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532171775
    },
    {
        "content": "<p>Thanks for the detective work!</p>\n<p>I'm 1/3 of the way through my 100% playthrough of TPIL.</p>",
        "id": 130052500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532175710
    },
    {
        "content": "<p>In the middle of a section inside a namespace, is there a way to declare somme lemma in the root namespace without closing the section, then closing the namespace, then stating the lemma, then opening the namespace again, then opening the section again?</p>",
        "id": 159231449,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550932287
    },
    {
        "content": "<p>No, not unless you declare the lemma using tactics. I want to fix lean so that <code>def _root_.bla</code> works</p>",
        "id": 159232915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550934780
    },
    {
        "content": "<p>OK, that's what I thought but it is good (and sad) to have a confirmation.</p>",
        "id": 159232976,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550934862
    }
]