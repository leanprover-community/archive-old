[
    {
        "content": "<p>I've been thinking about what appropriate concurrency primitives can be used in pure lean. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you see any problems with modeling <code>task</code> in lean (being the same as <code>thunk</code>)? It's not clear why this needs to be <code>meta</code>.</p>\n<p>Another possible concurrency primitive is <code>fork : thunk A -&gt; thunk B -&gt; A x B</code> which runs the two thunks on separate threads and then returns the results. There is an obvious generalization here to <code>peval : list (thunk A) -&gt; list A</code>, not sure if this is better or worse than <code>join</code> as a primitive. I'm not sure how to simulate these forking strategies with <code>task</code>.</p>",
        "id": 124299642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522202084
    },
    {
        "content": "<p>I hoped to get inspiration from ML and Haskell, but ML is too declarative (<code>unit</code> functions everywhere) and Haskell has funny problems with laziness turning the evaluation order inside out. <a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel_haskell2.pdf\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel_haskell2.pdf\">https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel_haskell2.pdf</a></p>",
        "id": 124299700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522202195
    },
    {
        "content": "<p><code>fork f g = let tf = task.delay t in let tg = task.delay g in (tf.get, tg.get)</code>?</p>",
        "id": 124308889,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522222893
    },
    {
        "content": "<p><code>task</code> is perfectly sound, and does not need to be meta.  A possible model for <code>task</code> is <code>id</code>, and you should not be able to observe any differences from <code>id</code> in pure Lean code.</p>",
        "id": 124308940,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223015
    },
    {
        "content": "<p>Or less resource-hungry, <code>fork f g = let tf = task.delay f in let y = g () in (tf.get, y)</code></p>",
        "id": 124308977,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522223044
    },
    {
        "content": "<p>Isn't the evaluation semantics off from <code>id</code> though? You need <code>thunk</code> to avoid evaluating the argument too soon</p>",
        "id": 124309039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223249
    },
    {
        "content": "<p>That's why I said <em>pure</em> Lean code. <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 124309040,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223267
    },
    {
        "content": "<p>Of course, <code>task</code> hides nontermination and C++ exceptions.</p>",
        "id": 124309079,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223291
    },
    {
        "content": "<p>One missing ingredient right now is <code>task.delay_io : {α : Type u} (f : io α) : io (task α)</code></p>",
        "id": 124309080,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522223312
    },
    {
        "content": "<p>Neither can happen in non-<code>meta</code> code though, right?</p>",
        "id": 124309081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223313
    },
    {
        "content": "<p>How is that different from <code>task.delay</code>?</p>",
        "id": 124309083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223333
    },
    {
        "content": "<p>You can have nontermination without meta if you add <code>axiom large_cardinal : 0 = 1</code></p>",
        "id": 124309088,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223354
    },
    {
        "content": "<p>lol that's quite a large cardinal</p>",
        "id": 124309090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223378
    },
    {
        "content": "<p>Okay, I think I fixed the signature</p>",
        "id": 124309139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522223489
    },
    {
        "content": "<p>Right now, there is also the <em>slight</em> performance problem that we serialize the thunk passed to <code>task.delay</code>, and then deserialize it on the thread where it executes.  From the last public state of the Lean 4 design document, this should be solved in Lean 4.</p>",
        "id": 124309140,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223498
    },
    {
        "content": "<p>Well, you can break the VM in many ways using <code>large_cardinal</code>, you don't need <code>task</code></p>",
        "id": 124309143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223514
    },
    {
        "content": "<p>in fact you should be able to get nontermination even without <code>task</code></p>",
        "id": 124309182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223531
    },
    {
        "content": "<blockquote>\n<p>in fact you should be able to get nontermination even without <code>task</code></p>\n</blockquote>\n<p>New results from your master thesis?</p>",
        "id": 124309183,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223564
    },
    {
        "content": "<p>No, maybe it's folklore... But you can just evaluate a false proof of well_founded in the VM</p>",
        "id": 124309188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223606
    },
    {
        "content": "<p>Ok, that's essentially the same thing as <code>large_cardinal</code>, or <code>sorry</code>.</p>",
        "id": 124309192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223640
    },
    {
        "content": "<p>right, that's my point - from a false axiom you can fake a wf definition to cause nontermination</p>",
        "id": 124309232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223679
    },
    {
        "content": "<p>(in the VM, which doesn't do reduction and so doesn't get stuck like <code>#reduce</code> would)</p>",
        "id": 124309236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223706
    },
    {
        "content": "<p>What is the behavior of <code>let f := task.delay f in ()</code>?</p>",
        "id": 124309281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223818
    },
    {
        "content": "<p>Does it just drop the thread?</p>",
        "id": 124309286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223840
    },
    {
        "content": "<p>What if you call <code>task.get</code> twice?</p>",
        "id": 124309287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223866
    },
    {
        "content": "<blockquote>\n<p>What is the behavior of <code>let f := task.delay f in ()</code>?</p>\n</blockquote>\n<p><code>f</code> continues to execute, you can continue printing trace messages, etc., and they will show up.</p>",
        "id": 124309328,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223897
    },
    {
        "content": "<blockquote>\n<p>What if you call <code>task.get</code> twice?</p>\n</blockquote>\n<p>The first time you call <code>task.get</code>, it will wait for the task to finish and return the result.  The second time it will return immediately with the result.  The code in the task is only executed once.</p>",
        "id": 124309339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522223950
    },
    {
        "content": "<p>Ooh, that sounds like memoization</p>",
        "id": 124309340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522223975
    },
    {
        "content": "<p>Maybe <code>memoized</code> is definable after all...</p>",
        "id": 124309383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224015
    },
    {
        "content": "<p>It's what <code>thunk</code> should sound like <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 124309384,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522224026
    },
    {
        "content": "<p>I think Leo said something about explicitly wanting <code>thunk</code> to not be memoized, although I think it's a poor name if that's the intent</p>",
        "id": 124309391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224068
    },
    {
        "content": "<p>It's like memoization except that the code starts running immediately, and on another thread.  C++ code has the ability to create tasks that do not start immediately though (in fact, that's even the default behavior).</p>",
        "id": 124309394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224099
    },
    {
        "content": "<p>Btw, we will most probably move those horrible impure <code>init.util</code> functions into <code>io</code></p>",
        "id": 124309397,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522224113
    },
    {
        "content": "<p>You can create delayed tasks with <code>thunk (task A)</code> I guess</p>",
        "id": 124309438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224154
    },
    {
        "content": "<p>This will create a new task every time you evaluate the thunk, probably not what you want.</p>",
        "id": 124309440,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224175
    },
    {
        "content": "<p>hm... <code>task (task A)</code>? :)</p>",
        "id": 124309446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224195
    },
    {
        "content": "<p>Immediately creates a task on another thread...</p>",
        "id": 124309447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224208
    },
    {
        "content": "<p>but I guess if the real work is in the created task that won't be executed until you <code>flatten</code></p>",
        "id": 124309494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224256
    },
    {
        "content": "<p>If you do <code>task.delay (task.delay ())</code>, you first create task A, which immediately begins executing on thread 2.  This task A then creates task B, which again immediately begins executing <code>()</code> on thread 3.</p>",
        "id": 124309501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224324
    },
    {
        "content": "<p>Oh, I see...</p>",
        "id": 124309545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I really like those non-io functions. As long as they are observationally pure there is no problem</p>",
        "id": 124309595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224486
    },
    {
        "content": "<p>Do you actually use them?</p>",
        "id": 124309596,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224510
    },
    {
        "content": "<p>:)</p>",
        "id": 124309599,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522224515
    },
    {
        "content": "<p>I use <code>timeit</code> and <code>trace</code> all the time</p>",
        "id": 124309603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224528
    },
    {
        "content": "<p>Hmm, good to know I guess</p>",
        "id": 124309614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522224559
    },
    {
        "content": "<p>Actually I've never used <code>io</code> in pure code. It seems like a trap</p>",
        "id": 124309656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224606
    },
    {
        "content": "<p>I just realized that you can't even simulate them via <code>unsafe_perform_io</code>, since that is meta.</p>",
        "id": 124309661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224616
    },
    {
        "content": "<p>Here's another missing <code>task</code> primitive: Run <code>f g : thunk A</code>, and return the first one that finishes</p>",
        "id": 124309718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224733
    },
    {
        "content": "<p>That's nondeterministic and hence unsupported by design.</p>",
        "id": 124309720,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224763
    },
    {
        "content": "<p>The obvious problem is that they might not return the same thing, but <code>cached</code> solves that problem handily</p>",
        "id": 124309721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224770
    },
    {
        "content": "<p>I think it should probably be renamed <code>nondet</code></p>",
        "id": 124309726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522224785
    },
    {
        "content": "<p>Did you see my beautiful typeclass for lifting these functions in the extended monad PR? Fortunately I found a more general monad class that subsumes it <a href=\"https://github.com/Kha/lean/commit/974fee78f75c8861477fba9143a49c8e08101b41#diff-f8e23e5e864df768277396e6f07b2809L67\" target=\"_blank\" title=\"https://github.com/Kha/lean/commit/974fee78f75c8861477fba9143a49c8e08101b41#diff-f8e23e5e864df768277396e6f07b2809L67\">https://github.com/Kha/lean/commit/974fee78f75c8861477fba9143a49c8e08101b41#diff-f8e23e5e864df768277396e6f07b2809L67</a></p>",
        "id": 124309731,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522224818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This does not help you if you want to do printf-style debugging in a pure non-monadic function, right?</p>",
        "id": 124309774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522224893
    },
    {
        "content": "<p>Then you don't need any lifting, no? This is still with the current pure definition instead of in <code>io</code>.</p>",
        "id": 124309824,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522225003
    },
    {
        "content": "<p>Is there a <code>@[noinline]</code> or <code>@[volatile]</code> attribute for these functions?</p>",
        "id": 124309831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225033
    },
    {
        "content": "<p>Right.  You proposed the lifting functions as a replacement for the pure ones, that's what I was responding to.</p>",
        "id": 124309832,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522225035
    },
    {
        "content": "<p>Alternatively, you could accept a proof <code>f () = g ()</code> to eliminate the nondeterminism. This is roughly equivalent to the <code>cached</code> approach without boxing up the result</p>",
        "id": 124309927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225216
    },
    {
        "content": "<p>(This is not an unreasonable constraint, if it's not true you can just quotient the output type to make it true)</p>",
        "id": 124309932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  No, that was intended for correctly lifting \"pure\" scoping functions <code>thunk A -&gt; A</code> into <code>thunk (state S A) -&gt; state S A</code>, etc. But the same approach would be used for lifting <code>io A -&gt; io A</code> scoping functions, yes. The good thing is that with the latter, you can't accidentally forget the lift. Which is the main reason why I think the current definitions are pretty evil.</p>",
        "id": 124309997,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522225420
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 124310047,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522225471
    },
    {
        "content": "<p>I think that using scoping functions to build an <code>io</code> computation is certainly bad practice; the trace output should be expected to be nondeterministic</p>",
        "id": 124310061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225529
    },
    {
        "content": "<p>what is <code>unrun</code>? That seems a bit paradoxical</p>",
        "id": 124310125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225608
    },
    {
        "content": "<p><code>unrun</code> has since been removed :)</p>",
        "id": 124310135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522225635
    },
    {
        "content": "<p>Now that <code>io_interface</code> is gone, is it impossible to non-meta write <code>io</code> programs?</p>",
        "id": 124310247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225838
    },
    {
        "content": "<p><code>io</code> is non-meta now :)</p>",
        "id": 124310250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522225853
    },
    {
        "content": "<p>yeah, but not really, it relies on a meta constant that is not actually meta for some reason</p>",
        "id": 124310258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522225878
    },
    {
        "content": "<p>I think the idea was to not force users to annotate all <code>io</code> functions with <code>meta</code>. You can't prove anything about it, but it's still sound. The replacement for <code>io_interface</code> is <code>monad_io</code>.</p>",
        "id": 124310352,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522226083
    },
    {
        "content": "<p>Oh, I guess the idea is you should replace <code>io_core</code> with your own implementation of <code>monad_io_terminal</code> etc</p>",
        "id": 124310354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226096
    },
    {
        "content": "<p>How do you know it's sound? Writing an implementation is not trivial, I think</p>",
        "id": 124310417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226242
    },
    {
        "content": "<p>in particular there is a constructor that gives unbounded recursion in the monad</p>",
        "id": 124310420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226280
    },
    {
        "content": "<p>Which should be okay as long as there's no eliminator, no?</p>",
        "id": 124310473,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522226362
    },
    {
        "content": "<p>hm, I guess you can do some kind of coinductive trace thing if you don't want to have it be trivial</p>",
        "id": 124310576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226534
    },
    {
        "content": "<p>Oh cool I just noticed we have a random number generator in lean now</p>",
        "id": 124310584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226615
    },
    {
        "content": "<p>For soundness it should be enough to set <code>io_core := λ _ _, unit</code>.</p>",
        "id": 124310627,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522226647
    },
    {
        "content": "<p>is <code>unit</code> a monad in lean?</p>",
        "id": 124310643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226754
    },
    {
        "content": "<p>It's not even a type constructor...?</p>",
        "id": 124310683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522226781
    },
    {
        "content": "<p>or I guess <code>λ _, unit</code></p>",
        "id": 124310685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226798
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/leanprover/lean/blob/efa9d7e110ff6389e8863551a4882c84dbcf8236/tests/lean/run/rebind_bind.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/efa9d7e110ff6389e8863551a4882c84dbcf8236/tests/lean/run/rebind_bind.lean\">https://github.com/leanprover/lean/blob/efa9d7e110ff6389e8863551a4882c84dbcf8236/tests/lean/run/rebind_bind.lean</a></p>",
        "id": 124310692,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522226836
    },
    {
        "content": "<p>interesting. You are using <code>do</code> notation with something that's not <code>monad.bind</code>?</p>",
        "id": 124310741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522226928
    },
    {
        "content": "<p>Yep, that's the main purpose of the test</p>",
        "id": 124310749,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522226948
    },
    {
        "content": "<p><code>mono_monad</code>? Reminds me of <a href=\"https://www.youtube.com/watch?v=8N_tupPBtWQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=8N_tupPBtWQ\">https://www.youtube.com/watch?v=8N_tupPBtWQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8N_tupPBtWQ\" href=\"https://www.youtube.com/watch?v=8N_tupPBtWQ\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=8N_tupPBtWQ\"><img src=\"https://i.ytimg.com/vi/8N_tupPBtWQ/default.jpg\"></a></div>",
        "id": 124313219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522232402
    },
    {
        "content": "<p>Check it out:</p>\n<div class=\"codehilite\"><pre><span></span>meta def list.par_map {α β} (f : α → β) (l : list α) : list β :=\nlet fs := l.map (λ a, task.delay (λ _, f a)) in\nfs.map task.get\n\n#eval timeit &quot;&quot; ((list.range&#39; 50000 10).map (λ n, (eratosthenes n).length))\n-- 6.87s\n#eval timeit &quot;&quot; ((list.range&#39; 50000 10).par_map (λ n, (eratosthenes n).length))\n-- 2.78s\n</pre></div>",
        "id": 124402303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522393543
    },
    {
        "content": "<p>too bad it has to be <code>meta</code></p>",
        "id": 124402344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522393569
    },
    {
        "content": "<p>impressive! What keeps it in <code>meta</code>?</p>",
        "id": 124411857,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522414296
    }
]