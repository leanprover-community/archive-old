[
    {
        "content": "<p>I have written a tactic that examines the goal and then calls the apply tactic with different rules depending on the form of the goal.  To write that tactic, I had to learn this pattern, which I copied from another tactic:<br>\n    do r &lt;- tactic.mk_mapp ..., tactic.apply r<br>\nNow I want to do something similar, but with rw instead of apply.  Is there a similar pattern to construct the argument to pass to <a href=\"http://tactic.interactive.rw\">tactic.interactive.rw</a>?<br>\nMore generally, if I know what I would type when writing a proof in tactic mode to execute some tactic, is there a way to figure out how to invoke that tactic from another tactic?</p>",
        "id": 264220910,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1638997883
    },
    {
        "content": "<p>There are a few options, depending on what you're trying to do. Are the <code>rw</code> calls always the same for a particular shape of the goal? Or are there parameters in the goal that need to be inserted into the <code>rw</code> call? If the former, you can \"quote\" the interactive rewrite that you want to do. <code> `[rw [add.comm, add.assoc]] </code> has type <code>tactic unit</code>.</p>",
        "id": 264223605,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999130
    },
    {
        "content": "<p>In general, any tactic-mode proof can be inserted into <code> `[ ... ]</code>. But if you wanted to e.g. change the <code>rw</code> lemmas depending on some input to your tactic, this won't work easily.</p>",
        "id": 264223797,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999216
    },
    {
        "content": "<p>Yes, there are parameters that I want to insert.</p>",
        "id": 264223800,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1638999216
    },
    {
        "content": "<p>Then you'll have to choose between figuring out the parameters to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.rw\">docs#tactic.interactive.rw</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rewrite_target\">docs#tactic.rewrite_target</a> . The latter is simpler, but you need to give it a fully elaborated expression (like you did for <code>apply</code>) instead of just the name of a lemma.</p>",
        "id": 264224037,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999320
    },
    {
        "content": "<p>For the former: at the second argument (the location thingy) it suffices to put <code>(interactive.loc.ns [none])</code> which says \"do this rewrite on the goal\"</p>",
        "id": 264224229,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999387
    },
    {
        "content": "<p>In the first argument you need to give it <code>{rules := [], end_pos := none}</code> where the <code>rules</code> field is a list of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.rw_rule\">docs#tactic.interactive.rw_rule</a></p>",
        "id": 264224427,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999481
    },
    {
        "content": "<p>The <code>pos</code> field there is (I think) for error reporting. You can give it junk values but you might get oddly placed error messages.</p>",
        "id": 264224588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999539
    },
    {
        "content": "<p>OK, thanks.</p>",
        "id": 264224736,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1638999604
    },
    {
        "content": "<p>The general pattern here is that when an interactive tactic takes an argument of type <code>parse t</code>, <code>t</code> will have type <code>parser T</code>, and you can call the tactic directly by replacing that argument with a term of type <code>T</code>.</p>",
        "id": 264224798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638999653
    },
    {
        "content": "<p>Often looking at the implementation of the interactive tactic you will see that it just does some argument parsing and then calls a non-interactive tactic, and this can be a good way to learn how to invoke the non-interactive version.</p>",
        "id": 264271993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1639040336
    }
]