[
    {
        "content": "<p>I would like to have a tactic argument which could a bool (or perhaps a <code>true</code> or <code>false</code>), or a <code>nat</code>. Can someone show me how to construct the appropriate parser?</p>",
        "id": 193656422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586605904
    },
    {
        "content": "<p>doesn’t <code>iterate</code> parse a (small) nat</p>",
        "id": 193656557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586606070
    },
    {
        "content": "<p>You could parse an expression and match against the result</p>",
        "id": 193656567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586606101
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bool_or_nat</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"err\">⊕</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">small_nat</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">texpr</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">of_tactic</span> <span class=\"err\">$</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">eval_expr</span> <span class=\"n\">bool</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 193656676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606266
    },
    {
        "content": "<p>is my attempt so far</p>",
        "id": 193656679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606269
    },
    {
        "content": "<p>but I get <code>VM does not have code for 'bool.tt'</code></p>",
        "id": 193656720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606287
    },
    {
        "content": "<p>(when I try to actually use it; compiles fine)</p>",
        "id": 193656724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606298
    },
    {
        "content": "<p><code>eval_expr'</code></p>",
        "id": 193656868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586606520
    },
    {
        "content": "<p>also <code>of_tactic'</code></p>",
        "id": 193656915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586606552
    },
    {
        "content": "<p>Can't find <code>of_tactic'</code></p>",
        "id": 193657080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606778
    },
    {
        "content": "<p>But it looks like it's not needed.</p>",
        "id": 193657093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606811
    },
    {
        "content": "<p>Perhaps that's been patched in core already.</p>",
        "id": 193657095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606818
    },
    {
        "content": "<p><code>eval_expr'</code> does the trick... :-(</p>",
        "id": 193657098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606824
    },
    {
        "content": "<p>Hmm.. and what if I want to all <code>true</code>?</p>",
        "id": 193657119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606876
    },
    {
        "content": "<p>(I'm trying to allow something close to <code>set_option pp.all true</code> inside a tactic block.)</p>",
        "id": 193657160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606896
    },
    {
        "content": "<p>For parsing a <code>bool</code>, it's starting to look pretty complicated. Why not just do <code>tt &lt;$ tk \"tt\" &lt;|&gt; ff &lt;$ tk \"ff\"</code>?</p>",
        "id": 193657355,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586607236
    },
    {
        "content": "<p>because <code>tk</code> only works on keywords</p>",
        "id": 193657407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586607277
    },
    {
        "content": "<p>and if you declare <code>tt</code> as a keyword then it won't work as the actual expression</p>",
        "id": 193657426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586607325
    },
    {
        "content": "<p>If you parse an expression, use <code>to_expr `(%%e: bool)</code> and then evaluate it, then this will also work on boolean expressions as well as <code>true</code> and <code>false</code> which will be interpreted via <code>to_bool</code></p>",
        "id": 193657537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586607487
    },
    {
        "content": "<p>If you want a more syntactic interpretation, you can pattern match the pre-expression you get from <code>texpr</code> and just see if it is the constants <code>tt</code>, <code>true</code>, <code>ff</code> or <code>false</code> (or numerals) and dispatch accordingly</p>",
        "id": 193657563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586607588
    },
    {
        "content": "<p>I do something like this for being able to recognize the non-keyword <code>SOP</code> in <code>ring</code></p>",
        "id": 193657618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586607626
    },
    {
        "content": "<p>That's disappointing. parsing an expressing seems overkill and if you have to parse something after the bool and that it could be read as an expression, it will just mix up the parser</p>",
        "id": 193657903,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586608075
    },
    {
        "content": "<p>In fact, the most disappointing thing is that you can't have an interactive tactic called <code>set_option</code> anyway.</p>",
        "id": 193657948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586608111
    },
    {
        "content": "<p>So this is all a moot point, I think. :-)</p>",
        "id": 193657957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586608123
    },
    {
        "content": "<p>That could be an argument for having a <code>bool</code> parser like <code>small_nat</code></p>",
        "id": 193657967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586608144
    },
    {
        "content": "<p>What about using the <code>ident</code> parser?</p>",
        "id": 193657975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608164
    },
    {
        "content": "<p>that won't read any more than it has to</p>",
        "id": 193657990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608184
    },
    {
        "content": "<p>Actually I think this is the right answer, since <code>true</code> and <code>false</code> are definitely treated as identifiers by the lean parser</p>",
        "id": 193658065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608275
    },
    {
        "content": "<p>about <code>pp.all</code>, try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">set_pp_all</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"n\">opt</span> <span class=\"err\">←</span> <span class=\"n\">get_options</span><span class=\"o\">,</span>\n<span class=\"n\">set_options</span> <span class=\"o\">(</span><span class=\"n\">opt</span><span class=\"bp\">.</span><span class=\"n\">set_bool</span> <span class=\"bp\">`</span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">set_pp_all</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193658146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586608353
    },
    {
        "content": "<p>You can't use <code>set_option</code> because that's a command keyword, but you could use any variation on that like <code>set_opt</code> or <code>option</code></p>",
        "id": 193658257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608530
    },
    {
        "content": "<p><code>let_option</code></p>",
        "id": 193658269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586608553
    },
    {
        "content": "<p>or even better, <code>with_option { tac }</code></p>",
        "id": 193658310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608563
    },
    {
        "content": "<p>Alternatively, you could just declare every option name as an interactive tactic so that <code>pp.all true</code> is a tactic</p>",
        "id": 193658358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608648
    },
    {
        "content": "<p>strangely enough, I don't think there are any conflicts that arise this way</p>",
        "id": 193658408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608709
    },
    {
        "content": "<p>You can even generate them with metaprogramming so that boolean options parse a boolean and numeric options parse a nat</p>",
        "id": 193658448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586608800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193658310\" title=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193658310\">said</a>:</p>\n<blockquote>\n<p>or even better, <code>with_option { tac }</code></p>\n</blockquote>\n<p>Perhaps whether one wants this scoped syntax depends on whether the <code>set_option</code> tactic is intended to remain in the final version of the proof. For <code>pp</code> options it would probably just be annoying to have to use <code>{}</code> most of the time (if you really want to scope the option, then you can probably achieve it with <code>{}</code> anyways).</p>",
        "id": 193658567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586608936
    },
    {
        "content": "<p>another benefit of having options-as-tactics is that you can copy the docstring of the option to the tactic so that you get a nice hover, while <code>set_opt pp.all true</code> wouldn't be able to provide that</p>",
        "id": 193658732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586609169
    },
    {
        "content": "<p>If you write <code>pp.all</code> in an interactive tactic does it mean <code>tactic.interactive.pp.all</code>?</p>",
        "id": 193658749,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586609227
    },
    {
        "content": "<p>pretty sure</p>",
        "id": 193658757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586609253
    },
    {
        "content": "<p>confirmed, it works just like other interactive tactics</p>",
        "id": 193658815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586609306
    },
    {
        "content": "<p>Maybe something like <code>pretty_print all</code> would be more in line with the kind of naming conventions that we follow</p>",
        "id": 193659084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586609655
    },
    {
        "content": "<p>I think it would be better to stick to the naming convention used by options so that people don't have to learn both</p>",
        "id": 193659344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586610061
    },
    {
        "content": "<p>I thought there was an API for querying the list of all options, but I can't find one. <code>options.fold</code> only gives you the options that have been set on the current object</p>",
        "id": 193659440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586610187
    },
    {
        "content": "<p>there is also no way to ask what type an option has, you just use <code>get_string</code> or <code>get_nat</code> and hope you got it right</p>",
        "id": 193659469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586610215
    },
    {
        "content": "<p>In the absence of an API for this, we can still just make a list of options and their types. Here's a plausible metaprogram for building these option tactics:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pbool</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failure</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">set_option_bool</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pbool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">opt</span> <span class=\"err\">←</span> <span class=\"n\">get_options</span><span class=\"o\">,</span> <span class=\"n\">set_options</span> <span class=\"o\">(</span><span class=\"n\">opt</span><span class=\"bp\">.</span><span class=\"n\">set_bool</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">set_option_bool</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">tt</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">defn</span>\n    <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">reducibility_hints</span><span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"mi\">1</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ⊢ 0 = 1</span>\n  <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ @eq.{1} nat (@has_zero.zero.{0} nat nat.has_zero) (@has_one.one.{0} nat nat.has_one)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193660178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586611100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193659440\" title=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193659440\">said</a>:</p>\n<blockquote>\n<p>I thought there was an API for querying the list of all options, but I can't find one. <code>options.fold</code> only gives you the options that have been set on the current object</p>\n</blockquote>\n<p>Do you mean <code>#help options</code>?</p>",
        "id": 193660197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586611167
    },
    {
        "content": "<p>yes, but via tactics</p>",
        "id": 193660203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586611178
    },
    {
        "content": "<p>In fact, everything you can get to via <code>#help</code> should be available to tactics</p>",
        "id": 193660260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586611223
    },
    {
        "content": "<p>In fact, <code>#help</code> should be a user command</p>",
        "id": 193660268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586611233
    },
    {
        "content": "<p>Another possible tactic name is <code>set_option.pp.all</code>; this does not run afoul of the command keyword and puts all the option tactics in one namespace</p>",
        "id": 193660529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586611594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193659440\" title=\"#narrow/stream/113488-general/topic/parsing.20a.20bool/near/193659440\">said</a>:</p>\n<blockquote>\n<p>I thought there was an API for querying the list of all options, but I can't find one. <code>options.fold</code> only gives you the options that have been set on the current object</p>\n</blockquote>\n<p>But we could add one.</p>",
        "id": 193660926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586612234
    },
    {
        "content": "<p>Although at that point maybe it makes more sense to just add a new core tactic</p>",
        "id": 193660933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586612264
    },
    {
        "content": "<p>to achieve the originally desired result, I mean</p>",
        "id": 193660937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586612280
    },
    {
        "content": "<p>a new core tactic for what? your two proposals sound the same</p>",
        "id": 193661016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586612388
    },
    {
        "content": "<p>A <code>set_option</code> tactic</p>",
        "id": 193661979,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586613732
    },
    {
        "content": "<p>Versus a method that just returns the list of all options and their arguments</p>",
        "id": 193661984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586613756
    },
    {
        "content": "<p>there is already a <code>set_option</code> tactic</p>",
        "id": 193662087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586613905
    },
    {
        "content": "<p>I used it above</p>",
        "id": 193662106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586613936
    },
    {
        "content": "<p>in order to implement the metaprogram though, I need to be able to list all options a la <code>#help options</code>. From there we can create tactics that use <code>set_options</code> to set any individual option as desired</p>",
        "id": 193662188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586614045
    },
    {
        "content": "<p>oh okay, I guess I don't understand what I meant either, then</p>",
        "id": 193662504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586614519
    }
]