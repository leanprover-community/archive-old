[
    {
        "content": "<p>Hi, Could anyone explain why 5.5 has type nat?<br>\n#check 5.5</p>\n<blockquote>\n<p>11 / 2 : ℕ</p>\n</blockquote>",
        "id": 243180256,
        "sender_full_name": "Danil Berestov",
        "timestamp": 1624032185
    },
    {
        "content": "<p>Hi! I believe it is simply because numbers are interpreted as naturals by default, e.g. <code>#check -10</code> causes an error because there is no <code>-</code> operator on <code>ℕ</code>. If you want e.g. the rational number, you can write <code>(5.5 : ℚ)</code>.</p>\n<p>(Thank you for moving your post to a new thread!)</p>",
        "id": 243180739,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624032426
    },
    {
        "content": "<p>thanks</p>",
        "id": 243181006,
        "sender_full_name": "Danil Berestov",
        "timestamp": 1624032573
    },
    {
        "content": "<p>My understanding is that since finite decimal representations are rational, Lean writes them as <code>m / n</code> where <code>m</code> and <code>n</code> are given in terms of the <code>bit0</code> and <code>bit1</code> definitions, which only depend on <code>has_add</code> and <code>has_one</code>.  Then there's some defaulting mechanism where Lean will assume you meant natural numbers if the type is otherwise unspecified.</p>\n<p>You can see the representation like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_div.div</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">has_one.one</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">has_one.one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n</code></pre></div>\n<p>The <code>has_div</code> instance for natural numbers is floor division:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 243182171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624033248
    }
]