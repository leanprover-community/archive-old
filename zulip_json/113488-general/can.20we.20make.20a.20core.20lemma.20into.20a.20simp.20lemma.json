[
    {
        "content": "<p><code>nat.sub_self</code> is in core. I think it should be a simp lemma. Can we add such an attribute post-hoc in a mathlib file?</p>",
        "id": 131041229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533645106
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span>\n</pre></div>",
        "id": 131041281,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533645156
    },
    {
        "content": "<p>or <code>local attribute [simp] nat.sub_self</code> if you're scared that making it a simp lemma more globally will cause other problems. I see that the additive group version <code>sub_self</code> isn't a simp lemma either. This might be something to do with subtraction being involved. I think <code>a - b = a + (-b)</code> is a <code>simp</code> lemma and because of this <code>simp</code> might change your <code>a - a</code> to <code>a + (-a)</code> before it notices your attribute.</p>\n<p>We were talking about a related thing a day or two ago, where <code>simp</code> just failed to simplify quite a complicated thing because it couldn't manage <code>a + (b + -a) = b</code>.</p>",
        "id": 131041567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533645552
    },
    {
        "content": "<p>Right. But I think whenever <code>n : nat</code> and you encounter <code>(n - n)</code> somewhere in your goal, there should be no harm at all if you replace it with <code>0 : nat</code>...</p>",
        "id": 131041932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533645935
    },
    {
        "content": "<p>Maybe I just don't understand <code>simp</code>.</p>",
        "id": 131041935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533645943
    },
    {
        "content": "<p><code>nat.sub_self</code> should be a simp lemma. We can add it to <code>data.nat.basic</code>. As I've mentioned, <code>sub_self</code> will never trigger as a simp lemma</p>",
        "id": 131041937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533645949
    },
    {
        "content": "<p>Right... because \"group vs semigroup\" ?</p>",
        "id": 131042034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533646066
    },
    {
        "content": "<p><code>nat.sub</code> is not the same as the one defined for additive groups</p>",
        "id": 131042055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533646082
    },
    {
        "content": "<p>the sub-unfolding simp lemma only applies to the additive group sub</p>",
        "id": 131042090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533646106
    },
    {
        "content": "<p>of course <code>n + -n</code> doesn't even make sense over nat</p>",
        "id": 131042093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533646122
    },
    {
        "content": "<p>Aah very nice :-) Is there any way of telling <code>simp</code> to try <code>sub_self</code> before trying the dreaded <code>sub_eq_add_neg</code>?</p>",
        "id": 131042688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533646909
    }
]