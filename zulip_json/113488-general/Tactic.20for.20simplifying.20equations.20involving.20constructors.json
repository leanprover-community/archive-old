[
    {
        "content": "<p>I'm currently working on a reimplementation of <code>induction</code> in Lean with some additional features. As part of the implementation, I'll need a tactic that simplifies equations involving constructors of inductive types. For instance:</p>\n<ul>\n<li>For <code>h : x = y</code> where <code>x</code> and <code>y</code> are defeq: clear <code>h</code>.</li>\n<li>For <code>h : x = y</code> where <code>x</code> is a variable: substitute <code>h</code> (and similar when <code>y</code> is a variable).</li>\n<li>For <code>h : C x1 ... xn = C y1 ... yn</code> where <code>C</code> is a constructor: apply injectivity of <code>C</code>.</li>\n<li>For <code>h : C ... = D ...</code> where <code>C</code> and <code>D</code> are different constructors: apply no-confusion.</li>\n<li>For <code>h : x == y</code> where the types of <code>x</code> and <code>y</code> are defeq: conclude <code>x = y</code>.</li>\n</ul>\n<p>Is there already something like this? (This could also be interesting for the <a href=\"#narrow/stream/113488-general/topic/dcongr\">dependent <code>congr</code> discussion</a>.)</p>",
        "id": 197472411,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589401428
    },
    {
        "content": "<p><code>cases</code></p>",
        "id": 197472985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589401644
    },
    {
        "content": "<p>Sure. I'll have to check what exactly <code>cases</code> does in each of these cases. But I probably can't blindly <code>cases</code> on just any equation, right?</p>",
        "id": 197473771,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589401954
    },
    {
        "content": "<p>it pretty much does all 5 of your requirements</p>",
        "id": 197474338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589402234
    },
    {
        "content": "<p><code>cases</code> indeed does most of these things</p>",
        "id": 197474354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589402244
    },
    {
        "content": "<p>Okay nice, then I'll just have to scan for hypotheses of these forms. This may be easier than anticipated. Thanks!</p>",
        "id": 197475213,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589402660
    }
]