[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bigly_equal</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">ab</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">bc</span><span class=\"o\">]</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn1</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hn2</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">something</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"err\">$</span> <span class=\"n\">bigly_equal</span> <span class=\"n\">β</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">something</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">something</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi1</span> <span class=\"n\">hi2</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">hi1</span><span class=\"o\">)</span> <span class=\"n\">hi2</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₃&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"err\">$</span>\n    <span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">_+_+_</span> <span class=\"bp\">=</span> <span class=\"bp\">_+</span><span class=\"o\">(</span><span class=\"bp\">_+_</span><span class=\"o\">)}</span> <span class=\"err\">∈</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 158712925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550352251
    },
    {
        "content": "<p>might this be useful / worth it to add to mathlib?</p>",
        "id": 158712931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550352264
    },
    {
        "content": "<p>(credits for parts of the code go to <span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span>)</p>",
        "id": 158712933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550352278
    },
    {
        "content": "<p>Oh, is that useful on its own accord (besides just for defining the hyperreals)?</p>",
        "id": 158713622,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1550353397
    },
    {
        "content": "<p>yes, it's the ultraproduct in model theory</p>",
        "id": 158713631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353424
    },
    {
        "content": "<p>Btw, I thought you didn't like tactics.</p>",
        "id": 158713680,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1550353448
    },
    {
        "content": "<p>Can one formalise Los' theorem in Lean? It says something like a first order statement that's true in the factors is true in the ultraproduct</p>",
        "id": 158713690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353483
    },
    {
        "content": "<p>Maybe it says something stronger -- maybe something is true in the ultraproduct iff it's true in a \"big\" set of the factors. The problem is that IIRC it's only true for certain kinds of statements.</p>",
        "id": 158713705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353528
    },
    {
        "content": "<p>who said I didn't like tactic?</p>",
        "id": 158713758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that would require... formalizing first order statements</p>",
        "id": 158713761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353592
    },
    {
        "content": "<p>I love <code>filter_upwards</code> btw, shoutout to <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 158713771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353634
    },
    {
        "content": "<p>Oh here we go -- <a href=\"https://en.wikipedia.org/wiki/Ultraproduct#.C5.81o.C5.9B.27_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Ultraproduct#.C5.81o.C5.9B.27_theorem\">https://en.wikipedia.org/wiki/Ultraproduct#.C5.81o.C5.9B.27_theorem</a>, it's mentioned in the wikipedia page on ultraproducts. Yeah, something's true in the ultraproduct iff it's true in a big set of factors.</p>",
        "id": 158713819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353697
    },
    {
        "content": "<p>Oh that's interesting, it mentions the \"transfer principle\" <a href=\"https://en.wikipedia.org/wiki/Transfer_principle\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Transfer_principle\">https://en.wikipedia.org/wiki/Transfer_principle</a> . Is this related to rewriting isomorphisms of rings?</p>",
        "id": 158713846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550353797
    },
    {
        "content": "<blockquote>\n<p>One of the first examples was the Lefschetz principle, which states that any sentence in the first-order language of fields that is true for the complex numbers is also true for any algebraically closed field of characteristic 0.</p>\n</blockquote>",
        "id": 158713925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353867
    },
    {
        "content": "<p>i.e. no</p>",
        "id": 158713927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550353868
    },
    {
        "content": "<p>But we have this issue in Lean that any \"reasonable mathematical statement\" about rings is true for R iff it's true for any ring isomorphic to R, and the problem with formalising this is that the computer scientists can't seem to formalise the notion of \"reasonable mathematical statement\". E.g. the predicate \"I am equal to R\" is not such a statement.</p>",
        "id": 158714075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550354145
    },
    {
        "content": "<p>So the underlying issue is the same -- we want to move statements from one structure to another but we can only move certain statements.</p>",
        "id": 158714129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550354173
    },
    {
        "content": "<p>If I define cycle shape on finite permutations as a <code>multiset nat</code>, computably over an arbitrary fintype without a linear order assumption, is it \"obvious\" that conjugate permutations have the same cycle type, since conjugation is an isomorphism?</p>",
        "id": 158715384,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550356356
    },
    {
        "content": "<p>This is in the wrong thread. If you know that the map from permutations to cycle shapes factors through partitions (via the map sending a permutation to its orbits) and if you know that isomorphic partitions have the same cycle shape then it follows, because the conjugating element h maps orbits for g to orbits for hgh^-1</p>",
        "id": 158719293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550363722
    },
    {
        "content": "<p>I know the proof, but does it count as obvious?</p>",
        "id": 158720392,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550365697
    },
    {
        "content": "<p>This is in the wrong thread. Can you fix it? One could imagine the category of pairs consisting of a finite set and a partition of that set into non-empty subsets. One would have to say what the morphisms were. One could say they were isomorphisms. Your construction of a multiset of nats is mathematically sensible, a notion which I do not know how to define in Lean. Because it is mathematically sensible it is constant on isomorphism classes. This is obvious to me but apparently not to Lean.</p>",
        "id": 158734544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550392880
    },
    {
        "content": "<p>It's a transfer problem. At the minute we have to prove these ourselves</p>",
        "id": 158734548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550392902
    },
    {
        "content": "<p>Maybe this isn't in the wrong thread after all</p>",
        "id": 158734554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550392921
    },
    {
        "content": "<p>Abhi's original motivation for hyperreals was that they might give another approach to calculus, but if for every single first order lemma he has to explicitly prove that it's true in the reals iff it's true in the hyperreals then it will be slow going</p>",
        "id": 158735543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550394820
    },
    {
        "content": "<p>One has to be really careful here. For example the hyperreals will be a ring so Lean will have access to a map from the integers into that ring, but you're not allowed to use that map in your theorems because it can't be made from the first order theory of reals alone</p>",
        "id": 158735671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550395044
    },
    {
        "content": "<p>So you can't ask the question \"does there exist something bigger than every nat?\" which is true in one and false in the other</p>",
        "id": 158735719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550395105
    },
    {
        "content": "<p>so my point stands, one would need to formalize first order logic</p>",
        "id": 158735789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550395234
    },
    {
        "content": "<p>Right</p>",
        "id": 158735986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550395660
    },
    {
        "content": "<p>It's a special case of the notion of being mathematically sensible</p>",
        "id": 158735993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550395680
    },
    {
        "content": "<p>If <code>f</code> is the neighbourhood filter at a point <code>x</code>in a topological space, then the equivalence classes would normally be called germs at <code>x</code>.  If <code>f</code> is an ultrafilter then you can think of the equivalence classes as germs at a point in the Stone-Cech compactification.  So I would suggest naming things in a way that is compatible with that.  Also, I think it would be better to do a dependent version with <code>β : α → Type</code> rather than <code>β : Type</code>.</p>",
        "id": 158741509,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550405830
    },
    {
        "content": "<p>Los' theorem is a (relatively low-priority) item on the Flypitch to-do list. It would be nice to have the hyperreals as a setting for nonstandard analysis in Lean.</p>\n<p>There is a related statement for collapsing Boolean-valued models to 2-valued ones, but we won't need it.</p>\n<p>This is related to a transfer principle in the sense that if the ultraproduct is an ultrapower, then the diagonal embedding is elementary and first-order statements can be transferred.</p>\n<p>@Kenny Lau, I think proving Los' theorem would be a pleasant exercise in using Flypitch's FOL library, so feel free to PR it :^)</p>",
        "id": 158747404,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1550417344
    }
]