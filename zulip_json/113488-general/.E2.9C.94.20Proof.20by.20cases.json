[
    {
        "content": "<p>I have a proof <code>q:∀ n:ℕ,n≠2→ℕ</code> and a proof <code>q:∀ n:ℕ,n=2→ℕ</code> and I'd like a proof <code>f:∀ n:ℕ,ℕ</code>.  So essentially what I want to do is a proof by cases.  I can think up some ways to do this but they are all pretty convoluted.  Is there an idiomatic way to do a proof by cases where the cases do not neatly line up with the inductive definition?</p>",
        "id": 256300721,
        "sender_full_name": "É Olive",
        "timestamp": 1633460619
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a></p>",
        "id": 256301333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633460855
    },
    {
        "content": "<p>Brilliant.  I must really suck at searching the docs.</p>",
        "id": 256301445,
        "sender_full_name": "É Olive",
        "timestamp": 1633460893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448275\">É Olive</span> has marked this topic as resolved.</p>",
        "id": 256301451,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633460897
    },
    {
        "content": "<p>Depending on  your context, you might need to use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> tactic, or add <code>open_locale classical</code> somewhere early in your file.</p>",
        "id": 256301510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633460924
    },
    {
        "content": "<p><code>q:∀ n:ℕ,n≠2→ℕ</code> is not a proof, it's a function</p>",
        "id": 256302000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633461129
    },
    {
        "content": "<p>What's the difference between a proof and a function?</p>",
        "id": 256302144,
        "sender_full_name": "É Olive",
        "timestamp": 1633461183
    },
    {
        "content": "<p>If you haven't met <code>by_cases</code> then maybe you want to follow the tutorial project</p>",
        "id": 256302178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633461201
    },
    {
        "content": "<p>In your example <code>q</code> is a function on natural numbers that are different from 2</p>",
        "id": 256302250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633461233
    },
    {
        "content": "<p>I probably have met <code>by_cases</code> before.  If not in the tutorial then in the natural numbers game.  I just didn't retain it.</p>",
        "id": 256302674,
        "sender_full_name": "É Olive",
        "timestamp": 1633461379
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"448275\">@É Olive</span> , I misread your question (I thought you were indeed looking for a proof by cases).</p>",
        "id": 256302745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633461410
    },
    {
        "content": "<p>I am.  the <code>by_cases</code> is exactly what I wanted, thank you.</p>",
        "id": 256302850,
        "sender_full_name": "É Olive",
        "timestamp": 1633461457
    },
    {
        "content": "<p>Where did you meet that <code>q:∀ n:ℕ,n≠2→ℕ</code>?</p>",
        "id": 256303880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633461875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">q</span><span class=\"o\">:</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">2</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">:=</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 256304524,
        "sender_full_name": "É Olive",
        "timestamp": 1633462147
    },
    {
        "content": "<p>But this is clearly a function, right?</p>",
        "id": 256305102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633462371
    },
    {
        "content": "<p>Why do you call this a lemma?</p>",
        "id": 256305117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633462379
    },
    {
        "content": "<p>How would you write it on paper?</p>",
        "id": 256305135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633462387
    },
    {
        "content": "<p>Yeah it's a function of course.  If I were writing this on paper I'd probably write something similar there's not a whole lot here that isn't directly lifted from mathematics, other than maybe <code>:=</code>.</p>",
        "id": 256305434,
        "sender_full_name": "É Olive",
        "timestamp": 1633462521
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">≠</span><span class=\"mi\">2</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 256342906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633482180
    }
]