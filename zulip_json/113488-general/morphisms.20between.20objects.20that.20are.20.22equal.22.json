[
    {
        "content": "<p>I'm looking at complexes again... and I'm hitting the old problem with defeq issues on <code>int</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">graded_object</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graded_object_with_shift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"c1\">-- this should just be 0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">skeletal</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"err\">⟶</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span><span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">boundary</span> <span class=\"n\">n</span> <span class=\"err\">≫</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"n\">n</span> <span class=\"err\">⟶</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- aahrg :scream:</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205089684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836525
    },
    {
        "content": "<p>Because of the way <code>nat.sub</code> is defined, <code>n+1-1</code> is not defeq to <code>n</code>. And hence we are in trouble.</p>",
        "id": 205089758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836578
    },
    {
        "content": "<p>What is the correct way forward?</p>",
        "id": 205089792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836621
    },
    {
        "content": "<p>If you want to play with this, I suggest <code>leanproject get -b mathlib:sset</code> and then look at <code>topology/simplicial/simplicial_complex</code></p>",
        "id": 205089843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836680
    },
    {
        "content": "<p>Of course I can <code>congr</code> my way through, but that generated ugly inductions on equality, and I thought those were really evil in category theory.</p>",
        "id": 205089903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think?</p>",
        "id": 205089913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836727
    },
    {
        "content": "<p>Maybe <code>graded_object</code> should be defined as functors from <code>discrete \\b</code> to <code>C</code>?</p>",
        "id": 205090085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836848
    },
    {
        "content": "<p>That way, I could do <code>graded_object.map</code> and reduce this to a morphism in the discrete category.</p>",
        "id": 205090117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836877
    },
    {
        "content": "<p>Over there, <code>eq.rec</code> is less of a problem, I guess.</p>",
        "id": 205090133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836888
    },
    {
        "content": "<p>How is <code>graded_object</code> defined now?</p>",
        "id": 205090261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595836952
    },
    {
        "content": "<p>Functions</p>",
        "id": 205090270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836962
    },
    {
        "content": "<p>what's wrong with just composing with an <code>eq_to_hom</code>?</p>",
        "id": 205090314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595836989
    },
    {
        "content": "<p>Let me try</p>",
        "id": 205090326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595836999
    },
    {
        "content": "<p>I think <code>eq_to_hom</code> is as much of a solution as we have for this.</p>",
        "id": 205090369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837035
    },
    {
        "content": "<p>Ok, so it doesn't matter that I'm proving an equality of types afterwards?</p>",
        "id": 205090419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837060
    },
    {
        "content": "<p>I'll try this, let's hope for the best (-;</p>",
        "id": 205090425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837069
    },
    {
        "content": "<p>In some branch (...?) I also introduced some <code>congr_eq_to_hom</code> (I forget the name exactly), which addressed this..</p>",
        "id": 205090427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837073
    },
    {
        "content": "<p>If <code>f : J \\to C</code>, <code>j j' : J</code>, <code>h : j = j'</code> then I defined <code>congr_eq_to_hom f h : f j \\hom f j'</code>.</p>",
        "id": 205090470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837141
    },
    {
        "content": "<p>But somehow the point was that if you didn't unfold it, you never had an equation in Type (or <code>C</code>), but only in the index category, and once you reached the end of things they would all resolve away.</p>",
        "id": 205090535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837192
    },
    {
        "content": "<p>Let me see what I can find. I can't even place the context right now.</p>",
        "id": 205090544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837205
    },
    {
        "content": "<p>Sorry, not finding it right away.</p>",
        "id": 205090863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595837536
    },
    {
        "content": "<p>This is a really crappy problem, and it's not really going away I fear.</p>",
        "id": 205091222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 205091237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837954
    },
    {
        "content": "<p>That's my next goal</p>",
        "id": 205091240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837958
    },
    {
        "content": "<p>And of course the definition doesn't reduce nicely, because <code>↑n + 1 + 1 + -1</code> doesn't simplify</p>",
        "id": 205091266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595837988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm inclined to redefine <code>nat.sub</code>... but that's just going to shift the problem, right?</p>",
        "id": 205093105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839678
    },
    {
        "content": "<p>What is the \"official\" solution?</p>",
        "id": 205093145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839685
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails :sad:</span>\n</code></pre></div>",
        "id": 205093182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839736
    },
    {
        "content": "<p>you need an <code>eq_to_hom</code> definition for <code>M.graded_object_d</code></p>",
        "id": 205093206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839768
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">graded_object</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graded_object_with_shift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"c1\">-- this should just be 0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">skeletal</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"err\">⟶</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span><span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">boundary</span> <span class=\"n\">n</span> <span class=\"err\">≫</span>\n               <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">graded_object_d_squared</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span><span class=\"err\">⟦</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"err\">⟧&#39;</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span><span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧&#39;⟦</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"err\">⟧&#39;</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>         <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>          <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>    <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">shift</span><span class=\"o\">,</span> <span class=\"n\">has_shift</span><span class=\"bp\">.</span><span class=\"n\">shift</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- have aux : ∀ i j, i = j → M.graded_object_d i == M.graded_object_d j,</span>\n  <span class=\"c1\">-- { rintro i j rfl, exact heq.refl _ },</span>\n  <span class=\"c1\">-- dsimp [graded_object_d],</span>\n  <span class=\"c1\">-- specialize aux (n + 1) (n + 1 + 1 + -1) (by simp),</span>\n  <span class=\"c1\">-- show (_ ≫ _) ≫ _ = 0,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205093228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839786
    },
    {
        "content": "<p>I did that</p>",
        "id": 205093236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839794
    },
    {
        "content": "<p>Now try to prove <code>d_squared</code></p>",
        "id": 205093242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839801
    },
    {
        "content": "<p>did you use the Mariolization?</p>",
        "id": 205093296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595839830
    },
    {
        "content": "<p>i.e. use Sigma</p>",
        "id": 205093299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595839839
    },
    {
        "content": "<p>No no, you need <code>M.graded_object.eq_to_hom : a = b -&gt; M.graded_object a -&gt; M.graded_object b</code></p>",
        "id": 205093300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839839
    },
    {
        "content": "<p>kenny's suggestion to use my earlier suggestion is also feasible</p>",
        "id": 205093315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839861
    },
    {
        "content": "<p>Which earlier suggestion?</p>",
        "id": 205093355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839915
    },
    {
        "content": "<p>mix everything into one untyped pot</p>",
        "id": 205093397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839927
    },
    {
        "content": "<p>use <code>Sigma n, M n</code> (or direct sum I guess)</p>",
        "id": 205093403,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595839939
    },
    {
        "content": "<p>and state every identity there</p>",
        "id": 205093407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595839947
    },
    {
        "content": "<p>that eliminates the dependent types so you won't have to deal with equalities in type dependencies anymore</p>",
        "id": 205093426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839961
    },
    {
        "content": "<p>I guess that doesn't work for arbitrary categories</p>",
        "id": 205093432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595839969
    },
    {
        "content": "<p>It works on anything</p>",
        "id": 205093450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595839988
    },
    {
        "content": "<p>what is <code>graded_object_with_shift</code>?</p>",
        "id": 205093459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595840009
    },
    {
        "content": "<p>it has it's own downsides, but it is a good technique to use when DTT hell starts</p>",
        "id": 205093566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595840072
    },
    {
        "content": "<p>do you have an MWE that I can play with?</p>",
        "id": 205093585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595840101
    },
    {
        "content": "<p>Sigma might work, but the direct sum doesn't</p>",
        "id": 205093773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595840264
    },
    {
        "content": "<p>I don't have an MWE... but you can <code>leanproject get mathlib:sset</code>...</p>",
        "id": 205093831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595840304
    },
    {
        "content": "<p>I'm not sure the <code>graded_object_eq_to_hom</code> trick is sufficient here...</p>",
        "id": 205093890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595840354
    },
    {
        "content": "<p>then what?</p>",
        "id": 205093921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595840384
    },
    {
        "content": "<p>MWE please</p>",
        "id": 205094049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595840477
    },
    {
        "content": "<p>I've now proven</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">graded_object_d_congr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_eq_to_hom</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"n\">j</span> <span class=\"err\">≫</span>\n    <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">graded_object_eq_to_hom</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205094602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595840887
    },
    {
        "content": "<p>This is a very ugly hack</p>",
        "id": 205094610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595840896
    },
    {
        "content": "<p>Whoah, I managed to prove it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">graded_object_d_squared</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_module</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span><span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧&#39;</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">graded_object_d_congr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"err\">≫</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"bp\">_</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"err\">≫</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">graded_object_eq_to_hom</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_trans</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_trans_assoc</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">boundary</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">≫</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">boundary</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"err\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">boundary_boundary</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_zero_morphisms</span><span class=\"bp\">.</span><span class=\"n\">zero_comp</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205095193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595841385
    },
    {
        "content": "<p>But I'm not sure whether this method scales...</p>",
        "id": 205095199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595841395
    },
    {
        "content": "<p>I guess we need some custom constructors for complexes.</p>",
        "id": 205095233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595841429
    },
    {
        "content": "<p>I made a constructor for finite length complexes, out of an inductive type for composable morphisms</p>",
        "id": 205095266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595841479
    },
    {
        "content": "<p>it's on a branch <code>SES</code>, which is not very pretty</p>",
        "id": 205095309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595841490
    },
    {
        "content": "<p>But this one isn't finite length</p>",
        "id": 205095375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595841559
    },
    {
        "content": "<p>Yes, I was just including this under \"some\". :-)</p>",
        "id": 205095448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595841605
    },
    {
        "content": "<p>hrm, there is still no MWE. What file are you working in? What are the imports? What does anything mean? You aren't being very nice</p>",
        "id": 205095516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595841695
    },
    {
        "content": "<p>Which file is this in?</p>",
        "id": 205095878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595841983
    },
    {
        "content": "<p>Also, how about you push your latest additions to that branch? :-)</p>",
        "id": 205096202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595842214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/morphisms.20between.20objects.20that.20are.20.22equal.22/near/205089843\">said</a>:</p>\n<blockquote>\n<p>If you want to play with this, I suggest <code>leanproject get -b mathlib:sset</code> and then look at <code>topology/simplicial/simplicial_complex</code></p>\n</blockquote>\n<p>I just pushed</p>",
        "id": 205100531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595845179
    },
    {
        "content": "<p>I think that we almost have the chain complex</p>",
        "id": 205100609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595845220
    },
    {
        "content": "<p>The <code>hom_congr</code> suggestion works sufficiently well, I think.<br>\nThanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 205100649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595845260
    },
    {
        "content": "<p>We have lunch and a chain complex (-;</p>",
        "id": 205103332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595847485
    },
    {
        "content": "<p>This is how far we are from the homology functors on topological spaces:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">Top</span> <span class=\"err\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">singular</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">27</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_images</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">singular</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">27</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_equalizers</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">singular</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">27</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_cokernels</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205104215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595848287
    },
    {
        "content": "<p>All of this exists, just not in mathlib</p>",
        "id": 205104356,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595848415
    },
    {
        "content": "<p>Unless <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has done this already in one of his branches, I can make a PR with my proof of <code>abelian (Module R)</code>, which takes care of the images. Equalizers and cokernels should be in <a href=\"https://github.com/leanprover-community/mathlib/issues/3463\">#3463</a>.</p>",
        "id": 205104660,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595848693
    },
    {
        "content": "<p>Great!</p>",
        "id": 205104960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595848958
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 205105002,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595849019
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3463\">#3463</a> is hopefully close to the merge queue. :-)</p>",
        "id": 205105014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595849040
    },
    {
        "content": "<p>wait, how could the Sigma approach work on an arbitrary category?</p>",
        "id": 205109926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595852592
    },
    {
        "content": "<p>In an arbitrary category, you get a type <code>arrow C</code> containing all homs, or something like that</p>",
        "id": 205110364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595852891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> there's a sorry-free proof of <code>abelian (Module R)</code> at <a href=\"https://github.com/leanprover-community/mathlib/commit/0f08541d770094c3e88ce1b45d6928c1defebafc\">https://github.com/leanprover-community/mathlib/commit/0f08541d770094c3e88ce1b45d6928c1defebafc</a>. Some parts can certainly be cleaned up, but I'm done for today and will return to this tomorrow.</p>",
        "id": 205118033,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595857302
    },
    {
        "content": "<p>Excellent, thank you! This will be a real milestone, our first abelian category. :-)</p>",
        "id": 205123234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595859960
    },
    {
        "content": "<p>How come you didn't get a bunch of grief about no abelian categories and end up showing that the trivial category is abelian?? That happened for us with perfectoid spaces :-)</p>",
        "id": 205125113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595860795
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">singular_chain_complex_d_one_of_unique</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">singular_chain_complex</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>This means that if <code>X</code> is a topological space with at most 1 element, then the first differential <code>d 1</code> of the singular chain complex of <code>X</code> with coefficients in a ring <code>R</code> is... the zero morphism.</p>",
        "id": 205126612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595861446
    },
    {
        "content": "<p>Lean agrees that this is true.</p>",
        "id": 205126633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595861459
    }
]