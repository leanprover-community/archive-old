[
    {
        "content": "<p><code>algebra/module.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_submodule</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_univ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_submodule</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hf</span>\n</pre></div>\n\n\n<p>should this be an instance?</p>",
        "id": 132041055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534160862
    },
    {
        "content": "<p>no good, unless <code>is_linear_map</code> is a typeclass</p>",
        "id": 132041241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534161104
    },
    {
        "content": "<p>what to do about it then</p>",
        "id": 132043377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534163535
    },
    {
        "content": "<p>fix it?</p>",
        "id": 132043635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534163827
    },
    {
        "content": "<p>I'm struggling with instances, I have the error:<br>\nfailed to synthesize type class instance for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">pos_nat</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">em</span> <span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">pos_nat</span> <span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>How should I state the instance that would solve this?</p>",
        "id": 132121087,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534264311
    },
    {
        "content": "<p>You should give us more context, this goal is probably not what you actually want</p>",
        "id": 132121699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534264953
    },
    {
        "content": "<p>While I agree with patrick, I doubt that this is the right goal to solve, it is incidentally provable. Probably the missing piece is <code>decidable (pos_nat n)</code></p>",
        "id": 132121881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534265184
    },
    {
        "content": "<p>Thanks Patrick, you're right, I made a mistake when writing my goal and it's all fixed now.<br>\nI would still be curious as to what this instance actually means.<br>\nAs for the context I wrote </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">pow_order_of_eq_one</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n</pre></div>\n\n\n<p>instead of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">em</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">em</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">pow_order_of_eq_one</span> <span class=\"o\">(</span><span class=\"n\">units_zmod_mk</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">em</span><span class=\"o\">),</span>\n</pre></div>\n\n\n<p>and I have defined above </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">units_zmod_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pos_nat</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">val_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_eq_gcd</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_one</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">dsimp</span><span class=\"bp\">;</span><span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_val</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_eq_gcd</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">coprime</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_one</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"n\">dsimp</span><span class=\"bp\">;</span><span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 132121916,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534265236
    },
    {
        "content": "<p>Okay thanks Mario</p>",
        "id": 132121924,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534265260
    },
    {
        "content": "<p>I assume the <code>decidable_eq</code> goal is coming from <code>order_of</code></p>",
        "id": 132122004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534265354
    },
    {
        "content": "<p>Very well thanks, I'm slowly trying to get a grasp of instances</p>",
        "id": 132122352,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534265711
    }
]