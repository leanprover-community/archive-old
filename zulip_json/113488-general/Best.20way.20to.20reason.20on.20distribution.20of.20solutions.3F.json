[
    {
        "content": "<p>Hi all,</p>\n<p>What is the best way to reason about the distribution of real roots of a polynomial? I was trying to prove two polynomials' solutions are interlaced. Below is a definition of <code>interlace</code> I wrote for two lists. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">Interlace</span><span class=\"o\">,</span> <span class=\"n\">Interlace'</span> <span class=\"o\">{</span><span class=\"n\">num_t</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">num_t</span><span class=\"o\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">Interlace</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">num_t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list</span> <span class=\"n\">num_t</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Interlace'</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"k\">with</span> <span class=\"n\">Interlace'</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">num_t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list</span> <span class=\"n\">num_t</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Interlace</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Then I need to define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">solution</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">list</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is it good practice to use above definition, and treat solutions as elements of a list? If so, how should I fill in the sorry above? </p>\n<p>Thanks!</p>",
        "id": 270823119,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1644062798
    },
    {
        "content": "<p>I don't know much about inductive types but if I were thinking about formalising this I would have just written the predicate directly; one doesn't need inductive types to do it: just write that the n'th term of one list is in between the n'th and the n+1st term of the other one. As for <code>solution</code> this is going to be there already -- at least as a finset -- let's try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.roots\">docs#polynomial.roots</a> ? And then take the reals ones and sort them.</p>",
        "id": 270824447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644064450
    }
]