[
    {
        "content": "<p>If there are other attributes on a definition which I want <code>to_additive</code> to copy to the additive version, then <code>to_additive</code> should come <strong>last</strong>, right? Or does it not matter?</p>",
        "id": 209314438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599498089
    },
    {
        "content": "<p>I didn't see anything about this in the documentation.</p>",
        "id": 209314449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599498099
    },
    {
        "content": "<p>Yes, <code>to_additive</code> adds <code>simp</code> and some other attributes (but not all) to the generated declarations.</p>",
        "id": 209317217,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1599501114
    },
    {
        "content": "<p>I tested and you do need to put other attributes first if you want them to be copied.</p>",
        "id": 209335737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599523844
    },
    {
        "content": "<p>Is the attribute order documented anywhere? I found yet another interaction that can go wrong:<code>to_additive</code> and <code>norm_cast</code>. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.coe_smul\">docs#continuous_map.coe_smul</a> gets it wrong.</p>",
        "id": 280408682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651092494
    },
    {
        "content": "<p>I don't think the order is documented but the rule is always put to additive last, unless it complains, in which case do what the error message says.</p>",
        "id": 280409244,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651092792
    },
    {
        "content": "<p>... except <code>simps</code></p>",
        "id": 280409324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651092833
    },
    {
        "content": "<p>Things slip through the cracks of course and I try and do a grep search and fix things occasionally, but that is also imperfect.</p>",
        "id": 280409325,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651092833
    },
    {
        "content": "<p>Well that comes under the unless it complains branch of my rule</p>",
        "id": 280409410,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651092852
    },
    {
        "content": "<p>Simps and mono are the only exceptions iirc but the user doesn't really have to remember that</p>",
        "id": 280409456,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651092875
    },
    {
        "content": "<p>and is there any other interaction between <code>norm_cast</code>, <code>simp</code> and others?</p>",
        "id": 280409459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651092879
    },
    {
        "content": "<p>I don't think they interact, but I'm not 100% sure</p>",
        "id": 280409537,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651092929
    },
    {
        "content": "<p>I know for a fact that <code>to_additive</code> and <code>alias</code> interact (in bad ways), but <a href=\"https://github.com/leanprover-community/mathlib/pull/13742\">#13742</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/13743\">#13743</a> should fix this.</p>",
        "id": 280409926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651093125
    },
    {
        "content": "<p>Yes most attribute pairs don't interact though. to_additive is one of the few attributes that creates a new declaration that needs attributes of it's own, so more care is needed</p>",
        "id": 280411234,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651093797
    },
    {
        "content": "<p>I don't really understand how to_additive does its magic, but I've looked at the code a few times.  It seems that </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/dc589c890576488ae0df5d62a389aa49ca507938/src/algebra/group/to_additive.lean#L545\">https://github.com/leanprover-community/mathlib/blob/dc589c890576488ae0df5d62a389aa49ca507938/src/algebra/group/to_additive.lean#L545</a></p>\n<p>is where there is (at least part of) the handling of attributes.  You can also see that <code>simps, mono</code> and something with <code>alias</code> get singled out.</p>",
        "id": 280435246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651109584
    }
]