[
    {
        "content": "<p>At the cool <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> stream which most people aren't subscribed to, Patrick found the following time-out:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">differentiable_cos</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>Note that we're trying to prove that sin is differentiable by telling Lean that cos is differentiable.</p>\n<p>The <code>set_option</code> commands are just so you can see the unifier failing. The first 262144 bytes of the trace output are <a href=\"https://gist.github.com/kbuzzard/b995aa029459a043b807695ea6d84ae7\" title=\"https://gist.github.com/kbuzzard/b995aa029459a043b807695ea6d84ae7\">here at this gist</a>. Searching for <code>sin x' =?= cos x'</code> shows a bunch of unfun stuff. It's a bit complex -- the numbers go up from [8] to [19] but then right near the end of the trace drop back to [9].</p>",
        "id": 193780069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789847
    },
    {
        "content": "<p>Johan suggested marking <code>sin</code> and <code>cos</code> irreducible, but this doesn't seem to solve the problem.</p>",
        "id": 193780225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586789949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [9]: sin x&#39; + -sin x =?= cos x&#39; + -cos ?m_1\n[type_context.is_def_eq_detail] [10]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [10]: add_semigroup.add (sin x&#39;) (-sin x) =?= add_semigroup.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [11]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [11]: add_monoid.add (sin x&#39;) (-sin x) =?= add_monoid.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [12]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [12]: add_group.add (sin x&#39;) (-sin x) =?= add_group.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [13]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [13]: add_comm_group.add (sin x&#39;) (-sin x) =?= add_comm_group.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [14]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [14]: ring.add (sin x&#39;) (-sin x) =?= ring.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [15]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [15]: field.add (sin x&#39;) (-sin x) =?= field.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [16]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [16]: field.add (sin x&#39;) (-sin x) =?= field.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [17]: sin x&#39; =?= cos x&#39;\n...\n[type_context.is_def_eq_detail] [17]: comm_ring.add (sin x&#39;) (-sin x) =?= comm_ring.add (cos x&#39;) (-cos ?m_1)\n[type_context.is_def_eq_detail] [18]: sin x&#39; =?= cos x&#39;\n...\n</pre></div>\n\n\n<p>A nice little tour through the algebra heirarchy there...</p>",
        "id": 193780736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586790263
    },
    {
        "content": "<p>With </p>\n<div class=\"codehilite\"><pre><span></span>attribute [irreducible] sin cos\n</pre></div>\n\n\n<p>beforehand, the <a href=\"https://gist.github.com/kbuzzard/30c1218ee205a70d0ac39fb21a871c95\" title=\"https://gist.github.com/kbuzzard/30c1218ee205a70d0ac39fb21a871c95\">gist is completely different</a>.</p>\n<p><code>sin =?= cos</code> fails immediately, so it's easier to see what the actual problem is.</p>",
        "id": 193781390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586790644
    },
    {
        "content": "<p>I think this shows one should not try to use instance search as a theorem prover</p>",
        "id": 193781761,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586790858
    },
    {
        "content": "<p>:-)</p>",
        "id": 193781851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586790909
    },
    {
        "content": "<p>Maybe in Lean 4 it would be more sensible</p>",
        "id": 193782098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791055
    },
    {
        "content": "<p>Is that what's going on here?</p>",
        "id": 193782194,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791099
    },
    {
        "content": "<p>You've given the <code>is_def_eq</code> trace but not the instances trace and I have to sort of guess at the latter.</p>",
        "id": 193782238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791126
    },
    {
        "content": "<p>Oh maybe it isn't.</p>",
        "id": 193782345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791191
    },
    {
        "content": "<p>I guess it is just the definition of <code>has_fderiv_at</code> that is so complicated if you fully unfold it.</p>",
        "id": 193782522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791264
    },
    {
        "content": "<p>Very early on, Lean asks</p>\n<div class=\"codehilite\"><pre><span></span>has_fderiv_at sin f&#39; x =?= has_fderiv_at cos f&#39; ?m_8\n</pre></div>\n\n\n<p>Because <code>sin</code> isn't <code>cos</code>, it then tries</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] unfold left&amp;right: has_fderiv_at\n</pre></div>\n\n\n<p>and asks</p>\n<div class=\"codehilite\"><pre><span></span>has_fderiv_at_filter sin f&#39; x (nhds x) =?= has_fderiv_at_filter cos f&#39; ?m_8 (nhds ?m_8)\n</pre></div>\n\n\n<p>Again this fails quickly because sin isn't cos. It then unfolds again and asks another question:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] unfold left&amp;right: has_fderiv_at_filter\n[type_context.is_def_eq_detail] [5]: asymptotics.is_o (λ (x&#39; : ?m_1), sin x&#39; - sin x - ⇑f&#39; (x&#39; - x)) (λ (x&#39; : ?m_1), x&#39; - x) (nhds x) =?= asymptotics.is_o (λ (x&#39; : ℂ), cos x&#39; - cos ?m_8 - ⇑f&#39; (x&#39; - ?m_8)) (λ (x&#39; : ℂ), x&#39; - ?m_8) (nhds ?m_8)\n</pre></div>\n\n\n<p>This is where the trouble starts, because there are two subtractions on each side. It asks</p>\n<div class=\"codehilite\"><pre><span></span>sin x&#39; - sin x =?= cos x&#39; - cos ?m_1\n</pre></div>\n\n\n<p>and because sub is add neg we now go through a tour of the heirarchy starting at add_semigroup.add and going up to comm_ring.add. Then it unfolds the second subtraction a bit more:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [10]: add_monoid.add (sin x&#39; - sin x) (-⇑f&#39; (x&#39; - x)) =?= add_monoid.add (cos x&#39; - cos ?m_1) (-⇑f&#39; (x&#39; - ?m_1))\n</pre></div>\n\n\n<p>and again tries to unify sin x' - sin x with cos x' - cos x (which takes a long time to fail because it goes up the heirarchy again). This (heirarchy)^2 loop takes 2000 lines of output to fail, and then tries</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] unfold left&amp;right: asymptotics.is_o\n</pre></div>\n\n\n<p>giving us the exciting new problem</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [6]: asymptotics.is_O_with c (λ (x&#39; : ?m_1), sin x&#39; - sin x - ⇑f&#39; (x&#39; - x)) (λ (x&#39; : ?m_1), x&#39; - x) (nhds x) =?= asymptotics.is_O_with c (λ (x&#39; : ℂ), cos x&#39; - cos ?m_8 - ⇑f&#39; (x&#39; - ?m_8)) (λ (x&#39; : ℂ), x&#39; - ?m_8) (nhds ?m_8)\n</pre></div>\n\n\n<p>which again involves a double traversal of the entire heirarchy, and even though the story does not end there, the trace does because we get to 262144 characters.</p>",
        "id": 193783202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586791624
    },
    {
        "content": "<p>The issue seems to be that there are lots of these <code>+</code> and <code>-</code> subexpressions which could each independently be unfolded to various amounts, perhaps resulting in new <code>+</code> and <code>-</code> subexpressions (if you unfold the definitions for the complex numbers in terms of the reals for example), and the result is an exponentially large search problem</p>",
        "id": 193783430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586791754
    },
    {
        "content": "<p>Yes as well as going up the algebra heirarchy we often consider real and imaginary parts of things. Is this some indication that more things need to be made irreducible? Should <code>asymptotics.is_o</code> be irreducible? Should <code>has_fderiv_at_filter</code> be? I have no idea.</p>",
        "id": 193783622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586791852
    },
    {
        "content": "<p>Marking <code>asymptotics.is_o</code> as irreducible as well, fixes the problem (it takes a few seconds to fail, but it fails).</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch, term\n  differentiable_cos x\nhas type\n  differentiable_at ℂ cos x\nbut is expected to have type\n  differentiable_at ℂ sin x\n</pre></div>",
        "id": 193783716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586791909
    },
    {
        "content": "<p>I've said it before, a lot more definitions in mathlib should be marked <code>irreducible</code>.</p>",
        "id": 193787794,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586794068
    },
    {
        "content": "<p>I often write proofs applying <code>is_o</code> to some <code>h : 0 &lt; c</code>.</p>",
        "id": 193793907,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586797468
    },
    {
        "content": "<p>Though we can add something like <code>is_o.def</code></p>",
        "id": 193793953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586797510
    },
    {
        "content": "<p>Or we can make <code>has_deriv_at</code> <code>irreducible</code> outside of the files that set up the theory.</p>",
        "id": 193797284,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586799100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">sin</span> <span class=\"n\">cos</span> <span class=\"n\">has_deriv_at</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">differentiable_cos</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>still takes a long time to fail</p>",
        "id": 193797553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586799234
    },
    {
        "content": "<p>I guess another alternative to <code>irreducible</code> is to make it a structure</p>",
        "id": 193797649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586799280
    },
    {
        "content": "<p>I'd prefer to still have the current <code>defeq</code> while setting up the theory.</p>",
        "id": 193807893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586804633
    },
    {
        "content": "<p>But why is it still timing out after making <code>sin</code>, <code>cos</code>, and <code>has_deriv</code> irreducible?</p>",
        "id": 193808450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586804898
    },
    {
        "content": "<p>Because <code>differentiable_at</code> uses <code>has_fderiv_at</code> which is unrelated to <code>has_deriv</code></p>",
        "id": 193809241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586805342
    }
]