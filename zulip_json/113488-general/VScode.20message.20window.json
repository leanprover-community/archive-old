[
    {
        "content": "<p>We now have several tactics that report back with tactic scripts in the Lean messages window: <code>squeeze_simp</code>, <code>tidy?</code>, <code>suggest</code>, <code>extract_goal</code> and in a couple of days <code>hint</code>. Would it be possible to hit <code>C-x</code> <code>M-c</code> <code>M-butterfly</code> and magically have the tactic-script-reporting-tactic under the cursor be replaces with whatever tactic script it reported?<br>\nI understand that maybe this would require that the tactic script reports follow a common output format, but that shouldn't be hard.</p>\n<p>In principle hole commands would do this. But in practice, that doesn't seem to work. (They work great for dumping a skeleton of a structure, and things like that.) For one, the hole command wouldn't let you inspect the reported script, before hitting the magic keyboard combo.</p>",
        "id": 188082215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581575957
    },
    {
        "content": "<p>I thought this would be a good opportunity for me to experiment with the VSCode extension. I already have something now that kind of works:</p>\n<p><a href=\"https://github.com/leanprover/vscode-lean/pull/143\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/143\">https://github.com/leanprover/vscode-lean/pull/143</a></p>\n<p>For now, it copies the entire message of the tactic (which is what we want for the current implementation of <code>squeeze_simp</code>) and replaces the current selection (i.e., you need to select the characters <code>squeeze_simp</code> in your editor before you press the key combination for this to work properly). So there is a lot of room for improvement :-)</p>",
        "id": 188189541,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1581671649
    },
    {
        "content": "<p>That's already really nice</p>",
        "id": 188189731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581671833
    },
    {
        "content": "<p>What would be the best key combination for this? I currently have <code>alt+v</code>. (<code>v</code> like pasting in <code>ctrl+v</code>)</p>",
        "id": 188189885,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1581671926
    },
    {
        "content": "<p>And what should be the format for the tactic output? We could change squeeze_simp to say:</p>\n<div class=\"codehilite\"><pre><span></span>Try this: simp only [foo, bar]\n</pre></div>\n\n\n<p>This is what Isabelle/Sledgehammer says, too. Then the words \"Try this:\" could be recognized by the extension.</p>",
        "id": 188190046,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1581672064
    },
    {
        "content": "<p>This is a great idea!</p>\n<ul>\n<li>There should really be a magic string like <code>Try this:</code> that is recognized by the extension.  You should also be able to print additional stuff from the tactic before/after the <code>Try this:</code>.</li>\n<li>You shouldn't have to select the tactic invocation before calling alt+v.  There is no way to obtain the range of the tactic (i.e. where <code>squeeze_simp</code> or <code>library_search</code> is in the file).  But as a first heuristic, just selecting everything from the position of the message until the end of the line (or the next comma) should work in most cases.</li>\n</ul>",
        "id": 188209987,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581690253
    },
    {
        "content": "<p>If this works nicely, I'd also like to integrate it in the info view, so that you can click on the <code>Try this:</code> (or some button right next to it).</p>",
        "id": 188210070,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1581690314
    },
    {
        "content": "<p>A very minor bug report/feature request: when you use this on a tactic call with a trailing comma, it deletes the comma. Would it be possible to replace until the next unbracketed comma instead of the end of the line? Or is there an ambiguity there I'm not seeing?</p>",
        "id": 188528964,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582105394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- inserting the suggestion breaks the proof</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188528980,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582105411
    },
    {
        "content": "<p>Another bug report: when <code>squeeze_simp</code> suggests a long tactic that spans over multiple lines, only the first line is pasted:</p>\n<div class=\"codehilite\"><pre><span></span>Try this: simp only [is_add_group_hom.mem_ker,\n linear_map.map_add f,\n linear_map.map_add₂ f,\n linear_map.map_smul f,\n linear_map.map_smul₂ f,\n sub_self,\n free_abelian_group.lift.of,\n add_comm,\n add_right_neg,\n add_add_neg_cancel&#39;_right,\n neg_add_rev,\n free_abelian_group.lift.add,\n free_abelian_group.lift.neg,\n sub_eq_add_neg,\n add_left_comm]\n</pre></div>\n\n\n<p>Should <code>squeeze_simp</code> etc. just everything on a single line, or should the vscode extension also include indented lines after the \"Try this:\"?</p>",
        "id": 188535144,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582110910
    },
    {
        "content": "<p>Hmm, maybe including all indented lines is a good compromise.</p>",
        "id": 188550624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582123826
    },
    {
        "content": "<p>If that isn't too tricky...</p>",
        "id": 188550630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582123837
    },
    {
        "content": "<p>Yes, I'd prefer all indented lines instead of having the tactics print a single long line.</p>",
        "id": 188551080,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582124141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/VScode.20message.20window/near/188528964\" title=\"#narrow/stream/113488-general/topic/VScode.20message.20window/near/188528964\">said</a>:</p>\n<blockquote>\n<p>A very minor bug report/feature request: when you use this on a tactic call with a trailing comma, it deletes the comma. Would it be possible to replace until the next unbracketed comma instead of the end of the line? Or is there an ambiguity there I'm not seeing?</p>\n</blockquote>\n<p>How far should be replaced if the code says something like <code>by squeeze_simp</code>? Then there is no comma. Maybe the code should check whether the tactic is preceded by <code>by</code> to recognize this situation?</p>",
        "id": 188579881,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1582142844
    },
    {
        "content": "<p>The next comma, EOL, or unmatched close paren, whichever comes first?</p>",
        "id": 188580061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582142980
    },
    {
        "content": "<p>Maybe the grammar here is too complicated to be worth implementing, heh.</p>",
        "id": 188580186,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582143067
    },
    {
        "content": "<p>Can the lean parser report this information?</p>",
        "id": 188580222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143100
    },
    {
        "content": "<p>Honestly, \"until the next line break\" is like 95% of what you need and it's nice to keep the implementation entirely in the VSCode extension.</p>",
        "id": 188580446,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582143260
    },
    {
        "content": "<p>Oh I see, vscode only gets the first word of the tactic?</p>",
        "id": 188580588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143393
    },
    {
        "content": "<p>next unbracketed (comma or semicolon or newline) I think</p>",
        "id": 188580620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143435
    },
    {
        "content": "<p>Yeah, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">squeeze_simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>reports the message only at <code>squeeze_simp</code>.</p>",
        "id": 188580713,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582143496
    },
    {
        "content": "<p>I can imagine stuff like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"n\">baz</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>so bracket matching is important, I think</p>",
        "id": 188580750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143546
    },
    {
        "content": "<p>There are still some outliers I can think of, like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">very</span> <span class=\"n\">long</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n  <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">very</span><span class=\"o\">,</span> <span class=\"n\">long</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 188580892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143646
    },
    {
        "content": "<p>But <code>rcases</code> is not a problem right?</p>",
        "id": 188581043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582143768
    },
    {
        "content": "<p>Because then you just need to replace <code>rcases?</code></p>",
        "id": 188581052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582143780
    },
    {
        "content": "<p>Another example is: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tidy</span><span class=\"err\">?</span> <span class=\"o\">{</span>\n  <span class=\"n\">tactics</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">tactic1</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic2</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 188581062,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582143790
    },
    {
        "content": "<p>that's bracketed so it's okay</p>",
        "id": 188581082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143808
    },
    {
        "content": "<p>I think we can grant that it won't be perfect and \"next unbracketed (comma or semicolon or newline)\" is a good (and easy?) approximation.</p>",
        "id": 188581085,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582143809
    },
    {
        "content": "<p>(by bracketed I mean tracking all bracket characters)</p>",
        "id": 188581217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143856
    },
    {
        "content": "<p>The proper solution would be to reimplement VScode in Lean.</p>",
        "id": 188581291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582143903
    },
    {
        "content": "<p>or lean in vscode...</p>",
        "id": 188581311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143914
    },
    {
        "content": "<p>Since lean is handling all the high level bracket matching, I think you can just keep a single counter, increase it every time you see <code>([{⟨⦃</code> and decrease on <code>⦄⟩}])</code></p>",
        "id": 188581441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582143999
    },
    {
        "content": "<p>I just tried that \"Try this\" thing, and it eats my commas.</p>",
        "id": 188581470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582144035
    },
    {
        "content": "<p>Maybe if you click on the colon in \"Try this:\" it will put the punctuation in</p>",
        "id": 188581508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582144072
    },
    {
        "content": "<p>Also the tooltip when hovering over a suggestion is pretty distracting (and uninformative).</p>",
        "id": 188581851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582144211
    },
    {
        "content": "<p>But it's still all very nice!</p>",
        "id": 188581873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582144235
    },
    {
        "content": "<p>Thanks for the feedback! <a href=\"https://github.com/leanprover/vscode-lean/pull/144\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/144\">https://github.com/leanprover/vscode-lean/pull/144</a></p>",
        "id": 188687060,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1582238659
    }
]