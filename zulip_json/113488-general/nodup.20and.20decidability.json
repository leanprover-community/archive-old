[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/7587\">#7587</a>, Floris asked \"Do we have a nice way to define the duplicates of <code>l</code>? We could write <code>\\forall x, count x l &gt; 1 -&gt; r x x</code> [to say that <code>r</code> is reflexive on duplicates], but that requires <code>decidable_eq</code>. Are there any neater solutions? How does <code>list.nodup</code> work without requiring <code>decidable_eq</code>? Is that because it is a Prop, while <code>dups l</code> would have to be data (if constructing a list a la <code>erase_dup</code>)? Or define a <code>set</code> that is <code>duplicates</code> in an inductive way?</p>",
        "id": 240888032,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622514042
    },
    {
        "content": "<p>You can do it inductively as something like this <code>count_at_least a n l</code> means <code>count a l ≥ n</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">count_at_least</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">count_at_least</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">count_at_least</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">count_at_least</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240946607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1622556286
    },
    {
        "content": "<p>You could do just duplicate as something like this if you wanted as well. There'll be other ways</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">duplicate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons_mem</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">duplicate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons_duplicate</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">duplicate</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">duplicate</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240947114,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1622556479
    },
    {
        "content": "<p><code>count_at_least</code> is wrong actually I just realised.</p>",
        "id": 240947322,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1622556538
    },
    {
        "content": "<p>Better </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">count_at_least</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">count_at_least</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons_self</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">count_at_least</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">count_at_least</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">count_at_least</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">count_at_least</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240947453,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1622556594
    }
]