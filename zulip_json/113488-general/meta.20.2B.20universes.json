[
    {
        "content": "<p>Could/should <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span> allow <code>meta</code> to break \"universe safety\", e.g., stick a field of type <code>Type</code> inside a structure declared to have type <code>Type</code>?</p>",
        "id": 133974969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536954344
    },
    {
        "content": "<p>To support things like existential types in Haskell</p>",
        "id": 133975221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536954653
    },
    {
        "content": "<p>It's not a bad idea. We have discussed it before, but there are some issues in the details. For example, we would still like to distinguish between values and proofs in the compiler. Anyway, you should be able to define existential types in meta Lean 3 using a generalized version of <code>unchecked_cast</code> that can cast between universes</p>",
        "id": 133975646,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536955145
    },
    {
        "content": "<p>Ah, this is a nice idea, I hadn't thought about using <code>unchecked_cast</code> to enable universe casting. I'll add an interface for this in mathlib</p>",
        "id": 133980222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536960639
    },
    {
        "content": "<p>I think that the best way to enable this kind of thing in meta land without having a whole different language is to do all universe checks as normal, but drop the check on maximum universe levels for <code>meta inductive</code>s</p>",
        "id": 133980318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536960791
    },
    {
        "content": "<p>so it would still generate the same recursors as normal, but if the type is supposed to be <code>Type 3</code> and you say <code>Type 1</code> instead then that's okay</p>",
        "id": 133980377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536960848
    },
    {
        "content": "<p>Right, we discussed that before but never followed up on it <a href=\"https://github.com/leanprover/lean/pull/1580#issuecomment-301203751\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1580#issuecomment-301203751\">https://github.com/leanprover/lean/pull/1580#issuecomment-301203751</a></p>",
        "id": 133980492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536961017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Whoa, this was not expected. Not only does the advertised method not work, but I think I can prove there is no workaround, that is, VM evaluation respects universes! This means that something like universe inconsistent inductives may be the only way to make this work.</p>",
        "id": 134003123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001222
    },
    {
        "content": "<p>can we define a function that sends <code>u : nat</code> to <code>Type u</code>?</p>",
        "id": 134003181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537001306
    },
    {
        "content": "<p><code>u : nat</code> does not typecheck</p>",
        "id": 134003182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001319
    },
    {
        "content": "<p>not even in the unsafe level?</p>",
        "id": 134003185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537001339
    },
    {
        "content": "<p>they are not the same thing</p>",
        "id": 134003190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001349
    },
    {
        "content": "<p>levels and natural numbers are completely different, syntactically</p>",
        "id": 134003192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001366
    },
    {
        "content": "<p>where is <code>max</code> defined?</p>",
        "id": 134003257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537001517
    },
    {
        "content": "<p>nowhere, it's primitive</p>",
        "id": 134003296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001531
    },
    {
        "content": "<p>Basically, <code>unchecked_cast</code> works by casting across a sorried proof of type equality, which is erased by the VM so that the equality recursor just steps directly from one type to another, and hopefully the VM representations match up so this makes sense. But the equality can only go between two elements of the same universe, and similarly with heq. Indeed, if you look at the recursor of any inductive, it has a motive that lands in <code>Type l</code> for some fixed <code>l</code>, and you can only move from one place to another along this family, meaning you can never escape <code>Type l</code> by application of this recursor.</p>",
        "id": 134003307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537001632
    }
]