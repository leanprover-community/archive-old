[
    {
        "content": "<p>I need some remedial help with functional programming. </p>\n<p>Say I have <code>f : X -&gt; tactic X</code>, and <code>x : X</code>. Suppose that <code>f</code> is possibly very expensive to compute. I would like to recursively apply <code>f</code> to <code>x</code>, and produce an iterator-like object that can traversed elsewhere in the program, in such a way that <code>f</code> is never needlessly computed twice.</p>",
        "id": 133593072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465117
    },
    {
        "content": "<p>What am I meant to do?</p>",
        "id": 133593112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465136
    },
    {
        "content": "<p>(Oh, and <code>f</code> will eventually fail, and the iterator-like object needs to be able to report termination.)</p>",
        "id": 133593119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465225
    },
    {
        "content": "<p>I would love to be able to package this up as merely a <code>tactic X</code>, whose every invocation magically produces the next element of the sequence, and handles piping the value of <code>f f f x</code> into the calculation of <code>f f f f x</code> \"behind the scenes\".</p>",
        "id": 133593162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465294
    },
    {
        "content": "<p>But that seems unlikely. :-)</p>",
        "id": 133593166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465300
    },
    {
        "content": "<p>Use a <code>lazy_list</code></p>",
        "id": 133593215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536465390
    },
    {
        "content": "<p>How does that interact with working in the tactic monad?</p>",
        "id": 133593221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465472
    },
    {
        "content": "<p>I think something is missing in <code>lazy_list</code> to allow this: the function is monadic. But I think we can make a monadic lazy list</p>",
        "id": 133593223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536465481
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta inductive mllist (m : Type u → Type u) (α : Type u) : Type u\n| nil : mllist\n| cons : α → m mllist → mllist\n</pre></div>",
        "id": 133593273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536465559
    },
    {
        "content": "<p>sadly this has to be meta, since it's not necessarily positive</p>",
        "id": 133593274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536465581
    },
    {
        "content": "<p>You could do something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mlazy_list</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">mlazy_list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mlazy_list</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mlazy_list</span>\n</pre></div>",
        "id": 133593332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536465668
    },
    {
        "content": "<p>Can you explain your one, Simon? I'm not understanding how to use it. :-)</p>",
        "id": 133593374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536465757
    },
    {
        "content": "<p>eww, you have to package up the whole state to use that</p>",
        "id": 133593489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466030
    },
    {
        "content": "<p>also, that in no way resembles a list</p>",
        "id": 133593493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466044
    },
    {
        "content": "<p>Mario, I'm failing to write <code>iterates</code> for your version... A hint?</p>",
        "id": 133593536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536466100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you have to squint and cock your head left</p>",
        "id": 133593537,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536466111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Sure, let's have a look</p>",
        "id": 133593542,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536466145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta inductive mllist (m : Type u → Type u) (α : Type u) : Type u\n| nil {} : mllist\n| cons : α → m mllist → mllist\n\nmeta def fix {m : Type u → Type u} [monad m] [alternative m]\n  {α} (f : α → m α) : α → m (mllist m α)\n| x := (do a ← f x, return (mllist.cons a (fix a))) &lt;|&gt; pure mllist.nil\n</pre></div>",
        "id": 133593546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466181
    },
    {
        "content": "<p>the typeclass instances are a bit of a lie since the <code>monad</code> and <code>alternative</code> instances could potentially be giving different map operations, but since there are no axioms it doesn't matter</p>",
        "id": 133593591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466257
    },
    {
        "content": "<p>oh wait</p>\n<div class=\"codehilite\"><pre><span></span>meta def fix {m : Type u → Type u} [alternative m]\n  {α} (f : α → m α) : α → m (mllist m α)\n| x := (λ a, mllist.cons a (fix a)) &lt;$&gt; f x &lt;|&gt; pure mllist.nil\n</pre></div>",
        "id": 133593598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466303
    },
    {
        "content": "<p>Ah, okay, I'd just worked out a version of <code>fix</code>, but forgotten to check for failure...</p>",
        "id": 133593629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536466323
    },
    {
        "content": "<p>if you skip that you have a valid infinite list representation a la haskell</p>",
        "id": 133593650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def f : nat → tactic nat\n| 0 := tactic.failed\n| (n+1) := tactic.trace n $&gt; n\n\nrun_cmd fix f 10 -- prints only 9\n\nmeta def mllist.force {m} [monad m] {α} : mllist m α → m (list α)\n| mllist.nil := pure []\n| (mllist.cons a l) := list.cons a &lt;$&gt; (l &gt;&gt;= mllist.force)\n\nrun_cmd (fix f 10 &gt;&gt;= mllist.force &gt;&gt;= tactic.trace) -- prints 9,...,0 and [9, ..., 0]\n</pre></div>",
        "id": 133593869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536466705
    },
    {
        "content": "<p>Oooh, and look at that:</p>\n<div class=\"codehilite\"><pre><span></span>meta inductive mllist (m : Type u → Type u) (α : Type u) : Type u\n| nil {} : mllist\n| cons : α → m mllist → mllist\n\nopen mllist\n\nmeta def fix {m : Type u → Type u} [alternative m]\n  {α} (f : α → m α) : α → m (mllist m α)\n| x := (λ a, mllist.cons a (fix a)) &lt;$&gt; f x &lt;|&gt; pure mllist.nil\n\nmeta def g (n : ℕ) : tactic ℕ :=\ndo trace n,\n   return (n*n)\n\nmeta def foo : tactic unit :=\ndo L ← fix g 2,\n   mllist.cons n L ← return L,\n   trace &quot;!&quot;,\n   mllist.cons n L ← L,\n   trace &quot;!&quot;,\n   mllist.cons n L ← L,\n   trace &quot;!&quot;,\n   skip\n\nexample : 1 = 1 :=\nbegin\n  foo,\n  refl\nend\n</pre></div>\n\n\n<p>Printing: \"2 ! 4 ! 16 !\"</p>",
        "id": 133593870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536466708
    },
    {
        "content": "<p>If you stay in tactics, Mario's version is simpler. Mine is getting tricky because of universes</p>",
        "id": 133593967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536466900
    },
    {
        "content": "<p>Thanks, Simon. I'm trapped in the bottom universe anyway,, <code>expr</code>-munging,  so I'll go with Mario's for now.</p>",
        "id": 133594092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536467047
    },
    {
        "content": "<p>Basically you get into the standard universe issues with coinductive types. I don't know any way to avoid packing the entire state into the type</p>",
        "id": 133594099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536467067
    },
    {
        "content": "<p>:) good I wish I could have made something that fits in a short snippet. But now, I have to bring in a whole F-algebra which I haven't implemented yet :)</p>",
        "id": 133594113,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536467109
    },
    {
        "content": "<p>You can mathematically reason about the entire completed infinite process, but this has poor code behavior</p>",
        "id": 133594114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536467112
    },
    {
        "content": "<p>Doesn't Lean allow you to substitute pure code with something that will be efficient?</p>",
        "id": 133594158,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536467166
    },
    {
        "content": "<p><span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 133594162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536467179
    },
    {
        "content": "<p>:) since you mention coinductive types, you mentioned bounded natural functors a while back. Now I'm thinking my current approach might be getting out of hand so I think I'll give them a try</p>",
        "id": 133594222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536467379
    },
    {
        "content": "<blockquote>\n<p>bounded natural functors</p>\n</blockquote>\n<p>Interesting. What you need to construct the initial algebra of a functor F : Set -&gt; Set by transfinite induction is that F is accessible, that is, F commutes with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span>-filtered colimits for some <strong>regular cardinal</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span>. For example, FX = (S -&gt; X) is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span>-accessible if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">|S| &lt; \\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∣</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathrm\">∣</span><span class=\"mrel\">&lt;</span><span class=\"mord mathit\">κ</span></span></span></span>. So I guess this \"bounded\" condition is related. Do CS people use regular cardinals too?<br>\nI found some paper on the topic which contains a lemma which bounds the cardinality of minimal algebras and the formula involves a successor cardinal, so I guess it is the same idea.</p>",
        "id": 133603765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536489064
    },
    {
        "content": "<p>Thanks for the attempt at giving me an introduction. I'm afraid I'm more of a noob than that when it comes to category theory</p>",
        "id": 133618942,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536514641
    }
]