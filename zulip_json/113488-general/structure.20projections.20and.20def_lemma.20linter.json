[
    {
        "content": "<p>currently blocking <a href=\"https://github.com/leanprover-community/mathlib/pull/18013\">#18013</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint.default</span>\n\n<span class=\"sd\">/-- -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">A.x</span>\n<span class=\"c\">/-</span><span class=\"cm\"> This should ideally be `lemma` rather than `@[reducible] def`:</span>\n<span class=\"cm\">@[reducible]</span>\n<span class=\"cm\">def A.x : A → true :=</span>\n<span class=\"cm\">λ (self : A), [A.x self]</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">A.x</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"> `A.x` itself doesn't trigger the def_lemma linter, but creating an alias triggers it. -/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">/- Checking 2 declarations (plus 8 automatically generated ones) in the current file with 26 linters -/</span>\n\n<span class=\"cm\">/- The `def_lemma` linter reports: -/</span>\n<span class=\"cm\">/- INCORRECT DEF/LEMMA: -/</span>\n<span class=\"cm\">#check @x /- is a def, should be a lemma/theorem -/</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 317878608,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672004080
    },
    {
        "content": "<p>Another (possibly unrelated) problem is that the universe of a <code>structure</code> seems to default to <code>Type</code> (not <code>Type*</code>, not <code>Sort*</code>) even if all its fields are <code>Prop</code>s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">A</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">structure A : Type</span>\n<span class=\"cm\">fields:</span>\n<span class=\"cm\">A.x : A → true</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>This has caused some unintended universes in mathlib, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_preadditive\">docs#category_theory.monoidal_preadditive</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_linear\">docs#category_theory.monoidal_linear</a>. But it's easy to fix, just add <code>: Prop</code>.</p>",
        "id": 317878857,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672004306
    }
]