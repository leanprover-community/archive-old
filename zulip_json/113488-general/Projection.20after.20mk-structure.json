[
    {
        "content": "<p>Say I've got a function <code>mk_struct</code> which takes some arguments and produces something of type <code>struct</code>. The function <code>mk_struct</code> needn't be the <code>struct.mk</code> constructor---maybe it takes some arguments, proves some stuff about them, and then packages it all up by calling the constructor <code>struct.mk</code> (the point is that the arguments of <code>mk_struct</code> can be totally different).</p>",
        "id": 134060550,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537115988
    },
    {
        "content": "<p>Now say <code>struct</code> has a projection <code>struct.foo</code>. There is a single unambiguous way to construct a function <code>mk_struct.foo</code>, which forgets all of the components of whatever <code>mk_struct</code> outputs except for <code>foo</code>. I'd like to programmatically obtain the <em>type</em> of this function <code>mk_struct.foo</code>.</p>\n<p>Actually, I've essentially done this, but it was incredibly stupid: I directly built everything over <code>expr.xxx</code>'s and manually wrote code to unify the arguments of the projection and the output-type of <code>mk_struct</code>, and in the end it wasn't robust enough to deal with universe parameters.</p>",
        "id": 134060552,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537115992
    },
    {
        "content": "<p>But I'm sure this was all crazy---I'm sure I can exploit lean's facilities (at the very least <code>unify</code>) to do the resolution which I need. Perhaps I'm looking for a suped-up <code>tactic.mk_app</code> that can unroll the quantifiers from the argument I want to apply? What's the canonical way to go about <code>expr</code> fiddling like this?</p>",
        "id": 134060594,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537116007
    },
    {
        "content": "<p>I'm confused why this is different from <code>struct.foo ∘ mk_struct</code>. Can't you just figure out the type of this?</p>",
        "id": 134066795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537129705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks for taking a look. Here's a concrete example:</p>\n<div class=\"codehilite\"><pre><span></span>structure struct (n : ℤ) :=\n(foo : ℕ)\n\ndef mk_struct (m : ℕ) : struct m := ⟨m, 2 * m⟩\n\n#check struct.foo ∘ mk_struct\n#check λ m, (mk_struct m).foo\n</pre></div>\n\n\n<p>The second-to-bottom line fails to typecheck, since <code>mk_struct</code> takes a (possibly a few) potentially random arguments. I'd really like to be able to compose to essentially do what the last line does, without having to know the arguments of <code>mk_struct</code> in advance.</p>",
        "id": 134079723,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537158768
    },
    {
        "content": "<p>do you know the arguments of <code>struct.foo</code>?</p>",
        "id": 134080030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537159500
    },
    {
        "content": "<p>this function in <code>tactic/alias.lean</code> seems similar:</p>\n<div class=\"codehilite\"><pre><span></span>meta def mk_iff_mp_app (iffmp : name) : expr → (nat → expr) → tactic expr\n| (expr.pi n bi e t) f := expr.lam n bi e &lt;$&gt; mk_iff_mp_app t (λ n, f (n+1) (expr.var n))\n| `(%%a ↔ %%b) f := pure $ @expr.const tt iffmp [] a b (f 0)\n| _ f := fail &quot;Target theorem must have the form `Π x y z, a ↔ b`&quot;\n</pre></div>\n\n\n<p>it constructs the term <code>\\lam x y z, iff.mp (f x y z)</code></p>",
        "id": 134080101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537159567
    }
]