[
    {
        "content": "<p>I have noticed that the <code>rw</code> tactic does not always work as expected. This tends to be when a lambda or sum is involved. I propose that <code>rw</code> be upgraded to work in all cases, or at least inside sums.<br>\nDoes anyone know ways to work around this limitation?<br>\nAn example involving a sum is included:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"n\">finset</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plain_old_series</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map.mk_pi_field</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">------------------------</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rues_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">plain_old_series</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">rues_coeff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rues_series</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffTsumForm</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">--already proved, but here for reference</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffSumOfRuesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k₀</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k₀</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ruesDiffTsumForm</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds as expected</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ruesDiffTsumForm</span><span class=\"o\">,</span> <span class=\"c1\">-- fails because the 2nd instance of ruesDiff is inside a sum</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302519672,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664994732
    },
    {
        "content": "<p>did you try <code>simp_rw</code>?</p>",
        "id": 302519986,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664994844
    },
    {
        "content": "<p>Never heard of it. Will look it up.</p>",
        "id": 302520119,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664994898
    },
    {
        "content": "<p>Thanks very much. It works, and now things will be easier.</p>",
        "id": 302520378,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1664994971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 302522284,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664995666
    },
    {
        "content": "<p>In this case,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ruesDiffTsumForm</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>also works.  <code>conv</code> gives you very precise control of where to rewrite.</p>",
        "id": 302526937,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664997206
    },
    {
        "content": "<p>For instance, if you wanted to simply change the <code>ruesDiff</code> inside the sum you could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffSumOfRuesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k₀</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k₀</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ruesDiffTsumForm</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This kind of rewrite is probably more awkward with just <code>rw</code> and <code>simp_rw</code>.</p>",
        "id": 302530603,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664998456
    }
]