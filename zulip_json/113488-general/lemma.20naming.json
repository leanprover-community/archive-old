[
    {
        "content": "<p>The problem to me is consistency. To find a named theorem you have to know the name and know it's important enough to use the name instead of the standard scheme. The good thing about following the standard scheme is that it's mostly thoughtless: you guess what the beginning should be and try tab complete. Inserting a disjunction in there makes things harder.</p>",
        "id": 211732205,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601456495
    },
    {
        "content": "<p>It's also much easier to grep for a \"traditional\" name in a doc string than to grep for a standard scheme name in a doc string, if people even bothered to put those in (which they wouldn't).</p>",
        "id": 211732311,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601456547
    },
    {
        "content": "<p>I strongly agree with both arguments that Rob made</p>",
        "id": 211732626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601456749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/lemma.20naming/near/211615873\">said</a>:</p>\n<blockquote>\n<p>Here's a funny idea. For people who are expecting things like binomial_theorem or pythagorean_theorem we could capitalise and define the term to mean the <em>statement</em> of the theorem</p>\n</blockquote>\n<p>About Kevin's suggestion here, I don't really see the point. This would just be noise in the library. We shouldn't prove <code>theorem add_sq_eq_sq : Pythagorean_Theorem</code> or whatever. This just adds a useless layer of indirection, makes things hard for any metaprograms that work at the syntactic eq level, etc. So <code>def Pythagorean_Theorem : Prop := a^2 + b^2 = c^2</code> would never be used in the library.</p>",
        "id": 211733171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601457060
    },
    {
        "content": "<p>I think Kevin doesn't want to use it. But just have it as a nice trophy on a wall.</p>",
        "id": 211733348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457177
    },
    {
        "content": "<p>we could have <code>hall_of_fame.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pythagoras_holds</span> <span class=\"o\">:</span> <span class=\"n\">Pythagorean_Theorem</span> <span class=\"o\">:=</span> <span class=\"n\">add_sq_eq_sq</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n<p>or something similar.</p>",
        "id": 211733430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457232
    },
    {
        "content": "<p>But at that point it becomes very similar to <code>overview.yaml</code>, I guess</p>",
        "id": 211733513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457263
    },
    {
        "content": "<p>Yeah, this is yet another list that won't get updated and will probably be contained in the Freek list, the undergrad list, and the overview.</p>",
        "id": 211733720,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601457409
    }
]