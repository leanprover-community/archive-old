[
    {
        "content": "<p>I believe I have found a bug in <code>interval_cases</code>.  In a situation with multiple goals (which of course doesn't happen in mathlib), it will act on a later goal rather than the current goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">17</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">interval_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n     <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">17</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- acts on the second goal</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301864114,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664656324
    },
    {
        "content": "<p>Goal-juggling happens to be one of the topics not covered by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>'s <a href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">tutorials</a>, so I don't know how to fix it :)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"o6oUjcE6Nz4\" href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\"><img src=\"https://uploads.zulipusercontent.net/91bdd8086a19f2547ba6eb478268759aecf3a000/68747470733a2f2f692e7974696d672e636f6d2f76692f6f366f556a6345364e7a342f64656661756c742e6a7067\"></a></div>",
        "id": 301864298,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664656490
    },
    {
        "content": "<p>What happens if you add <code>focus1 $</code> right after <code>:=</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.interval_cases\">docs#tactic.interactive.interval_cases</a>?  (I'm on mobile, so cannot test myself)</p>",
        "id": 301865020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664657065
    },
    {
        "content": "<p>(Ideally, this would be the analogue of putting the tactic inside <code>{ ... }</code>.)</p>",
        "id": 301865121,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664657157
    },
    {
        "content": "<p>Except that there is no obligation to close the goal, I think.</p>",
        "id": 301865201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664657187
    },
    {
        "content": "<p>If you look at the implementation of <code>interval_cases</code>, it calls <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.fin_cases_at\">docs#tactic.fin_cases_at</a>.  <code>fin_cases_at</code>, is also called by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.fin_cases\">docs#tactic.interactive.fin_cases</a> and seems to always be called inside a <code>focus1</code>, supporting the evidence that also <code>interval_cases</code> should similarly protect the main goal before calling <code>fin_cases_at</code>.</p>",
        "id": 301866323,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664658010
    },
    {
        "content": "<p>So maybe in fact we shoult move the <code>focus1</code> inside <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.fin_cases_at\">docs#tactic.fin_cases_at</a>?</p>",
        "id": 301866508,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664658171
    },
    {
        "content": "<p>I do not know what causes leakage, but many tactics apply indiscriminately to all available goals.  I was very surprised by this at first, but have gotten accustomed to this behaviour.</p>",
        "id": 301866534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664658187
    },
    {
        "content": "<p>This is worse, though -- it <em>doesn't</em> get applied to the current goal!</p>",
        "id": 301866548,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664658207
    },
    {
        "content": "<p>Maybe, though I would have to look at fin_cases_at on a computer: it may not fix the issue if fin_cases_at receives already the wrong expression.</p>",
        "id": 301866650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664658272
    },
    {
        "content": "<p>Somewhere, lists appear reversed, so it may be that the tactic applies to the first available goal of a reversed list?  I am really grasping here, just browsing the code on mobile, though!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 301866712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664658361
    },
    {
        "content": "<p>Actually, I think I described it wrong.  It acts on the first goal, but it sends those goals to the end of the list, after the preexisting goals.</p>",
        "id": 301866950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664658564
    },
    {
        "content": "<p>So the goal state goes from</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>⊢ x &lt; 3\n⊢ x + 17 = 4\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>⊢ x + 17 = 4\n⊢ -1 &lt; 3\n⊢ 0 &lt; 3\n⊢ 1 &lt; 3\n</code></pre></div>\n<p>(hypotheses omitted)</p>",
        "id": 301867074,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664658675
    },
    {
        "content": "<p>Ok, so there may be some <code>get/set_goals</code> weirdness?  Still, <code>focus1</code> did not help?</p>",
        "id": 301867204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664658804
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.fin_cases_at_aux\">docs#tactic.fin_cases_at_aux</a> has a suspicious <code>rotate_left</code> call that might achieve a weird positioning of goals if there are goals that are not generated by the tactic itself.</p>",
        "id": 301867462,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664659057
    },
    {
        "content": "<p>Oh link does not work, since the def <code>fin_cases_at_aux</code> is private.  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 301867539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664659099
    },
    {
        "content": "<p>My current guess is that the issue arises from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rotate_left\">docs#tactic.rotate_left</a> applied by <code>fin_cases_at_aux</code>, but I still hope that <code>focus1</code> may force <code>rotate_left</code> to achieve the intended behaviour.</p>",
        "id": 301867671,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664659232
    },
    {
        "content": "<p>The working hypothesis being that <code>rotate_left</code> mangles the extra goal with the ones that <code>interval_cases</code> produces and expects.</p>",
        "id": 301867807,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664659330
    },
    {
        "content": "<p>(this is all very speculative, since I actually never used <code>interval/fin_cases</code>!)</p>",
        "id": 301867886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664659396
    },
    {
        "content": "<p>Speculating some more: once the wrong goal gets moved to a prominent position, one of the tactics that would make progress on the \"correct\" side-goals no longer succeeds.  <code>interval_cases</code> therefore thinks that it made all the progress that it was expected to do and stops.  However, the <code>int</code> inequalities that you copied above have not been <code>norm_num</code>med, as they were \"in the shadow\" of the <code>x + 17 = 4</code> goal.</p>",
        "id": 301869556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664660909
    },
    {
        "content": "<p>I do not know exactly what causes the issue, but encasing <code>interval_cases</code> in a <code>focus1</code> seems to produce a behaviour that is closer to the expected one.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16752\">#16752</a></p>",
        "id": 301922518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664709869
    },
    {
        "content": "<p>Thanks for tracking this down, Damiano!!</p>",
        "id": 301954884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664729427
    },
    {
        "content": "<p>I just tried to put the <code>focus1</code> on <code>fin_cases_at</code> and removing all the other <code>focus1</code> that I could find in <code>fin_cases</code> and the new one on <code>interval_cases</code> and it also seems to fix the issue and not create another one in the test files.</p>\n<p>It seems like a more stable solution: should I put the <code>focus1</code> on <code>fin_cases_at</code>?</p>",
        "id": 301957949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664731558
    },
    {
        "content": "<p>That seems like a nicer solution to me.  But I'm not an expert.</p>",
        "id": 301958712,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664732065
    },
    {
        "content": "<p>I agree with you: I pushed the <code>focus1</code> inside <code>fin_cases_at</code> and removed it from <code>fin_cases</code> and the newly added one in <code>interval_cases</code>.</p>\n<p>This solution seems more stable: as it currently is, if some other tactic wants to call the non-interactive <code>fin_cases_at</code>, they do not need to worry about focusing.</p>",
        "id": 302014566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664783568
    }
]