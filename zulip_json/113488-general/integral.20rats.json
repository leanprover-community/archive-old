[
    {
        "content": "<p>This proof is certainly becoming too long and annoying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_num_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_of_int</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_nat_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">delta</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">of_int</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_nat</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_one_right</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Can someone unsorry and/or golf this?</p>",
        "id": 168363789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560824458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_eq_mul_left</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">eq_of_mul_eq_mul_left</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">rat</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_num_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_int_eq_mk</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">],</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">cop</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mk_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_left</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">denom_ne_zero</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>edit: further golfing</p>",
        "id": 168366546,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560828710
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 168370337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560834680
    },
    {
        "content": "<p>I really need to learn these skills... Although I guess I'm already a lot better at them than one year ago <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 168370406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560834797
    },
    {
        "content": "<p>Hmmm, sleep also seems to help. I now have my attempt down to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_num_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_int_denom</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_of_int</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_nat_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">delta</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">of_int</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_nat</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_one_right</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168372139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560837363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you can also close you first subgoal with norm_cast  instead of applying coe_int_denom directly</p>",
        "id": 168401467,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560865236
    },
    {
        "content": "<p>Thanks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_num_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw_mod_cast</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw_mod_cast</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_of_int</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">of_int</span><span class=\"o\">],</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168404325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560866941
    },
    {
        "content": "<p>Isn't it weird that <code>rw_mod_cast</code> need a lemma whose name includes \"cast\"? Should this lemma be marked for <code>norm_cast</code> use?</p>",
        "id": 168404428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560867005
    },
    {
        "content": "<p>I am using the lemma backwards though...</p>",
        "id": 168404532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560867106
    },
    {
        "content": "<p><code>norm_cast</code> handles this. You need to state it in the direction indicated by documentation and then never care again</p>",
        "id": 168404690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560867213
    },
    {
        "content": "<p>norm_cast can't handle this, rat.cast_of_int is not a norm_cast lemma.<br>\nthe reason is that norm_cast never tries to unfold coercions.</p>\n<p>I tried to make a simplier version of the proof, but I get a weird error when trying to rewrite h:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_num_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"c1\">--error when I try to use rw</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_of_int</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168420258,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1560877141
    },
    {
        "content": "<p>You are trying to rewrite the term <code>{num := r, denom := d, pos := r_pos, cop := r_cop}</code>. Here <code>r_cop</code> is a proof that <code>r</code> and <code>d</code> are coprime. Your <code>h</code> is a proof of <code>d=1</code> so if you do the naive rewrite then <code>denom</code> will become <code>1</code> but <code>r_cop</code> will still be a proof that <code>r</code> and <code>d</code> are coprime, so this term is no longer meaningful.</p>",
        "id": 168444623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560884176
    },
    {
        "content": "<p>The two standard tricks to fix this issue are <code>erw h</code> and <code>simp only [h]</code>, each of which may or may not work. Here <code>erw</code> does not but <code>simp only</code> does. Another cool trick, which works if <code>h</code> is of the form <code>variable = term</code>, is <code>subst h</code>; this also works in your case.</p>",
        "id": 168444765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560884295
    },
    {
        "content": "<p><code>subst</code> is very cool, it rewrites every occurrence of <code>d</code> in everything.</p>",
        "id": 168444815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560884343
    },
    {
        "content": "<p>This phenomenon is somehow the achilles heel of dependent type theory.</p>",
        "id": 168444996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560884497
    },
    {
        "content": "<p>This is why you should use <code>rat.mk'</code> and the <code>num_denom_cases_on</code> functions instead of straight <code>cases</code></p>",
        "id": 168452134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560889479
    },
    {
        "content": "<p>Aah yes, for some reason the default constructor for rat is a bit bonkers, probably because it is the only one which avoids quotients</p>",
        "id": 168452810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560889995
    }
]