[
    {
        "content": "<p>Ok, I'm making my feet wet with a first attempt at formalising something. I want to say write down the assumption im(f) = ker(g), where f and g are group homomorphisms. I guess im(f) will be something like <code>f ' A.univ</code>. I tried to find kernels in <code>algebra.group</code> but did not find anything. Are kernels somewhere else?</p>",
        "id": 125580755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524506470
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/search?utf8=✓&amp;q=ker&amp;type=\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/search?utf8=✓&amp;q=ker&amp;type=\">https://github.com/leanprover/mathlib/search?utf8=✓&amp;q=ker&amp;type=</a></p>",
        "id": 125582195,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524508583
    },
    {
        "content": "<p>it's a little sparse</p>",
        "id": 125582201,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524508605
    },
    {
        "content": "<p>Aah, ok. So I should use the github search for this. Thanks</p>",
        "id": 125582221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524508654
    },
    {
        "content": "<p>What am I doing wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">ker</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span>\n<span class=\"kn\">definition</span> <span class=\"n\">im</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125582732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524509452
    },
    {
        "content": "<p>Lean does not like my definition of <code>ker</code> and<code>im</code></p>",
        "id": 125582735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524509464
    },
    {
        "content": "<p>I get squiggles under the <code>f</code></p>",
        "id": 125582746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524509477
    },
    {
        "content": "<p><code>invalid binder declaration, delimiter/bracket expected (i.e., '(', '{', '[', '{{')</code></p>",
        "id": 125582759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524509497
    },
    {
        "content": "<p>You can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kn\">definition</span> <span class=\"n\">ker</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span>\n<span class=\"kn\">definition</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>though I'm not sure whether it is very good style</p>",
        "id": 125584258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524511647
    },
    {
        "content": "<p>Could use <code>def im := set.range f</code></p>",
        "id": 125586882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524515284
    },
    {
        "content": "<p><code>definition ker f := ...</code> is no good because everything to the left of the <code>:=</code> has to either be a variable and skipped completely, or a term together with its type. Just <code>f</code> by itself doesn't work.</p>",
        "id": 125589015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524518422
    },
    {
        "content": "<p>As Reid Barton says, you can skip the <code>f</code> completely</p>",
        "id": 125589020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524518436
    },
    {
        "content": "<p>but you might want to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">f</span>\n</pre></div>",
        "id": 125589029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524518448
    },
    {
        "content": "<p>Why do you want to enforce the same universe?</p>",
        "id": 125589134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524518610
    },
    {
        "content": "<p>Patrick, although your comment is of course sensible, and probably Johan should write <code>universes u v</code> and then <code>{B : Type v}</code>, in ZFC we only have universe and it never bothered us before :-)</p>",
        "id": 125589905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524519628
    },
    {
        "content": "<p>If you don't care (like I don't care) then use <code>Type*</code> until it bites you</p>",
        "id": 125589922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524519671
    },
    {
        "content": "<p>The lean syntax requires parentheses around arguments left of <code>:=</code>, so <code>def ker (f) := ...</code> would work. But it would be a different <code>f</code> than the one in the variable statement, so its type could be different (it will be inferred) and in particular it will not be assumed to be a group_hom</p>",
        "id": 125592932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524524608
    },
    {
        "content": "<p>By the way, the parentheses used to be optional, until we discovered that it enables the following evil example:</p>\n<div class=\"codehilite\"><pre><span></span>example inconsistent : false := trivial\n</pre></div>\n\n\n<p>(hint: it's not proving false)</p>",
        "id": 125593086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524524792
    }
]