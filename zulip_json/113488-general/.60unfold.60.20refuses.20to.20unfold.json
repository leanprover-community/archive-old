[
    {
        "content": "<p>Here <code>t2_to_t1</code> is fully applied to a constructor, but lean still refuses to unfold/reduce. How so?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">t1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">t1</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">t2</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">t2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">t2_to_t1</span> <span class=\"o\">:</span> <span class=\"n\">t2</span> <span class=\"bp\">→</span> <span class=\"n\">t1</span>\n<span class=\"bp\">|</span> <span class=\"n\">t2</span><span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"o\">:=</span> <span class=\"n\">t1</span><span class=\"bp\">.</span><span class=\"n\">c1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">t2_to_t1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">t2_to_t1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- simplify tactic failed to simplify</span>\n    <span class=\"c1\">--state:</span>\n    <span class=\"c1\">-- ⊢ t1.rec 5 (t2_to_t1 t2.c2) = 5</span>\n</pre></div>",
        "id": 126471033,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526152824
    },
    {
        "content": "<p><code>rw</code> works</p>",
        "id": 126471093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526152985
    },
    {
        "content": "<p><code>dunfold</code> too, probably?</p>",
        "id": 126471136,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526153054
    },
    {
        "content": "<p>and <code>dsimp</code></p>",
        "id": 126471137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153072
    },
    {
        "content": "<p>yep, they all work</p>",
        "id": 126471138,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153091
    },
    {
        "content": "<p>The problem is that it is a dependent function, so non-definitional rewrites don't necessarily work</p>",
        "id": 126471145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153117
    },
    {
        "content": "<p>you mean t1.rec is dependent so those tactics don't even try to rewrite it?</p>",
        "id": 126471188,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153173
    },
    {
        "content": "<p>rewrite its argument*</p>",
        "id": 126471189,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153179
    },
    {
        "content": "<p>it will only rewrite in certain locations, depending on the generated congr lemma</p>",
        "id": 126471191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153205
    },
    {
        "content": "<p>interesting</p>",
        "id": 126471197,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153279
    },
    {
        "content": "<p>thanks!</p>",
        "id": 126471237,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153306
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open tactic\nrun_cmd do\n  c ← mk_const `t1.rec &gt;&gt;= mk_congr_lemma,\n  trace c.type\n\n-- ∀ {C : t1 → Sort ?} (e_1 e_1_1 : C t1.c1), e_1 = e_1_1 →\n--   ∀ (n : t1), t1.rec e_1 n = t1.rec e_1_1 n\n``\n</pre></div>",
        "id": 126471242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153328
    },
    {
        "content": "<p>as you can see from the type, it only rewrites the first argument, the <code>n</code> is fixed on both sides</p>",
        "id": 126471249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153363
    },
    {
        "content": "<p>here's what you would get with a less dependent function:</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd do\n  c ← mk_const `has_add.add &gt;&gt;= mk_congr_lemma,\n  trace c.type\n-- ∀ {α : Type ?} [c : has_add α] (a a_1 : α), a = a_1 →\n--   ∀ (a_2 a_3 : α), a_2 = a_3 → a + a_2 = a_1 + a_3\n</pre></div>",
        "id": 126471294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153409
    },
    {
        "content": "<p>is it based purely on the type of the function?</p>",
        "id": 126471295,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153443
    },
    {
        "content": "<p>There is a general procedure for generating \"congruence\" theorems such as these. The only input is the type of the function, and as you can see it doesn't really try to rewrite in dependent argument positions</p>",
        "id": 126471306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153507
    },
    {
        "content": "<p>right</p>",
        "id": 126471349,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153543
    },
    {
        "content": "<p>because it doesn't even work in general for higher-than-Prop sorts, is that right?</p>",
        "id": 126471353,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153576
    },
    {
        "content": "<p>The cool part is that it will automatically use known <code>subsingleton</code> arguments to change values without any equality hypothesis. In particular, that means that proof arguments can be freely rewritten</p>",
        "id": 126471360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153619
    },
    {
        "content": "<p>even if they are dependent on some earlier argument</p>",
        "id": 126471400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153653
    },
    {
        "content": "<p>This is where the <code>simp</code> approach to rewriting wins over <code>rw</code></p>",
        "id": 126471401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153679
    },
    {
        "content": "<p>I didn't get that (I don't know where <code>subsingleton</code> instances would come from).</p>",
        "id": 126471463,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526153877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (f : ∀ n : ℕ, n &gt; 0 → ℕ) (x : ℕ) (x0 : 0 + x &gt; 0) : f (0 + x) x0 = 1 :=\nby simp; admit\n\nexample (f : ∀ n : ℕ, n &gt; 0 → ℕ) (x : ℕ) (x0 : 0 + x &gt; 0) : f (0 + x) x0 = 1 :=\nby rw zero_add; admit --error: motive is not type correct\n</pre></div>",
        "id": 126471464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153878
    },
    {
        "content": "<p>after the <code>simp</code>, the goal looks like <code>f x _ = 1</code> where <code>_</code> is some proof depending on the equality that was used to rewrite</p>",
        "id": 126471505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153925
    },
    {
        "content": "<p>whereas <code>rw</code> attempts to rewrite to <code>f x x0</code> and then gives up when it finds out this is not type correct</p>",
        "id": 126471513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153960
    },
    {
        "content": "<p><code>subsingleton</code> is a typeclass, it is inferred by typeclass inference</p>",
        "id": 126471517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526153994
    },
    {
        "content": "<p>For example, <code>decidable p</code> is a subsingleton, because any two instances of <code>decidable p</code> must either both be <code>of_true</code> or both <code>of_false</code></p>",
        "id": 126471567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154052
    },
    {
        "content": "<p>oh, \"proof arguments\" as in arguments that are themselves proofs rather than arguments of proofs. I guess all <code>Prop</code>s are subsingletons then?</p>",
        "id": 126471569,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526154060
    },
    {
        "content": "<p>All elements of Prop are subsingletons</p>",
        "id": 126471574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154077
    },
    {
        "content": "<p>if <code>p : Prop</code> and <code>h1 h2 : p</code> then <code>h1 = h2</code></p>",
        "id": 126471575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154095
    },
    {
        "content": "<p>that equality is definitional, but <code>simp</code> will use it even if it is not definitional like in the <code>decidable p</code> example</p>",
        "id": 126471616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154123
    },
    {
        "content": "<p>right, cool</p>",
        "id": 126471621,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526154180
    },
    {
        "content": "<p>what's \"sub\" about this notion of singleton?</p>",
        "id": 126471626,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526154190
    },
    {
        "content": "<p><code>empty</code> is a subsingleton too</p>",
        "id": 126471627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154203
    },
    {
        "content": "<p><code>subsingleton A</code> is defined to mean that if <code>a b : A</code> then <code>a = b</code>; classically that means <code>A</code> is a singleton or empty</p>",
        "id": 126471628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154232
    },
    {
        "content": "<p>ah, of course!</p>",
        "id": 126471629,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526154233
    },
    {
        "content": "<p>\"singleton\" is usually stated as <code>\\ex a, \\all b, a = b</code></p>",
        "id": 126471673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154297
    },
    {
        "content": "<p>subsingleton is what they call proposition in hott land, isn't it? Interestingly, it's one truncation hierarchy level <em>higher</em> than singleton there.</p>",
        "id": 126471774,
        "sender_full_name": "Arseniy Alekseyev",
        "timestamp": 1526154520
    },
    {
        "content": "<p>Yes, if you are familiar with HoTT terminology then \"singleton\" is \"contractible\" is -2 truncated, and \"subsingleton\" is \"proposition\" is -1 truncated. \"set\" or 0 truncated is true of all types in lean, because equality is a proposition.</p>",
        "id": 126471835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154706
    },
    {
        "content": "<p>I also find it a bit funny that -2 truncated types have elements while -1 truncated types may not, but the ordering there makes sense: every -2 truncated type is -1 truncated but not the other way around.</p>",
        "id": 126471879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526154798
    }
]