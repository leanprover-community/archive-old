[
    {
        "content": "<p>At some point Mario told me how to write a \"simplify_proof\" tactic, but in my fiddling with it I seem to have lost the essential magic step where the new, simplified proof is actually installed in place of the original proof:</p>\n<div class=\"codehilite\"><pre><span></span>open tactic\nmeta def simplify_proof {α} (tac : tactic α) : tactic α :=\nλ s,\n  let tac1 : tactic (α × expr) := do\n    a ← tac,\n    r ← result,\n    lems ← simp_lemmas.mk_default,\n    dr ← (lems.dsimplify [] r &lt;|&gt; pure r),\n    pure (a, dr) in\nmatch tac1 s with\n| result.success (a, r) s&#39; := (result &gt;&gt;= unify r &gt;&gt; pure a) s&#39;\n| result.exception msg e s&#39; := result.exception msg e s&#39;\nend\n</pre></div>",
        "id": 127646386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528275860
    },
    {
        "content": "<p>Or am I misunderstanding what this should do?</p>",
        "id": 127646390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528275875
    },
    {
        "content": "<p>Ah, got it! Somewhere along the way I put a spurious ' at the end of the <code>result.success</code> line, preventing the tactic from doing its time travel trick.</p>",
        "id": 127646595,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528276309
    },
    {
        "content": "<p>I sometimes wonder what <code>simp</code> is doing, and I know that I can look, but I can never be bothered. I vaguely suspect there might be times where replacing a call to <code>simp</code> with a call to what it actually does might be better -- am I just living in a dream world do you think? (in the sense that it's unlikely to make any noticeable difference other than obfusctating my code?)</p>",
        "id": 127646896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528276789
    }
]