[
    {
        "content": "<p>Trying to prove <code>lemma minimal (n : ℕ) : degree (X^n : polynomial α) = n := by simp</code> fails with the error  </p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\nα : Type u,\n_inst_1 : decidable_eq α,\n_inst_2 : integral_domain α,\nn : ℕ\n⊢ ↑n = ↑n\n</pre></div>\n\n\n<p>Because of  slightly different coercions </p>\n<div class=\"codehilite\"><pre><span></span>set_option pp.all true\n</pre></div>\n\n\n<p>Produces</p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\nα : Type u,\n_inst_1 : decidable_eq.{u+1} α,\n_inst_2 : integral_domain.{u} α,\nn : nat\n⊢ @eq.{1} (with_bot.{0} nat)\n    (@coe.{1 1} nat (with_bot.{0} nat)\n       (@coe_to_lift.{1 1} nat (with_bot.{0} nat)\n          (@coe_base.{1 1} nat (with_bot.{0} nat)\n             (@nat.cast_coe.{0} (with_bot.{0} nat)\n                (@add_monoid.to_has_zero.{0} (with_bot.{0} nat) (@with_bot.add_monoid.{0} nat nat.add_monoid))\n                (@with_bot.has_one.{0} nat nat.has_one)\n                (@add_semigroup.to_has_add.{0} (with_bot.{0} nat)\n                   (@add_monoid.to_add_semigroup.{0} (with_bot.{0} nat)\n                      (@with_bot.add_monoid.{0} nat nat.add_monoid))))))\n       n)\n    (@coe.{1 1} nat (with_bot.{0} nat) (@coe_to_lift.{1 1} nat (with_bot.{0} nat) (@with_bot.has_coe_t.{0} nat)) n)\n</pre></div>",
        "id": 157837431,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1549604204
    },
    {
        "content": "<p>I have written a minimal example here <a href=\"https://github.com/chocolatier/theoremproving/blob/master/src/coe_mwe.lean\" target=\"_blank\" title=\"https://github.com/chocolatier/theoremproving/blob/master/src/coe_mwe.lean\">https://github.com/chocolatier/theoremproving/blob/master/src/coe_mwe.lean</a></p>",
        "id": 157837487,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1549604283
    },
    {
        "content": "<p>Lean should be able to identify that these two coercions are identical.</p>",
        "id": 157837526,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1549604384
    },
    {
        "content": "<p>In a somewhat related point, the lemma is basically <code>degree_X_pow</code>, which is a simp lemma in data.polynomial.  Using the simp tactic with that specified explicitly works.</p>",
        "id": 157837640,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1549604542
    },
    {
        "content": "<p>Our goal is to show <code>lemma deg_c_times_x_to_n_eq_n (n : ℕ) {c : α} (hc : c ≠ 0) : degree (C c * X^n) = n</code>, which should ideally just be a simp, but currently requires the proof in the linked example.<br>\nIt breaks if we replace </p>\n<div class=\"codehilite\"><pre><span></span> ... = 0 + n : by rw [degree_X_pow] -- simp [degree_X_pow] also works fine.\n</pre></div>\n\n\n<p>with </p>\n<div class=\"codehilite\"><pre><span></span>  ... = 0 + n : by simp\n</pre></div>\n\n\n<p>Producing the same error as the mwe above.</p>",
        "id": 157837883,
        "sender_full_name": "Aditya Agarwal",
        "timestamp": 1549605068
    },
    {
        "content": "<p>there is actually a theorem to prove there. Because <code>with_bot nat</code> is a semiring (because <code>nat</code> is), it has a cast from <code>nat</code>. The value of <code>cast n</code> should be <code>some n</code> though, that needs to be proved</p>",
        "id": 157838689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549606585
    },
    {
        "content": "<p>What is the actual lemma we need here? We can prove</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma nat.cast_with_bot (n : ℕ) : @eq.{1} (with_bot.{0} nat)\n    (@coe.{1 1} nat (with_bot.{0} nat)\n       (@coe_to_lift.{1 1} nat (with_bot.{0} nat)\n          (@coe_base.{1 1} nat (with_bot.{0} nat)\n             (@nat.cast_coe.{0} (with_bot.{0} nat)\n                (@add_monoid.to_has_zero.{0} (with_bot.{0} nat) (@with_bot.add_monoid.{0} nat nat.add_monoid))\n                (@with_bot.has_one.{0} nat nat.has_one)\n                (@add_semigroup.to_has_add.{0} (with_bot.{0} nat)\n                   (@add_monoid.to_add_semigroup.{0} (with_bot.{0} nat)\n                      (@with_bot.add_monoid.{0} nat nat.add_monoid))))))\n       n)\n    (@coe.{1 1} nat (with_bot.{0} nat) (@coe_to_lift.{1 1} nat (with_bot.{0} nat) (@with_bot.has_coe_t.{0} nat)) n) :=\nbegin\n  unfold_coes,\n  induction n,\n  { simp, refl },\n  { dsimp [nat.cast],\n    rw n_ih,\n    refl }\nend\n</pre></div>\n\n\n<p>and all is well (i.e. <code>lemma minimal (n : ℕ) : degree (X^n : polynomial α) = n := by simp</code> works), but that's a really messed up theorem statement...</p>",
        "id": 157901868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549667947
    },
    {
        "content": "<p>One can prove <code>@[simp] lemma nat.foo (n : ℕ) : ((nat.cast n) : with_bot ℕ) = some n :=</code> but it doesn't seem to help.</p>",
        "id": 157901881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549667966
    },
    {
        "content": "<p>that is indeed the lemma we need. I would write it like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot&#39;</span> <span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot&#39;</span>\n</pre></div>",
        "id": 157903120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549669174
    },
    {
        "content": "<p>hasn't some similar issue been raised before?</p>",
        "id": 157903193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549669232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">deg_c_times_x_to_n_eq_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">single_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">degree</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">support_single_ne_zero</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sup_singleton</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 157903520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549669574
    },
    {
        "content": "<p>It gives me a bad feeling that we need these additional <code>cast_with_bot</code> lemmas. We really want some insurance that no one ever defines a coercion <code>nat \\to α</code>, and at the same time defines instances of <code>[has_zero α] [has_one α] [has_add α]</code>, making the two coercions incompatible.</p>",
        "id": 157903772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549669835
    },
    {
        "content": "<p>no, this is part of the contract of writing an additional coercion - you want to show that it commutes with all the other coercions that can be applied with it</p>",
        "id": 157903942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549670006
    },
    {
        "content": "<p>There is a more general lemma here, namely <code>(coe (n : nat) : with_bot A) = coe (coe n : A)</code></p>",
        "id": 157904020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549670070
    },
    {
        "content": "<p>ah yes, this is even easier:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot_cast</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot_cast</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 157904398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549670445
    },
    {
        "content": "<p>Awesome, thanks, that solves the problem nicely.</p>",
        "id": 157904508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot_cast</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"bp\">+_</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">cast_with_bot_cast</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 157904621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549670668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, why do you prefer that one? It just seems more complicated.</p>",
        "id": 157904671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670747
    },
    {
        "content": "<p>it's faster</p>",
        "id": 157904676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549670755
    },
    {
        "content": "<p>We really need to buy you a new computer. :-)</p>",
        "id": 157904831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549670943
    }
]