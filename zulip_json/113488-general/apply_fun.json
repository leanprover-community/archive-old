[
    {
        "content": "<p>I'm trying to get rid of all the small lemmas and tactic I wrote during my undergrad course using Lean. The next thing is <a href=\"https://gist.github.com/PatrickMassot/a54fb57815ce748ebc907d66f491bb0d\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/a54fb57815ce748ebc907d66f491bb0d\">https://gist.github.com/PatrickMassot/a54fb57815ce748ebc907d66f491bb0d</a> which is a small tactic wrapping <code>congr_arg</code>. I know it's kind of stupid, but I didn't feel like explaining to students that going from <code>h : a = b</code> to <code>h : f(a) = f(b)</code> required applying a lemma (especially with a weird name).  In real world we say \"apply f\" to the assumption h, so I wrote <code>apply_fun f at h</code>. Then I generalized to the case of inequalities, but didn't actually use that version in the end. The question is: can I prepare a mathlib PR? I don't expect this tactic to be used much in mathlib itself, but since I managed to get <code>push_neg</code> and <code>contrapose</code>in then maybe teaching tactics are fine.</p>",
        "id": 169644795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562244062
    },
    {
        "content": "<p>I think we could merge that. For inequalities, how do you feed in a proof that f is monotonic?</p>",
        "id": 169645404,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562244549
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 169645804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562244887
    },
    {
        "content": "<p>Is something unclear in the docstring or examples?</p>",
        "id": 169645828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562244908
    },
    {
        "content": "<p>Or maybe you read the Zulip post but not the gist?</p>",
        "id": 169645844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562244926
    },
    {
        "content": "<p>I didn't read the gist. Sorry. Let me do that now</p>",
        "id": 169646309,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562245287
    },
    {
        "content": "<p>There's a <code>mono</code> attribute that the tactic <code>mono</code> uses. You could use it to discharge side goals sometimes</p>",
        "id": 169646426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562245369
    },
    {
        "content": "<p>How would that work?</p>",
        "id": 169646587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562245481
    },
    {
        "content": "<p>Should I try running the mono tactic?</p>",
        "id": 169646601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562245502
    },
    {
        "content": "<p>I think that would be the simplest way to do it</p>",
        "id": 169647309,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562246075
    },
    {
        "content": "<p>I struggle to find any example that would work for tests. There are almost no <code>mono</code> lemma in mathlib <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 169648106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562246710
    },
    {
        "content": "<p>Really? What are you looking for?</p>",
        "id": 169652457,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562250458
    },
    {
        "content": "<p>I found something</p>",
        "id": 169652471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562250480
    },
    {
        "content": "<p>I'll open a PR</p>",
        "id": 169652478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562250482
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1184\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1184\">https://github.com/leanprover-community/mathlib/pull/1184</a></p>",
        "id": 169652923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562250892
    },
    {
        "content": "<p>It looks good</p>",
        "id": 169657307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562255298
    },
    {
        "content": "<p>The name might not be the best</p>",
        "id": 169657313,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562255307
    },
    {
        "content": "<p>I could expect people to understand <code>apply_fun</code> as the same as <code>apply ... in ...</code> in Coq. Against your early intuition, I'd be tempted to mention <code>congr</code> in the name. The tactic might even be unified with <code>congr'</code></p>",
        "id": 169657410,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562255408
    },
    {
        "content": "<p>This is a tactic for students, not Coq users...</p>",
        "id": 169658887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562257173
    },
    {
        "content": "<p>That is true but if we want to put it in mathlib, it has to make sense to more than just your students. And comparing to Coq is useful because they have solved similar problems before so making the same choices that they made at least brings in the thought that they put in their choices. Plus, it's good to not be different when we don't need to</p>",
        "id": 169659067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562257441
    },
    {
        "content": "<p>We'll also want the version where you evaluate <code>f = g</code> on the inputs <code>x = y</code>. Is that supported?</p>",
        "id": 169659199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562257590
    },
    {
        "content": "<p>Simon, what name would make you happy?</p>",
        "id": 169660698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562259406
    },
    {
        "content": "<p>Johan, your version can be obtained by apply_fun followed by rw. I don't see how to make something simpler.</p>",
        "id": 169660726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562259469
    },
    {
        "content": "<p>Patrick, do you think students really prefer <code>apply_fun f at h</code> to <code>rw h</code>? I know they are not the same, but for purposes like this <code>rw</code> is intuitive, and it is the right idiom.</p>",
        "id": 169734875,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1562359419
    },
    {
        "content": "<p>I don't understand this question. Those two tactics don't do the same thing</p>",
        "id": 169736909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562362269
    },
    {
        "content": "<p>How do you want to do the example in tactics.md <a href=\"https://github.com/leanprover-community/mathlib/pull/1184/files\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1184/files\">https://github.com/leanprover-community/mathlib/pull/1184/files</a> with rw?</p>",
        "id": 169737135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562362592
    },
    {
        "content": "<p>have : f x = f y, by rw h,</p>",
        "id": 169737408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562362996
    },
    {
        "content": "<p>40 billion tactics to remember to slightly shorten things isn't necessarily easier than just knowing <code>have</code> and <code>rw</code>, which are more powerful, if more verbose.</p>",
        "id": 169737483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562363151
    },
    {
        "content": "<p>When I want to do this I usually also want to replace the old hypothesis, too, though. So I write something like <code>replace h := congr_arg f h</code>. That is already a bit outside the most commonly used tactics, so I wouldn't mind having a specialized way to write it.</p>",
        "id": 169738494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1562364719
    },
    {
        "content": "<p>With just <code>replace</code> and <code>rw</code>: <code>replace h : f x = f y := by rw h</code></p>",
        "id": 169740345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562367522
    },
    {
        "content": "<p>Though this way one has to write <code>f x = f y</code> explicitly. This might be inconvenient for long <code>x</code> and <code>y</code></p>",
        "id": 169740366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562367583
    },
    {
        "content": "<p>I think none of these alternative capture the fact that we have an atomic operation \"apply f to h\".</p>",
        "id": 169767785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562420852
    },
    {
        "content": "<p>Shall we merge <a href=\"https://github.com/leanprover-community/mathlib/issues/1184\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1184\">#1184</a> then?</p>",
        "id": 169881923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562601941
    },
    {
        "content": "<p>Yes go ahead</p>",
        "id": 170413491,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1562631891
    }
]