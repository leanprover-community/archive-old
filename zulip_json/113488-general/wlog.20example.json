[
    {
        "content": "<p>What about: </p>\n<div class=\"codehilite\"><pre><span></span>Lean: 28f4143be31b7aa3c63a907be5443ca100025ef1\nmathlib: d84af03bdb8ec4e02c96b6262e7b78c8f3de412b\n</pre></div>",
        "id": 124531148,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522682686
    },
    {
        "content": "<p>Thanks</p>",
        "id": 124531422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683089
    },
    {
        "content": "<p>In the mean time I've found that March 27th nightly seems to allow compiling mathlib HEAD</p>",
        "id": 124531475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683152
    },
    {
        "content": "<p>But now <code>rcases</code> doesn't work in my code</p>",
        "id": 124531479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683167
    },
    {
        "content": "<p>I see <code>tactic.rcases_patt.has_reflect._rec_2: trying to evaluate sorry </code> each time I  use <code>rcases</code></p>",
        "id": 124531492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683193
    },
    {
        "content": "<p>Sorry</p>",
        "id": 124531500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683222
    },
    {
        "content": "<p>It's gone now</p>",
        "id": 124531501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683227
    },
    {
        "content": "<p>I missed one server restart</p>",
        "id": 124531502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683232
    },
    {
        "content": "<blockquote>\n<p>Sorry</p>\n</blockquote>\n<p>I can't evaluate that</p>",
        "id": 124531517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522683242
    },
    {
        "content": "<p>Now I need to figure out how <code>wlog</code> is meant to be used</p>",
        "id": 124531558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683279
    },
    {
        "content": "<p>My naive attempt leads to <code> failed to revert '_inst_3', it is a frozen local instance (possible solution: use tactic </code>tactic.unfreeze_local_instances<code> to reset the set of local instances) </code></p>",
        "id": 124531583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683317
    },
    {
        "content": "<p>context is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∪</span> <span class=\"n\">supp</span> <span class=\"n\">g</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 124531634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683367
    },
    {
        "content": "<p>I'm trying to use <code>wlog</code> (without knowing anything about it, only hoping from the name) to say it suffices to prove the statement when <code>x</code> is in the support of <code>f</code></p>",
        "id": 124531657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683431
    },
    {
        "content": "<p>Is that instance used in your proof?</p>",
        "id": 124531658,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522683432
    },
    {
        "content": "<p>What proof?</p>",
        "id": 124531664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683446
    },
    {
        "content": "<p>I have no proof yet</p>",
        "id": 124531666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683452
    },
    {
        "content": "<p>(actually I have one but without <code>wlog</code>)</p>",
        "id": 124531671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683465
    },
    {
        "content": "<p>Right ... and does the part that <code>wlog</code> would replace make use of <code>_inst_3</code>?</p>",
        "id": 124531719,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522683488
    },
    {
        "content": "<p>Of course</p>",
        "id": 124531726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683503
    },
    {
        "content": "<p>everything makes use of that</p>",
        "id": 124531728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683511
    },
    {
        "content": "<p>it's the topological space structure on X</p>",
        "id": 124531732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683520
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L133\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L133\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L133</a></p>",
        "id": 124531739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683531
    },
    {
        "content": "<p>It's curious because <code>wlog</code> shouldn't need to revert anything but <code>f</code>, <code>g</code>, <code>H</code> and <code>h</code></p>",
        "id": 124531833,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522683647
    },
    {
        "content": "<p>Can you show me the command that you're using?</p>",
        "id": 124531843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522683665
    },
    {
        "content": "<p>I'm trying to replace the proof with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fundamental&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∪</span> <span class=\"n\">supp</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">wlog</span>  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∪</span> <span class=\"n\">supp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">compl_union</span> <span class=\"o\">(</span><span class=\"n\">supp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">supp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">f_x</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">compl_supp_subset_fix</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">g_x</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">compl_supp_subset_fix</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n\n\n    <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">g_x</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span>  <span class=\"n\">rw</span> <span class=\"n\">f_x</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">g_x</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">f_x</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124531924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683805
    },
    {
        "content": "<p>I only remove everything inside the first branch of the <code>by_cases</code> and <code>wlog</code> there</p>",
        "id": 124531932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683835
    },
    {
        "content": "<p>Maybe I completely misunderstood what <code>wlog</code> is meant to do</p>",
        "id": 124531980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683872
    },
    {
        "content": "<p>I also don't manage to change the topic of messages that should be elsewhere</p>",
        "id": 124532067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522683996
    },
    {
        "content": "<p>How did you do that?</p>",
        "id": 124532099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522684058
    },
    {
        "content": "<p>I went to one of my messages preceding most of this conversation, I changed its topic and selected the option \"change the topic of everything that came later\"</p>",
        "id": 124532157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522684101
    },
    {
        "content": "<blockquote>\n<p>Maybe I completely misunderstood what <code>wlog</code> is meant to do</p>\n</blockquote>\n<p>I think I misled you. Try <code>wlog h : x ∈ supp f using f g</code> instead.</p>",
        "id": 124532168,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522684142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">intron</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">binders</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∩</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span> <span class=\"err\">∪</span> <span class=\"n\">supp</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">supp</span> <span class=\"n\">f</span>\n<span class=\"err\">⊢</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n</pre></div>",
        "id": 124532230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522684226
    },
    {
        "content": "<p>Is that the only goal being printed?</p>",
        "id": 124532399,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522684528
    },
    {
        "content": "<p>yes</p>",
        "id": 124532471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522684625
    },
    {
        "content": "<p>Ok I'm going to clone your repo and see what I can do</p>",
        "id": 124532600,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522684856
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 124532607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522684867
    },
    {
        "content": "<p>No worries! I found a serious bug in wlog. I'll let you know when I figured out a fix. In the mean time, I hope this is not stopping you</p>",
        "id": 124534063,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522687381
    },
    {
        "content": "<p>No I'm not stopped, I have a working proof (with lot of duplication, hence I thought that would be a good opportunity to learn <code>wlog</code>)</p>",
        "id": 124534127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522687466
    },
    {
        "content": "<p>how is wlog now?</p>",
        "id": 125287082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524110999
    },
    {
        "content": "<p>I don't really think one can use wlog</p>",
        "id": 125287125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524111006
    },
    {
        "content": "<p>I mean, it passed those simple examples in the tests</p>",
        "id": 125287129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524111019
    },
    {
        "content": "<p>Can you show what you tried?</p>",
        "id": 125330112,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524178476
    }
]