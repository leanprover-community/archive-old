[
    {
        "content": "<p>I'm trying to put <code>has_div</code> and <code>has_sub</code> instances on <code>ulift</code>. In <code>algebra/group/ulift.lean</code>, line 29 we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">instance</span> <span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.down</span> <span class=\"bp\">*</span> <span class=\"n\">g.down</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_down</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"bp\">=</span> <span class=\"n\">x.down</span> <span class=\"bp\">*</span> <span class=\"n\">y.down</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So I added the following lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">instance</span> <span class=\"n\">has_div</span> <span class=\"o\">[</span><span class=\"n\">has_div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_div</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.down</span> <span class=\"bp\">/</span> <span class=\"n\">g.down</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">div_down</span> <span class=\"o\">[</span><span class=\"n\">has_div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"bp\">=</span> <span class=\"n\">x.down</span> <span class=\"bp\">/</span> <span class=\"n\">y.down</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>however, <code>to_additive</code> is not transporting <code>has_div</code> to <code>has_sub</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">ulift.has_sub</span>\n<span class=\"c1\">-- ulift.has_sub : has_div (ulift ?M_1)</span>\n</code></pre></div>\n<p>Can I fix it so that <code>@[to_additive]</code> transports <code>has_div</code> to <code>has_sub</code> here?</p>",
        "id": 217869584,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606301816
    },
    {
        "content": "<p>Does <code>attribute [to_additive has_sub] has_div</code> work? I assume we must already have something similar somewhere to connect <code>has_add</code> and <code>has_mul</code></p>",
        "id": 217870355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606302269
    },
    {
        "content": "<p>That was it, or more specifically <code>attribute [to_additive] has_div</code>, since <code>to_additive</code> knows to translate <code>div</code> to <code>sub</code></p>",
        "id": 217870477,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606302353
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a16112d3eac76496b5783e0ea49246d8c0c07377/src/algebra/group/to_additive.lean#L311\">https://github.com/leanprover-community/mathlib/blob/a16112d3eac76496b5783e0ea49246d8c0c07377/src/algebra/group/to_additive.lean#L311</a></p>",
        "id": 217870598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606302408
    },
    {
        "content": "<p>I thought I looked for <code>has_mul</code> and <code>has_add</code> in that file, must have typo'd or something.</p>",
        "id": 217870624,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606302429
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 217870630,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1606302430
    },
    {
        "content": "<p>No problem, consider it as being in return for you having approved my PR :)</p>",
        "id": 217870715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606302463
    }
]