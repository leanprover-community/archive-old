[
    {
        "content": "<p>I want to introduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_set_prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`×ˢ`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">has_set_prod.prod</span>\n</code></pre></div>\n<p>with instances for <code>set</code>s, <code>finset</code>s, <code>sub*</code> structures.</p>",
        "id": 267023179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641441608
    },
    {
        "content": "<p>For non-sets we'll probably need a class that extends <code>has_set_prod</code> and adds an axiom <code>(x, y) ∈ s ×ˢ t = x ∈ s ∧ y ∈ t</code>.</p>",
        "id": 267023271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641441697
    },
    {
        "content": "<p>Actually, we can add some <code>has_mem</code> arguments to <code>has_set_prod</code> and require <code>(x, y) ∈ s ×ˢ t = x ∈ s ∧ y ∈ t</code> right away.</p>",
        "id": 267023333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641441759
    },
    {
        "content": "<p>What do you think? What precedence should I use (72 is just a number above 70 which is used for intersection)?</p>",
        "id": 267023372,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641441796
    },
    {
        "content": "<p>I'm quite a fan of this. Right now we have to use <code>.prod</code> right?</p>",
        "id": 267023394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641441840
    },
    {
        "content": "<p>Yes.</p>",
        "id": 267023636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641442132
    },
    {
        "content": "<p>A downside is that Lean can no longer infer the types of <code>s</code> and <code>t</code> in <code>s ×ˢ t</code> from the type of the expression.</p>",
        "id": 267023728,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641442238
    },
    {
        "content": "<p>This is a good idea! An analogue for pi types would be great too!</p>",
        "id": 267023889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641442476
    },
    {
        "content": "<p>I don't want to do 2 refactors at once. Every time I tried it, I failed and merged none to the master.</p>",
        "id": 267024212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641442932
    },
    {
        "content": "<p>I'll start by migrating <code>set.prod</code>.</p>",
        "id": 267024374,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641443176
    },
    {
        "content": "<p>Here's another sort of design for this that, while isn't quite so universe polymorphic, is able to say how it's related to the Cartesian product:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_set_prod</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">set_prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`×ˢ`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">has_set_prod.set_prod</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_set_prod</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s.prod</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">t</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.prod</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm not sure if there's a good way to fix it, except for it taking three functions as arguments.  Too bad there's not a way, at the typeclass level, to say \"these are all the same function but with different universe variables\", since there's not really a good <code>out_param</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_set_prod</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S''</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">set_prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">S'</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">S''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`×ˢ`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">has_set_prod.set_prod</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_set_prod</span> <span class=\"n\">set</span> <span class=\"n\">set</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s.prod</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">t</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.prod</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 267026912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641446488
    },
    {
        "content": "<p>I don't think that your approach will work better with elaborator. And it won't work with <code>submonoid</code>s because <code>submonoid</code> takes <code>M : Type*</code> and <code>[monoid M]</code>.</p>",
        "id": 267027166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641446844
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11300\">#11300</a></p>",
        "id": 267226383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641581164
    },
    {
        "content": "<p>In the sphere eversion project I'm getting some unfortunate errors like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_set_prod</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Is the intended notation now to give the explicit type to <code>univ</code> when using it in a product, like this: <code>@univ A ×ˢ s</code>?</p>",
        "id": 267707732,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641984477
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 267707828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641984532
    },
    {
        "content": "<p>Probably <code>(univ : set A)</code> is the intended spelling</p>",
        "id": 267710192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641985950
    },
    {
        "content": "<p>I think the problem is that there is no way for <code>×ˢ</code> to know that its left and right arguments are the same type of container, as <code>set A</code> and <code>set B</code> are not even the same families of type when A and B are in different universes</p>",
        "id": 267710262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641985996
    },
    {
        "content": "<p>Maybe there's some janky <code>same_family</code> typeclass we can use like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A class that finds a version of `f`, a family of types in universe `u`,</span>\n<span class=\"sd\">that lives in universe `v` -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">same_family</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>which would help the elaborator with this kind of thing</p>",
        "id": 267712297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641987412
    },
    {
        "content": "<p>Would that work for <code>α</code> and <code>β</code> in different universes? Then we can't use the same <code>ι</code>, right?</p>",
        "id": 267716094,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641990069
    },
    {
        "content": "<p>Oh, good point</p>",
        "id": 267719096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641991819
    },
    {
        "content": "<p>/poll It seems that we have the following options:<br>\ncontinue using <code>set.prod</code>, <code>submonoid.prod</code> etc;<br>\nintroduce different notations for <code>set.prod</code>, <code>submonoid.prod</code> etc;<br>\nhave to specify the type of <code>univ</code> in <code>univ ×ˢ t</code> (and similarly for the empty set)</p>",
        "id": 267798263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642027830
    },
    {
        "content": "<p>Given that we can use dot notation, I'm happy to keep the <code>set.prod</code>, <code>submonoid.prod</code> alternative. This also keeps it in line with all the other type-like operations, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sigma\">docs#finset.sigma</a>, <code>finset.disj_sum</code> (in <a href=\"https://github.com/leanprover-community/mathlib/pull/11355\">#11355</a>), <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.pi\">docs#finset.pi</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.dfinsupp\">docs#finset.dfinsupp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sym\">docs#finset.sym</a>, ...</p>",
        "id": 267798620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642028074
    },
    {
        "content": "<p>We can have notation for <code>s.prod t</code> without specifying which prod is meant</p>",
        "id": 267799888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028807
    },
    {
        "content": "<p>Notation supports that</p>",
        "id": 267799908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028817
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.product\">docs#finset.product</a></p>",
        "id": 267799959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642028848
    },
    {
        "content": "<p>So, should we revert <a href=\"https://github.com/leanprover-community/mathlib/pull/11300\">#11300</a>?</p>",
        "id": 267806953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642032764
    },
    {
        "content": "<p>For what it's worth, I really liked what <a href=\"https://github.com/leanprover-community/mathlib/pull/11300\">#11300</a> did.</p>",
        "id": 267828426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642054667
    },
    {
        "content": "<p>I don't care much either way, but I'll probably keep using <code>.prod</code> myself.</p>",
        "id": 267835132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642061128
    },
    {
        "content": "<p>You can't use <code>.prod</code> with <a href=\"https://github.com/leanprover-community/mathlib/pull/11300\">#11300</a></p>",
        "id": 267926464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642106087
    },
    {
        "content": "<p>(for <code>set</code>s)</p>",
        "id": 267926485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642106098
    },
    {
        "content": "<p>I think that despite this issue of having to provide explicit arguments to <code>univ</code>, I still prefer the new situation over the old one.</p>",
        "id": 267927084,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642106423
    },
    {
        "content": "<p>Oh</p>",
        "id": 267927103,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642106431
    },
    {
        "content": "<p>I prefer the new notation (otherwise I wouldn't have introduced it) but this is not a strong preference. If someone will really wants to revert this change, then I'm OK with it (especially if I'm not the one who resolves conflicts after <code>git revert 2865d8c2278c86</code>).</p>",
        "id": 267927426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642106610
    },
    {
        "content": "<p>I genuinely don't mind much either way, so let's keep it like that for now.</p>",
        "id": 267933520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642109325
    },
    {
        "content": "<p>If we decide to leave this notation for set product, then the next question is whether we should migrate <code>submonoid.prod</code> etc to this notation (e.g., by introducing a typeclass <code>set_like.has_prod</code> that extends <code>has_set_prod</code> and adds an assumption <code>(x, y) ∈ s ×ˢ t ↔ x ∈ s ∧ y ∈ t</code>)?</p>",
        "id": 267957684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642124611
    }
]