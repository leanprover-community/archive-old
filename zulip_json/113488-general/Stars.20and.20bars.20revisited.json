[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a>, we have a PR that claims to \"prove\" stars and bars.</p>\n<p>However, I'd argue that \"stars and bars\" is really a tool for solving combinatorics problems, not a specific problem, which goes roughly as:</p>\n<ul>\n<li>Translate your problem into an analogous problem about stars and bars (by constructing an explicit isomorphism between your problem state, and a stars and bars type</li>\n<li>Solve the stars and bars problem</li>\n</ul>\n<p>Do we want a <code>stars_and_bars</code> type?</p>",
        "id": 277116416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648632227
    },
    {
        "content": "<p>Here's what such a type could look like:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">stars_and_bars</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">stars_and_bars</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stars</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">stars_and_bars</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x.stars</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">star</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bars</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x.bars</span> <span class=\"n\">b'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bar</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">repr_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nil</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">\"⋆\"</span> <span class=\"bp\">++</span> <span class=\"n\">repr_aux</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">++</span> <span class=\"n\">repr_aux</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">s.repr_aux</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">stars_and_bars</span>\n\n<span class=\"sd\">/-- Convert a `k`-tuple summing to `n` to a star and bar representation, by inserting bars</span>\n<span class=\"sd\">between the elements. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tuple_to_stars_and_bars</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">stars_and_bars.nil.stars</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tuple_to_stars_and_bars</span> <span class=\"o\">⟨</span><span class=\"n\">fin.tail</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">bar.stars</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tuple_to_stars_and_bars</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)⟩</span>  <span class=\"c1\">-- (⋆⋆|⋆|⋆⋆⋆)</span>\n</code></pre></div>\n</div></div>",
        "id": 277116552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648632297
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/pull/13063\">#13063</a></p>",
        "id": 277136830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648643705
    },
    {
        "content": "<p>What does it buy us exactly?</p>",
        "id": 277136883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648643737
    },
    {
        "content": "<p>My hope was that translating to and from <code>stars_and_bars</code> would be a bit easier than it turned out to be</p>",
        "id": 277138436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648644519
    },
    {
        "content": "<p>Unfortunately the equation compiler doesn't produce nice equation lemmas for this type</p>",
        "id": 277138513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648644567
    },
    {
        "content": "<p>The main motivation was that it allows to you write \"I'm going to argue this by stars and bars\" in the lean code itself</p>",
        "id": 277138652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648644621
    },
    {
        "content": "<p>Imprecise question I'm sure, but if I can ask it anyhow, is a reasonable \"generalization\" of representing stars and bars finding a way to represent all of the <a href=\"https://en.wikipedia.org/wiki/Twelvefold_way#Overview\">twelvefold way</a> (or the even-more-number-way-generalizations) of which stars and bars is one case? Or are all of those going to be vastly different anyhow?</p>",
        "id": 277156650,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648651850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Just want to mention that the main result in the PR is to show that <code>card (sym α k) = (card α + k - 1).choose k</code>, which basically fits into the twelvefold way since <code>sym α k</code> may be regarded as the type of functions <code>fin k -&gt; α</code> modulo permutations of the domain. There are lots of ways to represent functions between finite types, so whether this counts is subjective. (It would probably be nice to have a \"direct\" formalization of the twelvefold way, too.)</p>",
        "id": 277163948,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648654892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'd like to see something like your variant of stars and bars, since that's the one I'm familiar with, and I agree that it could be useful to solve combinatorics problems. I don't think we should replace <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a> with it, though, since that one is (more or less) giving the cardinality of one of of the cases of the twelvefold way.</p>",
        "id": 277164448,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648655148
    },
    {
        "content": "<p>I definitely wasn't suggesting losing the results in <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a>, just maybe actually using stars and bars in the proof somehow</p>",
        "id": 277166047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648655856
    },
    {
        "content": "<p>I had a go at adding the additional result that actually motivated this thread in <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/stars-and-bars-dependent-hell\">branch#eric-wieser/stars-and-bars-dependent-hell</a>, that <code>stars_and_bars s b ≃ {f : fin b.succ → ℕ // ∑ i, f i = s}</code>. As the name of the branch suggest, I was not able to show the equivalence</p>",
        "id": 277166605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648656066
    },
    {
        "content": "<p>Could you instead try showing it's equivalent to <code>sym (fin b.succ) s</code>? That's defined to be <code>{m : multiset (fin b.succ) // m.card = s}</code>.</p>",
        "id": 277167127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648656278
    },
    {
        "content": "<p>I'm not sure if that's easier, but then what happens is <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a> would give you the cardinality of <code>stars_and_bars</code>.</p>",
        "id": 277167252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648656338
    },
    {
        "content": "<p>The cardinality of <code>stars_and_bars</code>is already in the PR</p>",
        "id": 277167698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648656511
    }
]