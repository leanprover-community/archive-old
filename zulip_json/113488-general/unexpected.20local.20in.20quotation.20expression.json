[
    {
        "content": "<p>Simple <code>expr</code> question: how do I turn a nat into an expression?</p>",
        "id": 159819517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551568443
    },
    {
        "content": "<p>I'm writing a tactic, I have an explicit <code>nat</code> argument, and I want to <code>assertv</code> some lemma, applied to that particular nat.</p>",
        "id": 159819523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551568450
    },
    {
        "content": "<p>e.g. if <code>n : expr</code>, and <code>a : nat</code>, I tried writing <code>to_expr `(trichotomy %%n a)</code>, but I get a \"unexpected local in quotation expression\" error at the <code>a</code>.</p>",
        "id": 159819524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551568457
    },
    {
        "content": "<p>Curiously, the only search result for that error is that line in the source code.</p>",
        "id": 159819525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551568460
    },
    {
        "content": "<p>This works for me.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">):</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"err\">%%</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">g</span>\n</pre></div>",
        "id": 159819846,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551569146
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 159820243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551569824
    },
    {
        "content": "<p>Documented at <a href=\"https://github.com/leanprover-community/mathlib/pull/786\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/786\">https://github.com/leanprover-community/mathlib/pull/786</a></p>",
        "id": 159827765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551582574
    }
]