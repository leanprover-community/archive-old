[
    {
        "content": "<p>If I understand correctly, <code>ring_nf</code> ought to solve both the following goals, by observing that the expressions inside the function application are the same on left and right.  But in fact it solves neither.  Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ `f 0 = f (A - A)`</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `⊢ f (B - A) = f (B - A + 1 - 1)`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284205751,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653707105
    },
    {
        "content": "<p>Does <code>congr, ring</code> work?</p>",
        "id": 284206491,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653708022
    },
    {
        "content": "<p>Yes, sure -- but it should be in scope for <code>ring_nf</code>!  Compare e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>which does work.</p>",
        "id": 284206593,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708197
    },
    {
        "content": "<p>It does not descend into terms once it reaches a ring expression. If <code>f</code> had the type <code>A -&gt; B</code> then it would work</p>",
        "id": 284206835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708514
    },
    {
        "content": "<p>I see!</p>",
        "id": 284206874,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708568
    },
    {
        "content": "<p>Can you explain the rationale here?  If <code>A</code> and <code>B</code> are both (commutative) rings, wouldn't it be just as much work whether or not they're the same ring?</p>",
        "id": 284206930,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708616
    },
    {
        "content": "<p>I suppose you could say that this semantics derives from the fact that <code>ring_nf</code> was originally intended to help debug failed <code>ring</code> applications</p>",
        "id": 284206936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708642
    },
    {
        "content": "<p>It's not about them being different rings; if <code>B</code> was also a ring then it would stop there</p>",
        "id": 284206968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708691
    },
    {
        "content": "<p>it is trying to simplify <code>f 0 = f (A - A)</code> as an equality in rings</p>",
        "id": 284207012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60ring_nf.60.20not.20consistently.20normalizing.3F/near/284206968\">said</a>:</p>\n<blockquote>\n<p>It's not about them being different rings; if <code>B</code> was also a ring then it would stop there</p>\n</blockquote>\n<p>Are you sure?  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 284207051,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708786
    },
    {
        "content": "<p>...no</p>",
        "id": 284207059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708798
    },
    {
        "content": "<p>does <code>ring_nf</code> use simp lemmas? Maybe something else is solving it</p>",
        "id": 284207117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653708864
    },
    {
        "content": "<p>Maybe, yeah.  This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"n\">raw</span>\n</code></pre></div>",
        "id": 284207159,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708948
    },
    {
        "content": "<p>with unsolved goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 284207199,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653708967
    },
    {
        "content": "<p>Aha, it is because the <code>simp</code> stage is able to simplify <code>A + -A</code> to <code>A - A</code> while <code>A - A</code> is already in normal form. This was the same bug that was in <code>ring</code></p>",
        "id": 284207209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709029
    },
    {
        "content": "<p>that said, fixing this bug will make them both fail</p>",
        "id": 284207231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60ring_nf.60.20not.20consistently.20normalizing.3F/near/284207209\">said</a>:</p>\n<blockquote>\n<p>This was the same bug that was in <code>ring</code></p>\n</blockquote>\n<p>When was this?  Not sure I remember the discussion.</p>",
        "id": 284207291,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653709108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12430\">#12430</a></p>",
        "id": 284207312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709172
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 284207340,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653709198
    },
    {
        "content": "<p>oh wait, that is actually about <code>ring_nf</code> as well</p>",
        "id": 284207383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60ring_nf.60.20not.20consistently.20normalizing.3F/near/284207231\">said</a>:</p>\n<blockquote>\n<p>that said, fixing this bug will make them both fail</p>\n</blockquote>\n<p>I guess I'm happy to have the more principled, even if weaker, behaviour.  But as a feature request, I'd love someday to have <code>ring_nf</code> descend into terms.</p>",
        "id": 284207388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653709249
    },
    {
        "content": "<p>Part of the problem is that ring expressions have lots of subterms that are also ring expressions, and if you aren't careful you will be repeating old work (and you might even undo old work or loop depending on how consistently choices are made)</p>",
        "id": 284207542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709448
    },
    {
        "content": "<p>Even if you only \"descend into terms\" for functions <code>f</code> which are not on the fixed list of arithmetic operations?</p>",
        "id": 284207561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653709506
    },
    {
        "content": "<p>I guess we can do this when reifying atoms... I'll try implementing it</p>",
        "id": 284207631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653709585
    },
    {
        "content": "<p>I just remembered another example for motivation/test case, taken from<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/imo/imo2001_q2.lean\">https://github.com/leanprover-community/mathlib/blob/master/archive/imo/imo2001_q2.lean</a><br>\nIf I understand correctly, the proposed change would make the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h.ne'</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284207905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653710037
    },
    {
        "content": "<p>currently it encounters four different atoms </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>",
        "id": 284207958,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1653710092
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14429\">#14429</a></p>",
        "id": 284216826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653724396
    }
]