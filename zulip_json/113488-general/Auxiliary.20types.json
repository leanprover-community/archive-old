[
    {
        "content": "<p>I've been thinking about auxiliary types. Types like <code>additive</code> and <code>multiplicative</code>. Types that help the type-class inference system do its job. Interestingly I don't see a wide use of auxiliary types. I understand that one of the inconveniences is that sometimes you want to refer to elements of the original type, and transferring between the real type and the auxiliary type might prove a bit troublesome. What are your thoughts on auxiliary types?</p>",
        "id": 151490448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544572103
    },
    {
        "content": "<p>So for example there are <code>def</code>initions that should be instances, but is not so because the typeclass system could not possibly figure out the argument. What if we then created auxiliary types to solve this problem?</p>",
        "id": 151490470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544572150
    },
    {
        "content": "<p>auxiliary types can be used to help here</p>",
        "id": 151490751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572525
    },
    {
        "content": "<p>for example, if you have a module on <code>B</code> from a ring hom <code>f : A -&gt; B</code>, then this is a bad instance because the ring hom <code>f</code> is not a typeclass but it is required for the instance. If you have a wrapper type <code>ring_hom_module f := B</code>, then lean can handle it because it is now inferred by unification instead of typeclass inference</p>",
        "id": 151490855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572663
    },
    {
        "content": "<p>This is how <code>Qp</code> works, for example</p>",
        "id": 151490860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572678
    },
    {
        "content": "<p>what is Qp?</p>",
        "id": 151490927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544572744
    },
    {
        "content": "<p>actually never mind, that's not a good example (it is an example of something else)</p>",
        "id": 151490931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572748
    },
    {
        "content": "<p>padic rats</p>",
        "id": 151490937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572759
    },
    {
        "content": "<p>actually I've been using exactly the same example and it has been working great</p>",
        "id": 151490940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544572766
    },
    {
        "content": "<p>I'm now experimenting them on semidirect products</p>",
        "id": 151490947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544572776
    },
    {
        "content": "<p>aha, <code>zmodp</code> is an example</p>",
        "id": 151490959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572799
    },
    {
        "content": "<p>it has an explicit argument <code>hp : prime p</code> so that lean can derive the field instance</p>",
        "id": 151491042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572830
    },
    {
        "content": "<p>semidirect product is a pretty good example</p>",
        "id": 151491051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544572845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it worked great with dihedral</p>",
        "id": 151494819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577255
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/semidirect_product.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/semidirect_product.lean\">https://github.com/kckennylau/Lean/blob/master/semidirect_product.lean</a></p>",
        "id": 151494900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544577387
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 151494983,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1544577510
    },
    {
        "content": "<p>I think we should use auxiliary types for modules</p>",
        "id": 151873964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544953998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you hoped that Kenny would know how to fix modules but he knows several possible solutions. Which is best?</p>",
        "id": 151874110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544954292
    },
    {
        "content": "<p>what is the proposal exactly?</p>",
        "id": 151874162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544954415
    },
    {
        "content": "<p>I don't even understand the outparam proposal, I am still an outparam amateur</p>",
        "id": 151876446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544959269
    },
    {
        "content": "<p>There's an old thread which goes through it which I will dig up at some point</p>",
        "id": 151876486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544959325
    },
    {
        "content": "<p>something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span>\n\n\n<span class=\"kn\">structure</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module_type</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">M</span>\n</pre></div>",
        "id": 151876777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1544959999
    }
]