[
    {
        "content": "<p>When proving that some type is equivalent to a Sigma type, how do you deal with <code>heq</code>s that pop up? Here's an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">⟩,</span> <span class=\"n\">φ.1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- heq occurs here</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>How should the final sorry be proved? By the way, this example is by Kevin Buzzard. The actual, more complicated, situation that inspired this is <a href=\"https://github.com/leanprover-community/mathlib/blob/43b9427b43d748e773cbca6c707138a020a63116/src/field_theory/adjoin.lean#L501\">here</a> if you're curious.</p>",
        "id": 216390557,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124147
    },
    {
        "content": "<p>Turn back and go another way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">φ</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.2.1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 216391680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605124739
    },
    {
        "content": "<p>ohh, nice</p>",
        "id": 216392255,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605124998
    },
    {
        "content": "<p>what exactly does <code>subst</code> do?</p>",
        "id": 216392271,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125009
    },
    {
        "content": "<p>(note that Reid changed <code>inv_fun</code> -- <code>λ ⟨f, φ⟩</code> is not good style when defining data, as you are here.</p>",
        "id": 216392295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125020
    },
    {
        "content": "<p><code>subst</code> takes a proof of <code>A = B</code> and replaces all the <code>A</code>'s everywhere by <code>B</code>'s, or possibly the other way around</p>",
        "id": 216392378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125049
    },
    {
        "content": "<p>oh yeah, I did that just in case it would help and then forgot to mention it</p>",
        "id": 216392406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605125064
    },
    {
        "content": "<p>(Reid's <code>sorry</code> can be filled with <code>simp [h]</code>.)</p>",
        "id": 216392420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605125069
    },
    {
        "content": "<p>it's like <code>rw h at *</code> except that it's more powerful because it rewrites under binders. It literally removes A from the picture.</p>",
        "id": 216392453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605125088
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 216392521,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20heq.20and.20Sigma.20types/near/216392295\">said</a>:</p>\n<blockquote>\n<p>(note that Reid changed <code>inv_fun</code> -- <code>λ ⟨f, φ⟩</code> is not good style when defining data, as you are here.</p>\n</blockquote>\n<p>why is this bad?</p>",
        "id": 216392551,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125130
    },
    {
        "content": "<p>If you look at the goal in the original <code>right_inv</code> it's got some <code>_match_1</code> or whatever junk in it</p>",
        "id": 216392839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605125269
    },
    {
        "content": "<p>more importantly, the version which matches in the lambda is less likely to reduce when applied to something</p>",
        "id": 216392944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605125305
    },
    {
        "content": "<p>though maybe in a case as simple as this one it doesn't really matter, not sure</p>",
        "id": 216392988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605125330
    },
    {
        "content": "<p>by the way, even though the example was originally by Kevin, I was the one who introduced the angle brackets</p>",
        "id": 216393017,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1605125345
    },
    {
        "content": "<p>A very similar question. I'm trying to construct the decidability instance of the lexicographical order on a sigma type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">fiber</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma.lex.decidable_le</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hι'</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">sigma.lex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">hι</span> <span class=\"n\">a.1</span> <span class=\"n\">b.1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">hij</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"k\">match</span> <span class=\"n\">hα</span> <span class=\"n\">_</span> <span class=\"n\">a.2</span> <span class=\"n\">b.2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">convert</span> <span class=\"n\">sigma.lex.fiber</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"c1\">-- Heeelp</span>\n      <span class=\"gr\">sorry</span><span class=\"c1\">-- refine rec_heq_of_heq _ _,</span>\n    <span class=\"kd\">end</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span>\n  <span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Also see <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Order.20on.20.CE.B1.20.E2.8A.95.20.CE.B2\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Order.20on.20.CE.B1.20.E2.8A.95.20.CE.B2</a></p>",
        "id": 263012870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638195093
    },
    {
        "content": "<p>Doing cases on <code>a</code> and <code>b</code> would certainly help but you still need to <code>subst</code> hij as well and I don't know how to do it in term mode. Probably easier to write a careful tactic-mode definition...</p>",
        "id": 263015717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638196510
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.eq\">docs#sigma.eq</a> can help?</p>",
        "id": 263016205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638196719
    },
    {
        "content": "<p>btw <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma.lex\">docs#psigma.lex</a> is the same right?</p>",
        "id": 263017197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638197171
    },
    {
        "content": "<p>Not quite, because it's taking arbitrary relations in.</p>",
        "id": 263017294,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638197214
    },
    {
        "content": "<p>I think we're just missing an <code>iff</code> lemma for the lexicographic order</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">fiber</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">sigma.lex</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sigma.lex</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.1</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">h.rec</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">q.2</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ij</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">ab</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">ij</span> <span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sigma.lex.base</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sigma.lex.fiber</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigma.lex.decidable_le</span> <span class=\"o\">[</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hι'</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">sigma.lex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">infer_instance</span> <span class=\"o\">(</span><span class=\"n\">le_iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 263017398,
        "sender_full_name": "David Wärn",
        "timestamp": 1638197257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20heq.20and.20Sigma.20types/near/263017294\">said</a>:</p>\n<blockquote>\n<p>Not quite, because it's taking arbitrary relations in.</p>\n</blockquote>\n<p>This is irrelevant, but on the other hand <code>sigma</code> and <code>psigma</code> are not the same.</p>",
        "id": 263019143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638198004
    },
    {
        "content": "<p>There's something a bit funny about this decidability instance (which I was realizing was also going to be an issue with using <code>subst</code>), namely that <code>decidable_le</code> for <code>sigma.lex</code> might not reduce to a constructor even if the inputs <code>hι'</code> and <code>hα</code> always do. I think this is intrinsic to the question though.</p>",
        "id": 263019610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638198213
    },
    {
        "content": "<p>I think what happens is that if you try to decide <code>(a, b) &lt;= (x, y)</code> where <code>h : a = x</code> holds propositionally but not judgementally, then this decidability instance will get stuck trying to compute <code>h.rec b</code>. Indeed this should be intrinsic to the question. You can get around it in the non-dependent case, but it would require another decidability instance (since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_rec_constant\">docs#eq_rec_constant</a> isn't proved by <code>rfl</code>)</p>",
        "id": 263021957,
        "sender_full_name": "David Wärn",
        "timestamp": 1638199247
    }
]