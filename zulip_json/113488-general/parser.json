[
    {
        "content": "<p>Mario once told me that Lean's parser was an Operator-precedence parser. The manual tells me it's a Pratt-style parser. Is it a top down parser? Furthermore, will the Lean 4 Parser be all of these things, or is this not yet known? I have some very primitive notes on parsers but they are so full of questions that I thought I'd better answer some of them before I started making it public.</p>",
        "id": 123663841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520962803
    },
    {
        "content": "<p>For notation parsing, the new parser will be all of these things as well. The title of Pratt's original paper is \"Top down operator precedence\".</p>",
        "id": 123664075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520963197
    },
    {
        "content": "<p>Any chance that the new parser will have a literate mode like in Haskell?</p>",
        "id": 123664965,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520964505
    },
    {
        "content": "<p>my understanding is the parser will be completely extendable in lean, which means a user could implement their own literate mode if they wanted. am i wrong?</p>",
        "id": 123665065,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520964635
    },
    {
        "content": "<p>about a year ago i looked into extending asciidoc with lean support in vscode, i really wanted inline TeX rendering and lean code cells in the same document</p>",
        "id": 123665138,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520964779
    },
    {
        "content": "<p>but apparently i didn't want it badly enough to finish it :)</p>",
        "id": 123665235,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520964916
    },
    {
        "content": "<p>That would be one way to do it. I would still prefer native support so that everything can be treated as snippets but, more importantly, so that you can have a mean to weaken the strict declaration order. For example, I would like to see something like this:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;&lt;aux-decl&gt;&gt;\n\n&gt; def my_fun := -- uses aux declaration\n\nHere I explain my_fun. And now I explain how I construct everything in &lt;&lt;&lt;aux-decl&gt;&gt;&gt; that I haven&#39;t shown yet:\n\n&lt;&lt;begin aux-decl&gt;&gt;\n&gt; def my_fun_aux1 := -- some of the magic\n\nExplain, explain, now one more decl:\n\n&gt; def my_fun_aux2 := -- the rest of the magic\n\nTada!\n&lt;&lt;end aux-decl&gt;&gt;\n</pre></div>",
        "id": 123666238,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520966223
    },
    {
        "content": "<p>that's... a lot of lookahead</p>",
        "id": 123668193,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520968902
    },
    {
        "content": "<p>For not much gain IMHO :).</p>",
        "id": 123668249,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520968984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> I disagree. This will help write live documentation. What is worse than no documentation is having documentation that is wrong. I want to write documentation and have it part of the test suites so that we're forced to upgrade it as we move forward with the development</p>",
        "id": 123670070,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520971799
    },
    {
        "content": "<p>But maybe what you mean is that breaking the flow is not worth all that. Again, I disagree. When you write a tutorial, you have to adapt your narrative to follow a realistic sequence of inventions. Often, the first code I write ends up at the end of a file. I think that's the best code to start an explanation with because it justifies all the other inventions in the file</p>",
        "id": 123670177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520971945
    },
    {
        "content": "<p>Let's face it, if Lean or Mathlib were written in this way then it would be a darn sight easier to learn.</p>",
        "id": 123670255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520972135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> It is a lot of look ahead but this is not C. When C was invented, they had to arrange the syntax so that they would store as little of a program's syntax tree in memory at any time which is why you need a function's declaration before its definition if you want to call it before it's declared. In our situation, the main reason for forcing the order of declaration is to force a topological order in the between the proofs that refer to each other. I'm not sure if Lean keeps a file's whole syntax tree in memory at any one time but it doesn't strike me as the main design criterion</p>",
        "id": 123670256,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520972136
    },
    {
        "content": "<p>yes, but i feel like one of the main design criterions is to make lean performant</p>",
        "id": 123671350,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520973766
    },
    {
        "content": "<p>i only made that observation because I doubt Leo will get on board with having that be part of core lean since it slows down parsing and compilation, when the process is already fairly slow</p>",
        "id": 123671378,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520973826
    },
    {
        "content": "<p>you can always port cweave and ctangle to lean :) if it was good enough for knuth, it might be good enough for simon, haha</p>",
        "id": 123671562,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520974062
    },
    {
        "content": "<p>I think the question is: is this the slow part of the process?</p>",
        "id": 123671567,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974077
    },
    {
        "content": "<p>What if Simon is more demanding? <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 123671611,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974094
    },
    {
        "content": "<p>The other benefit of having it in Lean itself is that you could benefit from the Lean server while writing Lean documentation</p>",
        "id": 123671633,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974130
    },
    {
        "content": "<blockquote>\n<p>I think the question is: is this the slow part of the process?</p>\n</blockquote>\n<p>as a mere user, i have no idea, but i'm always interested in being educated</p>",
        "id": 123671651,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520974170
    },
    {
        "content": "<p>On performance again: if it can be disabled for most files it shouldn't slow anything down</p>",
        "id": 123671652,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974173
    },
    {
        "content": "<p>I have no idea either. I was hoping to get enlightened</p>",
        "id": 123671666,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974194
    },
    {
        "content": "<p>Perhaps a compromise. Pull the C trick - have a prototype to have the declaration beforehand and then put the proof + explanation + documentation wherever you want?</p>",
        "id": 123671729,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520974236
    },
    {
        "content": "<p>I feel like I shouldn't like your idea but I really do</p>",
        "id": 123671764,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974322
    },
    {
        "content": "<p>It could be something like:</p>\n<div class=\"codehilite\"><pre><span></span>forward my_fun_aux1, my_fun_aux2\n</pre></div>\n\n\n<p>where the order matters</p>",
        "id": 123671797,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974360
    },
    {
        "content": "<p>exactly</p>",
        "id": 123671813,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520974402
    },
    {
        "content": "<p>This is really cool actually :) and can be completely separate from any literate mode</p>",
        "id": 123671899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974559
    },
    {
        "content": "<p>Now I'm wondering how that should interact with other features:</p>\n<div class=\"codehilite\"><pre><span></span>forward something.my_fun_aux\n\ndef my_fun := my_fun_aux foo\n\nnamespace something\nvariable x : int\ndef my_fun_aux := x + 3\nend something\n</pre></div>",
        "id": 123672096,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520974820
    },
    {
        "content": "<p>Damn I really want to do this now ^^.</p>",
        "id": 123672449,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520975351
    },
    {
        "content": "<p>Maybe I should work in advertisement :P</p>",
        "id": 123672464,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520975384
    }
]