[
    {
        "content": "<p>What's the <code>to_additive</code> tag on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_monoid\">docs#canonically_ordered_monoid</a> supposed to achieve? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid\">docs#canonically_ordered_add_monoid</a> already exists by that point.</p>",
        "id": 260215440,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635985519
    },
    {
        "content": "<p>It registers the fact that <code>canonically_ordered_add_monoid</code> is the additive version of <code>canonically_ordered_monoid</code>.</p>",
        "id": 260216924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635987096
    },
    {
        "content": "<p>To expand on what Yury said: <code>to_additive</code> cannot automatically create an additive structure/class (there are some automatically generated declarations - like the projections - that we cannot easily generate using metaprogramming). <br>\nBut we still need tot tell <code>to_additive</code> that <code>canonically_ordered_add_monoid</code> is the additive version of <code>canonically_ordered_monoid</code> and that the declarations generated automatically by <code>canonically_ordered_monoid</code> also are matched up with their additive counterparts.</p>",
        "id": 260242114,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636015587
    },
    {
        "content": "<p>Interesting! I didn't know about that.</p>",
        "id": 260280648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636037562
    },
    {
        "content": "<p>However it doesn't work on <code>def</code>?</p>",
        "id": 260281028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636037674
    },
    {
        "content": "<p>It also works on <code>def</code>. We sometimes first give the additive <code>def</code>, and then the multiplicative <code>def</code> marked with a <code>to_additive</code> attribute. This is sometimes necessary when we hit one of the limitations to <code>to_additive</code>.</p>",
        "id": 260282631,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636038232
    },
    {
        "content": "<p>I tried to do this in <code>data.list.defs</code> but it doesn't work. Is it just because <code>to_additive</code> doesn't exist yet at that point?</p>",
        "id": 260282844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636038309
    },
    {
        "content": "<p>Most likely. Note that you can also do it in the other direction if the file is a dependency of <code>to_additive</code>, i.e. you can add the attribute to all the core files inside the file that declares <code>to_additive</code></p>",
        "id": 260283018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636038371
    },
    {
        "content": "<p>Most likely. I think the file that defines to_additive adds the attribute on a bunch of things that appeared earlier in the import graph for exactly this reason</p>",
        "id": 260283111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636038414
    },
    {
        "content": "<p>I don't think <code>data.list.defs</code> even knows the vocabulary to talk about groups and additive groups</p>",
        "id": 260283170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636038438
    },
    {
        "content": "<p>It was to link <code>alternating_sum</code> and <code>alternating_prod</code>.</p>",
        "id": 260283396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636038525
    },
    {
        "content": "<p>You should probably do this retroactively in some list file that has basic tactics (maybe <code>data.list.basic</code>?)</p>",
        "id": 260293410,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042162
    },
    {
        "content": "<p>similar: <a href=\"https://github.com/leanprover-community/mathlib/blob/de79226c64ab6177029fdbd069fdfe40d252f7cd/src/data/list/basic.lean#L2396\">https://github.com/leanprover-community/mathlib/blob/de79226c64ab6177029fdbd069fdfe40d252f7cd/src/data/list/basic.lean#L2396</a></p>",
        "id": 260293613,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042221
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- list.sum was already defined in defs.lean, but we couldn't tag it with `to_additive` yet.</span>\n</code></pre></div>",
        "id": 260293651,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042235
    },
    {
        "content": "<p>Yeah, that's what was being done, and that's how I kept it: <a href=\"https://github.com/leanprover-community/mathlib/issues/10164\">#10164</a></p>",
        "id": 260295187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636042802
    },
    {
        "content": "<p>Given that this confused you, can you add a docstring to <code>list.alternating_prod</code> that the <code>to_additive</code> is added later and why.</p>",
        "id": 260295618,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042946
    },
    {
        "content": "<p>A regular comment would make more sense IMO</p>",
        "id": 260306727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636047203
    },
    {
        "content": "<p>I've put both <code>to_additive</code>ization in a section with a comment.</p>",
        "id": 260307150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636047386
    }
]