[
    {
        "content": "<p>What's the \"canonical\" proof that the Types A and B are empty. I proved it by reference to the auxiliary <code>A._mut_</code>. Is there a nicer way?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n<span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n</pre></div>",
        "id": 137132804,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541287380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n<span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"k\">with</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_sort</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 137132957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541287705
    },
    {
        "content": "<p>Of course.</p>",
        "id": 137132960,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541287734
    },
    {
        "content": "<p>Are there any recursors that look a bit like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">reca</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Ca</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Cb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Ca</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Cb</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Cb</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Ca</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">Ca</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 137133128,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541288126
    },
    {
        "content": "<p>you can write one</p>",
        "id": 137133175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541288221
    }
]