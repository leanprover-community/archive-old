[
    {
        "content": "<p>Quiz question: if you take <a href=\"https://github.com/leanprover-community/mathlib/blob/2cfba3dd216d23dfca9ff0609f594981f3d26b1d/src/field_theory/primitive_element.lean\">commit 2cfba3dd</a> and add the following declaration before the last line of  <code>src/intermediate_field/adjoin.lean</code>, which one will work and which one will time out? (Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/intermediate_field.adjoin.power_basis\">docs#intermediate_field.adjoin.power_basis</a> has one explicit argument, namely <code>is_integral</code>).</p>\n<p><span aria-label=\"a\" class=\"emoji emoji-1f170\" role=\"img\" title=\"a\">:a:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">power_basis_of_finite_of_separable</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F_sep</span> <span class=\"o\">:</span> <span class=\"n\">is_separable</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_basis</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exists_primitive_element</span> <span class=\"n\">F_sep</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exists_primitive_element</span> <span class=\"n\">F_sep</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span><span class=\"o\">,</span>\n<span class=\"n\">power_basis.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">adjoin.power_basis</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">F_sep.is_integral</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">((</span><span class=\"n\">intermediate_field.equiv_of_eq</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">intermediate_field.top_equiv</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or <span aria-label=\"b\" class=\"emoji emoji-1f171\" role=\"img\" title=\"b\">:b:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">power_basis_of_finite_of_separable</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F_sep</span> <span class=\"o\">:</span> <span class=\"n\">is_separable</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_basis</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exists_primitive_element</span> <span class=\"n\">F_sep</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exists_primitive_element</span> <span class=\"n\">F_sep</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span><span class=\"o\">,</span>\n<span class=\"n\">power_basis.map</span> <span class=\"o\">(</span><span class=\"n\">adjoin.power_basis</span> <span class=\"o\">(</span><span class=\"n\">F_sep.is_integral</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">((</span><span class=\"n\">intermediate_field.equiv_of_eq</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">intermediate_field.top_equiv</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/8fb1740f5a873ddf6c3bc713d36b0584d84f9ff9/src/field_theory/primitive_element.lean#L197\">Spoiler</a></p>",
        "id": 243790369,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624543318
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/8073/files#diff-7b3b19adb8cc7758f4769d381c95c7230ff182033ccb599ca39c55012b0b9b1f\">Spoiler 2: I ended up going with this</a></p>",
        "id": 243794947,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624545219
    }
]