[
    {
        "content": "<p>I have been getting annoyed by the diamonds you get with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_nat\">docs#algebra_nat</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_int\">docs#algebra_int</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_rat\">docs#algebra_rat</a> versus e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a>. The correct solution is to use forgetful inheritance to define the <code>algebra_{nat,int,rat}</code> instances: the <code>to_fun</code> and <code>smul</code> fields in <code>algebra_nat</code> should be set using the <code>[semiring R]</code> instance being passed in; an analogous statement should hold for <code>algebra_int</code> and <code>algebra_rat</code>. More specifically,</p>\n<ul>\n<li>a <code>semiring R</code> instance should contain <code>of_nat : ℕ → R</code> in addition to the <code>nsmul</code> field</li>\n<li>a <code>ring R</code> instance should contain <code>of_int : ℤ → R</code> in addition to the <code>zsmul</code> field</li>\n<li>the combination of <code>division_ring R</code> and <code>char_zero R</code> should contain <code>of_rat : ℚ → R</code> and <code>qsmul : ℚ → R → R</code></li>\n</ul>\n<p>First issue: it's not totally trivial where <code>of_rat</code> should come from, since the current <code>algebra_rat</code> definition takes two instance params. I suppose putting it in <code>division_ring</code> works well enough.</p>\n<p>Second issue: if we redefine the algebra instances, should we also redefine the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.cast_coe\">docs#int.cast_coe</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.cast_coe\">docs#rat.cast_coe</a> instances? In particular, the current state of defeq is <code>@@algebra_map _ some_other_algebra ℕ R ≠ @@algebra_map _ algebra_nat ℕ R 0 = ↑0 = 0</code>, should we move the non-defeq one or two steps to the right? Similar for <code>ℤ</code> and <code>ℚ</code>.</p>\n<p>Assuming we also redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a>, where should <code>of_nat</code> actually live, since <code>cast_coe</code> currently requires only notation (<code>[has_zero α] [has_one α] [has_add α]</code>) and no proofs? Similar for <code>ℤ</code>. For <code>ℚ</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.cast_coe\">docs#rat.cast_coe</a> takes a <code>division_ring</code> as parameter so it works fine if we put <code>of_rat</code> in <code>division_ring</code>.</p>",
        "id": 286814983,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655741307
    },
    {
        "content": "<p>And restricting the coercion from <code>ℕ</code> to only (non-assoc) semirings isn't going to work, since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top\">docs#with_top</a> currently has a coercion from <code>ℕ</code> but isn't a semiring.</p>",
        "id": 286815261,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655741462
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  was working on a solution for <code>of_nat</code> with <code>add_monoid_with_one</code>, but I'm not sure where the PR is</p>",
        "id": 286815353,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655741518
    },
    {
        "content": "<p>it's a pretty big one IIRC</p>",
        "id": 286815361,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655741523
    },
    {
        "content": "<p>For the moment I'll concentrate on the <code>ℚ</code> algebra diamond only, since I don't see any big obstacles at this moment.</p>",
        "id": 286815510,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655741604
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">#12182</a> already adds <code>of_nat</code> and <code>of_int</code> (edit: that's the PR <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> is referring to)</p>",
        "id": 286819888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655744598
    },
    {
        "content": "<p>I created the PR series fixing the ℚ algebra diamond (once I've resolved any build errors). First a set of PRs for readjusting the import hierarchy:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/14849\">#14849</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/14890\">#14890</a></li>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14893\">#14893</a><br>\nAnd the PR redefining <code>algebra_rat</code> to make use of new <code>of_rat</code> and <code>qsmul</code> fields in <code>division_ring</code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14894\">#14894</a></p>\n</li>\n</ul>",
        "id": 287041291,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655898453
    }
]