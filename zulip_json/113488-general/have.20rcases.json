[
    {
        "content": "<p>For a very long time, I desired a tactic <code>havec</code> such that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">havec</span> <span class=\"bp\">⟨...⟩</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(or <code>havec ⟨...⟩ : ..., from ....</code>) has the effect of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">},</span>\n<span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">⟨...⟩</span>\n</pre></div>\n\n\n<p>And I saw when translating the Hahn-Banach proof that SSReflect has it, and they use it all the time. I could try to hack something, but maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> could do that in two minutes. It would be nice to have it for the <del>philosophy</del> <span aria-label=\"boxing glove\" class=\"emoji emoji-1f94a\" role=\"img\" title=\"boxing glove\">:boxing_glove:</span> talk on Thursday.</p>",
        "id": 168451820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560889251
    },
    {
        "content": "<p>We usually call this <code>let</code> in term mode</p>",
        "id": 168452351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560889629
    },
    {
        "content": "<p>I know it works in term mode, I used it during my <a href=\"https://github.com/leanprover-community/mathlib/pull/1137#issuecomment-502906376\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1137#issuecomment-502906376\">jetlag insomnia</a> last night. But I'd like to get it in tactic mode.</p>",
        "id": 168452483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560889727
    },
    {
        "content": "<p>I mean maybe <code>havec</code> isn't the most consistent choice of name</p>",
        "id": 168452524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560889762
    },
    {
        "content": "<p>Oh I don't care at all about the name, I'd like to get the tactic!</p>",
        "id": 168453011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890120
    },
    {
        "content": "<p>But I guess we can't reuse the name <code>let</code></p>",
        "id": 168453124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890205
    },
    {
        "content": "<p>Johannes mentioned also once something we have in Isabelle:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>which would be the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>without the need to <code>assume n</code> in the proof. Of course, if there is just one variable this is minor, but if there are several it is really handy.</p>",
        "id": 168453146,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560890227
    },
    {
        "content": "<p>Otherwise we could have <code>rintros</code> and <code>rcases</code> replacing their weaker analoues</p>",
        "id": 168453147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890229
    },
    {
        "content": "<p>I noticed SSReflect also has this, but it looks less crucial to me</p>",
        "id": 168453171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890263
    },
    {
        "content": "<p>(I know Mario seems to be in a good mood today, but let's not ask too much at the same time)</p>",
        "id": 168453296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890367
    },
    {
        "content": "<p>These could replace have/let in principle</p>",
        "id": 168453581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890635
    },
    {
        "content": "<p>have/let with args is also something that is available in term mode</p>",
        "id": 168453646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890673
    },
    {
        "content": "<blockquote>\n<p>These could replace have/let in principle</p>\n</blockquote>\n<p>how?</p>",
        "id": 168453714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890732
    },
    {
        "content": "<p>they extend the syntax</p>",
        "id": 168453804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890776
    },
    {
        "content": "<p>so you can have <code>have &lt;foo&gt; | &lt;bar&gt; := bla</code> and <code>have &lt;foo&gt; | &lt;bar&gt; : bla := bla</code>  as well</p>",
        "id": 168453832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890811
    },
    {
        "content": "<p>although there is no real distinction with <code>let</code> when you are pattern matching</p>",
        "id": 168453885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890853
    },
    {
        "content": "<p>if anything, <code>let &lt;foo&gt; := bla in bla</code> is misnamed</p>",
        "id": 168453916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560890881
    },
    {
        "content": "<p>but I guess all this is defined in core, so why not doing a mathlib version that you would call as you wish?</p>",
        "id": 168453992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1560890921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> How possible / efficient would it be to set up all the interactive core tactics as replacers? That is, they can be changed after the fact, mediated by an attribute or similar</p>",
        "id": 168454402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891254
    },
    {
        "content": "<p>If by that you mean that they should do an indirection via an attribute when called, then that wouldn't help with changing their signature, which is encoded in the type, not the body, would it?</p>",
        "id": 168454800,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560891568
    },
    {
        "content": "<p>That's true, but not entirely insurmountable in user code. You can have the tactic argument parser itself be a replacer</p>",
        "id": 168454898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891633
    },
    {
        "content": "<p>Still, I'm thinking more along the lines of core lean support for a pattern like this</p>",
        "id": 168454941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891675
    },
    {
        "content": "<p>Uhh... that doesn't sound like fun to implement</p>",
        "id": 168454955,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560891692
    },
    {
        "content": "<p>I think you just have to tweak how reading <code>cases</code> in a tactic block translates to looking up the tactic <code>tactic.interactive.cases</code></p>",
        "id": 168455076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891754
    },
    {
        "content": "<p>if that lookup mechanism was configurable, we could change it to point at some other definition with a different signature</p>",
        "id": 168455127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891795
    },
    {
        "content": "<p>Sure, that sounds much more reasonable than doing the replacement inside the core tactics. I had a PR once that implemented something like that, but it never landed for Lean 3.</p>",
        "id": 168455330,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560891958
    },
    {
        "content": "<p>the replacer approach is only for today's lean which doesn't give us any other options</p>",
        "id": 168455387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560891984
    }
]