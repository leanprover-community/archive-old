[
    {
        "content": "<p>Is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">euclidean.dist</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>My impression is that's it's not necessarily even provable</p>",
        "id": 282605550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652775048
    },
    {
        "content": "<p>There is no condition that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_euclidean\">docs#to_euclidean</a> is length-preserving, in general it isn't. In particular <code>euclidean.dist (0 : ℝ) 1</code> can be any positive real number.</p>",
        "id": 282608021,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652776544
    },
    {
        "content": "<p>Should this really be a def and not an existential?</p>",
        "id": 282608111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652776577
    },
    {
        "content": "<p>I thought I wanted more information, but you should probably just avoid using it on inner product spaces. And use e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_bump_of_inner\">docs#cont_diff_bump_of_inner</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_bump\">docs#cont_diff_bump</a></p>",
        "id": 282608193,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652776634
    },
    {
        "content": "<p>I guess my complaint is that the name suggests that this is going to give some useful euclidean distance, not just a proof that you could have one</p>",
        "id": 282608333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652776699
    },
    {
        "content": "<p>In particular, people wanted to use it for euclidean geometry.</p>",
        "id": 282608414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652776752
    },
    {
        "content": "<p>It does something else: define some euclidean distance on finite-dimensional normed vector spaces.<br>\nIf you want to do euclidean geometry, just use <code>dist</code>.</p>",
        "id": 282608651,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652776897
    },
    {
        "content": "<p>Yes of course. My point is that this is a wrongly tentative name.</p>",
        "id": 282609088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652777113
    },
    {
        "content": "<p>I'm fine with a rename (pinging <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>)</p>",
        "id": 282609210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652777195
    },
    {
        "content": "<p>Here's the \"proof\" that it's unprovable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.euclidean_dist</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">euclidean.dist</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_two</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_two</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">real.rpow_left_inj_on</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">real.rpow_nonneg_of_nonneg</span> <span class=\"n\">this</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span><span class=\"o\">),</span> <span class=\"n\">real.rpow_one</span><span class=\"o\">],</span>\n      <span class=\"n\">norm_num</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">euclidean.dist</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">to_euclidean</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_equiv.of_finrank_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">linear_equiv.coe_to_continuous_linear_equiv'</span><span class=\"o\">,</span> <span class=\"n\">finite_dimensional.linear_equiv.of_finrank_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">pi_Lp.dist</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">pi.zero_apply</span><span class=\"o\">,</span> <span class=\"n\">dist_zero_left</span><span class=\"o\">,</span> <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span>\n    <span class=\"n\">real.rpow_two</span><span class=\"o\">,</span> <span class=\"n\">sq_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_two</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">module.free.finrank_prod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"n\">hd.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv.sum_comp</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">fin.sum_univ_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">],</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- ⇑(classical.choice _) (3, 4) (⇑(fin.cast _) 0) ^ 2</span>\n  <span class=\"c1\">--   + ⇑(classical.choice _) (3, 4) (⇑(fin.cast _) 1) ^ 2 = 3 ^ 2 + 4 ^ 2</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282609854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652777641
    },
    {
        "content": "<p>Just a comment in the docstring explaining that it doesn't necessarily preserve the <code>dist</code> on spaces that are already euclidean would be useful.</p>",
        "id": 282611020,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1652778331
    },
    {
        "content": "<p>Feel free to rename the namespace as you wish.</p>",
        "id": 282636755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652792728
    }
]