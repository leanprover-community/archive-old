[
    {
        "content": "<p>Is this behavior expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- ⊢ s &lt; s.succ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- ⊢ b &lt; b.succ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">s.succ</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"n\">b.succ</span>  <span class=\"c1\">-- ⊢ s &lt; s.succ, ⊢ b &lt; b.succ</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.1</span> <span class=\"bp\">+</span> <span class=\"n\">f.2</span><span class=\"o\">))⟩]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Shouldn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded_tactics.trivial_nat_lt\">docs#well_founded_tactics.trivial_nat_lt</a> be handling this?</p>",
        "id": 277121713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648635173
    },
    {
        "content": "<p>What's failing is stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">default_dec_tac</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span>\n</code></pre></div>\n<p>I see. So your question is really whether this should fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">well_founded_tactics.trivial_nat_lt</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Hmm. That tactic appears to have no docstring :-/</p>",
        "id": 277133268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648642077
    },
    {
        "content": "<p>That tactic appears to have no docstring, but it looks like meta code I can kind of guess what it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">trivial_nat_lt</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">comp_val</span>\n<span class=\"bp\">&lt;|&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">nat.zero_lt_one_add</span><span class=\"o\">]</span>\n<span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">assumption</span>\n<span class=\"bp\">&lt;|&gt;</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">check_target_is_value_lt</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">nat.lt_add_right</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">trivial_nat_lt</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">nat.lt_add_left</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">trivial_nat_lt</span><span class=\"o\">))</span>\n<span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">failed</span>\n</code></pre></div>\n<p>None of <code>nat.zero_lt_one_add</code>, <code>nat.lt_add_right</code>, <code>nat.lt_add_left</code> and <code>assumption</code> can close <code>0+b&lt;0+b.succ</code> so perhaps it's not surprising that it fails?</p>",
        "id": 277133938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648642349
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/b35d4695da88139a9168f2ad7acf0782e66dc4f0/library/init/meta/well_founded_tactics.lean#L205\">https://github.com/leanprover-community/lean/blob/b35d4695da88139a9168f2ad7acf0782e66dc4f0/library/init/meta/well_founded_tactics.lean#L205</a> runs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded_tactics.cancel_nat_add_lt\">docs#well_founded_tactics.cancel_nat_add_lt</a> first</p>",
        "id": 277136547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648643566
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">well_founded_tactics.cancel_nat_add_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">well_founded_tactics.trivial_nat_lt</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is more accurate</p>",
        "id": 277136602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648643599
    },
    {
        "content": "<p>The question of is this expected seems a bit hard to answer as these things are all lacking much documentation, some of these tactics are even implemented in C. The MWE is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">id</span><span class=\"o\">⟩]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and this fails even in lean 3.4.2 so this isn't some mathlib-induced regression it seems.<br>\nFor comparison the Lean 4 analogue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>works out of the box</p>",
        "id": 277138677,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648644635
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/lean/pull/710\">lean#710</a> to add this lemma</p>",
        "id": 277139581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648645028
    },
    {
        "content": "<p>Given that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_succ_self\">docs#nat.lt_succ_self</a> is basically half the definition of <code>lt</code>, I think it can be argued to be \"trivial\" enough for <code>trivial_nat_lt</code>.</p>",
        "id": 277139769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648645103
    }
]