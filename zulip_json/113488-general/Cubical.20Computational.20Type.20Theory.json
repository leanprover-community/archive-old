[
    {
        "content": "<p>I would like to know if it is possible to use <em>Cubical Computational Type Theory</em>  for everyday computing?</p>",
        "id": 166865697,
        "sender_full_name": "Uros Nedic",
        "timestamp": 1559171424
    },
    {
        "content": "<p>(Cartesian) Cubical Computational Type Theory is a logical framework. You'd need an implementation of it to do everyday computing.<br>\nGiven such an implementation, would it be possible to compute ordinary things? Yes. Would it be efficient? Probably not, similar to Lean's kernel computation.</p>",
        "id": 166867566,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559173628
    },
    {
        "content": "<p>Part of the reason that Lean's kernel computation is bad is that we use unary natural numbers instead of binary ones. It would still be slow to compute things in the kernel, even if we optimize our definitions for computation. I have not tried it though, so I don't know how slow it would be compared to programming languages.</p>",
        "id": 166867758,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559173911
    },
    {
        "content": "<p>What is example of an implementation of <em>Cubical CTT</em>? And how it relates to HoTT? I thought that HoTT is framework.</p>",
        "id": 166868155,
        "sender_full_name": "Uros Nedic",
        "timestamp": 1559174418
    },
    {
        "content": "<p>Cubical Computational Type Theory is a type theory, just as HoTT or CiC, or the type theory of Lean. <br>\nIt was designed to give a computational meaning to the univalence axiom in HoTT. In HoTT (more precisely: the type theory of the HoTT book) the univalence axiom is an axiom and doesn't compute. In CCTT the \"univalence axiom\" is a theorem that can be proven using new primitives in the type theory. These primitives compute, and so does univalence.</p>",
        "id": 166868460,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559174797
    },
    {
        "content": "<p>Is <strong>RedPRL</strong> an example of implementation og CCTT?</p>",
        "id": 166868580,
        "sender_full_name": "Uros Nedic",
        "timestamp": 1559174939
    },
    {
        "content": "<p>There are some big differences in the way Computational type theory works, compared to Formal(?) type theories (HoTT or CiC, or the type theory of Lean). In computational type theory you start with a programming language, and then \"carve out\" the programs which are well behaved and have a certain type, so you get the type theory second. In formal type theory the type theory comes first: you cannot talk about a term without telling me what type that term is. Computational type theory comes from a different tradition (c.f. NuPrl)</p>\n<p>This means that I should probably take back my statement about efficiency: maybe implementations of CCTT can be as efficient as you want, in theory.</p>",
        "id": 166868603,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559174990
    },
    {
        "content": "<p>In Cubical type theory, as I understand it, there is a path that can be traced around every face of the cube. Assuming one corner of the cube is a point it seems to me that every face attached to that point traces a closed path, making it the identity path. Topologically, then, the cube is isomorphic to the point. I suspect I'm wrong but it isn't clear why.</p>",
        "id": 166868668,
        "sender_full_name": "Tim Daly",
        "timestamp": 1559175046
    },
    {
        "content": "<p>There are different proof assistants of <em>cubical</em> type theory, some of those are also of <em>cubical computational</em> type theory. RedPrl is indeed an implementation of cubical computational type theory.</p>",
        "id": 166868670,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559175053
    },
    {
        "content": "<p>But RedPrl development has ceased. Now it's redtt. I'm not sure if that is \"computational\" in the sense of computational type theory.</p>",
        "id": 166868695,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1559175100
    },
    {
        "content": "<p>Redtt is indeed the successor of RedPrl, and they dropped the <em>computational</em> aspect of the proof assistant.</p>",
        "id": 166868765,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559175147
    },
    {
        "content": "<p>Other cubical proof assistants (none of them computational):<br>\n<a href=\"https://github.com/mortberg/yacctt\" target=\"_blank\" title=\"https://github.com/mortberg/yacctt\">https://github.com/mortberg/yacctt</a><br>\n<a href=\"https://github.com/mortberg/cubicaltt\" target=\"_blank\" title=\"https://github.com/mortberg/cubicaltt\">https://github.com/mortberg/cubicaltt</a></p>",
        "id": 166868793,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559175208
    },
    {
        "content": "<p><a href=\"https://github.com/agda/cubical\" target=\"_blank\" title=\"https://github.com/agda/cubical\">https://github.com/agda/cubical</a></p>",
        "id": 166868861,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559175292
    },
    {
        "content": "<p>Thank you for all you answers (Carry on, I am glad to read this thread). My idea was if HoTT makes foundation for all mathematics than is it possible to develop some computing language from HoTT (let it be pure type-level programming, if necessary) like Cartesian CCTT or some 2-Level TT if needed, and then do everyday programming (software development) and proving our software as easy as proving math proofs because we would use Cat Theory, Topoi, etc., as objects in that programming language?</p>",
        "id": 166869054,
        "sender_full_name": "Uros Nedic",
        "timestamp": 1559175564
    }
]