[
    {
        "content": "<p>I have the following code for which Lean cannot prove termination because it's trying to use well-founded recursion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">get_m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">loop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">unsigned</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">γ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ulift</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_ulift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Heq</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">Heq</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">fail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">fail</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">β&#39;</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">loop</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">up</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">sum_ulift</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">Heq</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"n\">down</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>How can I fix that?</p>",
        "id": 132971116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535507944
    },
    {
        "content": "<p>Here's my fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">up&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Heq</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">get_m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">get_m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">x</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">fail</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">next</span> <span class=\"n\">get_m_up</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">get_m_up</span> <span class=\"n\">w</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">x₀</span> <span class=\"n\">body</span> <span class=\"n\">rest</span> <span class=\"n\">get_m_up₀</span> <span class=\"n\">get_m_up₁</span> <span class=\"n\">β&#39;</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">get_m</span><span class=\"bp\">.</span><span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">get_m_up₀</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">sum_ulift</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">get_m_up₁</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">))</span> <span class=\"n\">β</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>I really don't like it but it type checks.</p>",
        "id": 132974185,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535513746
    }
]