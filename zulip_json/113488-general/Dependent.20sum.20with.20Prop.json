[
    {
        "content": "<p>I'm trying to write a list merging function which, given two lists and an included proof that each is nondecreasing, produces a result list and a proof that it's also nondecreasing. While I think I have some idea of how to tackle it implementation-wise, I can't seem to get the types to line up (especially wrt pi/sigma vs. forall/exists). Here's a sketch of my current setup (with a bit of pseudocode in the <code>merge</code> type itself):</p>\n<div class=\"codehilite\"><pre><span></span>inductive nondecreasing : list ℕ → Prop\n| nil    : nondecreasing []\n| single : Π {x : ℕ}, nondecreasing [x]\n| zip    : Π {x y : ℕ} {xs : list ℕ}, x ≤ y → nondecreasing (y :: xs) → nondecreasing (x :: y :: xs)\n\ndef merge : Π (x y : Σ l, nondecreasing l), Σ l&#39; : list ℕ, nondecreasing (list.append x.l y.l) l&#39; := sorry\n</pre></div>\n\n\n<p>Is there any way I can make this (or something like it) work?</p>",
        "id": 182718304,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1575591692
    },
    {
        "content": "<p>The main issue with this approach, afaict, is the distinction between <code>Prop</code> and <code>Type ?</code>:</p>\n<div class=\"codehilite\"><pre><span></span>has type\n  list ℕ → Prop : Type\nbut is expected to have type\n  list ℕ → Type ? : Type (?+1)\n</pre></div>",
        "id": 182718402,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1575591830
    },
    {
        "content": "<p>If I use a <code>Σ</code>, it complains about <code>Prop</code> being invalid, but if I use a <code>∃</code>, I'm unable to unpack the actual list itself... I think this is due to the special casing on <code>Prop</code>?</p>",
        "id": 182718768,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1575592271
    },
    {
        "content": "<p>(Apologies if this is a silly question - seems like it could be...)</p>",
        "id": 182718826,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1575592328
    },
    {
        "content": "<p>Use <code>Σ'</code></p>",
        "id": 182719631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575593281
    },
    {
        "content": "<p>or <code>{l | nondecreasing l}</code></p>",
        "id": 182719674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575593295
    },
    {
        "content": "<p>Oh, that's perfect! Thanks.</p>",
        "id": 182720241,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1575593948
    }
]