[
    {
        "content": "<p>I was leafing through the category_theory library, when I ran across this absolutely beautiful proof:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/2a8d7f3e1e79646b2cc914c477f060123d871a25/src/category_theory/equivalence.lean#L126-L134\">https://github.com/leanprover-community/mathlib/blob/2a8d7f3e1e79646b2cc914c477f060123d871a25/src/category_theory/equivalence.lean#L126-L134</a></p>\n<p>Question: why isn't this equational style used more often?</p>",
        "id": 207142817,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1597670549
    },
    {
        "content": "<p>because most proofs can't be written in this manner? :-(</p>",
        "id": 207145350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597671874
    },
    {
        "content": "<p>It's really nice - when it works, and the justifications for each step fit on a single line; it's somewhat less pretty otherwise. I suspect that may have something to do with it as well</p>",
        "id": 207145365,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1597671883
    },
    {
        "content": "<p>Interestingly this particular definition used to be written in a more compact style: <a href=\"https://github.com/leanprover-community/mathlib/commit/5e5298b9273b44aa06e3b30aa064cf866cd8152a\">https://github.com/leanprover-community/mathlib/commit/5e5298b9273b44aa06e3b30aa064cf866cd8152a</a><br>\nIt was changed to add explicit unitor isomorphisms to reduce the dependence on definitional equality, and at the same time changed to <code>calc</code> style.</p>",
        "id": 207145683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597672078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm currently (and for many months now) formalizing category theory, where pretty much all proofs are of this kind, because they are all diagram chases. There are a couple hundred such proofs in agda-categories.  Some of my other work on generalized folds also can have all the proofs written that way.</p>\n<p>This isn't a contradiction to your statement. Just that I expected so see more of that in category_theory.</p>\n<p>Also, in Agda, because of dependent pattern matching, most proofs by cases / induction, are done \"on the left\", so that the right hand side frequently can become equational. It's interesting how the underlying features enable different proof styles.</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> definitional equality is very interesting. Inside proofs, I likewise avoid relying on it. But you can't get away with that for various theorem statements.  We've had to adjust various definitions in agda-categories so that various constructions were such that \"op op\" was definitionally nothing (a 'no-op'...).  Various theorems in CT became awful monsters without that; still true, just a lot more convoluted.</p>",
        "id": 207152091,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1597675420
    },
    {
        "content": "<p>For proofs the <code>rw</code>/<code>simp</code> style is a lot more concise, and can potentially be automated completely.</p>",
        "id": 207153228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597676035
    },
    {
        "content": "<blockquote>\n<p>most proofs by cases / induction, are done \"on the left\", so that the right hand side frequently can become equational</p>\n</blockquote>\n<p>What do you mean by this?</p>",
        "id": 207153390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597676115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I mean that a <code>case</code> proof in Lean usually ends up being done by a (dependent) pattern-match in Agda, where you get a new case for your proof-function. Because the dependent pattern-match has exposed a lot of new information (in exactly the same way that <code>case</code> does), the rhs proof is much simpler. In constructive settings, I've found that after a bit of reduction, a lot of the proofs that I need to do are then equational in nature.  This is by no means a universal!</p>\n<p>I guess I have been proving a whole lot of \"X is equivalent to Y\" type of theorems, so that surely has coloured my perception. [I did not realize that until now, so I'm happy that I have done so because of your question.]</p>\n<p>Hmm, the vast majority of theorems in category theory boil down to \"X is equivalent to Y\". Even celebrated things like Yoneda and the Grothendieck construction first require a straightforward construction, and then some very thorny proof obligations that express that the construction really works, and really behaves nicely. All of which are diagram chases, i.e. 2D equations.</p>",
        "id": 207258697,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1597757176
    }
]