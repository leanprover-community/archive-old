[
    {
        "content": "<p>What is the recommended way to work with structures that differ at some fields? I often want to prove that if <code>x</code> is a structure of some type, if some fields are modified with some other values, then some properties hold. The structures usually differ by only one field. A dumb example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x.a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The problem is that it often requires <code>ext</code>, which is slow and creates a lot of trivial goals. Also, the notation is very ugly: <code>x = {a := 0, b := x.b, c := x.c, d := x.d, e := x.e, f := x.f, g := x.g, h := x.h} ↔ x.a = 0</code> (is there a <code>pp</code> option I can set to make it show with <code>with</code> notation instead?). Another pattern would be to pass all fields as lemma arguments and then construct two different structures explicitly. It makes lemma statement much verboser and harder to work with.</p>",
        "id": 275783346,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647598761
    },
    {
        "content": "<p><code>ext</code> is slow? Never heard of that</p>",
        "id": 275783457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647598817
    },
    {
        "content": "<p>I didn't mean <code>ext</code> itself is slow, but <code>ext</code> creates a lot of goals and then <code>; simp</code> is slow.</p>",
        "id": 275783544,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647598879
    },
    {
        "content": "<p><code>cases x, simp</code> works here</p>",
        "id": 275783574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647598894
    },
    {
        "content": "<p>Presumably <code>ext; try {refl}</code> would also clean up all the unwanted goals</p>",
        "id": 275783660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647598939
    },
    {
        "content": "<p>One could imagine <code>ext</code> trying to do a reducible-transparency <code>refl</code> afterwards to get rid of any trivial goals automatically</p>",
        "id": 275783661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647598940
    }
]