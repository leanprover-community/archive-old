[
    {
        "content": "<p>What do you think would be the ideal Lean setup considering that we're interested in getting the attention of people who don't necessarily know much about binaries and paths? Personally I was a bit confused on the Lean setup because when I visited the <code>Downloads</code> tab from the official Lean site it linked me to binaries and source files. So I thought \"Huh, this is hard on some people\", then I downloaded the binaries, decompressed them in a directory and added the directory to my <code>PATH</code> by hand.</p>\n<p>But then, after interacting here on Zulip, I realized that <code>elan</code> is the binary file that's supposed to call the proper Lean binary according the Lean version of the project I'm in. So the setup that I had done by hand was unnecessary.</p>\n<p>Since then I've been asking myself how to make the Lean setup smoother. But of course I'd prefer hear it from you guys, who have actual experience dealing with Lean projects. How do you think we could make the Lean setup more welcoming?</p>",
        "id": 260266649,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636031299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I guess you've seen <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a> ?</p>",
        "id": 260266792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636031373
    },
    {
        "content": "<p>We have to cater to people who have never heard of a command line before, but also to power users. Currently, using lean and mathlib effectively requires learning some technical tools: command line, git. That might change in the future, but I don't think it will happen soon.</p>",
        "id": 260266978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636031467
    },
    {
        "content": "<p>This means there will be some hurdles that are not-directly-Lean-related.</p>",
        "id": 260267053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636031522
    },
    {
        "content": "<p>At the same time, there are users  who live in the shell and <code>git merge</code> for breakfast.</p>",
        "id": 260267125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636031548
    },
    {
        "content": "<p>That's why we try to provide different installation methods, and different guides.</p>",
        "id": 260267141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636031561
    },
    {
        "content": "<p>If your goal is to get the attention of people with a small lean project of your own for them to play around with, you can hand them a link to a gitpod instance so they can explore your code with a full lean installation in browser</p>",
        "id": 260267317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636031650
    },
    {
        "content": "<p>That doesn't help bridge the gap to \"yes I want to use this for my own project\" very well though</p>",
        "id": 260267380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636031691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/lean.20setup/near/260266792\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> I guess you've seen <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a> ?</p>\n</blockquote>\n<p>Yeap I saw that link. Mentally I'm using Coq's setup as a benchmark, for which a <code>$ sudo apt install coq coqide</code> does it all. But the Coq's mathematical libraries are always downloaded by default.</p>",
        "id": 260270792,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636033385
    },
    {
        "content": "<p>And (damn) Coq has its own IDE, which requires a lot of work to develop</p>",
        "id": 260271675,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636033840
    },
    {
        "content": "<p>If you use this Coq setup, you get something that's fine for playing around  and for small projects, but not for bigger stuff (because then you want opam to manage dependencies and VSCode/Emacs/Vim for editor features). So it's more comparable in purpose to the Lean web editor.</p>",
        "id": 260272896,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1636034399
    },
    {
        "content": "<p>You won't get any library when downloading Coq like this.</p>",
        "id": 260277985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636036575
    },
    {
        "content": "<p>Anyway, we know Lean could be easier to install. I think there are people at MSR working on this.</p>",
        "id": 260278078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636036615
    },
    {
        "content": "<p>Chris Lovett has recently been working on the VSCode extension, so that it automatically offers to install elan if it isn't available.</p>",
        "id": 260363686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636084362
    },
    {
        "content": "<p>Didn't the Lean 3 extension already have something like that? Or was it removed again at some point?</p>",
        "id": 260369018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636092161
    },
    {
        "content": "<p>Is the idea that the lean 4 extension replaces <code>leanproject</code> and offers eg a collection of projects which users can download from GitHub, and when the user clicks on them it installs the project and mathlib oleans and then opens the root project folder? That would be so helpful, says the person who yesterday supervised an install fest when trying to get a bunch of undergraduates to install his course project...</p>",
        "id": 260379568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636102872
    },
    {
        "content": "<p>Idea: this strategy of hosting cached olean files and not needing to build everything from scratch everytime could be another parameter of the toml file, so mathlib wouldn't need to be the only project with this feature</p>",
        "id": 260394819,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636112791
    },
    {
        "content": "<p>Yes, there's discussion of <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/241739788\">that elsewhere regarding lean-liquid</a></p>",
        "id": 260394940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636112891
    },
    {
        "content": "<p>The difficulty is that <code>leanpkg</code> removes any keys from the toml file it <a href=\"https://github.com/leanprover-community/lean/blob/63dc257c30d0a71f91c1e706e447256f53139be7/leanpkg/leanpkg/manifest.lean#L49-L54\">doesn't recognize</a></p>",
        "id": 260394972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636112925
    },
    {
        "content": "<p>Meaning it removes any config that <code>leanproject</code> wants to keep for itself</p>",
        "id": 260395170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636113082
    },
    {
        "content": "<p>The fix would be to keep around a <code>manifest.extra : list (string Ã— toml.value)</code> field of all the extra data we don't know how to parse yet, and write it back out  when we modify the toml</p>",
        "id": 260395715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636113490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/lean.20setup/near/260369018\">said</a>:</p>\n<blockquote>\n<p>Didn't the Lean 3 extension already have something like that? Or was it removed again at some point?</p>\n</blockquote>\n<p>This was removed again as it was too fragile.</p>",
        "id": 260479385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636157409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> has spent some serious effort on the Lean 4 implementation, in particular on Windows, please give it a try</p>",
        "id": 260500539,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636187215
    },
    {
        "content": "<p>Yes if you want to try Lean 4 smooth setup using VS Code, please try the \"Lean4\" VS Code extension and tell me if it works or not (no command line stuff required).  The marketplace text is a bit out of date, this is the <a href=\"https://github.com/leanprover/vscode-lean4\">up to date readme</a>. and ignore step 5. about the PATH we just changed the extension to look in the default elan install location automatically.</p>",
        "id": 260529007,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1636223446
    },
    {
        "content": "<p>Oh wooah. Is this likely to work on a Windows machine where the user does not have admin access but where VS Code is already installed? That's the situation my laptop-free undergraduate users find themselves in.</p>",
        "id": 260539639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636237364
    },
    {
        "content": "<p>Admittedly, such users (UGs without laptops) are becoming thinner on the ground recently. However many only have 8 gigs of ram...</p>",
        "id": 260539655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636237386
    },
    {
        "content": "<p>Definitely, you don't need admin rights to install elan, nor does it have any special dependencies</p>",
        "id": 260539907,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636237710
    },
    {
        "content": "<p>It will not download more RAM for you, however. Yet.</p>",
        "id": 260539917,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636237741
    },
    {
        "content": "<p>The default location for the elan and lean toolchain install  on windows is in your %USERPROFILE% (c:\\users\\username\\.elan).  You can check how many toolchain versions you already have by looking at .elan\\toolchains folder, if you see a lot there you can reclaim some space by deleting them using <code>elan toolchain uninstall &lt;toolchainname&gt;</code>.  If you prefer not to install on your \"C:\" drive you will need to install elan manually.</p>",
        "id": 260545073,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1636245587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  you mentioned laptop-free undergrads, if your school has access to github enterprise, they could potentially use github codespaces, see <a href=\"https://www.youtube.com/watch?v=uC1wHSVnSHQ\">demo</a> then there really is nothing installed on the local machine they are using (except vscode).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"uC1wHSVnSHQ\" href=\"https://www.youtube.com/watch?v=uC1wHSVnSHQ\"><img src=\"https://uploads.zulipusercontent.net/a39bde2132c196919930530c0926bf85541f4339/68747470733a2f2f692e7974696d672e636f6d2f76692f754331774853566e5348512f64656661756c742e6a7067\"></a></div>",
        "id": 260545203,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1636245799
    }
]