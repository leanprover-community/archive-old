[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>universes u v\n\ntheorem set.subset.trans {α : Type*} {a b c : set α} (ab : a ⊆ b) (bc : b ⊆ c) : a ⊆ c :=\nassume x h, bc (ab h)\n\ndef set.preimage {α : Type u} {β : Type v} (f : α → β) (s : set β) : set α := {x | f x ∈ s}\ninfix ` ⁻¹&#39; `:80 := set.preimage\n\nstructure presheaf_of_types (α : Type*) :=\n(F : Π U : set α,  Type*)\n(res : ∀ (U V : set α) (H : V ⊆ U),\n  (F U) → (F V))\n(Hcomp : ∀ (U V W : set α)\n  (HUV : V ⊆ U) (HVW : W ⊆ V),\n  (res U W (set.subset.trans HVW HUV)) = (res V W HVW) ∘ (res U V HUV) )\n\ndefinition presheaf_of_types_pushforward\n  {α : Type*}\n  {β : Type*}\n  (f : α → β)\n  (FPT : presheaf_of_types α)\n  : presheaf_of_types β :=\n  { F := λ V : set β, FPT.F (set.preimage f V),\n    res := λ V₁ V₂ H,\n    FPT.res (set.preimage f V₁) (set.preimage f V₂)(λ x Hx,H Hx),\n    Hcomp := λ Uβ Vβ Wβ HUV HVW,rfl -- assertion violation\n}\n</pre></div>",
        "id": 123293256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240707
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>LEAN ASSERTION VIOLATION\nFile: /home/travis/build/leanprover/lean/src/frontends/lean/elaborator.cpp\nLine: 3167\nTask: /home/buzzard/Encfs/Computer_languages/Lean/lean/bug.lean: presheaf_of_types_pushforward\nm_ctx.match(e, *val2)\n</pre></div>",
        "id": 123293261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240730
    },
    {
        "content": "<p>Here's a (mathlib-free) assertion violation. Is this a known issue? If not, is my MWE minimal enough? If so, shall I file a bug report? I'd be happy to hear advice before working on this any more</p>",
        "id": 123293307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240784
    },
    {
        "content": "<p>I'm looking into it</p>",
        "id": 123293311,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520240802
    },
    {
        "content": "<p><code>Lean (version 3.3.1, commit d6d44a19947e, Release)</code> Ubuntu 16.04</p>",
        "id": 123293312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240806
    },
    {
        "content": "<p>Can reproduce</p>",
        "id": 123293315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520240815
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 123293322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240831
    },
    {
        "content": "<p>I get the feeling structure notation is too sophisticated for our (the implementers') own good <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 123293326,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520240881
    },
    {
        "content": "<p>ha ha</p>",
        "id": 123293365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240893
    },
    {
        "content": "<p>so it's my fault? :-)</p>",
        "id": 123293368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240897
    },
    {
        "content": "<p>I wasn't expecting rfl to work, it's just sometimes worth a try</p>",
        "id": 123293370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240922
    },
    {
        "content": "<p>It's obviously our fault for enabling you to do weird things :)</p>",
        "id": 123293376,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520240952
    },
    {
        "content": "<p>I would be interested to know what the first thing you do in this situation is. If it's to fire up some C++ debugger then fair enough, you've lost me already, but if it's to just set some options and watch more carefully then I would be interested to follow along for a while</p>",
        "id": 123293379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520240967
    },
    {
        "content": "<p>What do I do that is weird?</p>",
        "id": 123293419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520241003
    },
    {
        "content": "<p>actually I wonder whether I am now grown up enough to fire up a C++ debugger myself</p>",
        "id": 123293548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520241256
    },
    {
        "content": "<p>It's a unification error, so I'm now looking at the <code>is_def_eq_detail</code> trace. The terms are still quite big - if you find a way to minimize them, that would be great.</p>",
        "id": 123293628,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520241417
    },
    {
        "content": "<p>OK I will try and minimise more</p>",
        "id": 123293638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520241429
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition presheaf_of_types_pushforward\n  {β : Type*}\n  : presheaf_of_types β :=\n  { F := sorry,\n    res := sorry,\n    Hcomp := λ Uβ Vβ Wβ HUV HVW,rfl -- assertion violation\n}\n</pre></div>",
        "id": 123294055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242189
    },
    {
        "content": "<p>No idea if that helps</p>",
        "id": 123294056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242192
    },
    {
        "content": "<p>I just replaced some stuff with sorry</p>",
        "id": 123294100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242210
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition presheaf_of_types_pushforward\n  {β : Type*}\n  : presheaf_of_types β :=\n  { Hcomp := λ Uβ Vβ Wβ HUV HVW,rfl -- assertion violation\n}\n</pre></div>",
        "id": 123294184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242371
    },
    {
        "content": "<p>oh I have made it smaller</p>",
        "id": 123294251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>universes u v\n\nstructure presheaf_of_types (α : Type*) :=\n(F : Π U : set α,  Type*)\n(res : ∀ (U V : set α) ,\n  (F U) → (F V))\n(Hcomp : ∀ (U V W : set α),\n  (res U W  = (res V W) ∘ (res U V) ))\n\nset_option trace.type_context.is_def_eq_detail true\n\ndefinition presheaf_of_types_pushforward\n  {β : Type*}\n  : presheaf_of_types β :=\n  { Hcomp := λ Uβ Vβ Wβ,rfl -- assertion violation\n}\n</pre></div>",
        "id": 123294257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520242478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types (α : Type*) :=\n(F : Π U : set α,  Type*)\n(res : ∀ (U V : set α) ,\n  (F U) → (F V))\n(Hidem : ∀ U : set α, res U U = (res U U) ∘ (res U U))\n\nset_option trace.type_context.is_def_eq_detail true\n\ndefinition presheaf_of_types_pushforward\n  {β : Type*}\n  : presheaf_of_types β :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123294683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types (α : Type) :=\n(res : ∀ (U V : set α) ,\n  {x : α // U x} → {x : α // V x})\n(Hidem : ∀ U : set α, res U U = (res U U) ∘ (res U U))\n\ndefinition presheaf_of_types_pushforward\n  {β : Type}\n  : presheaf_of_types β :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123295041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243865
    },
    {
        "content": "<p>I'm going to stop there because all I am doing now is taking things like my general F from set alpha to Type and replacing it with an arbitrary explicit F (in this case the map sending U to the subtype corresponding to U)</p>",
        "id": 123295092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243926
    },
    {
        "content": "<p>oh here's an even better one, I can just use some random map unit to unit</p>",
        "id": 123295103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243969
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types (α : Type) :=\n(res : ∀ (U V : set α) ,\n  unit → unit)\n(Hidem : ∀ U : set α, res U U = (res U U) ∘ (res U U))\n\ndefinition presheaf_of_types_pushforward\n  {β : Type}\n  : presheaf_of_types β :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123295104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243975
    },
    {
        "content": "<p>Still simpler:</p>",
        "id": 123295160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types (α : Type) :=\n(res : ∀ (U : set α) ,\n  unit → unit)\n(Hidem : ∀ U : set α, res U = (res U) ∘ (res U))\n\ndefinition presheaf_of_types_pushforward\n  {β : Type}\n  : presheaf_of_types β :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123295163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244064
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types (α : Type) :=\n(res : unit → unit)\n(Hidem : ∀ U : set α, res = (res) ∘ (res))\n\ndefinition presheaf_of_types_pushforward\n  {β : Type}\n  : presheaf_of_types β :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123295210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244125
    },
    {
        "content": "<p>Thanks! That should do hopefully.</p>",
        "id": 123295231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520244241
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure presheaf_of_types :=\n(res : unit → unit)\n(Hidem : ∀ U : unit, res = res ∘ res)\n\nset_option trace.type_context.is_def_eq_detail true\n\ndefinition presheaf_of_types_pushforward\n  : presheaf_of_types :=\n  { Hidem := λ U, rfl,\n}\n</pre></div>",
        "id": 123295270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244265
    },
    {
        "content": "<p>Thanks for asking for more minimisation -- in some sense that was quite instructive. Initially I just removed everything not directly related to the violation in the form I had it, but after you asked more I realised there was nothing stopping me trying to find simpler violations</p>",
        "id": 123295286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244332
    },
    {
        "content": "<p>Adding the field <code>res := id</code> makes the problem go away</p>",
        "id": 123295366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244474
    },
    {
        "content": "<p>Hey, is it doing a prolog-like search?</p>",
        "id": 123295482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244628
    },
    {
        "content": "<p>Poor Kevin was deprived of a prolog-like search yesterday</p>",
        "id": 123295495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520244667
    },
    {
        "content": "<p>Please be nice this time</p>",
        "id": 123295496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520244673
    },
    {
        "content": "<p>I should never have equated this phrase with \"random thing I don't understand\"</p>",
        "id": 123295504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244711
    },
    {
        "content": "<p>but looking at the debugging output it looks like it might be backtracking...</p>",
        "id": 123295549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520244732
    },
    {
        "content": "<p>I'm picturing you asking to Scholze: \"are you doing a a prolog-like search\" at the end of a really tough talk.</p>",
        "id": 123295576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520244801
    },
    {
        "content": "<p>Maybe I don't even know what backtracking means. I guess I look at these debugging outputs and think \"oh look it's trying lots of things in what looks like a systematic manner\"</p>",
        "id": 123295702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520245027
    },
    {
        "content": "<p>It's not enough</p>",
        "id": 123295706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520245047
    },
    {
        "content": "<p>but I probably need to look more closely to distinguish the difference between \"if this fails, discard it and try something else\"</p>",
        "id": 123295709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520245061
    },
    {
        "content": "<p>and \"let's actually backtrack here\"</p>",
        "id": 123295710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520245066
    },
    {
        "content": "<p>You want to start following a path and then come back to an earlier branch point</p>",
        "id": 123295711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520245067
    },
    {
        "content": "<p>yes this is just dawning on me now</p>",
        "id": 123295714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520245078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"k.buzzard@imperial.ac.uk\" data-user-id=\"110038\">@Kevin Buzzard</span> Congrats, I think you found a bug where definitional equality is not idempotent</p>",
        "id": 123298542,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520250665
    },
    {
        "content": "<p>Is that a good thing?</p>",
        "id": 123298548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520250696
    },
    {
        "content": "<p>Do I get an achievement?</p>",
        "id": 123298549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520250712
    },
    {
        "content": "<p>I'm jalous</p>",
        "id": 123298550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520250715
    },
    {
        "content": "<p>My conv bug seems much less cool</p>",
        "id": 123298585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520250723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> \"Idempotent\"??  Do you mean <code>is_def_eq(t, t)</code> returns false?</p>",
        "id": 123298715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520251030
    },
    {
        "content": "<p>On the first run it returns true for two terms, then false on any subsequent runs</p>",
        "id": 123298717,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520251074
    },
    {
        "content": "<p>ooh can I prove false??</p>",
        "id": 123298811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251204
    },
    {
        "content": "<p>I would definitely get an achievement for that</p>",
        "id": 123298814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251212
    },
    {
        "content": "<p>Nah, it's just the elaborator</p>",
        "id": 123298816,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520251215
    },
    {
        "content": "<p>aah well</p>",
        "id": 123298818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251219
    },
    {
        "content": "<p>Apparently <code>elim_delayed_abstractions</code> accidentally supports backtracking assignments to a metavar... not the correct place for a Prolog-like search</p>",
        "id": 123298831,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520251298
    },
    {
        "content": "<p>you lost me at the prolog-like search bit</p>",
        "id": 123298834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251319
    },
    {
        "content": "<p>That was mostly a joke :)</p>",
        "id": 123298883,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520251345
    },
    {
        "content": "<p>Wow, this is unexpected.</p>",
        "id": 123298896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520251390
    },
    {
        "content": "<p>Kenny posted this about a week ago</p>",
        "id": 123298946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251481
    },
    {
        "content": "<p><code>instance error (α : Type) : group α := { mul_assoc := λ x y z, rfl }\n</code></p>",
        "id": 123298947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251483
    },
    {
        "content": "<p>without any further comment</p>",
        "id": 123298948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251487
    },
    {
        "content": "<p>and it might be the same thing</p>",
        "id": 123298954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520251504
    },
    {
        "content": "<p>Yep, same assertion</p>",
        "id": 123299000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520251593
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/JbuLIJprxGe-IqMGOyrrJlyK/users.png\" target=\"_blank\" title=\"users.png\">users.png</a><br>\nOne little bug and everybody flies out, except devs. So sad...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JbuLIJprxGe-IqMGOyrrJlyK/users.png\" target=\"_blank\" title=\"users.png\"><img src=\"/user_uploads/3121/JbuLIJprxGe-IqMGOyrrJlyK/users.png\"></a></div>",
        "id": 123299285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520252225
    }
]