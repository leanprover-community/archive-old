[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/future.20of.20proof.20assistant.20tools/near/258537447\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <code>simp</code> already exists, and is used a lot.</p>\n</blockquote>\n<p>Hm, shouldn't I see <code>true = true</code> in the Lean Infoview here?<br>\n<a href=\"/user_uploads/3121/OjG2Y4cqf42vDnf8NAvzd8Yg/image.png\">image.png</a><br>\nI tested <code>simp</code> but it didn't seem to do anything. And it doesn't show anything on hover. Also I can't crtl+click on it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OjG2Y4cqf42vDnf8NAvzd8Yg/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OjG2Y4cqf42vDnf8NAvzd8Yg/image.png\"></a></div>",
        "id": 258537903,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634820204
    },
    {
        "content": "<p>Using <code>;</code> makes the goal view behave unhelpfully (at least in Lean 3, but it seems you're using Lean 4)</p>",
        "id": 258538045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634820251
    },
    {
        "content": "<p>Please note that this is Lean 4</p>",
        "id": 258538149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634820305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/future.20of.20proof.20assistant.20tools/near/258537597\">said</a>:</p>\n<blockquote>\n<p>All my colleagues work with things like Kähler manifolds, or triangulated categories of motives.</p>\n</blockquote>\n<p>Do you know we have a branch trying to define Kähler manifolds?</p>",
        "id": 258538323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634820366
    },
    {
        "content": "<p>You mean it behaves as expected in Lean 3?</p>",
        "id": 258538353,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634820379
    },
    {
        "content": "<p>No, <code>simp</code> here behaves as expected. It applies all registered and explicitly passed equations, none of which are applicable here. Use <code>@[simp] def orr</code> or <code>simp [orr]</code> to add <code>orr</code>'s equations to either set.</p>",
        "id": 258538755,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634820548
    },
    {
        "content": "<p>Coq-Equations' <code>simp</code> also needs to be passed explicit arguments, doesn't it?</p>",
        "id": 258538833,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634820577
    },
    {
        "content": "<p>Ahah! <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, not Kähler manifolds but Kähler modules: it's <a href=\"https://github.com/leanprover-community/mathlib/issues/4753\">#4753</a>.</p>",
        "id": 258539030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634820650
    },
    {
        "content": "<p>Ooh, I know that one. It's important, but quite different from Kähler manifolds (-;</p>",
        "id": 258539118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634820690
    },
    {
        "content": "<p>In Coq you can just call <code>simpl.</code>: <br>\n<a href=\"/user_uploads/3121/MhjDCWs9l2_xPjKOP3KLqS7O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MhjDCWs9l2_xPjKOP3KLqS7O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MhjDCWs9l2_xPjKOP3KLqS7O/image.png\"></a></div>",
        "id": 258539353,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634820746
    },
    {
        "content": "<p>(I've renamed this tail of the thread, because it was going in a different direction.)</p>",
        "id": 258539517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634820823
    },
    {
        "content": "<p>Ah, that is yet another Coq tactic. We don't have a normalization tactic like that. It seems most people prefer passing the defs to reduce explicitly.</p>",
        "id": 258539779,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634820929
    },
    {
        "content": "<p><code>simp [orr]</code> did the simplification and Lean was already satisfied with <code>true = true</code><br>\n<a href=\"/user_uploads/3121/bCUlrF7beX66zWHGmLITPO8H/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bCUlrF7beX66zWHGmLITPO8H/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bCUlrF7beX66zWHGmLITPO8H/image.png\"></a></div>",
        "id": 258540019,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634821018
    },
    {
        "content": "<p>maybe it simplified <code>true = true</code> further to <code>true</code>?</p>",
        "id": 258540099,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634821049
    },
    {
        "content": "<p>to <code>True</code>, but yes :)</p>",
        "id": 258540121,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634821061
    },
    {
        "content": "<p>In other words, Lean's <code>simp</code> is modelled after Isabelle, not Coq</p>",
        "id": 258540179,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634821079
    },
    {
        "content": "<p>I see, but now it got me thinking because I asked Lean to explicitly simplify the <code>orr</code> and it feels like it did more than I wanted</p>",
        "id": 258540393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634821139
    },
    {
        "content": "<p>That's why you can use <code>simp only [orr]</code>.</p>",
        "id": 258540541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634821193
    },
    {
        "content": "<p><code>simp only [orr]</code> goes all the way down too</p>",
        "id": 258540757,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634821255
    },
    {
        "content": "<p>That's because one of the equation lemmas for \"orr\" is precisely your goal</p>",
        "id": 258541778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634821660
    },
    {
        "content": "<p>If you're trying to prove <code>a = b</code> and you have <code>h : a = b</code>, you wouldn't say \"rewrite to <code>b = b</code>, then reflexivity\", you'd jump directly to \"h is the proof\"</p>",
        "id": 258541940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634821724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/behaviour.20of.20simp.20in.20Lean.20vs.20Coq/near/258539779\">said</a>:</p>\n<blockquote>\n<p>Ah, that is yet another Coq tactic. We don't have a normalization tactic like that. It seems most people prefer passing the defs to reduce explicitly.</p>\n</blockquote>\n<p>It would be really really nice to get a reduction tactic in lean. <code>simp</code> is the best we have but it's a poor approximation of kernel reduction. <code>whnf</code> can be made to work but is not configurable, and often goes too far.</p>",
        "id": 258542233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634821848
    },
    {
        "content": "<p>And yes, there are a lot of open design questions about how far to reduce given what input</p>",
        "id": 258542357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634821907
    },
    {
        "content": "<p>From an user standpoint, I'd want it to go as far as I want so I feel like I have complete control of what I'm doing</p>",
        "id": 258542539,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634821978
    },
    {
        "content": "<blockquote>\n<p>I'd want it to go as far as I want </p>\n</blockquote>\n<p>well yes, the hard part is reading the user's mind about this</p>",
        "id": 258542587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822003
    },
    {
        "content": "<p>you can reduce too much and you can reduce not enough and both are bad</p>",
        "id": 258542637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822032
    },
    {
        "content": "<p><code>simp</code> has some control over reduction in the form of specifying what functions to reduce (plus some basic simp things like <code>x = x</code> is true)</p>",
        "id": 258542745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822066
    },
    {
        "content": "<p>Hm, what if I could tell the number of reduction rounds? Lean would be able to know how many recursive calls would be allowed</p>",
        "id": 258542856,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634822122
    },
    {
        "content": "<p>I think there is a cfg for that</p>",
        "id": 258542890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822133
    },
    {
        "content": "<p>but it's really not a good way to write proof scripts because it is very specific to the particular rewrite sequence</p>",
        "id": 258542952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822161
    },
    {
        "content": "<p>and if it has to backtrack then it gets much harder to specify where in the tree you want to go</p>",
        "id": 258543110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822220
    },
    {
        "content": "<p>Right, I might want to take baby steps for a particularly hard step</p>",
        "id": 258543151,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634822239
    },
    {
        "content": "<p><code>rw</code> is better suited for baby steps. <code>simp</code> is more like \"do all these things until you can't find anything to do\"</p>",
        "id": 258543215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822275
    },
    {
        "content": "<p>let me try <code>rw</code></p>",
        "id": 258543298,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634822300
    },
    {
        "content": "<p>How do I make <code>rw</code> accept one of my matches for <code>orr</code>?<br>\n<a href=\"/user_uploads/3121/1czlx7JqW7P3X0TosvUAVQFy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1czlx7JqW7P3X0TosvUAVQFy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1czlx7JqW7P3X0TosvUAVQFy/image.png\"></a></div>",
        "id": 258543984,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634822552
    },
    {
        "content": "<p><code>rw [orr]</code></p>",
        "id": 258544684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822858
    },
    {
        "content": "<p>also, post code, not images</p>",
        "id": 258544745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822881
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 258544804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634822889
    },
    {
        "content": "<p>ah, the code itself doesn't show where the error lies. but now <code>orr</code> is underlined in red and the error says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"n\">Bool</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">orr</span> <span class=\"n\">true</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 258544973,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634822963
    },
    {
        "content": "<p>this will work in lean 3, but I think lean 4 doesn't support it yet and you have to make do with <code>simp</code></p>",
        "id": 258545120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823012
    },
    {
        "content": "<p>There are some settings you can give to simp to make it act basically like <code>rw</code>, this is the <code>simp_rw</code> tactic in lean 3</p>",
        "id": 258545213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823049
    },
    {
        "content": "<p>eh, could you post your code?</p>",
        "id": 258545340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823110
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">orr</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orr_true</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">orr</span> <span class=\"n\">true</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">orr</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 258545428,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634823134
    },
    {
        "content": "<p>I'm satisfied if it's because it's still WIP tho, no worries <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 258545978,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634823341
    },
    {
        "content": "<p><code>rfl</code> does it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 258546113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634823382
    },
    {
        "content": "<p>Oh, I know. I'm not just trying to prove the theorem. I'm trying to do it in a controlled way. Going directly to reflexivity might be a big leap for people who are trying to understand how computers handle programmed proofs</p>",
        "id": 258546576,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634823559
    },
    {
        "content": "<p>Oh, it looks like you <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/Simp.lean#L191\">can't turn off <code>eq_self</code></a>, even if you use <code>simp only</code>. There should probably be a config option for that</p>",
        "id": 258546911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823662
    },
    {
        "content": "<p>lean 3 has a whole collection of more controlled unfolding tactics, like <code>dsimp</code>, <code>unfold</code>, <code>delta</code> and others. As far as I know most of them don't exist in lean 4 yet</p>",
        "id": 258547469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823865
    },
    {
        "content": "<p>and some of them might be \"won't fix\" since the number of unfolding tactics in lean 3 is a little ridiculous</p>",
        "id": 258547564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634823903
    },
    {
        "content": "<p>One way to prevent it from closing the goal is to change the rhs to something less trivial:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">orr_true</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">orr</span> <span class=\"n\">true</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">orr</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- |- true = c</span>\n</code></pre></div>",
        "id": 258548055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634824087
    },
    {
        "content": "<p>Makes sense. Let's see how the API design will evolve. For me it was very impactful to my learning process to see how Coq processed everything until it ends up with types I defined on both ends of the equation</p>",
        "id": 258548290,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634824169
    },
    {
        "content": "<p>well, API design doesn't evolve on its own, it needs input from people \"in the field\" to see what works. Generally things don't change unless someone (usually one of the developers) runs across a paper cut and tries to fix it</p>",
        "id": 258550370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634824914
    },
    {
        "content": "<p>Right, that's what I meant <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 258551242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634825189
    },
    {
        "content": "<p>But just to rephrase what I meant before. It would make more sense to me for <code>simp</code> to go all the way  until it can't progress if it didn't accept parameters. But if I have to explicit the <code>orr</code> as a parameter, I would expect it to be more surgical on what to simplify.</p>",
        "id": 258553983,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634826162
    },
    {
        "content": "<p>it is being surgical; it is just that your definition of surgical doesn't include reflexivity and simp's does</p>",
        "id": 258556404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634826859
    },
    {
        "content": "<p>also, keep in mind that <code>simp only</code> is not only for teaching; mathlib uses it a lot, because the default simp set is expensive in many circumstances, and adding <code>eq_self</code> all the time for proofs of e.g. <code>(x + y) + z = x + (z + y)</code> by <code>simp only [add_comm, add_assoc]</code> would get tiresome</p>",
        "id": 258557465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634827190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/behaviour.20of.20simp.20in.20Lean.20vs.20Coq/near/258556404\">said</a>:</p>\n<blockquote>\n<p>it is being surgical; it is just that your definition of surgical doesn't include reflexivity and simp's does</p>\n</blockquote>\n<p>Thanks for the clarification. That's precisely it. You were surgical <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 258565626,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634829788
    }
]