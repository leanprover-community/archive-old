[
    {
        "content": "<p>Can we define finsupp A B inductively as a set of the type (A -&gt; B)?</p>",
        "id": 124364521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522326096
    },
    {
        "content": "<p>I'm not sure what you mean?<br>\nIf you want to define it as an inductive like lists, i.e. the constant zero function, and a constructor to insert an element: this doesn't work, it requires a quotient over the sequence of at which point you add an element, also the constructor requires a proof that the inserted element was zero in the function is not zero. <br>\nWe can slightly change the definition to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fintype_support</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span>\n</pre></div>\n\n\n<p>Which would be a good idea...</p>",
        "id": 124365156,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522327474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I mean an inductively-defined set</p>",
        "id": 124365223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522327607
    },
    {
        "content": "<p>You mean the set <code>{f | finite {a | f a ≠ 0 }}</code>?<br>\nYou can:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_finsupp</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">is_finsupp</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_finsupp</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_finsupp</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124365286,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522327789
    },
    {
        "content": "<p>right</p>",
        "id": 124365330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522327805
    },
    {
        "content": "<p>and why isn't this used?</p>",
        "id": 124365335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522327809
    },
    {
        "content": "<p>We want to something which is a type and isomorph to the subtype of this set. This allows us to define type class instances. The current version also gives us (mostly) nice computational rules for the function and for the support.</p>",
        "id": 124365385,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522327943
    }
]