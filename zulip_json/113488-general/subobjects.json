[
    {
        "content": "<p>This is the Lean proof that the open subsets of a topological space form a complete lattice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">copy</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">galois_insertion</span><span class=\"bp\">.</span><span class=\"n\">lift_complete_lattice</span>\n    <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">gi</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"> le  -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> top -/</span> <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_univ</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">interior_univ</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> bot -/</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">is_open_empty</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> sup -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∪</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_union</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> inf -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">interior_eq_of_open</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_inter</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Sup -/</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">Us</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open_sUnion</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hV</span><span class=\"o\">}</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Sup_range</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I was expecting the proof to look more like the following: \"we all know that <code>set alpha</code> is a complete lattice, and open subsets are just a sublattice of this, so things like finite intersections and infinite unions will remain the same once it has been fed into the system that finite intersections and infinite unions of opens are open, which is the axioms for a topology, so we're done\". It will be some sort of sub-infi-bot-hemi-sup-subcomplete-lattice or whatever. Are these kinds of sublattices already in mathlib? Then you get of the form a sub-infi-hemi-sublattice of a complete lattice is complete. Is this a thing? Can this be an instance? What is going on with this code? It looks on the face of it as bad as some of the code I write, and the authors of the file are Johannes and Mario. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why did things turn out like that with all the <code>_copy</code> nonsense?</p>",
        "id": 171329872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563633513
    },
    {
        "content": "<p>Hey -- are sublattices in Lean bundled or unbundled?</p>",
        "id": 171330006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563633812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I am learning to love lattices! What do you think about bundled sublattices?</p>",
        "id": 171330069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563633921
    },
    {
        "content": "<p>I'm AFK. What do the two <code>begin... end</code> blocks prove?</p>",
        "id": 171330592,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563634831
    },
    {
        "content": "<p>I guess the hard part is infinite sup and inf.</p>",
        "id": 171330600,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563634856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure subthing (K : Type) [thing K] :=\n(carrier : set K)\n(proof : is_subthing carrier)\n</pre></div>\n\n\n<p>Is <code>carrier</code> idiomatic Lean?</p>",
        "id": 171330914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563635323
    },
    {
        "content": "<p>The first begin end block proves this:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nα : Type u_1,\n_inst_1 : topological_space α\n⊢ (λ (U V : opens α), ⟨U.val ∩ V.val, _⟩) = complete_lattice.inf\n</pre></div>\n\n\n<p>and the second proves this:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nα : Type u_1,\n_inst_1 : topological_space α\n⊢ (λ (Us : set (opens α)), ⟨⋃₀(subtype.val &#39;&#39; Us), _⟩) = complete_lattice.Sup\n</pre></div>",
        "id": 171330915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563635323
    },
    {
        "content": "<p>My guess is it's because  the definition given by the galois insertion would be <code>interior (a \\cap b) </code>, but that's not the definition we want in this case.</p>",
        "id": 171331005,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563635505
    },
    {
        "content": "<p>That's an interesting observation.</p>\n<p>Is there no notation for <code>has_Sup</code> or <code>has_Inf</code> like we have <code>⊔</code> and <code>⊓</code> for sup and inf? And this <code>supr</code> notation <code>⨆</code> -- is that notation which doesn't have a typeclass associated to it? Is that something which could change in Lean 4?</p>",
        "id": 171331367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563636098
    },
    {
        "content": "<p>It doesn't have a typeclass because of universe issues.</p>",
        "id": 171331682,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563636655
    },
    {
        "content": "<p>The indexing type could be in any universe.</p>",
        "id": 171331689,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563636675
    },
    {
        "content": "<p>It leads to a somewhat unnatural definition for cInf on Prop and set</p>",
        "id": 171331752,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563636760
    },
    {
        "content": "<p>Is this a bug in <code>open</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sublattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup_preserved</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inf_preserved</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- note that lattice is open.</span>\n<span class=\"c1\">-- uncomment the next line to fix line 17:</span>\n<span class=\"c1\">-- open lattice</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">sublattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">sublattice</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 171332861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563638753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span> <span class=\"c1\">-- insert data here</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_subthing</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- insert proofs here</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subthing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">thing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">proof</span> <span class=\"o\">:</span> <span class=\"n\">is_subthing</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">subthing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">subthing</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subthing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subthing</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">subthing</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Which coercion should I be using?</p>",
        "id": 171333955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563640719
    },
    {
        "content": "<p>Probably the first two.</p>",
        "id": 171334282,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563641355
    },
    {
        "content": "<blockquote>\n<p>I'm AFK.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> AFK? Did you mean AFL?</p>",
        "id": 171335500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563643641
    },
    {
        "content": "<p>What's AFL?</p>",
        "id": 171340830,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563653454
    },
    {
        "content": "<p>Maybe Chris is trying out a pure type theory without axiom K.</p>",
        "id": 171340837,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563653471
    },
    {
        "content": "<p>I mean away from laptop. But my phone screen doesn't count as a keyboard.</p>",
        "id": 171340845,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563653521
    },
    {
        "content": "<p>AFL = away from lean</p>\n<p>i wonder if anyone's tried running lean on their phone</p>",
        "id": 171341098,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563653921
    },
    {
        "content": "<p>I tried because there is an emacs app. I gave up without much effort. I think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> does it.</p>",
        "id": 171341175,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563654037
    },
    {
        "content": "<p>Yes I've had Lean running on rooted Android phone</p>",
        "id": 171341888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563655442
    },
    {
        "content": "<p>browser-lean?</p>",
        "id": 171342520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563656597
    },
    {
        "content": "<p>It was a chrooted debian with emacs</p>",
        "id": 171346108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563663957
    }
]