[
    {
        "content": "<p>The monad refactoring PR was merged! Congratulations <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> !</p>",
        "id": 123983991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521584349
    },
    {
        "content": "<p>You can give us Lean 4 now <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 123983995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521584366
    },
    {
        "content": "<p>Breaking every existing monad instance with that merge should provide a small taste of Lean 4 <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 123984190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521584744
    },
    {
        "content": "<p>I have a sense you may experience what the Haskell implementers experienced. The Haskell users act like addicts when breaking change occurs. Instead of yelling \"You bastards! You broke my code\" they say \"Amazing! Where's the rest?\"</p>",
        "id": 123984312,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521584987
    },
    {
        "content": "<p>Are there existing monad instances? Besides the tactic monad of course (you didn't break that one, did you?)</p>",
        "id": 123984389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521585083
    },
    {
        "content": "<p><code>list</code> had better be a monad</p>",
        "id": 123984393,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521585095
    },
    {
        "content": "<p>And the IO monad that is used by leanpkg</p>",
        "id": 123984394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521585104
    },
    {
        "content": "<p>I'm sure you also didn't break that one</p>",
        "id": 123984396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521585114
    },
    {
        "content": "<p>Come on, Leo wouldn't merge a Lean branch with broken <code>list</code></p>",
        "id": 123984439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521585147
    },
    {
        "content": "<p><code>option</code> had better be a monad</p>",
        "id": 123984443,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521585175
    },
    {
        "content": "<p>There's also <code>state</code> and <code>option</code> I believe</p>",
        "id": 123984444,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521585178
    },
    {
        "content": "<p>let's try #print instances monad</p>",
        "id": 123984445,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521585179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">resultT_monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">resultT</span> <span class=\"n\">M</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">result_monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">list</span>\n<span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">smt_tactic</span>\n<span class=\"n\">vm_core</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">vm_core</span>\n<span class=\"n\">option_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">option_t</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">conv</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">conv</span>\n<span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">transformed_monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">monad_transformer</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">state_t</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">option</span>\n<span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">task</span>\n<span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">interaction_monad</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">exceptional</span><span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">exceptional</span>\n<span class=\"n\">monad_fail</span><span class=\"bp\">.</span><span class=\"n\">to_monad</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">monad_fail</span> <span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">monad</span> <span class=\"n\">m</span>\n</pre></div>",
        "id": 123984456,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521585202
    },
    {
        "content": "<p>I meant instances outside of core</p>",
        "id": 124001851,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521622897
    },
    {
        "content": "<p>Are there any in mathlib? My limited understanding is that monads are important in core or for people doing programming in Lean, but not for mathematicians</p>",
        "id": 124003440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521626317
    },
    {
        "content": "<p>I guess I use the tactic monad...</p>",
        "id": 124003584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521626572
    },
    {
        "content": "<p>Sure, but this one is not broken</p>",
        "id": 124003591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521626588
    },
    {
        "content": "<p>...and the occasional list...</p>",
        "id": 124003593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521626602
    },
    {
        "content": "<p>also not broken</p>",
        "id": 124003715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521626782
    },
    {
        "content": "<p><code>computation</code>, <code>roption</code>, <code>pfun</code>, <code>seq</code>, <code>wseq</code>, <code>filter</code></p>",
        "id": 124003768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521626885
    },
    {
        "content": "<p>Are these names of monads in mathlib?</p>",
        "id": 124003771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521626907
    },
    {
        "content": "<p>Is mathlib currently broken?</p>",
        "id": 124003773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1521626914
    },
    {
        "content": "<p>probably, haven't had time to check</p>",
        "id": 124003776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521626942
    },
    {
        "content": "<p>seems very unlikely that sebastian's huge merge didn't break mathlib</p>",
        "id": 124003787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521626979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What happened to the proofs of <code>is_lawful_functor option</code>?</p>",
        "id": 124034102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521671749
    },
    {
        "content": "<p>Oh, found it - <code>init.data.option.instances</code>. This is the first time I've seen a file in <code>init</code> import namespace which is not imported by default. Was that deliberate?</p>",
        "id": 124034711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521672763
    },
    {
        "content": "<p>No, definitely not. Thanks for noticing.</p>",
        "id": 124035075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521673405
    },
    {
        "content": "<p>We should have some noticing tool for that :)</p>",
        "id": 124035078,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521673423
    },
    {
        "content": "<p>Looks like you do :-)</p>",
        "id": 124035133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521673522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> fixed</p>",
        "id": 124035943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521674731
    },
    {
        "content": "<p><code>mathlib</code> should now be fixed, although I built against sebastian's commit which won't appear until tomorrow's nightly build</p>",
        "id": 124039009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521679809
    }
]