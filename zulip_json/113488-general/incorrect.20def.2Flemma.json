[
    {
        "content": "<p>In the latest installment of my <code>#sanity_check</code> command, here is a list of all declarations in mathlib that either</p>\n<ul>\n<li>are a lemma/theorem but construct data</li>\n<li>are a definition, but define an element of a proposition</li>\n</ul>\n<p><a href=\"https://gist.github.com/fpvandoorn/bdc82881ba8e6461460e8028c291162f\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/bdc82881ba8e6461460e8028c291162f\">https://gist.github.com/fpvandoorn/bdc82881ba8e6461460e8028c291162f</a></p>\n<p>Maybe some of them are intended to be like this, but most of them should be changed.</p>\n<p>The ultimate goal of the <code>#sanity_check</code> command is that you put it at the bottom of your file while working on it, and it will give you warnings for things you're probably doing wrong. What other (realistic) features would you like it to detect?</p>",
        "id": 173082282,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565667462
    },
    {
        "content": "<p>Kenny once found some applications of <code>simp</code> in mathlib which could be changed to <code>rfl</code></p>",
        "id": 173091319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565680340
    },
    {
        "content": "<p>But that might be asking too much</p>",
        "id": 173091324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565680349
    },
    {
        "content": "<p>I was wondering if we could use this to flag particularly large or slow proofs. Quiz: if we define <code>meta def expr.size (e : expr) : ℕ := e.fold 0 $ λ _ _, nat.succ</code>, what do you think is biggest declaration in mathlib? No cheating.</p>",
        "id": 173094712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565684271
    },
    {
        "content": "<p>(Note, this definition of size has very little correlation to compile time, partly because it ignores auxiliary declarations.)</p>",
        "id": 173094857,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565684386
    },
    {
        "content": "<p>Here are the top 50. The average is 337.</p>\n<div class=\"codehilite\"><pre><span></span>(81923, Gromov_Hausdorff.totally_bounded)\n(51474, category_theory.yoneda_lemma._proof_4)\n(51307, category_theory.yoneda_lemma._proof_5)\n(45050, filter.is_lawful_monad)\n(44764, emetric.countable_closure_of_compact)\n(39488, dense_Inter_of_open_nat)\n(38767, is_integral_of_mem_of_fg)\n(38442, category_theory.whiskering_left._proof_13)\n(36064, category_theory.adjunction.cocones_iso._proof_5)\n(35121, _private.51918499.mul_le_of_limit_aux)\n(32774, category_theory.whiskering_right._proof_13)\n(32371, category_theory.category_of_elements._proof_5)\n(30707, category_theory.whiskering_right._proof_12)\n(30515, category_theory.adjunction.cones_iso._proof_5)\n(29441, measure_theory.simple_func_sequence_tendsto)\n(28014, real.exists_sup)\n(27209, category_theory.uncurry._proof_9)\n(26970, category_theory.category_of_elements.to_comma._proof_7)\n(26028, set.is_lawful_monad)\n(25754, ring.direct_limit.of.zero_exact_aux)\n(25726, is_noetherian_pi)\n(25578, ordinal.add_le_of_limit)\n(24060, nat.partrec.code.evaln_complete)\n(24005, Gromov_Hausdorff.second_countable)\n(23577, category_theory.uncurry._proof_7)\n(23420, category_theory.whiskering_right._proof_11)\n(23065, exists_preimage_norm_le)\n(22119, bounded_continuous_function.arzela_ascoli₁)\n(22105, hash_map.mem_insert)\n(21108, free_group.is_lawful_monad)\n(21004, real.pi_gt_314)\n(20566, turing.TM2to1.tr_respects_aux₂)\n(20254, turing.TM2to1.tr_supports)\n(19701, category_theory.lax_monoidal_functor.mk.inj_eq)\n(19439, nat.partrec.code.evaln_prim)\n(19291, category_theory.uncurry._proof_8)\n(19029, nat.partrec.code.evaln_sound)\n(18929, writer_t.is_lawful_monad)\n(18766, category_theory.adjunction.functoriality_is_right_adjoint._proof_5)\n(18704, real.pi_lt_315)\n(18639, onote.repr_power_aux₂)\n(18530, category_theory.adjunction.functoriality_is_left_adjoint._proof_5)\n(18514, category_theory.adjunction.functoriality_is_left_adjoint._proof_6)\n(18498, category_theory.adjunction.functoriality_is_right_adjoint._proof_6)\n(18435, exists_of_linear_independent_of_finite_span)\n(17418, semiquot.is_lawful_monad)\n(17392, category_theory.whiskering_left._proof_12)\n(17372, except_t.is_lawful_monad)\n(17075, turing.TM1to1.tr_supports)\n(17057, category_theory.adjunction.cocones_iso._proof_3)\n</pre></div>",
        "id": 173096912,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565686572
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 173107401,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565698507
    },
    {
        "content": "<p>It's surprising that <code>yoneda_lemma</code> achieves both the <a href=\"https://github.com/leanprover-community/mathlib/issues/2\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2\">#2</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a> positions on this list, considering the size of the proof script. Perhaps the <code>obviously</code> isn't obvious after all?</p>",
        "id": 173127347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565712729
    },
    {
        "content": "<p>It's obvious to mathematicians :P</p>",
        "id": 173127449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565712804
    },
    {
        "content": "<p>I see that <code>Gromov_Hausdorff.totally_bounded</code> comes first. Since I wrote it, does it make me an olympic champion for writing such a big proof, or an olympic loser for being unable to write optimized proofs?</p>",
        "id": 173128110,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1565713273
    },
    {
        "content": "<p>I would say olympic champion for refusing to split off lemmas.</p>",
        "id": 173128389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565713474
    },
    {
        "content": "<p>I jus had a look at the proof, it is not that bad (150 lines, no obvious lemma to split off).</p>",
        "id": 173128865,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1565713909
    },
    {
        "content": "<p>It's funny. Printing the long proofs from <code>tidy</code> isn't so bad, even with <code>pp.all</code>. In contrast, <code>Gromov_Hausdorff.totally_bounded</code> locks up VS Code for me. Where is the complexity in <code>yoneda</code> coming from?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">gromov_hausdorff</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span><span class=\"bp\">._</span><span class=\"n\">proof_4</span>\n</pre></div>",
        "id": 173131849,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565716235
    },
    {
        "content": "<p>Oh, duh. <code>category_theory.yoneda._proof_4</code> isn't <code>category_theory.yoneda_lemma._proof_4</code>. That one's bigger (but still loads okay).</p>",
        "id": 173133284,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565717269
    },
    {
        "content": "<p>I'll try to have a look sometime. I suspect all the category theory lemmas appearing here is just a consequence of the category theory library actually using <em>dependent</em> types all over, and hence expressions tend to have huge invisible implicit arguments, often repeated many times over.  I bet if we could measure the \"weight\" of an expression deduplicating repeated subexpressions these lemmas would fall down the list somewhat.</p>",
        "id": 173158297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565736076
    },
    {
        "content": "<p>Could sanity check even check for duplicate definitions? That is, find a definition in this file which is definitionally equal to some imported definition?</p>",
        "id": 173274596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565858781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks for building these lists! They are useful reminders of maintenance work that we shouldn't forget about.</p>",
        "id": 174042583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566659488
    },
    {
        "content": "<p>All of the \"defs that should be lemmas\" in the category theory library were being created by <code>restate_axiom</code>. I've updated this to create lemmas when appropriate, in <a href=\"https://github.com/leanprover-community/mathlib/issues/1390\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1390\">#1390</a>.</p>",
        "id": 174749653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567470444
    },
    {
        "content": "<p>Good catch!</p>",
        "id": 174774827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567505449
    }
]