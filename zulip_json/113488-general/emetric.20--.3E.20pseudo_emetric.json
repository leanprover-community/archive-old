[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/7672\">#7672</a> Sébastien found some uses of <code>[emetric_space]</code> that can be weakened to <code>[pseudo_emetric_space]</code>, without touching the proof.  I guess there are more, and similarly for <code>[metric_space]</code>, <code>[normed_group]</code>, <code>[normed_space]</code> (we recently introduce these classes because we needed them for LTE).</p>\n<p>Is it possible to automatize this process? There are just 38 <code>[emetric_space...</code> and 91 <code>[emetric_space...</code>, with some time can also be done by hand.</p>\n<p>I have no idea if this is very hard or not, but ideally one should check every lemma that has a <code>[emetric_space</code>, but not explicitly written (because it appears before as <code>variable [emetric_space...</code>)</p>",
        "id": 239506206,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621464179
    },
    {
        "content": "<p>One problem is just that we'd have to run the tool multiple times, as each time we relax a hypothesis new lemmas may become \"relaxable\". I doubt it's worth automating this process, which would be much harder.</p>",
        "id": 239508529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621465508
    },
    {
        "content": "<p>I wouldn't mind having this tool available for other things: e.g. I have several open PRs just consisting of relaxing comm_ring to ring or field to division_ring when it's possible to do so without touching the proof.</p>",
        "id": 239508681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621465606
    },
    {
        "content": "<p>Ah, good point!</p>",
        "id": 239509084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621465875
    },
    {
        "content": "<p>The generalization linter I spoke about at lean together 2021 aims to do exactly this (<a href=\"https://www.youtube.com/watch?v=4W-B8tGJUME&amp;ab_channel=leanprovercommunity\">https://www.youtube.com/watch?v=4W-B8tGJUME&amp;ab_channel=leanprovercommunity</a>). It mostly works and I'm working on improving it currently. The main problem right now is just that it is a little slow, which makes it difficult to use interactively in big files (i.e. it times out). This makes using it iteratively a pain, as Scott points out this is really the way you want to use it.<br>\nFor example running it on <code>src/topology/metric_space/basic.lean</code> it currently outputs</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4W-B8tGJUME\" href=\"https://www.youtube.com/watch?v=4W-B8tGJUME&amp;ab_channel=leanprovercommunity\"><img src=\"https://uploads.zulipusercontent.net/75d07c52f8b803b618092c33f07a90124fe5637a/68747470733a2f2f692e7974696d672e636f6d2f76692f34572d423874474a554d452f64656661756c742e6a7067\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">metric_space</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Checking 310 declarations (plus 206 automatically generated ones) in the current file -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `generalisation_linter` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> typeclass generalisations may be possible: -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.ball</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ has_dist</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.closed_ball</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ has_dist</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.sphere</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ has_dist</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.complete_of_cauchy_seq_tendsto</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ pseudo_emetric_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">totally_bounded_Icc</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ uniform_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.bounded</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ has_dist</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.diam</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_1: pseudo_metric_space ↝ pseudo_emetric_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.uniform_embedding_iff'</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_3: metric_space ↝ pseudo_metric_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">exists_subset_Union_ball_radius_lt</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_2: metric_space ↝ normal_space pseudo_metric_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">exists_subset_Union_ball_radius_pos_lt</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_2: metric_space ↝ normal_space pseudo_metric_space</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">metric.second_countable_of_countable_discretization</span> <span class=\"c\">/-</span><span class=\"cm\"> _inst_3: metric_space ↝ proper_space pseudo_metric_space</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>This takes a few minutes at present which is annoying.<br>\nNote that some of these are defs which you may or may not want to generalize, and that generalizations like <code>metric_space ↝ normal_space pseudo_metric_space</code> look mathematically trivial to me.</p>",
        "id": 239515196,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1621469675
    },
    {
        "content": "<p>Thanks, nice talk! I missed most of LT21, timezones. :-(</p>\n<p>Could we have this sooner rather than later even if it is slow? I would use it already.</p>",
        "id": 239516476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621470618
    },
    {
        "content": "<p>Often I know exactly which generalization I'm looking for (e.g. I want to find all the places I can relax <code>[field]</code> to <code>[division_ring]</code>.). Presumably your linter could be much faster if it only had to test for one particular possibility. (It's certainly good to have the universal one as well.)</p>",
        "id": 239516575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621470689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/emetric.20--.3E.20pseudo_emetric/near/239516575\">said</a>:</p>\n<blockquote>\n<p>Often I know exactly which generalization I'm looking for (e.g. I want to find all the places I can relax <code>[field]</code> to <code>[division_ring]</code>.). Presumably your linter could be much faster if it only had to test for one particular possibility. (It's certainly good to have the universal one as well.)</p>\n</blockquote>\n<p>Thanks, that's a nice idea, it'll definitely cut the time down a bit and make this more usable, though with the way it currently works I think it'd still have to build the whole TC graph as the first step. What I really need is a way to cache that step between runs also.</p>",
        "id": 239518912,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1621472600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/emetric.20--.3E.20pseudo_emetric/near/239516476\">said</a>:</p>\n<blockquote>\n<p>Could we have this sooner rather than later even if it is slow? I would use it already.</p>\n</blockquote>\n<p>Noted <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239518921,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1621472612
    },
    {
        "content": "<p>(Of course, I don't mean to pressure you; just that I don't mind it being slow!)</p>",
        "id": 239519222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621472865
    },
    {
        "content": "<p>In general, can't we decide to run some linters every now and then rather than in CI? This linter has a bit of a one-time job. We don't need it to run that many times over each declarations.</p>",
        "id": 239545096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621494918
    },
    {
        "content": "<p>Or maybe we want to, because then the people who created the problem noticed by the linter will see it and can better correct it than someone else?</p>",
        "id": 239545191,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621494969
    },
    {
        "content": "<p>I don't think this one should ever be run in CI. There are many good reasons not to state the most general possible theorems.</p>",
        "id": 239545354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621495088
    },
    {
        "content": "<p>I think the plan is only that it is a linter you run by hand.</p>",
        "id": 239545369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621495104
    },
    {
        "content": "<p>Yeah okay, that's what I would deem reasonable.</p>",
        "id": 239545648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621495283
    },
    {
        "content": "<p>That's great! I also don't mind using one or two cores of my university mainframe to test this  (nobody uses it...)</p>",
        "id": 239551309,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621498108
    }
]