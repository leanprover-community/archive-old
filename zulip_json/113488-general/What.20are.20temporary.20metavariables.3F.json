[
    {
        "content": "<p>There are lots of functions for dealing with 'temporary metavariables' in <code>init.meta.type_context</code>. Could anyone explain what these are (as opposed to non-temporary metas)?</p>",
        "id": 198785203,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590509330
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> is the best person to answer this</p>",
        "id": 198786561,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1590509956
    },
    {
        "content": "<p>The problem is that metavariables are too slow for some things like matching and rewriting. Because in order to perform a unification you need to carry round a metavariable context and do lots of checks. Temporary metavariables are used in the internals of lean when it needs to unify / match things very quickly. The best description of them is <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/type_context.h#L54\">here in the source code</a>.</p>",
        "id": 198789885,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590511558
    },
    {
        "content": "<p>Thank you, that comment was very helpful! Unfortunately, based on this, it seems like temporary metas don't work for my application.</p>\n<p>Follow-up: If I create a regular meta, can I use it to perform some unification, get the meta assignment (if any) and throw the meta away? Or will Lean be unhappy because the meta remains unassigned?</p>",
        "id": 198793695,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590513554
    },
    {
        "content": "<p>Also, based on the comment, it seems like I can't freeze individual metas (i.e. prevent them from being  assigned); I can only freeze the entire left-hand side and/or right-hand side of a unification problem. Is that accurate?</p>",
        "id": 198794935,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590514187
    },
    {
        "content": "<p>You could assign local constants to the meta-variables.  This also prevents them from being assigned (with something else).</p>",
        "id": 198795172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590514275
    },
    {
        "content": "<p>Gabriel is right</p>",
        "id": 198795189,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590514284
    },
    {
        "content": "<p>but you can now also get the assignment directly with <code>type_context.get_assignment</code></p>",
        "id": 198795353,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590514347
    },
    {
        "content": "<p>The idea of <code>type_context</code> was that <code>tactic</code> has a restrictive interface to make it difficult to make a badly formed expression. Whereas the type_context lets you modify the metavariable context and local context directly</p>",
        "id": 198795469,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590514415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20temporary.20metavariables.3F/near/198795172\">said</a>:</p>\n<blockquote>\n<p>You could assign local constants to the meta-variables.  This also prevents them from being assigned (with something else).</p>\n</blockquote>\n<p>Okay, but if I use this to freeze a meta, then I can't unfreeze it any more, right? I guess I could overwrite the assignment with a new meta.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/What.20are.20temporary.20metavariables.3F/near/198795353\">said</a>:</p>\n<blockquote>\n<p>but you can now also get the assignment directly with <code>type_context.get_assignment</code></p>\n</blockquote>\n<p>Right. I'll try to use this and some regular metas; let's see if Lean is okay with that.</p>",
        "id": 198841757,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590543246
    },
    {
        "content": "<p>Once you've assigned a meta to a local, you can't unassign it from <code>tactic</code>. You would have to instantiate the assignment local with a new meta.</p>",
        "id": 198880069,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590580073
    },
    {
        "content": "<p>Okay, thanks. Next question (sorry, I'm just finding my way around the API): Is it correct that when unification fails, I can't tell whether this is because the terms cannot be unified or whether the unification strategy is just not powerful enough? I want to distinguish between the unification failures for <code>zero =?= suc x</code> and <code>2 * x =?= 3 * y</code>.</p>",
        "id": 198880534,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590580436
    },
    {
        "content": "<p>No.  As you can probably imagine, non-unifiability is hard to determine.</p>",
        "id": 198880715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590580558
    },
    {
        "content": "<p>Okay, I can see how that would be difficult.</p>",
        "id": 198880947,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590580752
    }
]