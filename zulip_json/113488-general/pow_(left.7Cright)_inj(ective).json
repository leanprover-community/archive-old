[
    {
        "content": "<p>In <code>algebra.group_power</code>, there is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">pow_right_inj</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hxpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hypos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hxyn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>In <code>data.nat.basic</code>, there is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pow_left_injective</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_right_injective</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Am I being stupid, or are the terms <code>left</code> and <code>right</code> used in opposite ways here?</p>",
        "id": 197104653,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589178662
    },
    {
        "content": "<p>This happens sometimes. You can try to look at other lemmas with <code>left</code>/<code>right</code> and <code>inj</code> in their names, decide which convention is used in more cases, and PR a fix.</p>",
        "id": 197104913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589178872
    },
    {
        "content": "<p>Will do, thanks.</p>",
        "id": 197104956,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589178914
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/inf_le_inf_left\" title=\"#narrow/stream/113488-general/topic/inf_le_inf_left\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/inf_le_inf_left</a></p>",
        "id": 197104958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589178915
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> git grep <span class=\"s1\">&#39;\\(lemma\\|theorem\\) *[^ ]*\\(left\\|right\\)[^ ]*inj&#39;</span>\n<span class=\"go\">docs/contribute/style.md:theorem add_right_inj {n m k : nat} : n + m = n + k → m = k :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:theorem mul_left_injective [left_cancel_semigroup M] (a : M) : function.injective ((*) a) :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:theorem mul_right_injective [right_cancel_semigroup M] (a : M) : function.injective (λ x, x * a) :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:theorem mul_left_inj [left_cancel_semigroup M] (a : M) {b c : M} : a * b = a * c ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:theorem mul_right_inj [right_cancel_semigroup M] (a : M) {b c : M} : b * a = c * a ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:@[simp] lemma sub_left_inj : a - b = a - c ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/basic.lean:@[simp] lemma sub_right_inj : b - a = c - a ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/units.lean:@[simp, to_additive] theorem mul_left_inj (a : units α) {b c : α} : (a:α) * b = a * c ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/units.lean:@[simp, to_additive] theorem mul_right_inj (a : units α) {b c : α} : b * a = c * a ↔ b = c :=</span>\n<span class=\"go\">src/algebra/group/units.lean:  @[simp] theorem divp_right_inj (u : units α) {a b : α} : a /ₚ u = b /ₚ u ↔ a = b :=</span>\n<span class=\"go\">src/algebra/group_power.lean:theorem pow_right_inj {x y : R} {n : ℕ} (Hxpos : 0 ≤ x) (Hypos : 0 ≤ y) (Hnpos : 0 &lt; n)</span>\n<span class=\"go\">src/algebra/group_with_zero.lean:lemma div_right_inj&#39; (hc : c ≠ 0) : a / c = b / c ↔ a = b :=</span>\n<span class=\"go\">src/algebra/group_with_zero.lean:lemma mul_right_inj&#39; (hc : c ≠ 0) : a * c = b * c ↔ a = b :=</span>\n<span class=\"go\">src/algebra/ring.lean:  theorem domain.mul_right_inj {a b c : α} (ha : a ≠ 0) : b * a = c * a ↔ b = c :=</span>\n<span class=\"go\">src/algebra/ring.lean:  theorem domain.mul_left_inj {a b c : α} (ha : a ≠ 0) : a * b = a * c ↔ b = c :=</span>\n<span class=\"go\">src/data/finsupp.lean:lemma single_right_inj (h : b ≠ 0) :</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_left_inj {t₁ t₂ : list α} (s) : s ++ t₁ = s ++ t₂ ↔ t₁ = t₂ :=</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_right_inj {s₁ s₂ : list α} (t) : s₁ ++ t = s₂ ++ t ↔ s₁ = s₂ :=</span>\n<span class=\"go\">src/data/list/basic.lean:theorem prefix_append_left_inj {l₁ l₂ : list α} (l) : l ++ l₁ &lt;+: l ++ l₂ ↔ l₁ &lt;+: l₂ :=</span>\n<span class=\"go\">src/data/nat/basic.lean:protected theorem mul_right_inj {a b c : ℕ} (ha : 0 &lt; a) : b * a = c * a ↔ b = c :=</span>\n<span class=\"go\">src/data/nat/basic.lean:protected theorem mul_left_inj {a b c : ℕ} (ha : 0 &lt; a) : a * b = a * c ↔ b = c :=</span>\n<span class=\"go\">src/data/nat/basic.lean:lemma pow_right_injective {x : ℕ} (k : 2 ≤ x) : function.injective (nat.pow x) :=</span>\n<span class=\"go\">src/data/nat/basic.lean:lemma pow_left_injective {m : ℕ} (k : 1 ≤ m) : function.injective (λ (x : ℕ), x^m) :=</span>\n<span class=\"go\">src/data/real/ennreal.lean:lemma add_left_inj (h : a &lt; ∞) : a + b = a + c ↔ b = c :=</span>\n<span class=\"go\">src/data/real/ennreal.lean:lemma add_right_inj (h : a &lt; ∞) : b + a = c + a ↔ b = c :=</span>\n<span class=\"go\">src/data/real/ennreal.lean:lemma sub_left_inj {a b c : ennreal} (ha : a &lt; ⊤) (hb : b ≤ a) (hc : c ≤ a) :</span>\n<span class=\"go\">src/data/set/function.lean:theorem left_inv_on.inj_on (h : left_inv_on f₁&#39; f s) : inj_on f s :=</span>\n<span class=\"go\">src/linear_algebra/basis.lean:lemma exists_left_inverse_linear_map_of_injective {f : V →ₗ[K] V&#39;}</span>\n<span class=\"go\">src/set_theory/ordinal.lean:theorem mul_left_inj {a b c : ordinal} (a0 : 0 &lt; a) : a * b = a * c ↔ b = c :=</span>\n<span class=\"go\">src/set_theory/ordinal.lean:theorem power_right_inj {a b c : ordinal}</span>\n<span class=\"gp\">$</span> git grep <span class=\"s1\">&#39;\\(lemma\\|theorem\\) *[^ ]*inj[^ ]*\\(left\\|right\\)&#39;</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_inj_left {s₁ s₂ t₁ t₂ : list α} (h : s₁ ++ t₁ = s₂ ++ t₂) (hl : length s₁ = length s₂) : t₁ = t₂ :=</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_inj_right {s₁ s₂ t₁ t₂ : list α} (h : s₁ ++ t₁ = s₂ ++ t₂) (hl : length s₁ = length s₂) : s₁ = s₂ :=</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_inj_left&#39; {s₁ s₂ t₁ t₂ : list α} (h : s₁ ++ t₁ = s₂ ++ t₂) (hl : length t₁ = length t₂) : t₁ = t₂ :=</span>\n<span class=\"go\">src/data/list/basic.lean:theorem append_inj_right&#39; {s₁ s₂ t₁ t₂ : list α} (h : s₁ ++ t₁ = s₂ ++ t₂) (hl : length t₁ = length t₂) : s₁ = s₂ :=</span>\n<span class=\"go\">src/data/multiset.lean:@[simp] theorem cons_inj_left {a b : α} (s : multiset α) :</span>\n<span class=\"go\">src/data/multiset.lean:@[simp] theorem cons_inj_right (a : α) : ∀{s t : multiset α}, a::s = a::t ↔ s = t :=</span>\n<span class=\"go\">src/data/set/function.lean:theorem inj_on.right_inv_on_of_left_inv_on (hf : inj_on f s) (hf&#39; : left_inv_on f f&#39; t)</span>\n<span class=\"go\">src/data/set/function.lean:theorem inj_on.left_inv_on_inv_fun_on [nonempty α] (h : inj_on f s) :</span>\n<span class=\"go\">src/logic/function.lean:theorem injective_of_partial_inv_right {α β} {f : α → β} {g} (H : is_partial_inv f g)</span>\n<span class=\"go\">src/logic/function.lean:theorem inv_fun_eq_of_injective_of_right_inverse {g : β → α}</span>\n<span class=\"go\">src/logic/function.lean:lemma injective.has_left_inverse (hf : injective f) : has_left_inverse f :=</span>\n<span class=\"go\">src/logic/function.lean:lemma injective_iff_has_left_inverse : injective f ↔ has_left_inverse f :=</span>\n</code></pre></div>",
        "id": 197105047,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589179037
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2652\">#2652</a></p>",
        "id": 197112681,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589184403
    },
    {
        "content": "<p>I'm surprised that the convention used in that PR is more popular. I would have used the other way around.</p>",
        "id": 197117954,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589187708
    },
    {
        "content": "<p>I would concur with Chris here. I think that in an injectivity lemma you should name the variable that changes, not the variable that doesn't. (Consider how it would generalize to theorems like <code>f a b c d = f a b c' d -&gt; c = c'</code>.)</p>",
        "id": 197118701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589188345
    },
    {
        "content": "<p>that's why the left/right convention is arbitrary and entirely inconsistent</p>",
        "id": 197118936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589188522
    },
    {
        "content": "<p>In maths I never know what a left module is and a right module. I never know what a left adjoint and a right adjoint functor are either, and all attempts to \"explain\" this to me have been ultimately futile. I don't even know which to use out of <code>congr_arg</code> and <code>congr_fun</code>. One fixes the arg and changes the fun, and the other does the other one. I just look these things up when I need to know.</p>",
        "id": 197118969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589188548
    },
    {
        "content": "<p>With a congr lemma do you name the variable that changes or the variable that doesn't? With a left module is it the ring element on the left or the module element? Is it possible to make some sort of global convention or are all of these slightly different questions each worthy of conventions which have to be individually learnt?</p>",
        "id": 197120168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189399
    },
    {
        "content": "<p>with <code>congr_arg</code> and <code>congr_fun</code>, the named thing is the thing that changes</p>",
        "id": 197120232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589189419
    },
    {
        "content": "<p>Now tell me how to remember that</p>",
        "id": 197120248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189435
    },
    {
        "content": "<p>Because this is an arbitrary decision</p>",
        "id": 197120305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189486
    },
    {
        "content": "<p>I think the multiple arguments thing is a good example. If you have a seven argument function and you need to change one of them, you want to name the thing that is changing</p>",
        "id": 197120316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589189497
    },
    {
        "content": "<p>i.e. <code>f_inj_third_arg</code> or something</p>",
        "id": 197120383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589189527
    },
    {
        "content": "<p>Can this be translated into a convention for a=b iff a+c = b+c? Is the left argument \"changing\"there in the sense that it could be two things?</p>",
        "id": 197120420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189564
    },
    {
        "content": "<p>This is injectivity of <code>\\lam x, x + c</code>. Spot the variable</p>",
        "id": 197120470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589189600
    },
    {
        "content": "<p>This is something I've struggled with all my life and I'd love to see some sort of global \"principle\" which guides conventions so I get better at guessing</p>",
        "id": 197120484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589189613
    },
    {
        "content": "<p>If you have <code>\\lam x, bla bla .... x ... bla bla</code> you name where the <code>x</code> is</p>",
        "id": 197120529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589189641
    },
    {
        "content": "<p>One reason why the other convention is so popular might be that lemmas like <code>mul_left_injective</code> are really just synonyms for lemmas like <code>mul_left_cancel</code>, which follow the other convention. Still, I agree that the convention where the name refers to the variable makes more sense and will make another PR.</p>",
        "id": 197121855,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589190432
    },
    {
        "content": "<p><code>mul_left_cancel</code> makes some sense given that it says in the name that the thing on the left is being cancelled</p>",
        "id": 197122423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190752
    },
    {
        "content": "<p>it also agrees with wikipedia</p>",
        "id": 197122435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589190766
    },
    {
        "content": "<p>I agree. I just meant that when defining a synonym for <code>mul_left_cancel</code> (which is a good name), it might be tempting to name it <code>mul_left_injective</code>, even though <code>mul_right_injective</code> makes more sense</p>",
        "id": 197122524,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589190820
    },
    {
        "content": "<p>I struggled with the <code>left</code>/<code>right</code> conventions in the early days of Lean, when working on the libraries for Lean 0.1 and Lean 2. I apologize if some of the inconsistencies go back to me. I remember trying to adopt a convention that in a name like <code>nat.dvd_of_mul_dvd_mul_right</code>, the new thing was being multiplied on the right, so the theorem has something to do with replacing <code>x</code> by <code>x * k</code>. (So now can you guess what the theorem says?)</p>\n<p>I see that <code>left</code> and <code>right</code> are mentioned lots of times in our naming conventions: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md</a>, but we don't say anything about how to use them. It might help if someone tries to establish a consistent convention, but, in practice, it doesn't make a difference. It is hard to remember and think through the conventions anyhow, so users will generally use tab completion and choose the one they want.</p>",
        "id": 197132864,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1589197428
    },
    {
        "content": "<p>If <code>left</code> and <code>right</code> are entirely arbitrary then why don't we just go with <code>1</code> and <code>2</code> to save characters</p>",
        "id": 197144494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589203468
    },
    {
        "content": "<p>I agree it doesn't make much difference in practice--I just type part of the name and then look at the types of whatever autocomplete comes up with. However, I think the principle that there's one thing changing and that is what you should name is a sound one.</p>",
        "id": 197147970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589205195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)/near/197104653\">said</a>:</p>\n<blockquote>\n<p>In <code>algebra.group_power</code>, there is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">pow_right_inj</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hxpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hypos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hxyn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>In <code>data.nat.basic</code>, there is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pow_left_injective</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_right_injective</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Am I being stupid, or are the terms <code>left</code> and <code>right</code> used in opposite ways here?</p>\n</blockquote>\n<p>For what it's worth, I think the second example was in my PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/1683\">#1683</a>) so this could well be my fault - I think it was one of my earliest mathlib contributions, sorry!</p>",
        "id": 197153917,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589207668
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/issues/2655\">#2655</a>, which does the opposite of <a href=\"https://github.com/leanprover-community/mathlib/issues/2652\">#2652</a>.</p>",
        "id": 197154882,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589208118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)/near/197154882\">said</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/issues/2655\">#2655</a>, which does the opposite of <a href=\"https://github.com/leanprover-community/mathlib/issues/2652\">#2652</a>.</p>\n</blockquote>\n<p>Is the point that you think the 2655 is better, or that doing them both and looking at the resulting changes is a good way to decide which one is better, or something else?</p>",
        "id": 197159014,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589209737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)/near/197159014\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)/near/197154882\">said</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/issues/2655\">#2655</a>, which does the opposite of <a href=\"https://github.com/leanprover-community/mathlib/issues/2652\">#2652</a>.</p>\n</blockquote>\n<p>Is the point that you think the 2655 is better, or that doing them both and looking at the resulting changes is a good way to decide which one is better, or something else?</p>\n</blockquote>\n<p>My interpretation of the discussion in this thread is that the consensus is that the convention used in <a href=\"https://github.com/leanprover-community/mathlib/issues/2655\">#2655</a> is better.</p>",
        "id": 197159590,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589209980
    },
    {
        "content": "<p>If you prefer <a href=\"https://github.com/leanprover-community/mathlib/issues/2652\">#2652</a>, vote with <span aria-label=\"point left\" class=\"emoji emoji-1f448\" role=\"img\" title=\"point left\">:point_left:</span><br>\nIf you prefer <a href=\"https://github.com/leanprover-community/mathlib/issues/2655\">#2655</a>, vote with <span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span><br>\nFeel free to vote 0, 1, or 2 times.</p>",
        "id": 197239032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589266512
    },
    {
        "content": "<p>For reference:<br>\n<span aria-label=\"point left\" class=\"emoji emoji-1f448\" role=\"img\" title=\"point left\">:point_left:</span> corresponds to <code>lemma sub_left_inj : a - b = a - c ↔ b = c</code><br>\n<span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span> corresponds to <code>lemma sub_right_inj : a - b = a - c ↔ b = c</code></p>",
        "id": 197239442,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589266993
    },
    {
        "content": "<p>In my mind, neither is correct (though I have very little familiarity with mathlib). The statement is rather \"can subtract from left of subtraction\", which I suppose in mathlibese would be something like <code>sub_left_of_sub_eq</code>.</p>",
        "id": 197240513,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589267991
    },
    {
        "content": "<p><code>sub_right_eq_iff</code>?</p>",
        "id": 197240623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589268069
    },
    {
        "content": "<p>But we often use <code>_inj</code> for iff statements like this</p>",
        "id": 197240640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589268084
    },
    {
        "content": "<p>The trouble is that the lemma is not actually the statement of a single injectivity. It's an injectivity followed by a negation. It's the composition of \"addition of a constant to the left is injective\" and \"negation is injective\".</p>",
        "id": 197240770,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589268218
    },
    {
        "content": "<p>It's injectivity of <code>λ x, a - x</code></p>",
        "id": 197240896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589268334
    },
    {
        "content": "<p>OK, I'll put that down to extreme sleep deprivation - but viewed as the above composition, there is no problem of symmetry-breaking, the heavy lifting is done by the word \"to\" in \"addition of a constant to the left\"</p>",
        "id": 197240985,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589268411
    },
    {
        "content": "<p>Yeah, <code>_inj</code> is code for the statement <code>f x = f y &lt;-&gt; x = y</code></p>",
        "id": 197243009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589270118
    },
    {
        "content": "<p>(by contrast to <code>_injective</code> which is code for <code>injective f</code>)</p>",
        "id": 197243032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589270140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/pow_(left.7Cright)_inj(ective)/near/197240985\">said</a>:</p>\n<blockquote>\n<p>OK, I'll put that down to extreme sleep deprivation - but viewed as the above composition, there is no problem of symmetry-breaking, the heavy lifting is done by the word \"to\" in \"addition of a constant to the left\"</p>\n</blockquote>\n<p>If it were a composition, the statement would have to be <code>a + -b = a + -c &lt;-&gt; b = c</code></p>",
        "id": 197243181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589270234
    },
    {
        "content": "<p>here it's just the second argument of the <code>sub</code> function</p>",
        "id": 197243242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589270266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> I've kicked it on the merge queue. The vote was pretty clear.</p>",
        "id": 197244539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589271048
    }
]