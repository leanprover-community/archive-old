[
    {
        "content": "<p>Making <code>polynomial.C</code> a bundled homomorphism had almost no side effects, thanks a lot <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> !</p>\n<p>The old code (or a substitution code I tried) failed in a few places:</p>\n<ul>\n<li>one can't write <code>C_neg [comm_ring α] (a : α) : C (-a) = -C a := C.map_neg a</code> because by the time Lean parses <code>C.map_neg</code> it doesn't know yet that the base type is a <code>ring</code>, not only a <code>semiring</code>. Both <code>(C : α →ₐ[α] _).map_neg a</code> and <code>alg_hom.map_neg _ a</code> work. Similarly for other dot notation.</li>\n<li><code>congr</code> failed to go from <code>C a = 1</code> to <code>a = 1</code>. I think that <code>convert C_1</code> better describes what we want Lean to do.</li>\n<li><code>C 1</code> is a <code>polynomial nat</code>, not <code>polynomial ?m_1</code>.</li>\n</ul>",
        "id": 200198726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591694052
    },
    {
        "content": "<p>This is nice.</p>",
        "id": 200199019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591694246
    },
    {
        "content": "<p>On the <code>witt-vectors2</code> branch, I also worked a lot with <code>C_hom</code>, <code>map_hom</code>, <code>rename_hom</code>, and <code>eval2_hom</code>, all for <code>mv_polynomial</code>. It seems to work really well.</p>",
        "id": 200199127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591694306
    },
    {
        "content": "<p>But I didn't yet integrate it into the library.</p>",
        "id": 200199148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591694319
    }
]