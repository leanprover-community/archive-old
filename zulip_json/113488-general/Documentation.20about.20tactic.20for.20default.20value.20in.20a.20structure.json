[
    {
        "content": "<p>Where can I read about the meaning of <code>. obviously</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My guess is that it means \"use the tactic <code>obviously</code> to construct a value if none given\". What I am looking for is a way to construct such simple graphs, but I want to provide my custom tactics for the fields <code>sym</code> and <code>loopless</code>. (Or even better, convince the type class mechanism to unfold <code>symmetric</code> and <code>irreflexive</code>, as that would allow me to provide proof terms directly.)</p>",
        "id": 260968094,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636538759
    },
    {
        "content": "<p>You can put any tactic you like after the <code>.</code>. It just has to have type <code>tactic unit</code>, so sometime you need to make an auxiliary definition to wrap a tactic with a more complicated type.</p>",
        "id": 260968220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538838
    },
    {
        "content": "<p>e.g. <code>meta def my_foo : tactic unit := `[foo]</code> usually suffices to wrap an interactive tactic as a <code>tactic unit</code>.</p>",
        "id": 260968269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538871
    },
    {
        "content": "<p>But I cannot change the definition of <code>simple_graph</code> in the standard library.</p>",
        "id": 260968270,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636538871
    },
    {
        "content": "<p>Ah!</p>",
        "id": 260968321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538883
    },
    {
        "content": "<p>Actually, <code>obviously</code> is an overridable tactic!</p>",
        "id": 260968354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538905
    },
    {
        "content": "<p>(Although we never really made use of this; it has constant meaning throughout mathlib.)</p>",
        "id": 260968368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538922
    },
    {
        "content": "<p>I have a proof term that would work, if only <code>symmetric</code> and <code>irreflexive</code> were <code>@[reducible]</code> (I think), which they are not.</p>",
        "id": 260968374,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636538931
    },
    {
        "content": "<p>It sounds like \"overriding tactics\" is the sort of thing that leads to a shotgun hole in the knee.</p>",
        "id": 260968428,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636538965
    },
    {
        "content": "<p>Yes. It was a bad idea, but it is still there to shoot yourself in the knee if you want to. :-)</p>",
        "id": 260968460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636538990
    },
    {
        "content": "<p>It seems you just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[obviously]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_obviously</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and from then on it has a new meaning.</p>",
        "id": 260968538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636539036
    },
    {
        "content": "<p>You can just write a wrapper that uses your alternative tactics, I guess.</p>",
        "id": 260968636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636539118
    },
    {
        "content": "<p>To explain what I am after, it's a convenient way to generate simple graphs like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_adj</span> <span class=\"o\">:=</span> <span class=\"bp\">....</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">my_adj</span><span class=\"o\">,</span>\n   <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">unfold</span> <span class=\"n\">symmetric</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cow</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n   <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">unfold</span> <span class=\"n\">irreflexive</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cow</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span>\n <span class=\"o\">}</span>\n</code></pre></div>\n<p>So I either have to get rid of the <code>unfold</code> and write just <code>cow rfl</code> for the proof terms, or write a little tactic-or-something that packages up the above snippet of code. What's the idiomatic way of doing this?</p>",
        "id": 260968794,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636539207
    },
    {
        "content": "<p>Yes, I suppose I am asking how to write such a wrapper. (Or where to read about it, so that I don't have to bother you.)</p>",
        "id": 260968843,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636539241
    },
    {
        "content": "<p>Oh my god, an interactive tactic can only have one argument. I so wish there were some documentation. Is there?</p>",
        "id": 260970110,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636540012
    },
    {
        "content": "<p>No, no, interactive tactics can have many arguments. Sorry, I'm about to head off for the night, but hopefully someone can step in.</p>",
        "id": 260970340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636540177
    },
    {
        "content": "<p>There are some excellent video tutorials on metaprogramming by Rob Lewis.</p>",
        "id": 260970362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636540190
    },
    {
        "content": "<p>There is a limited tutorial at <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 260970438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636540216
    },
    {
        "content": "<p>We came up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.foobar</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_strict</span>\n                  <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">simple_graph.mk</span>\n                      <span class=\"o\">(</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">adj</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"kd\">begin</span> <span class=\"n\">unfold</span> <span class=\"n\">symmetric</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cow</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"kd\">begin</span> <span class=\"n\">unfold</span> <span class=\"n\">irreflexive</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cow</span> <span class=\"n\">rfl</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">t</span>\n                  <span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Do we go to hell?</p>",
        "id": 260970456,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636540224
    },
    {
        "content": "<p>Here's how an interactive tactic is not happy with two arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.couple</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">couple</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 260970990,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636540557
    },
    {
        "content": "<p>Lean parses <code>5 6</code> as an application here (and so never gets to <code>b</code>).</p>",
        "id": 260971280,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636540694
    },
    {
        "content": "<p>Yes, I gather that much. How do I get around it?</p>",
        "id": 260971306,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1636540711
    },
    {
        "content": "<p>The easiest fix is to add a separator between the two arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.couple</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)),</span>\n       <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">couple</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 260971333,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636540724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20about.20tactic.20for.20default.20value.20in.20a.20structure/near/260968270\">said</a>:</p>\n<blockquote>\n<p>But I cannot change the definition of <code>simple_graph</code> in the standard library.</p>\n</blockquote>\n<p>One way around this is to define your own constructor, and you can replace the <code>obviously</code> with another tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">simple_graph'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviouslier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviouslier</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simple_graph.create</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph'</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">G.adj</span><span class=\"o\">,</span>\n  <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"n\">G.sym</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"n\">G.loopless</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- example</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_complete</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">simple_graph.create</span> <span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I would have expected the following to work too, but for some reason the tactics fail because their results have metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simple_graph.mk'</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">adj</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_complete</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">simple_graph.mk'</span> <span class=\"n\">ne</span>\n</code></pre></div>",
        "id": 261018652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636563243
    },
    {
        "content": "<p>Another way to make <code>by couple 5 6</code> work is to parse <code>5</code> and <code>6</code> at application precedence, using <code>pexpr 1025</code> instead of <code>texpr</code></p>",
        "id": 261019883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636563670
    }
]