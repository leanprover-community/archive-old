[
    {
        "content": "<p>Hello,<br>\nI have absolutly no idea on how i can prove this, can i have some help ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prop_on_inductive_set</span>\n<span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262999158,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638187569
    },
    {
        "content": "<p>Do you have a proof on paper already?</p>",
        "id": 262999414,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638187794
    },
    {
        "content": "<p>No, it was assumed in the lecture</p>",
        "id": 263000491,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638188489
    },
    {
        "content": "<p>Ah, I see. Because the hypotheses are probably not saying what you want to say: if <code>B = ∅</code> and <code>f = id</code> then the hypotheses hold for all <code>T</code>, <code>B</code>, <code>P</code>, <code>x</code>, in particular <code>P = λ x, false</code>.</p>",
        "id": 263000621,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638188568
    },
    {
        "content": "<p>In particular, <code>h₁</code> should be something like \"<code>X</code> contains the elements of <code>B</code> with <code>f</code> applied a <em>finite</em> number of times to them\". (And then you'd be able to apply induction to the number of times you apply <code>f</code>.)</p>",
        "id": 263000818,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638188670
    },
    {
        "content": "<p>The counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop_on_inductive_set</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"n\">ℕ</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊤</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">set.mem_univ</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263000908,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638188722
    },
    {
        "content": "<p>So this is probably what you want to prove instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop_on_inductive_set</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263001154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638188876
    },
    {
        "content": "<p>Oooh, yes , this is what i want to prove indeed, I wanted to prove the thing as it was write in our lecture, without thinking of the formal definition of the notation. Thank you.</p>",
        "id": 263001577,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638189125
    },
    {
        "content": "<p>Proof:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>lemma iter_succ {T : Type} {f : T → T} {x : T} {n : ℕ} :\n(f^[n]) (f x) = f ((f^[n]) x) := begin\n  induction n with n hn generalizing x,\n  { refl },\n  { unfold iterate, rw hn },\nend\n\ntheorem prop_on_inductive_set\n  (T : Type) (B X : set T) (f : T → T) (P : T → Prop)\n  (h₁ : ∀ x ∈ X, ∃ (b ∈ B) (n : ℕ), (f^[n]) b = x)\n  (h₂ : ∀x ∈ B, P x)\n  (h₃ : ∀x, P x → P (f x)) :\n  ∀x ∈ X, P x :=\nbegin\n  rintro x h₄,\n  obtain ⟨b, h₅, n, h₆⟩ := h₁ _ h₄,\n  clear h₄, subst h₆,\n  induction n with n h₆; unfold iterate,\n  { apply h₂ b h₅ },\n  { rw iter_succ, apply h₃ _ h₆ },\nend\n</code></pre></div>\n</div></div>",
        "id": 263009210,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638193171
    },
    {
        "content": "<p>Whoaa, this is way better than mine, thank you too.</p>",
        "id": 263012004,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1638194649
    },
    {
        "content": "<p><del>Isn't that <code>iter_succ</code> just the equation lemma for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a>?</del> nevermind</p>",
        "id": 263082192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638228463
    },
    {
        "content": "<p>It's actually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.commute.iterate_left\">docs#function.commute.iterate_left</a>, as <code>(function.commute.refl f).iterate_left n</code></p>",
        "id": 263082487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638228667
    }
]