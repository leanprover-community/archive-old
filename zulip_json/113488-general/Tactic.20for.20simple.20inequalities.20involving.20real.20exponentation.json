[
    {
        "content": "<p>(posted an issue at <a href=\"https://github.com/leanprover-community/mathlib/issues/11374\">https://github.com/leanprover-community/mathlib/issues/11374</a>, reposting here at Mario's suggestion)</p>\n<p>While norm_num can e.g. prove 1 &lt; 2^2 (all naturals) or (1:\\R) &lt; (2:\\R)^2, it fails with (1:\\R) &lt; (2:\\R)^(2:\\R).</p>\n<p>Similarly(?), neither norm_num nor linarith can prove (x:R), (x&gt;0) implies (2:R)^x &lt; (3:R)^x.</p>\n<p>It would be very convenient if norm_num (and/or linarith?) could work with simple inequalities involving real exponents like this.</p>\n<p>(To clarify, I know how to prove these facts using simple lemmas from mathlib, e.g. real.rpow_le_rpow for the second, but it'd be great if there was a tactic that could tackle such trivial numerical facts automatically.)</p>",
        "id": 267589859,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1641911870
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works as of #11382</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">real.rpow_lt_rpow</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 267597411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641914862
    },
    {
        "content": "<blockquote>\n<p>it'd be great if there was a tactic that could tackle such trivial numerical facts</p>\n</blockquote>\n<p>The problem is that the definition of \"trivial\" is extremely difficult to pin down. <code>norm_num</code> works when there are no variables; for monotonic functions <code>mono</code> sometimes works but <code>rpow_lt_rpow</code> has a side condition and I don't know how you expect to handle this</p>",
        "id": 267597781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641915015
    },
    {
        "content": "<p>Ah, fair enough, so perhaps the second is too much to hope for. </p>\n<p>Is the first feasible? You pointed out in the linked comment that one can recast the 2:\\R to a natural number 2 and then norm_num does work. Could that first step be incorporated into norm_num so that only one application is needed?</p>",
        "id": 267598204,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1641915177
    },
    {
        "content": "<p>Never mind, I see that you already addressed this in the first part of your comment! (Embarassing oversight, but apparently you can't delete your own replies on Zulip.)</p>",
        "id": 267598423,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1641915252
    },
    {
        "content": "<p>The first is done in <a href=\"https://github.com/leanprover-community/mathlib/pull/11382\">#11382</a></p>",
        "id": 267599041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641915494
    },
    {
        "content": "<p>Do we have a <code>has_pow rat int</code> instance somewhere? The <code>rpow</code> norm_num extension supports this grammar, but previously the only thing was <code>npow</code> which corresponds to <code>has_pow A nat</code>; <code>gpow</code> works on groups so it's not suitable for group-with-zero type structures</p>",
        "id": 267599419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641915639
    },
    {
        "content": "<p>No, we don't have <code>has_pow complex real</code> either, I don't think.</p>",
        "id": 267599625,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641915720
    },
    {
        "content": "<p>Apparently we do: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_inv_monoid.has_pow\">docs#div_inv_monoid.has_pow</a></p>",
        "id": 267599856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641915821
    }
]