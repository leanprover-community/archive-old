[
    {
        "content": "<p>I want to prove that the 44th Fibonacci number is divisible by 89.  I wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP_step</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FP_step</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">F</span> <span class=\"mi\">44</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>The <code>#eval</code> gives 0 with no visible delay.  If I try to prove <code>L</code> by <code>rfl</code> then I get a deterministic timeout, which I find surprising; I am only asking for 44 additions and 44 reductions mod 89 of numbers that are &lt; 2 * 89, which does not seem too bad even in Peano-world.  It also seems that <code>norm_num</code> is not useful here (unless there is some non-obvious way to invoke it).   Am I misunderstanding something about the count of operations?  Is there something different that I should be doing?</p>",
        "id": 161587248,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1553447037
    },
    {
        "content": "<p>This works. Takes a little while though.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">F</span> <span class=\"n\">FP</span> <span class=\"n\">FP_step</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 161587766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553447773
    },
    {
        "content": "<p>Thanks, that's much better.</p>",
        "id": 161588037,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1553448219
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/kbuzzard/lean-squares-in-fibonacci\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-squares-in-fibonacci\">https://github.com/kbuzzard/lean-squares-in-fibonacci</a></p>",
        "id": 161589681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553450581
    },
    {
        "content": "<p>Unfinished proof that the largest square in the Fibonacci sequence is 144.</p>",
        "id": 161589693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553450597
    },
    {
        "content": "<blockquote>\n<p>The <code>#eval</code> gives 0 with no visible delay.</p>\n</blockquote>\n<p>Of course it's <code>#reduce</code> that is the problem...</p>",
        "id": 161589913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553450901
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP_step</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FP_step</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F</span> <span class=\"n\">FP</span> <span class=\"n\">FP_step</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- worth putting your cursor here and inspecting the goal</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 161589993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553451035
    },
    {
        "content": "<p>How do you switch those <code>...</code>'s off again?</p>",
        "id": 161589999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553451062
    },
    {
        "content": "<p>I think it's a <code>set_option</code></p>",
        "id": 161590008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553451077
    },
    {
        "content": "<p>Still some left:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP_step</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FP</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FP_step</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FP</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">max_depth</span> <span class=\"mi\">10000</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">max_steps</span> <span class=\"mi\">10000</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">indent</span> <span class=\"mi\">0</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F</span> <span class=\"n\">FP</span> <span class=\"n\">FP_step</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- worth putting your cursor here and inspecting the goal</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 161590227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553451445
    },
    {
        "content": "<p>That looks to me like a few more than 44 additions...</p>",
        "id": 161590300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553451581
    },
    {
        "content": "<p>I guess it's not evaluating it in a sensible order. After unfolding, you probably end up with <code>F 10</code> a lot of times.</p>",
        "id": 161590504,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553451895
    },
    {
        "content": "<p>I wonder what the fastest proof is, or how to solve this with bigger numbers.</p>",
        "id": 161590610,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553452078
    },
    {
        "content": "<p>You can solve it in linear time if you craft appropriate lemmas</p>",
        "id": 161591364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553453223
    },
    {
        "content": "<p>that's how <code>norm_num</code> itself works, of course</p>",
        "id": 161591379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553453281
    },
    {
        "content": "<p>The fastest proof is to do it by pure thought ;-)</p>",
        "id": 161591576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553453535
    },
    {
        "content": "<p>But if you want a computational proof, just work out F n mod 89 for the first 45 naturals</p>",
        "id": 161591581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553453564
    },
    {
        "content": "<p>isn't that what he's doing?</p>",
        "id": 161591670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553453711
    },
    {
        "content": "<p>It didn't look like it from the prettyprinter output.</p>",
        "id": 161591743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553453834
    },
    {
        "content": "<p><code>F 44 = F 42 + (F 42 + F 41)</code>, so you end up computing <code>F 42 </code>twice, and it get worse the smaller you get.</p>",
        "id": 161591749,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553453864
    },
    {
        "content": "<p>^^^</p>",
        "id": 161591750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553453874
    },
    {
        "content": "<p>but that's not how it was defined... I don't think this has exponential blowup</p>",
        "id": 161591810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553453944
    },
    {
        "content": "<p>My 16 year old son says that he once saw some way of defining Fibonacci numbers in a functional language which didn't suffer from this blow-up.</p>",
        "id": 161591941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454124
    },
    {
        "content": "<p>You're right though, this isn't like what Chris says, this looks like a more sensible implementation.</p>",
        "id": 161591963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454180
    },
    {
        "content": "<p>The point somehow seems to be that each time you iterate, the term gets about 1.5 times as complicated</p>",
        "id": 161592036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454247
    },
    {
        "content": "<p>and Lean never simplifies anything until the end</p>",
        "id": 161592038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454257
    },
    {
        "content": "<p>I have a solution but I'm waiting on lean to compile to test it -_-</p>",
        "id": 161592049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553454301
    },
    {
        "content": "<p><code>F 8</code> looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ (((((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89 +\n   ((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89) %\n  89 +\n  (((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89 +\n   (((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89 +\n    ((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89) %\n   89) %\n  89) %\n89,\n((((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89 +\n   (((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89 +\n    ((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89) %\n   89) %\n  89 +\n  ((((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89 +\n    ((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89) %\n   89 +\n   (((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89 +\n    (((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89 +\n     ((1 + (0 + 1) % 89) % 89 + ((0 + 1) % 89 + (1 + (0 + 1) % 89) % 89) % 89) % 89) %\n    89) %\n   89) %\n  89) %\n89).fst\n</pre></div>",
        "id": 161592064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454328
    },
    {
        "content": "<p><code>FP 8</code> looks like a mess because <code>FP 7</code> is a mess and Lean doesn't tidy it up before making <code>FP 8</code></p>",
        "id": 161592117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454369
    },
    {
        "content": "<p>So it is only ever adding <code>0 and 1</code>. 1.5 times bigger each time is about right for the really bad implementation given that the golden ratio is ~1.6.</p>",
        "id": 161592138,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553454437
    },
    {
        "content": "<p>Right, each term is about 1.6 times bigger than the one before in terms of e.g. number of additions mentioned in the term.</p>",
        "id": 161592148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454472
    },
    {
        "content": "<p>Similarly for the number of <code>% 89</code>'s. If a mentions X of them and b mentions Y, then (a+b)%89 mentions X+Y+1, and this is growing like Fibonacci</p>",
        "id": 161592226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553454545
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">FP_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FP</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FP</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">FP</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">FP</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">44</span> <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"n\">FP_succ</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 161592306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553454616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">iterate</span> <span class=\"mi\">44</span> <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"n\">FP_succ</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"c1\">-- put your cursor here for some goal fun</span>\n</pre></div>",
        "id": 161592760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553455318
    },
    {
        "content": "<p>it's possible to reduce the succ's but it's going to generate 44 add-one's anyway so I didn't bother</p>",
        "id": 161592814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553455374
    },
    {
        "content": "<p>Thanks, that's interesting.  I see roughly how it works but will need to digest a bit further.</p>",
        "id": 161594525,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1553458033
    },
    {
        "content": "<p>I guess <code>replace := ...</code> is shorthand for <code>replace this := ...</code>which means \"replace the hypothesis <code>this</code> with a new hypothesis also called <code>this</code>.</p>",
        "id": 161594767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553458383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">FP</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">5</span> <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">FP_succ</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- this : FP (nat.succ (nat.succ (nat.succ (nat.succ 1)))) = (5, 8)</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 161594829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553458450
    },
    {
        "content": "<p>A hypothesis without a name defaults to <code>this</code> and Mario is abusing this a bit :-)</p>",
        "id": 161594837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553458484
    },
    {
        "content": "<p>But <code>replace</code> is essential to the method because we don't have the machinery to make 44 names without going into meta land (as far as I know)</p>",
        "id": 161594859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553458524
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">FP</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">44</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">FP_succ</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but you end up with 44 hypotheses all called <code>H</code>. The reason it works is that Lean uses the most recently generated one at each stage.</p>",
        "id": 161594936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553458625
    },
    {
        "content": "<p>I feel compulsory to note that although this modified algorithm is O(n), which is better than the naive algorithm of O(2^n), there is an algorithm of O(log n)</p>",
        "id": 161598698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553464570
    },
    {
        "content": "<p>reduce mod 44?</p>",
        "id": 161600840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553467535
    },
    {
        "content": "<p>no, Fibonacci</p>",
        "id": 161601341,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553468214
    },
    {
        "content": "<p>it only dawned on me that F 11 = 89 which would imply that F 44 is divisible by 89</p>",
        "id": 161602213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553469602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_0</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_1</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_2</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_succ_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_bit0</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">+</span> <span class=\"mi\">89</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">F_bit1</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F_bit0&#39;</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">+</span> <span class=\"mi\">89</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">F_bit0</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F_bit1&#39;</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">F_bit1</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F_succ_succ&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">89</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"bp\">▸</span> <span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">F_succ_succ</span>\n\n<span class=\"c1\">-- (44, 45) -&gt; (22, 23) -&gt; (10, 11) -&gt; (4, 5) -&gt; (2, 3) -&gt; (0, 1)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F0</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">F_0</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F1</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">F_1</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F2</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">F_2</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F3</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit1&#39;</span> <span class=\"mi\">2</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F1</span><span class=\"o\">,</span> <span class=\"n\">F2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F4</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit0&#39;</span> <span class=\"mi\">3</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F2</span><span class=\"o\">,</span> <span class=\"n\">F3</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F5</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit1&#39;</span> <span class=\"mi\">3</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F2</span><span class=\"o\">,</span> <span class=\"n\">F3</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_succ_succ&#39;</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F4</span><span class=\"o\">,</span> <span class=\"n\">F5</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F10</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit0&#39;</span> <span class=\"mi\">6</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F5</span><span class=\"o\">,</span> <span class=\"n\">F6</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F11</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit1&#39;</span> <span class=\"mi\">6</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F5</span><span class=\"o\">,</span> <span class=\"n\">F6</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F12</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_succ_succ&#39;</span> <span class=\"mi\">10</span> <span class=\"mi\">11</span> <span class=\"mi\">12</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F10</span><span class=\"o\">,</span> <span class=\"n\">F11</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F22</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">22</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit0&#39;</span> <span class=\"mi\">12</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F11</span><span class=\"o\">,</span> <span class=\"n\">F12</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F23</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">23</span> <span class=\"bp\">=</span> <span class=\"mi\">88</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit1&#39;</span> <span class=\"mi\">12</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F11</span><span class=\"o\">,</span> <span class=\"n\">F12</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F44</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">44</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit0&#39;</span> <span class=\"mi\">23</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F22</span><span class=\"o\">,</span> <span class=\"n\">F23</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">F45</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">45</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F_bit1&#39;</span> <span class=\"mi\">23</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">F22</span><span class=\"o\">,</span> <span class=\"n\">F23</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 161602374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553469884
    },
    {
        "content": "<p>O(log 2) algorithm ^</p>",
        "id": 161602376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553469894
    },
    {
        "content": "<blockquote>\n<p>The fastest proof is to do it by pure thought ;-)</p>\n</blockquote>\n<p>Periods of Fibonacci numbers modulo primes are well understood.</p>",
        "id": 161604801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553473987
    },
    {
        "content": "<p>is it?</p>",
        "id": 161604926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553474200
    },
    {
        "content": "<p>A slight shortcut in what you did Kenny -- you can show that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{2n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathit mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is a multiple of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> saving you from having to work out <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mrow><mn>1</mn><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{12}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mrow><mn>2</mn><mn>3</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{23}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span></p>",
        "id": 161604930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474220
    },
    {
        "content": "<p>It's just about the order of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mo>+</mo><msup><mn>5</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1+5^{1/2}}{2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.0707em;\"></span><span class=\"strut bottom\" style=\"height:1.4157em;vertical-align:-0.345em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0707em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9667142857142857em;\"><span style=\"top:-2.966714285714285em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5357142857142856em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> modulo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> right?</p>",
        "id": 161604940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474242
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>+</mo><msup><mn>5</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><msup><mo>)</mo><mrow><mn>1</mn><mn>1</mn></mrow></msup><mo>=</mo><mo>(</mo><mn>1</mn><mo>−</mo><msup><mn>5</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><msup><mo>)</mo><mrow><mn>1</mn><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(1+5^{1/2})^{11}=(1-5^{1/2})^{11}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathrm\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> and we're done, right?</p>",
        "id": 161604990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474288
    },
    {
        "content": "<p>The pure thought proof says that the order divides <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span> (note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">5</span></span></span></span> is a square mod <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>8</mn><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">89</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">8</span><span class=\"mord mathrm\">9</span></span></span></span>) so <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{p-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> is automatically 0 mod <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mrow><mo>(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{(p-1)/2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:1.03853em;vertical-align:-0.3551999999999999em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathit mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"></span></span></span></span></span></span></span></span> will be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span></span></span></span> mod <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>+</mo><msup><mn>5</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">(1+5^{1/2})/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathrm\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span> is a quadratic residue mod <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>, which it is when <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>=</mo><mn>8</mn><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">p=89</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">8</span><span class=\"mord mathrm\">9</span></span></span></span>.</p>",
        "id": 161605103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474498
    },
    {
        "content": "<p>I'm also using that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span> mod 4 here, because then it follows that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>−</mo><msup><mn>5</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">(1-5^{1/2})/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathrm\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span></span></span></span> is also a QR</p>",
        "id": 161605173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474584
    },
    {
        "content": "<p>so their 44th powers are both 1.</p>",
        "id": 161605184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553474613
    },
    {
        "content": "<p>well I want F45 also to show that the period is 44</p>",
        "id": 161607375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553478001
    },
    {
        "content": "<p>but interesting observation</p>",
        "id": 161607427,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553478015
    }
]