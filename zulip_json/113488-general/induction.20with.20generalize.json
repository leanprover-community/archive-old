[
    {
        "content": "<p>Hi, I want to do induction over the following predicate <code>types</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The predicate expresses <code>Γ  ⊢ x : A</code>, where the typing context <code>Γ</code> is a function <code>(fin m→ type) </code>, and expression <code>x</code> has type <code>tm m</code> (but I think the details are not important). My induction is over the empty context:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">empty_ctx</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here's the lemma: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">preservation</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n      <span class=\"k\">forall</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">e₁</span> <span class=\"err\">›</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">H₁</span> <span class=\"n\">e</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H₁</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This gives the following error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"kn\">check</span><span class=\"o\">]</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span>\n  <span class=\"n\">types</span> <span class=\"err\">∅</span>\n<span class=\"n\">argument</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"n\">expected</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">type</span><span class=\"bp\">`</span><span class=\"n\">induction</span> <span class=\"k\">with</span> <span class=\"n\">generalize</span>\n</pre></div>\n\n\n<p>In Coq, the induction works. I assume Lean is more strict about generalizing numbers before doing an induction?  I'm not sure about how to generalize in this case, as 0 appears in the type of the empty context. So the standard way of adding an assumption <code>h : X = empty_ctx</code> and substituting X doesn't work because X again has type <code>fin 0 → type</code>. Could you give me some details or tell me if I'm on the wrong track?</p>",
        "id": 147851332,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1542408026
    },
    {
        "content": "<p>what is <code>Fin</code>?</p>",
        "id": 147851364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542408074
    },
    {
        "content": "<p>could you provide an MWE?</p>",
        "id": 147851438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542408137
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Fin</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tm</span>  <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var_tm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ntm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">Fin</span> <span class=\"n\">ntm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">ntm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ntm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">tm</span> <span class=\"n\">ntm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">ntm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">ntm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ntm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">ntm</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"n\">ntm</span>\n<span class=\"kn\">open</span> <span class=\"n\">tm</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">tint</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">tarrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tvar</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">var_tm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tapp</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">tarrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">B</span>\n<span class=\"c1\">--| tlam {m} Γ (e : tm (nat.succ m)) (A B) : types (@scons _ m  A Γ) e B → types Γ (lam e) (tarrow A B) requires some more definitions</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">empty_ctx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"bp\">.</span> <span class=\"c1\">--(..)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">preservation</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n      <span class=\"k\">forall</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span>  <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">H₁</span> <span class=\"n\">e</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H₁</span>\n</pre></div>",
        "id": 147851814,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1542408564
    },
    {
        "content": "<p>I'm not sure how to do it with induction, but I would probably try using the equation compiler</p>",
        "id": 147852574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542409412
    },
    {
        "content": "<p>Changing the definition of <code>types</code> to this works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">types</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">tvar</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">var_tm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tapp</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⤏</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">B</span>\n</pre></div>",
        "id": 147852628,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542409452
    },
    {
        "content": "<p>but that won't work for <code>tlam</code>, which increases the size of the context</p>",
        "id": 147852765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542409643
    },
    {
        "content": "<p>I see.</p>",
        "id": 147852773,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542409665
    },
    {
        "content": "<p><code>destruct H\\1</code> also works.</p>",
        "id": 147853368,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542410436
    },
    {
        "content": "<p>Although I don't think that gives the goal you want. It didn't choose a very good motive.</p>",
        "id": 147853439,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542410538
    },
    {
        "content": "<p>This is a nasty method that hopefully does get the right goal at least</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">preservation</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span>\n      <span class=\"k\">forall</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ctx</span> <span class=\"bp\">==</span> <span class=\"n\">empty_ctx</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"n\">H₁</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"err\">Γ</span> <span class=\"bp\">_</span> <span class=\"n\">hm</span> <span class=\"n\">h</span><span class=\"err\">Γ</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_heq</span> <span class=\"n\">h</span><span class=\"err\">Γ</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n    <span class=\"kn\">end</span> <span class=\"n\">sorry</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 147853454,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542410587
    },
    {
        "content": "<p>here are a few more options:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">preservation</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">empty_ctx</span> <span class=\"bp\">=</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">H₁_x</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">preservation&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">empty_ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">types</span> <span class=\"n\">ctx</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"n\">ctx</span> <span class=\"n\">e₂</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">h</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">H₁_x</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147860085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542421832
    },
    {
        "content": "<p>in this case it doesn't matter that you have <code>empty_ctx</code> since it's unique anyway</p>",
        "id": 147860093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542421874
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 147868864,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1542441554
    }
]