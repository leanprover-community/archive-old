[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  <br>\nHi in the paper counting immutable beans you mention that lean and lambdapure do not allow for cyclic data structures. Does this follow from the type system used in Lean? Also how much does this limit the semantics of lean, like representing cyclic graphs?</p>",
        "id": 217765757,
        "sender_full_name": "Matthew Weingarten",
        "timestamp": 1606230429
    },
    {
        "content": "<p>I think Leo is quite busy now with Lean 4 and prefers not to be bothered, but you might be lucky with Sebastian :-)</p>",
        "id": 217765990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606230540
    },
    {
        "content": "<p>Inhabitants of the inductive data types of Lean (and similar systems) are trees of finite height, so they are acyclic. This is probably what the statement refers to. You can still represent cyclic data structures, e.g. by giving a tree and a list of 'back edges' or an adjacency matrix; the representation is just not very direct.</p>",
        "id": 217767367,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1606231119
    },
    {
        "content": "<p>Isn't it also possible to represent cyclic data structures as quotients of inductive types?</p>",
        "id": 217768142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606231474
    },
    {
        "content": "<p>E.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">glue</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"n\">root</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"n\">root</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cyclic_thing</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"n\">rel</span>\n</code></pre></div>",
        "id": 217768478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606231621
    },
    {
        "content": "<p>Regarding the dynamic semantics, cycles are also ruled out by the combination of strictness and immutability. At least as long you don't add a specific special case like OCaml(?) does.</p>",
        "id": 217776800,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606234831
    },
    {
        "content": "<p>how's that memoization work coming? :)</p>",
        "id": 217776944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606234895
    },
    {
        "content": "<p>I see many works but none of them start with memoization</p>",
        "id": 217777234,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606235011
    },
    {
        "content": "<p>I spoke with simon a couple months ago about support for internal mutability, what I called <code>cached</code> in my original proposal</p>",
        "id": 217777423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235084
    },
    {
        "content": "<p>parts of that made it into the paper about pointer based optimization but I think proper internal mutability is still in the air</p>",
        "id": 217777528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235139
    },
    {
        "content": "<p>and I have a stack of FP algorithms that need it for efficiency</p>",
        "id": 217777571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235156
    },
    {
        "content": "<p>I like the approach, it's just not something we currently need for implementing Lean itself</p>",
        "id": 217777653,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606235175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271913\">Matthew Weingarten</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/217765757\">said</a>:</p>\n<blockquote>\n<p>Also how much does this limit the semantics of lean, like representing cyclic graphs?</p>\n</blockquote>\n<p>How useful is a cyclic graph anyway if it is completely immutable? Yes, there are a few instances of \"tying the knot\" in GHC, but it's still a pretty obscure technique I'd say.</p>",
        "id": 217777757,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606235230
    },
    {
        "content": "<p>cyclic data structures in haskell are actually not good for representing explicit sharing, because the representation is not observable</p>",
        "id": 217777925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235296
    },
    {
        "content": "<p>that's part of what the pointer based optimization paper is about</p>",
        "id": 217777973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235319
    },
    {
        "content": "<p>I did something like that in the haskell version of MM0 and regretted it, because you have to resort to some unsafe hackery to get at the pointers if you want to reify a cyclic (or acyclic but highly shared) data structure as an actual graph with nodes</p>",
        "id": 217778191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606235404
    },
    {
        "content": "<p>Btw, is there any way to do memoization in lean 3? I guess there could be a <code>memoize</code> monad? afaik there is nothing atm, right?</p>",
        "id": 217804273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606247095
    },
    {
        "content": "<p>You can use <code>ref</code> in the tactic monad but that's it</p>",
        "id": 217808472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606249256
    },
    {
        "content": "<p>the best alternative is to throw everything in a hashtable or rbmap</p>",
        "id": 217808509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606249281
    },
    {
        "content": "<p>And then explicitly pass that rbmap around?</p>",
        "id": 217809280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606249750
    },
    {
        "content": "<p>Yeah</p>",
        "id": 217813341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606251905
    },
    {
        "content": "<p>Thanks guys for the responses!</p>",
        "id": 218565496,
        "sender_full_name": "Matthew Weingarten",
        "timestamp": 1606920268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/217804273\">said</a>:</p>\n<blockquote>\n<p>Btw, is there any way to do memoization in lean 3? I guess there could be a <code>memoize</code> monad? afaik there is nothing atm, right?</p>\n</blockquote>\n<p>In some sense the State monad is a <code>memoize</code> monad if you use a <code>rb_map</code> or structure containing an <code>rb_map</code> as the state.  The cache is invalidated after you leave the monad, but that is sufficient for dynamic programming application which is where I often see memoized functions.  I coded up a <a href=\"https://gist.github.com/jasonrute/dfc817b1a3e175bd51b3acaaf7cf9613\">Fibonacci example in Lean 4</a> just because I was having fun trying out Lean 4, but the same idea should work in Lean 3.</p>",
        "id": 219475913,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607609381
    },
    {
        "content": "<p>fun fact, you can't prove that this computes the naive fib function</p>",
        "id": 219476373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607609573
    },
    {
        "content": "<p>Yeah, I assume the need for memoization is mostly on the meta-programming side, but maybe I'm mistaken on that.</p>",
        "id": 219476940,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607609783
    },
    {
        "content": "<p>I guess for more global versions where the cache persists after leaving the monad, you would quickly start using databases, right?</p>",
        "id": 219481477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607611647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219476373\">said</a>:</p>\n<blockquote>\n<p>fun fact, you can't prove that this computes the naive fib function</p>\n</blockquote>\n<p>This is a bummer. Because it limits to what extent we can use <code>lean</code> as a CAS in some nice future.</p>",
        "id": 219481610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607611701
    },
    {
        "content": "<p>I maintain that the <code>partial</code> keyword was a mistake</p>",
        "id": 219481733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607611759
    },
    {
        "content": "<p>As in, you can still write these functions, but you can't tie them back to the proven correct things. So we would have <code>def elliptic_curve</code> and <code>meta def fast_elliptic_curve</code> and we can compute with the latter, but can't show that it has any relation to the <code>elliptic_curve</code> that you prove things about.</p>",
        "id": 219481773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607611777
    },
    {
        "content": "<p>well, lean 4 does have <code>implementedBy</code> or whatever it's called, so you can do this if you want to, by cheating</p>",
        "id": 219481948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607611854
    },
    {
        "content": "<p>What's making it impossible to prove? (If it wouldn't take too long to explain)</p>",
        "id": 219482139,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1607611946
    },
    {
        "content": "<p>it makes use of a <code>constant fuel : nat := 0</code></p>",
        "id": 219482258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607612011
    },
    {
        "content": "<p>this constant is effectively infinity in the VM, meaning that we have an omega-inconsistent model</p>",
        "id": 219482446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607612082
    },
    {
        "content": "<p>but in pure code you can't prove that it is any particular value, so it is consistent that every <code>partial</code> function fails to compute what it was supposed to</p>",
        "id": 219482739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607612211
    },
    {
        "content": "<p>You shouldn't need <code>partial</code> here</p>",
        "id": 219484573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1607612991
    },
    {
        "content": "<p>I only added it because I got some message about the equation compiler and didn't want to deal with it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 219485047,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607613159
    },
    {
        "content": "<p>Another fun fact: absent sufficient inlining (which in this particular example should not be an issue), you might be copying the whole HashMap array on each mutation, because you're not using it linearly (<code>get</code> isn't linear).</p>",
        "id": 219485474,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1607613340
    },
    {
        "content": "<p>Fixed.  No more partial or <code>get...set</code>.</p>",
        "id": 219489478,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607614850
    },
    {
        "content": "<p>So without partial one can prove that this computes the usual fib right? (just checking I'm understanding everyones comments)</p>",
        "id": 219489559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607614887
    },
    {
        "content": "<p>For official information about how <code>partial</code> works, see <br>\n<a href=\"http://leanprover.github.io/talks/LeanPLDI.pdf\">http://leanprover.github.io/talks/LeanPLDI.pdf</a> (slide 15) and<br>\n<a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a> (<code>the meta keyword</code> section).</p>",
        "id": 219490758,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607615394
    },
    {
        "content": "<p>Does lean 4 let us track and maybe ban uses of the <code>fuel</code> constant? In lean 3 <code>meta</code> was viral but it seems that <code>partial</code> isn't, so it's not clear how to make sure it's not getting used</p>",
        "id": 219492428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607616058
    },
    {
        "content": "<p>See links above. There is no <code>fuel</code>.</p>",
        "id": 219493771,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607616580
    },
    {
        "content": "<p>in lean 4 will there be / is there a way to enforce that an object is never copied? like the ref count should always only be 1,  a buffer where you only want to mutate it efficiently</p>",
        "id": 219503747,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607620437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I thought that <code>fuel</code> appeared in the compilation for <code>partial</code> definitions? What happens if I <code>#print foo</code> where <code>foo</code> is a <code>partial def</code>? Can I even still do that like in lean 3 to inspect the result of the equation compiler? The provided links mention that the compilation uses unsafe + implementedBy but don't say what the pure version (the \"reference model\") is. Is the entire function just a constant with trivial witness?</p>",
        "id": 219504884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607620960
    },
    {
        "content": "<blockquote>\n<p>When the partial keyword is used, Lean generates an auxiliary unsafe definition that uses general recursion, and then defines an opaque constant that is implemented by this auxiliary definition. This is very simple, efficient, and is sufficient for users that want to use Lean as a regular programming language. A partial definition cannot use unsafe features such as unsafeCast and ptrAddrUnsafe, and it can only be used to implement types we already known to be inhabited. Finally, since we \"seal\" the auxiliary definition using an opaque constant, we cannot reason about partial definitions.</p>\n</blockquote>",
        "id": 219505214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607621113
    },
    {
        "content": "<p>So this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>is compiled to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">foo.impl</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo.impl</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[implementedBy \"foo.impl\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 219505459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607621222
    },
    {
        "content": "<p>So I guess my earlier question about tracking uses of the <code>fuel</code> constant should be extended to tracking all <code>partial</code> constants</p>",
        "id": 219505788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607621358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219503747\">said</a>:</p>\n<blockquote>\n<p>in lean 4 will there be / is there a way to enforce that an object is never copied? like the ref count should always only be 1,  a buffer where you only want to mutate it efficiently</p>\n</blockquote>\n<p>I don't think this can be done without an actual linear type system</p>",
        "id": 219506008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607621439
    },
    {
        "content": "<p>I mean you could maybe set the runtime to crash if the refcount goes above 1, but to check at compile time? You would need to be rust</p>",
        "id": 219506116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607621490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219505788\">said</a>:</p>\n<blockquote>\n<p>So I guess my earlier question about tracking uses of the <code>fuel</code> constant should be extended to tracking all <code>partial</code> constants</p>\n</blockquote>\n<p>Users can track whatever they want.  They can <code>import Lean</code>, and access everything, write their own commands, and traverse all internal datastructures.</p>",
        "id": 219506576,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607621664
    },
    {
        "content": "<p>What's the point of such a tracking? The kernel won't accept proofs based on unsafe stuff, right?</p>",
        "id": 219506952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607621817
    },
    {
        "content": "<p>This stuff isn't unsafe</p>",
        "id": 219508492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607622542
    },
    {
        "content": "<p>that's the problem</p>",
        "id": 219508505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607622546
    },
    {
        "content": "<p>but you also can't prove anything about it</p>",
        "id": 219508580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607622581
    },
    {
        "content": "<p>that's not entirely true, you can prove it's a function for example</p>",
        "id": 219508661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607622610
    },
    {
        "content": "<p>(which, obvious as it may sound, need not be true for unsafe things)</p>",
        "id": 219508713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607622638
    },
    {
        "content": "<p>I don't understand what the problem is though</p>",
        "id": 219508716,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607622640
    },
    {
        "content": "<p>I'm not worried at all.</p>",
        "id": 219508730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607622648
    },
    {
        "content": "<p>it doesn't compromise the logical integrity of the system, but it does compromise the relationship between the logical representation and the compiler</p>",
        "id": 219508805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607622684
    },
    {
        "content": "<p>Then I think your issue is more with implementedby, than unsafe, no?</p>",
        "id": 219509448,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607622961
    },
    {
        "content": "<p>I do think it would be weird to the point of rejection in code review if any <code>partial</code> def was involved in (the transitive closure of) the definition of some pure mathlib concept like <code>list.sort</code> or <code>comm_ring</code></p>",
        "id": 219509571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623000
    },
    {
        "content": "<p>yes, this is about <code>implementedBy</code></p>",
        "id": 219509690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623057
    },
    {
        "content": "<p>I am okay with adding <code>implementedBy</code> annotations when we can prove at the meta level that the definition is faithfully represented in the executable version</p>",
        "id": 219509838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623110
    },
    {
        "content": "<p>but to maintain this property we have to carefully consider each <code>implementedBy</code> location. It's basically like <code>unsafe</code> blocks in rust</p>",
        "id": 219509959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623155
    },
    {
        "content": "<p><code>unsafe</code> code itself is fine, it makes no claims about anything</p>",
        "id": 219509993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623178
    },
    {
        "content": "<p>I don't see any reason to use <code>partial</code> over <code>unsafe</code></p>",
        "id": 219510016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607623190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Error `foo1` uses unsafe declaration `unsafeCast`</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeCast</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- Ok</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeCast</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 219511531,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607623866
    },
    {
        "content": "<p>So the main function is to catch you from doing bad things? I get that, that's useful. But <code>unsafe</code> is already in the name of that function, and <code>meta</code> has been like this in lean 3 and it hasn't ever really been an issue</p>",
        "id": 219511933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624063
    },
    {
        "content": "<p>that is, if 90% of the elaborator was written as <code>unsafe</code> instead of <code>partial</code>, would it have caused significant maintenance problems?</p>",
        "id": 219512007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624106
    },
    {
        "content": "<p>Presumably it would be more like 90% was <code>unsafe</code> versus 20% was <code>partial</code></p>",
        "id": 219512159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607624185
    },
    {
        "content": "<p>That's only because <code>partial</code> is not viral even though it should be</p>",
        "id": 219512225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624220
    },
    {
        "content": "<p>if <code>partial</code> is meant in the sense \"not total\", then it should absolutely be viral</p>",
        "id": 219512261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624241
    },
    {
        "content": "<p>I have no idea what you're arguing really</p>",
        "id": 219512350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607624281
    },
    {
        "content": "<p>but for a programming language it's not a great look if you have to write <code>partial def</code> or <code>unsafe def</code> to define basically every function</p>",
        "id": 219512458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607624327
    },
    {
        "content": "<p>and for mathlib it doesn't seem to matter anyways</p>",
        "id": 219512465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607624332
    },
    {
        "content": "<p>I think this is just a clash of traditions regarding what safety means in regular programming languages vs formal logics</p>",
        "id": 219512634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624406
    },
    {
        "content": "<p>no it's not a good look to be saying that literally everything is unsafe, but it's kind of the truth</p>",
        "id": 219512697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624442
    },
    {
        "content": "<p>it's just that most programming languages don't make a big fuss about it</p>",
        "id": 219512773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624474
    },
    {
        "content": "<p>and maybe lean 4 shouldn't either, after all it's more like haskell now than lean 3</p>",
        "id": 219512849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219512458\">said</a>:</p>\n<blockquote>\n<p>but for a programming language it's not a great look if you have to write <code>partial def</code> or <code>unsafe def</code> to define basically every function</p>\n</blockquote>\n<p>If that's just because it costs you 7 or 8 extra chars before the <code>def</code>, then I could imagine having <code>pdef</code> and <code>udef</code>.</p>",
        "id": 219513383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607624745
    },
    {
        "content": "<p>I'm pretty sure that the reason Reid says that is that for most programmers, <code>unsafe</code> is supposed to sound the warning klaxons, and it loses its strength if it is used constantly</p>",
        "id": 219513526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607624809
    },
    {
        "content": "<p>In lean 3, this signal was dampened by using a more neutral word <code>meta</code>, even though it's just as dangerous as lean 4's <code>unsafe</code>. I think that having all this <code>unsafe</code>/<code>meta</code>/ whatever sounding the alarm bells isn't necessarily a bad thing since it motivates people to chip away at it, making more interfaces safe/provable. Lean 4 solves the problem by using the non-viral <code>partial</code>, which silences the klaxons without improving the situation</p>",
        "id": 219514090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607625034
    },
    {
        "content": "<p>Some clarifications:</p>\n<ul>\n<li>Logical integrity is preserved. You will not be able to prove <code>theorem unsound : False</code> because of <code>partial</code> or <code>unsafe</code>. </li>\n<li>You can only use <code>partial</code> if the type is inhabited.</li>\n<li>We type check <code>partial</code> functions, and they cannot use <code>unsafe</code> functions that may crash your program (e.g., <code>unsafeCast</code>), use unsafe inductive types, etc. So, you only gain the ability to perform \"general recursion\".</li>\n<li>You can write a non-partial function <code>f</code> that uses a <code>partial</code> function <code>p</code> and still prove many things about it <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> . <code>f</code> will not be opaque. Of course, you will not be able to rely on the actual implementation of <code>p</code>.</li>\n<li>Similarly, you can prove things about a function <code>f</code> that uses an opaque constant <code>g</code> tagged with <code>[extern]</code> (i.e., a foreign function).</li>\n</ul>",
        "id": 219514223,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607625103
    },
    {
        "content": "<ul>\n<li><code>unsafe</code> can be used even when the type is not inhabited. <code>partial</code> cannot.</li>\n</ul>",
        "id": 219514535,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607625224
    },
    {
        "content": "<p>Also to clarify: I'm not arguing for any change on the part of the lean team, but when it eventually comes out one of the things I will be looking into is an improvement to the equation compiler to compile <code>partial def</code> into a representation that you can prove things about</p>",
        "id": 219514641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607625261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219514223\">said</a>:</p>\n<blockquote>\n<ul>\n<li>You can write a non-partial function <code>f</code> that uses a <code>partial</code> function <code>p</code> and still prove many things about it <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> . <code>f</code> will not be opaque. Of course, you will not be able to rely on the actual implementation of <code>p</code>.</li>\n</ul>\n</blockquote>\n<p>Cool! Thanks for the clarification!</p>",
        "id": 219514917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607625378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/acyclic.20datastrucure/near/219514641\">said</a>:</p>\n<blockquote>\n<p>Also to clarify: I'm not arguing for any change on the part of the lean team, but when it eventually comes out one of the things I will be looking into is an improvement to the equation compiler to compile <code>partial def</code> into a representation that you can prove things about</p>\n</blockquote>\n<p>This is fine. Isabelle is a good reference for this. <br>\nI just want to make sure users understand how <code>partial</code> works and avoid misinformation being spread about it.</p>",
        "id": 219515158,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1607625486
    },
    {
        "content": "<p>Yes, sorry for the one-sided portrayal. I agree with everything you said</p>",
        "id": 219515269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607625540
    }
]