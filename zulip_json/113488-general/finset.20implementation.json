[
    {
        "content": "<p>What is the advantage of implementing <code>finset</code> as it is now, over implementing it as <code>multiset</code> quotient by extensionality?</p>",
        "id": 133565775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536408297
    },
    {
        "content": "<p>I'm guessing efficiency of computation, but also perhaps some of the proofs are easier, since the functions are more or less identical to the multiset versions. Something like <code>finset.sum</code> is harder to implement with finsets as a quotient.</p>",
        "id": 133566086,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536408806
    },
    {
        "content": "<p>But if we implement it as a quotient, then we can have <code>finset.union</code></p>",
        "id": 133575013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536426993
    },
    {
        "content": "<p>Without <code>decidable_eq</code> you mean? Hooray. On the downside we'll need <code>decidable_eq</code> for <code>finset.sum</code> and <code>finset.card</code></p>",
        "id": 133575019,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536427068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I think both implementations can be valuable. Find a different name and then you can provide that new implementation.</p>",
        "id": 133586038,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536449241
    },
    {
        "content": "<p>great</p>",
        "id": 133586041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536449258
    },
    {
        "content": "<p>could you help me think of a name?</p>",
        "id": 133586043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536449264
    },
    {
        "content": "<p>One benefit of <code>finset</code>'s current implementation is in writing programs that are meant to be executed. Keeping the list minimal is more economical on memory.</p>",
        "id": 133586089,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536449303
    },
    {
        "content": "<p>The most obvious candidate would be <code>finset'</code> but I'm not sure that it's good. We could go with variations on <code>finset</code> (like <code>finite_set</code>) but I think that's more confusing than anything else. How about <code>no_eq.finset</code>?</p>",
        "id": 133586181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536449469
    },
    {
        "content": "<p>The other alternative would be to change the name of the current implementation to <code>compact.finset</code> or <code>minimal.finset</code> or <code>efficient.finset</code></p>",
        "id": 133586195,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536449515
    },
    {
        "content": "<p>I like your idea. Your kind of implementation makes a set that is easier to use as a monad and as a traversable collection.</p>",
        "id": 133586247,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536449632
    },
    {
        "content": "<p>I would suggest something like <code>qfinset</code> or <code>stacked_finset</code></p>",
        "id": 133586291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449685
    },
    {
        "content": "<p>I'm not seeing where the gains are though</p>",
        "id": 133586293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449697
    },
    {
        "content": "<p>you can have union without decidable equality :-)</p>",
        "id": 133586299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536449731
    },
    {
        "content": "<p>gain<em>s</em> plural</p>",
        "id": 133586300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449742
    },
    {
        "content": "<p>:-)</p>",
        "id": 133586301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536449749
    },
    {
        "content": "<p>Presumably this means that the two definitions can't be proved to be equal without decidable equality?</p>",
        "id": 133586340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536449772
    },
    {
        "content": "<p>For the most part anything you can do with a stacked finset you can also do with a multiset</p>",
        "id": 133586342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449786
    },
    {
        "content": "<p>There is a computable function <code>finset -&gt; qfinset</code> but the reverse is <code>erase_dup</code> which requires decidable eq</p>",
        "id": 133586354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449833
    },
    {
        "content": "<p>gotcha</p>",
        "id": 133586356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536449843
    },
    {
        "content": "<p>But all these functions already exist, between <code>finset</code> and <code>multiset</code></p>",
        "id": 133586398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536449885
    },
    {
        "content": "<p>I can see three reasons for using stacked sets. </p>\n<p>1. you mean it to form a monad (or a similar kind of functor)<br>\n2. you need it to be traversable<br>\n3. you want to work with finite sets while using set equality directly without translating back and forth between set and multiset.</p>",
        "id": 133586470,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536450073
    },
    {
        "content": "<p><code>qfinset</code> is then like <code>set</code>+ finiteness invariant, similarly to <code>multiset</code></p>",
        "id": 133586519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536450184
    }
]