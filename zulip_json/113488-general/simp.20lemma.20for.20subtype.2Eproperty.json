[
    {
        "content": "<p>Should this be a simp lemma in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">val_prop</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</pre></div>",
        "id": 159408604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551171014
    },
    {
        "content": "<p>I'm not sure if it will work right as a simp lemma, but you are welcome to try</p>",
        "id": 159408650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171113
    },
    {
        "content": "<p>I would prefer this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">val_prop</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</pre></div>",
        "id": 159408708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171153
    },
    {
        "content": "<p>I'm guessing that the unfolding of <code>x : S</code> was performed by dsimp</p>",
        "id": 159408718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171177
    },
    {
        "content": "<p>the simp lemma should be something that is in simp normal form already</p>",
        "id": 159408740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171212
    },
    {
        "content": "<p>only if you do <code>dsimp *</code></p>",
        "id": 159408742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171218
    },
    {
        "content": "<p>how about we include both <code>S</code> and <code>{x // x in S}</code></p>",
        "id": 159408753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171239
    },
    {
        "content": "<p>is <code>x.val</code> in simp normal form or <code>\\u x</code>?</p>",
        "id": 159408801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171249
    },
    {
        "content": "<p>I think they are both valid</p>",
        "id": 159408810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171260
    },
    {
        "content": "<p>so we have 4 versions!</p>",
        "id": 159408820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171272
    },
    {
        "content": "<p>I don't think <code>S</code> vs <code>{x // x in S}</code> affects simp applicability</p>",
        "id": 159408827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551171290
    },
    {
        "content": "<p>you're right</p>",
        "id": 159408854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171324
    },
    {
        "content": "<p>so 2 versions</p>",
        "id": 159408857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551171333
    },
    {
        "content": "<p>I've succesfully applied the current version in the perfectoid project. I'll prepare a PR that adds both versions to <code>data/subtype</code>.</p>",
        "id": 159408964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551171448
    }
]