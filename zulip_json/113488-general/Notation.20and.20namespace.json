[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">additive</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"c1\">-- this might be fun to experiment with</span>\n</code></pre></div>\n<p>but I can't experiment with it because I am not allowed an <code>additive</code> namespace now so all the code breaks. Is dot notation extensively used by the <code>additive</code> fans? My current thoughts on <code>additive</code> are that it should be tagged <code>@[canonical]</code>. I was wondering if we could make <code>id</code> do the work of <code>equiv</code> somehow.</p>",
        "id": 244560492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625144088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">additive</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">multiplicative</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">additive</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">additive.to_mul</span> <span class=\"o\">:</span> <span class=\"n\">additive</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>is another interesting opening</p>",
        "id": 244561627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625144566
    },
    {
        "content": "<p>How is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive.of_mul/src\">src#additive.of_mul</a> currently implemented?</p>",
        "id": 244567455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625146919
    },
    {
        "content": "<p><del>I think using <code>id</code> is probably identical providing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id/src\">src#id</a> is reducible</del> <code>id</code> isn't reducible so that version may cause trouble</p>",
        "id": 244567559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625146950
    },
    {
        "content": "<p><code>notation `additive` := id</code> is definitely a bad idea though, because that means to typeclass inference <code>additive x</code> and <code>multiplicative x</code> are the same thing which seems very wrong</p>",
        "id": 244567839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625147049
    },
    {
        "content": "<p>They are the same thing though? They're just alpha</p>",
        "id": 244578281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625150924
    },
    {
        "content": "<p>Yes, but the non-abbreviation def approach makes a type alias that TC inference does not see though. But TC does see through abbreviation. IIUC</p>",
        "id": 244578770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625151091
    },
    {
        "content": "<p>Does the kernel have any special support for id, or can I just define typeclass_id by copying the definition of id and making it a typeclass</p>",
        "id": 244579293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625151266
    },
    {
        "content": "<p>And then use abbreviations for typeclass_id</p>",
        "id": 244579373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625151303
    },
    {
        "content": "<p>I don't understand that question - are you asking about writing <code>instance : id (group A)</code> or <code>instance : group (id A)</code>? Only the former is \"making id a typeclass\", the latter is \"associating an instance with <code>id A</code> which is considered a different type to <code>A</code> by typeclass search\".</p>",
        "id": 244579574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625151374
    },
    {
        "content": "<p>Today's definition of <code>multiplicative</code> and <code>additive</code> are both semireducible meaning typeclass search cannot see through them</p>",
        "id": 244579775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625151453
    },
    {
        "content": "<p>Your <code>:= @id</code> version probably behaves the same way, but is more work for the elaborator</p>",
        "id": 244579828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625151475
    },
    {
        "content": "<p>Your <code>notation</code> version is  the most reducible something can be, and typeclass resolution would see right through it makeing <code>multiplicative</code> and <code>additive</code> indistinguishable</p>",
        "id": 244579971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625151518
    },
    {
        "content": "<p>I had this vision where using <code>id</code> instead of <code>additive</code> would somehow be perfect because you could leave it there if you wanted the elaborator not to see through it but simplify it away whenever you needed to. It still sort of sounds appealing but I don't really know how you keep the ids there iff you want them there</p>",
        "id": 244661743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625204805
    },
    {
        "content": "<p>I mean whatever you can do with <code>id</code> you can do with <code>additive</code> already, I don't think there's anything special about <code>id</code> that distinguishes it from other identity functions</p>",
        "id": 244661950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625205085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/id/src\">src#id</a> is pretty much the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive/src\">src#additive</a></p>",
        "id": 244661972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625205120
    },
    {
        "content": "<p>Oh, also using <code>def additive := @id</code> permits nonsense like <code>additive 1</code></p>",
        "id": 244662036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625205164
    }
]