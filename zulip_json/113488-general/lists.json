[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">append_inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">s₁</span> <span class=\"bp\">++</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">++</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">length</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∧</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">[]</span>      <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">[]</span>      <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"err\">$</span> <span class=\"n\">eq_nil_of_length_eq_zero</span> <span class=\"n\">hl</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"err\">$</span> <span class=\"n\">eq_nil_of_length_eq_zero</span> <span class=\"n\">hl</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">::</span><span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">ab</span> <span class=\"n\">hap</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">append_inj</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">hap</span> <span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>why is <code>length s1 = length s2</code> required explicitly as a hypothesis?</p>",
        "id": 123069986,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783057
    },
    {
        "content": "<p>It's not true otherwise</p>",
        "id": 123070028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783089
    },
    {
        "content": "<p>ahh. i guess you'd only have a weaker conclusion without the length requirement, that two lists exist that are subsets of <code>s1 ++ t1</code></p>",
        "id": 123070123,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783288
    },
    {
        "content": "<p>Of course that's a trivial consequence, <code>s1</code> and <code>t1</code> are such</p>",
        "id": 123070167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783332
    },
    {
        "content": "<p>If you don't want the length assumption, you could prove <code>s0 ++ t0 = s1 ++ t1 -&gt; s0 = t0 -&gt; s1 = t1</code></p>",
        "id": 123070172,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519783367
    },
    {
        "content": "<p>I guess that follows from this pretty easily, since if <code>s0 = t0</code> then <code>length s0 = length t0</code></p>",
        "id": 123070183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783417
    },
    {
        "content": "<p>Yeah, you're right! What was I thinking <span class=\"emoji emoji-1f61b\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 123070223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519783454
    },
    {
        "content": "<p>yeah it's something i'm having an issue with, I'm trying to prove that list reversal is injective from scratch</p>",
        "id": 123070224,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783455
    },
    {
        "content": "<p>The easiest way is to note that <code>reverse</code> is an involution</p>",
        "id": 123070226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rev_involutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">rev_step</span><span class=\"o\">,</span> <span class=\"n\">rev_distrib</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 123070245,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783544
    },
    {
        "content": "<p>actually, another way, using that theorem, is to use the mirror version that assumes <code>length t1 = length t2</code>; then you get that <code>concat</code> is injective since the right parts have length 1</p>",
        "id": 123070293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519783601
    },
    {
        "content": "<p>somebody had a prose proof in a conference paper i'm reading of how you can automatically prove injectivity of list reversal, and it's not working for me, haha</p>",
        "id": 123070304,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783633
    },
    {
        "content": "<p>the concat def is really slick in core lib, i was trying to avoid using it</p>",
        "id": 123070355,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519783735
    },
    {
        "content": "<p>EDIT: I can't read good, they assume the lengths are equal in the pseudocode figure</p>",
        "id": 123070515,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519784061
    },
    {
        "content": "<p>I'm trying to get a sense of the built in methods associated to the list type. I know the basic stack methods for it.</p>\n<ul>\n<li>concatenate is ++</li>\n<li>(a :: l) is push</li>\n</ul>\n<p>Now, do the following operations need to be defined by hand?</p>\n<ul>\n<li>delete the ith entry</li>\n<li>add in x : T in the ith entry</li>\n<li>get the ith entry</li>\n<li>splice the list </li>\n<li>length of the list</li>\n</ul>",
        "id": 298062291,
        "sender_full_name": "Topologic",
        "timestamp": 1662762253
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298062659,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662762490
    },
    {
        "content": "<p>I answered in the duplicate topic <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lists\">#Is there code for X? &gt; Lists</a></p>",
        "id": 298064667,
        "sender_full_name": "Jason Rute",
        "timestamp": 1662763719
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append\">docs#list.append</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.concat\">docs#list.concat</a> are reversed from their normal definitions (we should probably fix this, but it's in lean rather than mathlib).</p>",
        "id": 298489232,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1663022013
    }
]