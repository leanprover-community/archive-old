[
    {
        "content": "<p>The issue of using <code>haveI</code> with a Type arises fairly often.</p>\n<p>Would it be reasonable to make <code>haveI</code> check the type of the instance and produce a message to use <code>letI</code> when the type is <em>not</em> a Prop?</p>\n<p>Or would it be bad to make <code>haveI</code> a synonym for <code>letI</code>?  I do not know if this would cause any problems.</p>",
        "id": 294509518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661059549
    },
    {
        "content": "<p>No that would be unreasonable because the rule is more complicated than \"Use <code>haveI</code> for <code>Prop</code> and <code>letI</code> for <code>Type*</code>\". The actual rule is \"Use <code>haveI</code> unless you need to access the data within the declaration\". The difference being that sometimes you're building data and need non-instance data to fill it in, but nevertheless don't need to know its definition, so you should avoid adding a <code>let</code> binding (which is what <code>letI</code> does).</p>",
        "id": 294513224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661064247
    },
    {
        "content": "<p>Yaël, thanks for the explanation!  I am trying to see how many proofs break replacing <code>haveI</code> by <code>letI</code>, and I appreciate now that using <code>letI</code> instead of <code>haveI</code> in a definition could make results that depend on that definition fail later on.  So this is not just a \"local\" issue.</p>\n<p>Ok, so scrap my idea!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 294528986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661078077
    }
]