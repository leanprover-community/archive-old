[
    {
        "content": "<p>I'm trying to upgrade the lean part of the MM0 repo, <a href=\"https://github.com/digama0/mm0/tree/master/mm0-lean\">https://github.com/digama0/mm0/tree/master/mm0-lean</a> . Currently it is set up in a completely nonportable way, using <code>leanpkg.path</code> directly, but lean/mathlib breakage has been pretty high in the last 10 versions or so and now I want to explicitly declare the version of lean that I compile to so that other people can at least load it (and also so that I can see how it used to build so that I can fix the proofs). But <code>leanproject</code> seems to not want to even touch my setup unless I put it in its own repo, and I don't want to do that. Is there a way to set up leanpkg.toml to select the right version of lean and mathlib, get a <code>_target</code> directory and so on, without also getting the version control stuff?</p>",
        "id": 211192164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600982933
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/42\">mathlib-tools#42</a> is related, I guess.</p>",
        "id": 211192359,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600983047
    },
    {
        "content": "<p>Do I need leanproject?</p>",
        "id": 211192508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600983133
    },
    {
        "content": "<p>or is plain lean just completely useless now</p>",
        "id": 211192519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600983147
    },
    {
        "content": "<p>aha, leanproject works as long as I put the toml file at the root of the repo</p>",
        "id": 211192717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600983288
    },
    {
        "content": "<p>I think you can probably just drop a leanpkg.toml in the root, no?</p>",
        "id": 211192724,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983294
    },
    {
        "content": "<p>is there an easy way to switch to a version of mathlib from the past? I want to check out mathlib as of a year ago to see if it builds</p>",
        "id": 211192905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600983426
    },
    {
        "content": "<p>Copy the commit sha into leanpkg.toml and change the Lean version</p>",
        "id": 211192966,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983477
    },
    {
        "content": "<p>I guess in principle there could be a command that takes a sha and figures out the Lean version from that, but I don't think it exists.</p>",
        "id": 211193031,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983508
    },
    {
        "content": "<p>leanproject will find you olean caches for most mathlibs since March, and before then anything that was a nightly</p>",
        "id": 211193175,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983614
    },
    {
        "content": "<p>But that's kind of hard to identify</p>",
        "id": 211193179,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983623
    },
    {
        "content": "<p>Oh no, I guess it's not so hard, anything here: <a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\">https://github.com/leanprover-community/mathlib-nightly/releases</a></p>",
        "id": 211193232,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊙</span>  <span class=\"n\">git</span> <span class=\"k\">show</span> <span class=\"n\">e79396731</span><span class=\"o\">:</span><span class=\"n\">leanpkg.toml</span> <span class=\"bp\">|</span> <span class=\"n\">toml2json</span> <span class=\"bp\">|</span> <span class=\"n\">jq</span> <span class=\"bp\">.</span><span class=\"n\">package.lean_version</span>                                                                                                                                                                                                                                                                                        <span class=\"n\">julian</span><span class=\"bp\">@</span><span class=\"n\">Home</span>\n<span class=\"s2\">\"3.4.1\"</span>\n</code></pre></div>",
        "id": 211193316,
        "sender_full_name": "Julian Berman",
        "timestamp": 1600983738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Setting.20up.20.22modern.22.20lean.20with.20a.20nonstandard.20repo.20layout/near/211193316\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊙</span>  <span class=\"n\">git</span> <span class=\"k\">show</span> <span class=\"n\">e79396731</span><span class=\"o\">:</span><span class=\"n\">leanpkg.toml</span> <span class=\"bp\">|</span> <span class=\"n\">toml2json</span> <span class=\"bp\">|</span> <span class=\"n\">jq</span> <span class=\"bp\">.</span><span class=\"n\">package.lean_version</span>                                                                                                                                                                                                                                                                                        <span class=\"n\">julian</span><span class=\"bp\">@</span><span class=\"n\">Home</span>\n<span class=\"s2\">\"3.4.1\"</span>\n</code></pre></div>\n\n</blockquote>\n<p>Nice, sounds like the core of a new <code>leanproject set-mathlib</code> command.</p>",
        "id": 211193683,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600983972
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , a simpler way would be just to change the Lean version to 3.4.1 and <code>leanpkg configure</code> should set mathlib to the last commit compatible with that</p>",
        "id": 211193755,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600984043
    },
    {
        "content": "<p>If that's old enough for you.</p>",
        "id": 211193770,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600984055
    },
    {
        "content": "<p>I picked a random commit from the end of 2019 and used whatever was in its toml file</p>",
        "id": 211193845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984096
    },
    {
        "content": "<p>unfortunately I don't get oleans so now I have to build mathlib</p>",
        "id": 211193874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984121
    },
    {
        "content": "<p>and it's exactly as slow as I remember</p>",
        "id": 211193912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984147
    },
    {
        "content": "<p>reproducibly slow builds</p>",
        "id": 211193932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600984162
    },
    {
        "content": "<p>fun fact, file not found errors abort the build even if there are other nondependent files that can be built</p>",
        "id": 211194204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984340
    },
    {
        "content": "<p>i.e if <code>B.lean</code> imports <code>A.lean</code> (which doesn't exist) and <code>C.lean</code> imports nothing, <code>C.lean</code> won't be compiled because of the file not found error in B</p>",
        "id": 211194263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984393
    }
]