[
    {
        "content": "<p>Here's my example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">covering_one_aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">7</span> <span class=\"o\">{</span><span class=\"n\">norm_num1</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and it produces the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">norm_num.one_add</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">norm_num.bit0_succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">norm_num.bit0_succ</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 308456974,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1667848809
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17415\">#17415</a></p>",
        "id": 308463669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667851331
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 308483889,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1667859582
    }
]