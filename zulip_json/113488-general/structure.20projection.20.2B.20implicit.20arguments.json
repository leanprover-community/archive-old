[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"c1\">-- foo 0 : 0 = ?M_1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">h.baz</span> <span class=\"c1\">-- h.baz : ∀ {m : ℕ}, m = 0</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar.baz</span> <span class=\"n\">h</span> <span class=\"c1\">-- h.baz : ?M_1 = 0</span>\n</code></pre></div>",
        "id": 214807898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603874641
    },
    {
        "content": "<p>should <code>h.baz</code> be <code>?M_1 = 0</code> also?</p>",
        "id": 214807941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603874653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 214812968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603878187
    },
    {
        "content": "<p>Yeah, this is the same bug I mentioned to Yasmine yesterday</p>",
        "id": 214813187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603878342
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214645426\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Projecting.20Class.20Members/near/214645426</a></p>",
        "id": 214813271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603878393
    },
    {
        "content": "<p>Is there a lean issue for this?</p>",
        "id": 214813467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603878516
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/492\">lean#492</a></p>",
        "id": 214814737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603879263
    },
    {
        "content": "<p>thanks</p>",
        "id": 214814835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603879326
    }
]