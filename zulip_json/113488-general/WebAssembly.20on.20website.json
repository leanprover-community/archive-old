[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Is there any way to edit the <a href=\"https://leanprover-community.github.io/lean-web-editor/\">default Lean code</a> that shows up in WebAssembly?  At the moment it is the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Live WebAssembly version of Lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">version</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">special_version_desc</span> <span class=\"k\">in</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n<span class=\"o\">[</span><span class=\"s2\">&quot;Lean (version &quot;</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">,</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">,</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;, &quot;</span> <span class=\"k\">else</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s2\">&quot;commit &quot;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">githash</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"bp\">.</span><span class=\"k\">take</span> <span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as_string</span><span class=\"o\">,</span> <span class=\"s2\">&quot;)&quot;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>I think the <code>#eval</code> statement (full of CS stuff like strings) could be rather forbidding for a brand-new mathematician user, especially with the 3-line green underline.</p>\n<p>I mention it because the <a href=\"https://leanprover-community.github.io/\">Lean community website</a> has several prominent links to this page:</p>\n<ul>\n<li>on the homepage, this is one of the first links (text: \"Try the online version of Lean\")</li>\n<li>in the navigation bar, this is one of the first links (text: \"Try it!\"/\"Lean online\")</li>\n</ul>\n<p>So this could be a lot of people's first encounter with Lean.</p>\n<p>An alternative would be to change just those two links so that they lead to a special beginner file in WebAssembly, either the existing file with the <code>#eval</code> deleted or the <a href=\"https://leanprover-community.github.io/lean-web-editor/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fleanprover-community%2Ftutorials%2Fmaster%2Fsrc%2Fexercises%2F00_first_proofs.lean\">first file</a> of the tutorial project.</p>",
        "id": 203195861,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594152193
    },
    {
        "content": "<p>The answer is yes, but this is a question for <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 203196048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152279
    },
    {
        "content": "<p>And I agree this doesn't look nice and welcoming.</p>",
        "id": 203196077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152293
    },
    {
        "content": "<p>I think it may come from here: <a href=\"https://github.com/leanprover-community/lean-web-editor/blob/da9a3114bedf1825ae3f8d12d51e556a7db21c01/src/index.tsx#L738\">https://github.com/leanprover-community/lean-web-editor/blob/da9a3114bedf1825ae3f8d12d51e556a7db21c01/src/index.tsx#L738</a></p>",
        "id": 203196268,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1594152382
    },
    {
        "content": "<p>I guess the very simple workaround is linking to <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=%20\">https://leanprover-community.github.io/lean-web-editor/#code=%20</a> instead.</p>",
        "id": 203196287,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594152393
    },
    {
        "content": "<p>But yeah, I'd be happy to see the default changed.</p>",
        "id": 203196331,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594152420
    },
    {
        "content": "<p>That's cunning!</p>",
        "id": 203196375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152450
    },
    {
        "content": "<p>I think that having something like the current example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>is great, and more welcoming than the blank page.</p>",
        "id": 203196419,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594152477
    },
    {
        "content": "<p>By the way, hello, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , and congratulations on doing that Hahn-Banach PR!</p>",
        "id": 203196533,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594152517
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=example%20%28m%20n%20%3A%20%E2%84%95%29%20%3A%20m%20%2B%20n%20%3D%20n%20%2B%20m%20%3A%3D%0Aby%20simp%20%5Bnat.add_comm%5D%20\">The url is a bit longer</a></p>",
        "id": 203196550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594152524
    },
    {
        "content": "<p>And, to workshop this even further, maybe a tactic mode proof would be more welcoming than a term mode proof ...</p>",
        "id": 203196670,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594152580
    },
    {
        "content": "<p>Sorry about that. The code there was just to help me debug things and I never bothered to switch it. I can change it to anything you guys want.</p>",
        "id": 203196780,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594152622
    },
    {
        "content": "<p>simp is a bit too much for <code>nat.add_comm _ _</code></p>",
        "id": 203196868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152684
    },
    {
        "content": "<p>We can use <code>nat.add_comm m n</code> if we don't want it to look mysterious</p>",
        "id": 203196972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152727
    },
    {
        "content": "<p>How about the infinitute of primes proof as the default?</p>",
        "id": 203197077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594152785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/WebAssembly.20on.20website/near/203196780\">said</a>:</p>\n<blockquote>\n<p>Sorry about that. The code there was just to help me debug things and I never bothered to switch it. I can change it to anything you guys want.</p>\n</blockquote>\n<p>I've actually found it useful before since I don't know how often the web editor updates its Lean version :) but I'm sure I'm the odd one out there, hah.</p>",
        "id": 203197117,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594152809
    },
    {
        "content": "<p>(Not the mathlib scramble-golf... but a nice one.)</p>",
        "id": 203197120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594152810
    },
    {
        "content": "<p>It would be nice but only if you can do it without too much imports since I guess that would slow down the webpage.</p>",
        "id": 203197293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594152907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/WebAssembly.20on.20website/near/203197117\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">I&#39;ve</span> <span class=\"n\">actually</span> <span class=\"n\">found</span> <span class=\"n\">it</span> <span class=\"n\">useful</span> <span class=\"n\">before</span> <span class=\"n\">since</span> <span class=\"n\">I</span> <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">often</span> <span class=\"n\">the</span> <span class=\"n\">web</span> <span class=\"n\">editor</span> <span class=\"n\">updates</span> <span class=\"n\">its</span> <span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"o\">:)</span> <span class=\"n\">but</span> <span class=\"n\">I&#39;m</span> <span class=\"n\">sure</span> <span class=\"n\">I&#39;m</span> <span class=\"n\">the</span> <span class=\"n\">odd</span> <span class=\"n\">one</span> <span class=\"n\">out</span> <span class=\"n\">there</span><span class=\"o\">,</span> <span class=\"n\">hah</span><span class=\"bp\">.</span>\n<span class=\"bp\">````</span>\n<span class=\"n\">One</span> <span class=\"n\">could</span> <span class=\"n\">keep</span> <span class=\"n\">the</span> <span class=\"n\">default</span> <span class=\"n\">code</span> <span class=\"n\">the</span> <span class=\"n\">same</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">change</span> <span class=\"n\">just</span> <span class=\"n\">those</span> <span class=\"n\">two</span> <span class=\"n\">links</span> <span class=\"n\">to</span> <span class=\"n\">something</span> <span class=\"n\">more</span> <span class=\"n\">beginner</span><span class=\"bp\">-</span><span class=\"n\">friendly</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 203197315,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594152924
    },
    {
        "content": "<p>I also think that the <a href=\"https://leanprover-community.github.io/lean-web-editor/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fleanprover-community%2Ftutorials%2Fmaster%2Fsrc%2Fexercises%2F00_first_proofs.lean\">first file</a> of the tutorial project is very beginner-friendly (as an alternative to the infinitude of primes); but a nearly blank page with just one or two short examples is also beginner-friendly.</p>",
        "id": 203197629,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594153096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/WebAssembly.20on.20website/near/203197117\">said</a>:</p>\n<blockquote>\n<p>I've actually found it useful before since I don't know how often the web editor updates its Lean version :) but I'm sure I'm the odd one out there, hah.</p>\n</blockquote>\n<p>It's a little less direct, but you can also sort of check by clicking the purple (?) link and scrolling down to see the commits of the libraries that are included.</p>",
        "id": 203201484,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594155227
    },
    {
        "content": "<p>Why not add a function to lean core that does what the <code>#eval</code> does? That way you can just write <code>#eval lean.print_version</code> or something to see that, and it doesn't have to go in the default code</p>",
        "id": 203208691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594159186
    },
    {
        "content": "<p>Good idea, and even if it were in the default code, it would not look forbidding.</p>",
        "id": 203208804,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594159241
    },
    {
        "content": "<p>Putting <code>#eval lean.print_version</code> in the default code wouldn't work for anyone using older versions of Lean. Of course, it would be fine for the community web editor, which is kept at the bleeding edge, but if we want to support multiple versions of Lean / multiple versions of mathlib in the future that will make it trickier.</p>\n<p>I tested out the first file of the tutorial project and it takes around a minute to fully load on my laptop (and that's with all the resources already cached). Also, making edits to a file of that size in the web editor is much too laggy. I think something &lt; 50 lines would be good, if anyone has any suggestions.</p>",
        "id": 203212877,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594162264
    },
    {
        "content": "<p>Maybe something like this?  Perhaps a slightly shorter-to-prove algebraic identity, if anyone has ideas.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Welcome to Lean!</span>\n\n<span class=\"cm\">Lean is a *proof assistant*.  It knows the axioms of standard mathematical objects such as ℤ :</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_add</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">add_sub_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">pow_two</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_add_eq_sub_sub</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_self</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>                <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_sub</span>\n                    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>                   <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> And it also has higher-level *tactics* to manipulate these axioms like a mathematican would. -/</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 203215774,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594164550
    },
    {
        "content": "<p>For ease of toying around with the example by the first-time-user, I'd add curly braces or use <code>begin end</code>. Otherwise, removing or adding lines will break the example as it is now</p>",
        "id": 203216105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594164818
    },
    {
        "content": "<p>Do you mean <code>begin</code> and <code>end</code> around the <code>calc</code> block?</p>",
        "id": 203216371,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594165069
    },
    {
        "content": "<p>Removing or adding lines in the middle of proofs will break them regardless of whether they're wrapped in <code>begin</code> and <code>end</code>, right?</p>",
        "id": 203216483,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594165136
    },
    {
        "content": "<p>Yes, that's true, but I was thinking of something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203216602,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594165210
    },
    {
        "content": "<p><code>calc</code> is super cool, but difficult to edit, because you have to also supply the statement you want to show.</p>",
        "id": 203216661,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594165267
    },
    {
        "content": "<p>Ah, OK. Sure, that makes sense.</p>",
        "id": 203216692,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594165309
    },
    {
        "content": "<p>Maybe have an in-between tactic style of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_add_eq_sub_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203216928,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594165495
    },
    {
        "content": "<p>Which shows the user a simplified version of the <code>calc</code> proof, and this version is friendlier to scrolling through and seeing the goal change.</p>",
        "id": 203216959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594165533
    },
    {
        "content": "<p>Sounds good. I might compress the rewrites to a single line using <code>[</code> and <code>]</code>.</p>",
        "id": 203217214,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594165791
    },
    {
        "content": "<p>I'll add some comments too suggesting interesting places to put the cursor.</p>",
        "id": 203217275,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594165818
    },
    {
        "content": "<p>My inclination to have the rewrites on separate lines was the thought that a user would want to try their own <code>rw ___</code>. Having the rw in <code>[ ]</code> makes it more difficult to rearrange or insert, imo.</p>",
        "id": 203217317,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1594165871
    },
    {
        "content": "<p>That's true. Though new users may have a hard time coming up with lemma names to use in rewrites. </p>\n<p>Anyways, I'll wait for more explicit agreement. Any changes we decide on will be pretty easy to make and deploy, but I'd rather just do it once.</p>",
        "id": 203217569,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594166139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/WebAssembly.20on.20website/near/203212877\">said</a>:</p>\n<blockquote>\n<p>Putting <code>#eval lean.print_version</code> in the default code wouldn't work for anyone using older versions of Lean. Of course, it would be fine for the community web editor, which is kept at the bleeding edge, but if we want to support multiple versions of Lean / multiple versions of mathlib in the future that will make it trickier.</p>\n</blockquote>\n<p>An easy solution to that is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">print_version</span> <span class=\"c1\">-- warning: will not work on lean &lt; 3.17</span>\n</code></pre></div>",
        "id": 203219424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594168052
    },
    {
        "content": "<p>If the community web editor will get a version picker in the future, then the code in the text box can also vary to match whatever is appropriate for that version. (It will probably not be necessary to include a <code>#eval lean.version</code> line in that case anyway since the version is stated in the picker.)</p>",
        "id": 203219540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594168190
    },
    {
        "content": "<p>You can also do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">version</span>  <span class=\"c1\">-- doesn&#39;t look as pretty, but gets the information across</span>\n</code></pre></div>",
        "id": 203237317,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594192044
    }
]