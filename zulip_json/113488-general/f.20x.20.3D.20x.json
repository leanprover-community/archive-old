[
    {
        "content": "<p><code>theorem is_it_true (X : Type) (f : X → X) (x : X) : f x = x := sorry</code></p>",
        "id": 125835929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524959958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 125835930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524959968
    },
    {
        "content": "<p>I will think about your rec problem</p>",
        "id": 125835931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524959974
    },
    {
        "content": "<p>can you remind me of it</p>",
        "id": 125835932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524959978
    },
    {
        "content": "<p>but in the mean time what do you think of that one</p>",
        "id": 125835934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524959987
    },
    {
        "content": "<p>Maybe one should make some counterexample</p>",
        "id": 125835988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524960089
    },
    {
        "content": "<p>maybe create a structure generated by <code>x</code> and <code>f x</code> and use <code>no_confusion</code></p>",
        "id": 125836030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524960134
    },
    {
        "content": "<p>and this structure is nat</p>",
        "id": 125836031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524960149
    },
    {
        "content": "<p>and x is 0 and f is succ</p>",
        "id": 125836032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524960163
    },
    {
        "content": "<p>so maybe try to build a counterexample...</p>",
        "id": 125836039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524960222
    },
    {
        "content": "<p>I did your acc question</p>",
        "id": 125836859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961932
    },
    {
        "content": "<p>It is really fun to do it in tactic mode</p>",
        "id": 125836860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961938
    },
    {
        "content": "<p>you are in a pretty tight spot</p>",
        "id": 125836861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961943
    },
    {
        "content": "<p>but there's only one way out</p>",
        "id": 125836862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961949
    },
    {
        "content": "<p>and there are loops</p>",
        "id": 125836863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961952
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125836865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524961974
    },
    {
        "content": "<p>But my maze is impossible to get out of</p>",
        "id": 125837098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524962547
    },
    {
        "content": "<p>and yours I can escape from</p>",
        "id": 125837101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524962564
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n<span class=\"c1\">-- only one move</span>\n<span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span> <span class=\"n\">Hcomplicated</span><span class=\"o\">,</span>\n<span class=\"c1\">-- let&#39;s leave the scary term till last</span>\n<span class=\"n\">clear</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- works! x is no longer relevant</span>\n<span class=\"c1\">-- only one move</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Hy</span> <span class=\"n\">y</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"c1\">-- never even use this</span>\n<span class=\"c1\">-- must use complicated thing</span>\n<span class=\"n\">exact</span> <span class=\"n\">Hcomplicated</span> <span class=\"n\">y</span> <span class=\"n\">H1</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125837108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524962601
    },
    {
        "content": "<p>Did you see the \"theorems for free\" paper?</p>",
        "id": 125837709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524964080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 125837748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524964090
    },
    {
        "content": "<p>Kenny apparently this theorem is free</p>",
        "id": 125838051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524964828
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">free_fun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125838052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524964836
    },
    {
        "content": "<blockquote>\n<p><code>theorem is_it_true (X : Type) (f : X → X) (x : X) : f x = x := sorry</code></p>\n</blockquote>\n<p>well that is indeed the Church encoding of the unit type</p>",
        "id": 125842628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524976215
    },
    {
        "content": "<p>but, I mean, if X is <code>int</code> and <code>f</code> is negation then we all know it's false</p>",
        "id": 125842672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524976377
    },
    {
        "content": "<p>In the formalism of \"theorems for free\", you can state something even stronger than <code>free_fun</code> there: every closed term of type <code>∀ (X : Type), X → X</code> is the identity function</p>",
        "id": 125843538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978684
    },
    {
        "content": "<p>but you can't prove it</p>",
        "id": 125843540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524978698
    },
    {
        "content": "<p>I mean, you can prove it, but you can't assume in Lean that every function has a closed term</p>",
        "id": 125843551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524978722
    },
    {
        "content": "<p>right, it's a metatheorem of the logic, so it's not to say that <code>\\forall (r : ∀ (X : Type), X → X) (a : Type) (x : a), r a x = x</code> is inhabited</p>",
        "id": 125843580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978744
    },
    {
        "content": "<p>(which I think is what Kevin meant to say)</p>",
        "id": 125843581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978759
    },
    {
        "content": "<p>it is of course false that <code>\\forall  (X : Type) (f : X → X) (x : X), f x = x</code></p>",
        "id": 125843585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978783
    },
    {
        "content": "<p>and in lean, it's not even true at the meta level because of non-parametric functions based on <code>choice</code></p>",
        "id": 125843588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978826
    },
    {
        "content": "<p>did you just use a colon lol</p>",
        "id": 125843629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524978847
    },
    {
        "content": "<p>of course not, what do you take me for</p>",
        "id": 125843630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">but_it_is_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 125843632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524978887
    },
    {
        "content": "<p>Reid asks if it's true for computable functions, and it's not, trivially; every functor <code>Type -&gt; Type</code> is computable simply because <code>Type</code> is erasable</p>",
        "id": 125843639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978932
    },
    {
        "content": "<p>However, if you avoid choice according to <code>#print axioms</code>, then I believe it to be true, although that's a future project</p>",
        "id": 125843682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524978994
    },
    {
        "content": "<p>project? can you ever check whether a function uses an axiom inside?</p>",
        "id": 125843684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524979011
    },
    {
        "content": "<p>no, it would be a metatheorem</p>",
        "id": 125843688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524979025
    },
    {
        "content": "<p>i.e. a section in my paper</p>",
        "id": 125843691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524979032
    },
    {
        "content": "<p>but you could formalize such a proof in lean by creating tactics that produce the appropriate free theorem and prove it, failing if they run across an instance of choice</p>",
        "id": 125843734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524979098
    },
    {
        "content": "<p>Dang, I was only thinking about <code>Prop</code> being erasable.</p>",
        "id": 125843782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524979240
    },
    {
        "content": "<p>Furthermore, Kevin claims that he uses <code>choice</code> in his definitions, and I actually doubt it, since I'm talking about the type operator itself</p>",
        "id": 125843827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524979336
    }
]