[
    {
        "content": "<p>I realize I don't know what to do with dependent types, even the most basic things. Some context: I am building inductively a sequence of more and more complicated metric spaces. In this construction, the metric at each step is constructed from the metric at the previous step, but I am not able to convince Lean of this. I have minimized my problem in the following example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">space</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">space</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">aux</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_def</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here, <code>aux</code> is a structure containing a Type and a metric structure on it, and <code>my_def</code> constructs inductively new metric spaces, by taking the product of the previous one with <code>X n</code>, so that <code>my_def X (n.succ) = prod (my_def X n) (X n.succ)</code>, with the same metric. Of course, I only have equality of types, so if I want to express that the distances are the same I need to use a cast. But then I don't know how to prove that the distances are the same, while this is precisely what the definition of <code>my_def</code> does. Probably I miss the good keywords, or a pointer to the relevant chapter in TPIL (or to some part of the library where this game is played). Any idea?</p>",
        "id": 158830062,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550525246
    },
    {
        "content": "<p>If you can make <code>my_def X (n.succ) = prod (my_def X n) (X n.succ)</code> definitional, then you won't need cast.</p>",
        "id": 158830678,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550525980
    },
    {
        "content": "<p>I don't understand how it's not definitional already</p>",
        "id": 158830741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550526027
    },
    {
        "content": "<p>It is actually definitional.</p>",
        "id": 158830747,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1550526031
    },
    {
        "content": "<p>you can prove <code>E</code> by <code>begin dsimp [my_def], refl end</code> but not by <code>rfl</code></p>",
        "id": 158830752,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550526047
    },
    {
        "content": "<p>You can replace the <code>simp [my_def]</code> with <code>unfold my_def</code>.</p>",
        "id": 158830755,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1550526050
    },
    {
        "content": "<p>And you don't need the <code>cast E</code>s.</p>",
        "id": 158830768,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1550526069
    },
    {
        "content": "<p>But isn't this space just <code>Π i : fin n, X n</code>?</p>",
        "id": 158830851,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526162
    },
    {
        "content": "<p>fin (n+1) but yes</p>",
        "id": 158830860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550526181
    },
    {
        "content": "<p>Yes, of course, it is just <code>Π i : fin n, X n</code> in this simple example, but in my real use-case, it is something much more complicated.</p>",
        "id": 158830898,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550526235
    },
    {
        "content": "<p>oh man, inductive-recursive types</p>",
        "id": 158830958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550526267
    },
    {
        "content": "<p>probably just recurse on a sigma type</p>",
        "id": 158830965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550526283
    },
    {
        "content": "<p>I had this problem with splitting fields. The other thing you can do is define the Type and all the definitions you need to prove everything else in one definition</p>",
        "id": 158831000,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526312
    },
    {
        "content": "<p>This is the type of my definition of splitting fields.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_field_hom</span> <span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">splits</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 158831013,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526342
    },
    {
        "content": "<p>Unfortunately this did give me universe issues defining the map from a splitting field, so I still had to make sure the equation lemmas were definitional, and define the map by unfolding the definition.</p>",
        "id": 158831094,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526425
    },
    {
        "content": "<p>Isn't my definition one single definition? I mean, I only define one function <code>my_def</code>. Or does the fact that it is structure-valued mean that I have two intertwined definitions?</p>",
        "id": 158831181,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550526596
    },
    {
        "content": "<blockquote>\n<p>probably just recurse on a sigma type</p>\n</blockquote>\n<p>Could you elaborate a little bit, please?</p>",
        "id": 158831243,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550526627
    },
    {
        "content": "<p>I'm saying define the space and every property you need about the space together.</p>",
        "id": 158831248,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526633
    },
    {
        "content": "<p>Or at least enough properties to deduce everything else.</p>",
        "id": 158831260,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526652
    },
    {
        "content": "<p>With a load of nested Sigmas.</p>",
        "id": 158831476,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550526922
    },
    {
        "content": "<p>It works better if you don't use the equation compiler</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">})</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158831539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550526993
    },
    {
        "content": "<p>I think I also ran into this here: <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/disk_sphere.lean#L11\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/disk_sphere.lean#L11\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/disk_sphere.lean#L11</a></p>",
        "id": 158831543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550527003
    },
    {
        "content": "<p>I don't understand why it matters</p>",
        "id": 158831550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550527011
    },
    {
        "content": "<p>Apparently the equation compiler uses something called <code>nat.brec_on</code></p>",
        "id": 158831899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550527402
    },
    {
        "content": "<p><code>nat.brec_on</code> usually produces definition stuff.</p>",
        "id": 158831908,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550527422
    },
    {
        "content": "<p>Amazing. And it also works in my real use case!</p>",
        "id": 158831919,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550527436
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">f</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"c1\">-- nat.brec_on stuff</span>\n</pre></div>\n\n\n<p>Simple use case with equation compiler still giving me <code>rfl</code> proofs.</p>",
        "id": 158833905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550529419
    },
    {
        "content": "<p>So what's the difference in Sebastien's case?</p>",
        "id": 158833916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550529430
    },
    {
        "content": "<p>But indeed, replacing <code>my_def</code> in Reid's code with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aux</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>breaks the <code>rfl</code> proof of <code>E</code></p>",
        "id": 158834169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550529762
    },
    {
        "content": "<p>Complete code in case anyone wants to fiddle</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">space</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">space</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- use nat.rec instead and things are better</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aux</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158834289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550529956
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">space</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">space</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n    <span class=\"n\">metric</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">})</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">metric</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158834362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550530011
    },
    {
        "content": "<p>why is <code>my_def</code> <code>noncomputable</code>?</p>",
        "id": 158840102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550537511
    },
    {
        "content": "<p>because the product metric involves doing something with reals</p>",
        "id": 158840164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550537588
    },
    {
        "content": "<p>I think the <code>noncomputable</code> marker has something to do with why it doesn't compute. Minimized:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_def</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 158840502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538174
    },
    {
        "content": "<p>If you use <code>my_def._main</code> in place of <code>my_def</code>, it works</p>",
        "id": 158840513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538236
    },
    {
        "content": "<p>even though these are defined to be the same</p>",
        "id": 158840556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Is it possible to define the type before putting the metric space structure on it?</p>",
        "id": 158840575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538313
    },
    {
        "content": "<p>In the case of <code>my_def</code> at least, the <code>space</code> component does not depend on the <code>metric</code> component so they can be defined in that order rather than as a sigma</p>",
        "id": 158840583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538361
    },
    {
        "content": "<p>hm, even <code>my_def X n = my_def._main X n := rfl</code> fails</p>",
        "id": 158840697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538487
    },
    {
        "content": "<p>Aha, <code>whnf `(my_def X n)</code> returns <code>my_def X n</code> without unfolding anything</p>",
        "id": 158840864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538742
    },
    {
        "content": "<p>I think lean thinks <code>my_def</code> is some kind of irreducible</p>",
        "id": 158840866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550538760
    },
    {
        "content": "<p>In my real use case, the definition is noncomputable because it doesn't work without it :) With the equation compiler, I get the complain </p>\n<div class=\"codehilite\"><pre><span></span>equation compiler failed to generate bytecode for &#39;auxi._main&#39;\nnested exception message:\ncode generation failed, VM does not have code for &#39;classical.indefinite_description&#39;\n</pre></div>\n\n\n<p>So I need to add <code>noncomputable</code> (even though I am already in a <code>noncomputable theory</code>). With the <code>nat.rec_on</code> version, however, I do not need to add it.</p>",
        "id": 158857401,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550564683
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">@Sebastien Gouezel</span> Is it possible to define the type before putting the metric space structure on it?</p>\n</blockquote>\n<p>This would solve all my problems, sure, but this is not possible in my real use case: the definition of the type at step <code>n+1</code> depends on the metric at step <code>n</code>.</p>",
        "id": 158857424,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550564748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> what is this mysterious use case?</p>",
        "id": 158857484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550564808
    },
    {
        "content": "<p>There is an optimal way to glue two metric spaces together, to minimize their Hausdorff distance in the coupling. I have a sequence of metric spaces <code>X n</code>, and I want to build a metric space in which each <code>X n</code> is glued to <code>X (n+1)</code> in the optimal way. Start from <code>Y 0 = X 0</code>. Then glue optimally <code>X 1</code> to <code>X 0</code>, to get <code>Y 1</code> (with an isometrically embedded copy of <code>X 1</code>). Then glue the optimal coupling of <code>X 1</code> and <code>X 2</code> to <code>Y 1</code> along the space <code>X 1</code> that they both contain. This gives you a space <code>Y 2</code> (with an isometrically embedded copy of <code>X 2</code>). Go on like this to get <code>Y 3</code>, <code>Y 4</code> and so on. Note that each <code>Y n</code> is isometrically embedded in each <code>Y (n+1)</code>. Then take the inductive limit of the <code>Y n</code>, and you get the desired space.</p>\n<p>All this is useful to show that the space of all nonempty compact metric spaces (a well behaved metric space, called the Gromov Hausdorff space), is complete: the <code>X n</code> will be a Cauchy sequence in the Gromov Hausdorff space, and I am constructing its limit.</p>",
        "id": 158857773,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550565160
    },
    {
        "content": "<p>Is the gluing a disjoint union or a nondisjoint union or something in between?</p>",
        "id": 158858090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565536
    },
    {
        "content": "<p>Something in between, and non-explicit: an optimal predistance is constructed on the disjoint union to minimize the Hausdorff distance functional, by applying Arzela-Ascoli to show that a minimizer exists. It satisfies all properties of a distance, except that different points can be at zero distance. Then quotient by the natural equivalence relation \"being at zero distance\" to get the desired metric space. This is highly noncomputable...</p>",
        "id": 158858211,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550565691
    },
    {
        "content": "<p>So the short story is it's a quotient of a disjoint union of <code>X 0</code> and <code>X 1</code></p>",
        "id": 158858276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565764
    },
    {
        "content": "<p>actually I bet you can make it \"computable\"</p>",
        "id": 158858295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550565798
    },
    {
        "content": "<p>I'm not sure if this is better, but you could start with the disjoint union, and construct the equivalence relation and the metric space together in your recursion</p>",
        "id": 158858304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565828
    },
    {
        "content": "<p>that way the type itself is set up beforehand</p>",
        "id": 158858348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565845
    },
    {
        "content": "<p>Alternatively, maybe we should get into pseudometrics?</p>",
        "id": 158858360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565884
    },
    {
        "content": "<p>it occurs to me that we have a lot of natural pseudometric spaces</p>",
        "id": 158858391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550565936
    },
    {
        "content": "<p>I could definitely do everything with premetric spaces. By the way, they are already in mathlib, see <code>topology/metric_space/premetric/</code>. But Reid's trick to avoid the equation compiler and use <code>nat.rec_on</code> works perfectly for me, so I am back on track!</p>",
        "id": 158858602,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550566190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I have two pieces of advice for you: first you could go to <a href=\"https://lean-forward.github.io/lean-together/2019/#videos\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/#videos\">https://lean-forward.github.io/lean-together/2019/#videos</a> and watch Reid's talk in Amsterdam. But my main advice is you should walk for 30 meters and talk to <span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span>  about your problem, and then report back here.</p>",
        "id": 158879036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550581190
    },
    {
        "content": "<p>Are you sure Assia is spending her holidays in the same ski resort? :) But I don't have any problem left, thanks to Reid!</p>",
        "id": 158886625,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550587495
    }
]