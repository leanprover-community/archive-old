[
    {
        "content": "<p>In a <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20theorem.20with.20pfun.20and.20part\">previous thread</a>, I was suggested the following way to prove this theorem, which works perfectly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ev</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">part.eq_some_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>however, I really want <code>f x = part.some y ↔ ∃ev, y = f.fn x ev</code> (notice that this is <code>y = ...</code> instead of <code>... = y</code>). Upon making this change, I can no longer use <code>exact part.eq_some_iff</code>. I think I could use something like <code>eq.symm</code> to first change it to the form <code>eq_some_iff</code> expects, but I cannot figure out how.</p>\n<p>Does anyone have any suggestions?</p>",
        "id": 272622025,
        "sender_full_name": "David Richey",
        "timestamp": 1645397346
    },
    {
        "content": "<p>Also, to be honest, I do not really understand why <code>part.eq_some_iff</code> is applicable in the first place either... It says <code>o = part.some a ↔ a ∈ o</code> which doesn't look exactly like what I'm trying to prove. Is there multiple steps going on somehow?</p>",
        "id": 272622120,
        "sender_full_name": "David Richey",
        "timestamp": 1645397460
    },
    {
        "content": "<p>Regarding your last question, It's just unfolding the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/part.has_mem\">docs#part.has_mem</a></p>",
        "id": 272623002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645398315
    },
    {
        "content": "<p>Thanks, I guess it is also implicitly using <code>pfun.fn_apply</code>? I thought <code>exact</code> would only apply if the goal were <em>exact</em>ly the same. How can I know what it is really doing under the hood?</p>",
        "id": 272623659,
        "sender_full_name": "David Richey",
        "timestamp": 1645399072
    },
    {
        "content": "<p>exact is the same up to definitional equality, if you know what that means</p>",
        "id": 272623756,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645399185
    },
    {
        "content": "<p>ah, I see now. It is not using <code>pfun.fn_apply</code> but <code>pfun.fn</code>. So two <code>def</code>s, makes sense in the context of definitional equality</p>",
        "id": 272624019,
        "sender_full_name": "David Richey",
        "timestamp": 1645399507
    },
    {
        "content": "<p>thanks for your help with that second question! I derailed us from the original question though, oops. I think it is probably quite simple, but I just can't seem to write the right thing</p>",
        "id": 272624140,
        "sender_full_name": "David Richey",
        "timestamp": 1645399642
    },
    {
        "content": "<p>Your original question might involve <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_comm\">docs#eq_comm</a></p>",
        "id": 272625118,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645400778
    },
    {
        "content": "<p>I agree, I'm just not sure how to tell it which subexpression to apply the rewrite to. For example, if I do <code>rewrite eq_comm</code>, I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">f.dom</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ev</span>\n</code></pre></div>\n<p>but now I have <code>part.some y = f x</code> on the left which is just as bad</p>",
        "id": 272625612,
        "sender_full_name": "David Richey",
        "timestamp": 1645401396
    },
    {
        "content": "<p>oh, actually, it <em>only</em> did the first occurrence, not both occurrences</p>",
        "id": 272625638,
        "sender_full_name": "David Richey",
        "timestamp": 1645401440
    },
    {
        "content": "<p>\"simp_rw @eq_comm _ y\" might work</p>",
        "id": 272626029,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645401770
    },
    {
        "content": "<p>that does indeed work. I also found <code>conv</code>, and I'm working to understand how I can use it in this case. Is there a way to navigate into an existential in conv mode?</p>",
        "id": 272628177,
        "sender_full_name": "David Richey",
        "timestamp": 1645404421
    },
    {
        "content": "<p><code>conv in (∃ x, _) { sorry }</code> perhaps</p>",
        "id": 272628931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645405255
    },
    {
        "content": "<p>hmmm doesn't seem to work unfortunately</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ev</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">part.eq_some_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives <code>find converter failed, pattern was not found</code></p>",
        "id": 272629944,
        "sender_full_name": "David Richey",
        "timestamp": 1645406452
    },
    {
        "content": "<p>that gave me the idea to try <code>conv in (y = _)</code>, but then doing <code>rewrite eq_comm</code> in that gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">_a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and I'm not quite sure what that's saying</p>",
        "id": 272629977,
        "sender_full_name": "David Richey",
        "timestamp": 1645406515
    },
    {
        "content": "<p>This seems to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ev</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">part.eq_some_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't say I know what I'm doing in <code>conv</code> mode though I just looked up some previous example here from Zulip and copied it. <code>simp_rw</code> seems easier to use I think.</p>",
        "id": 272637359,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645414557
    },
    {
        "content": "<p>(You can do it with the <code>conv in</code> thing Eric showed as well, the trick was using <code>congr</code> and <code>funext</code> to again jump inside the binder I think)</p>",
        "id": 272637419,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645414601
    },
    {
        "content": "<p>If I can <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your question, why do you want this theorem? You should just be able to use the original one by applying <code>.symm</code> whenever you need the equality</p>",
        "id": 272644227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645422598
    },
    {
        "content": "<p>Anyway you can prove this version too using defeq tricks</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f.fn</span> <span class=\"n\">x</span> <span class=\"n\">ev</span> <span class=\"o\">:=</span>\n<span class=\"n\">part.eq_some_iff.trans</span> <span class=\"bp\">$</span> <span class=\"n\">exists_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span>\n</code></pre></div>",
        "id": 272644389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645422735
    },
    {
        "content": "<p>thank you for the suggestions! <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I ultimately wanted this theorem to do a rewrite from <code>y</code> to <code>f.fn x ev</code>. I can of course just rewrite in the other direction (which is what I ended up doing), but I'm also just taking my time and exploring rabbit holes as I come across them :) </p>\n<p>This is what I actually ended up with (absolutely open to comments if you have any!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">iarith</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">iarith</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">:</span> <span class=\"n\">iarith</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_var</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">(</span><span class=\"n\">iarith.var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">σ.fn</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">store_bound_imp_var_bound</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">(</span><span class=\"n\">iarith.var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">exists_ev</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">ev</span><span class=\"o\">,</span> <span class=\"n\">σ.fn</span> <span class=\"n\">v</span> <span class=\"n\">ev</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">part.eq_some_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exists_ev</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">apply_is_n</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"bp\">←</span><span class=\"n\">apply_is_n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iarith_big_steps.abs_var</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272646348,
        "sender_full_name": "David Richey",
        "timestamp": 1645424651
    },
    {
        "content": "<p>indeed, I would write that as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">store_bound_imp_var_bound</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">(</span><span class=\"n\">iarith.var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">part.eq_some_iff.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iarith_big_steps.abs_var</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272646422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645424754
    },
    {
        "content": "<p>haha I will have to look into rcases!</p>",
        "id": 272646471,
        "sender_full_name": "David Richey",
        "timestamp": 1645424786
    },
    {
        "content": "<p>or even better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">store_bound_imp_var_bound</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">σ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">(</span><span class=\"n\">iarith.var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iarith_big_steps.abs_var</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272646491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645424816
    },
    {
        "content": "<p>you might also consider writing the inductive type this way instead of using <code>fn</code> / <code>get</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">:</span> <span class=\"n\">iarith</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_var</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→.</span> <span class=\"n\">int</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">σ</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">iarith_big_steps</span> <span class=\"o\">(</span><span class=\"n\">iarith.var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 272646627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645424956
    },
    {
        "content": "<p>reading the docs for <code>rcases</code>, picking out the relevant parts...</p>\n<blockquote>\n<p>An rcases pattern has the following grammar:</p>\n<ul>\n<li>A name like x, which names the active hypothesis as x.</li>\n<li>The keyword rfl, which expects the hypothesis to be h : a = b, and calls subst on the hypothesis (which has the effect of replacing b with a everywhere or vice versa).</li>\n<li>A tuple pattern ⟨p1, p2, p3⟩, which matches a constructor with many arguments, or a series of nested conjunctions or existentials. For example if the active hypothesis is a ∧ b ∧ c, then the conjunction will be destructured, and p1 will be matched against a, p2 against b and so on.</li>\n</ul>\n</blockquote>\n<p>So would it be correct to say that <code>rcases part.eq_some_iff.1 h with ⟨_, rfl⟩</code> is shorthand for <code>cases part.eq_some_iff.1 h with _ h1, subst h1</code>?</p>\n<p>(by the way, I couldn't get your second rcases example to compile)</p>",
        "id": 272648183,
        "sender_full_name": "David Richey",
        "timestamp": 1645426505
    },
    {
        "content": "<p>you probably missed that I changed the signature of the theorem in the second example</p>",
        "id": 272648262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645426569
    },
    {
        "content": "<p>I did indeed</p>",
        "id": 272648273,
        "sender_full_name": "David Richey",
        "timestamp": 1645426583
    },
    {
        "content": "<p>and yes your desugaring example is correct</p>",
        "id": 272648275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645426584
    },
    {
        "content": "<p>and here what is the \"constructor with many arguments\" that the tuple pattern is matching?</p>",
        "id": 272648308,
        "sender_full_name": "David Richey",
        "timestamp": 1645426633
    },
    {
        "content": "<p>exists</p>",
        "id": 272648318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645426647
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists/src\">src#Exists</a></p>",
        "id": 272648320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645426652
    },
    {
        "content": "<p>thank you very much, Mario, you've been a really great help :)</p>",
        "id": 272648407,
        "sender_full_name": "David Richey",
        "timestamp": 1645426718
    }
]