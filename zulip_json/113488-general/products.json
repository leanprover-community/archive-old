[
    {
        "content": "<p>If I have <code>(a b c : Type) (f : a → b) (g : a → c)</code>, do we have a name or notation for the function mapping <code>x</code> to <code>(f x, g x)</code>?</p>",
        "id": 130544059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532905256
    },
    {
        "content": "<p>We probably don't yet, but Haskell has one, if anyone wants to copy that</p>\n<div class=\"codehilite\"><pre><span></span>&gt; :t (&amp;&amp;&amp;)\n(&amp;&amp;&amp;) :: Arrow a =&gt; a b c -&gt; a b c&#39; -&gt; a b (c, c&#39;)\n&gt; :t snd &amp;&amp;&amp; fst\nsnd &amp;&amp;&amp; fst :: (a, c) -&gt; (c, a)\n</pre></div>\n\n\n<p>where <code>Arrow</code> is an abstraction of functions <a href=\"https://wiki.haskell.org/Arrow_tutorial\" target=\"_blank\" title=\"https://wiki.haskell.org/Arrow_tutorial\">https://wiki.haskell.org/Arrow_tutorial</a></p>",
        "id": 130545155,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532906435
    },
    {
        "content": "<p>For this particular operator, <code>applicative</code> is sufficient: <code>x &amp;&amp;&amp; y = prod.mk &lt;$&gt; x &lt;*&gt; y</code> </p>\n<p>(that is to say, we only need <code>applicative (a b)</code>)</p>",
        "id": 130545270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532906759
    },
    {
        "content": "<p>You're trying to scare me with your notations</p>",
        "id": 130545321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532906851
    },
    {
        "content": "<p>It works pretty well</p>",
        "id": 130545322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532906859
    },
    {
        "content": "<p>What works well? Scaring you or using the notation?</p>",
        "id": 130545369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532906925
    },
    {
        "content": "<p>scaring me</p>",
        "id": 130545371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532906933
    },
    {
        "content": "<p>Oh, good, so my work here is done</p>",
        "id": 130545382,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532906955
    },
    {
        "content": "<p>As far as I know, the definition is not in mathlib so you make it as simple as you need and leave it to others to generalize so that it looks more like Haskell (the generalization has a few stumbling blocks I think)</p>",
        "id": 130545488,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532907124
    },
    {
        "content": "<p>Ok, I may do that. But first I'll sleep. Thanks!</p>",
        "id": 130545538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532907249
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 130545596,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532907378
    },
    {
        "content": "<p>Good night!</p>",
        "id": 130545597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532907384
    },
    {
        "content": "<p>here’s some discussion on the Arrow class: <a href=\"https://www.eyrie.org/~zednenem/2017/07/twist\" target=\"_blank\" title=\"https://www.eyrie.org/~zednenem/2017/07/twist\">https://www.eyrie.org/~zednenem/2017/07/twist</a></p>\n<p>PureScript has opted not to create an Arrow class (see link 3 above); instead it just defined <code>(&amp;&amp;&amp;)</code> using <code>Strong</code> and <code>Category</code>: <a href=\"https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout\" target=\"_blank\" title=\"https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout\">https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout</a></p>",
        "id": 130583767,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1532962038
    },
    {
        "content": "<p>I think in Haskell as well, people think Arrow might not have been the right abstraction</p>",
        "id": 130586742,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532964752
    },
    {
        "content": "<blockquote>\n<p>PureScript has opted not to create an Arrow class (see link 3 above); instead it just defined <code>(&amp;&amp;&amp;)</code> using <code>Strong</code> and <code>Category</code>: <a href=\"https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout\" target=\"_blank\" title=\"https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout\">https://pursuit.purescript.org/packages/purescript-profunctor/4.0.0/docs/Data.Profunctor.Strong#v:fanout</a></p>\n</blockquote>\n<p>Is there actually any implementation anywhere apart from <code>Function</code> <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span> ? But thanks for the information!</p>",
        "id": 130587542,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532965560
    },
    {
        "content": "<p>haha, we can go one step away from Function with Star <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> <a href=\"https://github.com/purescript/purescript-profunctor/blob/v4.0.0/src/Data/Profunctor/Star.purs#L70\" target=\"_blank\" title=\"https://github.com/purescript/purescript-profunctor/blob/v4.0.0/src/Data/Profunctor/Star.purs#L70\">https://github.com/purescript/purescript-profunctor/blob/v4.0.0/src/Data/Profunctor/Star.purs#L70</a> (actually that package has a variety of profunctors, a number of which implement Strong)</p>",
        "id": 130589452,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1532967565
    }
]