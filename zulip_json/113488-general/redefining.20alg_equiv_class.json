[
    {
        "content": "<p>I propose redefining <code>alg_equiv</code> and <code>alg_equiv_class</code> so that they avoid the <code>commutes</code> field, and instead use the <code>map_smul</code> field. The reasoning is as follows: it would be nice to have a unified structure that handles both the unital and non-unital settings simultaneously, much like <code>ring_equiv</code>. However, because of the current <code>commutes</code> field, we are required to have an <code>[algebra R A]</code> hypothesis, which forces <code>A</code> to be unital. Note how my <code>alg_equiv_class'</code> below has much weaker type class assumptions, but when they are strengthened to those of <code>alg_equiv_class</code> they imply it.</p>\n<p>Any objections to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.equiv</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">alg_equiv_class'</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semilinear_equiv_class</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">ring_equiv_class</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv_class'</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">alg_equiv_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">alg_equiv_class'.to_ring_equiv_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 293813757,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660690526
    },
    {
        "content": "<p>Isn't <code>A</code> forced to be unital anyway by extending <code>ring_equiv_class</code>?</p>",
        "id": 293815049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660691279
    },
    {
        "content": "<p>Oh nevermind, <code>ring_equiv_class</code> is less assuming that its name would suggest</p>",
        "id": 293815174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660691345
    },
    {
        "content": "<p>That's because it doesn't have to be <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 293815294,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660691405
    },
    {
        "content": "<p>Sounds like a good plan to me!</p>",
        "id": 293845754,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660720184
    },
    {
        "content": "<p>Would you change <code>alg_hom_class</code> as well?</p>",
        "id": 293847515,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660721102
    },
    {
        "content": "<p>Why not, if the inheritance from <code>non_unital_alg_hom_class</code> would work correctly.</p>",
        "id": 293848528,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660721655
    },
    {
        "content": "<p>No, I'm <em>not</em> changing <code>alg_hom_class</code> as well, because in that case <code>map_one</code> has to be part of the structure, which already forces the algebras to be unital. </p>\n<p>In the equiv case, you don't need to assume <code>map_one</code> because it comes for free from bijectivity and preserving multiplication (see <code>ring_equiv</code>), which is why the unital and non-unital cases can be unified in this context.</p>",
        "id": 293897109,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660743078
    },
    {
        "content": "<p>Although I guess we don't have any sort of unital algebra morphisms for non-associative algebras. We could potentially go with <code>map_smul</code> for <code>alg_hom_class</code> too, in order to fix this problem, and then just make <code>commutes</code> a theorem for things of this class with strong enough type class assumptions.</p>",
        "id": 293900788,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660744316
    }
]