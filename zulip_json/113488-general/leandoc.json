[
    {
        "content": "<p>Now that the perfectoid project compiles, we want to start beautifying it. Parts will probably displayed with Patricks lean-formatter. However, we would also like to generate hyperlinked and syntax-highlighted docstringified webpages from the source code. This should be done by a tool called <code>leandoc</code> that doesn't yet seem to exist.<br>\nI invite everyone to point to their secret repos where they have started working on this tool.<br>\nAlternatively you may also write a braindump of all the bugs and features that you would like to have in future <code>leandoc</code>.<br>\nLet's see how fast we can throw something together!</p>",
        "id": 164534649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556627685
    },
    {
        "content": "<p>There is no book which defines a perfectoid space. All we have is research articles and random pdfs written by graduate students and post-docs who were typically preparing for a talk they had to give on perfectoid spaces. It would be great to turn the Lean definition into a useful resource. I can write the LaTeX around the definition (as could Johan) but some sort of cool way of jumping around between definitions would be brilliant.</p>",
        "id": 164536497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556629292
    },
    {
        "content": "<p>Here was something I had in mind: with the new Lean 4 parser, it should be theoretically possible to extend the tactic monad with state to capture the tactics being invoked (the tactics are erased after they are parsed in Lean 3).<br>\nThis would look like a tactic class <code>begin [foo] ... end</code>, which would parse tactics as they are written and docstrings as well to produce Patrick's webpage-like output.<br>\nI don't know to what extent this is possible but.</p>",
        "id": 164562418,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1556648478
    },
    {
        "content": "<p>I hope all this will be much easier with Lean 4. But we can already ask Lean information about each and every position in the file.</p>",
        "id": 164562781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556648684
    },
    {
        "content": "<p>It's only a matter of patience to write a version of format_lean that display information about everything</p>",
        "id": 164562849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556648723
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/objects.py#L369-L372\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/objects.py#L369-L372\">https://github.com/leanprover-community/format_lean/blob/master/src/format_lean/objects.py#L369-L372</a> you can see python asking for the tactic state at start and end of each proof line. You can replace that with a loop on each character in the line, recording everything (with shared information when the state is constant) and add request for definitions</p>",
        "id": 164563169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556648904
    },
    {
        "content": "<p>For such a leandoc tool, do you need to know about <code>variable</code> construct? If not, you might already be able to render it from <code>olean</code> files</p>",
        "id": 164563242,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556648956
    },
    {
        "content": "<p>Oh nice! I didn't know you were already this far ahead</p>",
        "id": 164563302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556648993
    },
    {
        "content": "<p>Did you look at my lectures notes?</p>",
        "id": 164563389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556649018
    },
    {
        "content": "<p>No</p>",
        "id": 164563404,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556649030
    },
    {
        "content": "<p><a href=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours4.html\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours4.html\">https://www.math.u-psud.fr/~pmassot/enseignement/math114/cours4.html</a></p>",
        "id": 164563425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556649044
    },
    {
        "content": "<p>It does display tactic state</p>",
        "id": 164563433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556649050
    },
    {
        "content": "<p>That's so cool!</p>",
        "id": 164563568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556649132
    },
    {
        "content": "<p>Do you just want to parse comment-enhanced leandoc specific regions and \"attach\" these to their closest Lean construct? Or do you actually want to parse Lean as well to attach properly scoped variables, constants, namespaces, etc? Or do you want to parse leandoc specific comment regions with combination of querying Lean server for additional information about the construct the region in question pertains to (I have no clue what information is available this way) - this could dodge quite a bit of scope/dependency resolution and parsing. Is it still the case that Lean 3 grammar is parser-specified and there's no EBNF - or was I dreaming this?</p>",
        "id": 164581825,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1556662912
    },
    {
        "content": "<p>We want to emulate the experience you have in VScode.</p>",
        "id": 164582038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556663080
    },
    {
        "content": "<p>But with added LaTeX</p>",
        "id": 164582384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556663363
    },
    {
        "content": "<p>Eschew leandoc-specific annotations altogether?</p>",
        "id": 164582410,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1556663394
    },
    {
        "content": "<p>Kevin, LaTeX might have to wait. If we can get it to work in HTML, we can give LaTeX a go but it's truly no fun to work with so a first prototype will have to omit it</p>",
        "id": 164582486,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556663443
    },
    {
        "content": "<p>aah, the realities of real life.</p>",
        "id": 164584542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556665322
    },
    {
        "content": "<p>fwiw i have a start on this, which currently just dumps text out... I will try and get into some format, and uploaded</p>",
        "id": 164638146,
        "sender_full_name": "matt rice",
        "timestamp": 1556729933
    },
    {
        "content": "<p>Be aware of Patrick's leancrawler...</p>",
        "id": 164638170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556729966
    },
    {
        "content": "<p>But, yes, I'm excited to hear this, and I'll cheer you on. (And if I can find some time I'll also contribute... but my todo list is growing exponentially the last 3 weeks...)</p>",
        "id": 164638260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556730022
    },
    {
        "content": "<p>I was using Mario's olean-rs, because it makes it simple to do so</p>",
        "id": 164638457,
        "sender_full_name": "matt rice",
        "timestamp": 1556730178
    },
    {
        "content": "<p>Be aware of my fork. I've added some features</p>",
        "id": 164639457,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556731116
    },
    {
        "content": "<p>maybe make a PR?</p>",
        "id": 164640699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556732091
    },
    {
        "content": "<p>Done</p>",
        "id": 164640891,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556732211
    },
    {
        "content": "<p>I'm really puzzled. How do you use olean-rs, appart from listing imports?</p>",
        "id": 164640929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556732238
    },
    {
        "content": "<p>Do you write rust code, or can you use the dump output in any way?</p>",
        "id": 164640940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556732253
    },
    {
        "content": "<p>I write Rust code</p>",
        "id": 164641121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556732379
    },
    {
        "content": "<p>Ok. I can see this tool was designed from the bery beginning to make sure mathematicians stay where they belong, and don't interfere with software development.</p>",
        "id": 164641476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556732567
    },
    {
        "content": "<p>Same, I added a library thing to my fork here so i just replace the <a href=\"http://main.rs\" target=\"_blank\" title=\"http://main.rs\">main.rs</a> file with documentation specific rust code, (will PR when ready)</p>",
        "id": 164641485,
        "sender_full_name": "matt rice",
        "timestamp": 1556732570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> That is indeed the first goal of the project</p>",
        "id": 164641553,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556732613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143402\">@matt rice</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Maybe we should consider splitting the project into one library and multiple executables</p>",
        "id": 164641933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556732880
    },
    {
        "content": "<p>@Simon Hudon yeah, thats done here afaict all i needed to do was add <a href=\"http://lib.rs\" target=\"_blank\" title=\"http://lib.rs\">lib.rs</a> which adds the pub mod's for various things along side <a href=\"http://main.rs\" target=\"_blank\" title=\"http://main.rs\">main.rs</a>.</p>",
        "id": 164642345,
        "sender_full_name": "matt rice",
        "timestamp": 1556733160
    },
    {
        "content": "<p>Nice! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164642390,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556733195
    },
    {
        "content": "<blockquote>\n<p>Ok. I can see this tool was designed from the very beginning to make sure mathematicians stay where they belong, and don't interfere with software development.</p>\n</blockquote>\n<p>I should hope not. It was written in a sensible language with a strong type system, in as clear a way as I could manage, to document the olean file format and provide a path for further analysis. I'm glad that Matt and Simon are extending it - that's exactly what it was intended for. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Is there something I can do to make this easier? I had to pick some language to write it in, and modern C++ is a mess, Lean 3 is far too slow for this to be practical (but I also wrote it in lean anyway). I am guessing you would prefer Python? That can be done, although the type of the core <code>Modifications</code> type in olean-rs is much of the documentation and that wouldn't transfer so well to Python.</p>",
        "id": 164674177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556762484
    },
    {
        "content": "<p>I wouldn't want to work with Python for this. Rust is not exactly easy to learn but I think the type system helps you do a good job. C++ would make things more difficult than necessary. I think OCaml and Haskell could have been good choices too.</p>",
        "id": 164674461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556762904
    },
    {
        "content": "<p>I can believe the heavy lifting require a heavy language. But if you want regular people to use it then you need binders to a human-oriented language</p>",
        "id": 164690600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556786878
    },
    {
        "content": "<p>you are using a lot of weasel words. What's a \"human oriented language\"? Almost all programming languages are human oriented</p>",
        "id": 164691736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556787941
    },
    {
        "content": "<p>again, you haven't said Python explicitly but I'm assuming that's your preference based on your previous projects. I don't think python is very good for large projects, it's too scripty</p>",
        "id": 164691924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556788095
    },
    {
        "content": "<p>Isn't scripty a weasel word?</p>",
        "id": 164692367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556788527
    },
    {
        "content": "<p>I wonder if there are two different things here. Firstly it would be <em>great</em> to be able to look at Lean code on e.g. my phone's web browser, without having to constantly wonder what the definition of X is -- if I could just click on X instead and then see and then go back, that would be a great step forward for me. Secondly, it would be really interesting -- not just for this community here but broadly for mathematicians, <em>even those who know nothing about Lean</em>, to have some sort of coherent interactive way of exploring what a perfectoid space is. This would be <em>completely new</em> for mathematicians, and some are <em>bound</em> to be interested. These two projects seem related, but don't sound the same to me.</p>",
        "id": 164692369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556788528
    },
    {
        "content": "<p>The fact that python isn't good for large projects is simply refuted by facts</p>",
        "id": 164692447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556788585
    },
    {
        "content": "<p>And saying that olean-rs is a large project is...</p>",
        "id": 164692458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556788605
    },
    {
        "content": "<p>Python is an excellent choice for interactively playing with a bunch of data. I can imagine losing a lot of time while playing with some Jupyter notebook inspecting all sorts of data that we extract from mathlib.</p>",
        "id": 164700407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556797289
    },
    {
        "content": "<p>Johan, you're pointlessly damaging your keyboard. They are the aristocracy of programming. You could as well advertise numerical analysis to Langlands program people...</p>",
        "id": 164701519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556798538
    },
    {
        "content": "<p>In this regard one thing I suppose I was excited about yesterday, is a rust library for persistent data structures, <a href=\"https://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Persistent_data_structure\">https://en.wikipedia.org/wiki/Persistent_data_structure</a> (I haven't looked at Mario's Trie implementation yet to see if it is persistent), but in theory you could go through the git history of something like the perfectoid project and inspect the data, and how it changes over time...  That is actually probably painful though with the way i've built it since it would mean compiling each commit... But it would be immediately useful in that something like mathlib you could have the tree for file x, and file y, and all the data would be shared with that of the tree for all of mathlib.</p>",
        "id": 164701566,
        "sender_full_name": "matt rice",
        "timestamp": 1556798596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Something like <a href=\"https://press.princeton.edu/titles/9491.html\" target=\"_blank\" title=\"https://press.princeton.edu/titles/9491.html\">https://press.princeton.edu/titles/9491.html</a>?</p>",
        "id": 164701936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556798988
    },
    {
        "content": "<p>Johan, those people are traitors, like Kevin or William Stein</p>",
        "id": 164702113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556799139
    },
    {
        "content": "<p>anyway...</p>",
        "id": 164702136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556799180
    },
    {
        "content": "<p>Anyhow, I hope that perhaps <a href=\"https://docs.rs/inline-python/0.2.0/inline_python/\" target=\"_blank\" title=\"https://docs.rs/inline-python/0.2.0/inline_python/\">https://docs.rs/inline-python/0.2.0/inline_python/</a> may help, the primary reason I did it this way was because I knew it would be a) simple to implement b) simple to install, a) was important since it is highly likely lean 4 puts a clock on it's self life.</p>",
        "id": 164702152,
        "sender_full_name": "matt rice",
        "timestamp": 1556799191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Feel free to have those tantrums in private. Nobody is obliged to choose Python to pretend like your only choice of language is a good one in every circumstances. If you don't want to learn a new language don't contribute. We'll live.</p>",
        "id": 164707648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556803673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143402\">@matt rice</span> do you already have a repo that we can watch/follow/stargaze?</p>",
        "id": 164708334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556804180
    },
    {
        "content": "<p>not yet, will work on that now, even though it has some issues... I was mostly waiting until I got command line arguments stablized so it wasn't changing on people, but i'll probably doing that last.</p>",
        "id": 164708722,
        "sender_full_name": "matt rice",
        "timestamp": 1556804483
    },
    {
        "content": "<p>Simon, I'm not 100% sure what you mean because I had to look up the word \"tantrum\". But I'm not angry. We mathematicians are experts at snobbery, we don't have any problem with that. I also have no problem with the idea to learn a new computer language: Lean is certainly very different from everything I knew before (even including my OCAML lectures 20 years ago). In this particular case I don't see any reason to learn Rust which is marketed as a \"highly concurrent and memory safe language\" since, up to now, I was never faced with any concurrency or memory management issue. But I'd very happy to use anything you or Mario will build using this language. Simply I won't be able to help in any way.</p>",
        "id": 164710615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556805948
    },
    {
        "content": "<p>By the way, I don't mean you need any help from me or anyone else.</p>",
        "id": 164710929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556806201
    },
    {
        "content": "<p>@Johan Commelin <a href=\"https://github.com/ratmice/lumpy-leandoc\" target=\"_blank\" title=\"https://github.com/ratmice/lumpy-leandoc\">https://github.com/ratmice/lumpy-leandoc</a> theres 2 branches the command line &amp; a TeX one w/ issues</p>",
        "id": 164712699,
        "sender_full_name": "matt rice",
        "timestamp": 1556807397
    },
    {
        "content": "<p>Ooh, don't worry about TeX output</p>",
        "id": 164713108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556807677
    },
    {
        "content": "<p>I think what Kevin really meant, when he was talking about LaTeX, was that he wanted to use TeX in the comments, and have MathJaX render it in the generated html files. But maybe I misunderstood him.</p>",
        "id": 164713174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556807728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143402\">@matt rice</span> Thanks for the efforts so far!</p>",
        "id": 164713194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556807741
    },
    {
        "content": "<p>I would guess that it is easier to generate HTML than to generate TeX, right?</p>",
        "id": 164713321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556807817
    },
    {
        "content": "<p>Yeah, I just really like/prefer tex output, and generally know nothing about html stuff , the TeX output is almost there except some long function names, and the blasted missing unicode symbols.  But yes, HTML is probably easier for someone who knows anything about it.</p>",
        "id": 164713525,
        "sender_full_name": "matt rice",
        "timestamp": 1556807946
    },
    {
        "content": "<p>I certainly agree that the TeX output will look better from a typographic point of view. But it doesn't allow for too much interaction. That's why I prefer html output in this case. But that shouldn't stop you from generating beautiful TeX</p>",
        "id": 164713677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556808036
    },
    {
        "content": "<blockquote>\n<p>I think what Kevin really meant, when he was talking about LaTeX, was that he wanted to use TeX in the comments, and have MathJaX render it in the generated html files. But maybe I misunderstood him.</p>\n</blockquote>\n<p>So perhaps beneath mention, but in regards to this, I'm at the point where I need to institute some format for this, e.g. I need to know which parts of the comment (or in whole) need to be TeX escaped, and which should not be, my thoughts were to control this by adding a <strong>docstring_format</strong> key to <em>leanpkg.toml</em> and optionally some magic string in the comment itself, to allow for competing ideas and/or future flexibility.  I haven't tried yet, but it looks like leanpkg itself will just ignore this.</p>",
        "id": 164933300,
        "sender_full_name": "matt rice",
        "timestamp": 1557085526
    },
    {
        "content": "<p>Anyhow, after that i'll try and run it through <a href=\"https://dlmf.nist.gov/LaTeXML/\" target=\"_blank\" title=\"https://dlmf.nist.gov/LaTeXML/\">https://dlmf.nist.gov/LaTeXML/</a> which seems to use MathML rather than MathJax the results on <a href=\"https://dlmf.nist.gov/\" target=\"_blank\" title=\"https://dlmf.nist.gov/\">https://dlmf.nist.gov/</a> look pretty good to me</p>",
        "id": 164933793,
        "sender_full_name": "matt rice",
        "timestamp": 1557086331
    },
    {
        "content": "<p>Noooo!</p>",
        "id": 164934525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557087557
    },
    {
        "content": "<p>Going from Lean to HTML through LaTeX seems completely masochistic, especially if you add perl on top of that. And MathML is dead, after a very long battle to get born.</p>",
        "id": 164934583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557087623
    },
    {
        "content": "<p>Could you explain again why you want to go to LaTeX first?</p>",
        "id": 164934601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557087679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I was just looking at that and yeah, perl is pretty terrible, I figured that as far as the comment format stuff It should in theory need much the same for extracting MathJax.  When working in groups it is often nice to upgrade in sync, and referencing documentation on the web generally reflects the most current version, it's nice as well when I have my tablet and no Wifi...</p>",
        "id": 164935887,
        "sender_full_name": "matt rice",
        "timestamp": 1557089698
    },
    {
        "content": "<p>What's the problem you see in the approach I use in <code>format_lean</code>?</p>",
        "id": 164935906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557089761
    },
    {
        "content": "<p>Nothing in particular, I had hoped to show that it could be integrated with the lean supported doc-strings, for e.g. REPL/VSCode integration and the like eventually,  So the lack of lean's awareness of it I would say is the issue.</p>",
        "id": 164936030,
        "sender_full_name": "matt rice",
        "timestamp": 1557089920
    },
    {
        "content": "<p>What you describe sounds like a Lean 4 target</p>",
        "id": 164936047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557089955
    },
    {
        "content": "<p>All this should be much easier with the Lean 4 parser</p>",
        "id": 164936049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557089972
    },
    {
        "content": "<p>because we will have much more access to information</p>",
        "id": 164936065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090002
    },
    {
        "content": "<p>Right, which was why i was trying to do it as simply as possible, I imagine we need a doc generator for lean 3 because I imagine mathlib is going to be stuck on it for a while... I also imagine lean 4 is going to use the doc_strings format, and so it'd be nice to get something formatting these before we go on a big effort towards documenting things so we can format them nicely as we write.</p>",
        "id": 164936206,
        "sender_full_name": "matt rice",
        "timestamp": 1557090221
    },
    {
        "content": "<p>Note that many docstrings are already formatted using markdown</p>",
        "id": 164936256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090269
    },
    {
        "content": "<p>Markdown+TeX is a really sweet combination as long as you don't require a fancy layout</p>",
        "id": 164936282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090333
    },
    {
        "content": "<p>and it has the advantage that you get many Markdown to HTML formater that can be chained with Mathjax to handle math mode</p>",
        "id": 164936349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090374
    },
    {
        "content": "<p>Also note that, although it's not much used, you can do author-side mathjax and ship pure HTML(+SVG) if you don't like waiting for mathjax to render a webpage</p>",
        "id": 164936364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090424
    },
    {
        "content": "<p>Right, It's these that i'm having trouble with, in particular the unicode symbols outside of math-mode support is terrible</p>",
        "id": 164936375,
        "sender_full_name": "matt rice",
        "timestamp": 1557090473
    },
    {
        "content": "<p>support by what? LaTeX?</p>",
        "id": 164936424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090507
    },
    {
        "content": "<p>yeah.</p>",
        "id": 164936427,
        "sender_full_name": "matt rice",
        "timestamp": 1557090515
    },
    {
        "content": "<p>Yes, even modern TeX compilers like <code>xelatex</code> or <code>lualatex</code> have trouble with that</p>",
        "id": 164936442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090549
    },
    {
        "content": "<p>TeX is simply too old <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 164936445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557090565
    },
    {
        "content": "<p>Yeah, one of the issues i'm having is I built a big character fallback list, to redirect to math fonts, but then TeX tries to be helpful when it noticed specific characters that look like an equation so it tries to enter math mode, but then can't figure out where to stop it.</p>",
        "id": 164937216,
        "sender_full_name": "matt rice",
        "timestamp": 1557091734
    },
    {
        "content": "<p>Anyhow, thanks for the pushback on LaTeXML, i don't really need to be jumping down unwanted rabbit holes...</p>",
        "id": 164937234,
        "sender_full_name": "matt rice",
        "timestamp": 1557091781
    },
    {
        "content": "<p>So, I've done an initial release, <a href=\"https://github.com/ratmice/lumpy-leandoc\" target=\"_blank\" title=\"https://github.com/ratmice/lumpy-leandoc\">lumpy-leandoc</a><br>\nExample output can be seen <a href=\"https://gist.github.com/ratmice/29b869369ec02232b80dce3498a4c0b4\" target=\"_blank\" title=\"https://gist.github.com/ratmice/29b869369ec02232b80dce3498a4c0b4\">here</a></p>\n<p>I haven't tried it yet on windows yet expect to do that soon.<br>\nstill things that need doing, but somewhat presentable.</p>",
        "id": 168104711,
        "sender_full_name": "matt rice",
        "timestamp": 1560484446
    }
]