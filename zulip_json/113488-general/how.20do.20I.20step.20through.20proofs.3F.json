[
    {
        "content": "<p>I want to be able to step through the type checker on a proof the same way I could step through the execution of a program in a debugger. When reading a proof on paper, there is uncertainty about what exactly is going on and the meaning of symbols. In principle, the benefit of computer proofs is that this ambiguity goes away. I've been trying to understand the proofs in mathlib. For instance, the proof that sqrt(2) is irrational, and the proof that the reals are uncountable. I have VSCode setup with lean, and see the goal outputs and types when I put my cursor at places in these proofs. I'm finding that I'm still largely guessing at what each line is doing. In the end it seems no different than reading a proof on paper. I'm wondering if Lean provides any additional debugger tools that let me step through every single step the type checker goes through?</p>",
        "id": 191178953,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1584654092
    },
    {
        "content": "<p>Perhaps <code>#explode</code> might help break the proof down a bit more</p>",
        "id": 191188797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584661749
    },
    {
        "content": "<p>If proofs are written in tactic mode then it's easy to step through them. If they're in term mode, or in tactic mode but with semicolon separators, then it's harder but you can often find out more by deleting terms and replacing them with a <code>_</code>, which can sometimes persuade lean to tell you the type of the term which is supposed to go in the hole.</p>",
        "id": 191207489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584687755
    },
    {
        "content": "<p>My understanding of the question is that he is not happy with the level of detail provided by tactic proofs</p>",
        "id": 191208691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584689396
    },
    {
        "content": "<p><code>#explode</code> is helpful, but it is not interactive. I have to manually explode every definition used in the proof. Yes I wish it were possible to step through tactic meta programming, as well as see the proof checker state at every step, analogous to seeing all the local variable state in a debugger. That would at least allow me to figure out exactly what any line of code does in principle, though it may be very tedious.</p>",
        "id": 192135361,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585419627
    },
    {
        "content": "<p>When is Metamath proof explorer getting ported to Lean? :)</p>",
        "id": 192135662,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585420115
    },
    {
        "content": "<p>This is a good question; I don't know how to reasonably support an explorer type interface to <code>#explode</code> using the tactic / vscode tricks available to us in lean. We could always generate tens of thousands of html files like metamath does, but I think it would be much more appropriate for lean to have some pull based API where the pages are only constructed as they are requested.</p>",
        "id": 192144997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585435244
    },
    {
        "content": "<p>Is there any thought being given to adding the kind of debugger I'm describing to lean in the future?</p>",
        "id": 192145518,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585436077
    },
    {
        "content": "<p>I don't understand what this hypothetical feature does</p>",
        "id": 192145611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585436206
    },
    {
        "content": "<p>I suppose there are two features:<br>\n1) A debugger to step through tactic metaprogramming would be like a typical code debugger, if i understand the language correctly.<br>\n2) I think what I'm asking for is to be able to step through the execution of the proof checker, and have each step in that execution be tied to some position in user-facing code, i.e. any lean code involved in the proof (e.g. mathlib definitions, axioms, theorems, etc). Like a debugger, I would also want the checker state to be surfaced somehow, so that I can see what the checker sees. I don't have much of an understanding of the inner workings of the proof checker, so I don't know to what extent this is feasible.</p>",
        "id": 192185703,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585503908
    },
    {
        "content": "<p>Two major difficulties with 2):</p>\n<ul>\n<li>In practice the proof checker (I assume this means the kernel) takes many, many more \"steps\" than you would care to follow. You would need to somehow find the steps you're interested in, but this is probably a meaningless concept, because:</li>\n<li>Tactics, especially \"higher-level\" ones such as <code>simp</code> or <code>ring</code>, can produce proofs where even the proof term itself is essentially not comprehensible, let alone the process of checking the proof term. There simply is no more comprehensible layer below the level of these tactics. (That's not to say such a layer could not exist, just that it does not exist with the way these tactics are implemented currently.)</li>\n</ul>\n<p>I think there is a fallacy here that if you have access to more detail, it will give you greater understanding of what is happening. That is not necessarily the case when the amount of information is overwhelming and where the nature of the information is not more humanly accessible than the original form.</p>",
        "id": 192199597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585524737
    },
    {
        "content": "<p>It would help to have some examples of what you would hope to get out of such a tool.</p>",
        "id": 192199604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585524750
    },
    {
        "content": "<p>For example if you're completely new to lean and you want to understand proofs of things like <code>p ∧ (q ∧ r) ↔ (p ∧ q) ∧ r </code>, that's a different matter.</p>",
        "id": 192199616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585524828
    },
    {
        "content": "<p>But no amount of tracing the type checking of <code>quadratic_reciprocity</code> is going to tell you why quadratic reciprocity is true.</p>",
        "id": 192199760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585525059
    },
    {
        "content": "<p>Needless to say, I beg to differ. While the way in which lean sees these proofs is not readily accessible to human readers, this is more a presentation issue than anything else. I strongly believe that it is important to retain some connection to what is happening at the low level. If you give that up, the proof checker starts to fall into \"magic\" territory, and there is no longer a reason to believe in its trustworthiness</p>",
        "id": 192200232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585525905
    },
    {
        "content": "<p>At the very least, there is an abstract formalism associated with lean (c.f. my thesis), and it should be possible to present any lean term as a proof in that system</p>",
        "id": 192200291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585525986
    },
    {
        "content": "<p>Sure, it's just that quadratic reciprocity will be incomprehensible to a human if you look at it that way.</p>",
        "id": 192200299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585526012
    },
    {
        "content": "<p>currently we aren't there yet, because there is no way to trace definitional equality proofs</p>",
        "id": 192200300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526012
    },
    {
        "content": "<p>You're much better off reading a book.</p>",
        "id": 192200306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585526033
    },
    {
        "content": "<p>It is possible that the proof of quadratic reciprocity has gone past what people can read, but I would submit that if this is the case then it's a bad proof</p>",
        "id": 192200355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526055
    },
    {
        "content": "<p>I'm very confused by all of this!</p>",
        "id": 192200367,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526070
    },
    {
        "content": "<p>There is no reason why a proof of quadratic reciprocity should be incomprehensible</p>",
        "id": 192200371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526089
    },
    {
        "content": "<p>even in full formal detail</p>",
        "id": 192200375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526099
    },
    {
        "content": "<p>If you look at a metamath proof, it is probably more than one would care to write by a factor of about 10 or so, but not more than that. This is within the range of human understanding</p>",
        "id": 192200426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526163
    },
    {
        "content": "<p>All I'm saying is that the proof you actually write in the proof assistant is more comprehensible than what you get by trying to examine, say, the proof term generated by the tactic. Isn't that the purpose of a high-level proof language?</p>",
        "id": 192200438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526209
    },
    {
        "content": "<p>the thing is, proof terms are not a good way to present proofs</p>",
        "id": 192200444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526226
    },
    {
        "content": "<p>because what people actually care about are the types</p>",
        "id": 192200447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526235
    },
    {
        "content": "<p>Right, but this is what was asked for.</p>",
        "id": 192200449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526238
    },
    {
        "content": "<p>Well, not the term per se, but something even worse.</p>",
        "id": 192200460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526256
    },
    {
        "content": "<p>something even better</p>",
        "id": 192200464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526265
    },
    {
        "content": "<p>Well, maybe we have different interpretations of the question then.</p>",
        "id": 192200470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526280
    },
    {
        "content": "<p>proof terms without the typing information requires the user to hold the whole context in their head at all times, which requires ridiculous attention to detail</p>",
        "id": 192200509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526297
    },
    {
        "content": "<p>you can't jump around in a proof like that</p>",
        "id": 192200517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526315
    },
    {
        "content": "<p>which is what humans do</p>",
        "id": 192200519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526322
    },
    {
        "content": "<p><code>#explode</code> tries to fill that gap by presenting the types of each intermediate term, and mostly hiding the proof term itself</p>",
        "id": 192200531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526359
    },
    {
        "content": "<p>but it still has nothing to say about definitional unfolding</p>",
        "id": 192200535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526378
    },
    {
        "content": "<p>I think the question asked is probably not the real intended question anyways</p>",
        "id": 192200539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526398
    },
    {
        "content": "<p>and I think you're trying to answer the real intended question</p>",
        "id": 192200584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526408
    },
    {
        "content": "<p>Or maybe not. I have no idea.</p>",
        "id": 192200614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526482
    },
    {
        "content": "<p>I think that <code>#explode</code> has some limitations since it is non-interactive, and a more debugger like interface would be good, but there are a lot of unanswered UI and implementation details to that</p>",
        "id": 192200626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526516
    },
    {
        "content": "<p>One maybe easy option would be a tactic-ifier that takes any lean proof (as a term), and reconstructs an <code>apply</code> based tactic proof of it</p>",
        "id": 192200679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526586
    },
    {
        "content": "<p>then you could use the goal view to see all the intermediate states</p>",
        "id": 192200683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585526603
    },
    {
        "content": "<p>That sounds really cool.</p>",
        "id": 192200731,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585526655
    },
    {
        "content": "<p>I was responding to the statement of 2). I still am fairly certain that given a tactic mode proof, there is no amount of visibility into things which actually currently happen during the processing of that proof that will give a greater understanding of what is happening in the proof than to just step through the tactic steps and watch the goal window.</p>",
        "id": 192200771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526733
    },
    {
        "content": "<p>maybe with some rare exceptions for tactics like <code>solve_by_elim</code> that tend to produce comprehensible proofs</p>",
        "id": 192200820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585526771
    },
    {
        "content": "<p>Many tactics are too high level to be able to follow how the goal changed</p>",
        "id": 192201348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527785
    },
    {
        "content": "<p>And this will only get worse as tactics improve</p>",
        "id": 192201354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527823
    },
    {
        "content": "<p>if I see a proof <code>by magic</code> then following your approach I have no recourse but to just believe</p>",
        "id": 192201397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527855
    },
    {
        "content": "<p>I think the original question is based on a faulty analogy. If we pretend proofs are like programs then stepping through the checking of a proof is like stepping through the compilation of a program. This is not a good way to try to understand a program. (It might be a good way to debug your compiler.)</p>",
        "id": 192201401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585527870
    },
    {
        "content": "<p>The computer says it's OK so it's OK. I can completely understand what <code>ring</code> is doing and I have no interest in learning about horner form.</p>",
        "id": 192201422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585527895
    },
    {
        "content": "<p>It's amusing that you say that because I find the analogy extremely accurate</p>",
        "id": 192201423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527898
    },
    {
        "content": "<p>That's because you're not a mathematician</p>",
        "id": 192201430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585527908
    },
    {
        "content": "<p>Right, but the proposed approach is not necessarily going to help with those mystery tactics either. That is what I tried to address with my parenthetical sentence.</p>",
        "id": 192201431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585527911
    },
    {
        "content": "<p>so you think about maths in a different way. If you want to actually get somewhere you have to learn to fly.</p>",
        "id": 192201433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585527923
    },
    {
        "content": "<p>Which analogy is accurate?</p>",
        "id": 192201437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585527931
    },
    {
        "content": "<p>It's not so much stepping through the compilation but rather stepping through the low level assembly that comes out the other end</p>",
        "id": 192201439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527942
    },
    {
        "content": "<p>stepping through the compilation would be debugging the tactic itself</p>",
        "id": 192201480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585527971
    },
    {
        "content": "<p>I still think you're reading the question as what you want it to be and not as what it actually says.</p>",
        "id": 192201482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585527980
    },
    {
        "content": "<p>that's quite possible. I have strong views on this topic and they may be clouding my reading</p>",
        "id": 192201485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585528004
    },
    {
        "content": "<blockquote>\n<p>2) I think what I'm asking for is to be able to step through the execution of the proof checker, and have each step in that execution be tied to some position in user-facing code, i.e. any lean code involved in the proof (e.g. mathlib definitions, axioms, theorems, etc). Like a debugger, I would also want the checker state to be surfaced somehow, so that I can see what the checker sees.</p>\n</blockquote>\n<p>I think it would be hard to relate the steps in the checker (the kernel) to code written in the source text (the tactics), because of the two step compilation process. However, it should be possible to relate tactics to bits of the proof term, and bits of the proof term to checker steps</p>",
        "id": 192201544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585528162
    },
    {
        "content": "<p>It's also probably true that what you want the question to be is the same as what the asker wanted the question to be, but without the original asker here we can't really know.</p>",
        "id": 192201551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585528184
    },
    {
        "content": "<p>The recently added <code>show_term</code> tactic will show an individual tactic's contribution to the resulting proof term</p>",
        "id": 192201619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585528267
    },
    {
        "content": "<p>Another thing along these lines that would be neat is to make <code>simp</code> or <code>rw</code> (with many rewrite steps) output a <code>calc</code>-style proof</p>",
        "id": 192201621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585528274
    },
    {
        "content": "<p>I don't really know whether that's trivial or difficult.</p>",
        "id": 192201667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585528343
    },
    {
        "content": "<p>I think a better primitive than <code>calc</code> would be a <code>conv</code> proof where the only steps are descending into subterms and transitivity</p>",
        "id": 192201672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585528369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I've done the exercises in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</a> through section 4, and I would understand a tactic-free proof of <code>p ∧ (q ∧ r) ↔ (p ∧ q) ∧ r</code>. The core language without tactics seems to satisfy what I am looking for. I can inspect the type signature of each expression in a proof and understand why the expression has that type signature. This is effectively stepping through a proof.</p>\n<blockquote>\n<p>I think the original question is based on a faulty analogy. If we pretend proofs are like programs then stepping through the checking of a proof is like stepping through the compilation of a program. This is not a good way to try to understand a program. (It might be a good way to debug your compiler.)</p>\n</blockquote>\n<p>Yes no one can understand a program fully by stepping through it. My intention is to use \"stepping through the code\" as a way to quickly ramp up my understanding of the language. But even an experienced user may wish to step through code they are reading to resolve confusions they may have, in lieu of talking to the code's author.</p>\n<p>I agree with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  \"I strongly believe that it is important to retain some connection to what is happening at the low level. If you give that up, the proof checker starts to fall into \"magic\" territory, and there is no longer a reason to believe in its trustworthiness\"  The fact that what an expression does and represents is objective is immensely powerful (over informal mathematics in text), but only if I can actually have the computer tell me what is the case.</p>",
        "id": 196010784,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588367583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> let me give you an example of what I'm trying to do.</p>\n<p>I was looking at <code>irr_sqrt_two</code> in irrational.lean, which calls into <code>irr_sqrt_of_prime</code> which eventually calls into <code>irr_nrt_of_n_not_dvd_multiplicity</code>, which to me looks like a complicated mess. Are you telling me there is no way for me to fast track my understanding of this particular proof? That the tactics involved, with their nuances and idiosyncrasies, need to be fully comprehended through many hours of dedicated study just so I may understand the proof that sqrt(2) is irrational? And even then, I'll be relying on my interpretation of the code, and never get confirmation that what I think is happening is actually the case.</p>\n<p>The fact that I cannot step through tactic metaprogramming exacerbates the situation because I effectively have to internalize the behavior of these tactics through encountering many examples.  This reminds me of deep learning, where the various tools and methods are black boxes and cannot be understood formally, so practitioners and researchers are forced to acquire a heuristic understanding through long-term exposure. That is uncomfortable for me, and mathematics is my refuge from such messiness. It seems that lean is bringing the messiness of complex uninspectable black boxes into mathematics. Then the pedagogical benefits of computer proof checking are lost to me, and I'm not sure of what value lean is to me.</p>",
        "id": 196012544,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588368787
    },
    {
        "content": "<p>You can certainly understand the mathematics behind the proof and you can work your way down if you choose to. This sounds like a very long proof mathematically so the proof term will be gigantic. It will be like reading the machine code translation of a relatively simple python program</p>",
        "id": 196012774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588368920
    },
    {
        "content": "<p>I have no idea what you mean when you call <code>irr_nrt_of_n_not_dvd_multiplicity</code> a complicated mess. It is a natural mathematical statement which can easily be interpreted, and the tactic mode proof is fairly short and natural.</p>",
        "id": 196013198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588369137
    },
    {
        "content": "<p>And you can look at the proof state after each step.</p>",
        "id": 196013248,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588369166
    },
    {
        "content": "<p>Python is not compiled, the analog would be stepping through the python interpreter at the assembly level. Frankly, if there were something screwy going on with the Python language itself that the python debugger can't resolve I might step through the interpreter at the C++ level. And for C++ code, I have indeed stepped through at the assembly level when things were weird. I don't see a reason to prefer machine code over assembly, and I suspect a similar first-pass translation can be done of raw proof code to something somewhat more human readable.</p>",
        "id": 196013263,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588369175
    },
    {
        "content": "<p>Usually every step is obvious for a mathematician.</p>",
        "id": 196013355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588369219
    },
    {
        "content": "<p>All I'm saying is that the mathematical proof has a meaning, and sure you can keep digging and digging until you reach a level where it's just thousands of lines of elementary operations and all overall understanding is lost.</p>",
        "id": 196013392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588369242
    },
    {
        "content": "<p>But if you want to understand this proof you should consult a mathematician, not keep digging</p>",
        "id": 196013533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588369344
    },
    {
        "content": "<p>The tactics are conceptually meaningful and are manipulating mathematical objects in an intuitive way. Each individual step can be examined down to the core but to get an overall understanding of the proof you should first translate it into mathematics</p>",
        "id": 196013725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588369491
    },
    {
        "content": "<p>BTW, studying <code>mathlib</code> proofs is definitely not the best way to learn math. In many cases we don't take the shortest route to an elementary statement but prove a very general version first.</p>",
        "id": 196013880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588369578
    },
    {
        "content": "<p>Yes there are definitely easier ways to prove that the square root of two is irrational! This way has the advantage that you can also prove that the cube root of 691 is irrational with about as much work</p>",
        "id": 196017096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588372028
    },
    {
        "content": "<p>Let me elucidate why I described it as a complicated mess (I don't mean this as a jab at the authors, and I'm sure its very elegant lean code, but I am commenting on my experience as a novice jumping into the deep end).<br>\nLooking at the first line in <code>irrational_nrt_of_n_not_dvd_multiplicity</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/4daa7e8/src/data/real/irrational.lean#L57\" title=\"https://github.com/leanprover-community/mathlib/blob/4daa7e8/src/data/real/irrational.lean#L57\">https://github.com/leanprover-community/mathlib/blob/4daa7e8/src/data/real/irrational.lean#L57</a></p>\n<p><code>rcases nat.eq_zero_or_pos n with rfl | hnpos,</code><br>\nI can see that <code>nat.eq_zero_or_pos</code> has type <code>∀ (n : ℕ), n = 0 ∨ n &gt; 0</code>.<br>\nI can see that the result of this line is to create two goals from <code>nat.eq_zero_or_pos</code>, one where <code>hnpos : n &gt; 0</code> is an added proposition, and the other where <code>n</code> is replaced by <code>0</code> everywhere. <br>\nIt took me a while to realize <code>n</code> was being replaced by <code>0</code> in the first goal, so I was at first confused about what happened to the <code>n = 0</code> case.<br>\nThe more verbose alternative is <code>cases nat.eq_zero_or_pos n with H₁ hnpos, subst H₁,</code> where I can see the goal state with <code>H₁ : n = 0</code> as a proposition and then see the explicit substitution <code>subst H₁,</code></p>\n<p>So now I am curious exactly how <code>rcases</code> does the cases and substitution all in one swoop.  How is <code>rfl</code> contributing here?<br>\nTurns out in <code>rcases_core</code> has special support for <code>rfl</code> as a name.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">`</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_local_and_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span><span class=\"bp\">.</span><span class=\"n\">continue</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>(credit to Jesse Han for helping me figure this out)</p>\n<p>My point is that I wouldn't know why the <code>rcases</code> line works, and I had to rely on having a good eye just to catch exactly the effect of this tactic on the goals state (replacing n with 0 in one place). Not knowing why it works (without help), I would not learn anything about rcases, and I would not be able to use a similarly efficient line in my own proof. Yes I can play around with the line and surrounding code to get a sense for what rcases is doing by trial and error. That is indeed an important complement to stepping through code anyway. But not being able to step through code or get some information about what is going on internally is a handicap that I have to work around. I expect that I'll encounter a similar difficulty for every line in this proof, where I need to guess and check what the objects in the line are doing by carefully reading through their definitions and the goal state information, and hoping for the best.</p>",
        "id": 196017187,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588372119
    },
    {
        "content": "<p>There are just a finite number of tricks which you learn after some practice. I would recommend reading the docs to learn about what tactics do, not the source code! Do you know about the community docs?</p>",
        "id": 196017343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588372280
    },
    {
        "content": "<p>Rcases docs explain what's going on much better than rcases source code</p>",
        "id": 196017367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588372303
    },
    {
        "content": "<p>And reading simple use cases of rcases will teach you more about rcases than just leaping in and trying to understand a complex proof from a standing start.</p>",
        "id": 196017429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588372372
    },
    {
        "content": "<p>By community docs you mean the mathlib docs?<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 196017474,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588372435
    },
    {
        "content": "<p>Yes. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">Here's the doc entry on <code>rcases</code></a>.</p>",
        "id": 196017532,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588372467
    },
    {
        "content": "<p>It does look like we need to add a mention of the way <code>rfl</code> is treated. I actually asked about that myself not too long ago.</p>",
        "id": 196017799,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588372742
    },
    {
        "content": "<blockquote>\n<p>There are just a finite number of tricks which you learn after some practice.</p>\n</blockquote>\n<p>Finite is not very reassuring, haha. Is there a short list of tricks that form a minimum set to get me going? I'm less likely to invest time in learning something if I don't know how deep the rabbit hole goes and what the payoff will be.</p>\n<p>Yes I can read the docs. I'm making a point about pedagogy. The joy of learning a programming language is that you don't need to read the docs ;) Seems like there's a missed opportunity here for hacker types to get interested in pure math and proofs. I know plenty of very intelligent people who view theoretical work as inaccessible to them because of the formalities of reading large amounts of material without any interactivity.</p>",
        "id": 196017900,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1588372825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271222\">Dan Abolafia</span> <a href=\"#narrow/stream/113488-general/topic/how.20do.20I.20step.20through.20proofs.3F/near/196010784\" title=\"#narrow/stream/113488-general/topic/how.20do.20I.20step.20through.20proofs.3F/near/196010784\">said</a>:</p>\n<blockquote>\n<p>Yes no one can understand a program fully by stepping through it. My intention is to use \"stepping through the code\" as a way to quickly ramp up my understanding of the language. But even an experienced user may wish to step through code they are reading to resolve confusions they may have, in lieu of talking to the code's author.</p>\n</blockquote>\n<p>Thanks for clarifying, I had a quite different picture of what you were looking for before. In particular, I didn't realize the main issue is with understanding the language itself.</p>\n<p>If I may offer another analogy, suppose you are reading an ordinary math proof in a language you do not speak well, let's say German. The proof will probably be rather hard to understand, but that is because of the language it is written in. The solution is not to find another proof also in German with more of the details expanded, but instead to consult a German textbook or speaker for help with the parts that are difficult. (Or just see if you can find a translation instead.)</p>\n<p>But now you are saying something like: well if I did have an expanded version of the proof in German, there's a greater chance that my rudimentary German will enable me to pick up some understanding of the argument, and maybe in turn improve my German skills; and there is also sense to this.</p>",
        "id": 196023533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588378544
    },
    {
        "content": "<p>Anyways, long ago you posted two items 1) and 2). 1) was a debugger for the tactic state. Tactics are effectively imperative programs, so this is surely possible in principle (e.g., Haskell has a debugger although I think virtually no one uses it). 2) was about stepping through the \"proof checker\" which I interpreted, perhaps wrongly, as referring to the entire system from tactics to the elaborator to the kernel, and this is a very different beast and probably not profitable to understand in any kind of stepwise fashion.</p>",
        "id": 196024058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588379400
    },
    {
        "content": "<p>This reminds me of the Berkeley PhD language exams, where (depending on some important details like who the examiners were for each language) a viable strategy was sometimes to translate the theorem statements, write your own proofs out (in English), and only then try to read the given proofs in German/French/Russian, and finally try to rephrase your proof along the lines of the given one. The key point being that understanding the maths is often easier than understanding the language.</p>",
        "id": 196137969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588564626
    }
]