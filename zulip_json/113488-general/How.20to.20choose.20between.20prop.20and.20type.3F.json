[
    {
        "content": "<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Palindrome</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"c\">/-</span><span class=\"cm\"> Prop or Type  -/</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sandwich</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Palindrome</span> <span class=\"o\">([</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Prop is useful for proving,  but Type is also useful as it provides a \"View\" of List<br>\n (I learned this concept in type driven development  in idris).<br>\nIf it's only about proving then prop should be used. But it's also possible i need to give a computable function using view. <br>\nI don't think define two version (Prop and Type) of  this inductive type is good practice, but i am also worried that using the latter will affect performance of the program when only type check is needed.<br>\nWhat's the best practice?</p>",
        "id": 317969727,
        "sender_full_name": "Erika Su",
        "timestamp": 1672066795
    }
]