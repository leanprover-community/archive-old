[
    {
        "content": "<p>Can one easily parse some dump of <code>olean-rs</code> to find the declaration that has the longest <code>pp.implicit</code> output?</p>",
        "id": 165016015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174383
    },
    {
        "content": "<p>It might be easier to add it as a feature of <code>olean-rs</code></p>",
        "id": 165016070,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557174439
    },
    {
        "content": "<p>Why do you need that?</p>",
        "id": 165016085,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557174452
    },
    {
        "content": "<p>Part of the goal of the perfectoid project was to find out whether we could write innocent looking math that would hide a huge amount of implicit arguments that Lean would figure out by itself</p>",
        "id": 165016176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174504
    },
    {
        "content": "<p>Now we have the definition, we are looking for example of that phenomenon. Of course we know some of the stuff hiding quite a bit of complexity. But having Lean/Rust-Lean bragging a bit would help</p>",
        "id": 165016224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174556
    },
    {
        "content": "<blockquote>\n<p>Why do you need that?</p>\n</blockquote>\n<p>Statistics... we want statistics</p>",
        "id": 165016255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174595
    },
    {
        "content": "<p>For instance, we wrote at <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/stalk_valuation.lean#L29-L32\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/stalk_valuation.lean#L29-L32\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/stalk_valuation.lean#L29-L32</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">stalk_valuation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">spa</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">stalk_of_rings</span> <span class=\"o\">(</span><span class=\"n\">spa</span><span class=\"bp\">.</span><span class=\"n\">presheaf_of_topological_rings</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf_of_rings</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">value_group</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">valuation</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">valuation_on_completion</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">stalk_to_valuation_field</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 165016346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174648
    },
    {
        "content": "<p>But Lean reads:</p>\n<div class=\"codehilite\"><pre><span></span>noncomputable def spa.presheaf.stalk_valuation : Π {A : Huber_pair} (x : ↥(spa A)),\n  @valuation\n    (@stalk_of_rings ↥(spa A) (spa.topological_space A)\n       (@presheaf_of_topological_rings.to_presheaf_of_rings ↥(spa A) (spa.topological_space A)\n          (spa.presheaf_of_topological_rings A))\n       x)\n    (@comm_ring.to_ring\n       (@stalk_of_rings ↥(spa A) (spa.topological_space A)\n          (@presheaf_of_topological_rings.to_presheaf_of_rings ↥(spa A) (spa.topological_space A)\n             (spa.presheaf_of_topological_rings A))\n          x)\n       (@stalk_of_rings_is_comm_ring ↥(spa A) (spa.topological_space A)\n          (@presheaf_of_topological_rings.to_presheaf_of_rings ↥(spa A) (spa.topological_space A)\n             (spa.presheaf_of_topological_rings A))\n          x))\n    (@valuation.value_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n       (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x)))\n    (@valuation.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n       (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))) :=\nλ {A : Huber_pair} (x : ↥(spa A)),\n  @valuation.comap\n    (@valuation.value_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n       (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x)))\n    (@valuation.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n       (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x))\n       (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n             (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n             x)))\n    (@ring_completion\n       (@valuation.valuation_field\n          (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x))\n          (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x))\n          ↥A\n          (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x)))\n       (@valuation_field.uniform_space\n          (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x))\n          (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x))\n          ↥A\n          (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n          (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                x))))\n    (@comm_ring.to_ring\n       (@ring_completion\n          (@valuation.valuation_field\n             (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             ↥A\n             (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x)))\n          (@valuation_field.uniform_space\n             (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             ↥A\n             (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))))\n       (@ring_completion.comm_ring\n          (@valuation.valuation_field\n             (@Spv.out_Γ ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             (@Spv.linear_ordered_comm_group ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))), x ∈ spa A)\n                   x))\n             ↥A\n             (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n             (@Spv.out ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A))\n                (@subtype.val (@Spv ↥A (@Huber_ring.to_comm_ring ↥A (Huber_pair.Huber_ring A)))\n                   (λ (x : @Spv ↥A (@Huber_ring.to_comm_ring ↥A (Hube\n</pre></div>",
        "id": 165016396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174705
    },
    {
        "content": "<p>There is some repetition of course, but it's still nontrivial</p>",
        "id": 165016481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174763
    },
    {
        "content": "<p>Ok, so let's define what you mean by the longest <code>pp.implicit</code> output. Do you mean a big difference between the term of the definition as displayed with <code>pp.implicit</code> vs the term as displayed without it?</p>",
        "id": 165016495,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557174780
    },
    {
        "content": "<p>I don't think your message then was even complete... It truncated mid <code>Hube</code>.</p>",
        "id": 165016519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557174792
    },
    {
        "content": "<p>You don't know what a <code>Hube</code> is? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 165016543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174817
    },
    {
        "content": "<p>Let me try again</p>",
        "id": 165016549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I would be interested in the maximum ratio, and in just the term that has the absolutely largest <code>pp.implicit</code> output.</p>",
        "id": 165016638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Just pipe it through <code>wc -c</code> before you paste.</p>",
        "id": 165016673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174935
    },
    {
        "content": "<p>Zulip is censoring me!</p>",
        "id": 165016709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557174963
    },
    {
        "content": "<p>It won't censor it if you pipe through <code>wc -c</code></p>",
        "id": 165016754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557174985
    },
    {
        "content": "<p><a href=\"https://www.math.u-psud.fr/~pmassot/implicit\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/implicit\">https://www.math.u-psud.fr/~pmassot/implicit</a></p>",
        "id": 165016763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175001
    },
    {
        "content": "<p>18631</p>",
        "id": 165016773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175013
    },
    {
        "content": "<p>That's quite a beast (-;</p>",
        "id": 165016803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557175034
    },
    {
        "content": "<p>I don't remember using variable <code>â†¥A</code>?</p>",
        "id": 165016808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557175041
    },
    {
        "content": "<p>Your web browser is stupid</p>",
        "id": 165016825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175058
    },
    {
        "content": "<p>tell it it's UTF8</p>",
        "id": 165016829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175063
    },
    {
        "content": "<p>:-)</p>",
        "id": 165016889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557175090
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tar czf implicit.tar.gz implicit.txt <span class=\"o\">&amp;&amp;</span> ls -l implicit.tar.gz\n-rw-r--r-- <span class=\"m\">1</span> jmc jmc <span class=\"m\">947</span> May  <span class=\"m\">6</span> <span class=\"m\">22</span>:40 implicit.tar.gz\n</pre></div>",
        "id": 165016969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557175190
    },
    {
        "content": "<p>Yeah, there is repetition...</p>",
        "id": 165017059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175231
    },
    {
        "content": "<p>Do you want the measure to be independent of the length of the identifiers used?</p>",
        "id": 165017076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557175259
    },
    {
        "content": "<p>Hmm... that probably makes sense</p>",
        "id": 165017093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557175278
    },
    {
        "content": "<p>Simon is in Santa Claus mode, we need to take the opportunity!</p>",
        "id": 165017123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175309
    },
    {
        "content": "<p>Haha :D</p>",
        "id": 165017146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557175322
    },
    {
        "content": "<p>I do like Johan's <code>gzip</code> measure.</p>",
        "id": 165017212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557175372
    },
    {
        "content": "<p>A goal of the project was also to provide a Lean benchmark. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is Lean optimized to handle repeated implicit arguments s in this example?</p>",
        "id": 165017214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175376
    },
    {
        "content": "<p>Yes. Immutable data structures for <code>expr</code> mean that repetitions are just pointers to the same sub-expression.</p>",
        "id": 165017265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557175435
    },
    {
        "content": "<p>Dear Santa,<br>\nWe have been very nice all year long, doing our best to Lean the definition of perfectoid spaces. Could you also bring a nice command translating any expression into a nice graph we could then manipulate into a graph editor? I did a crappy version for my Lean Together talk, but it was ascii art only, and not very flexible.<br>\nPatrick, for the perfectoid team</p>",
        "id": 165017381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175521
    },
    {
        "content": "<p>Thanks Scott!</p>",
        "id": 165017391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175533
    },
    {
        "content": "<p>Speaking of graphs, an approximate dependency graph of the perfectoid space definition can be found at <a href=\"https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png\">https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png\"><img src=\"https://www.math.u-psud.fr/~pmassot/perfectoid_big_labelled.png\"></a></div>",
        "id": 165017682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175769
    },
    {
        "content": "<p>It's approximate because no competent software programmer was involved, and also because I removed <code>core.lean</code> and <code>logic.lean</code> and a couple more files. Otherwise there are too many nodes linked to everybody and automatic layout and cluster coloring gets you only one big ball</p>",
        "id": 165017821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557175875
    },
    {
        "content": "<p>That's a very nice graph!</p>",
        "id": 165018381,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557176309
    },
    {
        "content": "<p>To be honest, this is not my cup of tea</p>",
        "id": 165018388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557176319
    },
    {
        "content": "<p>What is not you cup of tea?</p>",
        "id": 165018424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176348
    },
    {
        "content": "<p>I'm loving the graphs</p>",
        "id": 165018541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176410
    },
    {
        "content": "<p>Generating graphs</p>",
        "id": 165018545,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557176417
    },
    {
        "content": "<p>or doing any kind of graphical stuff</p>",
        "id": 165018555,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557176432
    },
    {
        "content": "<p>Fortunately it's Patrick's cup of tea</p>",
        "id": 165018568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176455
    },
    {
        "content": "<p>Except monad combinators ascii art, right?</p>",
        "id": 165018572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176456
    },
    {
        "content": "<p>I might be able to do that</p>",
        "id": 165018724,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557176566
    },
    {
        "content": "<p>Doing what? Monad combinators? I know you <em>can</em> do that</p>",
        "id": 165019385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557177070
    }
]