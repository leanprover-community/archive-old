[
    {
        "content": "<p>I have a weird behavior with <code>variables</code> and dot notation, in the following snippet</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo_class</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">works_fine</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">bar_class</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class&#39;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar&#39;</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">why_oh_why</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">bar_class&#39;</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I am declaring two structures <code>foo_class.bar_class</code> and <code>foo_class.bar_class'</code> which are exactly the same, except that in the first one the variable <code>G</code> is given right in the structure definition, while in the second one it is defined as a <code>variable</code>. Then dot notation works with the first one (the lemma <code>works_fine</code>, well, works fine), but it doesn't with the second.</p>",
        "id": 200929586,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592246793
    },
    {
        "content": "<p>Also, <code>#print foo_class.bar_class</code> gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">bar_class</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n</code></pre></div>\n\n\n<p>and <code>#print foo_class.bar_class'</code> gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class&#39;</span><span class=\"bp\">.</span><span class=\"n\">bar&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">foo_class</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">foo_class</span><span class=\"bp\">.</span><span class=\"n\">bar_class&#39;</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 200929853,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592246962
    },
    {
        "content": "<p>Note how it is not printed with the same dot notation.</p>",
        "id": 200929945,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592247010
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/lean/issues/334\">lean#334</a> to keep track of it. For now, declaring the variable in the definition is a good enough workaround for me.</p>",
        "id": 200935413,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592250098
    }
]