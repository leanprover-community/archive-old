[
    {
        "content": "<p>As we move on through mathematics we're running into interesting questions about universes. Scott Morrison has set up the category theory library so objects are in universe u and morphisms in universe v, and there are good mathematical reasons to keep the universes separate. This has annoying consequences, which Scott has done his best to work around in Lean 3, but one still has to sometimes write <code>blah.{v}</code> instead of <code>blah</code> just to help Lean on its way with unification.</p>\n<p>Having talked to several other mathematicians about universes really, it has become pretty clear that everyone knows there's some sort of an issue with the set of all sets, but they really don't care about universes. </p>\n<p>I think that what would make mathematicians happy would be the following interface: we just put <code>Type *</code> or <code>Sort *</code> for everything, we let Lean be as polymorphic as possible, we can put <code>blah.{*}</code> or just even <code>blah</code> and tell Lean to do the sensible thing, and at the end of the day if we ever work out the cohomology of the real numbers and it turns out that it is the trivial group in type Type 3 because three times in our argument we took a limit over a thing that wasn't a set, then we don't care but make a mental note that the ZFC people might want to add something here. Is this algorithm going to be available in Lean 4?</p>",
        "id": 182985807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575916917
    },
    {
        "content": "<p>Then the idea could be that the logicians can just slot in extra stuff into the algorithm if they think they can save a universe</p>",
        "id": 182988418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575918480
    },
    {
        "content": "<p>I thought this was the algorithm</p>",
        "id": 182992595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921095
    },
    {
        "content": "<p>if by \"the sensible thing\" you mean inventing a new universe variable for every unresolved metavariable</p>",
        "id": 182992675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921126
    },
    {
        "content": "<p>Although, that doesn't always work, for instance you might have to solve the universe equation <code>max 2 ? = 2</code> and the answer isn't uniquely determined (but putting a variable in there wouldn't work)</p>",
        "id": 182992829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921239
    },
    {
        "content": "<p>You should keep in mind that universe handling is already incredibly rare, so the lean elaborator seems to be working to keep it out of your hair most of the time, like when you just have a bunch of functions to apply. It's only when you actually use universes in a non-default way that they start showing up</p>",
        "id": 182993126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921391
    },
    {
        "content": "<blockquote>\n<p>Having talked to several other mathematicians about universes really, it has become pretty clear that everyone knows there's some sort of an issue with the set of all sets, but they really don't care about universes. </p>\n</blockquote>\n<p>This doesn't give me the least bit of confidence. This is exactly the sort of situation where I expect a theorem prover to get pedantic on me</p>",
        "id": 182993262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921479
    },
    {
        "content": "<p>I'm convinced that category theory is the refuge of people that want to recover the glory days of Frege before Russell's paradox knocked everything down. \"Sure there's a paradox, but it doesn't apply to <em>me</em>, because, mumble mumble kappa-accessible...\"</p>",
        "id": 182994167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575921981
    },
    {
        "content": "<p>I'm less convinced of this. Freek Wiedijk told me earlier this year that his favourite type theory for getting things done was Type-In-Type. When I remarked that this was inconsistent he said that he didn't care because he wasn't going to do anything stupid. I think that this is a very mathematical attitude. Having to write <code>blah.{v}</code> is a bit annoying, I want Lean to make liberal decisions, unify everything, and if it turns out that some cohomology theories live in a different universe to the one mathematicians think they live in because they neglected some subtlety about limits commuting with universes then I wonder whether this really even matters.</p>",
        "id": 183067254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575990068
    },
    {
        "content": "<p>i.e. \"Sure there's a paradox, but it doesn't apply to me, because, mumble mumble kappa-accessible...\"</p>",
        "id": 183067279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575990087
    },
    {
        "content": "<p>a.k.a section 4 of <a href=\"https://arxiv.org/abs/1709.07343\" target=\"_blank\" title=\"https://arxiv.org/abs/1709.07343\">https://arxiv.org/abs/1709.07343</a>, and <a href=\"https://stacks.math.columbia.edu/tag/0007\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/0007\">this chapter of the stacks project</a>. We've got it covered.</p>",
        "id": 183067440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575990162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you know of a construction where you start with some geometric thingy, say a scheme, then you take some cohomology ring (maybe it's graded, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mrow><mi>i</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>H</mi><mn>0</mn></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mi>X</mi><mrow><mo>⊗</mo><mi>i</mi></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_{i \\ge 0} H^0(X, \\omega_X^{\\otimes i})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.259684em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.4064690000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.293531em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>) and then you take Spec or Proj of that. This gives you another scheme. And now maybe there is a some reason you want to iterate this construction, and maybe take a limit over the iterations?</p>",
        "id": 183067800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575990371
    },
    {
        "content": "<p>I don't know exactly of such a construction, but I could imagine it exists.</p>",
        "id": 183067836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575990390
    },
    {
        "content": "<p>That graded ring in my example shows up in the Kodaira dimension. But you don't really iterate it.</p>",
        "id": 183067956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575990459
    },
    {
        "content": "<p>The way I read section 4 of Scholze is this: \"We choose a large cardinal whose existence can prove in ZFC. We then create a \"pseudouniverse\" of stuff of \"size at most kappa\". This is not closed under all universe stuff, but it is closed under the stuff we want, and the answers it spits out when we take limits are \"equal\" to the answers we're going to get if we just don't introduce kappa at all, however they do live one universe closer to the bottom\". I don't see why Scholze should be wasting his time writing these sections, these can be done independently by people who just want to fiddle with some universe framework. Scholze is making a claim that he never does anything \"mathematically unreasonable\" in the 120 pages that follow section 4, and the arguments in there do not really fit in the paper, they should just be set-theoretical asides which are hidden from mathematicians.</p>",
        "id": 183068057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575990519
    },
    {
        "content": "<p>Anyway, if such a construction bumps your universe, then you can only iterate it explicitly in Lean (so you can't parameterize the iterations by ℕ) and in particular you can't take the limit</p>",
        "id": 183068068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575990526
    },
    {
        "content": "<p>The construction you're outlining Johan isn't problematic at all as far as I can see. The new ring lives in the same universe as the old, and if you only take a countable limit or more generally a limit over a set then there are also no set-theoretic problems. The issue comes when computing Cech cohomology by taking a limit over all covers. Then there are tricks to deal with the universe problems in ZFC, but it is not so clear to me that these tricks deserve to be called mathematics, they seem to me to be completely ZFC-specific. I am now wondering whether, if I'm deciding to work in Lean, I should just adopt Lean's type theory and ask the computer scientists nicely to make all the universes go away and then not worry any more, and the ZFC people can worry instead.</p>",
        "id": 183068295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575990680
    },
    {
        "content": "<p>If <code>X : Scheme.{u}</code> then <code>bigplus H(X, omega^i) : Type (u+1)</code> for mathematical definitions of cohomology. Hence the new scheme lives in <code>Scheme.{u+1}</code>.</p>",
        "id": 183070606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575992039
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Do you know of a construction where you start with some geometric thingy, say a scheme, then you take some cohomology ring (maybe it's graded, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mrow><mi>i</mi><mo>≥</mo><mn>0</mn></mrow></msub><msup><mi>H</mi><mn>0</mn></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><msubsup><mi>ω</mi><mi>X</mi><mrow><mo>⊗</mo><mi>i</mi></mrow></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_{i \\ge 0} H^0(X, \\omega_X^{\\otimes i})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.259684em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.4064690000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07847em;\">X</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊗</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.293531em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>) and then you take Spec or Proj of that. This gives you another scheme. And now maybe there is a some reason you want to iterate this construction, and maybe take a limit over the iterations?</p>\n</blockquote>\n<p>Does an infinite sequence of blow ups meet your criteria perhaps? I've definitely seen that happen in a couple of places.</p>",
        "id": 183072129,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1575993027
    },
    {
        "content": "<p>Ha, that might be an example.</p>",
        "id": 183072335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575993181
    },
    {
        "content": "<p>But does the \"mathematical\" definition of blow-up bump universes?</p>",
        "id": 183072423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575993233
    },
    {
        "content": "<p>I think <a href=\"https://en.wikipedia.org/wiki/Blowing_up#Blowing_up_schemes\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Blowing_up#Blowing_up_schemes\">https://en.wikipedia.org/wiki/Blowing_up#Blowing_up_schemes</a> looks fine. This shouldn't bump universes</p>",
        "id": 183072565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575993312
    },
    {
        "content": "<p>Oh I see, it's the cohomology which is bumping the universe, not the limit</p>",
        "id": 183118528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576025951
    },
    {
        "content": "<p>If this is just sheaf cohomology then that won't bump up the limit because the diagram category is small. The issue comes with etale cohomology. I have no doubt that this sort of stuff has been studied to death but I don't know of any reference which uses type theory. Johan's point is I guess that ignoring universes completely can in theory be bad if you do infinitely many bumps up of the universe. So IF YOU WANT TO TAKE THAT LIMIT (and as far as we know you don't) then you need to get a ZFC person in who will start analysing your objects and checking that they're small enough. This just seems to be like a question which one can abstract away from the mathematics</p>",
        "id": 183118721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576026203
    },
    {
        "content": "<p>And I'm not convinced we ever want to take that limit. I have seen infinitely many blowups before, you can get valuations on 2d function fields this way, but the problem is not the infinity, it's the cohomology</p>",
        "id": 183118793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576026264
    },
    {
        "content": "<p>Here's a case where a category theorist took the care to figure out something like you mention of Scholze's ch 4:  <a href=\"https://arxiv.org/abs/1304.5227\" target=\"_blank\" title=\"https://arxiv.org/abs/1304.5227\">https://arxiv.org/abs/1304.5227</a></p>",
        "id": 183244219,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1576144465
    },
    {
        "content": "<blockquote>\n<p>Unfortunately, as soon as one allows the possibility of changing U, one also has to face the fact that universal constructions such as limits or adjoints or Kan extensions could, in principle, depend on the parameter U. We will prove this is not the case for adjoints of accessible functors between locally presentable categories (and hence, limits and Kan extensions), making explicit the idea that \"bounded\" constructions do not depend on the choice of U.</p>\n</blockquote>",
        "id": 183244517,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1576144773
    },
    {
        "content": "<p>Right, this is exactly the sort of which which is going on. Scholze in his Bonn lecture notes comes up with cardinals which aren't universes and again shows that everything he does is independent of the choice. I feel like these things should be demoted to out of the way</p>",
        "id": 183247560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576147557
    }
]