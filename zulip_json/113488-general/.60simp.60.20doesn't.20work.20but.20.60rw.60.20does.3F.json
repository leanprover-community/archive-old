[
    {
        "content": "<p>I'm trying to define <code>smul_empty</code> as a simp lemma, but <code>simp</code> doesn't want to apply it: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">smul_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_empty</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to simplify</span>\n</pre></div>\n\n\n<p>The weird thing is that passing <code>smul_empty</code> to <code>rw</code> is perfectly fine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">smul_empty</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>The issue seems to be with the specific type <code>fin 0 → α</code>: <code>simp</code> works fine if I change <code>fin 0 → α</code> everywhere to any other like <code>false → α</code>, <code>empty → α</code>, <code>fin 1 → α</code>, <code>ℕ → α</code>, <code>α</code>, <code>β</code>, or <code>β → α</code>.</p>\n<p>What is going wrong here?</p>",
        "id": 189504614,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583164726
    },
    {
        "content": "<p>It seems that one of the imports of <code>group_theory.group_action</code> somehow breaks this. The following code works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- import group_theory.group_action</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">f_empty</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f_empty</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>But uncommenting the line <code>import group_theory.group_action</code> breaks the call to <code>simp</code>.</p>",
        "id": 189505351,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583165083
    },
    {
        "content": "<p>The simplified version doesn't have any type class search.</p>",
        "id": 189505445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583165157
    },
    {
        "content": "<p>Scrap that, it has nothing to do with type classes.</p>",
        "id": 189505767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583165310
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">smult</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">smul_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">smult</span> <span class=\"n\">a</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smult</span> <span class=\"n\">a</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_empty</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to simplify</span>\n</pre></div>\n\n\n<p>also fails</p>",
        "id": 189505822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583165344
    },
    {
        "content": "<p>Without any <code>group_action</code> import.</p>",
        "id": 189505905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583165400
    },
    {
        "content": "<p>We may need someone who actually knows something about the simplifier.</p>",
        "id": 189506011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583165437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Your version actually works for me.</p>",
        "id": 189508259,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583166645
    },
    {
        "content": "<p>Ah, you have to <code>import group_theory.group_action</code></p>",
        "id": 189508415,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583166738
    },
    {
        "content": "<p>Now it works here as well.</p>",
        "id": 189508426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583166742
    },
    {
        "content": "<p>After tracing the import graph of <code>group_theory.group_action</code>, it seems that <code>import data.fin</code> is the offender</p>",
        "id": 189508443,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583166757
    },
    {
        "content": "<p>I now what happened. I deleted the <code>group_action</code>  import but still had <code>import tactic</code>.</p>",
        "id": 189508493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583166795
    },
    {
        "content": "<p>This looks like an interesting congruence lemma.</p>",
        "id": 189508635,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583166857
    },
    {
        "content": "<p>How can an import interfere if we don't solve any type class search and use <code>simp only</code>?</p>",
        "id": 189508664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583166885
    },
    {
        "content": "<p>We have a similar issue with subsingletons arguments (think in <code>f ()</code>).  Sometimes the simplifier thinks that \"oh, subsingletons are irrelevant hence we don't need to rewrite them\" and leaves them out of the generated congruence lemma.</p>",
        "id": 189508697,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583166910
    },
    {
        "content": "<p>The thing that breaks it is the following instance:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">tuple0_unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">fin_zero_elim&#39;</span><span class=\"o\">,</span> <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">fin_zero_elim&#39;</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 189508876,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583167021
    },
    {
        "content": "<p>I minimized to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">unique</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">fin</span> <span class=\"n\">nat</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_zero_elim&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">tuple0_unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">fin_zero_elim&#39;</span><span class=\"o\">,</span> <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">fin_zero_elim&#39;</span> <span class=\"o\">}</span>\n\n\n\n<span class=\"c1\">--import group_theory.group_action</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">smult</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">smul_empty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">smult</span> <span class=\"n\">a</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smult</span> <span class=\"n\">a</span> <span class=\"n\">vector_empty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vector_empty</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_empty</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to simplify</span>\n</pre></div>",
        "id": 189509025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583167111
    },
    {
        "content": "<p>Oh, Anne was quicker.</p>",
        "id": 189509037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583167118
    },
    {
        "content": "<p>And indeed putting <code>set_option trace.class_instances true</code> on top of the example proves that Lean searches a subsingleton instance.</p>",
        "id": 189509279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583167261
    }
]