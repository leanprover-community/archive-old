[
    {
        "content": "<p>I was surprised to find that lean claims this is noncomputable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜₂</span> <span class=\"bp\">𝕜₃</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜₃</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜₃</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">σ₂₃</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜₂</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜₃</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ₁₃</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜₃</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">ring_hom_isometric</span> <span class=\"n\">σ₂₃</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_isometric</span> <span class=\"n\">σ₁₃</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₃</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₂₃</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₂₃</span><span class=\"o\">]</span> <span class=\"n\">G</span>  <span class=\"o\">:=</span>\n<span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, do you think we can relax the computability checker somehow to allow this?</p>",
        "id": 275493277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647427707
    },
    {
        "content": "<p>Oh weird; <code>attribute [inline] continuous_linear_map.to_linear_map continuous_linear_map.to_fun</code> fixes it</p>",
        "id": 275494035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647428104
    },
    {
        "content": "<p>Should all structure base class projections be tagged <code>inline</code>?</p>",
        "id": 275494056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647428119
    },
    {
        "content": "<p>Do you expect to be able to <code>#eval</code> linear maps between normed spaces over nondiscrete normed fields? Maybe there are other things more deserving of your attention.</p>",
        "id": 275509616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647437192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I was going to suggest finding well-placed <code>inline</code>s -- that gets things to unfold to the point that the noncomputable stuff appears only as arguments to constructors, and specifically those that are parameters of an inductive type. The VM compiler will automatically inline certain simple definitions, but for others you need the <code>inline</code> annotation.</p>\n<p>It might be interesting to explore being able to tag arguments as being computationally irrelevant. I haven't needed this yet, since <code>inline</code> has been fine for my use: instances with a single computationally relevant field.</p>",
        "id": 275535002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647447073
    },
    {
        "content": "<p>I had a quick look at using <code>inline</code> to make <code>multiset.to_finsupp</code> computable; what I found is that pretty much every <code>def</code> producing a bundled morphism needs to be tagged as <code>inline</code></p>",
        "id": 287704300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656416997
    },
    {
        "content": "<p>I'll make a PR shortly to demonstrate the impact up to <code>add_equiv</code></p>",
        "id": 287705988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656418008
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15028\">#15028</a></p>",
        "id": 287706550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656418388
    }
]