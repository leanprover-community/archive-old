[
    {
        "content": "<p>The following code gives a simple example of a structure Foo, together with a quotient and a subobject. Mathematically, the subobject and quotient should combine in a natural way to give a notion of <code>subFoo_quot</code>, but I can't seem to figure out how to write code that corresponds to this, in a way where this notion interacts naturally with both <code>subFoo</code> and <code>Foo_quot</code>. Can anyone help with this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">S'</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S.f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">S'.f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">S.f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">S'.f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_equivalence</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- easy</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Foo_setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">setoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">is_equivalence</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo_quot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">Foo_setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subFoo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288973843,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1657303435
    },
    {
        "content": "<p>I'm not sure I understand the question. If <code>f : X -&gt; Y</code> is a function between types (for example <code>quotient.mk</code>) then <code>set.image f : set X -&gt; set Y</code> is the induced function from subsets of X to subsets of Y. Is this what you're after?</p>",
        "id": 288975668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657304292
    },
    {
        "content": "<p>I think I've oversimplified the question. Suppose that I add the following. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">small_set_in_Foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">small</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F.f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">F.f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then mathematically, <code>small_set_in_Foo F</code> is a set in <code>α</code> that <code>F.f</code> sends to small values. The definition of <code>small_set_in_Foo</code> is invariant under the equivalence relation <code>r</code>, so there should be a corresponding <code>small_set_in_Foo_quot (Fq : Foo_quot)</code> structure corresponding to a set in <code>α</code> whose elements are sent to small values by <code>Fq</code>, and also, results about <code>small_set_in_Foo F</code> should imply things about <code>small_set_in_Foo_quot ⟦F⟧</code>. But the usual <code>quot.lift_on</code> way to transfer a definition to the quotient won't work here, because <code>small_set_in_Foo</code> is a Pi type on <code>Foo</code> rather than just a function on <code>Foo</code>. So how should one talk about this structure?</p>\n<p>Does this make sense?</p>",
        "id": 289051336,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1657385344
    }
]