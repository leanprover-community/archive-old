[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> The latest commit replaces some of the <code>mk_app</code> applications used in <code>ring</code>, and there was a <em>huge</em> performance gain. Now <code>ring</code> will solve <code>(x + y)^n = (x+y)^n</code> up to <code>n = 60</code> before hitting the timeout, compared to <code>n = 11</code> before</p>",
        "id": 133227901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535921012
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (ε : ℚ) : ε / 3 + ε / 3 + ε / 3 = ε := by ring\n</pre></div>\n\n\n<p>takes a fraction of a second now</p>",
        "id": 133227944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535921090
    },
    {
        "content": "<p>Is this something we could learn from?</p>",
        "id": 133227959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535921157
    },
    {
        "content": "<p><code>mk_app</code> sucks</p>",
        "id": 133227997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535921165
    },
    {
        "content": "<p>There are still some <code>mk_app</code> uses in ring, but the problems seem to be when some of the arguments are (large) proof terms, even if they aren't used in type inference</p>",
        "id": 133228008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535921226
    },
    {
        "content": "<p>I think it is typechecking the terms, which is a really bad idea since it gets done so often</p>",
        "id": 133228011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535921263
    },
    {
        "content": "<p>good catch Mario. I have had a lot of success with ring in the past but I usually cleared denominators myself and then applied the tactic when there were no divisions left.</p>",
        "id": 133228387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535922100
    },
    {
        "content": "<p>the problem wasn't denominators per se. The major slowdown was in structural parts of the proof that are done in just about every proof. For example normalizing <code>(x+y)^n</code>uses no division</p>",
        "id": 133228677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535922780
    },
    {
        "content": "<p>I assume you're talking about <code>tactic.mk_app</code>. What do you replace it with? I was told it was preferable to use it to <code>to_expr</code>.</p>",
        "id": 133228678,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535922782
    },
    {
        "content": "<p><code>mk_app</code> will build an application while performing typeclass inference and typechecking (or at least inferring the types) of all passed arguments. The alternative is just to build the expr yourself, using <code>expr.app</code> or <code>expr.mk_app</code>, which does no typechecking or inference. I thought the inference might be slow, which is why <code>ring</code> uses an <code>instance_cache</code>, but I think that this was not the problem. Now I just do the typeclass inference directly and then put the app together manually.</p>",
        "id": 133228807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535923078
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def cache.mk_app (c : cache) (n inst : name) (l : list expr) : tactic expr :=\ndo m ← mk_instance ((expr.const inst [c.univ] : expr) c.α),\n   return $ (@expr.const tt n [c.univ] c.α m).mk_app l\n</pre></div>\n\n\n<p>then</p>\n<div class=\"codehilite\"><pre><span></span>c.mk_app ``norm_num.subst_into_prod ``has_mul [l, e, tl, e, t, hl, hr, p₂],\n</pre></div>",
        "id": 133228852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535923126
    },
    {
        "content": "<p>That's awesome! I spent a little while profiling <code>linarith</code> earlier today and was also seeing performance problems with <code>mk_app</code>. It's not a straightforward story when to use it over <code>to_expr</code>, and yeah, making expressions by hand is probably the way to go for critical applications.</p>",
        "id": 133229004,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535923470
    },
    {
        "content": "<p>It would be nice to have a more systematic approach to finding bottle necks. One way I could think of is to use Travis to publish metrics for every build.</p>",
        "id": 133229060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535923669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm about to go to bed, so I'm going to leave this here for you to think about if you want to, otherwise I'll investigate tomorrow. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span> Compare the two profiles here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">41</span><span class=\"bp\">/</span><span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">41</span><span class=\"bp\">/</span><span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p>The second one takes twice as long and spends almost all its time in the final <code>exact</code>. It's evaluating rational arithmetic in the kernel. The first one spends 20x longer in <code>norm_num</code> but that's still better than kernel evaluation.</p>",
        "id": 133230444,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535926964
    },
    {
        "content": "<p>My guess is that this is <code>tactic.norm_num</code>'s fault (the one built into core)</p>",
        "id": 133230451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535927037
    },
    {
        "content": "<p>After chasing down a few false leads: it isn't <code>tactic.norm_num</code>, although <code>tactic.norm_num</code> is surprisingly sensitive to typeclass short circuits. These commands take roughly the same amount of time if you add enough short circuits for <code>T</code>, otherwise the second takes 7x longer.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">norm_num</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">60</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">70</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">norm_num</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">60</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">70</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</pre></div>\n\n\n<p>I find this a little surprising since <code>norm_num</code> caches and pre-applies the instances, so it shouldn't be searching for any instance more than once. But this isn't what's causing the issue above.</p>",
        "id": 133255709,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535975429
    },
    {
        "content": "<p>When <code>ring</code> solves <code>(41/42)*ε - (ε / 2 + ε / 3 + ε / 7) = 0</code>, it actually proves <code>(41/42)*ε +  -(ε / 2 + ε / 3 + ε / 7) = 0</code>. Unifying these over <code>ℚ</code> takes way longer than over <code>T</code> for some reason.</p>",
        "id": 133255736,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535975489
    },
    {
        "content": "<p>There's an easy workaround: change the last lines of <code>ring1</code> to </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">ntp</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">ntp</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 133255823,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535975574
    },
    {
        "content": "<p>The kernel is much faster at checking that the proof from <code>ring</code> has the expected type than <code>exact</code>.</p>",
        "id": 133255908,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535975659
    },
    {
        "content": "<p>Argh, this is so annoying. I inserted explicit change proof terms in the proof. I think it is fixed but keep me appraised if you find anything else.</p>",
        "id": 133278527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536008454
    },
    {
        "content": "<p>Thanks! Will do.</p>",
        "id": 133295842,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536045252
    }
]