[
    {
        "content": "<p>(working example, far from minimal, sorry for that)<br>\n<a href=\"https://gist.github.com/kckennylau/4a009e228980fdbe9f6c879f9fa0eca5\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/4a009e228980fdbe9f6c879f9fa0eca5\">https://gist.github.com/kckennylau/4a009e228980fdbe9f6c879f9fa0eca5</a><br>\nExcerpt:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">abelianization</span><span class=\"bp\">.</span><span class=\"n\">topological_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"o\">(</span><span class=\"n\">abelianization</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"n\">topological_group</span><span class=\"bp\">.</span><span class=\"n\">coinduced</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">exists_rep</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)),</span> <span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)),</span> <span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)),</span> <span class=\"n\">h2</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">is_open_Union</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span>\n<span class=\"n\">continuous_mul</span> <span class=\"n\">continuous_const</span> <span class=\"n\">continuous_id</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">{ continuous_mul := λ S hs1, is_open_prod_iff.2 $</span>\n<span class=\"cm\">    have _ := is_open_prod_iff.1 (topological_monoid.continuous_mul G _ hs1),</span>\n<span class=\"cm\">    by refine quot.ind (λ x, _); refine quot.ind (λ y, _);</span>\n<span class=\"cm\">    from λ h, let ⟨u, v, hu, hv, hxu, hyv, H⟩ := this x y h in</span>\n<span class=\"cm\">    ⟨quot.mk _ &#39;&#39; u, quot.mk _ &#39;&#39; v,</span>\n<span class=\"cm\">    show is_open (quot.mk (rel G) ⁻¹&#39; (quot.mk (rel G) &#39;&#39; u)),</span>\n<span class=\"cm\">      from have (⋃ x : { x // quot.mk (rel G) x = 1}, (λ y, x.1 * y) ⁻¹&#39; u)</span>\n<span class=\"cm\">          = quot.mk (rel G) ⁻¹&#39; (quot.mk (rel G) &#39;&#39; u),</span>\n<span class=\"cm\">        from set.ext $ λ z,</span>\n<span class=\"cm\">        ⟨λ ⟨S, ⟨⟨g, h1⟩, rfl⟩, h2⟩, ⟨g * z, h2, by simp [is_group_hom.mul (quot.mk (rel G)), h1]⟩,</span>\n<span class=\"cm\">        λ ⟨g, h1, h2⟩, ⟨_, ⟨⟨g * z⁻¹, by simp [is_group_hom.mul (quot.mk (rel G)), is_group_hom.inv (quot.mk (rel G)), h2]⟩, rfl⟩, by simp [h1]⟩⟩,</span>\n<span class=\"cm\">      this ▸ is_open_Union $ λ x : {x // quot.mk (rel G) x = 1},</span>\n<span class=\"cm\">      (continuous_mul continuous_const continuous_id) _ hu,</span>\n<span class=\"cm\">    show is_open (quot.mk (rel G) ⁻¹&#39; (quot.mk (rel G) &#39;&#39; v)),</span>\n<span class=\"cm\">      from have (⋃ x : { x // quot.mk (rel G) x = 1}, (λ y, x.1 * y) ⁻¹&#39; v)</span>\n<span class=\"cm\">          = quot.mk (rel G) ⁻¹&#39; (quot.mk (rel G) &#39;&#39; v),</span>\n<span class=\"cm\">        from set.ext $ λ z,</span>\n<span class=\"cm\">        ⟨λ ⟨S, ⟨⟨g, h1⟩, rfl⟩, h2⟩, ⟨g * z, h2, by simp [is_group_hom.mul (quot.mk (rel G)), h1]⟩,</span>\n<span class=\"cm\">        λ ⟨g, h1, h2⟩, ⟨_, ⟨⟨g * z⁻¹, by simp [is_group_hom.mul (quot.mk (rel G)), is_group_hom.inv (quot.mk (rel G)), h2]⟩, rfl⟩, by simp [h1]⟩⟩,</span>\n<span class=\"cm\">      this ▸ is_open_Union $ λ x : {x // quot.mk (rel G) x = 1},</span>\n<span class=\"cm\">      (continuous_mul continuous_const continuous_id) _ hv,</span>\n<span class=\"cm\">    ⟨x, hxu, rfl⟩, ⟨y, hyv, rfl⟩,</span>\n<span class=\"cm\">    λ ⟨p, q⟩, by refine quot.induction_on p (λ m, _);</span>\n<span class=\"cm\">      refine quot.induction_on q (λ n, _);</span>\n<span class=\"cm\">      from λ ⟨⟨P, hp1, hp2⟩, ⟨Q, hq1, hq2⟩⟩,</span>\n<span class=\"cm\">      suffices quot.mk (rel G) P * quot.mk (rel G) Q ∈ S,</span>\n<span class=\"cm\">      by rw [hp2, hq2] at this; simpa using this,</span>\n<span class=\"cm\">      @H (P, Q) ⟨hp1, hq1⟩⟩,</span>\n<span class=\"cm\">  continuous_inv := λ S hs,</span>\n<span class=\"cm\">    show is_open (quot.mk (rel G) ⁻¹&#39; ((λ p : abelianization G, p⁻¹) ⁻¹&#39; S)),</span>\n<span class=\"cm\">    from have (λ p : G, p⁻¹) ⁻¹&#39; (quot.mk (rel G) ⁻¹&#39; S)</span>\n<span class=\"cm\">        = quot.mk (rel G) ⁻¹&#39; ((λ p : abelianization G, p⁻¹) ⁻¹&#39; S),</span>\n<span class=\"cm\">      from set.ext $ λ z, by simp [is_group_hom.inv (quot.mk (rel G))],</span>\n<span class=\"cm\">    this ▸ (topological_group.continuous_inv G _ $</span>\n<span class=\"cm\">      continuous_coinduced_rng _ hs) }-/</span>\n</pre></div>",
        "id": 128121844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529071980
    },
    {
        "content": "<p>Problem: If I use the first proof, then there is error below; if I use the second proof, then there is no error.</p>",
        "id": 128121848,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529071983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> please help</p>",
        "id": 128121852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529071987
    },
    {
        "content": "<p>why would they be the same?</p>",
        "id": 128122041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529072183
    },
    {
        "content": "<p>because they're just proofs?</p>",
        "id": 128122048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529072194
    },
    {
        "content": "<p>it's an instance</p>",
        "id": 128122055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529072210
    },
    {
        "content": "<p>what should I do?</p>",
        "id": 128122058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529072221
    },
    {
        "content": "<p>ah I solved it by making <code>topological_group.coinduced</code> a theorem</p>",
        "id": 128122146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529072347
    }
]