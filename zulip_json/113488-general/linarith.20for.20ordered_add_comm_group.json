[
    {
        "content": "<p>How hard would it be to extend <code>linarith</code> to handle <code>ordered_add_comm_group</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>   <span class=\"c1\">-- ✓</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>   <span class=\"c1\">-- ✓</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">error: invalid type ascription, term has type</span>\n<span class=\"cm\">  ?m_3 ≤ ?m_4</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  r ≤ r</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : ordered_add_comm_group R,</span>\n<span class=\"cm\">r : R</span>\n<span class=\"cm\">⊢ r ≤ r</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">error: invalid apply tactic, failed to synthesize type class instance</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : ordered_add_comm_group R,</span>\n<span class=\"cm\">r : R</span>\n<span class=\"cm\">⊢ r = r</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 208983803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599146479
    },
    {
        "content": "<p>The documentation does claim it needs <code>linear_ordered_comm_ring</code>, though I didn't find any other occurrences of even <code>comm_ring</code> under <code>tactic.linarith.*</code>.</p>",
        "id": 208983900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599146519
    },
    {
        "content": "<p>By default <code>linarith</code> calls <code>ring</code> for verification. There's an option to plug in an alternate verifier so you might be able to get around that. But it also sets up the problem for the verifier using <code>mul</code>, not <code>smul</code>, which is a more disruptive change.</p>",
        "id": 208985477,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147192
    },
    {
        "content": "<p>I think the error you're seeing is probably just an artifact but it will hit real trouble at the verification stage.</p>",
        "id": 208985560,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147225
    },
    {
        "content": "<p><del>Oh, or maybe not, that error could be coming from when it builds the problem for the verifier.</del></p>",
        "id": 208985669,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147254
    },
    {
        "content": "<p>No, it's failing before preprocessing even.</p>",
        "id": 208985984,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147385
    },
    {
        "content": "<p>so I'm guessing the answer is \"not that easy\"?</p>",
        "id": 208986789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147705
    },
    {
        "content": "<p>I only need it for 4 very easy problems but it would be nice to do all of them in a single line</p>",
        "id": 208986938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147756
    },
    {
        "content": "<p>or more precisely, I only have 4 easy problems to take care of but it would be nice if I could do all of them in a single line.</p>",
        "id": 208987063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147819
    },
    {
        "content": "<p>In this case it's failing at <code>apply le_of_not_gt</code> since an <code>ordered_add_comm_group</code> isn't a linear order.</p>",
        "id": 208987118,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147842
    },
    {
        "content": "<p>It's certainly much harder than doing your four easy problems separately ;)</p>",
        "id": 208987165,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147861
    },
    {
        "content": "<p>It's a reasonable generalization though.</p>",
        "id": 208987272,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599147909
    },
    {
        "content": "<p>oh whoops. Actually my orders are linear too, but now things are getting complicated</p>",
        "id": 208987277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147911
    },
    {
        "content": "<p>I think the minimum you need for <code>linarith</code> should be a <code>linear_ordered_add_comm_gorup</code> and an efficient tactic for normalizing things in this structure that understands scalar multiplication by nats.</p>",
        "id": 208987795,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148104
    },
    {
        "content": "<p><code>abel</code> is the second part, right?</p>",
        "id": 208988087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599148210
    },
    {
        "content": "<p>Then you need to make sure all the lemmas it uses are satisfied by this type class, change the parsing stage to read smul, change the verification step to generate something using smul, ...</p>",
        "id": 208988542,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148405
    },
    {
        "content": "<p>linarith will identify atoms up to ring equivalence right now, so you'll lose that if you go purely to groups, which means you might have to check if the target type is a ring and pick a strategy based on that.</p>",
        "id": 208988720,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148459
    },
    {
        "content": "<p>I'm not really sure how the power/efficiency of abel compares to ring, to be honest.</p>",
        "id": 208988840,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148502
    },
    {
        "content": "<p>Does it handle nat multiplication?</p>",
        "id": 208988932,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148536
    },
    {
        "content": "<p>well, I took a quick look at the source and it contained things like <code>nsmul</code> and <code>gsmul</code> so I'm guessing it does</p>",
        "id": 208988992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599148561
    },
    {
        "content": "<p>Okay. So my point is, it's doable, but medium effort and I won't be able to do it myself any time soon. But I'm willing to review a PR!</p>",
        "id": 208989577,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599148742
    },
    {
        "content": "<p><code>abel</code> should be able to handle multiplication by constants</p>",
        "id": 208992297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599149853
    },
    {
        "content": "<p><code>abel</code> should be able to handle <code>comm_group</code>s and not just <code>add_comm_group</code>s!</p>",
        "id": 209037765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599172864
    },
    {
        "content": "<p>Just to be clear here: when Mario says \"should\" in 'abel should be able to handle multiplication by constants' he means \"does\", while when Kevin says \"should\" in 'abel should be able to handle comm_groups' he means \"wouldn't it be nice if\".</p>",
        "id": 209038598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599173633
    }
]