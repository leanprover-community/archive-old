[
    {
        "content": "<p>How can I beef up \"equiv\" into \"canonical isomorphism\"?</p>",
        "id": 125765228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524819741
    },
    {
        "content": "<p>I think that's my question.</p>",
        "id": 125765384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524820081
    },
    {
        "content": "<p>I will formulate something a bit more precise in a sec.</p>",
        "id": 125765424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524820092
    },
    {
        "content": "<p>Q1: what does that mean? Is \"isomorphism\" sufficient?</p>",
        "id": 125765431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524820117
    },
    {
        "content": "<p>The proof of <code>funext</code> uses quot.sound</p>",
        "id": 125768206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524824909
    },
    {
        "content": "<p>but if we restrict to two types in the same universe</p>",
        "id": 125768208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524824917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span>\n</pre></div>",
        "id": 125768222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524824951
    },
    {
        "content": "<p>so a slightly weaker result</p>",
        "id": 125768229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524824969
    },
    {
        "content": "<p>can one prove this without quot.sound?</p>",
        "id": 125768230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524824974
    },
    {
        "content": "<p>I'm trying to work out what a mathematician means when they say that two objects are \"canonically isomorphic\".</p>",
        "id": 125768288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825019
    },
    {
        "content": "<p>To coin a phrase, it's like pornography.</p>",
        "id": 125768292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825035
    },
    {
        "content": "<p>You know it when you see it.</p>",
        "id": 125768294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825039
    },
    {
        "content": "<p>I have not yet found a formulation that I like in dependent type theory.</p>",
        "id": 125768300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825052
    },
    {
        "content": "<p>and I think that this is an underlying source of some of my frustrations in trying to do mathematics in Lean.</p>",
        "id": 125768308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825078
    },
    {
        "content": "<p>Here's a probably much easier question:</p>",
        "id": 125768310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825094
    },
    {
        "content": "<p>what's the inverse of funext called?</p>",
        "id": 125768312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825111
    },
    {
        "content": "<p><code>congr_fun</code></p>",
        "id": 125768335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825122
    },
    {
        "content": "<p>wait, inverse not converse</p>",
        "id": 125768354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825130
    },
    {
        "content": "<p>that's what I wanted</p>",
        "id": 125768366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825164
    },
    {
        "content": "<p>no axioms</p>",
        "id": 125768367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825167
    },
    {
        "content": "<p>different universes</p>",
        "id": 125768368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825171
    },
    {
        "content": "<p>inverse?</p>",
        "id": 125768378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825212
    },
    {
        "content": "<p>not A implies not B?</p>",
        "id": 125768380,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825217
    },
    {
        "content": "<p>Is it possible to express the notion that two types are \"the same\" without ever mentioning any terms?</p>",
        "id": 125768381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825220
    },
    {
        "content": "<p><code>==</code></p>",
        "id": 125768383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825226
    },
    {
        "content": "<p>Kenny you answered my question</p>",
        "id": 125768388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825238
    },
    {
        "content": "<p>inverse is <code>mt \\o congr_fun</code> :P</p>",
        "id": 125768435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825280
    },
    {
        "content": "<p>Here are two notions of being \"close to each other in type theory\", which in my mind are both certainly implied by being \"the same\".</p>",
        "id": 125768436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">zfc</span>\n<span class=\"c1\">--#print extfun_app</span>\n\n<span class=\"c1\">-- Here is a notion from dependent type theory.</span>\n<span class=\"c\">/-</span><span class=\"cm\">- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span>   <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span>  <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span>\n<span class=\"c1\">-- ∀ (x : α), to_fun (inv_fun x) = x</span>\n<span class=\"c1\">-- note round brackets -- explicitly demand the term</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span>\n<span class=\"c1\">-- ∀ (x : β), to_fun (inv_fun x) = x</span>\n<span class=\"c1\">-- note round brackets -- explicitly demand the term</span>\n\n<span class=\"c1\">-- Here is a notion from category theory, translated into dependent type theory.</span>\n<span class=\"c\">/-</span><span class=\"cm\">- The notion of being isomorphic in a category  -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">isom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">inv_fun</span> <span class=\"err\">∘</span> <span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"err\">∘</span> <span class=\"n\">inv_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125768448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825352
    },
    {
        "content": "<p>I have stuck to one universe</p>",
        "id": 125768450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825358
    },
    {
        "content": "<p>because I am a traditionalist</p>",
        "id": 125768463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825362
    },
    {
        "content": "<p>Why does Lean prefer <code>equiv</code> (which is in core Lean) to <code>isom</code>?</p>",
        "id": 125768494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825388
    },
    {
        "content": "<p>Is <code>isom</code> in there somewhere?</p>",
        "id": 125768495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825393
    },
    {
        "content": "<p>These structures are canonically isomorphic, but I don't know the definition of canonically isomorphic</p>",
        "id": 125768496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825418
    },
    {
        "content": "<p>because <code>equiv</code> is more usable</p>",
        "id": 125768502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825444
    },
    {
        "content": "<p>but in dependent type theory the only way I know to construct bijective maps between them is using quot.sound</p>",
        "id": 125768503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825452
    },
    {
        "content": "<p>Just look at my proof in the other thread</p>",
        "id": 125768504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825454
    },
    {
        "content": "<p>before and after changing composition equality</p>",
        "id": 125768505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825468
    },
    {
        "content": "<p>Is it just universally true that equiv is better than isom?</p>",
        "id": 125768508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825474
    },
    {
        "content": "<p>I don't know what other thread you're talking about.</p>",
        "id": 125768548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825488
    },
    {
        "content": "<p>But I would genuinely be interested to know.</p>",
        "id": 125768549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825495
    },
    {
        "content": "<p>My memory is not what it was.</p>",
        "id": 125768552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825503
    },
    {
        "content": "<p>Anyway, I was wondering whether if one stuck to one universe, whether the restricted funext, which sounds to me like it could logically be a strictly weaker assertion, could be proved without the axiom.</p>",
        "id": 125768576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825602
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/proof.20of.20the.20five.20lemma\" title=\"#narrow/stream/113488-general/topic/proof.20of.20the.20five.20lemma\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/proof.20of.20the.20five.20lemma</a></p>",
        "id": 125768619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825630
    },
    {
        "content": "<p>Mario, I ultimately want to formalise some possibly specialised notion of being canonically isomorphic, which I can use to do amazing rewrites which a mathematician does all the time but which I find difficult to do in dependent type theory. My problem in dependent type theory is that I sometimes run into terms which are not definitionally equal, but which are \"only\" canonically isomorphic.</p>",
        "id": 125768685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825752
    },
    {
        "content": "<p>Because I am facing quite a tedious job otherwise</p>",
        "id": 125768686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825774
    },
    {
        "content": "<p>I think I want to make a new structure which is more useful to me than definitional equivalence.</p>",
        "id": 125768742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825934
    },
    {
        "content": "<p>It is not Lean's <code>=</code> because I want it to apply to terms of different types.</p>",
        "id": 125768743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825955
    },
    {
        "content": "<p>and I am quite happy to restrict to objects within one universe</p>",
        "id": 125768788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524825990
    },
    {
        "content": "<p>why don't you just quotient everything with equiv</p>",
        "id": 125768795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524826043
    },
    {
        "content": "<p>Wow, props can be equal : <code>@eq</code> is defined on <code>Sort u_1</code></p>",
        "id": 125768899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826276
    },
    {
        "content": "<p>Is that concept used?</p>",
        "id": 125768902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826292
    },
    {
        "content": "<p>being canonically isomorphic only applies to types.</p>",
        "id": 125768904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826317
    },
    {
        "content": "<blockquote>\n<p>Is that concept used?</p>\n</blockquote>\n<p>a lot</p>",
        "id": 125768943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524826351
    },
    {
        "content": "<p>but mostly in <code>simp</code></p>",
        "id": 125768944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524826357
    },
    {
        "content": "<p><code>simp</code> rewrites Props</p>",
        "id": 125768945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524826365
    },
    {
        "content": "<p>using <code>propext</code></p>",
        "id": 125768948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524826375
    },
    {
        "content": "<p>Is this in Lean or mathlib:</p>",
        "id": 125769002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826477
    },
    {
        "content": "<p><code>instance group_of_equiv [group α] (H : equiv α β) : group β := sorry</code></p>",
        "id": 125769003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826483
    },
    {
        "content": "<p>If alpha and beta are canonically isomorphic, then any group structure on alpha trivially gives you a group structure on beta, any mathematician knows that.</p>",
        "id": 125769014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826523
    },
    {
        "content": "<p>I am slowly coming around to the opinion that \"canonical\" as used by mathematicans doesn't actually mean much, but is instead code for \"we both know what is going on, and I'm just confirming that you one you have in mind is probably the one I have in mind too\".</p>",
        "id": 125769069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524826636
    },
    {
        "content": "<p><code>instance set_equiv_of_equiv (H : equiv α β) : equiv (set α) (set β) := sorry</code></p>",
        "id": 125769113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826725
    },
    {
        "content": "<p>doesn't typecheck</p>",
        "id": 125769114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826728
    },
    {
        "content": "<p><code>equiv</code> is not a class</p>",
        "id": 125769115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826734
    },
    {
        "content": "<p>but if <code>\\a</code> and <code>\\b</code> are canonically isomorphic, then so are their power sets -- any mathematician knows that.</p>",
        "id": 125769125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826769
    },
    {
        "content": "<p>We could make <code>equiv</code> a class, and have the convention that we'll only even make instances that \"every mathematician knows is the right one\".</p>",
        "id": 125769131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524826800
    },
    {
        "content": "<p>But do I want to restrict myself like that?</p>",
        "id": 125769182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826822
    },
    {
        "content": "<p>I am not sure</p>",
        "id": 125769184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826824
    },
    {
        "content": "<p>There are two abelian groups which show up in the Langlands Philosophy</p>",
        "id": 125769185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826839
    },
    {
        "content": "<p>And the Langlands Philosophy says that they are canonically isomorphic</p>",
        "id": 125769188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826848
    },
    {
        "content": "<p>Well... an isomorphism from <code>a</code> to <code>b</code> gives an isomorphism from <code>2^a</code> to <code>2^b</code>, sure. If you bless one as canonical, I guess that blesses the result as canonical too.</p>",
        "id": 125769195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524826874
    },
    {
        "content": "<p>In fact, more generally there are two non-abelian groups which show up and Langlands conjectures that they are canonically isomorphic, and this is one of the reasons that we call it philosophy sometimes -- it is not quite mathematics.</p>",
        "id": 125769198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826903
    },
    {
        "content": "<p>But back to the abelian groups</p>",
        "id": 125769202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826908
    },
    {
        "content": "<p>But by that do you just mean that there's a particularly interesting/sensible isomorphism between them, and the point is not to say \"these are isomorphic\", but \"this is an isomorphism between ...\"?</p>",
        "id": 125769206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524826916
    },
    {
        "content": "<p>Mathematicians have written down not just one, but two canonical isomorphisms between these groups!</p>",
        "id": 125769246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826929
    },
    {
        "content": "<p>And they're different!</p>",
        "id": 125769247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826933
    },
    {
        "content": "<p>One is called \"global class field theory normalised so that uniformisers become identified with geometric Frobenius\"</p>",
        "id": 125769249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826966
    },
    {
        "content": "<p>So what does canonical mean here? (I am not really confident in my skepticism of the word \"canonical\". I am happy to come back to the fold if the story is good.)</p>",
        "id": 125769255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524826992
    },
    {
        "content": "<p>and the other is called \"global class field theory normalised so that uniformisers become identified with arithmetic Frobenius\"</p>",
        "id": 125769256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524826996
    },
    {
        "content": "<p>The two canonical isomorphisms between the groups are related. If we write the group law multiplicatively, as is standard,</p>",
        "id": 125769260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827030
    },
    {
        "content": "<p>then if one of them is f(x)=y</p>",
        "id": 125769261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827035
    },
    {
        "content": "<p>the other is f(x)=1/y</p>",
        "id": 125769263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827040
    },
    {
        "content": "<p>and mathematicians choose at random which one to use</p>",
        "id": 125769303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827052
    },
    {
        "content": "<p>and some even sometimes forget to say which one</p>",
        "id": 125769305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827060
    },
    {
        "content": "<p>perhaps because the one they used was the most common one when the paper was written</p>",
        "id": 125769308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827083
    },
    {
        "content": "<p>So I am pretty sure I want to allow myself more than one canonical isomorphism between two objects</p>",
        "id": 125769321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827105
    },
    {
        "content": "<p>So, here is Kevin's remark in a down to earth example: every abelian group has a canonical automorphism, and in fact, it has two of those: the identity, and the map <code>a \\mapsto -a</code>.</p>",
        "id": 125769721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524827939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> -- you wrote my function! Many thanks!</p>",
        "id": 125769731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524827988
    },
    {
        "content": "<p>Of course, in the case of automorphisms, we agree that <code>id</code> is slightly more canonical then the -1 map</p>",
        "id": 125769733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524827997
    },
    {
        "content": "<p>But these were two different groups</p>",
        "id": 125769777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828018
    },
    {
        "content": "<p>and this has caused confusion in the mathematical community</p>",
        "id": 125769778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828020
    },
    {
        "content": "<p>Exactly</p>",
        "id": 125769779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828023
    },
    {
        "content": "<p>I think that's interesting.</p>",
        "id": 125769781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828028
    },
    {
        "content": "<p>Nowadays people are careful to state which of the normalisations they are using</p>",
        "id": 125769782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828039
    },
    {
        "content": "<p>and unfortunately, and perhaps counter-intuitively, it can sometimes be a little tricky to figure out how to translate the statements of theorems proved using one convention into the analogous statements about the same objects had we used the other convention in the paper.</p>",
        "id": 125769789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828105
    },
    {
        "content": "<p>But Kevin, if we go for the restricted version of canonical first. The one that Scott suggested. That would already be incredibly helpful, right?</p>",
        "id": 125769790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828111
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> -- you wrote my function! Many thanks!</p>\n</blockquote>\n<p>which function?</p>",
        "id": 125769831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828131
    },
    {
        "content": "<p>If there is one 'blessed' isomorphism, it can be traced through al sorts of constructions, and induce 'blessed' equivalences/isomorphism between other objects</p>",
        "id": 125769835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828153
    },
    {
        "content": "<p>Like with power sets, or group structures, etc...</p>",
        "id": 125769837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828162
    },
    {
        "content": "<blockquote>\n<p>But by that do you just mean that there's a particularly interesting/sensible isomorphism between them, and the point is not to say \"these are isomorphic\", but \"this is an isomorphism between ...\"?</p>\n</blockquote>\n<p>I am quite happy to state the isomorphism. But what I want from it is a huge quota of free constructions and proofs.</p>",
        "id": 125769838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828169
    },
    {
        "content": "<p>I want <code>canonical_isomorphism</code> to extend (possibly a restricted universe version of) <code>equiv</code></p>",
        "id": 125769894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828306
    },
    {
        "content": "<p>At the Lean wizards: Kevin is pointing out an incredibly important thing. As in, it is a difference in kind, not just a difference in degree.</p>",
        "id": 125769898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828311
    },
    {
        "content": "<p>It will give super-linear improvements in the de Bruijn factor.</p>",
        "id": 125769901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828332
    },
    {
        "content": "<p>and I want functions like</p>",
        "id": 125769922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828363
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">group_of_equiv</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">canonically_isomorphic</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125769942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828367
    },
    {
        "content": "<p>transport of structure</p>",
        "id": 125769947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> maybe you could automate this?</p>",
        "id": 125769951,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828407
    },
    {
        "content": "<p>I personally feel (but I'm a novice) that this is one of the big road blocks for formalisation of a lot of maths in the algebraic geometry corner</p>",
        "id": 125769952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828409
    },
    {
        "content": "<p>I have this big Pokemon to kill</p>",
        "id": 125769959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828435
    },
    {
        "content": "<p>called proof that an affine scheme is a scheme</p>",
        "id": 125769960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828441
    },
    {
        "content": "<p>and it is now in its final stage</p>",
        "id": 125769962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828447
    },
    {
        "content": "<p>and I want to destroy it with a one liner like this</p>",
        "id": 125769967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828466
    },
    {
        "content": "<p>What happened to Kenny's idea of quotienting by isomorphism?</p>",
        "id": 125769968,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524828468
    },
    {
        "content": "<p>Chris Hughes appears</p>",
        "id": 125769969,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828477
    },
    {
        "content": "<p>I don't know how to implement that</p>",
        "id": 125770009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828489
    },
    {
        "content": "<p>Did you see my \"three lemma\" Chris?</p>",
        "id": 125770012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828499
    },
    {
        "content": "<p>What exactly does Kenny mean by \"quotienting by isomorphism\"?</p>",
        "id": 125770014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828506
    },
    {
        "content": "<p>Because that might be to crude...</p>",
        "id": 125770016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828535
    },
    {
        "content": "<p>I want to prove that if <code>A -&gt; B -&gt; C</code> is exact and we are given isomorphisms <code>A -&gt; A'</code> and <code>B -&gt; B'</code> and <code>C -&gt; C'</code></p>",
        "id": 125770017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828536
    },
    {
        "content": "<p>then there is a completely obvious new exact sequence <code>A' -&gt; B' -&gt; C'</code></p>",
        "id": 125770027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828552
    },
    {
        "content": "<p>I already proved it</p>",
        "id": 125770029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828554
    },
    {
        "content": "<p>I know</p>",
        "id": 125770030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828558
    },
    {
        "content": "<p>but i don't want you to spend 70 lines proving it</p>",
        "id": 125770034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828566
    },
    {
        "content": "<p>I want to to agree with me that it is obvious</p>",
        "id": 125770037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828572
    },
    {
        "content": "<p>and hence is only worth one line</p>",
        "id": 125770038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828577
    },
    {
        "content": "<p>because a mathematician is capable of replacing <code>B</code> with the canonically isomorphic <code>B'</code> in one line</p>",
        "id": 125770086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828611
    },
    {
        "content": "<p>so I can prove the theorem in 3 lines</p>",
        "id": 125770090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828621
    },
    {
        "content": "<p>and I don't see anything wrong with my proof</p>",
        "id": 125770092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828634
    },
    {
        "content": "<p>at every stage the next line is \"do the obvious thing\"</p>",
        "id": 125770095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828643
    },
    {
        "content": "<blockquote>\n<p>but i don't want you to spend 70 lines proving it</p>\n</blockquote>\n<p>... by which I mean</p>",
        "id": 125770106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828679
    },
    {
        "content": "<p>thank you very much Kenny for proving the result for me</p>",
        "id": 125770108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828687
    },
    {
        "content": "<p>and don't you think it's interesting that it took 70 lines</p>",
        "id": 125770112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828694
    },
    {
        "content": "<p>but for the purposes of this thread I want 3 lines</p>",
        "id": 125770117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828710
    },
    {
        "content": "<p>lol</p>",
        "id": 125770160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524828727
    },
    {
        "content": "<p>I want to <code>rw [H : canonically_isomorphic A A']</code></p>",
        "id": 125770163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828743
    },
    {
        "content": "<p>and then you can guess the rest</p>",
        "id": 125770164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828749
    },
    {
        "content": "<p><code>[...] := by repeat {transport_de_structure}</code></p>",
        "id": 125770166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524828753
    },
    {
        "content": "<p>This is exactly another one of those concepts which I have been interested in all my life but have only really now found the language to talk about them in</p>",
        "id": 125770173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828787
    },
    {
        "content": "<p>and perhaps this is very difficult to do in dependent type theory</p>",
        "id": 125770225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828859
    },
    {
        "content": "<p>because replacing <code>f A</code> with <code>f A'</code> can be quite complicated in general</p>",
        "id": 125770229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828876
    },
    {
        "content": "<p>but the point is that <code>A</code> and <code>A'</code> are <em>mathematical objects</em></p>",
        "id": 125770232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828889
    },
    {
        "content": "<p>not these stupid general types</p>",
        "id": 125770235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828903
    },
    {
        "content": "<p>and so what I am hoping is that for a possibly restricted class of types there is some powerful relation on them</p>",
        "id": 125770246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828940
    },
    {
        "content": "<p>called \"canonically isomorphic\"</p>",
        "id": 125770285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828963
    },
    {
        "content": "<p>which you construct with functions in both directions, proofs that the composites are the identity either way (as in equiv not isom), and a little bit of extra magic</p>",
        "id": 125770291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524828987
    },
    {
        "content": "<p>possibly</p>",
        "id": 125770294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829003
    },
    {
        "content": "<p>and then for hopefully a class of types including the kind of types showing up in mathematics</p>",
        "id": 125770300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829043
    },
    {
        "content": "<p>a lot of stuff can be moved around painlessly, substituting one type for a canonically isomorphic one.</p>",
        "id": 125770348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829088
    },
    {
        "content": "<p>So who fancies proving <code>equiv A B -&gt; scheme A -&gt; scheme B</code></p>",
        "id": 125770352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829118
    },
    {
        "content": "<p>Wait, for what generality is this true?</p>",
        "id": 125770366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829173
    },
    {
        "content": "<p>Hmmm, Kevin, I think there are two things at play</p>",
        "id": 125770369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829184
    },
    {
        "content": "<p>There is functoriality, and transport de structure</p>",
        "id": 125770417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829246
    },
    {
        "content": "<p>and they are related, but slightly different</p>",
        "id": 125770419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829255
    },
    {
        "content": "<p>I don't know exactly how to explain the difference</p>",
        "id": 125770423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829265
    },
    {
        "content": "<p>(And maybe they actually are not)</p>",
        "id": 125770428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829274
    },
    {
        "content": "<p>Is this totally disgusting?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">isom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">≃</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_hom</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun_hom</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_isom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">isom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125770430,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524829286
    },
    {
        "content": "<p>Really you want to prove <code>equiv A B -&gt; equiv (scheme A) (scheme B)</code>.</p>",
        "id": 125770537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524829544
    },
    {
        "content": "<p>Chris, but what does it do?</p>",
        "id": 125770539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829551
    },
    {
        "content": "<p>Or even better: <code>scheme</code> is an endofunctor of the category of types and equivalences.</p>",
        "id": 125770580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524829575
    },
    {
        "content": "<p>Isn't that too general? You need some ring structures flying around, right?</p>",
        "id": 125770581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829593
    },
    {
        "content": "<p>I'm not sure what you mean, Johan. How would rings come into the picture? We're just doing abstract nonsense with types here.</p>",
        "id": 125770633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524829739
    },
    {
        "content": "<p>If you quotient then you can rw. That's the idea. But it might be completely useless.</p>",
        "id": 125770638,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524829764
    },
    {
        "content": "<p>Scott, never mind, you are right</p>",
        "id": 125770639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829779
    },
    {
        "content": "<p>Ok, so then we want your proposed theorem to come for free. Does that make sense?</p>",
        "id": 125770686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829817
    },
    {
        "content": "<p>And then, if we have an actual equivalence between A and B, we get an equivalence between (scheme A) and (scheme B) for free</p>",
        "id": 125770688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829855
    },
    {
        "content": "<p>And I guess it comes for free for all endofunctors, and endofunctors compose</p>",
        "id": 125770702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829910
    },
    {
        "content": "<p>So we might need to mark lots of definitions with [endofunctor]</p>",
        "id": 125770708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829922
    },
    {
        "content": "<p>And maybe then we are happy?</p>",
        "id": 125770751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524829927
    },
    {
        "content": "<p>So... which functions <code>F : Type × ... × Type → Type</code> extend to endofunctors of <code>Equiv</code> (the category of types and equivalences)?</p>",
        "id": 125770752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524829931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">over_optimistic</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125770754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829938
    },
    {
        "content": "<p>Most things I can think of...</p>",
        "id": 125770755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524829940
    },
    {
        "content": "<blockquote>\n<p>Is this totally disgusting?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">isom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">≃</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_hom</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun_hom</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_isom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">isom</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>the last parameter is redundant</p>",
        "id": 125770758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524829950
    },
    {
        "content": "<p>proof: exercise for M1P2</p>",
        "id": 125770760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524829960
    },
    {
        "content": "<p>Chris -- I know it can be done! My point is that I should not be wasting my time having to do it!</p>",
        "id": 125770764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524829976
    },
    {
        "content": "<p>I need someone who actually groks type theory to give a counterexample to Kevin's <code>over_optimistic</code>. :-)</p>",
        "id": 125770830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830102
    },
    {
        "content": "<p>So my <code>over_optimistic</code> question is a question for the CS people. Presumably that is not provable. I am very unfussed about you using any of Lean's axioms here. Is</p>",
        "id": 125770836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830110
    },
    {
        "content": "<p>...yeah what Scott said</p>",
        "id": 125770840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830118
    },
    {
        "content": "<p>The thing is that for the types I am most interested in when I am doing mathematics</p>",
        "id": 125770845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830144
    },
    {
        "content": "<p>like groups and rings</p>",
        "id": 125770847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830147
    },
    {
        "content": "<p>the proof is \"it's trivial\"</p>",
        "id": 125770851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830162
    },
    {
        "content": "<p>(and lists and manifolds and braided monoidal categories)</p>",
        "id": 125770891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830167
    },
    {
        "content": "<p>exactly</p>",
        "id": 125770892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830170
    },
    {
        "content": "<p>I have run into a ridiculous issue in my schemes code and Kenny has dug me out of a hole with 70 lines of code which no human should have to write</p>",
        "id": 125770897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830222
    },
    {
        "content": "<p>and indeed no mention is made of the argument in the stacks project</p>",
        "id": 125770902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830240
    },
    {
        "content": "<p>which is written in ZFC</p>",
        "id": 125770903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830243
    },
    {
        "content": "<p>This is an area where translation to DTT seems hard</p>",
        "id": 125770905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830274
    },
    {
        "content": "<p>currently</p>",
        "id": 125770949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830305
    },
    {
        "content": "<p>I have some \"canonically isomorphic\" objects</p>",
        "id": 125770951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830332
    },
    {
        "content": "<p>and whilst I don't know what that means</p>",
        "id": 125770954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830338
    },
    {
        "content": "<p>Hmmmz where is <code>left_inverse</code> defined again?</p>",
        "id": 125770961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830344
    },
    {
        "content": "<p>I fear that someone is about to come along and say: \"HoTT!\"</p>",
        "id": 125770962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830345
    },
    {
        "content": "<p>Yes, I was about to do that</p>",
        "id": 125770966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830353
    },
    {
        "content": "<p>For 30 minutes I had the urge to say that I think this is <em>exactly</em> what Voevodsky tried to solve. His answer was HoTT</p>",
        "id": 125770974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830384
    },
    {
        "content": "<p>Voevodsky said things like: \"the point is you can actually say what you mean by transport of structure\"...</p>",
        "id": 125770976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830393
    },
    {
        "content": "<blockquote>\n<p>Hmmmz where is <code>left_inverse</code> defined again?</p>\n</blockquote>\n<p>ctrl shift f</p>",
        "id": 125771023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524830415
    },
    {
        "content": "<p>I do know that from the fact that they are all canonically isomorphic that I can prove all the hypotheses in Kenny's theorem</p>",
        "id": 125771039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830469
    },
    {
        "content": "<p>Kenny has taken the problem down one level</p>",
        "id": 125771040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830469
    },
    {
        "content": "<p>there is a really weird part of the argument actually, which is worth mentioning here and is evidence to suggest that I am living in a dream world.</p>",
        "id": 125771041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830469
    },
    {
        "content": "<p>I have B canonically isomorphic to B' (I have the maps)</p>",
        "id": 125771042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830469
    },
    {
        "content": "<p>I have A canonically isomorphic to A' (in the sense that I have a structure which is an approximation to such a thing, and will do for now)</p>",
        "id": 125771043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830469
    },
    {
        "content": "<p>but the proofs are going to be really tedious</p>",
        "id": 125771044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830470
    },
    {
        "content": "<p>and I can prove that the diagram commutes</p>",
        "id": 125771048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830490
    },
    {
        "content": "<p>my chat is being garbled</p>",
        "id": 125771087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830523
    },
    {
        "content": "<p>(So which bits are by Kenny, and which by \"Kevin\"? :-)</p>",
        "id": 125771098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830552
    },
    {
        "content": "<p>but one of the arguments that it commutes is : ring hom x is the same as ring hom x' because they're both the unique ring hom</p>",
        "id": 125771103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830576
    },
    {
        "content": "<p>and similarly ring hom y = ring hom y'</p>",
        "id": 125771104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830583
    },
    {
        "content": "<p>and now we deduce that group hom x+y equals group hom x'+y'</p>",
        "id": 125771111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830594
    },
    {
        "content": "<p>not from the universal property itself, in some sense</p>",
        "id": 125771114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830629
    },
    {
        "content": "<p>well, from some shadow of the universal property applied to +</p>",
        "id": 125771116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524830641
    },
    {
        "content": "<p>Does anyone know how things like <code>@[derive decidable_eq]</code> work?</p>",
        "id": 125771226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830801
    },
    {
        "content": "<p>Perhaps we can have <code>@[derive transportable]</code>, so when you write</p>",
        "id": 125771235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830839
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[derive transportable]\nstructure Scheme (a : Type) := ...\n</pre></div>",
        "id": 125771245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830872
    },
    {
        "content": "<p>we automatically get an instance of <code>transportable Scheme</code>, which just means Scheme is functorial w.r.t equiv.</p>",
        "id": 125771290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830915
    },
    {
        "content": "<p>That was what I was hinting at with the [endofunctor] annotations</p>",
        "id": 125771300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830949
    },
    {
        "content": "<p>But: I don't know lean...</p>",
        "id": 125771303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830957
    },
    {
        "content": "<p>ah, I see!</p>",
        "id": 125771306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830961
    },
    {
        "content": "<p>Good suggestion. :-)</p>",
        "id": 125771310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524830972
    },
    {
        "content": "<p>Well, your suggestion is clearly more fleshed out.</p>",
        "id": 125771311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524830989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Take a look at <a href=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22\">https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22</a></p>",
        "id": 125771358,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524831021
    },
    {
        "content": "<blockquote>\n<p>we automatically get an instance of <code>transportable Scheme</code>, which just means Scheme is functorial w.r.t equiv.</p>\n</blockquote>\n<p>In other words, that <code>over_optimistic Scheme</code> is a theorem, right?</p>",
        "id": 125771419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831128
    },
    {
        "content": "<p>Well, even more than just <code>over_optimistic Scheme</code>.</p>",
        "id": 125771433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831225
    },
    {
        "content": "<p>We want to know that the <code>equiv</code>s  you get at the <code>Scheme</code> level compose in the same way they did on the original types.</p>",
        "id": 125771479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831251
    },
    {
        "content": "<p>So let's not jump the gun -- can you prove if A equiv B then a ring on A gives a ring on B?</p>",
        "id": 125771491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831278
    },
    {
        "content": "<p>in 70 lines?</p>",
        "id": 125771503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524831310
    },
    {
        "content": "<p>:-)</p>",
        "id": 125771507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831316
    },
    {
        "content": "<p>Kenny I'm sure you could do it in ten</p>",
        "id": 125771513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831331
    },
    {
        "content": "<p>Sure we can do it on <code>ring</code>, or any given example. (Or rather: Kenny can :-)</p>",
        "id": 125771516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831361
    },
    {
        "content": "<p>I mean</p>",
        "id": 125771559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831396
    },
    {
        "content": "<p>but it seems rather likely that the computer can do it too, by looking at the structure fields, and working out where the parameter types appear, and plugging appropriate copies of the equivalence or its inverse everywhere.</p>",
        "id": 125771560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831402
    },
    {
        "content": "<p>right</p>",
        "id": 125771565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831411
    },
    {
        "content": "<p>For many simple types (list, ring, ...) this is certainly going to work.</p>",
        "id": 125771569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831422
    },
    {
        "content": "<p>I mean \"prove it without ploughing through the axioms\"</p>",
        "id": 125771573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831426
    },
    {
        "content": "<p>You mean ploughing through the axioms of \"ring\"?</p>",
        "id": 125771584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831460
    },
    {
        "content": "<p>yes, I want a one-line proof</p>",
        "id": 125771586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831473
    },
    {
        "content": "<p>that if A equiv B then a ring structure on A gives one on B</p>",
        "id": 125771624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831484
    },
    {
        "content": "<p>does that exist?</p>",
        "id": 125771629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831496
    },
    {
        "content": "<p>Could it be a tactic?</p>",
        "id": 125771631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831503
    },
    {
        "content": "<p>No, I think in general there just isn't a one-line proof, that would work unchanged if your substituted ring for group.</p>",
        "id": 125771632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831504
    },
    {
        "content": "<p>Is it already a theorem?</p>",
        "id": 125771633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831507
    },
    {
        "content": "<p>but yes, it can easily be a tactic</p>",
        "id": 125771634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831513
    },
    {
        "content": "<p>and the tactic would sometimes fail?</p>",
        "id": 125771636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831536
    },
    {
        "content": "<p>and it can be one that's easy to use: just add @[derive transportable] in front of every structure.</p>",
        "id": 125771637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831540
    },
    {
        "content": "<p>and yes, conceivably it might sometime fail, but I don't see where yet</p>",
        "id": 125771643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831553
    },
    {
        "content": "<p>I have no understanding at all the moment anyone says <code>transportable</code></p>",
        "id": 125771644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831557
    },
    {
        "content": "<p>(In fact, I'm really upset that I don't see where it might fail. I'll buy anyone a beer who explains a counterexample to Kevin's <code>over_optimistic</code> :-)</p>",
        "id": 125771653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831586
    },
    {
        "content": "<p>Sorry, I made up the word <code>transportable</code> just now.</p>",
        "id": 125771654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831602
    },
    {
        "content": "<p>heh?</p>",
        "id": 125771695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524831605
    },
    {
        "content": "<p>I mean, f can send int to empty and nat to unit</p>",
        "id": 125771702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524831624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, do you understand what I mean by \"the category of types and equivalences\"?</p>",
        "id": 125771703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831626
    },
    {
        "content": "<p>so int and nat are equivalent but empty and unit are not</p>",
        "id": 125771706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524831633
    },
    {
        "content": "<p>not yet</p>",
        "id": 125771709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831640
    },
    {
        "content": "<p>Maybe I do understand</p>",
        "id": 125771711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831650
    },
    {
        "content": "<p>Are the objects all in one universe?</p>",
        "id": 125771712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524831658
    },
    {
        "content": "<p>But Kenny, how would you actually construct such an <code>f</code> in Lean?</p>",
        "id": 125771719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Just write down the definition of <code>structure transportable (F : Type* \\to Type*)</code></p>",
        "id": 125771721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831683
    },
    {
        "content": "<p>/me has never written a structure in Lean before, otherwise he would do it</p>",
        "id": 125771725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831705
    },
    {
        "content": "<p>Or should it be a class?</p>",
        "id": 125771726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831715
    },
    {
        "content": "<p>So that <code>@[derive]</code> will automagically create instances of that class</p>",
        "id": 125771767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831732
    },
    {
        "content": "<p>/me goes back to TPIL</p>",
        "id": 125771784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524831794
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class transportable (f : Type u → Type u) :=\n(on_equiv : Π {α β : Type u} (e : equiv α β), equiv (f α) (f β))\n(on_refl  : Π (α : Type u), on_equiv (equiv.refl α) = equiv.refl (f α))\n(on_trans : Π {α β γ : Type u} (d : equiv α β) (e : equiv β γ), on_equiv (equiv.trans d e) = equiv.trans (on_equiv d) (on_equiv e))\n</pre></div>",
        "id": 125771827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831897
    },
    {
        "content": "<p>and I claim that <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> knows how to implement @[derive transportable] for many type constructors. :-)</p>",
        "id": 125771839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524831931
    },
    {
        "content": "<p>Yes, that would be very cool</p>",
        "id": 125771889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, this is just saying we have a category which I'll call <code>Equiv</code>, whose objects are <code>Type u</code> for some universe <code>u</code>, and the homs between <code>\\a</code> and <code>\\b</code> are just <code>equiv \\a \\b</code>. Then a function  <code>f : Type u -&gt; Type u</code> is \"transportable\" exactly if it extends to a functor <code>Equiv \\to Equiv</code> (i.e. <code>f</code> is what that functor does on objects).</p>",
        "id": 125771933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832087
    },
    {
        "content": "<p>Can we have different universes?</p>",
        "id": 125771950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832150
    },
    {
        "content": "<p>sure.</p>",
        "id": 125771951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832163
    },
    {
        "content": "<p>In other words, <code>f</code> need not be \"strictly endo\"</p>",
        "id": 125771952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832178
    },
    {
        "content": "<p>(It's important that all the universes in classes are visible in the class parameters, but here they would be visible in the parameter <code>f : Type u -&gt; Type v</code>.)</p>",
        "id": 125771964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  --- I'm not at all sure if this is useful. It may be saying simple things in complicated ways, that don't actually solve your problems. But perhaps it does. (And if it does, I'm guessing automatically generating instances of <code>transportable</code> could be achieved within a few days (/weeks if Simon doesn't want to help :-)).</p>",
        "id": 125772036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832314
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">group_of_equiv</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">canonically_isomorphic</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n</blockquote>\n<p>It would solve things like this, if I'm not mistaken</p>",
        "id": 125772091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832397
    },
    {
        "content": "<blockquote>\n<p>and I claim that <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> knows how to implement @[derive transportable] for many type constructors. :-)</p>\n</blockquote>\n<p>Do you have a proof of that?</p>",
        "id": 125772095,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524832421
    },
    {
        "content": "<p>Yes, you are working on it</p>",
        "id": 125772098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832433
    },
    {
        "content": "<p>:-)</p>",
        "id": 125772141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832469
    },
    {
        "content": "<p>And it seems that you get a beer if you can prove that you can't do it in one go...</p>",
        "id": 125772144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832482
    },
    {
        "content": "<p>(Sorry, I don't mean to say things like this to pressure you into doing things. Just to express my gratitude for all your recent help! No good deed goes unpunished...)</p>",
        "id": 125772149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524832508
    },
    {
        "content": "<p>Learning how to write tactics and such is on my todo list</p>",
        "id": 125772211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832592
    },
    {
        "content": "<p>But I first need to get two papers out of the door...</p>",
        "id": 125772214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524832610
    },
    {
        "content": "<p>(Haha! No worries! Can people hear us when we whisper in here?)</p>",
        "id": 125772215,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524832612
    },
    {
        "content": "<p>Yeah and writing tutorials about it is on mine</p>",
        "id": 125772225,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524832652
    },
    {
        "content": "<p>I can look into it. I still don't know much about <code>derive</code> but I need to understand it for <code>traversable</code>. I can kill two birds with one stone</p>",
        "id": 125772269,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524832707
    },
    {
        "content": "<p>Would it help to make everything isomorphic to a type a type class, and then prove things about the class of isomorphic types? Might be completely stupid.</p>",
        "id": 125772286,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524832772
    },
    {
        "content": "<p>Well, you loose track of different isomorphisms between the same to types</p>",
        "id": 125772496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524833067
    },
    {
        "content": "<p>And that will create trouble down the road, I guess</p>",
        "id": 125772500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524833086
    },
    {
        "content": "<p>Type classes are really better when instances are unique. Lean does not enforce that idea but conceptually, if the type class is not unique, the instance is an implicit argument everywhere but the exact choice of instance makes a big difference.</p>",
        "id": 125773177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524834192
    },
    {
        "content": "<p>It's like you're omitting a central piece of information every time</p>",
        "id": 125773186,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524834226
    },
    {
        "content": "<p>But for Scott's proposal, that would be the case, right?</p>",
        "id": 125773189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524834235
    },
    {
        "content": "<p>You mean the instance would be unique?</p>",
        "id": 125773404,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524834575
    },
    {
        "content": "<p>I think so</p>",
        "id": 125773683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524834971
    },
    {
        "content": "<p>You derive an instance, right.</p>",
        "id": 125773687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524834982
    },
    {
        "content": "<p>So there is only one of them. And people just shouldn't define additional instances</p>",
        "id": 125773694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835009
    },
    {
        "content": "<p>What if other instances could be useful?</p>",
        "id": 125773760,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835112
    },
    {
        "content": "<p>Sorry, I'm kind of jumping in the middle here so I'm missing some context</p>",
        "id": 125773770,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835129
    },
    {
        "content": "<p>Hmm, we only want to use the fact that the class is inhabited</p>",
        "id": 125773771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835132
    },
    {
        "content": "<p>Ok, so this is the thing</p>",
        "id": 125773775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835137
    },
    {
        "content": "<p>Is it meant to be used with type constructors like <code>list</code>?</p>",
        "id": 125773782,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835150
    },
    {
        "content": "<p>Say you have two types. <code>A</code> and <code>B</code></p>",
        "id": 125773783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835150
    },
    {
        "content": "<p>and you know that <code>A</code> is a group. You also know <code>equiv A B</code></p>",
        "id": 125773790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835174
    },
    {
        "content": "<p>Then we would like to know that <code>B</code> is also a group.</p>",
        "id": 125773794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835187
    },
    {
        "content": "<p>And we want Lean to do this for us.</p>",
        "id": 125773799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835194
    },
    {
        "content": "<p>So, after lots of discussions, Scott came up with a strategy.</p>",
        "id": 125773858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835210
    },
    {
        "content": "<p>We define a class <code>transportable</code> (or some other name, but mathematicians know this fact as \"transport of structure\")</p>",
        "id": 125773864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835242
    },
    {
        "content": "<p>And we tag lots of definitions with <code>@[derive transportable]</code></p>",
        "id": 125773868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835260
    },
    {
        "content": "<p>And then, MAGIC!</p>",
        "id": 125773873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835265
    },
    {
        "content": "<p>In particular, you can only derive transportable for things of type <code>Type u \\to Type v</code></p>",
        "id": 125773886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835304
    },
    {
        "content": "<p>In this case, that would be <code>group</code>, right?</p>",
        "id": 125773944,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835342
    },
    {
        "content": "<p>And if <code>f</code> and <code>g</code> are two things that are <code>transportable</code>, then we want <code>(f,g)</code> to also be transportable, by some fact that we hope <em>you</em> can prove</p>",
        "id": 125773947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835345
    },
    {
        "content": "<p>Right, <code>group</code>, <code>ring</code> etc should be examples</p>",
        "id": 125773955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835362
    },
    {
        "content": "<p>I see, I see. That actually seems like a good use of classes</p>",
        "id": 125773969,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835395
    },
    {
        "content": "<p>and if something is defined as a <code>structure</code>, hopefully we can also derive this from how its built.</p>",
        "id": 125773978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835426
    },
    {
        "content": "<p>I'll look into doing that. If I could have a use case, that would help a lot</p>",
        "id": 125773986,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835442
    },
    {
        "content": "<p>And so we only need some really basic things where we actually <em>prove</em> that we have an instance. The rest is done by <code>derive</code> and <em>us</em> putting annotations in mathlib.</p>",
        "id": 125774035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Is that a faithful representation of your ideas?</p>",
        "id": 125774046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> The use case is that Kevin is now facing a goal that would follow from this (and probably tomorrow he has another dozen). A mathematician would spend at most 3 words to \"prove\" such a fact. Kenny needed 70 lines to prove this particular goal of Kevin. But a variant of that goal can pop up any time.</p>",
        "id": 125774143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835655
    },
    {
        "content": "<p>Here's a mockup of what we want:</p>\n<div class=\"codehilite\"><pre><span></span>class canonical_equiv (α : Sort*) (β : Sort*) extends equiv α β.\n\nclass transportable (f : Type u → Type u) :=\n(on_equiv : Π {α β : Type u} (e : equiv α β), equiv (f α) (f β))\n(on_refl  : Π (α : Type u), on_equiv (equiv.refl α) = equiv.refl (f α))\n(on_trans : Π {α β γ : Type u} (d : equiv α β) (e : equiv β γ), on_equiv (equiv.trans d e) = equiv.trans (on_equiv d) (on_equiv e))\n\n-- Finally a command like: `initialize_transport group` would create the next two declarations automagically:\n\ndef group.transportable : transportable group := sorry\ninstance group.transport {α β : Type u} [R : group α] [e : canonical_equiv α β] : group β := (@transportable.on_equiv group group.transportable _ _ e.to_equiv).to_fun R\n</pre></div>",
        "id": 125774155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835679
    },
    {
        "content": "<p>The challenge is to implement the command <code>initialize_transport</code> (sounds like Star Trek! :-)</p>",
        "id": 125774206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835704
    },
    {
        "content": "<p>It will need to inspect its argument, which will be something like <code>ring</code> or <code>list</code>, and create an instance of <code>transportable ring</code> or <code>transportable list</code>, etc.</p>",
        "id": 125774254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835790
    },
    {
        "content": "<p>(i.e. fill in the <code>sorry</code> above)</p>",
        "id": 125774269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835803
    },
    {
        "content": "<p>The final step of <code>initialize_transport</code> is trivial: just emit the final instance declaration above.</p>",
        "id": 125774306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835820
    },
    {
        "content": "<p>Right, so <code>initialize_transport</code> (or <code>derive_transportable</code>) would look at <code>group</code> and say, oh, I know how to transport <code>mul</code> and <code>inv</code> and <code>one</code> from <code>A</code> to <code>B</code></p>",
        "id": 125774314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835852
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 125774315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835862
    },
    {
        "content": "<p>Because those are just functions... and someone told me how to do that</p>",
        "id": 125774323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835869
    },
    {
        "content": "<p>I don't have a strong sense of how hard that it. :-)</p>",
        "id": 125774325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835871
    },
    {
        "content": "<p>Nice idea :)</p>",
        "id": 125774327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835874
    },
    {
        "content": "<p>I think keep it as my treat today between writing sessions</p>",
        "id": 125774336,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524835901
    },
    {
        "content": "<p>But basically the thing you hand to <code>initialize_transport</code> will usually just be some inductive type</p>",
        "id": 125774337,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835902
    },
    {
        "content": "<p>And then there are the axioms, and it should be able to transport their proof as well...</p>",
        "id": 125774338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835909
    },
    {
        "content": "<p>(e.g. a structure)</p>",
        "id": 125774379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835924
    },
    {
        "content": "<p>And now you want to \"inductively\" deduce that almost everything a mathematician like Kevin would define is an example of <code>transportable</code></p>",
        "id": 125774383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524835938
    },
    {
        "content": "<p>Yes: more advanced versions of <code>initialize_transport</code> will probably do some induction: notice that internal features have already been provided with instance of transportable, and make sure of that.</p>",
        "id": 125774407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524835989
    },
    {
        "content": "<p>I should sleep, but I'll try to think of examples of wanting to do that while I sleep. :-)</p>",
        "id": 125774420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524836030
    },
    {
        "content": "<p>Awesome! That sounds like sweet dreams</p>",
        "id": 125774470,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524836052
    },
    {
        "content": "<p>Here are some more basics. But I think you already got the idea.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"n\">class</span> <span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_refl</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Our goal is an automagic proof of the following</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"n\">transportable</span> <span class=\"n\">group</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- These we might need to define and prove by hand</span>\n<span class=\"n\">def</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">punit</span>\n<span class=\"n\">def</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Swap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Swap</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Swap</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n\n<span class=\"c1\">-- And then we can define</span>\n<span class=\"n\">def</span> <span class=\"n\">Hom1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Hom2</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Aut</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- And hopefully automagically derive</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Hom1</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom1</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Hom2</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom1</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Aut</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Aut</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- If we have all these in place...</span>\n<span class=\"c1\">-- A bit of magic might actually be able to derive `group.transportable` on line 11.</span>\n<span class=\"c1\">-- After all, a group just is a type plus some functions... and we can now transport functions.</span>\n</pre></div>",
        "id": 125775365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524837373
    },
    {
        "content": "<p>Aah, and to prove the axioms for the transported functions, we need to be able to transport propositions</p>",
        "id": 125775387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524837420
    },
    {
        "content": "<p>Thanks! Transporting propositions shouldn't be too hard. I have a few ideas on how to do it</p>",
        "id": 125775647,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524837759
    },
    {
        "content": "<p>With my recent popularity, maybe I should cash in on this new market: <a href=\"/user_uploads/3121/boyZ4T9BeLmq-lWnSs0tiqdb/IMG_8067.jpeg\" target=\"_blank\" title=\"IMG_8067.jpeg\">IMG_8067.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/boyZ4T9BeLmq-lWnSs0tiqdb/IMG_8067.jpeg\" target=\"_blank\" title=\"IMG_8067.jpeg\"><img src=\"/user_uploads/3121/boyZ4T9BeLmq-lWnSs0tiqdb/IMG_8067.jpeg\"></a></div>",
        "id": 125775719,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524837867
    },
    {
        "content": "<p>I have proved the fundamental theorem of <code>has_mul</code></p>",
        "id": 125779148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842865
    },
    {
        "content": "<p>What a great way to spend a day.</p>",
        "id": 125779150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842870
    },
    {
        "content": "<p>what is that theorem?</p>",
        "id": 125779199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524842891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">zfc_u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- ideas around the concept of α being canonically isomorphic to β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">zfc</span>\n\n<span class=\"c1\">-- mod of equiv so I can save typing</span>\n<span class=\"kn\">structure</span> <span class=\"n\">equiv&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">i</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">j</span>    <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ji</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- it&#39;s equiv to equiv, it is absolutely fundamental for the notion of canonical isomorphism, and I like</span>\n<span class=\"c1\">-- the notation better because it gets everywhere.</span>\n\n<span class=\"c1\">--#print has_mul</span>\n<span class=\"c1\">--@[class]</span>\n<span class=\"c1\">--structure has_mul : Type u → Type u</span>\n<span class=\"c1\">--fields:</span>\n<span class=\"c1\">--has_mul.mul : Π {α : Type u} [c : has_mul α], α → α → α</span>\n\n<span class=\"c1\">-- Fundamental theorem of has_mul</span>\n\n<span class=\"c1\">--#print prefix has_mul -- stuff</span>\n<span class=\"c1\">--set_option pp.notation false</span>\n<span class=\"kn\">definition</span> <span class=\"n\">equiv_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv&#39;</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">equiv&#39;</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">αmul</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"n\">αmul</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"n\">b2</span><span class=\"o\">))</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">βmul</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">β</span> <span class=\"n\">βmul</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">a2</span><span class=\"o\">))</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- didn&#39;t I just write that?</span>\n                                                                      <span class=\"c1\">-- should we introduce E-dual?</span>\n  <span class=\"n\">ij</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- aargh why do I struggle</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">a1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">a2</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">ij</span><span class=\"o\">,</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">ji</span><span class=\"o\">],</span> <span class=\"c1\">-- got there in the end</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">ji</span> <span class=\"o\">:=</span> <span class=\"c1\">-- I can&#39;t even do this in term mode so I just copy out the entire tactic mode proof again.</span>\n <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"c1\">-- aargh why do I struggle</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"n\">b1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">j</span> <span class=\"n\">b2</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">ij</span><span class=\"o\">,</span><span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">ji</span><span class=\"o\">],</span> <span class=\"c1\">-- got there in the end</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"c1\">-- didn&#39;t I just write that?</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 125779205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842898
    },
    {
        "content": "<p>it is <code>equiv_mul</code></p>",
        "id": 125779217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842914
    },
    {
        "content": "<p>but it would be happily renamed</p>",
        "id": 125779219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842919
    },
    {
        "content": "<p>that's quite interesting</p>",
        "id": 125779251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524842975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you see that I repeat every line of code twice?</p>",
        "id": 125779255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842984
    },
    {
        "content": "<p>I have this vague idea that this is not best practice</p>",
        "id": 125779259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524842994
    },
    {
        "content": "<p>No, you're right. I think this should and could be derived automatically.</p>",
        "id": 125779350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524843100
    },
    {
        "content": "<blockquote>\n<p>Would it help to make everything isomorphic to a type a type class, and then prove things about the class of isomorphic types? Might be completely stupid.</p>\n</blockquote>\n<p>I am just catching up with chat. I've been trying to work out some of these proofs by hand.</p>",
        "id": 125779523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843351
    },
    {
        "content": "<p>That sounds like a really cool idea though</p>",
        "id": 125779529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843359
    },
    {
        "content": "<p>By the way -- the reason I did <code>has_mul</code> is that there is another type class which I am targetting.</p>",
        "id": 125779575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843383
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Would it help to make everything isomorphic to a type a type class, and then prove things about the class of isomorphic types? Might be completely stupid.</p>\n</blockquote>\n<p>I am just catching up with chat. I've been trying to work out some of these proofs by hand.</p>\n</blockquote>\n<p>it's called cardinal</p>",
        "id": 125779576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524843384
    },
    {
        "content": "<p>:-)</p>",
        "id": 125779586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843404
    },
    {
        "content": "<p>Is <code>cardinal</code> a far more useful object than I had realised?</p>",
        "id": 125779603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843426
    },
    {
        "content": "<p>no</p>",
        "id": 125779608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524843433
    },
    {
        "content": "<p>:-)</p>",
        "id": 125779610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843437
    },
    {
        "content": "<p>Kenny can you prove the fundamental theorem of ring?</p>",
        "id": 125779618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843451
    },
    {
        "content": "<p>I can, but I won't</p>",
        "id": 125779624,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524843458
    },
    {
        "content": "<p>how many lines would it take you</p>",
        "id": 125779628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843465
    },
    {
        "content": "<p>the fundamental theorem of ring is a trivial result</p>",
        "id": 125779631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843477
    },
    {
        "content": "<p>I wanna build a tactic :-)</p>",
        "id": 125779653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843482
    },
    {
        "content": "<p>a ring has many structures, you know</p>",
        "id": 125779672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524843484
    },
    {
        "content": "<p>yeah and you solve them all with the same tactic</p>",
        "id": 125779687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524843494
    },
    {
        "content": "<p>rofl</p>",
        "id": 125780187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844122
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transport_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">left_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">right_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125780189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844130
    },
    {
        "content": "<p>I have proved the fundamental theorem of mul</p>",
        "id": 125780193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844137
    },
    {
        "content": "<p>and now I have to prove the fundamental theorem of add</p>",
        "id": 125780198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844146
    },
    {
        "content": "<p>why would I do that</p>",
        "id": 125780201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844149
    },
    {
        "content": "<p>but add is canonically isomorphic to mul</p>",
        "id": 125780202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844152
    },
    {
        "content": "<p>I just said I won't</p>",
        "id": 125780203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844154
    },
    {
        "content": "<p>I am doing it</p>",
        "id": 125780204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844157
    },
    {
        "content": "<p>done 10 mins</p>",
        "id": 125780209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844168
    },
    {
        "content": "<p>I just do a regular expression substitution</p>",
        "id": 125780212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844172
    },
    {
        "content": "<p>and I have the fundamental theorem of add</p>",
        "id": 125780213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844177
    },
    {
        "content": "<p>you win</p>",
        "id": 125780215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844182
    },
    {
        "content": "<p>but I would rather have a tactic</p>",
        "id": 125780217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"n\">def</span> <span class=\"n\">why_would_one</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125780310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844281
    },
    {
        "content": "<p>It reminds me of the situation with <a href=\"https://github.com/PatrickMassot/lean-differential-topology/commit/f47348abf8515e23bd485683d8b351c7fd89c70f#diff-bbdfb4d2f4b405102cb35c772afdd2cc\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/commit/f47348abf8515e23bd485683d8b351c7fd89c70f#diff-bbdfb4d2f4b405102cb35c772afdd2cc\">https://github.com/PatrickMassot/lean-differential-topology/commit/f47348abf8515e23bd485683d8b351c7fd89c70f#diff-bbdfb4d2f4b405102cb35c772afdd2cc</a> which was automated into <a href=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L56\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L56\">https://github.com/leanprover/mathlib/blob/master/algebra/pi_instances.lean#L56</a></p>",
        "id": 125780411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524844429
    },
    {
        "content": "<p>So I'm pretty optimistic there will be a tactic</p>",
        "id": 125780413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524844442
    },
    {
        "content": "<p>What would be even better would be Simon getting tired of writing our tactics and writing tactic writing tutorials instead</p>",
        "id": 125780457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524844466
    },
    {
        "content": "<p>aha</p>",
        "id": 125780460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844477
    },
    {
        "content": "<p>Give a man a fish, and you feed him for a day; show him how to catch fish, and you feed him for a lifetime.</p>",
        "id": 125780466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844495
    },
    {
        "content": "<p>I made an instance</p>",
        "id": 125780685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">mul_is_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv&#39;</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">ij</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"c1\">-- *sigh*</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">,</span>\n  <span class=\"n\">ji</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 125780692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844775
    },
    {
        "content": "<p>but that's what I just did</p>",
        "id": 125780697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844789
    },
    {
        "content": "<p>I am behind</p>",
        "id": 125780700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844799
    },
    {
        "content": "<p>I am working it all out myself</p>",
        "id": 125780739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844804
    },
    {
        "content": "<p>nice</p>",
        "id": 125780745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844808
    },
    {
        "content": "<blockquote>\n<p>Give a man a fish, and you feed him for a day; show him how to catch fish, and you feed him for a lifetime.</p>\n</blockquote>\n<p>Unless there is no body of water nearby...</p>",
        "id": 125780753,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524844814
    },
    {
        "content": "<p>OK Kenny, well done on ring. My next challenge for you is <code>topological_field</code></p>",
        "id": 125780788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844900
    },
    {
        "content": "<p>nope.</p>",
        "id": 125780794,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524844909
    },
    {
        "content": "<p>and it's a challenge to Simon as well</p>",
        "id": 125780796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524844910
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transport_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_field</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125780910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845026
    },
    {
        "content": "<p>Who will win out of man and machine</p>",
        "id": 125780912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845033
    },
    {
        "content": "<p>and I am sitting here in ZFC and remarking that it is trivial</p>",
        "id": 125780962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845056
    },
    {
        "content": "<p>Aah Kenny I just saw your has_mul</p>",
        "id": 125781022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845160
    },
    {
        "content": "<p>well I proved the fundamental theorem of has_mul before</p>",
        "id": 125781063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845167
    },
    {
        "content": "<p>so can you now deduce the fundamental theorem of has_add?</p>",
        "id": 125781069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524845178
    },
    {
        "content": "<p>did you take a look at the <code>transfer</code> paper I linked way back? That's how in core lean they move proofs between <code>int</code> and <code>(a , b) : nat * nat</code>, which (and maybe I'm not understanding the details here very well) is your problem of transporting proofs between isomorphic types?</p>",
        "id": 125781632,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524846017
    },
    {
        "content": "<p>also as far as I can tell from my (limited) experience with hott; isomorphisms are just as hard to deal with as they are in dtt, there's no magic sauce rewriting. you can try reading <a href=\"https://github.com/cmu-phil/Spectral\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral\">https://github.com/cmu-phil/Spectral</a>, which is a lean repository about the Serre spectral sequence</p>",
        "id": 125781815,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524846363
    },
    {
        "content": "<p>I have no idea what a spectral sequence might be, but you can see that dealing with isomorphisms is no easier from reading the source code...</p>",
        "id": 125781820,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524846402
    },
    {
        "content": "<p>Kenny I thought of a much easier challenge for you</p>",
        "id": 125781905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524846567
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism\">https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism</a></p>",
        "id": 125781906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524846575
    },
    {
        "content": "<p>much less boring than topological fields</p>",
        "id": 125781909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524846583
    },
    {
        "content": "<p>can you define <code>mul_to_add</code> at the bottom?</p>",
        "id": 125781965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524846613
    },
    {
        "content": "<p>The <code>over_optimistic</code> theorem is a weak form of univalence. To see how they are related, just plug in <code>eq A</code> for the function <code>F</code>; then <code>A = A</code> is equiv to <code>A = B</code> and hence the latter is also inhabited. It is currently an open question whether this theorem is consistent with lean, but I believe it to be. (It is inconsistent with VM evaluation though.)</p>\n<p>The second part of this conversation has developed a plan for showing that even if you can't prove that all functions are functorial, you might be able to show that all definable functions are functorial by working in the metatheory (i.e. giving a tactic that produces the required term). It is not contradictory that it might be possible that all lean definable terms are functorial in an appropriate sense even if you can't prove it for <em>all</em> terms, as the internal theory understands the quantifier. So this is not a \"proof or counterexample\" kind of question.</p>\n<p>This topic is usually known in the type theory literature as \"parametricity\", and it is on my todo list for my paper.</p>",
        "id": 125781997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524846706
    },
    {
        "content": "<p><code>definition mul_to_add {α β : Type} : equiv' α β → equiv' (has_add α) (has_add β) := sorry</code></p>",
        "id": 125782104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524846868
    },
    {
        "content": "<p>Right, so we are kind of proposing a pragmatic approach to HoTT and univalence</p>",
        "id": 125782105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524846869
    },
    {
        "content": "<p>Kevin, did you see Scott's proposal for a class + decorators?</p>",
        "id": 125782114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524846904
    },
    {
        "content": "<p>I think you won't need to prove any of these \"fundamental theorems\" anymore, once we get that implemented</p>",
        "id": 125782122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524846928
    },
    {
        "content": "<p>So in layman's terms, when can I expect a three-line proof of <code>exact_sequence A B C -&gt; exact_sequence A' B' C'</code> which is just three rewrites?</p>",
        "id": 125782181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847027
    },
    {
        "content": "<p>I would be very happy to work on such a thing</p>",
        "id": 125782183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847034
    },
    {
        "content": "<p>because I really want it :-)</p>",
        "id": 125782184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847038
    },
    {
        "content": "<p>Can I incorporate Scott's proposal into my proofs somehow?</p>",
        "id": 125782188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847073
    },
    {
        "content": "<p>Or is Scott's code purely for someone who is writing a tactic?</p>",
        "id": 125782195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847082
    },
    {
        "content": "<p>I just find these quite fun and satisfying to do by hand, and I feel like if I try to get really good at them</p>",
        "id": 125782232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847105
    },
    {
        "content": "<p>then I might understand better how to write a tactic which is doing some of the job for me</p>",
        "id": 125782238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847119
    },
    {
        "content": "<p>I would be very happy if anyone wanted to comment on <a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonically_isomorphic.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonically_isomorphic.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonically_isomorphic.lean</a></p>",
        "id": 125782248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847174
    },
    {
        "content": "<p>I would really like to get some canonical proofs.</p>",
        "id": 125782252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847186
    },
    {
        "content": "<p>Kenny can you beat any of mine?</p>",
        "id": 125782255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> No, we can't use Scott's proposal yet. The idea is that someone proves inductively the <em>universal</em> fundamental theorem for structures (or probably: inductive types). And then we only need to prove the fundamental theorem for some basic types and we will get all the others for free.</p>",
        "id": 125782394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847415
    },
    {
        "content": "<p>And it seems like Simon thought this was interesting, and might try to implement it pretty soon.</p>",
        "id": 125782443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847463
    },
    {
        "content": "<p>Can you formalise what you think the universal fundamental theorem is?</p>",
        "id": 125782446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847474
    },
    {
        "content": "<p>Hmm, I don't know enough lean yet.</p>",
        "id": 125782448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847488
    },
    {
        "content": "<p>Actually, no.</p>",
        "id": 125782453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847502
    },
    {
        "content": "<p>Can <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 125782457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847507
    },
    {
        "content": "<p>Is there some kind of conjecture we can make?</p>",
        "id": 125782461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847514
    },
    {
        "content": "<p>and give a constructive proof?</p>",
        "id": 125782462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The idea is that we \"tag\" every structure for which we want to prove it. And then actually Lean does it itself.</p>",
        "id": 125782464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847533
    },
    {
        "content": "<p>so like the type class inference machinery?</p>",
        "id": 125782466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847548
    },
    {
        "content": "<p>This is what the <code>@[derive transportable]</code> should do</p>",
        "id": 125782467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847550
    },
    {
        "content": "<p>so can one formulate some theorem which should be true for every...something...which is tagged with this tag?</p>",
        "id": 125782510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847588
    },
    {
        "content": "<p>Lean will see that you are defining some <code>structure</code> and for all its fields it already knows that they are transportable. And thus it proves a theorem for the new structure as well.</p>",
        "id": 125782511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847595
    },
    {
        "content": "<p>In Lean, I mean?</p>",
        "id": 125782512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847596
    },
    {
        "content": "<p>What will the theorem be?</p>",
        "id": 125782514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847615
    },
    {
        "content": "<p>Yes. That theorem is your <code>over_optimistic</code></p>",
        "id": 125782516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847622
    },
    {
        "content": "<p>I see.</p>",
        "id": 125782521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847627
    },
    {
        "content": "<p>And we should be able to prove it for all F tagged with some tag</p>",
        "id": 125782526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847640
    },
    {
        "content": "<p>...automatically?</p>",
        "id": 125782527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847653
    },
    {
        "content": "<p>Well, not <em>we</em> but even Lean</p>",
        "id": 125782528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847654
    },
    {
        "content": "<p>After we taught it the ultimate basics.</p>",
        "id": 125782529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847667
    },
    {
        "content": "<p>and this would be...a tactic?</p>",
        "id": 125782530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Again, I'm not a meta-expert. But basically, it will be an automatically applied tactic.</p>",
        "id": 125782572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847700
    },
    {
        "content": "<p>This is what <code>derive</code> seems to do...</p>",
        "id": 125782573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847710
    },
    {
        "content": "<p>But, I now I'm in waters that I don't really know</p>",
        "id": 125782580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847741
    },
    {
        "content": "<p>I have been fretting over what canonical isomorphism means for many years now</p>",
        "id": 125782587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847746
    },
    {
        "content": "<p>See also my snippet:<br>\n<a href=\"#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365\" title=\"#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365</a></p>",
        "id": 125782596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524847798
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/19663\" target=\"_blank\" title=\"https://mathoverflow.net/a/19663\">https://mathoverflow.net/a/19663</a></p>",
        "id": 125782646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524847828
    },
    {
        "content": "<blockquote>\n<p>Kenny can you beat any of mine?</p>\n</blockquote>\n<p><a href=\"https://github.com/kckennylau/Lean/blob/master/canonically_isomorphic.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/canonically_isomorphic.lean\">https://github.com/kckennylau/Lean/blob/master/canonically_isomorphic.lean</a></p>",
        "id": 125782704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524847946
    },
    {
        "content": "<p>So is this <code>transportable</code> class some completely well-known and well-studied class in type theory?</p>",
        "id": 125782724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524848009
    },
    {
        "content": "<p>I think at least in <em>homotopy</em> type theory</p>",
        "id": 125782965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524848399
    },
    {
        "content": "<p>I like your MO answer</p>",
        "id": 125783111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524848610
    },
    {
        "content": "<p>How do I reduce this goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">A1</span><span class=\"o\">,</span>\n     <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">A2</span><span class=\"o\">,</span>\n     <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n     <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">A4</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">B1</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">B2</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">B3</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">B4</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>into the four goals <code>A1=B1</code>, <code>A2=B2</code> etc?</p>",
        "id": 125783470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524849190
    },
    {
        "content": "<p><code>congr</code></p>",
        "id": 125783473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524849205
    },
    {
        "content": "<blockquote>\n<p>So in layman's terms, when can I expect a three-line proof of <code>exact_sequence A B C -&gt; exact_sequence A' B' C'</code> which is just three rewrites?</p>\n</blockquote>\n<p>What I'm going to write is not what you are hoping for, and unrelated to the big dreams of general transport of structures</p>",
        "id": 125783548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849320
    },
    {
        "content": "<p>But I still think it's useful</p>",
        "id": 125783550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849329
    },
    {
        "content": "<p>I spend most of my Lean time being frustrated by obvious statements, and then see Mario prove them</p>",
        "id": 125783589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849362
    },
    {
        "content": "<blockquote>\n<p>How do I reduce this goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">A1</span><span class=\"o\">,</span>\n     <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">A2</span><span class=\"o\">,</span>\n     <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n     <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">A4</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">B1</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">B2</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">B3</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">B4</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>into the four goals <code>A1=B1</code>, <code>A2=B2</code> etc?</p>\n</blockquote>\n<p>oh and that should be part of your interface</p>",
        "id": 125783597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524849367
    },
    {
        "content": "<p>In my experience, what happens is my mind refuses to decompose the statement and/or think about the proper setup</p>",
        "id": 125783603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849400
    },
    {
        "content": "<p>Then Mario decomposes the problem into three or four lemmas and each of them is a one-liner</p>",
        "id": 125783609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849418
    },
    {
        "content": "<p>So let me try a decomposition in your case</p>",
        "id": 125783626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849448
    },
    {
        "content": "<p>I would define sequences of rings and maps between them (assuming we don't have an abelian categories lib right now).</p>",
        "id": 125783679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849499
    },
    {
        "content": "<p>And the corresponding maps, ie sequences of maps with all squares commuting</p>",
        "id": 125783698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849525
    },
    {
        "content": "<p>Then define complexes as sequences where two consecutive maps compose to zero</p>",
        "id": 125783713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849554
    },
    {
        "content": "<p>prove isomorphic sequences have conjugated maps</p>",
        "id": 125783772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849612
    },
    {
        "content": "<p>deduce a sequence isomorphic to a complex is a complex</p>",
        "id": 125783774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849624
    },
    {
        "content": "<p>define homology of complexes</p>",
        "id": 125783775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849631
    },
    {
        "content": "<p>define exact sequences as acyclic complexes</p>",
        "id": 125783782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849657
    },
    {
        "content": "<p>prove isomorphic complexes have isomorphic homology</p>",
        "id": 125783788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849664
    },
    {
        "content": "<p>deduce your lemma (and the version with n rings instead of only 3)</p>",
        "id": 125783798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849690
    },
    {
        "content": "<p>I'm not saying the total number of lines will be 3</p>",
        "id": 125783804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849716
    },
    {
        "content": "<p>But all those definitions and lemmas will be needed very soon anyway</p>",
        "id": 125783846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849732
    },
    {
        "content": "<p>(with more definitions of course, especially homotopy equivalences and quasi-iso)</p>",
        "id": 125783853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849754
    },
    {
        "content": "<p>You also want a lemma relating my definition of exact sequence to the direct one</p>",
        "id": 125783920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849857
    },
    {
        "content": "<p>So, the proof of your lemma wouldn't by three <code>rw</code> by three <code>apply</code> (or one <code>simp</code> maybe)</p>",
        "id": 125783929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524849893
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">equiv&#39;</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">zfc_u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">equiv&#39;</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">e₁</span> <span class=\"bp\">=</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">j₁</span><span class=\"o\">,</span> <span class=\"n\">ij₁</span><span class=\"o\">,</span> <span class=\"n\">ji₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">j₂</span><span class=\"o\">,</span> <span class=\"n\">ij₂</span><span class=\"o\">,</span> <span class=\"n\">ji₂</span><span class=\"bp\">⟩</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ji₁</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ij₁</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">ij₂</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125783955,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524849960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125783964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524849962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Sweet.</p>",
        "id": 125784003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850016
    },
    {
        "content": "<p>I did Level 1 of Johan's level set!</p>",
        "id": 125784017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850049
    },
    {
        "content": "<p>what level set?</p>",
        "id": 125784020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- level 1</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">simp</span> <span class=\"kn\">end</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"n\">cases</span> <span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">simp</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">--I was repeating myself in that last line.</span>\n  <span class=\"n\">on_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">}</span> <span class=\"c1\">-- I just wrote this</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">Hαβ</span> <span class=\"n\">Hβγ</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">congr</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 125784021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <br>\n<a href=\"#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365\" title=\"#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/.22canonically.22.20identifying.20two.20types/near/125775365</a></p>",
        "id": 125784073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850112
    },
    {
        "content": "<p>Patrick I think your proof is very different to Kenny's</p>",
        "id": 125784079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850127
    },
    {
        "content": "<p>and I like it much better</p>",
        "id": 125784083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850131
    },
    {
        "content": "<p>what is his proof?</p>",
        "id": 125784090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850144
    },
    {
        "content": "<p>and I think that perhaps when Mario said earlier that Kenny should \"work on his long game\", maybe he meant thinking like this</p>",
        "id": 125784095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850154
    },
    {
        "content": "<p>Well, I think we ultimately should have Patrick's idea and Scott's proposal work together.</p>",
        "id": 125784104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850186
    },
    {
        "content": "<p>Kenny</p>",
        "id": 125784107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850196
    },
    {
        "content": "<p>I put the levels up on xena</p>",
        "id": 125784109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850201
    },
    {
        "content": "<p>In other words, a whole series of definitions, that are all tagged with <code>@[derive transport_of_structure]</code></p>",
        "id": 125784161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850213
    },
    {
        "content": "<p>And then we get Kevin's requested lemma for free</p>",
        "id": 125784167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism\">https://github.com/kbuzzard/xena/tree/master/canonical_isomorphism</a></p>",
        "id": 125784240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850366
    },
    {
        "content": "<p>I am one ahead of you</p>",
        "id": 125784241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850370
    },
    {
        "content": "<p>thx</p>",
        "id": 125784242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850375
    },
    {
        "content": "<p>on the Johan challenge</p>",
        "id": 125784245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850383
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean</a></p>",
        "id": 125784262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850413
    },
    {
        "content": "<p>and then <code>derive</code> will work?</p>",
        "id": 125784265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850421
    },
    {
        "content": "<p>How does <code>derive</code> work?</p>",
        "id": 125784267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850425
    },
    {
        "content": "<p>we have to work at the start</p>",
        "id": 125784271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850429
    },
    {
        "content": "<p>and then the machines take over</p>",
        "id": 125784272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850432
    },
    {
        "content": "<p>and then I can have a three line proof of the three lemma</p>",
        "id": 125784313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850445
    },
    {
        "content": "<p>saying that if A -&gt; B -&gt; C is exact then A' -&gt; B' -&gt; C' is exact</p>",
        "id": 125784322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850458
    },
    {
        "content": "<p>all I have to do is prove some diagrams commute</p>",
        "id": 125784326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850476
    },
    {
        "content": "<p>and say that some things are canonically isomorphic</p>",
        "id": 125784328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850483
    },
    {
        "content": "<p>which is obvious in ZFC</p>",
        "id": 125784330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850496
    },
    {
        "content": "<p>Mathematicians will not use this software unless they can do stuff that they find easy in maths, in Lean</p>",
        "id": 125784346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850542
    },
    {
        "content": "<p>and I thought that I enjoyed doing algebraic geometry in Lean</p>",
        "id": 125784350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850552
    },
    {
        "content": "<p>until I ran into this issue</p>",
        "id": 125784351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850557
    },
    {
        "content": "<p>I mean, the mechanism behind <code>@[derive __]</code></p>",
        "id": 125784352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850558
    },
    {
        "content": "<p>Either Simon will write it</p>",
        "id": 125784397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850573
    },
    {
        "content": "<p>or Scott will write it</p>",
        "id": 125784399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850577
    },
    {
        "content": "<p>or I will have to write it</p>",
        "id": 125784400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850580
    },
    {
        "content": "<p>with their help</p>",
        "id": 125784401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850582
    },
    {
        "content": "<p>or you can write it</p>",
        "id": 125784403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850584
    },
    {
        "content": "<p>or Chris</p>",
        "id": 125784404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850586
    },
    {
        "content": "<p>Maybe it would be trivial for Mario, I have no idea</p>",
        "id": 125784414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850607
    },
    {
        "content": "<p>you're this close from listing everyone's name</p>",
        "id": 125784416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850609
    },
    {
        "content": "<p>this close.</p>",
        "id": 125784419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850612
    },
    {
        "content": "<p>but I can certainly believe that the more easy levels we solve by hand</p>",
        "id": 125784424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850620
    },
    {
        "content": "<p>the easier it will be to write the tactic</p>",
        "id": 125784430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850629
    },
    {
        "content": "<p>and I really like solving these levels</p>",
        "id": 125784434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850637
    },
    {
        "content": "<p>they're even better then Zelda</p>",
        "id": 125784438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850645
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_refl</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125784445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850655
    },
    {
        "content": "<p>functor :D</p>",
        "id": 125784446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850657
    },
    {
        "content": "<p>why no use symbol?</p>",
        "id": 125784510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524850718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22\">https://github.com/leanprover/lean/blob/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/meta/derive.lean#L19-L22</a><br>\nand also L44-L45</p>",
        "id": 125784511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> It is indeed a functor, but only on equivalences. That is how Scott first defined it (informally). But I guess we might not want this def'n to depend on a category lib. The category lib probably wants to depend on transport of structure...</p>",
        "id": 125784584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850820
    },
    {
        "content": "<p>By the way, I suggest a name for the tactic that proves transport of structure: <code>chuck_norris</code></p>",
        "id": 125784596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524850854
    },
    {
        "content": "<p>Kenny feel free to make the file a lot better</p>",
        "id": 125784599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850858
    },
    {
        "content": "<p>+1 for <code>chuck_norris</code></p>",
        "id": 125784606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850868
    },
    {
        "content": "<p>but I would be happy to hear alternatives</p>",
        "id": 125784607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850877
    },
    {
        "content": "<p>One of the reasons people go on about <code>sledgehammer</code></p>",
        "id": 125784613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850891
    },
    {
        "content": "<p>is that it has a really cool name</p>",
        "id": 125784616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850895
    },
    {
        "content": "<p>and <code>crush</code> too</p>",
        "id": 125784617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850898
    },
    {
        "content": "<p>I would vote for any Pokemon move name</p>",
        "id": 125784621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524850911
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">inverse_apply_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125784755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">inverse_apply_apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Swap</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Swap</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">inverse_apply_apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125785025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125785027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851563
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Hom1</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom1</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 125785091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- level 2</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">Hβγ</span><span class=\"o\">,</span><span class=\"bp\">⟨</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Hβγ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Hβγ</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">a</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">Hβγ</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">a</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"n\">Hβγ</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">on_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">Hβγ</span> <span class=\"n\">Hγδ</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">congr</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 125785192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851816
    },
    {
        "content": "<p>I see you caught up :-)</p>",
        "id": 125785196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851824
    },
    {
        "content": "<p>I'm faster :P</p>",
        "id": 125785199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851826
    },
    {
        "content": "<p>Kenny you repeat yourself in your code</p>",
        "id": 125785256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851894
    },
    {
        "content": "<p>you say most things twice</p>",
        "id": 125785259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851898
    },
    {
        "content": "<p>this means it is bad code, right?</p>",
        "id": 125785261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851904
    },
    {
        "content": "<p>Can you write better code?</p>",
        "id": 125785263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851921
    },
    {
        "content": "<p>let's see whether you can avoid repeating yourself lol</p>",
        "id": 125785264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524851923
    },
    {
        "content": "<p>You know the dual of an equiv is an equiv</p>",
        "id": 125785268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851932
    },
    {
        "content": "<p>I repeat myself IRL</p>",
        "id": 125785278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524851949
    },
    {
        "content": "<blockquote>\n<p>I'm faster :P</p>\n</blockquote>\n<p>Yes but you're working on my conjecture ;-)</p>",
        "id": 125785354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Hom1</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom1</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Hom2</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom2</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">inverse_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Aut</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Aut</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125785534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852357
    },
    {
        "content": "<p>Kenny my proof of <code>Const.transportable.on_trans</code> is better than yours</p>",
        "id": 125785536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> all done. now I can shorten my proof lol</p>",
        "id": 125785577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852364
    },
    {
        "content": "<p>well</p>",
        "id": 125785585,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852384
    },
    {
        "content": "<p><code>on_trans := λ α β γ Hαβ Hβγ,by congr</code></p>",
        "id": 125785587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852386
    },
    {
        "content": "<p>I like term mode :P</p>",
        "id": 125785589,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852388
    },
    {
        "content": "<p>don't you lie to me</p>",
        "id": 125785592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852399
    },
    {
        "content": "<p>you like golf</p>",
        "id": 125785593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852401
    },
    {
        "content": "<p>lol</p>",
        "id": 125785595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852405
    },
    {
        "content": "<p>:-)</p>",
        "id": 125785599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852411
    },
    {
        "content": "<p>in <code>Fun_transportable.on_equiv</code> you have <code>e.inverse_apply_apply (f x)</code></p>",
        "id": 125785704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852584
    },
    {
        "content": "<p>and I have <code>e.left_inv (f a)</code></p>",
        "id": 125785712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852598
    },
    {
        "content": "<p>which is better?</p>",
        "id": 125785733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852603
    },
    {
        "content": "<p>they say <code>e.symm</code> and etc are more idiomatic</p>",
        "id": 125785854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852782
    },
    {
        "content": "<p>because they are actually simp lemmas</p>",
        "id": 125785871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852818
    },
    {
        "content": "<p>so I can just replace it with <code>by simp</code> and outgolf you</p>",
        "id": 125785877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852824
    },
    {
        "content": "<p>So I should switch to all this <code>apply_inverse_apply</code> stuff?</p>",
        "id": 125785886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852842
    },
    {
        "content": "<p>no, you should use <code>simp</code></p>",
        "id": 125785929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852851
    },
    {
        "content": "<p>And you use <code>coe_to_fun</code> to get the function directly?</p>",
        "id": 125785930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852852
    },
    {
        "content": "<p>yes</p>",
        "id": 125785934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524852861
    },
    {
        "content": "<p>OK I pushed</p>",
        "id": 125786016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524852993
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/johan_challenge.lean</a></p>",
        "id": 125786025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524853018
    },
    {
        "content": "<p>has levels 1 and 2 solved</p>",
        "id": 125786034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524853027
    },
    {
        "content": "<p>and I'll now look at your other work Kenny</p>",
        "id": 125786043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524853043
    },
    {
        "content": "<p>Let me know if you think the solutions can be improved <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 125786048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524853060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"n\">class</span> <span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_refl</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Our goal is an automagic proof of the following (level 20)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"n\">transportable</span> <span class=\"n\">group</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- These we might need to define and prove by hand</span>\n<span class=\"n\">def</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">punit</span>\n<span class=\"n\">def</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Swap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- level 1</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">punit_equiv_punit</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Swap</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Swap</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- And then we can define</span>\n<span class=\"n\">def</span> <span class=\"n\">Hom1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Hom2</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">def</span> <span class=\"n\">Aut</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- And hopefully automagically derive</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Hom1</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom1</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">Fun</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Hom2</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">Hom2</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_congr</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Aut</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Aut</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_congr</span> <span class=\"n\">e</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- If we have all these in place...</span>\n<span class=\"c1\">-- A bit of magic might actually be able to derive `group.transportable` on line 11.</span>\n<span class=\"c1\">-- After all, a group just is a type plus some functions... and we can now transport functions.</span>\n</pre></div>",
        "id": 125786270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524853355
    },
    {
        "content": "<p>golfed</p>",
        "id": 125786273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524853361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125786284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524853383
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\">https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean</a></p>",
        "id": 125786301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524853415
    },
    {
        "content": "<p>This is looking good</p>",
        "id": 125787049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524854453
    },
    {
        "content": "<p>unfortunately, they wrote a destructor for <code>equiv.prod_congr</code> but not <code>equiv.arrow_congr</code></p>",
        "id": 125787068,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524854480
    },
    {
        "content": "<p>Wooah what is going on in that proof of <code>Prod.transportable.on_equiv</code></p>",
        "id": 125787133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524854555
    },
    {
        "content": "<p>that's the example of a good destructor</p>",
        "id": 125787138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524854571
    },
    {
        "content": "<p>kenny you still didn't beat the boss</p>",
        "id": 125787210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524854661
    },
    {
        "content": "<p>who is the boss?</p>",
        "id": 125787228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524854711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Kenny did all your levels</p>",
        "id": 125787429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855022
    },
    {
        "content": "<p>except for group</p>",
        "id": 125787430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855024
    },
    {
        "content": "<p>I thought <code>group</code> is to be automated lol</p>",
        "id": 125787432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524855034
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\">https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean</a></p>",
        "id": 125787439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855059
    },
    {
        "content": "<p>So I think that you were looking for destructors in <code>equiv.lean</code></p>",
        "id": 125787450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855072
    },
    {
        "content": "<p>which is a really good place to look for them</p>",
        "id": 125787454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what is the next move?</p>",
        "id": 125787504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855169
    },
    {
        "content": "<p>Are these solutions in any way useful to help writing a general tactic which would prove <code>equiv a b -&gt; equiv (topological_field a) (topological_field b)</code>?</p>",
        "id": 125787520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855223
    },
    {
        "content": "<p>What needs to be done next?</p>",
        "id": 125787526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855232
    },
    {
        "content": "<p>I'm looking into automating those proofs. I'm keeping it for later tonight, when I've met my writing goals for the week</p>",
        "id": 125787601,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524855360
    },
    {
        "content": "<p>I have a tactic, <code>refine_struct</code>, on the back burner which I might have to finish to facilitate this exercise</p>",
        "id": 125787647,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524855394
    },
    {
        "content": "<p>Simon is there anything I can do to help?</p>",
        "id": 125787731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855556
    },
    {
        "content": "<p>Thanks for offering. Are you thinking of something in particular?</p>",
        "id": 125787876,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524855753
    },
    {
        "content": "<p>I don't understand how <a href=\"#narrow/stream/113488-general/subject/proof.20of.20the.20five.20lemma/near/125768238\" title=\"#narrow/stream/113488-general/subject/proof.20of.20the.20five.20lemma/near/125768238\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/proof.20of.20the.20five.20lemma/near/125768238</a> fits into the picture</p>",
        "id": 125787888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855787
    },
    {
        "content": "<p>Simon I am just interested in the question and it's the weekend</p>",
        "id": 125787896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855799
    },
    {
        "content": "<p>I really enjoyed playing some of Johan's levels</p>",
        "id": 125787907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855814
    },
    {
        "content": "<p>I enjoyed outgolfing kevin :P</p>",
        "id": 125787910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524855829
    },
    {
        "content": "<p>and I wondered if you might say something of the form \"please give me a human proof of <code>foo.transportable</code></p>",
        "id": 125787954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855852
    },
    {
        "content": "<p>because these proofs are all really easy to do</p>",
        "id": 125787958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855867
    },
    {
        "content": "<p>because Kenny has found a million tricks</p>",
        "id": 125787960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855875
    },
    {
        "content": "<p>so the two motivations for doing more levels are</p>",
        "id": 125787970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855898
    },
    {
        "content": "<p>(1) it's fun</p>",
        "id": 125787971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855900
    },
    {
        "content": "<p>(2) it might help you see patterns</p>",
        "id": 125787980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855912
    },
    {
        "content": "<p>(3) it might be necessary to get the automation off the ground</p>",
        "id": 125787984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524855920
    },
    {
        "content": "<p>I don't know how much fun it would be but how do you feel about writing a few sentences on some of the tricks that Kenny found?</p>",
        "id": 125788036,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524855983
    },
    {
        "content": "<p>... or a minimal example for them</p>",
        "id": 125788097,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524856085
    },
    {
        "content": "<p>Ok, really cool</p>",
        "id": 125788446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856672
    },
    {
        "content": "<p>I knew that Hom1 would be easy, given Fun</p>",
        "id": 125788486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856684
    },
    {
        "content": "<p>But currying should also help, right?</p>",
        "id": 125788500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856719
    },
    {
        "content": "<p>to express some of the lemmas in terms of others...</p>",
        "id": 125788504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You did not dissappoint me (-;</p>",
        "id": 125788596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856860
    },
    {
        "content": "<p>:D</p>",
        "id": 125788603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524856865
    },
    {
        "content": "<p>By the way, what do you think... <code>transportable</code> or <code>transport_of_structure</code> ?</p>",
        "id": 125788704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857021
    },
    {
        "content": "<p>I think I actually prefer the latter...</p>",
        "id": 125788707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <code>Aut = Fun \\circ Prod</code>. Doesn't that help?</p>",
        "id": 125788792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857158
    },
    {
        "content": "<p>I hope it does... because that is how a mathematician would prove it...</p>",
        "id": 125788837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857182
    },
    {
        "content": "<p>Aaah, so maybe here is \"level 3\": show that transportable stuff composes</p>",
        "id": 125788844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857208
    },
    {
        "content": "<p>Lean is a nightmare on the machine that I am typing on.</p>",
        "id": 125788852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857229
    },
    {
        "content": "<p>So I can't actually do anything myself (-;</p>",
        "id": 125788859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857243
    },
    {
        "content": "<p>Have you compiled mathlib on this machine?</p>",
        "id": 125788866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524857264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> If you are looking for another small challenge, maybe show that if <code>f</code> and <code>g</code> are transportable, then so is <code>g \\circ f</code>.</p>",
        "id": 125788873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> An old version... it took more then an hour and the machine was unusable and almost overheating.</p>",
        "id": 125788917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857310
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <code>Aut = Fun \\circ Prod</code>. Doesn't that help?</p>\n</blockquote>\n<p>unfortunately the transitive destructor is not available :P</p>",
        "id": 125788922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857334
    },
    {
        "content": "<p>This is a Thinkpad X61: older than my kids...</p>",
        "id": 125788929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857356
    },
    {
        "content": "<p>I might have to prove those destructors</p>",
        "id": 125788933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857368
    },
    {
        "content": "<p>That sounds like it is useful</p>",
        "id": 125788938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857378
    },
    {
        "content": "<p>oh that isn't a transitive destructor though</p>",
        "id": 125789003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857446
    },
    {
        "content": "<p>I mean, <code>@[trans]</code> won't work</p>",
        "id": 125789007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857451
    },
    {
        "content": "<p>here is a recent Lean tip -- occasionally get your file and give it a good shake</p>",
        "id": 125789226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> how is Aut = Fun \\o Prod?</p>",
        "id": 125789235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857831
    },
    {
        "content": "<p>I think Gabriel changed the VS Code Lean extension</p>",
        "id": 125789241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857841
    },
    {
        "content": "<p>so it only compiles parts of the file</p>",
        "id": 125789244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857848
    },
    {
        "content": "<p>and sometimes it can get confused</p>",
        "id": 125789246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857857
    },
    {
        "content": "<p>the compiler is very slow for me recently</p>",
        "id": 125789247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857858
    },
    {
        "content": "<p>I often have to wait 10+ minutes before things compile</p>",
        "id": 125789249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857865
    },
    {
        "content": "<p>and giving it a shake works well for me</p>",
        "id": 125789250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857866
    },
    {
        "content": "<p>oh that's not good</p>",
        "id": 125789253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> That was a bit of a brain-fart. Sorry</p>",
        "id": 125789302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857915
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">transportable</span><span class=\"bp\">.</span><span class=\"n\">on_refl</span> <span class=\"n\">transportable</span><span class=\"bp\">.</span><span class=\"n\">on_trans</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transportable</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">transportable</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">transportable</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">transportable</span><span class=\"bp\">.</span><span class=\"n\">on_equiv</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">transportable</span><span class=\"bp\">.</span><span class=\"n\">on_equiv</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125789314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857947
    },
    {
        "content": "<p>Mi mas go slip nau. Gutpela wok olgeta! Lukim!</p>",
        "id": 125789315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857948
    },
    {
        "content": "<p>I like my addition</p>",
        "id": 125789317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857951
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\">https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean</a></p>",
        "id": 125789318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857953
    },
    {
        "content": "<blockquote>\n<p>I don't know how much fun it would be but how do you feel about writing a few sentences on some of the tricks that Kenny found?</p>\n</blockquote>\n<p>I would love to do that.</p>",
        "id": 125789320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524857958
    },
    {
        "content": "<p>tok pisin :o</p>",
        "id": 125789322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524857962
    },
    {
        "content": "<p>Em nau.</p>",
        "id": 125789327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524857987
    },
    {
        "content": "<p>Hey! <code>topological_ring _</code> is a <code>Prop</code> not a <code>Type</code></p>",
        "id": 125790151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859280
    },
    {
        "content": "<p><code>theorem topological_ring.transportable : transportable topological_ring := sorry</code></p>",
        "id": 125790167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859310
    },
    {
        "content": "<p>gives an error</p>",
        "id": 125790210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859327
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">transportable</span> <span class=\"n\">topological_ring</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">topological_ring</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125790214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859331
    },
    {
        "content": "<p>My new toy is broken</p>",
        "id": 125790240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859393
    },
    {
        "content": "<p><code>class transportable (f : Type u → Type v) :=</code></p>",
        "id": 125790251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859415
    },
    {
        "content": "<p>it's not that it's a prop</p>",
        "id": 125790311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859457
    },
    {
        "content": "<p>is the issue that it's not a function?</p>",
        "id": 125790314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859464
    },
    {
        "content": "<p>right</p>",
        "id": 125790321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524859474
    },
    {
        "content": "<p>but a topological ring is the same as a group</p>",
        "id": 125790331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859487
    },
    {
        "content": "<p>if I have a topological ring structure on X and a canonical isomorphism <code>X -&gt; Y</code> then I want a topological ring structure on <code>Y</code></p>",
        "id": 125790357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524859528
    },
    {
        "content": "<p>What is <code>theorem topological_ring.transportable </code> ?</p>",
        "id": 125790950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">topological_ring</span>\n</pre></div>",
        "id": 125791009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860421
    },
    {
        "content": "<p>this doesn't typecheck</p>",
        "id": 125791026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">topological_ring</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"n\">transportable</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n    <span class=\"bp\">@</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125791027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860460
    },
    {
        "content": "<p>What am I doing wrong?</p>",
        "id": 125791031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860465
    },
    {
        "content": "<p>Simon -- I was writing some goals in the docs</p>",
        "id": 125791039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860476
    },
    {
        "content": "<p>and transfer of a topological ring structure is one of the goals</p>",
        "id": 125791044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860486
    },
    {
        "content": "<p>we can write this</p>",
        "id": 125791207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860709
    },
    {
        "content": "<p><code>def transport_ring {α β : Type} [topological_field α] (f : α ≃ β) : topological_field β := sorry</code></p>",
        "id": 125791210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860718
    },
    {
        "content": "<p>but I don't understand how to embed it in the <code>transportable</code> class</p>",
        "id": 125791214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860730
    },
    {
        "content": "<p>Kenny you posted this earlier:</p>",
        "id": 125792177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862130
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transport_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_left_neg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">left_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">right_distrib</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125792187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862144
    },
    {
        "content": "<p>and if I change the top lines to</p>",
        "id": 125792191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">transport_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125792208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862191
    },
    {
        "content": "<p>then your code doesn't compile any more</p>",
        "id": 125792210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862197
    },
    {
        "content": "<p>this is interesting</p>",
        "id": 125792257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524862212
    },
    {
        "content": "<p>Are you only proving <code>transport_ring</code> for types in the same universe, and is this easier to do than the general case?</p>",
        "id": 125792259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862220
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_structures</span>\n\n<span class=\"n\">def</span> <span class=\"n\">transport_topological_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_ring</span> <span class=\"n\">β</span> <span class=\"n\">sorry</span> <span class=\"n\">sorry</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125792706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862830
    },
    {
        "content": "<p>I doesn't seem like it would be any easier in the same universe.</p>",
        "id": 125792744,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524862889
    },
    {
        "content": "<p>Least it typechecks</p>",
        "id": 125792746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862890
    },
    {
        "content": "<p>I tried putting Kenny's proof into the same universe and there were still errors</p>",
        "id": 125792751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862908
    },
    {
        "content": "<p>there are universe subtleties I don't understand</p>",
        "id": 125792754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862915
    },
    {
        "content": "<p>Chris this is all your fault :-)</p>",
        "id": 125792796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862930
    },
    {
        "content": "<p>You proved the lemma only for rings canonically isomorphic to the rings I wanted</p>",
        "id": 125792804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524862943
    },
    {
        "content": "<p>By adding more <code>transportable</code> classes for type constructors with multiple arguments, we could extend these ideas to situations where we have an isomorphism which respects some existing structure and we want to transport some additional structure (or property) across it. Here is a sketch of the idea: <a href=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\">https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad</a></p>",
        "id": 125795177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524866744
    },
    {
        "content": "<p>The key point is the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_homeomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tα</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tβ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tβ</span> <span class=\"bp\">=</span> <span class=\"n\">transport</span> <span class=\"n\">topological_space</span> <span class=\"n\">e</span> <span class=\"n\">tα</span>\n</pre></div>\n\n\n<p>which seems to be more fundamental than the category-style definition \"continuous function with a continuous inverse\", since the definition of <code>transport</code> does not even need the notion of continuous function.</p>",
        "id": 125795238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524866805
    },
    {
        "content": "<p>This proof does not work:</p>",
        "id": 125795266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">punit</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">punit_equiv_punit</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 125795307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866884
    },
    {
        "content": "<p>but this proof works:</p>",
        "id": 125795310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866887
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">punit</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Const</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">punit_equiv_punit</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 125795316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866903
    },
    {
        "content": "<p>and this proof works:</p>",
        "id": 125795325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Const&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">punit</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Const&#39;</span><span class=\"bp\">.</span><span class=\"n\">transportable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">transportable</span> <span class=\"n\">Const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">on_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">on_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">on_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">Hαβ</span> <span class=\"n\">Hβγ</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">congr</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 125795331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524866947
    },
    {
        "content": "<p>I am interested in the idea of filling in fields using tactics but I can only use <code>congr</code> if I set it up in a certain way</p>",
        "id": 125795386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867012
    },
    {
        "content": "<blockquote>\n<p>did you take a look at the <code>transfer</code> paper I linked way back? That's how in core lean they move proofs between <code>int</code> and <code>(a , b) : nat * nat</code>, which (and maybe I'm not understanding the details here very well) is your problem of transporting proofs between isomorphic types?</p>\n</blockquote>\n<p>Can you remind me of the link?</p>",
        "id": 125795472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span></p>",
        "id": 125795475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867163
    },
    {
        "content": "<p>My search skills are weak today</p>",
        "id": 125795476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867175
    },
    {
        "content": "<blockquote>\n<p>The key point is the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_homeomorphism</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tα</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tβ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tβ</span> <span class=\"bp\">=</span> <span class=\"n\">transport</span> <span class=\"n\">topological_space</span> <span class=\"n\">e</span> <span class=\"n\">tα</span>\n</pre></div>\n\n\n<p>which seems to be more fundamental than the category-style definition \"continuous function with a continuous inverse\", since the definition of <code>transport</code> does not even need the notion of continuous function.</p>\n</blockquote>\n<p>At some point I am going to want more than just an equiv -- I will want that two canonical isomorphisms <code>equiv A A'</code> and <code>equiv B B'</code> commute with some given maps <code>A -&gt; B</code> and <code>A' -&gt; B'</code> which are both \"defined naturally\".</p>",
        "id": 125795552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867287
    },
    {
        "content": "<p>For example Reid, I proved that if <code>D(g) sub D(f)</code> then not only is <code>f</code> a unit in <code>R[1/g]</code>, but the rings <code>R[1/g]</code> and <code>R[1/f][1/gbar]</code> were canonically isomorphic, where <code>gbar</code> is the image of <code>g</code> in <code>R[1/f]</code></p>",
        "id": 125795611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867365
    },
    {
        "content": "<p>And by \"prove that they're canonically isomorphic\" I mean in practice that I proved that I could write down an isomorphism of R-algebras which was also the unique R-algebra homomorphism in either direction.</p>",
        "id": 125795634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867428
    },
    {
        "content": "<p>and I am pretty sure that I don't need to prove any more \"canonicalness\" for my application to schemes.</p>",
        "id": 125795640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867445
    },
    {
        "content": "<p>The idea is that <code>f : R</code> is now fixed</p>",
        "id": 125795686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867484
    },
    {
        "content": "<p>and <code>g : { g : R // D(g) sub D(f) }</code> varies</p>",
        "id": 125795695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867516
    },
    {
        "content": "<p>and <code>A g := R[1/g]</code></p>",
        "id": 125795699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867535
    },
    {
        "content": "<p>and <code>A' g := R[1/f][1/gbar]</code></p>",
        "id": 125795702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867541
    },
    {
        "content": "<p>Does this fit into your \"extra structure\" idea?</p>",
        "id": 125795711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524867555
    },
    {
        "content": "<p><code>B</code> is <code>A g'</code> for another <code>g'</code>?</p>",
        "id": 125795894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524867876
    },
    {
        "content": "<p>Or something else entirely?</p>",
        "id": 125795909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524867912
    },
    {
        "content": "<p>I'm back</p>",
        "id": 125795971,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868011
    },
    {
        "content": "<p>It sounds like you want to prove that your isomorphism between <code>R[1/g]</code> and <code>R[1/f][1/gbar]</code> is natural (in the category theory sense) when these two localization constructions are viewed as functors of something (R and/or g?), and that is probably not a purely formal fact that follows from transporting across \"equalities\". (On the other hand, it is probably a slightly less formal fact that follows easily from some universal property.)</p>",
        "id": 125796055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524868133
    },
    {
        "content": "<p>docs</p>",
        "id": 125796240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868417
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonical.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonical.md\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/canonical.md</a></p>",
        "id": 125796244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868424
    },
    {
        "content": "<p>permanlink</p>",
        "id": 125796245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868426
    },
    {
        "content": "<p>speaking of which, it's almost a month since your last post in xena</p>",
        "id": 125796294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868469
    },
    {
        "content": "<p>don't know how to do permalink</p>",
        "id": 125796296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868479
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md\">https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md</a></p>",
        "id": 125796298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868497
    },
    {
        "content": "<p>there you go</p>",
        "id": 125796299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868499
    },
    {
        "content": "<p>try deleting the file :P</p>",
        "id": 125796303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868505
    },
    {
        "content": "<p>I want to focus on schemes Kenny, and I guess the situation is that it would be nice to resolve this canonical isomorphism issue before I go any further</p>",
        "id": 125796305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868507
    },
    {
        "content": "<p>I will probably blog about this though</p>",
        "id": 125796313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524868515
    },
    {
        "content": "<p>should I write a guest post</p>",
        "id": 125796317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524868525
    },
    {
        "content": "<p>(You can click on the commit id near the right side of the blue bar, and then View)</p>",
        "id": 125796376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524868583
    },
    {
        "content": "<p>Let me address the question at the end of those docs, since your \"three lemma\" was what prompted the gist I linked earlier.<br>\nYou could define a structure indexed on A B C that consists of abelian group structures on A B C and group homomorphisms f : A -&gt; B and g : B -&gt; C. The input to the \"three lemma\" is an isomorphism of such structures.<br>\nThe further structure would be exactness of the sequence, i.e., the equation ker g = im f; that's what you want to transport to the new sequence.</p>",
        "id": 125796713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524869152
    },
    {
        "content": "<p>Simply transporting the combined structure of \"being an exact sequence\" across your isomorphisms A -&gt; A', B -&gt; B', C -&gt; C' won't be enough, since you also need to know that the transported group structures and maps agree with your original ones.</p>",
        "id": 125796852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524869340
    },
    {
        "content": "<p>(for which you need precisely that the maps are group isomorphisms and the squares commute)</p>",
        "id": 125796860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524869358
    },
    {
        "content": "<p>I guess if you had lemmas to calculate the components of the transported structure, then that would be another way to do it.</p>",
        "id": 125796932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524869487
    },
    {
        "content": "<p>I need to make dinner but I'll try to produce some example code later</p>",
        "id": 125797044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524869694
    },
    {
        "content": "<p>I see! I find it much easier to understand this example.</p>",
        "id": 125797105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524869809
    },
    {
        "content": "<p>So one makes a new structure</p>",
        "id": 125797107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524869822
    },
    {
        "content": "<p>and then attempts to transport it</p>",
        "id": 125797113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524869828
    },
    {
        "content": "<p>This sounds like a beautiful way of thinking about it.</p>",
        "id": 125797115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524869834
    },
    {
        "content": "<p>Kenny you are welcome to write a guest post</p>",
        "id": 125797487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524870443
    },
    {
        "content": "<p>On whatever topic you like</p>",
        "id": 125797493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524870454
    },
    {
        "content": "<p>the transfer paper is here:  <a href=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\" target=\"_blank\" title=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\">https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf</a></p>",
        "id": 125798645,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524872430
    },
    {
        "content": "<p>Thanks Andrew.</p>",
        "id": 125798996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873054
    },
    {
        "content": "<p>Reid -- you probably know the full story anyway, but let me spell it out.</p>",
        "id": 125799001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873066
    },
    {
        "content": "<p>Chris proved a lemma saying that if <code>R</code> is a ring and <code>f1,f2,...,fn</code> are elements which generate the unit ideal, then the structure sheaf on Spec(R) satisfies the sheaf axiom with respect to the open cover D(f1),..,D(fn).</p>",
        "id": 125799058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873137
    },
    {
        "content": "<p>Formally, as you know, this says that the canonical map from <code>R</code> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Π</mi><mi>i</mi></msub><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msub><mi>f</mi><mi>i</mi></msub><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\Pi_i R[1/f_i]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is an injection,</p>",
        "id": 125799065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873185
    },
    {
        "content": "<p>with image equal to the kernel of the usual map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Π</mi><mi>i</mi></msub><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msub><mi>f</mi><mi>i</mi></msub><mo>]</mo><mo>→</mo><msub><mi mathvariant=\"normal\">Π</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msub><mi>f</mi><mi>i</mi></msub><msub><mi>f</mi><mi>j</mi></msub><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\Pi_i R[1/f_i] \\to \\Pi_{i,j} R[1/f_if_j]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 125799110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873245
    },
    {
        "content": "<p>and note that this latter map sends <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mi>s</mi><mi>i</mi></msub><msub><mo>)</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(s_i)_{i\\in I}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mi>s</mi><mi>i</mi></msub><mo>−</mo><msub><mi>s</mi><mi>j</mi></msub><msub><mo>)</mo><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(s_i-s_j)_{i,j}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span></p>",
        "id": 125799118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873289
    },
    {
        "content": "<p>which is not a ring homomorphism</p>",
        "id": 125799120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873300
    },
    {
        "content": "<p>but it is a difference of two such</p>",
        "id": 125799128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873304
    },
    {
        "content": "<p>and hence the whole map is a group homomorphism</p>",
        "id": 125799133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873312
    },
    {
        "content": "<p>Now I have done some abstract ring theory in Lean over the last few weeks, working on \"an interface for localisation\"</p>",
        "id": 125799137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873334
    },
    {
        "content": "<p>and I have now proved some technical lemma which says that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo><mo>⊆</mo><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(g)\\subseteq D(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> is canonically isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>b</mi><mi>a</mi><mi>r</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f][1/gbar]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 125799181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873383
    },
    {
        "content": "<p>with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi>b</mi><mi>a</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">gbar</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span></span> the image of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span></p>",
        "id": 125799182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873391
    },
    {
        "content": "<p>and canonical isomorphism for me at this point means that we are given an element of <code>equiv</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R[1/g])</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>b</mi><mi>a</mi><mi>r</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R[1/f][1/gbar])</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 125799191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873436
    },
    {
        "content": "<p>(maths notation is better than Lean)</p>",
        "id": 125799193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873458
    },
    {
        "content": "<p>with the following wonderful properties:</p>",
        "id": 125799194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873467
    },
    {
        "content": "<p>1) the functions are ring homs (and hence ring isoms)</p>",
        "id": 125799236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873492
    },
    {
        "content": "<p>2) The only <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra hom from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mi>b</mi><mi>a</mi><mi>r</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f][1/gbar]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> is our given element.</p>",
        "id": 125799238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873531
    },
    {
        "content": "<p>I am _hoping_ that this is a good definition of \"canonical isomorphism\" here.</p>",
        "id": 125799246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873545
    },
    {
        "content": "<p>These are the facts which I isolated as important</p>",
        "id": 125799249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873553
    },
    {
        "content": "<p>I made a structure for each of them</p>",
        "id": 125799250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873560
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">R_alg_equiv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm</span>\n<span class=\"bp\">_</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sβ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ring_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">R_alg_hom</span> <span class=\"o\">:</span> <span class=\"n\">sβ</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"err\">∘</span> <span class=\"n\">sα</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125799308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873658
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">is_unique_R_alg_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sβ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">sα</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">sβ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">R_alg_hom</span> <span class=\"o\">:</span> <span class=\"n\">sβ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">sα</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">sβ</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">sα</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125799360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873723
    },
    {
        "content": "<p>(NB it was <code>is_unique_R_alg_hom</code> which I noticed was not a <code>Prop</code> even though it could be -- I made it a Prop.)</p>",
        "id": 125799370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873764
    },
    {
        "content": "<p>I have lots of cunning ways of producing unique R-algebra homs</p>",
        "id": 125799381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873810
    },
    {
        "content": "<p>for example given a ring hom <code>R -&gt; \\beta</code> with the property that every element of a mult subset <code>S</code> gets sent to a unit</p>",
        "id": 125799386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873836
    },
    {
        "content": "<p>I have a unique <code>R</code>-alg com <code>R[1/S] -&gt; beta</code></p>",
        "id": 125799428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873848
    },
    {
        "content": "<p>I am hoping that the ideas I already have will be enough to see me through</p>",
        "id": 125799431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873871
    },
    {
        "content": "<p>so I am going to try and define the structures that we want to identify and then see if I can figure out what needs doing.</p>",
        "id": 125799440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> In short I am saying that your proof of exactness being preserved stinks</p>",
        "id": 125799448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873925
    },
    {
        "content": "<p>and it would be better to have a proof which looks a whole lot more abstract</p>",
        "id": 125799454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873942
    },
    {
        "content": "<p>because then when next week I have to prove something ten times longer but just as trivial</p>",
        "id": 125799497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873966
    },
    {
        "content": "<p>we can get xena to do it for us</p>",
        "id": 125799500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524873975
    },
    {
        "content": "<p>Wow... a lot happened while I slept. :-)</p>",
        "id": 125800546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524875880
    },
    {
        "content": "<p>Let this be a lesson to you: don't sleep</p>",
        "id": 125800763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524876225
    },
    {
        "content": "<p>Does this look OK:</p>",
        "id": 125801226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877191
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"c1\">-- recall the interface for equiv:</span>\n<span class=\"c1\">-- C : equiv α β;</span>\n<span class=\"c1\">-- the function is C, the function the other way is C.symm, which is also the equiv the other way</span>\n<span class=\"c1\">-- and the proofs are C.inverse_apply_apply and C.apply_inverse_apply</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u&#39;</span> <span class=\"n\">v&#39;</span> <span class=\"n\">w&#39;</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"c1\">-- Scott&#39;s basic class.</span>\n<span class=\"n\">class</span> <span class=\"n\">transportable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_refl</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">on_trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">on_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on_equiv</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u&#39;</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v&#39;</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w&#39;</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">canonically_isomorphic_functions</span>\n<span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cβ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"c1\">-- extends equiv α α&#39;, equiv β β&#39;</span>\n<span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Cβ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"c1\">-- is there a better way to do this with &quot;extends&quot;?</span>\n\n<span class=\"c1\">-- Do I need an interface for this? Why can&#39;t I make this a simp lemma?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">canonically_isomorphic_functions</span><span class=\"bp\">.</span><span class=\"n\">diag_commutes</span>\n<span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cβ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cα</span> <span class=\"n\">Cβ</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Cβ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">commutes</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">canonically_isomorphic_functions</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">canonically_isomorphic_functions</span>\n<span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">canonically_isomorphic_functions</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cβ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cα</span> <span class=\"n\">Cβ</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"bp\">→</span>\n<span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">Cβ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f&#39;</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"n\">Cα</span> <span class=\"n\">Cβ</span> <span class=\"n\">Cf</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">Cβ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"o\">(</span><span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">Cβ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">Cβ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Cf</span><span class=\"bp\">.</span><span class=\"n\">commutes</span> <span class=\"o\">(</span><span class=\"n\">Cα</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">definition</span> <span class=\"n\">canonically_isomorphic_functions</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">γ&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cβ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cγ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">γ</span> <span class=\"n\">γ&#39;</span><span class=\"o\">),</span>\n<span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cα</span> <span class=\"n\">Cβ</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"bp\">→</span>\n<span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cβ</span> <span class=\"n\">Cγ</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"bp\">→</span>\n<span class=\"n\">canonically_isomorphic_functions</span> <span class=\"n\">Cα</span> <span class=\"n\">Cγ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"n\">Cα</span> <span class=\"n\">Cβ</span> <span class=\"n\">Cγ</span> <span class=\"n\">Cf</span> <span class=\"n\">Cg</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">Cγ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">Cα</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cg</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"o\">,</span><span class=\"n\">Cf</span><span class=\"bp\">.</span><span class=\"n\">commutes</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125801228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877200
    },
    {
        "content": "<p>Scott, I was inspired by your structure</p>",
        "id": 125801279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877218
    },
    {
        "content": "<p>Did you see the docs?</p>",
        "id": 125801280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877221
    },
    {
        "content": "<p>It's a summary of what happened</p>",
        "id": 125801284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Can you fit these canonically isomorphic functions into your way of thinking?</p>",
        "id": 125801299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Johan expanded out your idea into a series of little definitions</p>",
        "id": 125801342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877338
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> filled them all in</p>",
        "id": 125801345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877348
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean\">https://github.com/kckennylau/Lean/blob/master/johan_challenge.lean</a></p>",
        "id": 125801346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> wrote something I didn't understand yet:</p>",
        "id": 125801350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877365
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\">https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad</a></p>",
        "id": 125801351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877366
    },
    {
        "content": "<p>and I wrote some docs</p>",
        "id": 125801359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877387
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md\">https://github.com/kbuzzard/xena/blob/e77228397ad21215a927f93d315edf3cbadbc567/canonical_isomorphism/canonical.md</a></p>",
        "id": 125801360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877388
    },
    {
        "content": "<p>and now I am wondering about whether it's a good idea to think of the concept that a square with equivs down the sides commutes</p>",
        "id": 125801407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877454
    },
    {
        "content": "<p>as an equiv between the other two sides</p>",
        "id": 125801411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877461
    },
    {
        "content": "<p>The definition doesn't seem to fit into your \"transportable\" yoga</p>",
        "id": 125801426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877507
    },
    {
        "content": "<p>and this</p>",
        "id": 125801480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877607
    },
    {
        "content": "<p><code>theorem topological_ring.transportable : transportable topological_ring := sorry</code></p>",
        "id": 125801481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877610
    },
    {
        "content": "<p>is a type mismatch</p>",
        "id": 125801482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877613
    },
    {
        "content": "<p>but on the other hand I am pretty sure I want to transport topological rings</p>",
        "id": 125801490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I wrote docs</p>",
        "id": 125801495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877644
    },
    {
        "content": "<p>Do you want me to add anything else?</p>",
        "id": 125801497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877651
    },
    {
        "content": "<p>I am currently working on formalising a high-level proof of the exactness statement I want</p>",
        "id": 125801499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877668
    },
    {
        "content": "<p>I haven't really caught up on any of the recent discussion, but regarding the commutative square with two equivs <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>e</mi><mi>A</mi></msub><mo>:</mo><mi>A</mi><mo>→</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e_A : A \\to A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.901892em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">:</span><span class=\"mord mathit\">A</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>e</mi><mi>B</mi></msub><mo>:</mo><mi>B</mi><mo>→</mo><msup><mi>B</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e_B : B \\to B'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.901892em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">:</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, my current way of thinking about this is that transporting the structure of a map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\">A</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> along these two equivs produces a map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup><mo>→</mo><msup><mi>B</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A' \\to B'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> which will be given by the formula <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>e</mi><mi>B</mi></msub><mo>∘</mo><mi>f</mi><mo>∘</mo><msubsup><mi>e</mi><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">e_B \\circ f \\circ e_A^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.854239em;\"></span><span class=\"strut bottom\" style=\"height:1.14777em;vertical-align:-0.293531em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∘</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin\">∘</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.4064690000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.293531em;\"></span></span></span></span></span></span></span></span></p>",
        "id": 125801605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524877811
    },
    {
        "content": "<p>and the condition that your square commutes can then be reinterpreted as saying that the bottom map is the map that you get by transporting the top map along the sides</p>",
        "id": 125801610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524877844
    },
    {
        "content": "<p>So is this a relation between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>f</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> like <code>equiv</code>?</p>",
        "id": 125801620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877888
    },
    {
        "content": "<p>Or is this a transportation of the structure?</p>",
        "id": 125801622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks! </p>\n<blockquote>\n<p>I am currently working on formalising a high-level proof of the exactness statement I want</p>\n</blockquote>\n<p>That's a good idea. Maybe apologize everywhere you'd expect to derive a transferable instance</p>",
        "id": 125801623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524877908
    },
    {
        "content": "<p>Right</p>",
        "id": 125801661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877924
    },
    {
        "content": "<p>or admit defeat</p>",
        "id": 125801664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524877935
    },
    {
        "content": "<p>Which in turn, is going to be the condition you need to know that the fact that you transported across the isomorphisms (like exactness) is actually about your original maps A' -&gt; B' -&gt; C'.</p>",
        "id": 125801665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524877939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I finished writing up the proof of the \"three lemma\" from <code>transportable</code> instances/lemmas which could plausibly be autogenerated. It's still pretty gross and could probably use some refinement.<br>\n<a href=\"https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff\">https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff</a></p>",
        "id": 125803762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524882823
    },
    {
        "content": "<p>Updated version uses a simp attribute to handle all the goals at once</p>",
        "id": 125804891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524885530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, you might also be interested in the above--stuff defined as <code>magic</code> is what I would like to have autogenerated</p>",
        "id": 125805096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524886013
    },
    {
        "content": "<blockquote>\n<p>By adding more <code>transportable</code> classes for type constructors with multiple arguments, we could extend these ideas to situations where we have an isomorphism which respects some existing structure and we want to transport some additional structure (or property) across it. Here is a sketch of the idea: <a href=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\">https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad</a></p>\n</blockquote>\n<p>I want some emphasis on this remark by Reid.</p>",
        "id": 125805104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886078
    },
    {
        "content": "<p>This is very important. And our current proposal does not fit...</p>",
        "id": 125805143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886103
    },
    {
        "content": "<p>So, how about this: Every time we define/prove a coercion, we also derive <code>transportable2</code> in the other direction.</p>",
        "id": 125805146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886142
    },
    {
        "content": "<p>Which means, if you have two <code>int</code> that are equal, and one of them came from a <code>nat</code>, then the other one came from the same <code>nat</code></p>",
        "id": 125805153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886178
    },
    {
        "content": "<p>But also, if you have a <code>ring R</code> that is group-isomorphic to some <code>group G</code>, then you get a ring structure on <code>G</code> for free, and the underlying group structure of this new ring structure is exactly the group structure on <code>G</code> that you started with.</p>",
        "id": 125805210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886269
    },
    {
        "content": "<p>I think coercions exactly determine where transport of structure applies.</p>",
        "id": 125805211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is what I'm saying canonically isomorphic to your remarks? I.e., did I transport the structure of your remarks?</p>",
        "id": 125805440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524886873
    },
    {
        "content": "<p>So I pushed my work on \"canonically isomorphic functions\" between canonically isomorphic types</p>",
        "id": 125806580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889237
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/sheaf_canonical.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/sheaf_canonical.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/sheaf_canonical.lean</a></p>",
        "id": 125806581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889253
    },
    {
        "content": "<p>Let me state what I think the state of things is</p>",
        "id": 125806594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889280
    },
    {
        "content": "<p>We had an idea about defining a class called transportable</p>",
        "id": 125806595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889295
    },
    {
        "content": "<p>and I want to define a structure called a canonical isomorphism</p>",
        "id": 125806597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889310
    },
    {
        "content": "<p>which doesn't have to be the maths one</p>",
        "id": 125806598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889319
    },
    {
        "content": "<p>but it has to be good enough to deal the mortal blow to the final boss in affine schemes.</p>",
        "id": 125806638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889344
    },
    {
        "content": "<p>Transportable originally ate a function <code>Type -&gt; Type</code> or perhaps <code>Type u -&gt; Type v</code> depending on what mood people were in. Because this is a CS thing I suppose we will end up with <code>Type u -&gt; Type v</code></p>",
        "id": 125806648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889420
    },
    {
        "content": "<p>But now we want it to eat more</p>",
        "id": 125806649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889432
    },
    {
        "content": "<p>for example we want it to eat the instance of the type class resolution system which sends a ring to an additive group</p>",
        "id": 125806690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889478
    },
    {
        "content": "<p>and spit out a theorem that says that if a equiv a' then the square commutes up to definitional equality.</p>",
        "id": 125806699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889536
    },
    {
        "content": "<p>by which I mean Lean definitional equality, ideally.</p>",
        "id": 125806700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889551
    },
    {
        "content": "<p>the square goes from ring a to ring a' on the top, from group a to group a' on the bottom, and the maps down are coming from the type class inference system</p>",
        "id": 125806742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889603
    },
    {
        "content": "<p>So which instances of type class inference will commute with equiv in this way?</p>",
        "id": 125806745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889620
    },
    {
        "content": "<p>Can we not _assume_ that if alpha is a type which happens to have both a group structure and a ring structure then the group structure associated to the ring structure is the one which the type class inference system would associate to the ring structure?</p>",
        "id": 125806802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889766
    },
    {
        "content": "<p>Because if this is not the case then the Diamond is nigh, right?</p>",
        "id": 125806803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889777
    },
    {
        "content": "<p>So this would seem like the correct theorem to prove</p>",
        "id": 125806843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889805
    },
    {
        "content": "<p>Oh I have a question <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> !</p>",
        "id": 125806848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889825
    },
    {
        "content": "<p>Kevin, I'm not sure how helpful this remark will be, but your <code>canonically_isomorphic_functions Cα Cβ f f'</code> is in my setup <code>f' = transport2 (→) Cα Cβ f</code></p>",
        "id": 125806849,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524889827
    },
    {
        "content": "<p>Do you know those WIP docs?</p>",
        "id": 125806850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889831
    },
    {
        "content": "<p>a tactic that takes two types, a function relating the two, and from Prop (input 1) return Prop (input 2), is that what people are discussing?</p>",
        "id": 125806852,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524889849
    },
    {
        "content": "<p>Mario gave me an example of a way to break the type class resolution system in a really annoying way</p>",
        "id": 125806853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889852
    },
    {
        "content": "<p>What happens if you try and prove that those maps are all canonical?</p>",
        "id": 125806858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889864
    },
    {
        "content": "<p>Does that make any sense?</p>",
        "id": 125806861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889868
    },
    {
        "content": "<p>Reid, I am sure you are thinking about it in a better way than me</p>",
        "id": 125806863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889886
    },
    {
        "content": "<p>and I am absolutely convinved that we should get this as abstract as possible</p>",
        "id": 125806865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889898
    },
    {
        "content": "<p>thanks for the pointer!</p>",
        "id": 125806866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524889903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Yes, more or less.</p>",
        "id": 125806904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524889925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm not sure what you mean by coercion. Are you talking about <code>has_coe</code>?</p>",
        "id": 125806908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524889971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> The basic example. Given <code>a b : Type</code>, <code>equiv a b</code> and also <code>[group a]</code> we want to automagically have <code>group b</code></p>",
        "id": 125806909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524889979
    },
    {
        "content": "<p>i'll mention again the transfer tactic in core lean that produces <code>int</code> from <code>pairs of nat</code>, and the paper that describes it is linked earlier... unless i'm totally off-base</p>",
        "id": 125806915,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524890008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm still a novice. But I guess that is what I mean.</p>",
        "id": 125806917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890013
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md\">https://github.com/kbuzzard/mathlib/blob/WIP_docs/docs/WIPs/type_class_inference.md</a></p>",
        "id": 125806918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890033
    },
    {
        "content": "<p>In the \"to be tidied\" section</p>",
        "id": 125806958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890051
    },
    {
        "content": "<p>there is Mario busting the type class inference system</p>",
        "id": 125806960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890059
    },
    {
        "content": "<p>following an idea of mine</p>",
        "id": 125806962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890067
    },
    {
        "content": "<p>trying to find a fairly explicit example of how it can bust</p>",
        "id": 125806963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890084
    },
    {
        "content": "<p>because two natural numbers are equal but the proof is not \"rfl\"</p>",
        "id": 125806966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890102
    },
    {
        "content": "<p>The type class system breaks quite badly if you find two different ways of getting from A to B</p>",
        "id": 125807014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890187
    },
    {
        "content": "<p>On the other hand I am pretty sure that I want to allow more than one canonical isomorphism between two objects</p>",
        "id": 125807015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890206
    },
    {
        "content": "<p>transfer in action: constructing an efficient representation of <code>int</code> from the pre-int pair of nat... <a href=\"https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean\">https://github.com/leanprover/lean/blob/master/library/init/data/int/basic.lean</a></p>",
        "id": 125807021,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524890230
    },
    {
        "content": "<p>For example I think I want the sum of two canonical isomorphisms from a group to a group to be a canonical isomorphism</p>",
        "id": 125807022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890238
    },
    {
        "content": "<p>I know int.basic pretty well</p>",
        "id": 125807024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890263
    },
    {
        "content": "<p>What does this have to do with anything?</p>",
        "id": 125807025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890269
    },
    {
        "content": "<p>I understand the int typeclass</p>",
        "id": 125807026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890277
    },
    {
        "content": "<p>and you are saying that int canonically bijects with nat + nat?</p>",
        "id": 125807066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890311
    },
    {
        "content": "<p>I would say that that bijection is not canonical</p>",
        "id": 125807067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890317
    },
    {
        "content": "<p>It's a junk theorem I think</p>",
        "id": 125807068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890323
    },
    {
        "content": "<p>In a parallel universe int was constructed as a quotient type on nat x nat</p>",
        "id": 125807069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890337
    },
    {
        "content": "<p>or one day Leo changes int to this</p>",
        "id": 125807072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890346
    },
    {
        "content": "<p>and nobody notices</p>",
        "id": 125807075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890348
    },
    {
        "content": "<p>because maybe we all use the int interface</p>",
        "id": 125807076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890356
    },
    {
        "content": "<p>isn't that the tactic machinery you're interested in, however?</p>",
        "id": 125807079,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524890373
    },
    {
        "content": "<p>Evidence that that bijection is not canonical is that it does not behave well with respect to arithmetic operations like +</p>",
        "id": 125807080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890382
    },
    {
        "content": "<p>Oh -- I see</p>",
        "id": 125807081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Concerning Mario's example. Basically, you prove that <code>nat \\times nat</code> has a ring structure, and then coerce by taking the sum. But the sum is not a ring homomorphism... Is that what is going on?</p>",
        "id": 125807084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890397
    },
    {
        "content": "<p>I'm afraid my eyes glaze over whenever I see tactic machinery</p>",
        "id": 125807085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890397
    },
    {
        "content": "<p>I don't understand it at all</p>",
        "id": 125807123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890405
    },
    {
        "content": "<p>It actually is using <code>nat \\times nat</code>.</p>",
        "id": 125807133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524890444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> no multiplication is involved</p>",
        "id": 125807134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890446
    },
    {
        "content": "<p>no multiplication of nats at least</p>",
        "id": 125807151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890466
    },
    {
        "content": "<blockquote>\n<p>because maybe we all use the int interface</p>\n</blockquote>\n<p>nope. lots of things in mathlib use the definition of int</p>",
        "id": 125807153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524890473
    },
    {
        "content": "<p>Johan -- the only canonical thing you are allowed to do with nats is add them up in Mario's example</p>",
        "id": 125807156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890503
    },
    {
        "content": "<p>So there's a type which carries a nat</p>",
        "id": 125807157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890519
    },
    {
        "content": "<p>and one which carries two nats</p>",
        "id": 125807194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890526
    },
    {
        "content": "<p>and the type class inference system will take you from the two nat guys to the one nat guys by just adding up their two nats</p>",
        "id": 125807197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890557
    },
    {
        "content": "<p>Ah, sorry, brainfarting again</p>",
        "id": 125807198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890559
    },
    {
        "content": "<p>But there is also this product construction</p>",
        "id": 125807202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890576
    },
    {
        "content": "<p>Er, to clarify, the <code>int</code> transfer stuff (which I don't know anything about) uses <code>nat \\times nat</code></p>",
        "id": 125807203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524890580
    },
    {
        "content": "<p>and you just add up the nats</p>",
        "id": 125807209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890603
    },
    {
        "content": "<p>so now there's two ways of getting from a pair <code>(a,b)</code> of two-nat guys</p>",
        "id": 125807214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890622
    },
    {
        "content": "<p>to one one-nat guy</p>",
        "id": 125807215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890628
    },
    {
        "content": "<p>and <code>(r+s)+(t+u)</code> is not definitionally equal to <code>(r+t)+(s+u)</code></p>",
        "id": 125807256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890674
    },
    {
        "content": "<p>you need a proof by induction for that</p>",
        "id": 125807257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890683
    },
    {
        "content": "<p>Right, that's what is going on</p>",
        "id": 125807259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890699
    },
    {
        "content": "<p>and then rw stops working</p>",
        "id": 125807264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890706
    },
    {
        "content": "<p>because rw keeps track of the exact definitions of the instances</p>",
        "id": 125807268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890721
    },
    {
        "content": "<p>no</p>",
        "id": 125807269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890724
    },
    {
        "content": "<p>the types keep track</p>",
        "id": 125807270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Which lines should we look at, to see transfer in action, in int/basic.lean</p>",
        "id": 125807271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890728
    },
    {
        "content": "<p>and rw looks at the types</p>",
        "id": 125807273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> line 399 proves the integers form a ring</p>",
        "id": 125807315,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524890776
    },
    {
        "content": "<p>the setup starts at line 269</p>",
        "id": 125807324,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524890853
    },
    {
        "content": "<p>I have the instinctive feeling that this is related, but somewhat different from what we are discussing.</p>",
        "id": 125807367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890939
    },
    {
        "content": "<p>I guess I understand much less of this part of int.nat than I remembered</p>",
        "id": 125807370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890944
    },
    {
        "content": "<p>what is all this rel stuff?</p>",
        "id": 125807375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524890949
    },
    {
        "content": "<p>But maybe I don't get what this part of the file is trying to prove</p>",
        "id": 125807378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524890968
    },
    {
        "content": "<p>I see.</p>",
        "id": 125807437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891037
    },
    {
        "content": "<p><code>rel_int_nat_nat (z : int)</code></p>",
        "id": 125807439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891050
    },
    {
        "content": "<p>is the set of pairs (a,b) in nat x nat</p>",
        "id": 125807442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891065
    },
    {
        "content": "<p>such that a - b = z</p>",
        "id": 125807446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891073
    },
    {
        "content": "<p>so it's the equivalence class</p>",
        "id": 125807447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> Are you saying: there is a ring structure on a quotient of <code>nat \\times nat</code> and there is a bijection between <code>Z</code> and this quotient. And this is how we transfer the ring structure onto <code>Z</code></p>",
        "id": 125807486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891127
    },
    {
        "content": "<p>Is that what is going on?</p>",
        "id": 125807487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891132
    },
    {
        "content": "<p>I think it is. And if so, that is a perfect example.</p>",
        "id": 125807489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891144
    },
    {
        "content": "<p>So there's all this rel stuff</p>",
        "id": 125807490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891163
    },
    {
        "content": "<p>and suddenly there are some transfer tactics and it's all over.</p>",
        "id": 125807492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891173
    },
    {
        "content": "<p>Who wrote that stuff?</p>",
        "id": 125807493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891176
    },
    {
        "content": "<p>johannes hoezl</p>",
        "id": 125807494,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524891182
    },
    {
        "content": "<blockquote>\n<p>Who wrote that stuff?</p>\n</blockquote>\n<p><code>git blame</code></p>",
        "id": 125807499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891191
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blame/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/data/int/basic.lean#L393\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blame/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/data/int/basic.lean#L393\">https://github.com/leanprover/lean/blame/f59c2f0ef59fdc1833b6ead6adca721123bd7932/library/init/data/int/basic.lean#L393</a></p>",
        "id": 125807501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891229
    },
    {
        "content": "<p>Andrew, so now, we want to abstract this notion of transfer, and automatically derive it for lots of structures, given equivalences between types.</p>",
        "id": 125807543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891280
    },
    {
        "content": "<p>I see</p>",
        "id": 125807544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891282
    },
    {
        "content": "<p>Maybe he has something to say about what it means to be canonically isomorphic.</p>",
        "id": 125807545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891283
    },
    {
        "content": "<p>Johannes introduced the transfer method</p>",
        "id": 125807546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891283
    },
    {
        "content": "<p>Scott introduced this class with this cool <code>transportable</code> name and I've spent some time over the last 24 hours (I should probably sleep at some point) creating instances of this class and moving them around.</p>",
        "id": 125807594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891367
    },
    {
        "content": "<p>What started me off was Johan's list of levels</p>",
        "id": 125807597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891379
    },
    {
        "content": "<p>If we have a more general idea</p>",
        "id": 125807600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891397
    },
    {
        "content": "<p>do we have another game to play?</p>",
        "id": 125807601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891404
    },
    {
        "content": "<p>Johan -- here's how to catch an instance of the type class resolution system</p>",
        "id": 125807647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem T {α : Type u} [ring α] : add_group α := by apply_instance\n#print T\n</pre></div>",
        "id": 125807648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891528
    },
    {
        "content": "<p><code>apply_instance</code> is a tactic which tries to solve things by type class inference</p>",
        "id": 125807654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891551
    },
    {
        "content": "<p>Ok, let me think about how that might be useful</p>",
        "id": 125807659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524891591
    },
    {
        "content": "<p>Unfortunately I don't think we have an instance of <code>transportable add_group</code> yet</p>",
        "id": 125807683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891602
    },
    {
        "content": "<p>Kenny wrote the ring one</p>",
        "id": 125807701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891606
    },
    {
        "content": "<p>and one could copy</p>",
        "id": 125807702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891608
    },
    {
        "content": "<p>These maps are in general forgetful functors</p>",
        "id": 125807706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891625
    },
    {
        "content": "<p>I think you would just delete all the lines which don't appear in <code>add_group</code>, yeah.</p>",
        "id": 125807707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524891630
    },
    {
        "content": "<p>Then I guess your square involving forgetful functors and transported equivalences ought to commute definitionally</p>",
        "id": 125807708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524891662
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[instance, priority 100]\ndef add_comm_group.to_add_group : Π (α : Type u) [s : add_comm_group α], add_group α :=\nλ (α : Type u) [s : add_comm_group α],\n  {add := add_comm_group.add s,\n   add_assoc := _,\n   zero := add_comm_group.zero α s,\n   zero_add := _,\n   add_zero := _,\n   neg := add_comm_group.neg s,\n   add_left_neg := _}\n</pre></div>",
        "id": 125807716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891695
    },
    {
        "content": "<p>I am sure it will</p>",
        "id": 125807717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891704
    },
    {
        "content": "<p>A different class of instance is the following:</p>",
        "id": 125807758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891744
    },
    {
        "content": "<p>Wait</p>",
        "id": 125807771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891830
    },
    {
        "content": "<p>this fails:</p>",
        "id": 125807772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891832
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 125807803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891843
    },
    {
        "content": "<p>I was assuming \"product of groups is a group\" would be there</p>",
        "id": 125807814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891852
    },
    {
        "content": "<p>Maybe it's in mathlib</p>",
        "id": 125807815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524891858
    },
    {
        "content": "<p>I think you're talking about instances like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">blah</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">some_other_thing</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 125807912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524892112
    },
    {
        "content": "<p>Which is essentially just some arbitrary user-defined function <code>ring t \\to some_other_thing t</code></p>",
        "id": 125807968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524892318
    },
    {
        "content": "<p>So now your question from earlier becomes whether an arbitrary function of type <code>Π α : Type, ring α → add_comm_group α</code> will commute with the equivalences <code>ring α ≃ ring β</code>, <code>add_comm_group α ≃ add_comm_group β</code> obtained by transportation of structure along an equivalence <code>α ≃ β</code>.  The answer is (probably) that it is true for every function you can define in Lean, but you can't prove it as a theorem within Lean that applies to an arbitrary function. This is parametricity again</p>",
        "id": 125808150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524892742
    },
    {
        "content": "<p>Ok, and now we need some magic to automaticlly prove it for every function that we define.</p>",
        "id": 125808311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524893125
    },
    {
        "content": "<p>And then we don't care that we can't prove it for arbitrary functions. And we don't have to repeat ourselves in dozens of tiny variations.</p>",
        "id": 125808314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524893160
    },
    {
        "content": "<p>Here's an instance for \"product of groups is a group\"</p>",
        "id": 125808358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524893209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">prod_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HG</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HH</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g2</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">,</span><span class=\"n\">h1</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g2</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g3</span><span class=\"o\">,</span><span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">HG</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span><span class=\"n\">HH</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">one_mul</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">mul_one</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"c1\">--begin end,--λ ⟨g,h⟩, ⟨HG.inv g,HH.inv h⟩,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 125808359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524893221
    },
    {
        "content": "<p>Yes, though it doesn't sound very easy, because the meta-level argument is some induction over the definition of the function, and I'm not sure whether a tactic even has access to the syntactic definition of a function</p>",
        "id": 125808360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524893221
    },
    {
        "content": "<p>Maybe Mario could comment when he reappears</p>",
        "id": 125808365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524893238
    },
    {
        "content": "<blockquote>\n<p>I'm not sure whether a tactic even has access to the syntactic definition of a function</p>\n</blockquote>\n<p>Right. This is the important question. If one of the Lean experts could help out, that would be awesome.</p>",
        "id": 125808463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524893442
    },
    {
        "content": "<p>Yes, in the tactic world we can look at the syntactic definitions of things.</p>",
        "id": 125808787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894232
    },
    {
        "content": "<p>It's all just <code>expr</code>s.</p>",
        "id": 125808826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524894252
    },
    {
        "content": "<p>Geez, you guys work too fast. I was going to say as a followup to my last post that parametricity is not as simple as <code>transportable</code>, and it seems like you are already running into its limitations. The problem is that it only works for unary type operators <code>Type u -&gt; Type v</code>, but for the induction to work you need a parametricity statement for many different sorts of higher order type operators. For example, a <code>Type -&gt; Type -&gt; Type</code> operator is parametric if whenever <code>A ~= A'</code> and <code>B ~= B'</code> then <code>F A B ~= F A B</code>. A <code>(Type -&gt; Type) -&gt; Type</code> operator is parametric if whenever <code>F</code> and <code>F'</code> are such that <code>A ~= A'</code> implies <code>F A ~= F' A'</code>, then <code>G F ~= G F'</code>.</p>\n<p>There is some recursive definition of parametric that goes over the type of the higher-order functor, but you can't even define this recursion in lean since <code>Type</code> is not inductively generated by the Pi type and other stuff. But you can define tactics that produce such definitions, and tactics that prove that everything you care about satisfy its appropriate parametricity theorem. This is what \"Theorems for free!\" is about.</p>",
        "id": 125813008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524904430
    },
    {
        "content": "<p>Also, in the presence of <code>choice</code> parametricity fails, so it's not actually true that all lean-definable terms are parametric. For example, given choice you have that everything is decidable, in particular type equality, so you can make definitions like <code>if x = nat then nat else empty</code> which is nonempty on <code>nat</code> and empty on <code>int</code> even though <code>nat ~= int</code>.</p>",
        "id": 125813265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524904998
    },
    {
        "content": "<p>Or at least, that would be a counterexample if you knew <code>nat != int</code>. This comes back to the possible consistency of <code>A ~= B -&gt; A = B</code>; assuming it's consistent with lean <code>nat != int</code> is not provable, although there are certainly models of lean which refute <code>nat = int</code>.</p>",
        "id": 125813314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524905143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> There you have your counterexample.</p>",
        "id": 125819688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524921060
    },
    {
        "content": "<p>I am not interested in weird questions about whether int is equal to nat.</p>",
        "id": 125820700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923554
    },
    {
        "content": "<p>It seems to me that a canonical isomorphism is a pair of things</p>",
        "id": 125820703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923569
    },
    {
        "content": "<p>I don't remember anyone asking your opinion :P</p>",
        "id": 125820705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524923573
    },
    {
        "content": "<p>firstly an equiv</p>",
        "id": 125820706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923580
    },
    {
        "content": "<p>:-)</p>",
        "id": 125820707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923582
    },
    {
        "content": "<p>and secondly a promise</p>",
        "id": 125820710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923585
    },
    {
        "content": "<p>and the promise is that you promise not to do stuff which isn't respected by the equiv</p>",
        "id": 125820714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923610
    },
    {
        "content": "<p>And in ZFC this promise is brushed under the carpet and there is a gentleman's agreement</p>",
        "id": 125820716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923633
    },
    {
        "content": "<p>and all good mathematicians are aware of the agreement</p>",
        "id": 125820756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923652
    },
    {
        "content": "<p>But in dependent type theory we have a bunch of uncultured computer scientists</p>",
        "id": 125820760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923672
    },
    {
        "content": "<p>who don't know our gentlemanly ways</p>",
        "id": 125820761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923681
    },
    {
        "content": "<p>and they are asking to see more details of the promise</p>",
        "id": 125820763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923695
    },
    {
        "content": "<p>and what is worse</p>",
        "id": 125820764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923697
    },
    {
        "content": "<p>they are demanding that we keep our promises.</p>",
        "id": 125820768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923705
    },
    {
        "content": "<p>They are not buying the argument that we are gentlemen who keep our promises</p>",
        "id": 125820772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923726
    },
    {
        "content": "<p>they want to see proof</p>",
        "id": 125820773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923737
    },
    {
        "content": "<p>so now it is the mathematician's job to give them that proof.</p>",
        "id": 125820777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923758
    },
    {
        "content": "<p>There is a wonderful story which goes back to a paper by Dick Gross in the early 1990s which was crucial in Wiles' original proof of Fermat's Last Theorem</p>",
        "id": 125820819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923788
    },
    {
        "content": "<blockquote>\n<p>But in dependent type theory we have a bunch of uncultured computer scientists</p>\n</blockquote>\n<p>right. you just said this in front of a bunch of computer scientists.</p>",
        "id": 125820820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524923792
    },
    {
        "content": "<p>Kenny: my provocative language is intentional</p>",
        "id": 125820823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923807
    },
    {
        "content": "<p>I am trying to isolate what I believe is an important issue</p>",
        "id": 125820829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923834
    },
    {
        "content": "<p>and I am using provocative language in an attempt to explain it and to get people interested in it.</p>",
        "id": 125820831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923850
    },
    {
        "content": "<p>The story is that Dick Gross needed to analyse two cohomology groups</p>",
        "id": 125820832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923879
    },
    {
        "content": "<p>and these cohomology groups were coming from two completely different cohomology theories</p>",
        "id": 125820872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923894
    },
    {
        "content": "<p>but someone had written down a map between them which was completely natural and depended on no choices</p>",
        "id": 125820874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923909
    },
    {
        "content": "<p>and they had proved that this map was an isomorphism</p>",
        "id": 125820876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923920
    },
    {
        "content": "<p>and had asserted that it was a canonical isomorphism</p>",
        "id": 125820877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923931
    },
    {
        "content": "<p>and we all believed them</p>",
        "id": 125820879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923937
    },
    {
        "content": "<p>And Dick Gross needed to use some extra structure on these cohomology theories</p>",
        "id": 125820885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923952
    },
    {
        "content": "<p>each of the cohomology theories came with a bunch of linear maps called Hecke operators</p>",
        "id": 125820887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923973
    },
    {
        "content": "<p>which are completely canonically defined operators</p>",
        "id": 125820890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524923986
    },
    {
        "content": "<p>and Gross asserted without proof that the canonical isomorphism identified the canonically-defined actions of the Hecke operators on each of the theories</p>",
        "id": 125820941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924013
    },
    {
        "content": "<p>and the referee was Jean-Pierre Serre</p>",
        "id": 125820943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924023
    },
    {
        "content": "<p>and he caught this</p>",
        "id": 125820944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924026
    },
    {
        "content": "<p>and he demanded that Gross prove it</p>",
        "id": 125820945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924036
    },
    {
        "content": "<p>and this would have held up publication of this important paper for probably quite some time</p>",
        "id": 125820948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924053
    },
    {
        "content": "<p>so Gross said no</p>",
        "id": 125820949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924059
    },
    {
        "content": "<p>and instead he wrote in the introduction to his paper that his theorem depended on unchecked compatibilities between canonically defined operators on canonically isomorphic objects</p>",
        "id": 125820958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924098
    },
    {
        "content": "<p>And Brian Conrad got a student of his to work out the details and the student wrote an entire PhD thesis checking that the diagrams did indeed commute</p>",
        "id": 125820999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924134
    },
    {
        "content": "<p>because the proof was by no means formal</p>",
        "id": 125821000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924144
    },
    {
        "content": "<p>and I am now wondering</p>",
        "id": 125821001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924154
    },
    {
        "content": "<p>whether actually</p>",
        "id": 125821002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924155
    },
    {
        "content": "<p>one could write a tactic to prove that theorem</p>",
        "id": 125821005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924165
    },
    {
        "content": "<p>That would be an extraordinary project</p>",
        "id": 125821006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924171
    },
    {
        "content": "<p>because that would be a computer not only checking the main result of a Stanford student's PhD thesis</p>",
        "id": 125821009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924185
    },
    {
        "content": "<p>it would be a computer program which automatically generated the main result of a Stanford student's PhD thesis.</p>",
        "id": 125821013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924218
    },
    {
        "content": "<p>A _mathematics_ student.</p>",
        "id": 125821014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924236
    },
    {
        "content": "<p>And the reason a tactic might be able to prove this</p>",
        "id": 125821053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924273
    },
    {
        "content": "<p>would be that when you prove that various maps are isomorphisms</p>",
        "id": 125821054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924289
    },
    {
        "content": "<p>you don't just say \"they are canonical\"</p>",
        "id": 125821055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924293
    },
    {
        "content": "<p>you write down what you mean, properly</p>",
        "id": 125821056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924300
    },
    {
        "content": "<p>and then you check that all the operations that you do respect the canonical maps</p>",
        "id": 125821063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524924327
    },
    {
        "content": "<p>OK so here is a challenge to the mathematics / computer science community:</p>",
        "id": 125822241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927239
    },
    {
        "content": "<p>write a tactic which proves that Gross' canonically defined Hecke operators on his canonically isomorphic spaces all match up with each other</p>",
        "id": 125822282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927276
    },
    {
        "content": "<p>That sounds like a really fun project</p>",
        "id": 125822286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927304
    },
    {
        "content": "<p>because it will need a mix of genuinely deep mathematics</p>",
        "id": 125822290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927318
    },
    {
        "content": "<p>for M1R?</p>",
        "id": 125822291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524927319
    },
    {
        "content": "<p>and clever programming</p>",
        "id": 125822292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927321
    },
    {
        "content": "<p>Kenny, that would be a great first year project :-)</p>",
        "id": 125822293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927332
    },
    {
        "content": "<p>It would be an even better PhD project.</p>",
        "id": 125822295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524927341
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>But in dependent type theory we have a bunch of uncultured computer scientists</p>\n</blockquote>\n<p>right. you just said this in front of a bunch of computer scientists.</p>\n</blockquote>\n<p>I'm not sure if it's that I'm too uncultured to be insulted but it feels like Kevin paid the CS / formal methods community a beautiful compliment</p>",
        "id": 125826517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524937438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I love this story!</p>",
        "id": 125827355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524939364
    },
    {
        "content": "<p>Is this story only oral folklore? Or is there some written version (besides what you just wrote down in the chat)? I would love to be able to point others towards this story</p>",
        "id": 125827363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524939423
    },
    {
        "content": "<p>just google for Bryden Cais' PhD thesis</p>",
        "id": 125831766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950014
    },
    {
        "content": "<p>I think it would be an absolutely monumental challenge to get a computer to prove it</p>",
        "id": 125831768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950031
    },
    {
        "content": "<p>but anyone who tried would probably learn a lot about what a mathematician means when they say something is canonical</p>",
        "id": 125831809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950054
    },
    {
        "content": "<p>Bryden is in AZ now</p>",
        "id": 125831813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950080
    },
    {
        "content": "<p>and go from there to Dick Gross' paper</p>",
        "id": 125831822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950131
    },
    {
        "content": "<p>and see the explanation about the unchecked compatibilities, a throw-away \"well this is not 100% rigorous\" admission in a paper which a few years later was to play a fundamental role in Wiles' proof of Fermat's Last Theorem.</p>",
        "id": 125831862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950170
    },
    {
        "content": "<p>And mathematicans worried not one jot</p>",
        "id": 125831863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950177
    },
    {
        "content": "<p>See Wiles' FLT paper and verify it references Gross' paper.</p>",
        "id": 125831864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950198
    },
    {
        "content": "<p>perhaps because one day we knew a computer would come along and check the details.</p>",
        "id": 125831872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950231
    },
    {
        "content": "<p>I bet Taylor-Wiles (the paper that fills in the gap) references the paper too.</p>",
        "id": 125831918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950293
    },
    {
        "content": "<p>Absolutely wonderful.</p>",
        "id": 125831926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950348
    },
    {
        "content": "<p>I just checked.</p>",
        "id": 125831927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950351
    },
    {
        "content": "<p><a href=\"http://www.math.ias.edu/~rtaylor/hecke.pdf\" target=\"_blank\" title=\"http://www.math.ias.edu/~rtaylor/hecke.pdf\">http://www.math.ias.edu/~rtaylor/hecke.pdf</a></p>",
        "id": 125831928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950360
    },
    {
        "content": "<p>Seminal paper by Taylor and Wiles filling in the gap in Wiles' proof of Fermat's Last Theorem.</p>",
        "id": 125831931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950381
    },
    {
        "content": "<p>Theorem: We fill in a gap.</p>",
        "id": 125831933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950392
    },
    {
        "content": "<p>Footnote: WARNING : paper contains gap</p>",
        "id": 125831935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950399
    },
    {
        "content": "<p>but we're not worried about that one</p>",
        "id": 125831980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950411
    },
    {
        "content": "<p>And there was me thinking we were doing ZFC</p>",
        "id": 125831986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950484
    },
    {
        "content": "<p>When did we stop?</p>",
        "id": 125831987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950487
    },
    {
        "content": "<p>Bryden Cais thesis 2007, 12 years after FLT proved.</p>",
        "id": 125832031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950556
    },
    {
        "content": "<p>You know what, I am pretty sure that the experts knew that there was a way around Gross' problems.</p>",
        "id": 125832033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950579
    },
    {
        "content": "<p>So probably nobody made a fuss</p>",
        "id": 125832036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950586
    },
    {
        "content": "<p>they only occurred in certain \"higher weight\" situations</p>",
        "id": 125832040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950610
    },
    {
        "content": "<p>and the applications to FLT may not need that level of generality</p>",
        "id": 125832042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950630
    },
    {
        "content": "<p>but I'm not sure you'll find a published explanation of this</p>",
        "id": 125832043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950638
    },
    {
        "content": "<p>I'll ask Conrad whether he thinks his student proved Fermat's Last Theorem</p>",
        "id": 125832083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524950664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ,</p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> There you have your counterexample.</p>\n</blockquote>\n<p>I haven't quite caught up on this thread, but does this mean that \"in the presence of <code>choice</code> I owe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  a beer\"? Ok, I'll honour that anyway.</p>",
        "id": 125834143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524955648
    },
    {
        "content": "<p>Do we have parametricity for things which are not <code>noncomputable</code>?</p>",
        "id": 125839073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524967363
    },
    {
        "content": "<p>I will remark that the thing I want to prove is functorial, is noncomputable.</p>",
        "id": 125839370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968100
    },
    {
        "content": "<p>attempting to make it computable would not be a question I was that interested in</p>",
        "id": 125839420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968176
    },
    {
        "content": "<p>but I am unsure as to whether or not it can be done. This goes back to the old question of how to represent the functions on a standard open in an affine scheme</p>",
        "id": 125839421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> I guess so... you didn't post any formal requirements, and I am not a judge (-;</p>",
        "id": 125846328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524985902
    },
    {
        "content": "<p>Church numerals are kind of cool</p>",
        "id": 125854648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007087
    },
    {
        "content": "<p>what is that message related to?</p>",
        "id": 125854656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007110
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/06476597bd53a111bb3060d2d583e04c972d5204/canonical_isomorphism/church_blog_questions.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/06476597bd53a111bb3060d2d583e04c972d5204/canonical_isomorphism/church_blog_questions.lean\">https://github.com/kbuzzard/xena/blob/06476597bd53a111bb3060d2d583e04c972d5204/canonical_isomorphism/church_blog_questions.lean</a></p>",
        "id": 125854697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007170
    },
    {
        "content": "<p>Kenny, there are some more challenges for you</p>",
        "id": 125854698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007181
    },
    {
        "content": "<p>nice, i love challenges</p>",
        "id": 125854699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007194
    },
    {
        "content": "<p>I'm sure you won't have much trouble with succ, add and mul</p>",
        "id": 125854700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007204
    },
    {
        "content": "<p>do you know how to do pow?</p>",
        "id": 125854701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007211
    },
    {
        "content": "<p>And what about Ackermann?</p>",
        "id": 125854702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007218
    },
    {
        "content": "<p>oh i thought you were talking about those proofs in your file</p>",
        "id": 125854707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007228
    },
    {
        "content": "<p>And can you prove the equiv?</p>",
        "id": 125854708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007230
    },
    {
        "content": "<p>they aren't equivalent</p>",
        "id": 125854709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007240
    },
    {
        "content": "<p>The link I just posted is to a file with some sorries</p>",
        "id": 125854710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007246
    },
    {
        "content": "<p>but I can fill in some of the sorries</p>",
        "id": 125854711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007252
    },
    {
        "content": "<p>they aren't provable</p>",
        "id": 125854712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007252
    },
    {
        "content": "<p>stop</p>",
        "id": 125854713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007256
    },
    {
        "content": "<p>some are provable because I proved them</p>",
        "id": 125854714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007263
    },
    {
        "content": "<p>you need to look at the file</p>",
        "id": 125854715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007266
    },
    {
        "content": "<p>for each sorry in the file, either fill it in, or tell me confidently that it cannot be filled in</p>",
        "id": 125854752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007283
    },
    {
        "content": "<p>that's your challenge</p>",
        "id": 125854755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007286
    },
    {
        "content": "<p>ok</p>",
        "id": 125854756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007288
    },
    {
        "content": "<p>I saw the word blog :D</p>",
        "id": 125854757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007297
    },
    {
        "content": "<p>yes, I am going to write another blog post</p>",
        "id": 125854758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007311
    },
    {
        "content": "<p>talking of blog posts</p>",
        "id": 125854760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007315
    },
    {
        "content": "<p>I have a file which is both beautiful and disgusting</p>",
        "id": 125854761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007331
    },
    {
        "content": "<p>beautiful because all the proofs are really uncluttered</p>",
        "id": 125854767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007355
    },
    {
        "content": "<p>that tone in <code>KB doesn't understand</code> though lmao</p>",
        "id": 125854768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007357
    },
    {
        "content": "<p>disgusting because I use constants</p>",
        "id": 125854769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007361
    },
    {
        "content": "<p>Kenny -- is nat some inductive type which is somehow canonically associated to the Pi type of church numerals?</p>",
        "id": 125854814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007422
    },
    {
        "content": "<p>look at my definition of <code>to_nat</code></p>",
        "id": 125854815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007449
    },
    {
        "content": "<p>it takes all the ingredients of nat exactly once, and nothing more</p>",
        "id": 125854816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007463
    },
    {
        "content": "<p>sure, <code>Π X : Type, (X → X) → X → X</code> is the Church encoding of the type <code>nat</code></p>",
        "id": 125854821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007476
    },
    {
        "content": "<p>I don't know what that means</p>",
        "id": 125854822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007497
    },
    {
        "content": "<p>which types have a church encoding?</p>",
        "id": 125854823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007501
    },
    {
        "content": "<p>inductive types I guess</p>",
        "id": 125854824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007508
    },
    {
        "content": "<p>not very sure</p>",
        "id": 125854825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007510
    },
    {
        "content": "<p>maybe pi types as well</p>",
        "id": 125854826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007521
    },
    {
        "content": "<p>so you cannot formalise the assertion you just made?</p>",
        "id": 125854865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007531
    },
    {
        "content": "<p>You are making some informal statement?</p>",
        "id": 125854866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007538
    },
    {
        "content": "<p>I don't know everything about church encoding</p>",
        "id": 125854867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007542
    },
    {
        "content": "<p>but is there some rigorous statement that an expert can make?</p>",
        "id": 125854868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007552
    },
    {
        "content": "<p>I believe so</p>",
        "id": 125854869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007557
    },
    {
        "content": "<p>\"church encoding\" has a formal definition?</p>",
        "id": 125854870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007569
    },
    {
        "content": "<p>What is the church encoding of a scheme?</p>",
        "id": 125854876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007589
    },
    {
        "content": "<p>what is the church encoding of int as defined in Lean?</p>",
        "id": 125854877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007613
    },
    {
        "content": "<p>what is the church encoding of list?</p>",
        "id": 125854878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007620
    },
    {
        "content": "<p>what is the church encoding of bool?</p>",
        "id": 125854879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007628
    },
    {
        "content": "<p>what is the church encoding of false?</p>",
        "id": 125854880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007637
    },
    {
        "content": "<blockquote>\n<p>what is the church encoding of bool?</p>\n</blockquote>\n<p><code>X -&gt; X -&gt; X</code> :P</p>",
        "id": 125854881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007640
    },
    {
        "content": "<blockquote>\n<p>what is the church encoding of false?</p>\n</blockquote>\n<p><code>X</code></p>",
        "id": 125854918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007645
    },
    {
        "content": "<p>Does the church encoding of anything just have one type X?</p>",
        "id": 125854921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007665
    },
    {
        "content": "<blockquote>\n<p>Does the church encoding of anything just have one type X?</p>\n</blockquote>\n<p>didn't I just answer that question</p>",
        "id": 125854922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007678
    },
    {
        "content": "<p>No</p>",
        "id": 125854923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007684
    },
    {
        "content": "<p>you only answered it for bool and false</p>",
        "id": 125854924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007693
    },
    {
        "content": "<p>and nat</p>",
        "id": 125854930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007709
    },
    {
        "content": "<p>what do you mean by one type X?</p>",
        "id": 125854931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007730
    },
    {
        "content": "<p>I mean that all your answers so far (for nat, bool and false) only had one letter in</p>",
        "id": 125854932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007758
    },
    {
        "content": "<p>oh, I misunderstood \"anything\"</p>",
        "id": 125854972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007770
    },
    {
        "content": "<p>english ~</p>",
        "id": 125854973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007772
    },
    {
        "content": "<p>did you do ack yet?</p>",
        "id": 125855019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007906
    },
    {
        "content": "<p>I've been searching church encoding online</p>",
        "id": 125855020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525007922
    },
    {
        "content": "<p>here's a much easier</p>",
        "id": 125855021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007933
    },
    {
        "content": "<p>one</p>",
        "id": 125855022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007935
    },
    {
        "content": "<p><code>pred</code></p>",
        "id": 125855023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007937
    },
    {
        "content": "<p>The untyped lambda calculus is so last year</p>",
        "id": 125855028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007954
    },
    {
        "content": "<p>I want to know how it works in Lean</p>",
        "id": 125855030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525007962
    },
    {
        "content": "<p>although these questions might not be good for this thread, because did you say that it was not true that nat was equiv to church nat?</p>",
        "id": 125855068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008006
    },
    {
        "content": "<p>or not provable?</p>",
        "id": 125855071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008018
    },
    {
        "content": "<p>if your functions are computable, then I believe they will represent some natural number</p>",
        "id": 125855072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008046
    },
    {
        "content": "<p>but noncomputable functions are permitted in Lean, breaking the equivalence</p>",
        "id": 125855075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008054
    },
    {
        "content": "<p>(but I can't give you any example :P)</p>",
        "id": 125855076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008059
    },
    {
        "content": "<p>So one can write down a <code>noncomputable</code> church nat which is provably not in the image of <code>of_nat</code>?</p>",
        "id": 125855124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008183
    },
    {
        "content": "<p>I don't know</p>",
        "id": 125855127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008192
    },
    {
        "content": "<p>maybe you can write something like <code>if X == int then _ else _</code></p>",
        "id": 125855128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008212
    },
    {
        "content": "<p>well maybe it won't come up in the mechanics exam</p>",
        "id": 125855129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008215
    },
    {
        "content": "<p>...</p>",
        "id": 125855130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008221
    },
    {
        "content": "<blockquote>\n<p>what is the church encoding of list?</p>\n</blockquote>\n<p><code>list A = X -&gt; (A -&gt; X -&gt; X) -&gt; X</code> I guess. can't find anything online</p>",
        "id": 125855214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008423
    },
    {
        "content": "<blockquote>\n<p>what is the church encoding of int as defined in Lean?</p>\n</blockquote>\n<p><code>nat -&gt; nat -&gt; X</code>, I guess</p>",
        "id": 125855302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008632
    },
    {
        "content": "<p>that doesn't look like something that Church would like</p>",
        "id": 125855303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008652
    },
    {
        "content": "<p>it has something in which isn't X</p>",
        "id": 125855304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008659
    },
    {
        "content": "<p>or -&gt; or ()</p>",
        "id": 125855309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008666
    },
    {
        "content": "<p>Is it OK?</p>",
        "id": 125855311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008669
    },
    {
        "content": "<p>but <code>list</code> isn't a type</p>",
        "id": 125855313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008681
    },
    {
        "content": "<p><code>list</code> is a function from types to types</p>",
        "id": 125855314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008689
    },
    {
        "content": "<p>I see</p>",
        "id": 125855315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008703
    },
    {
        "content": "<p>I thought those were types too ;-)</p>",
        "id": 125855317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008712
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean</a></p>",
        "id": 125855354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">list</span>\n<span class=\"c1\">--list : Type u_1 → Type u_1</span>\n</pre></div>",
        "id": 125855356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525008726
    },
    {
        "content": "<p>I slightly updated the church numerals file</p>",
        "id": 125855358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008731
    },
    {
        "content": "<p>I am a bit unclear about what is provable and what isn't.</p>",
        "id": 125855359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008760
    },
    {
        "content": "<p>I also have a file with some solutions in</p>",
        "id": 125855364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008782
    },
    {
        "content": "<p>and the only reason I did not push it</p>",
        "id": 125855370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008788
    },
    {
        "content": "<p>is because the definition of <code>pow</code> on church nats is so beautiful that I wanted to let you find it if you hadn't seen it already</p>",
        "id": 125855372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525008808
    },
    {
        "content": "<p>interesting</p>",
        "id": 125856002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525010283
    },
    {
        "content": "<p>I am finally trying to write down a \"canonical isomorphism\" proof of the result I need to apply Chris' Lemma to the affine scheme boss</p>",
        "id": 125856248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525010949
    },
    {
        "content": "<p>Does this structure already have a name?</p>",
        "id": 125856249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525010959
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">is_unique_ring_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125856250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525010965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125856294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525011031
    },
    {
        "content": "<p>(sorry, I was half rings and half commutative rings)</p>",
        "id": 125856305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525011113
    },
    {
        "content": "<p>(I am all rings now)</p>",
        "id": 125856306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525011116
    },
    {
        "content": "<p>I don't think it has a name</p>",
        "id": 125856635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525011861
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/church_blog_questions.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/church_blog_questions.lean\">https://github.com/kckennylau/Lean/blob/master/church_blog_questions.lean</a></p>",
        "id": 125858145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525015562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't think Ack can be done</p>",
        "id": 125858173,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525015567
    },
    {
        "content": "<p>What is your opinion of the other <code>sorry</code>s?</p>",
        "id": 125858640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525016674
    },
    {
        "content": "<p>can't be done</p>",
        "id": 125858642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525016694
    },
    {
        "content": "<p>Are there any for which you feel that you can convince me rigorously that they can't be done?</p>",
        "id": 125858654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525016734
    },
    {
        "content": "<p>the last one, I think</p>",
        "id": 125858655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525016752
    },
    {
        "content": "<p><code>theorem is_it_true (X : Type) (f : X → X) (x : X) : f x = x := sorry</code></p>",
        "id": 125858697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525016773
    },
    {
        "content": "<p>that theorem looks really appealing to me</p>",
        "id": 125858700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525016783
    },
    {
        "content": "<p>I think you want <code>f : \\Pi X : Type, X \\to X</code></p>",
        "id": 125858703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525016806
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- bad church numeral</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">satan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">satan</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- 1 everywhere apart from nat, where it&#39;s zero</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">satan_is_bad</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">))</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now what?</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125859158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525017875
    },
    {
        "content": "<p>Trying to write down a counterexample</p>",
        "id": 125859159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525017892
    },
    {
        "content": "<p>aha, I used <code>==</code> and I failed</p>",
        "id": 125859165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525017903
    },
    {
        "content": "<p>turns out you need <code>=</code> instead</p>",
        "id": 125859169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525017906
    },
    {
        "content": "<p>well, it typechecks</p>",
        "id": 125859170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525017913
    },
    {
        "content": "<p>but it's not over yet</p>",
        "id": 125859171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525017919
    },
    {
        "content": "<p>unless you see that it's over</p>",
        "id": 125859172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525017928
    },
    {
        "content": "<p>so what is your thought and why are you stuck?</p>",
        "id": 125859211,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525017976
    },
    {
        "content": "<p>well presumably now I have to prove things like bool ne nat</p>",
        "id": 125860599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021146
    },
    {
        "content": "<p>oh I thought you can just feed in <code>bool</code> to both sides</p>",
        "id": 125860603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021173
    },
    {
        "content": "<p>and have one side give <code>ff</code> and the other side give <code>tt</code></p>",
        "id": 125860604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">satan_is_bad</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">))</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">to_nat</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">satan</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"c1\">-- H2 : tt = dite (bool = ℕ) (λ (H : bool = ℕ), eq.mpr _ (eq.mp _ tt)) (λ (_x : ¬bool = ℕ), ff)</span>\n<span class=\"c1\">-- now what?</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125860693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021365
    },
    {
        "content": "<p>if only I had a good destructor for dite</p>",
        "id": 125860695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021377
    },
    {
        "content": "<p>oh, you need to prove that <code>bool</code> and <code>nat</code> are not equal lol</p>",
        "id": 125860700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021403
    },
    {
        "content": "<p>exactly</p>",
        "id": 125860701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021413
    },
    {
        "content": "<p>cardinality <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 125860741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">satan_is_bad</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">))</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">to_nat</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">satan</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"c1\">-- ⊢ ¬bool = ℕ</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125860751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021532
    },
    {
        "content": "<p>Indeed it's the only problem left</p>",
        "id": 125860752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021539
    },
    {
        "content": "<p>if they're equal then their cardinality is equal</p>",
        "id": 125860753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021553
    },
    {
        "content": "<p>but bool is finite</p>",
        "id": 125860754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021555
    },
    {
        "content": "<p>can you do it?</p>",
        "id": 125860756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021562
    },
    {
        "content": "<p>heh...</p>",
        "id": 125860795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021566
    },
    {
        "content": "<p><code>example : ¬bool = ℕ := sorry</code></p>",
        "id": 125860798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525021581
    },
    {
        "content": "<p>tactic mode slows things down</p>",
        "id": 125860850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525021794
    },
    {
        "content": "<p>It would be a lot easier if you changed <code>bool</code> to <code>empty</code></p>",
        "id": 125861579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525023483
    },
    {
        "content": "<p>hmm</p>",
        "id": 125861595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525023519
    },
    {
        "content": "<p>maybe we should use <code>false</code> instead</p>",
        "id": 125861598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525023534
    },
    {
        "content": "<p>the proof crucially uses \"this map X -&gt; X is not this other map\"</p>",
        "id": 125862258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025020
    },
    {
        "content": "<p>so I can't see how we can use empty or false :-/</p>",
        "id": 125862261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025031
    },
    {
        "content": "<p>but we can use any type which is provably not \\N and which provably has a map which is not the identity map</p>",
        "id": 125862304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025086
    },
    {
        "content": "<p>Oh I see, sorry</p>",
        "id": 125862356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525025217
    },
    {
        "content": "<p>I have never proved that two types are not the same</p>",
        "id": 125862365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525025240
    },
    {
        "content": "<p>I think there is some notion of finite and infinite, and it will be known that bool is finite and nat is infinite</p>",
        "id": 125862409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025317
    },
    {
        "content": "<p>of course a = b implies a equiv b</p>",
        "id": 125862410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025340
    },
    {
        "content": "<p>by rw</p>",
        "id": 125862415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025347
    },
    {
        "content": "<blockquote>\n<p>by rw</p>\n</blockquote>\n<p><strong>by <code>eq.rec_on</code></strong></p>",
        "id": 125862416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525025358
    },
    {
        "content": "<p>that's what I said</p>",
        "id": 125862427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025365
    },
    {
        "content": "<p>:P</p>",
        "id": 125862429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525025372
    },
    {
        "content": "<p>:-)</p>",
        "id": 125862430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525025377
    },
    {
        "content": "<p>As a further step, you could try adding the \"free theorem\" for the type <code>Π X : Type, (X → X) → X → X</code> as a field of your church numerals and then see if you can prove <code>of_nat (to_nat c) = c</code></p>",
        "id": 125862640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525025817
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">≠</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_injective_nat_fintype</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span>\n</pre></div>",
        "id": 125863436,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525027531
    },
    {
        "content": "<p>lol</p>",
        "id": 125863443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027555
    },
    {
        "content": "<p>Not very often you get to use <code>eq.rec_on</code> for something that's not a prop.</p>",
        "id": 125863503,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525027628
    },
    {
        "content": "<p>it is a prop</p>",
        "id": 125863505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027643
    },
    {
        "content": "<p><code>fintype</code> isn't</p>",
        "id": 125863554,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525027748
    },
    {
        "content": "<p>oh, I misunderstood</p>",
        "id": 125863556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027765
    },
    {
        "content": "<p>your proof makes me laugh for some reason</p>",
        "id": 125863558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">satan_is_bad</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">satan</span><span class=\"o\">))</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">satan</span> <span class=\"n\">bool</span> <span class=\"n\">bnot</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">to_nat</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">satan</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H2</span><span class=\"o\">,</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">bool_not_nat</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125863615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525027817
    },
    {
        "content": "<p>so it really is not provable</p>",
        "id": 125863618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525027823
    },
    {
        "content": "<p>nice!</p>",
        "id": 125863622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027846
    },
    {
        "content": "<p>What's satan?</p>",
        "id": 125863668,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525027968
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">satan</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125863675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525027992
    },
    {
        "content": "<p>What's <code>of_nat</code>?</p>",
        "id": 125863766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525028186
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/church_blog_questions.lean</a></p>",
        "id": 125863768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525028208
    },
    {
        "content": "<p>What's the purpose of church nats?</p>",
        "id": 125863920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525028573
    },
    {
        "content": "<p>to defeat satan</p>",
        "id": 125863925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525028593
    },
    {
        "content": "<p>well church numerals is an essential part of lambda calculus</p>",
        "id": 125863926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525028607
    },
    {
        "content": "<p>Am i doing something wrong</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--KB can&#39;t do this one. Is it unprovable? If so, move definition of to_nat much further down.</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 125864023,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525028831
    },
    {
        "content": "<p>I also used <code>rfl</code> lol</p>",
        "id": 125864024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525028843
    },
    {
        "content": "<p>Is this cheating?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span> <span class=\"bp\">→</span> <span class=\"n\">chℕ</span> <span class=\"bp\">→</span> <span class=\"n\">chℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">to_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125864232,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525029301
    },
    {
        "content": "<p>yes it is</p>",
        "id": 125864240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525029311
    },
    {
        "content": "<p>Stuck on add_succ</p>",
        "id": 125864756,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525030605
    },
    {
        "content": "<p>you can do it</p>",
        "id": 125864757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525030614
    },
    {
        "content": "<p>Is it even true? There are loads of chnats that aren't constructed from naturals.</p>",
        "id": 125864775,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525030670
    },
    {
        "content": "<p>it is true</p>",
        "id": 125864776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525030677
    },
    {
        "content": "<p>Are you sure <code>add_succ</code> is true? <code>succ_add</code> certainly is. I think it's the wrong approach to try to prove that.</p>",
        "id": 125864913,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525031023
    },
    {
        "content": "<p>depends on your definition of add</p>",
        "id": 125864952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031049
    },
    {
        "content": "<p><code> λ a b X f, (a X f) ∘ (b X f)</code></p>",
        "id": 125865010,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525031231
    },
    {
        "content": "<p>then destruct <code>a</code></p>",
        "id": 125865013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031270
    },
    {
        "content": "<p>I proved of_nat_add without it, so I'm okay.</p>",
        "id": 125865054,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525031317
    },
    {
        "content": "<p>I ended up with this</p>\n<div class=\"codehilite\"><pre><span></span>m n : chℕ,\nX : Type,\nf : X → X,\nx : X\n⊢ m X f (f (n X f x)) = f (m X f (n X f x))\n</pre></div>",
        "id": 125865060,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525031347
    },
    {
        "content": "<p>what is the theorem?</p>",
        "id": 125865063,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031367
    },
    {
        "content": "<p>m + succ n = succ (m + n)</p>",
        "id": 125865243,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525031782
    },
    {
        "content": "<p>oh...</p>",
        "id": 125865246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031817
    },
    {
        "content": "<p>sorry</p>",
        "id": 125865249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031825
    },
    {
        "content": "<p>I thought it was one of the questions from the file and then I reflexively answered that it's true</p>",
        "id": 125865253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525031850
    },
    {
        "content": "<p>Apparently defining pred is interesting</p>",
        "id": 125865379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525032063
    },
    {
        "content": "<p>pretty sure <code>add_comm</code> isn't true. all you need is two functions whose composition doesn't commute surely?</p>",
        "id": 125865486,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525032267
    },
    {
        "content": "<p>Just disproved <code>add_comm</code></p>",
        "id": 125865785,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525033017
    },
    {
        "content": "<p>nice!</p>",
        "id": 125865788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525033024
    },
    {
        "content": "<p>the problem is that a church numeral has to be defined on every type</p>",
        "id": 125865903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525033233
    },
    {
        "content": "<p>If you were to specialise to one specific type X then they won't commute</p>",
        "id": 125865910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525033263
    },
    {
        "content": "<p>the problem is that noncomputable functions exist</p>",
        "id": 125865915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525033279
    },
    {
        "content": "<p>right</p>",
        "id": 125865916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525033282
    },
    {
        "content": "<p>now I haven't even started dinner and you have already finished it</p>",
        "id": 125865922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525033301
    },
    {
        "content": "<p>also right</p>",
        "id": 125865924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525033309
    },
    {
        "content": "<p>but I have a lot of tidying up to do</p>",
        "id": 125865927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525033318
    },
    {
        "content": "<p>heh</p>",
        "id": 125865967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525033350
    },
    {
        "content": "<blockquote>\n<p>the problem is that a church numeral has to be defined on every type<br>\nIf you were to specialise to one specific type X then they won't commute</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 125866020,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525033498
    },
    {
        "content": "<p>I fixed has_pow <code>instance : has_pow chℕ chℕ := ⟨pow⟩</code></p>",
        "id": 125866185,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525033898
    },
    {
        "content": "<p>I mean that you can't say \"I can think of a type X and two functions f and g which don't commute, so done\", because a church numeral is defined on all types</p>",
        "id": 125866347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525034189
    },
    {
        "content": "<p>But of course if you do the trick I did then this gets round it, at a cost of making the function noncomputable</p>",
        "id": 125866350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525034213
    },
    {
        "content": "<p>You can.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">this</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">this</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Are you saying that the definition is not correct?</p>",
        "id": 125866405,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525034321
    },
    {
        "content": "<p>Or maybe my definition of add is incorrect.</p>",
        "id": 125866797,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525035134
    },
    {
        "content": "<p>I disproved <code>free_chnat</code> as well</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">free_chnat</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span>\n    <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span> <span class=\"k\">in</span>\n    <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ</span> <span class=\"n\">id</span> <span class=\"n\">r</span> <span class=\"mi\">8</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125867627,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037254
    },
    {
        "content": "<p>yes, those free theorems aren't very good are they</p>",
        "id": 125867731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037448
    },
    {
        "content": "<p>I would ask for my money back</p>",
        "id": 125867733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037459
    },
    {
        "content": "<p>The free theorem for <code>Pi X, X</code> is: for all X, for all f : X -&gt; X, for all x : X, f x = x :-)</p>",
        "id": 125867740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037490
    },
    {
        "content": "<p>Is it because we're defining church numerals as something bigger than those that can be constructed from nats?</p>",
        "id": 125867742,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037500
    },
    {
        "content": "<p>I think constructively it's very difficult to tell the difference between church numerals and numerals</p>",
        "id": 125867746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037518
    },
    {
        "content": "<p>you have to use this dite trick and make it noncomputable</p>",
        "id": 125867785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037541
    },
    {
        "content": "<p>Probably. But that doesn't make the lemmas true. It just makes them undisprovable</p>",
        "id": 125867790,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037572
    },
    {
        "content": "<p>I think that in some other logics they might be provable</p>",
        "id": 125867798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037596
    },
    {
        "content": "<p>I am certainly not an expert in these variants of the lambda calculus</p>",
        "id": 125867799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037615
    },
    {
        "content": "<p>Chris I have been failing to apply your lemma :-)</p>",
        "id": 125867837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037646
    },
    {
        "content": "<p>The 00EJ?</p>",
        "id": 125867845,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037674
    },
    {
        "content": "<p>yes</p>",
        "id": 125867846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037680
    },
    {
        "content": "<p>Because of the isomorphism problem?</p>",
        "id": 125867849,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037693
    },
    {
        "content": "<p>I have some situation with a bunch of types each of which are canonically isomorphic to your types that you proved something about</p>",
        "id": 125867856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037708
    },
    {
        "content": "<p>but I have got distracted</p>",
        "id": 125867858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037718
    },
    {
        "content": "<p>and am trying to write quite a high-level proof which mirrors how I actually think about the question</p>",
        "id": 125867867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037759
    },
    {
        "content": "<p>Did the tactics session get anywhere?</p>",
        "id": 125867920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037837
    },
    {
        "content": "<p>There was a preliminary idea about how to model the notion of being canonically isomorphic</p>",
        "id": 125867966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037909
    },
    {
        "content": "<p>To make tactics that prove it's a ring?</p>",
        "id": 125867967,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037909
    },
    {
        "content": "<p>but then we realised that it wasn't strong enough</p>",
        "id": 125867968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037917
    },
    {
        "content": "<p>and I am now trying to write down some abstract ideas at a high level to see if I can make any sense out of them</p>",
        "id": 125867980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037939
    },
    {
        "content": "<p>It seems to me that when a mathematician says that two things are canonically isomorphic they are making a promise</p>",
        "id": 125867989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525037979
    },
    {
        "content": "<p>I don't understand how it could have been someone's PhD project to prove a result still held for an isomorphic thing</p>",
        "id": 125867990,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525037986
    },
    {
        "content": "<p>the project did something else</p>",
        "id": 125867993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038001
    },
    {
        "content": "<p>but this came out in the wash</p>",
        "id": 125868035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038005
    },
    {
        "content": "<p>But the problem was hard</p>",
        "id": 125868040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038012
    },
    {
        "content": "<p>I see.</p>",
        "id": 125868041,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525038016
    },
    {
        "content": "<p>Here was the problem.</p>",
        "id": 125868042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038017
    },
    {
        "content": "<p>We have two finite-dimensional vector spaces V and W</p>",
        "id": 125868045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038023
    },
    {
        "content": "<p>and we have two linear maps T : V -&gt; V and T' : W -&gt; W</p>",
        "id": 125868048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038039
    },
    {
        "content": "<p>and T and T' are both defined \"by using the same sort of ideas\"</p>",
        "id": 125868053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038059
    },
    {
        "content": "<p>but on two different spaces</p>",
        "id": 125868059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038069
    },
    {
        "content": "<p>and then there's a theorem that there's a \"canonical isomorphism\" phi from V to W</p>",
        "id": 125868069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038091
    },
    {
        "content": "<p>which means \"an isomorphism which somehow dropped out really nicely\"</p>",
        "id": 125868070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038101
    },
    {
        "content": "<p>and what Dick Gross used without proof was that phi (T v) = T' (phi v)</p>",
        "id": 125868112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038124
    },
    {
        "content": "<p>for all v</p>",
        "id": 125868117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038126
    },
    {
        "content": "<p>and his proof was not a formal one</p>",
        "id": 125868120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038147
    },
    {
        "content": "<p>his proof was \"this must be true because that's surely how it works\"</p>",
        "id": 125868122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038155
    },
    {
        "content": "<p>\"because everything is canonical\"</p>",
        "id": 125868124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038166
    },
    {
        "content": "<p>V and W were two different cohomology theories attached to the same space</p>",
        "id": 125868133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038200
    },
    {
        "content": "<p>and T and T' were defined using some other spaces (the same other spaces for T and T')</p>",
        "id": 125868143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038240
    },
    {
        "content": "<p>e.g. maps between spaces often induce maps between cohomology theories</p>",
        "id": 125868187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038285
    },
    {
        "content": "<p>but it was just a case of making sure that all the diagrams commuted</p>",
        "id": 125868188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038299
    },
    {
        "content": "<p>and some of the definition were done using very abstract algebra and the diagrams were difficult to chase</p>",
        "id": 125868195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038313
    },
    {
        "content": "<p>Short digression:</p>\n<p>I'm working on deriving <code>transportable</code>. Do you guys have a preference between making such instances lemmas (i.e. you can't unfold them) or definitions?</p>",
        "id": 125868198,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038329
    },
    {
        "content": "<p>that's an interesting question Simon</p>",
        "id": 125868201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038346
    },
    {
        "content": "<p>transportable is what we can transfer equiv over, right?</p>",
        "id": 125868243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038374
    },
    {
        "content": "<p>Exactly</p>",
        "id": 125868246,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038382
    },
    {
        "content": "<p>Here's the class:</p>\n<div class=\"codehilite\"><pre><span></span>class transportable (f : Type u → Type v) :=\n(on_equiv : Π {α β : Type u} (e : equiv α β), equiv (f α) (f β))\n(on_refl  : Π (α : Type u), on_equiv (equiv.refl α) = equiv.refl (f α))\n(on_trans : Π {α β γ : Type u} (d : equiv α β) (e : equiv β γ), on_equiv (equiv.trans d e) = equiv.trans (on_equiv d) (on_equiv e))\n</pre></div>",
        "id": 125868250,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038410
    },
    {
        "content": "<p>I guess if I had a group on X and an equiv from X to Y I'd definitely like to be able to get at the induced group on Y</p>",
        "id": 125868260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038441
    },
    {
        "content": "<p>Ah very good. Right now, the instances I'm generating are kind of messy. I'll try to structure them so that you can look into them then</p>",
        "id": 125868302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038484
    },
    {
        "content": "<p>but that might be a different question</p>",
        "id": 125868306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038489
    },
    {
        "content": "<p>I am not sure I can give a definitive answer to your question</p>",
        "id": 125868317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038558
    },
    {
        "content": "<p>If I don't structure them but I make them definitions, you still benefit from defeq</p>",
        "id": 125868319,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038565
    },
    {
        "content": "<p>My impression was that for theoretical reasons some people wanted things more general than maps between types to be transportable</p>",
        "id": 125868375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038618
    },
    {
        "content": "<p>You mean like groups, rings, etc?</p>",
        "id": 125868378,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038648
    },
    {
        "content": "<p>I think the issue raised was that if X and Y were equiv and then X got a group structure, then Y would get a group structure, but if then X got a ring structure on top of that, which induced the group structure, then one would want to push over both the ring structure on Y and the proof that the ring structure on Y reduced to the group structure</p>",
        "id": 125868427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038731
    },
    {
        "content": "<p>But I am not too worried about this at the minute. We might just want to try a prototype at the minute</p>",
        "id": 125868428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038748
    },
    {
        "content": "<p>to see if we can get anything working</p>",
        "id": 125868429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038760
    },
    {
        "content": "<p>I have thought about this a certain amount today. If X and Y have extra structure, e.g. if they're both rings, then there is ring_equiv, which equiv + assumption that the maps are ring isomorphisms</p>",
        "id": 125868438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038826
    },
    {
        "content": "<p>Cool. I'm going to push it on a repo on Github before making a PR for mathlib. This way you can play with it and tell me what you need</p>",
        "id": 125868440,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038834
    },
    {
        "content": "<p>And if two things are ring-equiv then you can get some more theorems</p>",
        "id": 125868481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038869
    },
    {
        "content": "<p>e.g. if something is a module for one ring then it becomes a module for the other ring</p>",
        "id": 125868482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038880
    },
    {
        "content": "<p>That would not be true if the rings were just equiv</p>",
        "id": 125868485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038899
    },
    {
        "content": "<p>That's going to be interesting. I'll have to think on how to do that</p>",
        "id": 125868492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038910
    },
    {
        "content": "<p>So some wise people made some comments about this earlier</p>",
        "id": 125868493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038925
    },
    {
        "content": "<blockquote>\n<p>That would not be true if the rings were just equiv</p>\n</blockquote>\n<p>Does that mean ring-equiv also asserts that the ring operations respect the underlying isomorphism?</p>",
        "id": 125868496,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525038959
    },
    {
        "content": "<p>right</p>",
        "id": 125868536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038967
    },
    {
        "content": "<p>If X is a ring</p>",
        "id": 125868539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038978
    },
    {
        "content": "<p>then this means in practice that you have add and mul and neg and one and zero</p>",
        "id": 125868540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525038989
    },
    {
        "content": "<p>and all of those transfer</p>",
        "id": 125868541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039005
    },
    {
        "content": "<p>so if you have an equiv X = Y</p>",
        "id": 125868542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039014
    },
    {
        "content": "<p>Right and you need access to their definitions</p>",
        "id": 125868543,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525039019
    },
    {
        "content": "<p>then you can transfer them all over from X to Y</p>",
        "id": 125868549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039027
    },
    {
        "content": "<p>On the other hand if X and Y are already rings</p>",
        "id": 125868552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039034
    },
    {
        "content": "<p>and you decide that there's a canonical isomorphism between them</p>",
        "id": 125868553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039042
    },
    {
        "content": "<p>then you're going to have to prove that the add mul neg etc all transfer over from one to the other</p>",
        "id": 125868555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039064
    },
    {
        "content": "<p>and once you've done that, you have a better class of equiv which is specifically for rings</p>",
        "id": 125868556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039075
    },
    {
        "content": "<p>and you can prove more theorems with it</p>",
        "id": 125868596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039090
    },
    {
        "content": "<p>each of which is trivial to a mathematician</p>",
        "id": 125868604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039135
    },
    {
        "content": "<p>such as \"oh look, M is a free R-module and R is isomorphic to S so M is now a free S-module\"</p>",
        "id": 125868610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039152
    },
    {
        "content": "<p>or \"M is a Noetherian Cohen-Macauley R-module which is R-generated by these three elements and R is isomorphic to S so now M is a Noetherian Cohen-Macauley S-module which is S-generated by these three elements\"</p>",
        "id": 125868661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039216
    },
    {
        "content": "<p>and the definition of Cohen-Macauley is pretty complicated</p>",
        "id": 125868662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039236
    },
    {
        "content": "<p>but it complies with the unwritten promise</p>",
        "id": 125868663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039249
    },
    {
        "content": "<p>which is that it only depends on the underlying ring up to ring-isomorphism</p>",
        "id": 125868667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039263
    },
    {
        "content": "<p>It seems to me that mathematicians have got a really good intuitive feeling for these promises</p>",
        "id": 125868678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525039304
    },
    {
        "content": "<p>Nice</p>",
        "id": 125868728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525039392
    },
    {
        "content": "<p>Given a structure like group or ring, if you derive <code>transportable</code> it gives automatically the isomorphism between the properties of the structures whenever you have an isomorphism between two types</p>",
        "id": 125868774,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525039526
    },
    {
        "content": "<p>I'm getting close to a complete derivation and it works with group so far. It will be fun to see you try it with other structures</p>",
        "id": 125868815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525039566
    },
    {
        "content": "<blockquote>\n<p>The free theorem for <code>Pi X, X</code> is: for all X, for all f : X -&gt; X, for all x : X, f x = x :-)</p>\n</blockquote>\n<p>That's not correct. You need to quantify over polymorphic functions: for all f : (\\forall X, X -&gt; X), for all X, for all x : X, f X x = x</p>",
        "id": 125874746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525053636
    },
    {
        "content": "<p>As Kenny and others have noted, the definition of chN is not correct in dependent type theories like lean because there are additional polymorphic functions that are not parametric. However, you can repair the church nat construction by taking a subtype to enforce that the polymorphic functions are functorial. For example, church unit is:</p>\n<div class=\"codehilite\"><pre><span></span>def ch_unit := { f : ∀ X : Type, X → X // ∀ (X Y) (g : X → Y) x, f Y (g x) = g (f X x) }\n</pre></div>\n\n\n<p>Can you see the correct condition for church nat?</p>",
        "id": 125874930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525054099
    },
    {
        "content": "<p>By the way, to generate the type of a church encoding, the idea is just look at the recursor for the inductive type. For example, ignoring dependencies in the motive, the type of nat.rec is <code>∀ C, C → (C → C) → ℕ → C</code>, so if you move the <code>ℕ → </code>to the beginning this is exactly the canonical map from N to chN (and the remainder <code>∀ C, C → (C → C) → C</code> is chN itself). (The ordering of the two arguments is not important, and only reflects that <code>zero</code> is the first constructor and <code>succ</code> is the second.)</p>",
        "id": 125874995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525054308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, did you see <a href=\"https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff\">https://gist.github.com/rwbarton/08924014ebc7b1cf68ec624989249aff</a>?</p>",
        "id": 125875260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525054866
    },
    {
        "content": "<p>I'm thinking now that having a <code>class</code> is problematic because the type of the transport function depends on the parameters of the structure in a way that I don't think can be encoded in a <code>class</code> declaration. Plus I don't see any real advantage to having the class anyways. Rather we could just generate definitions <code>group.transport</code>, <code>ring.transport</code> etc.</p>",
        "id": 125875554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525055529
    },
    {
        "content": "<p>I don't think I see your point</p>",
        "id": 125875922,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525056294
    },
    {
        "content": "<p>My two messages above are unrelated to each other</p>",
        "id": 125875971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056368
    },
    {
        "content": "<p>so I'm not sure what the point that you don't see is <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125875978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056433
    },
    {
        "content": "<p>The gist is supposed to be an example of what we want to have autogenerated: everything defined by <code>magic</code></p>",
        "id": 125876020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056498
    },
    {
        "content": "<p>But making <code>group.transportable</code> be an instance of a class is unnecessary and in general awkward (my gist already contains three classes, and if there are dependencies between the parameters of a structure then things get even more complicated)</p>",
        "id": 125876032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056592
    },
    {
        "content": "<p>Does your gist illustrate the awkwardness that you're referring to?</p>",
        "id": 125876229,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525056889
    },
    {
        "content": "<p>To the extent that I already had to define three separate classes <code>transportable</code>, <code>transportable2</code>, <code>transportable3</code></p>",
        "id": 125876246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056923
    },
    {
        "content": "<p>It doesn't illustrate what happens when there are dependencies between arguments</p>",
        "id": 125876252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525056944
    },
    {
        "content": "<p>But if you don't make them classes you still need to define records, no?</p>",
        "id": 125876298,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525056979
    },
    {
        "content": "<p>Well the instance called <code>group.transportable</code> is only really used as <code>transport group</code>, so <code>transport group</code> can just be named <code>group.transport</code> and no need for a structure.</p>",
        "id": 125876311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525057079
    },
    {
        "content": "<p>If we need the <code>on_refl</code> and <code>on_trans</code> fields then they can be called <code>group.transport_on_refl</code> or something</p>",
        "id": 125876352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525057097
    },
    {
        "content": "<p>By analogy, there's no class that contains all the <code>.rec</code> functions which are defined for inductive types</p>",
        "id": 125876409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525057258
    },
    {
        "content": "<p>I see that you're arguing against the necessity. I don't see any issue with using a class nonetheless. And the upside of having one is that it allows you to generalize lemmas or definitions. It might be that, as you seem to suggest, there's no ground breaking theorems about those classes. It can still allow you to reduce the boilerplate code</p>",
        "id": 125876510,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525057485
    },
    {
        "content": "<p>Well at a minimum, you'd need one class per number of type arguments, unless there is a clever way to express <code>transportable2</code> in terms of <code>transportable</code> twice.</p>",
        "id": 125876762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525058049
    },
    {
        "content": "<p>I'm not entirely sure what should happen when there are dependencies between arguments. <a href=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad\">https://gist.github.com/rwbarton/d847ef6d1783f0d0859eb80de8327bad</a> shows one possibility. Here <code>t1_space</code> has two arguments, a type <code>α</code> and a topology on <code>α</code>. Since the second argument is not a type, there is no equivalence in that position.</p>",
        "id": 125876766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525058072
    },
    {
        "content": "<p>Having three separate classes does not seem like much of a problem to me. But you can probably equate <code>transportable2 f</code> to <code>transportable (uncurry f)</code>, that way, you can use some of the same definitions for both. And for dependent arguments, if it's more trouble than it's worth, you may have a more ad hoc approach (without classes) for those cases.</p>",
        "id": 125877059,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525058870
    },
    {
        "content": "<p>The range of possible <code>transportable</code> classes is unbounded, not just because of things like <code>transportable2</code> for other values of 2 but also because of higher order functors like <code>(Type -&gt; Type) -&gt; Type</code>, and Pi types like <code>\\forall A, group A -&gt; Type</code>. If a tactic generated the transportable theorem for a functor, it would need to select the theorem statement from an unbounded class of statements, namely the \"free theorems\"</p>",
        "id": 125880638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525067688
    },
    {
        "content": "<p>You can express <code>transportable2</code> in a more modular way, by generalizing <code>equiv</code>. Define an <code>~=</code> relation on (many) types by induction as follows: If <code>x y : Type</code> then <code>x ~= y</code> means <code>equiv x y</code> (i.e. the usual sense), and if <code>f g : A -&gt; B</code> then <code>f ~= g</code> iff <code>\\forall x y, x ~= y -&gt; f x ~= g y</code>. Then <code>transportable x</code> means <code>x ~= x</code>. This generalizes <code>transportable2</code> and <code>transportable3</code>, and also yields transportable for <code>F : (Type -&gt; Type) -&gt; Type</code>, asserting that if <code>f ~= g</code> at <code>Type -&gt; Type</code> then <code>F f ~= F g</code>.</p>",
        "id": 125880688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525067798
    },
    {
        "content": "<blockquote>\n<p>As Kenny and others have noted, the definition of chN is not correct in dependent type theories like lean because there are additional polymorphic functions that are not parametric. However, you can repair the church nat construction by taking a subtype to enforce that the polymorphic functions are functorial.</p>\n</blockquote>\n<p>You have put the \"free theorem\" in with the definition! It really is free now :-)</p>",
        "id": 125881912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525070960
    },
    {
        "content": "<p>If you demand that a church numeral is functorial, then the naturals are a universal object because they are freely generated by <code>x : X</code> (zero) and <code>f : X -&gt; X</code> (succ), so any church numeral will be determined by its behaviour on the universal object, with proof by a trivial diagram chase.</p>",
        "id": 125881965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071091
    },
    {
        "content": "<p>And so a church numeral is uniquely determined by what it does on nat, which is precisely the missing theorem for proving the equiv between church nat and nat</p>",
        "id": 125881967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071118
    },
    {
        "content": "<p>A follow-up to the paper should be \"Dependent type theory : extra conditions for free\"</p>",
        "id": 125882007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071170
    },
    {
        "content": "<p>doesn't sound as marketable</p>",
        "id": 125882009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071180
    },
    {
        "content": "<p>Initially I had thought that church numerals were just some stupid trick for encoding nat. I hadn't until now realised that they were a literal translation of the inductive definition of nat into another language.</p>",
        "id": 125882053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071246
    },
    {
        "content": "<p>But I hadn't got the translation quite right -- I was using the definition I found in Software Foundations. Maybe they are the translation into some other flavour of theory e.g. some lambda calculus thing</p>",
        "id": 125882071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071306
    },
    {
        "content": "<p>So satan was bad after all -- he shouldn't really be allowed to be a church nat because he's not functorial enough.</p>",
        "id": 125882116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525071375
    },
    {
        "content": "<p>Some more church nat puzzles</p>",
        "id": 125958209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525202170
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">chℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">chnat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"n\">chℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">ℕ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">chℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- f (f^n x)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">of_nat&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">chℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">of_nat&#39;</span> <span class=\"n\">n</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- f^n (f x)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat_of_chnat_of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nat_of_chnat_of_nat&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">of_nat&#39;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">of_nat&#39;_is_of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">of_nat&#39;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">chnat</span>\n</pre></div>",
        "id": 125958215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525202177
    },
    {
        "content": "<p>I haven't proved all of them, I expected them all to be true.</p>",
        "id": 125958222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525202208
    },
    {
        "content": "<p>The typeclass <code>is_group_hom</code> (in <code>algebra/group.lean</code> in mathlib) transports across a lot of structure</p>",
        "id": 126359013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948676
    },
    {
        "content": "<p>For example, <code>equiv.Pi_congr_right</code> says that if (F i) and (G i) biject for all i, then Pi i, F i bijects with Pi i, G i</p>",
        "id": 126359063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948745
    },
    {
        "content": "<p>but if the bijections are all group homs then the product bijection is also a group hom</p>",
        "id": 126359070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948766
    },
    {
        "content": "<p>and the proof is idea-free</p>",
        "id": 126359073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948787
    },
    {
        "content": "<p>so instead of having to write my own instance for this (which I just did)</p>",
        "id": 126359117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"err\">≃</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n <span class=\"k\">show</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 126359133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948839
    },
    {
        "content": "<p>(OK so it was additive group homs, which is a slightly different typeclass)</p>",
        "id": 126359135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948851
    },
    {
        "content": "<p>this should surely have been auto-generated for me when the type class inference system realised I needed it. Right?</p>",
        "id": 126359143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948876
    },
    {
        "content": "<p>Similarly, given</p>",
        "id": 126359150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948919
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Pi_lift_map₁</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fi</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126359187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948924
    },
    {
        "content": "<p>I should get a free instance of \"all the H i are group homs implies their product is\"</p>",
        "id": 126359192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525948968
    },
    {
        "content": "<p>that's the UMP of product right</p>",
        "id": 126359252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525949106
    },
    {
        "content": "<p>Pi_lift_map2 is the UMP of product</p>",
        "id": 126359306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949203
    },
    {
        "content": "<p>This is not exactly trivial. It's conceivable it falls out of the <code>Pi_instance</code> tactic stuff, but you do have to make use of some lemmas and funext in appropriate places</p>",
        "id": 126359317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949242
    },
    {
        "content": "<p>I would like to make Lean behave more like a mathematician</p>",
        "id": 126359366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949298
    },
    {
        "content": "<p>and mathematicians know that the function one is easy</p>",
        "id": 126359369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949316
    },
    {
        "content": "<p>and they instantly deduce the equiv one</p>",
        "id": 126359371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949322
    },
    {
        "content": "<p>I can see <code>simp</code> being able to do this one with some hints</p>",
        "id": 126359372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949329
    },
    {
        "content": "<p>the equiv one is literally the same theorem though</p>",
        "id": 126359376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949342
    },
    {
        "content": "<p>There's a meta-hint for this sort of thing</p>",
        "id": 126359382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949346
    },
    {
        "content": "<p>that is trivial even by lean's standards</p>",
        "id": 126359384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949356
    },
    {
        "content": "<p>\"To prove axiom X for the product, use axiom X on the factors\"</p>",
        "id": 126359385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949363
    },
    {
        "content": "<p>I agree it's the same theorem, that's why it has the same proof</p>",
        "id": 126359388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949380
    },
    {
        "content": "<p>but you told me to write it twice</p>",
        "id": 126359391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949390
    },
    {
        "content": "<p>because you said Lean needs to be told it twice</p>",
        "id": 126359392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949398
    },
    {
        "content": "<p>Right?</p>",
        "id": 126359393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949399
    },
    {
        "content": "<p>you should apply the theorem, not prove it twice</p>",
        "id": 126359394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949401
    },
    {
        "content": "<p>heh</p>",
        "id": 126359445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949410
    },
    {
        "content": "<p>def X := proof, def Y := X</p>",
        "id": 126359447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525949412
    },
    {
        "content": "<p>ha ha</p>",
        "id": 126359507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949548
    },
    {
        "content": "<p>proof <code>is_add_group_hom.Pi_lift H</code> fails</p>",
        "id": 126359509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949564
    },
    {
        "content": "<p>proof <code>is_add_group_hom.Pi_lift (λ i, H i)</code> succeeds</p>",
        "id": 126359510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949576
    },
    {
        "content": "<p>Lean knows it's looking for something of a certain type lam i, map</p>",
        "id": 126359518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949594
    },
    {
        "content": "<p>and H i is an equiv which coerces to map</p>",
        "id": 126359519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949602
    },
    {
        "content": "<p>but it's not smart enough to do it without the i</p>",
        "id": 126359520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525949611
    },
    {
        "content": "<p>what about <code>is_add_group_hom.Pi_lift _</code>?</p>",
        "id": 126360142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525950709
    },
    {
        "content": "<p>nope</p>",
        "id": 126365134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525959478
    },
    {
        "content": "<p>Ooh look, this is back in the days when I used to post one paragraph as ten one-sentence posts.</p>\n<p>I finally got around to making this an issue.</p>\n<p><a href=\"https://github.com/leanprover/mathlib/issues/408\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/408\">https://github.com/leanprover/mathlib/issues/408</a></p>",
        "id": 135390412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538990407
    }
]