[
    {
        "content": "<p>Hi, I'd like to ask two questions about typeclasses in the Lean vscode extension :</p>\n<ol>\n<li>Is there a way to display the (combinations of) \"minimal/required fields\" of some superclass? For example getting Lean to tell you that you can implement <code>monad</code> with just <code>pure</code> and <code>bind</code> even though <code>monad</code> extends <code>functor, has_pure, has_seq, has_seq_left ...</code>?</li>\n<li>Is there a way to view the actual definition that lies at the end of some typeclass resolution? IE getting <code>⊥ : nat := 0</code> instead of what you get with pp.all or by turning trace.class_instances on :</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span> <span class=\"n\">nat</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">to_has_bot</span> <span class=\"n\">nat</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">canonically_ordered_add_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_order_bot</span> <span class=\"n\">nat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">canonically_ordered_comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_canonically_ordered_add_monoid</span> <span class=\"n\">nat</span>\n           <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">canonically_ordered_comm_semiring</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>Thanks!</p>",
        "id": 204377009,
        "sender_full_name": "Chris B",
        "timestamp": 1595204377
    },
    {
        "content": "<p><code>suggest</code> can help with 1</p>",
        "id": 204377124,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595204528
    },
    {
        "content": "<p>Thanks. Can you expand a little bit on what you had in mind?  The docs didn't have any examples of it as a means of typeclass synthesis/getting hints via errors, and the naive approach didn't get me too far.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">Option</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">applicable</span> <span class=\"n\">declarations</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"n\">monad</span> <span class=\"n\">Option</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">suggestMonad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">applicable</span> <span class=\"n\">declarations</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"err\">⊢</span> <span class=\"n\">monad</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 204377970,
        "sender_full_name": "Chris B",
        "timestamp": 1595206221
    },
    {
        "content": "<p>ah, sad. here is an example of <code>suggest</code> being helpful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">polynomial_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>it points out that you can either directly construct the whole <code>equiv</code>, or that you can provide two homomorphisms and proofs that they are inverse</p>",
        "id": 204378144,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595206619
    },
    {
        "content": "<p>the latter is called <code>alg_equiv_of_alg_hom</code></p>",
        "id": 204378154,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595206648
    },
    {
        "content": "<p>are you sure that mathlib has a proof that monad can be implemented from pure and bind?</p>",
        "id": 204378164,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595206678
    },
    {
        "content": "<p>The instance of <code>parser.monad</code> in core is defined only using pure and bind, but the output of <code>#print parser.monad</code> with implicits on is crazy, so I'll spare you the markdown. Thanks for posting that other example, I can see how that's helpful.</p>",
        "id": 204378428,
        "sender_full_name": "Chris B",
        "timestamp": 1595207162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>    <span class=\"c1\">-- prints `0`</span>\n</code></pre></div>",
        "id": 204378728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595207682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  <br>\nThanks. So in situations where I can't just eval my way to enlightenment, is there a way to get IE <code>has_sup.sup : nat -&gt; nat -&gt; nat := max</code>instead of a bunch of lattice/to_has_sup stuff?</p>",
        "id": 204379265,
        "sender_full_name": "Chris B",
        "timestamp": 1595208711
    },
    {
        "content": "<p>This is a good question, to which I don't have a definitive answer, so hopefully others will make suggestions.</p>",
        "id": 204379404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595208931
    },
    {
        "content": "<p>For your second example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">run_cmd</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">has_sup</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"bp\">.</span>    <span class=\"c1\">-- prints `λ (a b : ℕ), ite (a ≤ b) b a`</span>\n</code></pre></div>\n\n\n<p>works well.</p>",
        "id": 204379407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595208940
    },
    {
        "content": "<p>Ah that's really cool, thank you.</p>",
        "id": 204379517,
        "sender_full_name": "Chris B",
        "timestamp": 1595209100
    },
    {
        "content": "<p>Perhaps we need a <code>#whnf</code> command that does exactly that.</p>",
        "id": 204379542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595209197
    },
    {
        "content": "<p>For figuring out which fields to add when I'm making an instance of a structure I usually look at the definition of the structure, and then define the instances for the classes it's extending (recursively, ie by looking at those definitions too) and finally fill in the remaining fields manually. Of course I also look out for any slick constructors which do the work for me</p>",
        "id": 204392589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595229474
    }
]