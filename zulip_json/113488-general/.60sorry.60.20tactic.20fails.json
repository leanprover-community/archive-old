[
    {
        "content": "<p>I've managed to build a proof where the <code>sorry</code> tactic fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.free_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">free_algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_sorry</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pre.of</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">pre.of</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">pre.of</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- everything is ok without these two lines, but I think I need them for my proof</span>\n  <span class=\"n\">set</span> <span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- infer type failed, function expected at ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>In fact, I can't work out any tactic here to make progress.</p>",
        "id": 212418947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601986903
    },
    {
        "content": "<p>What's the goal when sorry fails?</p>",
        "id": 212420273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601987634
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">infer</span> <span class=\"n\">type</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">pa</span> <span class=\"n\">pb</span><span class=\"o\">),</span> <span class=\"n\">pa</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span><span class=\"o\">)</span> <span class=\"n\">h_x</span> <span class=\"n\">h_y</span>\n    <span class=\"o\">(</span><span class=\"n\">eqv_gen.rel</span> <span class=\"n\">h_x</span> <span class=\"n\">h_y</span> <span class=\"n\">h_a</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"k\">let</span> <span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">b</span>\n  <span class=\"k\">in</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">pa</span> <span class=\"n\">pb</span><span class=\"o\">),</span> <span class=\"n\">pa</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">eqv_gen.rel</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h_x</span> <span class=\"n\">h_y</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">h_a</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">h_x</span> <span class=\"n\">h_y</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">pre.of</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">pa</span> <span class=\"n\">pb</span><span class=\"o\">),</span> <span class=\"n\">pa</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span><span class=\"o\">)</span> <span class=\"n\">h_x</span> <span class=\"n\">h_y</span>\n    <span class=\"o\">(</span><span class=\"n\">eqv_gen.rel</span> <span class=\"n\">h_x</span> <span class=\"n\">h_y</span> <span class=\"n\">h_a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212420430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601987700
    },
    {
        "content": "<p>Which I guess is nonsensically typed - so the bug is in <code>induction</code>.</p>",
        "id": 212420647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601987816
    },
    {
        "content": "<p>(edited the snippets above to be a more minimal example)</p>",
        "id": 212422434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601988739
    },
    {
        "content": "<p><code>induction</code> is known to have bugs that can cause the tactic state to become ill-typed, but I'm not sure if I've seen this one specifically before. I guess it's probably related to <code>set</code>, since that's a relatively uncommon tactic.</p>",
        "id": 212425116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601989995
    }
]