[
    {
        "content": "<p>The new \"Try this\" stuff is really cool! Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> for this marvelous feature!</p>",
        "id": 188577777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582141457
    },
    {
        "content": "<p>I only pressed the merge button.  All thanks should go to <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> and <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>!</p>",
        "id": 188577838,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582141512
    },
    {
        "content": "<p>I just made a few suggestions, <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> did all the hard work!</p>",
        "id": 188578230,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582141764
    },
    {
        "content": "<p>What is this feature?</p>",
        "id": 188583693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582145231
    },
    {
        "content": "<p>You need to update mathlib and try <code>suggest</code> or <code>squeeze_simp</code>. Then you'll see.</p>",
        "id": 188583744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582145272
    },
    {
        "content": "<p>I wanted to try it on <code>rintro</code> so I tested:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span><span class=\"err\">?</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The result is pretty funny.</p>",
        "id": 188584508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582145808
    },
    {
        "content": "<p>I guess there must be some depth limitation (which looks wise).</p>",
        "id": 188584527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582145835
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/cd0e2f6af4201b832c1f6ebefbc352108ff38458/src/tactic/rcases.lean#L356-L357\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/cd0e2f6af4201b832c1f6ebefbc352108ff38458/src/tactic/rcases.lean#L356-L357\">https://github.com/leanprover-community/mathlib/blob/cd0e2f6af4201b832c1f6ebefbc352108ff38458/src/tactic/rcases.lean#L356-L357</a></p>",
        "id": 188584619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582145889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span> <span class=\"c1\">-- exact rfl</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Has the behaviour of <code>squeeze_simp</code> changed? It still seems to do the same for me.</p>\n<div class=\"codehilite\"><pre><span></span>commit 8700aa7d78b10b65cf8db1d9e320872ae313517a (HEAD, origin/lean-3.5.1)\nAuthor: Gabriel Ebner &lt;gebner@gebner.org&gt;\nDate:   Wed Feb 19 00:13:13 2020 +0100\n\n    feat(docs): install mathlibtools package with pip (#2010)\n</pre></div>",
        "id": 188586662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147205
    },
    {
        "content": "<p>Yes, it has changed.</p>",
        "id": 188586797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147306
    },
    {
        "content": "<p>Update the VSCode extension too.</p>",
        "id": 188586938,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147387
    },
    {
        "content": "<p>He should still see \"Try this:\" without updating, right?</p>",
        "id": 188586975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>squeeze_simp !? only? (* | [(* | (- id | expr)), ...]?) (with id*)? (at (* | (⊢ | id)*))? &lt;error while executing interactive.param_desc: don&#39;t know how to pretty print [has_bind.bind (monad.to_has_bind lean.parser)] (lean.parser.tk &quot;{&quot;) (λ (_x : unit), lean.parser.sep_by (lean.parser.skip_info (lean.parser.tk &quot;,&quot;)) (sum.inl &lt;$&gt; (lean.parser.tk &quot;..&quot; *&gt; interactive.types.texpr) &lt;|&gt; sum.inr &lt;$&gt; (prod.mk &lt;$&gt; lean.parser.ident &lt;* lean.parser.tk &quot;:=&quot; &lt;*&gt; interactive.types.texpr)) &gt;&gt;= λ (ls : list (pexpr ⊕ name × pexpr)), lean.parser.tk &quot;}&quot; &gt;&gt;= λ (_x : unit), (λ (_a : list pexpr × list (name × pexpr)), prod.cases_on _a (λ (fst : list pexpr) (snd : list (name × pexpr)), id_rhs ((λ (_a : list name × list pexpr), lean.parser pexpr) (list.unzip snd)) ((λ (_a : list name × list pexpr), prod.cases_on _a (λ (fst_1 : list name) (snd : list pexpr), id_rhs (lean.parser pexpr) (pure (pexpr.mk_structure_instance {struct := none name, field_names := fst_1, field_values := snd, sources := fst})))) (list.unzip snd)))) (list.partition_map id ls))&gt;\n</pre></div>\n\n\n<p>Best error message ever</p>",
        "id": 188587051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147452
    },
    {
        "content": "<p>I'm guessing Kevin doesn't remember that it didn't always say \"Try this:\" <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 188587058,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147457
    },
    {
        "content": "<p>I haven't seen it saying that yet!</p>",
        "id": 188587074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147467
    },
    {
        "content": "<p>gaargh I didn't restart Lean :D</p>",
        "id": 188587114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147498
    },
    {
        "content": "<p>Then you're not running the version of mathlib you claimed...</p>",
        "id": 188587126,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147503
    },
    {
        "content": "<p>Woo!</p>",
        "id": 188587142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147516
    },
    {
        "content": "<p>Although, you raise a good point about <code>suggest</code>, why does it think <code>rfl</code> should prove <code>∀ n : ℕ, n=n</code>?</p>",
        "id": 188587327,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147583
    },
    {
        "content": "<p>Oh, it's messing up its implicit arguments.</p>",
        "id": 188587454,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147622
    },
    {
        "content": "<p>What is funny is that suggest makes the same mistake one of beginners made a couple of weeks ago.</p>",
        "id": 188587519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147680
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1 goal\na b c : set ℕ\n⊢ a ⊆ a ∪ (b ∪ c)\nscratch2.lean:5:2: information trace output\nTry this: exact set.subset_union_left a (b ∪ c)\nTry this: refine set.preimage_mono _\nTry this: refine set.diff_eq_empty.mp _\nTry this: refine set.diff_subset_iff.mp _\nTry this: refine set.image_subset_iff.mp _\nTry this: refine (set.mem_powerset_iff a (a ∪ (b ∪ c))).mp _\nTry this: refine set.compl_subset_compl.mp _\nTry this: refine set.preimage_subset_iff.mpr _\nTry this: refine set.set_of_subset_set_of.mpr _\nTry this: refine set.subset_of_mem_powerset _\nTry this: refine set.subset_union_of_subset_left _ (b ∪ c)\nTry this: refine set.subset_union_of_subset_right _ a\nTry this: refine set.subset.trans _ _\nTry this: refine set.sUnion_subset_iff.mp _ a _\nTry this: refine (set.image_subset_image_iff _).mp _\nTry this: refine (set.preimage_subset_preimage_iff _).mp _\n</pre></div>\n\n\n<p>I don't know which one to try!</p>",
        "id": 188587567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147693
    },
    {
        "content": "<p>You should have tried hint instead of suggest.</p>",
        "id": 188587662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147774
    },
    {
        "content": "<p>At least the <code>exact</code> is at the top of the list</p>",
        "id": 188587686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582147794
    },
    {
        "content": "<p>And this is yet another goal that <code>norm_num</code> mysteriously crushes <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 188587689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147797
    },
    {
        "content": "<p>That's because <code>norm_num &gt; simp</code></p>",
        "id": 188587749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582147811
    },
    {
        "content": "<p>I know, but I'm frequently surprised by this.</p>",
        "id": 188587770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147834
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">tactics</span> <span class=\"n\">make</span> <span class=\"n\">progress</span><span class=\"o\">:</span>\n<span class=\"c1\">----</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">norm_num</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">finish</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">intros1</span>\n</pre></div>\n\n\n<p>But <code>intros1</code> gives me <code>unknown identifier 'intros1'</code></p>",
        "id": 188587792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582147849
    },
    {
        "content": "<p>I wish it were more restrictive, but people seem to be fine with it</p>",
        "id": 188587795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582147854
    },
    {
        "content": "<p>And it's annoying when teaching. I want norm_num to kill only things like 1 &lt; 3</p>",
        "id": 188587809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147869
    },
    {
        "content": "<p>Have you tried using <code>norm_num1</code>? That does no simplification</p>",
        "id": 188587826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582147890
    },
    {
        "content": "<p>intros1 should be tactic.intros1 probably</p>",
        "id": 188587829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147892
    },
    {
        "content": "<p>Too late for this year, but I'll try to remember next year (although next year I may teach using Lean 4!)</p>",
        "id": 188587902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this/near/188587829\" title=\"#narrow/stream/113488-general/topic/Try.20this/near/188587829\">said</a>:</p>\n<blockquote>\n<p>intros1 should be tactic.intros1 probably</p>\n</blockquote>\n<p>Or just <code>intro</code>?</p>",
        "id": 188587910,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147935
    },
    {
        "content": "<p>Of course the correct hint is intro, but suggest is trying to suggest intros1.</p>",
        "id": 188587940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147959
    },
    {
        "content": "<p><code>hint</code> shouldn't return noninteractive tactics.</p>",
        "id": 188587945,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582147964
    },
    {
        "content": "<p>I guess we'll discover many small bugs in those tactics in the coming days while everybody tries to play with Try this</p>",
        "id": 188587988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582147994
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1 goal\n⊢ 0 = 0\nscratch2.lean:5:2: information trace output\nthe following tactics make progress:\n----\nTry this: omega\nTry this: linarith\nTry this: ring\nTry this: norm_num\nTry this: tauto\nTry this: finish\nTry this: solve_by_elim\nTry this: fsplit\nTry this: simp at *\nTry this: exact dec_trivial\nTry this: refl\n</pre></div>\n\n\n<p>I'm loving <code>fsplit</code> for that one. It does close it!</p>",
        "id": 188588140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582148113
    },
    {
        "content": "<p>Partly my fault for not catching that in review, I assumed there was an interactive <code>intro1</code>.</p>",
        "id": 188588241,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582148183
    },
    {
        "content": "<p>why aren't <code>split</code> and <code>constructor</code> on the list as well?</p>",
        "id": 188588245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582148190
    },
    {
        "content": "<p>too easy</p>",
        "id": 188588257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582148208
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">scratch2</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">trace</span> <span class=\"n\">output</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">tactics</span> <span class=\"n\">make</span> <span class=\"n\">progress</span><span class=\"o\">:</span>\n<span class=\"c1\">----</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">norm_num</span>\n</pre></div>\n\n\n<p>Loving the definition of \"progress\" there.</p>",
        "id": 188588401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582148290
    },
    {
        "content": "<p>I was hoping <code>left</code> would work too but it's too smart</p>",
        "id": 188588403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582148292
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> so he sees suggestions for <code>hint</code>!</p>",
        "id": 188588535,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582148418
    },
    {
        "content": "<p>I don't think we need it running both <code>split</code> and <code>fsplit</code>, right?</p>",
        "id": 188588589,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582148477
    },
    {
        "content": "<blockquote>\n<p>Although, you raise a good point about <code>suggest</code>, why does it think <code>rfl</code> should prove <code>∀ n : ℕ, n=n</code>?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> any idea?</p>",
        "id": 188619131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582188295
    },
    {
        "content": "<p>Also, we now have three tactics suggesting stuff to users: <code>library_search</code>, <code>suggest</code> and <code>hint</code>. Should we somehow merge them? Or do they have clearly delimited ranges (like <code>hint</code> is strictly for new users and <code>suggest</code> is slower than library search or something?).</p>",
        "id": 188619225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582188387
    },
    {
        "content": "<p>I'd say <code>library_search</code> has a quite different role to play than the other two and should be kept separate. There are all sorts of situations where you're looking for a specific lemma and not an arbitrary tactical proof.</p>",
        "id": 188619554,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1582188734
    },
    {
        "content": "<p><code>suggest</code> and <code>library_search</code> share most of an implementation but have different use cases, they should definitely stay separate.</p>",
        "id": 188624714,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582193301
    },
    {
        "content": "<p>One could argue that <code>hint</code> should call <code>suggest</code>, since applying a lemma is another tactic that can make progress.</p>",
        "id": 188624749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582193343
    },
    {
        "content": "<p>But <code>suggest</code> will usually be way slower than <code>hint</code>.</p>",
        "id": 188624772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582193365
    },
    {
        "content": "<p>Could you explain how suggest and library_search have different use cases?</p>",
        "id": 188624777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582193373
    },
    {
        "content": "<p>Often I care if a lemma is in the library already, but not if some random terms make progress, since I know how to bash it away. <code>library_search</code> is what I want there, and it will stop as soon as it solves the goal. <code>suggest</code> potentially gives me a long list of things I don't care about and it takes a long time to find it.</p>",
        "id": 188624993,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582193532
    },
    {
        "content": "<p>Maybe it's reasonable to have <code>hint!</code> call both <code>hint</code> and <code>suggest</code>. I really don't think we should combine them by default though.</p>",
        "id": 188627011,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582195522
    },
    {
        "content": "<p>I diagnosed the \"does <code>rfl</code> solve <code>∀ n : ℕ, n=n</code>\" bug at <a href=\"https://github.com/leanprover-community/mathlib/issues/2029\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2029\">https://github.com/leanprover-community/mathlib/issues/2029</a>. It seems to be a problem with the pretty printer, and I'm not sure how to work around it.</p>",
        "id": 188686827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582238426
    }
]