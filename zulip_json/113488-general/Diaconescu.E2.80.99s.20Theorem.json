[
    {
        "content": "<p>I’m really struggling to understand <a href=\"https://github.com/leanprover-community/lean/blob/a4f95b7ef008115baca425f5f0b5c7d0283a80ad/library/init/classical.lean#L27-L70\">Diaconescu’s Theorem in Lean</a>. I’ve gotten this far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">exU</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"n\">exV</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">u_def</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">exU</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">v_def</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">exV</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">not_uv_or_p</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">v</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">hpred</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">exU</span> <span class=\"n\">exV</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">classical.some</span> <span class=\"n\">_</span> <span class=\"n\">U</span> <span class=\"n\">exU</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">classical.some</span> <span class=\"n\">_</span> <span class=\"n\">V</span> <span class=\"n\">exV</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hpred</span> <span class=\"n\">hp</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">exU</span> <span class=\"n\">exV</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some</span> <span class=\"n\">_</span> <span class=\"n\">U</span> <span class=\"n\">exU</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works. The problem is the last line however — I cannot seem to get it to compile using anything but exactly that syntax. The weird thing is using <code>eq.subst</code> instead of <code>▸</code> compiles, but even just switching to <code>@</code> makes it fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">eq.subst</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hpred</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">exU</span> <span class=\"n\">exV</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some</span> <span class=\"n\">_</span> <span class=\"n\">U</span> <span class=\"n\">exU</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">hpred</span> <span class=\"n\">hp</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">exU</span><span class=\"o\">]),</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">exU</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[</span><span class=\"n\">exU</span><span class=\"o\">]),</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">exU</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[</span><span class=\"n\">exU</span><span class=\"o\">]),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">exU</span><span class=\"o\">,</span> <span class=\"n\">exV</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">exU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">exU</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">U</span>\n</code></pre></div>\n<p>I tried filling in those parameters in several different permutations, I tried with <code>eq.rec_on</code>, <code>eq.rec</code>, <code>@eq.rec</code>, <code>rw</code>, <code>simp</code>…nothing succeeded. Is it actually possible to make it compile, or is <code>eq.subst</code> the only way?</p>\n<p>and if so, that’s really weird, because it makes it seems like the <em>actual</em> axiom is not the Axiom of Choice but rather some magic special code in the compiler that makes this one case work (in fact, I can “prove” LEM constructively if I use subtype instead of <code>∃</code> and replace <code>h₀</code> with <code>sorry</code>).</p>",
        "id": 317723486,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1671887475
    },
    {
        "content": "<p>If you use <code>@</code>, you will need to fill in the motive for <code>eq.subst</code> correctly.</p>",
        "id": 317723786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671887628
    },
    {
        "content": "<p>You should be able to use <code>set pp.all true</code> and then <code>#print h₀</code> to see the whole proof term.</p>",
        "id": 317723851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671887646
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hpred</span> <span class=\"n\">_</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The difference is that in term mode the parameter <code>p</code> of <code>hpred</code> is implicit, while inside <code>begin...end</code> it becomes explicit. I guess it is intentional design.</p>",
        "id": 317725174,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1671888232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Diaconescu.E2.80.99s.20Theorem/near/317723851\">said</a>:</p>\n<blockquote>\n<p>You should be able to use <code>set pp.all true</code> and then <code>#print h₀</code> to see the whole proof term.</p>\n</blockquote>\n<p>Thanks, I didn’t know about that option, it appeared to work:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Output from set pp.all true</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">p</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">exU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">exV</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq.subst.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n       <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">_x</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n         <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">exU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">exV</span><span class=\"o\">))</span>\n    <span class=\"n\">U</span>\n    <span class=\"n\">V</span>\n    <span class=\"o\">(</span><span class=\"n\">hpred</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">exU</span> <span class=\"n\">exV</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n       <span class=\"bp\">@</span><span class=\"n\">refl.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_preorder.to_is_refl.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_equiv.to_is_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_is_equiv.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span><span class=\"o\">)))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">exU</span><span class=\"o\">))</span>\n</code></pre></div>\n</div></div>\n<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113488-general/topic/Diaconescu.E2.80.99s.20Theorem/near/317725174\">said</a>:</p>\n<blockquote>\n<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hpred</span> <span class=\"n\">_</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The difference is that in term mode the parameter <code>p</code> of <code>hpred</code> is implicit, while inside <code>begin...end</code> it becomes explicit. I guess it is intentional design.</p>\n</blockquote>\n<p><code>parameter</code>s continue to make my life hard <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>. That simpler solution is really helpful as well though :)</p>",
        "id": 317726343,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1671888873
    },
    {
        "content": "<blockquote>\n<p>The difference is that in term mode the parameter <code>p</code> of <code>hpred</code> is implicit, while inside <code>begin...end</code> it becomes explicit. I guess it is intentional design.</p>\n</blockquote>\n<p>Hm.. I'm not sure about it actually. Testing with simpler examples doesn't support this statement. Maybe I was wrong.</p>",
        "id": 317727108,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1671889287
    },
    {
        "content": "<p>Oh, I see. It's because of <code>private</code> lemmas. Here is a simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- `n` is implicit in `aux`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">aux</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">mul_two</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- `n` is explicit in `aux`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aux</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_two</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317727413,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1671889441
    },
    {
        "content": "<p>ah, that private lemmas thing is helpful, what a weird quirk</p>\n<hr>\n<p>after staring at some errors some more I think I finally get it: the fundamental crux of theorem, the reason why it works for ∃ but not <code>//</code>, is that proof irrelevance means all values of type <code>∃</code> are equal. This then enables us to show that for two different existentials, their “left hand side” (i.e. what is returned by <code>classical.some</code>) will always be equal and that somehow leads into LEM.</p>",
        "id": 317737188,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1671894098
    },
    {
        "content": "<p>Parameters are discouraged, there are always other ways to do things. Mathlib never uses parameters I believe</p>",
        "id": 317744271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671897891
    },
    {
        "content": "<p>It's still used in old files, <a href=\"https://tqft.net/mathlib/computability/partrec\">file#computability/partrec</a> for example.</p>",
        "id": 317744472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671898011
    },
    {
        "content": "<p>I was told that <code>parameter</code> was buggy, but I don't know what exactly is wrong with it.</p>",
        "id": 317744652,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1671898121
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/116395-maths/topic/Borel.20hierarchy/near/315251700\">here</a> for an example where <code>parameter</code> makes <code>induction'</code> fail.</p>",
        "id": 317783649,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671931795
    }
]