[
    {
        "content": "<p>Just ran into this whilst preparing my class for this week:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">-- `convert` doesn't work with `∀`?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- two goals?</span>\n  <span class=\"c1\">-- independent weirdness:</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"c1\">-- no goals?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- actual use case:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- convert h, -- that random \"same goal twice\" thing again</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- this works</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- lol (but `simp` works, as does `dsimp, ring`)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is it expected that the first <code>convert</code> doesn't work? In the actual use case, it's fine after pulling off <code>n</code> and <code>hn</code>.</p>\n<p>Independent oddities: (1) I have a vanishing goal in the MWE, which I thought was very odd. Is this a bug?<br>\n(2) it's always nice to find goals closed by <code>ring, ring</code> (because I always believe it's idempotent). This time I think <code>ring</code> gives up and then randomly applies beta reduction for some reason, enabling <code>ring</code> to work when called a second time.</p>",
        "id": 224862948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612268237
    },
    {
        "content": "<p>Sometimes goals vanish if the second is a metavariable that you populated in the first.</p>",
        "id": 224863423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612268540
    },
    {
        "content": "<p>indeed, but that doesn't seem to be the case here.</p>",
        "id": 224863466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612268564
    },
    {
        "content": "<p>oh wooah, I was wondering whether it was some part of the system trying a cheeky <code>rfl</code> but look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- two goals?</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- no goals?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224863527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612268612
    },
    {
        "content": "<p><code>recover</code> collapses the two goals into one</p>",
        "id": 224863678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612268708
    },
    {
        "content": "<p>So I think this is a bug in a tactic</p>",
        "id": 224863693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612268717
    },
    {
        "content": "<p>Yes it must somehow be literally the same goal being displayed twice. I've never seen <code>recover</code> decrease the number of goals before :-)</p>",
        "id": 224865427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612269853
    },
    {
        "content": "<p>even a <code>let</code> or <code>have</code> coalesces the goals into one</p>",
        "id": 224866348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612270430
    },
    {
        "content": "<p>I remember Reid once remarking that he had no idea why sometimes <code>convert</code> produced two identical goals, so at least this is a partial answer to that question. The rule of thumb I used to use was \"if <code>convert</code> does this, it has done nothing useful, so try something else\".</p>",
        "id": 224867451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612270997
    },
    {
        "content": "<p>So <code>convert</code> just doesn't work with pi types, and there's a bug which makes a goal appear twice? Here's the simplest pi type of all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- two goals</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224903900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612286162
    },
    {
        "content": "<p>The issue seems to be here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">eq.mpr</span> <span class=\"bp\">%%</span><span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>The <code>refine</code> call is supposed to leave no subgoals, but for some reason <code>v</code> becomes a goal here</p>",
        "id": 224906031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612286960
    },
    {
        "content": "<p>Implications are a red-herring too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224906827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287255
    },
    {
        "content": "<blockquote>\n<p>The <code>refine</code> call is supposed to leave no subgoals,</p>\n</blockquote>\n<p>Either this is true and there is a bug in <code>refine</code>, or this is not true and there is a bug in the author who wrote <code>convert</code>'s understanding of how <code>refine</code> works</p>",
        "id": 224906957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287309
    },
    {
        "content": "<p>heh I think you can guess who that is :)</p>",
        "id": 224907025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287338
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.convert/src\">src#tactic.interactive.convert</a> will confirm :)</p>",
        "id": 224907065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287356
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1099\">#1099</a> introduced the bug I think</p>",
        "id": 224907432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287506
    },
    {
        "content": "<p>There have always been duplicate goals there, but perhaps <code>congr'</code> always cleaned them up?</p>",
        "id": 224907479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287523
    },
    {
        "content": "<p>what the heck is that PR</p>",
        "id": 224907506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287536
    },
    {
        "content": "<p>Huh, github led me astray</p>",
        "id": 224907566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287565
    },
    {
        "content": "<p>I meant <a href=\"https://github.com/leanprover-community/mathlib/commit/3478f1f65fc0aed5574a7f59316976f1c01522c2\">https://github.com/leanprover-community/mathlib/commit/3478f1f65fc0aed5574a7f59316976f1c01522c2</a></p>",
        "id": 224907593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287583
    },
    {
        "content": "<p>Which I guess is PR-less</p>",
        "id": 224907606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287590
    },
    {
        "content": "<p>I don't think so... there shouldn't be two goals in the first place</p>",
        "id": 224907729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287635
    },
    {
        "content": "<p>Without the <code>try</code>, <code>convert</code> would just fail</p>",
        "id": 224907776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287665
    },
    {
        "content": "<p>which can't be said to ever be correct behavior</p>",
        "id": 224907793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287680
    },
    {
        "content": "<p>If it fails then the bad <code>set_goals</code> never runs</p>",
        "id": 224907996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287781
    },
    {
        "content": "<p>if it fails then <code>convert</code> fails and then everything stops</p>",
        "id": 224908041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287805
    },
    {
        "content": "<p>Yes, exactly - so the bug wasn't possible to observe until after that commit</p>",
        "id": 224908069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612287820
    },
    {
        "content": "<p>what if congr' doesn't fail though?</p>",
        "id": 224908141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287844
    },
    {
        "content": "<p>the set_goals is just restoring the goals that were taken out while <code>congr'</code> is running</p>",
        "id": 224908233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287891
    },
    {
        "content": "<p>it's the same thing as what <code>focus</code> does, only manually</p>",
        "id": 224908262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612287908
    },
    {
        "content": "<p>This fixes the extra goal issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">with_desc</span> <span class=\"s2\">\"←\"</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"&lt;-\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"using\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">small_nat</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">src</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">sym.is_some</span> <span class=\"k\">then</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">src</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">tgt</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">src</span><span class=\"o\">))</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_meta_var</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">sym.is_some</span> <span class=\"k\">then</span> <span class=\"n\">mk_eq_mp</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"n\">mk_eq_mpr</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.exact</span><span class=\"o\">,</span>\n  <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span>\n  <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic.congr'</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"bp\">$</span> <span class=\"n\">gs'</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span>\n</code></pre></div>\n<p>But it doesn't fix that <code>congr'</code> doesn't know how to prove <code>P = P</code></p>",
        "id": 224909420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288410
    },
    {
        "content": "<p><code>set_goals</code> automatically cleans up duplicate goals in some situations it seems</p>",
        "id": 224909472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288436
    },
    {
        "content": "<p>I don't think so... It does clean up instantiated metavariables though, and the extra goal here is <code>v</code>, which is being instantiated by the <code>congr'</code> tactic</p>",
        "id": 224909603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288491
    },
    {
        "content": "<p>... except when <code>congr'</code> fails, in which case you see <code>v</code> twice</p>",
        "id": 224909889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288611
    },
    {
        "content": "<p>Removing <code>v</code> from <code>gs</code> ought to be enough to fix it, right?</p>",
        "id": 224910032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288658
    },
    {
        "content": "<p>Like I said, the above fixes the goal issue</p>",
        "id": 224910058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288673
    },
    {
        "content": "<p>the issue now is that <code>congr'</code> doesn't prove refl goals</p>",
        "id": 224910134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288689
    },
    {
        "content": "<p>even <code>congr' 0</code> should prove refl goals</p>",
        "id": 224910164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288707
    },
    {
        "content": "<p>Right, my pointis that my fix seemed simpler than yours</p>",
        "id": 224910233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288740
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">convert2</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">with_desc</span> <span class=\"s2\">\"←\"</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"&lt;-\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"using\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">small_nat</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">sym.is_some</span>\n     <span class=\"k\">then</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.mp</span> <span class=\"bp\">%%</span><span class=\"n\">v</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span>\n     <span class=\"k\">else</span> <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.mpr</span> <span class=\"bp\">%%</span><span class=\"n\">v</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">),</span>\n   <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"n\">gs.erase</span> <span class=\"n\">v</span><span class=\"o\">,</span>  <span class=\"c1\">-- only this line is new</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span>\n   <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic.congr'</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n   <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"bp\">$</span> <span class=\"n\">gs'</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span>\n</code></pre></div>",
        "id": 224910265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288756
    },
    {
        "content": "<p>I'm pretty sure I remember a zulip thread / github issue / PR about <code>congr</code> trying <code>refl</code></p>",
        "id": 224910327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288789
    },
    {
        "content": "<p>That's not necessarily enough in general... this is a symptom of a problem</p>",
        "id": 224910333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288792
    },
    {
        "content": "<p>I think the reason for the issue is that when you use <code>%%v</code> to interpolate a metavariable expr into a pexpr, it counts as a <code>_</code> and refine makes it a goal, which I don't want here</p>",
        "id": 224910497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288841
    },
    {
        "content": "<p>but I do want goals to be produced from elaborating <code>r</code></p>",
        "id": 224910527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288856
    },
    {
        "content": "<p>Right, hence my suggestion to just erase <code>v</code> from the saved goals - we know we are just about to work on it, so it doesn't need to be saved for later.</p>",
        "id": 224910583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612288889
    },
    {
        "content": "<p>There are other variables involved, like the implicit arguments in <code>eq.mp</code>. Those shouldn't be goals either</p>",
        "id": 224910727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612288953
    },
    {
        "content": "<p>This was the thread I was thinking of: <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/congr'.20is.20slow\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/congr'.20is.20slow</a></p>",
        "id": 224911070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612289107
    },
    {
        "content": "<p>And this change might be what broke congr: <a href=\"https://github.com/leanprover-community/mathlib/pull/4678/files#diff-c33389a201db0e89fc66a4ef17729baccaede3732ec983d35f1a5781ddd92950L65\">https://github.com/leanprover-community/mathlib/pull/4678/files#diff-c33389a201db0e89fc66a4ef17729baccaede3732ec983d35f1a5781ddd92950L65</a></p>",
        "id": 224911093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612289118
    },
    {
        "content": "<p>This fixes the congr' issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">congr'</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">focus1</span> <span class=\"bp\">$</span>\n  <span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">reflexivity</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">proof_irrel_heq</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">proof_irrel</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">≠</span> <span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">congr_core'</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">all_goals'</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">congr'</span> <span class=\"o\">(</span><span class=\"n\">nat.pred</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">o</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 224911749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612289420
    },
    {
        "content": "<p>The problem isn't anything to do with reducible refl, it's the fact that <code>congr' (some 0)</code> is literally defined to be <code>failed</code></p>",
        "id": 224911805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612289451
    },
    {
        "content": "<p>this version moves the order of operations a bit so that it always tries reflexivity even at depth 0</p>",
        "id": 224911879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612289483
    },
    {
        "content": "<p>Why is <code>congr' (some 0)</code> being used at all though? Doesn't <code>convert</code> pass <code>none</code> by default?</p>",
        "id": 224913797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612290246
    },
    {
        "content": "<p>Yes, the issue is actually that <code>refl</code> was only being tried in the subgoals of a <code>congr_core'</code> application rather than at the top level</p>",
        "id": 224913888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612290293
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6011\">#6011</a></p>",
        "id": 224916562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612291328
    },
    {
        "content": "<p>Unsurprisingly, that PR doesn't build. I guess there are quite a few places in mathlib that try to counteract this bug.</p>",
        "id": 224930660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612297297
    },
    {
        "content": "<p>yeah, I plan to be pushing fixes for the next few hours</p>",
        "id": 224931869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612297803
    },
    {
        "content": "<p>I think <code>congr</code> is a bit more conservative about definitional reduction now, although I'm not 100% sure what the cause is; the first error has to do with an unreduced beta redex in the term provided to <code>convert</code></p>",
        "id": 224932134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612297917
    },
    {
        "content": "<p>I think it's a good idea for <code>congr</code> to not reduce functions on its own, because it makes it less clear what <code>f</code> and <code>g</code> are when it uses the theorem <code>f = g -&gt; a = b -&gt; f a = g b</code></p>",
        "id": 224932502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612298043
    },
    {
        "content": "<p>What happens to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>now?</p>",
        "id": 224935524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612299524
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224937021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612300193
    },
    {
        "content": "<p>I don't really understand how <code>@[congr]</code> attributes work, since <code>forall_congr</code> is marked as <code>@[congr]</code> so it should be firing in principle</p>",
        "id": 224937271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612300331
    },
    {
        "content": "<p>but that's something that has to be fixed in the C++</p>",
        "id": 224937286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612300339
    }
]