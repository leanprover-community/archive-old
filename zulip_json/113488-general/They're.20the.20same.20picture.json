[
    {
        "content": "<p>What is the difference between the following two tactic states, one of which is resolved by abel, and the other or which is not. They pretty-print the same, <code>set_option pp.all true</code> tells me they are different, yet inspecting the types in the infoview tells me they are all the same.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.zify</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_one_dvd_pow_sub_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_le_p</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">dvd_iff_exists_eq_mul_left</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_tsub</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">zify</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int.coe_nat_sub</span> <span class=\"o\">(</span><span class=\"n\">one_le_pow_of_one_le</span> <span class=\"n\">one_le_p</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int.coe_nat_sub</span> <span class=\"o\">(</span><span class=\"n\">le_mul_of_one_le_right'</span> <span class=\"n\">one_le_p</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">int.coe_nat_sub</span> <span class=\"o\">(</span><span class=\"n\">one_le_pow_of_one_le</span> <span class=\"n\">one_le_p</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">hc</span> <span class=\"n\">c</span> <span class=\"n\">one_le_p</span><span class=\"o\">,</span>\n    <span class=\"n\">abel</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- (-1) • ↑1 + ↑(p ^ a * p) = (-1) • ↑(p ^ a) + ((-1) • ↑1 + (↑(p ^ a) + ↑(p ^ a * p)))</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276378735,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1648059694
    },
    {
        "content": "<p><code>norm_cast</code>, <code>abel</code> solves it. my intuition says it's to do with the coerced ones, but not sure.</p>",
        "id": 276379286,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648059911
    }
]