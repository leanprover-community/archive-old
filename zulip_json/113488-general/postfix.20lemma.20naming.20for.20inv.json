[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11617\">#11617</a>, Johan asked me to rename <code>inv_one</code> to <code>one_inv</code> and friends, like <code>inv_X</code> to <code>X_inv</code>. I couldn't find the convention on <a href=\"https://leanprover-community.github.io/contribute/naming.html\">https://leanprover-community.github.io/contribute/naming.html</a>. I did an analysis on master and found <code>inv_*</code> more than <code>*_inv</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"bp\">➜</span>  <span class=\"n\">mathlib</span> <span class=\"n\">git</span><span class=\"o\">:(</span><span class=\"n\">master</span><span class=\"o\">)</span> <span class=\"bp\">✗</span> <span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">w</span> <span class=\"n\">zero_inv</span> <span class=\"bp\">|</span> <span class=\"n\">rg</span> <span class=\"kd\">lemma</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"bp\">➜</span>  <span class=\"n\">mathlib</span> <span class=\"n\">git</span><span class=\"o\">:(</span><span class=\"n\">master</span><span class=\"o\">)</span> <span class=\"bp\">✗</span> <span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">w</span> <span class=\"n\">inv_zero</span> <span class=\"bp\">|</span> <span class=\"n\">rg</span> <span class=\"kd\">lemma</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">with_one.lean</span><span class=\"o\">:</span><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">dedekind_domain.lean</span><span class=\"o\">:</span><span class=\"kd\">lemma</span> <span class=\"n\">inv_zero'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">R₁⁰</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fractional_ideal.div_zero</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_with_zero</span><span class=\"bp\">/</span><span class=\"n\">defs.lean</span><span class=\"o\">:</span><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">matrix</span><span class=\"bp\">/</span><span class=\"n\">nonsingular_inverse.lean</span><span class=\"o\">:</span><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">ennreal.lean</span><span class=\"o\">:</span><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">zmod</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">complex</span><span class=\"bp\">/</span><span class=\"n\">is_R_or_C.lean</span><span class=\"o\">:</span><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">token</span> <span class=\"k\">in</span> <span class=\"n\">one</span> <span class=\"n\">zero</span> <span class=\"n\">smul</span><span class=\"bp\">;</span> <span class=\"k\">do</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">token</span><span class=\"bp\">;</span> <span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">w</span> <span class=\"n\">inv_</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">token</span><span class=\"o\">}</span> <span class=\"bp\">|</span> <span class=\"n\">rg</span> <span class=\"s2\">\"(lemma|theorem)\"</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">rg</span> <span class=\"bp\">-</span><span class=\"n\">w</span> <span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">token</span><span class=\"o\">}</span><span class=\"n\">_inv</span> <span class=\"bp\">|</span> <span class=\"n\">rg</span> <span class=\"s2\">\"(lemma|theorem)\"</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">||</span> <span class=\"n\">echo</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n<span class=\"n\">one</span>\n<span class=\"mi\">5</span>\n<span class=\"mi\">4</span>\n<span class=\"n\">zero</span>\n<span class=\"mi\">9</span>\n<span class=\"mi\">0</span>\n<span class=\"n\">smul</span>\n<span class=\"mi\">3</span>\n<span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 269499447,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643240074
    },
    {
        "content": "<p>/poll Naming of lemmas for postfix operators<br>\nAlways before <code>inv_one</code> <code>transpose_one</code><br>\nAlways after <code>one_inv</code> <code>one_transpose</code><br>\nAfter only in the case of <code>inv</code>, arbitrary elsewhere <code>one_inv</code>, <code>transpose_one</code><br>\nArbitrary everywhere</p>",
        "id": 269499604,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643240168
    },
    {
        "content": "<p>I did change the PR according to the reviewer, thus making the only <code>zero_inv</code> lemmas in mathlib. But I do prefer <code>inv_zero</code> because, without notation, that is the underlying expression.</p>",
        "id": 269499652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643240209
    },
    {
        "content": "<p>&lt;deleted: it did work after refresh&gt;</p>",
        "id": 269499826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643240325
    },
    {
        "content": "<p>Similarly, we have <code>compl</code> which I think should be prefix.</p>",
        "id": 269532956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643266934
    },
    {
        "content": "<p>If it has (postfix) notation or localized notation, I think we should follow the order specified by the notation.</p>",
        "id": 269549998,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643278375
    },
    {
        "content": "<p>That is also the motivation behind names like <code>zero_add</code> and <code>add_zero</code>: those names only make sense if <code>add</code> is infix.</p>",
        "id": 269550282,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643278538
    },
    {
        "content": "<p>Aside: when something is written with projection notation I think it should also be after, but that is trickier, since projection notation is more voluntary.<br>\nIf something is not written with notation I think it should always come before (<code>injective_foo</code>, not <code>foo_injective</code>), but I think I've been outvoted about that before.</p>",
        "id": 269550673,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643278756
    },
    {
        "content": "<p><code>foo_injective</code> is specifically advocated by <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 269845522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643440005
    },
    {
        "content": "<p>It was added to <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> after a vote somewhere here.</p>",
        "id": 269872724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643472396
    }
]