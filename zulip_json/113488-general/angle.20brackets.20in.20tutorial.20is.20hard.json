[
    {
        "content": "<p>Hi!<br>\nI'm working on the tutorial levels and I'm at stage 6 of <code>sub_sequences</code>. However, I've done a few of the previous challenges that included destructuring the proof with <code>\\&lt;</code> and <code>\\&gt;</code> and I still very much struggle to come up with its applications by my own. <br>\n<span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> asked me to post about my experience here - perhaps a cheat sheet of sorts can be put together with some basic examples?</p>\n<p>The description of the mathlib docs under <code>rcases</code> wasn't too helpful either.</p>",
        "id": 203557868,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1594415194
    },
    {
        "content": "<p>It would be easier to help you if you posted a specific example.</p>",
        "id": 203558794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594415799
    },
    {
        "content": "<p>Also, you should know you can do the whole tutorial without ever using a single bracket like this (this is what my students did during the first life of this tutorial). They are used only to compress proofs.</p>",
        "id": 203558839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594415855
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> is asking about when to use the angle brackets, rather than about how to use them in a particular example?</p>",
        "id": 203565008,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594420463
    },
    {
        "content": "<p>Here are a few use cases, apologies if you already know them:</p>\n<ul>\n<li><code>rcases</code> with angle brackets can replace several recursive uses of <code>cases</code>;</li>\n<li><code>rintros</code> with angle brackets can replace <code>intros</code> + <code>cases</code>;</li>\n<li><code>exact</code> with angle brackets can replace <code>use</code> + <code>exact</code>.</li>\n</ul>",
        "id": 203565164,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594420635
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , that's more of what I meant. If those examples were in a handy \"Lean cheatsheet\" or something like that it would be really useful.</p>\n<p>What I mean more specifically <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is that you learn them as you go along in the tutorial but there's always like 4 different things going on when they're used, and that can be overwhelming to keep track of.</p>\n<p>e.g., they're used like this in <code>06_sequences</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">cluster_limit</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ_extr</span><span class=\"o\">,</span> <span class=\"n\">lim_u_φ</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lim_u_φ&#39;</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">subseq_tendsto_of_tendsto&#39;</span> <span class=\"n\">hl</span> <span class=\"n\">φ_extr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">unique_limit</span> <span class=\"n\">lim_u_φ</span> <span class=\"n\">lim_u_φ&#39;</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But this is the first example use of it in file <code>00_ first_proofs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n</code></pre></div>\n\n\n<p>Which at least to me as a beginner has waaaay too much going on in one line to figure out precisely how they work.</p>",
        "id": 203573556,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1594430100
    },
    {
        "content": "<p>To be fair, <code>00_first_proofs</code> only says: \"The goal is to demonstrate what it feels like to prove things using Lean and mathlib. [...] Everything is covered again more slowly and with exercises in the next files.\"</p>",
        "id": 203573759,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594430417
    },
    {
        "content": "<p>I do agree it'd be helpful to have a cheatsheet or reference with some examples of angle brackets / anonymous constructor notation. It's mentioned a few times in TPiL, but there's not really a dedicated section on it: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">3.3.1</a> <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\">9.1</a> <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">10.1</a></p>",
        "id": 203573921,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594430752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> Thanks for the feedback! That's very valuable. Particularly with the workshop coming up next week!</p>",
        "id": 203578518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594438912
    },
    {
        "content": "<p>I understand the scope can't be all encompassing. A cheat sheet of idiomatic tactic solutions would be useful.</p>",
        "id": 203578688,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1594439235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> yup, I'm trying to speedrun the tutorials to get up to speed for next week. See ya there!</p>",
        "id": 203578693,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1594439261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> you don't have to speedrun the tutorials before next week. Next week won't assume any Lean knowledge. Of course lectures and exercises sessions are always easier when you already know everything about the topic, but if you do the first seven tutorials then it means you won't learn anything before Wednesday.</p>",
        "id": 203588973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594459908
    },
    {
        "content": "<p>About the examples you give. I honestly don't know how we could do better in the zeroth file. You have the uncompressed proof right before, at <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L175-L188\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean#L175-L188</a>.  The compressed one is exactly the same, gathering five lines into one. Then you can put your cursor at the beginning of this compressed line and slowly move it towards the right while watching the tactic state changing. What else could we do?</p>",
        "id": 203589131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594460263
    },
    {
        "content": "<p>And the cluster limit example from the 6th file is much simpler. You can replace it with <code>cases ha with φ H, cases H with φ_extr, lim_u_φ</code>. If you don't understand the <code>cases</code> version then you need to go back to the second file (explaining the \"and\" logical connective). Once you understand the double <code>cases</code> solutions, I don't know what to write beyond: you can do it at once using <code>rcases</code> and this bracket syntax (but feel free to PR a new explanation).</p>",
        "id": 203589234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594460499
    },
    {
        "content": "<p>(On the other hand, someone who has done a speedrun will probably be a helpful contributor in the exercise sessions. :-)</p>",
        "id": 203618809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594511307
    }
]