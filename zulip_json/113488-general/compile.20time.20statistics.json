[
    {
        "content": "<p>Can we get some data on how long it takes for <em>each</em> file to compile?</p>",
        "id": 134506913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537768034
    },
    {
        "content": "<p>in mathlib, that is</p>",
        "id": 134506915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537768040
    },
    {
        "content": "<p>You can call <code>lean file.lean --profile</code> on each. You can get the list of all the files of <code>mathlib</code> with <code>git ls-files *.lean</code></p>",
        "id": 134507008,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537768198
    },
    {
        "content": "<p>Make sure everything is already compiled before starting this, so it's only recompiling the particular file you've asked about.</p>",
        "id": 134508030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770061
    },
    {
        "content": "<p>However I'd guess that even this could give misleading results: lean still has to reparse all the imported <code>.olean</code> files, so at the end of a huge development you'd expect even tiny files to have very large compile times with this technique.</p>",
        "id": 134508037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> then what should I do?</p>",
        "id": 134508409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537770612
    },
    {
        "content": "<p>Well, I guess you could measure how bad the effect I pointed out it, by timing compiling an empty olean file that imports everything?</p>",
        "id": 134508430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770654
    },
    {
        "content": "<p>Or even fancier, you could time compiling an empty olean file with the exact same imports, and subtract that time off.</p>",
        "id": 134508454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770690
    },
    {
        "content": "<p>I really don't have a good sense of whether this is necessary!</p>",
        "id": 134508499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770724
    },
    {
        "content": "<p>I can't think of any direct way to get these per-file timings, however.</p>",
        "id": 134508504,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537770732
    },
    {
        "content": "<p>I'm really tempted to neglect that time</p>",
        "id": 134508534,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537770819
    },
    {
        "content": "<p>You can do it once with all the files to get an upper bound on how much time that is but I feel like that must be negligible compared with everything else</p>",
        "id": 134508584,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537770886
    },
    {
        "content": "<p>if I have a file <code>e.lean</code> that imports <code>a</code> and <code>b</code> and <code>c</code> and <code>d</code>, can I look at the time of <code>e</code> and subtract from it the times of the other four files?</p>",
        "id": 134509157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772020
    },
    {
        "content": "<p>I've now tracked 57 out of 255 files</p>",
        "id": 134509337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772287
    },
    {
        "content": "<p>this is really slow</p>",
        "id": 134509338,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772294
    },
    {
        "content": "<p>You shouldn't do it that way.</p>",
        "id": 134509339,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537772309
    },
    {
        "content": "<p>Start with <code>lean --make</code>, then build each file</p>",
        "id": 134509342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537772328
    },
    {
        "content": "<p>I have all the oleans already</p>",
        "id": 134509348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772344
    },
    {
        "content": "<p>I'm running this command:<br>\n<code> git ls-files *.lean | xargs -n1 /c/lean/bin/lean --profile &gt; junk.txt 2&gt; time.txt</code></p>",
        "id": 134509352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772362
    },
    {
        "content": "<p>Ok, in that case, all that is left is wait. The travis build takes more than an hour</p>",
        "id": 134509388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537772404
    },
    {
        "content": "<p>brilliant</p>",
        "id": 134509410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537772426
    },
    {
        "content": "<p>Yup</p>",
        "id": 134509424,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537772440
    },
    {
        "content": "<p>117 out of 255 files</p>",
        "id": 134510040,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537773408
    },
    {
        "content": "<p>there are 11 files that did not show any <code>cumulative profiling times:</code></p>",
        "id": 134514042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537779342
    },
    {
        "content": "<p>which 11 files is that?</p>",
        "id": 134514044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537779347
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/6ea2ca42e517ad801564a86fe7a1b7bd\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/6ea2ca42e517ad801564a86fe7a1b7bd\">https://gist.github.com/kckennylau/6ea2ca42e517ad801564a86fe7a1b7bd</a></p>",
        "id": 134514346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537779738
    },
    {
        "content": "<p>time in seconds, may have indexing error by at most 11</p>",
        "id": 134514354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537779753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>commit ca7f118058342a2f077e836e643d26e0ad1f3ca6\nAuthor: Rob Lewis &lt;Rob.y.lewis@gmail.com&gt;\nDate:   Fri Sep 21 17:06:34 2018 +0200\n\n    fix(docs/tactics.md): missing backquote, formatting\n\n    I think I never previewed when I updated the `linarith` doc before, sorry.\n</pre></div>",
        "id": 134514478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537779948
    },
    {
        "content": "<p>I guess afterall looking at the file size might be more reliable</p>",
        "id": 134514888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537780477
    },
    {
        "content": "<p>is it a good idea if I start working on making the files compile faster?</p>",
        "id": 134515602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537781566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> will you guys accept my PR?</p>",
        "id": 134515606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537781574
    },
    {
        "content": "<p>I think it's really a huge problem that we are tempted to sacrifice readability for compile time</p>",
        "id": 134515948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537782046
    },
    {
        "content": "<p>yes, if you can make a significant improvement on compile times without making the proof much longer, I think I would accept it without issue. I assume you will start from really bad offenders. If you can get at least ~70% reduction in compile time then I would accept a modest increase in proof size</p>",
        "id": 134516218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537782481
    },
    {
        "content": "<p>I find that readability is mostly orthogonal to compile time</p>",
        "id": 134516273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537782544
    },
    {
        "content": "<p>challenge accepted</p>",
        "id": 134516451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537782816
    },
    {
        "content": "<p>I would guess the 11 files which had no profiling information are the <code>.default</code> modules which do nothing but import other modules</p>",
        "id": 134526934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537796506
    },
    {
        "content": "<p>but I don't understand your data yet</p>",
        "id": 134526938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537796521
    },
    {
        "content": "<blockquote>\n<p>I think it's really a huge problem that we are tempted to sacrifice readability for compile time</p>\n</blockquote>\n<p>But <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, it means we can join the programmers <a href=\"https://xkcd.com/303/\" target=\"_blank\" title=\"https://xkcd.com/303/\">https://xkcd.com/303/</a></p>",
        "id": 134528608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537798276
    },
    {
        "content": "<p><a href=\"https://xkcd.com/1205/\" target=\"_blank\" title=\"https://xkcd.com/1205/\">https://xkcd.com/1205/</a></p>",
        "id": 134528990,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537798649
    },
    {
        "content": "<blockquote>\n<p>but I don't understand your data yet</p>\n</blockquote>\n<p>just assume that big numbers means bad, no matter how many there are</p>",
        "id": 134534111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537803645
    },
    {
        "content": "<p>Another approach is to look at the frequent offenders, the tactics that most often eat up most of the run time of proofs. Then we can work on making them faster. If you find such offenders, I wouldn't mind pitching in to improve the tactics.</p>",
        "id": 134541798,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537811770
    },
    {
        "content": "<p>I think <code>simp</code> is like plastic</p>",
        "id": 134552824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537818986
    },
    {
        "content": "<p>when it was discovered, everyone thought it's the greatest idea in the world, and everyone used it</p>",
        "id": 134552838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537819002
    },
    {
        "content": "<p>and it's too late when everyone discovered the ramifications it brings</p>",
        "id": 134552843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537819009
    },
    {
        "content": "<p>Kurzgesagt compares plastic with the story of the king with the golden touch</p>",
        "id": 134552865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537819041
    },
    {
        "content": "<p>One way to improve the performances of <code>simp</code> is to create specialized list of simp lemmas. You can have a look at <code>functor_norm</code>. Sometimes, <code>simp only with &lt;my-list&gt;</code> can be sufficient and will be faster.</p>",
        "id": 134553864,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537820029
    },
    {
        "content": "<p>Are you really sure that <code>simp</code> is the slow thing? It seems to me elaboration is often very slow</p>",
        "id": 134553952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537820118
    },
    {
        "content": "<p>Do you know what kind of situation makes elaboration slow? </p>\n<p>Aside from that, if we divide a proof into proof search + elaboration + proof check, I think shrinking the proof search side will also shrink the elaboration and proof check side because proof search often uses both to select the right approach.</p>",
        "id": 134554391,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537820531
    },
    {
        "content": "<blockquote>\n<p>One way to improve the performances of <code>simp</code> is to create specialized list of simp lemmas. You can have a look at <code>functor_norm</code>. Sometimes, <code>simp only with &lt;my-list&gt;</code> can be sufficient and will be faster.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/simp_attr\" title=\"#narrow/stream/113488-general/topic/simp_attr\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simp_attr</a></p>",
        "id": 134554606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537820796
    },
    {
        "content": "<p>Yes there are pitfalls</p>",
        "id": 134554943,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537821124
    },
    {
        "content": "<p>One thing you can do is create simp attributes local to files or modules and group in that lemma everything useful for its proofs.</p>",
        "id": 134554995,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537821203
    },
    {
        "content": "<p>Then you can merge those lists as a shortcut for just listing all the useful lemmas.</p>",
        "id": 134555063,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537821265
    },
    {
        "content": "<p>The other possibility is to create a command for listing all the simp lemmas used in a file and printing out the way to create the required simp lemma</p>",
        "id": 134555156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537821388
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git checkout master\nSwitched to branch &#39;master&#39;\nYour branch is up-to-date with &#39;origin/master&#39;.\n\n$ /c/lean/bin/lean --profile algebra/big_operators.lean &gt;/dev/null\ncumulative profiling times:\n        compilation 1.37ms\n        decl post-processing 7.92s\n        elaboration 47.7s\n        elaboration: tactic compilation 676ms\n        elaboration: tactic execution 42s\n        parsing 1.18s\n        type checking 19.5ms\n\n$ git checkout faster\nSwitched to branch &#39;faster&#39;\n\n$ /c/lean/bin/lean --profile algebra/big_operators.lean &gt;/dev/null\ncumulative profiling times:\n        compilation 1.53ms\n        decl post-processing 6.86s\n        elaboration 7.37s\n        elaboration: tactic compilation 561ms\n        elaboration: tactic execution 3.82s\n        parsing 995ms\n        type checking 17.9ms\n</pre></div>",
        "id": 134572292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537847482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 134572294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537847496
    },
    {
        "content": "<p>elaboration 47.7s --&gt; 7.37s<br>\nelaboration: tactic execution 42s --&gt; 3.82s</p>",
        "id": 134572336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537847580
    },
    {
        "content": "<p>Nice! What did you do?</p>",
        "id": 134572344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537847607
    },
    {
        "content": "<p>I removed the simp</p>",
        "id": 134572391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537847655
    },
    {
        "content": "<p>and replaced them with either a term proof or <code>rw</code> or <code>simp only</code></p>",
        "id": 134572396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537847666
    },
    {
        "content": "<p>How long did it take for each proof?</p>",
        "id": 134572472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537847812
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/6d1e02b8289f24be38416642b5d91142\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/6d1e02b8289f24be38416642b5d91142\">https://gist.github.com/kckennylau/6d1e02b8289f24be38416642b5d91142</a></p>",
        "id": 134572668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537848144
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/c347e9940c773faf79358b0bf320e73247f51023\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/c347e9940c773faf79358b0bf320e73247f51023\">https://github.com/leanprover-community/mathlib/commit/c347e9940c773faf79358b0bf320e73247f51023</a></p>",
        "id": 134572694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537848227
    },
    {
        "content": "<p>I've got a setup where I can hook-in to <code>begin</code> blocks and take control away from lean when they occur, and do whatever I want to the <code>texpr</code>s in the <code>begin ... end</code> just by importing a file. One use case is replacing <code>simp</code> by what it did last time and seeing if it works---and saving this in a file to be used again later (the idea I mentioned before). You'd enable it by adding <code>import tactic.caching</code> or something at the top of your file.</p>\n<p>This would mean you'd be able to get performance benefits like this without obfuscating the code (but as Scott, or someone else mentioned last time stale caches could break a fresh build for someone else, so you'd have to clear before shipping). If I can get everything working robustly, would anyone hacking on mathlib be willing to try it out?</p>",
        "id": 134590722,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537876079
    },
    {
        "content": "<p>I reckon if we removed all the simp, it can compile in under 10 minutes</p>",
        "id": 134596822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537882434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git ls-files *.lean | xargs -I % sh -c &#39;&gt;&amp;2 echo %; /c/lean/bin/lean --profile % &gt;/dev/null;&#39; &gt; profile.txt 2&gt;&amp;1\n</pre></div>",
        "id": 134672859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537967733
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/04917450f71db69f29150d64f360dd0f\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/04917450f71db69f29150d64f360dd0f\">https://gist.github.com/kckennylau/04917450f71db69f29150d64f360dd0f</a></p>",
        "id": 134672866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537967737
    },
    {
        "content": "<p>if A imports B and C, do I need to subtract the times of B and C from the time of A to get a more accurate datum?</p>",
        "id": 134672884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537967753
    },
    {
        "content": "<p>also, I learnt the hard way that you need to <code>lean --make</code> it before doing this</p>",
        "id": 134672933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537967766
    },
    {
        "content": "<p>as long as you lean --make beforehand subtraction shouldn't be necessary</p>",
        "id": 134674307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537968801
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/7cd92fe25114061b706d6c86aa8059ea\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/7cd92fe25114061b706d6c86aa8059ea\">https://gist.github.com/kckennylau/7cd92fe25114061b706d6c86aa8059ea</a></p>",
        "id": 134687725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537979941
    },
    {
        "content": "<p>sorted: <a href=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\">https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852</a></p>",
        "id": 134687831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980055
    },
    {
        "content": "<p>all time in seconds</p>",
        "id": 134687841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980068
    },
    {
        "content": "<p>well I can't say that any of the top ten are a surprise</p>",
        "id": 134687864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537980102
    },
    {
        "content": "<p>What do you get if you sort by compile time / length in characters?</p>",
        "id": 134687936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537980172
    },
    {
        "content": "<p>the longest files are of course going to take a long time to compile</p>",
        "id": 134687960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537980202
    },
    {
        "content": "<p>what do the multiple numbers mean in the first gist?</p>",
        "id": 134687974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537980238
    },
    {
        "content": "<p>so a raw datum looks like:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n        compilation 253ms\n        decl post-processing 2.84s\n        elaboration 114s\n        elaboration: tactic compilation 3.57s\n        elaboration: tactic execution 86.9s\n        parsing 5.23s\n        type checking 229ms\n</pre></div>",
        "id": 134688034,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980271
    },
    {
        "content": "<p>I filtered out the <code>ms</code></p>",
        "id": 134688037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980280
    },
    {
        "content": "<p>and listed each item</p>",
        "id": 134688040,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980284
    },
    {
        "content": "<p>and added the numbers together in the last gist</p>",
        "id": 134688045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980297
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/7318d851eca2f951e7acdaa6ffbe65b7\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/7318d851eca2f951e7acdaa6ffbe65b7\">https://gist.github.com/kckennylau/7318d851eca2f951e7acdaa6ffbe65b7</a></p>",
        "id": 134688450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ^</p>",
        "id": 134688451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537980736
    },
    {
        "content": "<p>complex/basic is a surprise</p>",
        "id": 134688562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537980844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 1.31s\nelaboration of ext_iff took 1.45s\nelaboration: tactic execution took 1.51s\nelaboration of of_real_neg took 1.6s\nelaboration of mk_eq_add_mul_I took 1.62s\nelaboration: tactic execution took 1.61s\nelaboration of of_real_mul took 1.75s\nelaboration: tactic execution took 1.26s\nelaboration of re_add_im took 1.37s\nelaboration: tactic execution took 1.08s\nelaboration of conj_of_real took 1.17s\nelaboration of conj_I took 1.16s\nelaboration: tactic execution took 1.38s\nelaboration of conj_add took 1.5s\nelaboration: tactic execution took 2.08s\nelaboration of conj_neg took 2.22s\nelaboration: tactic execution took 1.99s\nelaboration of conj_conj took 2.14s\nelaboration: tactic execution took 2.22s\nelaboration of conj_mul took 2.39s\nelaboration: tactic execution took 2s\nelaboration of conj_eq_zero took 2.13s\nelaboration: tactic execution took 1.32s\nelaboration of norm_sq_of_real took 1.45s\nelaboration: tactic execution took 1.23s\nelaboration of norm_sq_zero took 1.35s\nelaboration of norm_sq_one took 1.4s\nelaboration: tactic execution took 1.24s\nelaboration of norm_sq_I took 1.35s\nelaboration: tactic execution took 1.19s\nelaboration of norm_sq_pos took 1.27s\nelaboration: tactic execution took 1.27s\nelaboration of norm_sq_neg took 1.37s\nelaboration: tactic execution took 1.23s\nelaboration of norm_sq_conj took 1.34s\nelaboration: tactic execution took 1.49s\nelaboration of norm_sq_mul took 1.6s\nelaboration: tactic execution took 1.13s\nelaboration of norm_sq_add took 1.22s\nelaboration of add_conj took 1.14s\nelaboration: tactic execution took 1.17s\nelaboration of mul_conj took 1.29s\nelaboration: tactic execution took 2.3s\nelaboration of comm_ring took 3.35s\nelaboration of inv_im took 1.06s\nelaboration of inv_re took 1.09s\nelaboration: tactic execution took 1.05s\nelaboration of sub_conj took 1.14s\nelaboration: tactic execution took 1.04s\nelaboration of norm_sq_sub took 1.13s\nelaboration: tactic execution took 1.29s\nelaboration: tactic execution took 1.01s\nelaboration of of_real_inv took 1.71s\nelaboration of conj_inv took 1.54s\nelaboration: tactic execution took 1.3s\nelaboration of norm_sq_inv took 1.51s\nelaboration: tactic execution took 1.36s\nelaboration of of_real_int_cast took 1.9s\nelaboration of abs_of_real took 1.01s\nelaboration of re_eq_add_conj took 1.06s\nelaboration: tactic execution took 1.22s\nelaboration of of_real_rat_cast took 1.32s\nelaboration of abs_conj took 1.04s\nelaboration: tactic execution took 1.05s\nelaboration of abs_add took 1.18s\nelaboration: tactic execution took 1.02s\nelaboration of abs_le_abs_re_add_abs_im took 1.11s\nelaboration: tactic execution took 1.1s\nelaboration of is_cau_seq_re took 1.24s\nelaboration: tactic execution took 1.1s\nelaboration of is_cau_seq_im took 1.27s\nelaboration: tactic execution took 1.02s\nelaboration of equiv_lim took 1.44s\n</pre></div>",
        "id": 134688753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981062
    },
    {
        "content": "<p>that's <code>grep /\\d+(\\.\\d+)?s/</code></p>",
        "id": 134688766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981081
    },
    {
        "content": "<p>(I know, I should have done <code>grep /\\d+s/</code></p>",
        "id": 134688816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981090
    },
    {
        "content": "<p>also, 47 usages of <code>simp</code></p>",
        "id": 134688835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981131
    },
    {
        "content": "<p>that's <code>/^simp|^.simp|[^@].simp/</code> because VScode doesn't have lookbehind</p>",
        "id": 134688842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you think?</p>",
        "id": 134688935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981209
    },
    {
        "content": "<p>Here are the top 30 files on the second list that take more than 100 seconds:</p>\n<div class=\"codehilite\"><pre><span></span>data/complex/basic.lean                   0.008525  104.10\ndata/finset.lean                          0.006419  359.15\norder/conditionally_complete_lattice.lean 0.005851  152.78\ndata/polynomial.lean                      0.004392  213.90\ndata/finsupp.lean                         0.003828  121.20\ngroup_theory/perm.lean                    0.003750  101.33\nset_theory/ordinal.lean                   0.003531  397.60\nlinear_algebra/basic.lean                 0.003494  123.04\nanalysis/topology/topological_space.lean  0.002850  161.68\n</pre></div>\n\n\n<p>I suggest focusing on these</p>",
        "id": 134689238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537981505
    },
    {
        "content": "<p>ok</p>",
        "id": 134689380,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537981660
    },
    {
        "content": "<p>if you can decrease the compile times of all of these by half that will take 15 minutes off the total compile time, or 30%</p>",
        "id": 134689383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537981665
    },
    {
        "content": "<p>A ton of lemmas in <code>complex.basic</code> are <code>rfl</code>, but were proved with <code>simp</code></p>",
        "id": 134690262,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537982685
    },
    {
        "content": "<blockquote>\n<p>A ton of lemmas in <code>complex.basic</code> are <code>rfl</code>, but were proved with <code>simp</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I just pushed some improvements to <code>complex.basic</code></p>",
        "id": 134692162,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537984596
    },
    {
        "content": "<p>thanks!</p>",
        "id": 134692189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537984638
    },
    {
        "content": "<p>before:</p>\n<div class=\"codehilite\"><pre><span></span>data/finset.lean\ncumulative profiling times:\n    compilation 138ms\n    decl post-processing 178ms\n    elaboration 173s\n    elaboration: tactic compilation 1.83s\n    elaboration: tactic execution 182s\n    parsing 2.32s\n    type checking 125ms\n</pre></div>\n\n\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n        compilation 85.2ms\n        decl post-processing 130ms\n        elaboration 10.2s\n        elaboration: tactic compilation 1.06s\n        elaboration: tactic execution 4.98s\n        parsing 1.48s\n        type checking 90ms\n</pre></div>",
        "id": 134841829,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538158118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that's way more than a 70% reduction :P</p>",
        "id": 134841841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538158127
    },
    {
        "content": "<p>That's awesome! Since I've been working almost exclusively with finset recently, I hope this gets in soon!</p>",
        "id": 134841994,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538158293
    },
    {
        "content": "<p>Very impressive Kenny. Is this all changing <code>simp</code> to <code>simp only</code>?</p>",
        "id": 134844724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538161279
    },
    {
        "content": "<p>I'm going start an experiment to see if my idea for <code>squeeze_simp</code> is worthwhile. Is anybody else working on optimizing <code>conditionally_complete_lattice.lean</code>?</p>",
        "id": 134847149,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538163921
    },
    {
        "content": "<p>I'm going to work on <code>ordinal.lean</code> now</p>",
        "id": 134850447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538167441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> How much improvement did <code>squeeze_simp</code> give in your experiment? Does it approach the magical 70%?</p>",
        "id": 134869784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538200511
    },
    {
        "content": "<p>Yes, the file initially took 35s process, then, I used <code>squeeze_simp</code> and it went down to 11s.</p>",
        "id": 134871081,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538203473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_le_of_limit</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"n\">b&#39;</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_lt</span> <span class=\"err\">$</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">induction_on</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">H</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n<span class=\"n\">try_for</span> <span class=\"mi\">300</span> <span class=\"o\">{</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">enum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">irrefl</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">typein_lt_typein</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">typein_enum</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">typein_lt_type</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">((</span><span class=\"n\">add_lt_add_iff_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">typein_lt_type</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">type_le&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"o\">},</span> <span class=\"n\">try_for</span> <span class=\"mi\">800</span> <span class=\"o\">{</span>\n  <span class=\"n\">refine</span> <span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">of_monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"o\">},</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  { rcases a with ⟨⟨b&#39;, a&#39;⟩, h⟩,</span>\n<span class=\"cm\">    by_cases e : b = b&#39;,</span>\n<span class=\"cm\">    { refine sum.inr ⟨a&#39;, _⟩,</span>\n<span class=\"cm\">      subst e, cases h with _ _ _ _ h _ _ _ h,</span>\n<span class=\"cm\">      { exact (irrefl _ h).elim },</span>\n<span class=\"cm\">      { exact h } },</span>\n<span class=\"cm\">    { refine sum.inl (⟨b&#39;, _⟩, a&#39;),</span>\n<span class=\"cm\">      cases h with _ _ _ _ h _ _ _ h,</span>\n<span class=\"cm\">      { exact h }, { exact (e rfl).elim } } },</span>\n<span class=\"cm\">  { rcases a with ⟨⟨b₁, a₁⟩, h₁⟩,</span>\n<span class=\"cm\">    rcases b with ⟨⟨b₂, a₂⟩, h₂⟩,</span>\n<span class=\"cm\">    intro h, by_cases e₁ : b = b₁; by_cases e₂ : b = b₂,</span>\n<span class=\"cm\">    { substs b₁ b₂, simpa only [subrel_val, prod.lex_def, @irrefl _ s _ b, true_and, false_or, eq_self_iff_true, dif_pos, sum.lex_inr_inr] using h },</span>\n<span class=\"cm\">    { subst b₁, simp only [subrel_val, prod.lex_def, e₂, prod.lex_def, dif_pos, subrel_val, eq_self_iff_true, or_false, dif_neg, not_false_iff, sum.lex_inr_inl, false_and] at h ⊢,</span>\n<span class=\"cm\">      cases h₂; [exact asymm h h₂_h, exact e₂ rfl] },</span>\n<span class=\"cm\">    { squeeze_simp [e₁, e₂, dif_pos, eq_self_iff_true, dif_neg, not_false_iff, sum.lex.sep] },</span>\n<span class=\"cm\">    { simpa only [dif_neg e₁, dif_neg e₂, prod.lex_def, subrel_val, subtype.mk_eq_mk, sum.lex_inl_inl] using h } }-/</span>\n<span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 134873374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this is your file</p>",
        "id": 134873377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208423
    },
    {
        "content": "<p>I don't know what to do with this</p>",
        "id": 134873382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208427
    },
    {
        "content": "<p>what's the question?</p>",
        "id": 134873432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538208553
    },
    {
        "content": "<p>that one line takes 800 ms</p>",
        "id": 134873433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208560
    },
    {
        "content": "<p>not to mention the lines afterwards</p>",
        "id": 134873435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208577
    },
    {
        "content": "<p>somehow <code>order_embedding.of_monotone</code> is an expensive definition</p>",
        "id": 134873436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208587
    },
    {
        "content": "<p>(it isn't a thoerem)</p>",
        "id": 134873437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208591
    },
    {
        "content": "<p>how can I make it faster?</p>",
        "id": 134873478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208616
    },
    {
        "content": "<p>I will let you know when my lean catches up to that definition :P</p>",
        "id": 134873494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538208705
    },
    {
        "content": "<p>if only it compiled faster...</p>",
        "id": 134873495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538208716
    },
    {
        "content": "<p>right, ironic</p>",
        "id": 134873534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208729
    },
    {
        "content": "<p>I wonder if anyone is working on it</p>",
        "id": 134873545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208764
    },
    {
        "content": "<p>Anyway, you can always skip it and return later</p>",
        "id": 134873548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538208771
    },
    {
        "content": "<p>right</p>",
        "id": 134873556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538208790
    },
    {
        "content": "<p>I doubt anyone is working on <code>ordinal</code> other than you right now</p>",
        "id": 134873558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538208801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Any chance you can register the hole command? After that we could easily distribute the work to everyone who has a couple of spare minutes.</p>",
        "id": 134873941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538209610
    },
    {
        "content": "<p>The hole command is not trivial to build because I have to come up with a syntax for the expression found in the hole. It has to allow the encoding of information such as <code>simp! [h0,h1] with attr at *</code>. I'm going to postpone that until I have a better idea on how to do it. In the mean time, if you have <code>simp! [h0,h1] with attr at *</code>, simply replace it with <code>squeeze_simp! [h0,h1] with attr at *</code> and it will print out a replacement that you simply have to copy and paste. That same also works for <code>simpa</code></p>",
        "id": 134874557,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538210778
    },
    {
        "content": "<p>Ok, cool!</p>",
        "id": 134874570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538210850
    },
    {
        "content": "<p>Thanks a lot for this.</p>",
        "id": 134874575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538210858
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 134874583,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538210881
    },
    {
        "content": "<p>Now I should really get some sleep :) Best of luck</p>",
        "id": 134874623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538210898
    },
    {
        "content": "<p>Sleep tight <span class=\"emoji emoji-1f6cc\" title=\"in bed\">:in_bed:</span></p>",
        "id": 134874839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538211302
    },
    {
        "content": "<p>Hmm, I have proofs where <code>by simp</code> works, but <code>by squeeze_simp</code> fails. E.g., line 157 of <code>order/filter.lean</code>.</p>",
        "id": 134875338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538212209
    },
    {
        "content": "<p>I <code>squeeze_simp</code>ed <code>order/filter.lean</code>. I didn't time carefully but I think I got the compile time down to maybe 25s.</p>",
        "id": 134889142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538240721
    },
    {
        "content": "<blockquote>\n<p>I <code>squeeze_simp</code>ed <code>order/filter.lean</code>. I didn't time carefully but I think I got the compile time down to maybe 25s.</p>\n</blockquote>\n<p>from what?</p>",
        "id": 134893202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538249094
    },
    {
        "content": "<p>I think your gist said something like 150s</p>",
        "id": 134893462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538249669
    },
    {
        "content": "<p>But I don't have good tools to time an entire file</p>",
        "id": 134893465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538249684
    },
    {
        "content": "<p>I did see pretty nice speed-ups from some of the substitutions</p>",
        "id": 134893468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538249697
    },
    {
        "content": "<p>the time on my gist is relative to me and my computer</p>",
        "id": 134893517,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538249786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> In emacs at least, there's a <code>lean-std-exe</code> command. It will compile the current file, tell you the time at which it starts and the time at which it ends.</p>",
        "id": 134893916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538250757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α₁</span> <span class=\"n\">r₁</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">induction_on</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α₂</span> <span class=\"n\">r₂</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">fo</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">fi</span><span class=\"bp\">⟩⟩</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">c</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨⟨⟨</span><span class=\"o\">(</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">try_for</span> <span class=\"mi\">200</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">fo</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fo</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">try_for</span> <span class=\"mi\">200</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">fi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inr</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 134894297,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538251490
    },
    {
        "content": "<p>I'm at a bit of a loss here</p>",
        "id": 134894298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538251494
    },
    {
        "content": "<p>both blocks take &lt; 200 ms</p>",
        "id": 134894299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538251498
    },
    {
        "content": "<p>but the whole thing takes 5 s</p>",
        "id": 134894303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538251504
    },
    {
        "content": "<p>Presumably some elaboration is taking ages then? Computing lots of motives.</p>",
        "id": 134894935,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538252707
    },
    {
        "content": "<p>i'm trying to convert it to term mode</p>",
        "id": 134894939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538252744
    },
    {
        "content": "<p>solved using term mode</p>",
        "id": 134895382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538253431
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α₁</span> <span class=\"n\">r₁</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">induction_on</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α₂</span> <span class=\"n\">r₂</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">fo</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">fi</span><span class=\"bp\">⟩⟩</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">induction_on</span> <span class=\"n\">c</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨⟨⟨</span><span class=\"o\">(</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inl_inl</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inr</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">fo</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inl_inl</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inl_inl</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inl</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inr</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">∘</span> <span class=\"n\">fo</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inr</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">∘</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">fi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex_inr_inr</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"bp\">⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 134895383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538253437
    },
    {
        "content": "<p>&lt; 500 ms</p>",
        "id": 134895385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538253440
    },
    {
        "content": "<p>Is this copy and pasting the proof term built by tactic mode?</p>",
        "id": 134895440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538253510
    },
    {
        "content": "<p>hardly</p>",
        "id": 134895441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538253520
    },
    {
        "content": "<p>I built the proof myself</p>",
        "id": 134895442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538253524
    },
    {
        "content": "<p>hand-crafted artisanal proofs</p>",
        "id": 134895494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538253624
    },
    {
        "content": "<p>set_theory/ordinal.lean<br>\nbefore:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n    compilation 75.5ms\n    decl post-processing 255ms\n    elaboration 208s\n    elaboration: tactic compilation 3.75s\n    elaboration: tactic execution 179s\n    parsing 6.85s\n    type checking 155ms\n</pre></div>\n\n\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n        compilation 81.1ms\n        decl post-processing 286ms\n        elaboration 39.8s\n        elaboration: tactic compilation 3.67s\n        elaboration: tactic execution 16.9s\n        parsing 6.22s\n        type checking 165ms\n</pre></div>",
        "id": 134898707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538261018
    },
    {
        "content": "<p>I really wish Mario could help me speed up this file</p>",
        "id": 134898752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538261088
    },
    {
        "content": "<p>there are some parts that I can't speed up</p>",
        "id": 134898756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538261096
    },
    {
        "content": "<p>also, which one of the number is (closest to) the actual build time?</p>",
        "id": 134898873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538261294
    },
    {
        "content": "<blockquote>\n<p>also, which one of the number is (closest to) the actual build time?</p>\n</blockquote>\n<p>The largest one.</p>",
        "id": 134899347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538262367
    },
    {
        "content": "<blockquote>\n<p>I really wish Mario could help me speed up this file</p>\n</blockquote>\n<p>He's busy with modules, leave him be ;-)</p>",
        "id": 134900435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538264832
    },
    {
        "content": "<p>After he does modules you can do algebraic closure remember!</p>",
        "id": 134900438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538264845
    },
    {
        "content": "<blockquote>\n<p>i'm trying to convert it to term mode</p>\n</blockquote>\n<p>Is there a particular reason you are doing this? I don't think that converting to term mode is necessarily an improvement; in particular some tactics like <code>rw</code> and <code>induction</code> can actually be faster than their term mode equivalents because they can fill in the motives in a straightforward way while the elaborator has to deal with other stuff at the same time that can confound the issue</p>",
        "id": 134901088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538266431
    },
    {
        "content": "<p>Do you have evidence that a tactic proof that, say, does <code>refine refine rw cases exact</code> is faster than its term mode equivalent?</p>",
        "id": 134901127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538266494
    },
    {
        "content": "<p>In particular, if an elaboration is slow, I find that converting to a sequence of <code>refine</code>s often speeds it up, or at least narrows the problem down to a particular term that should be written a different way</p>",
        "id": 134901227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538266723
    },
    {
        "content": "<p>no I'm not converting every proof to term mode.</p>",
        "id": 134906074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277153
    },
    {
        "content": "<p>I'm converting that particular proof to term mode and it turns out that the speed improved a lot.</p>",
        "id": 134906076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277167
    },
    {
        "content": "<p>I'm not making a general claim.</p>",
        "id": 134906078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277170
    },
    {
        "content": "<p>(although in my experience, pure term mode proofs do compile much faster)</p>",
        "id": 134906086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277195
    },
    {
        "content": "<p>I can give you the statistics for that particular theorem if you want.</p>",
        "id": 134906088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277208
    },
    {
        "content": "<p>it's not necessarily an improvement but in this case it is.</p>",
        "id": 134906137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277285
    },
    {
        "content": "<p>In this case I would probably take your term proof and reintroduce tactics to recover some of the original structure, while keeping an eye on the compile time and preventing it from growing again</p>",
        "id": 134906248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538277518
    },
    {
        "content": "<p>fair enough.</p>",
        "id": 134906366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538277736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Am I allowed to remove <code>exactI / resetI / letI</code> and use <code>@</code> to provide the typeclass instances whenever doing so would produce a significant speed boost?</p>",
        "id": 134911308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538288796
    },
    {
        "content": "<p>oof, I really hope that's a last resort</p>",
        "id": 134911324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538288879
    },
    {
        "content": "<p>I don't think it matters whether <code>exactI</code> is used or not, sometimes typeclass inference is slow</p>",
        "id": 134911365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538288920
    },
    {
        "content": "<p>It is possible that with better hints you can shortcut the search</p>",
        "id": 134911366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538288938
    },
    {
        "content": "<p>well without exactI I can tell which typeclasses Lean is struggling to infer</p>",
        "id": 134911416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538289060
    },
    {
        "content": "<p>and I can provide it explicitly to save Lean's time</p>",
        "id": 134911424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538289074
    },
    {
        "content": "<p>I would try to use limited typeclass inference, i.e. write the hard part of the term and have lean figure out the rest</p>",
        "id": 134911468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289169
    },
    {
        "content": "<p>But explicit typeclass parameters are a big loss in readability, especially if you have to say things more than once, so I would try <em>really</em> hard to avoid it</p>",
        "id": 134911521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289248
    },
    {
        "content": "<p>I understand</p>",
        "id": 134911522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538289278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span>\n<span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">is_well_order</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_well_order</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">is_asymm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subrel</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">})))</span>\n</pre></div>",
        "id": 134911834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538290013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how to shorten the path for class instance?</p>",
        "id": 134911839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538290028
    },
    {
        "content": "<p>it is much faster if I use <code>is_asymm_of_is_trans_of_is_irrefl</code> instead of <code>by apply_instance</code></p>",
        "id": 134911953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538290306
    },
    {
        "content": "<p>alternatively, prove and use <code>is_asymm_of_is_well_order</code></p>",
        "id": 134911994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538290326
    },
    {
        "content": "<p>well I'm not allowed to add / delete any theorem :P</p>",
        "id": 134912045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538290460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/a58bdb5ab50a3cb2d60e89b326e4f4d7afbf6b05/set_theory/ordinal.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a58bdb5ab50a3cb2d60e89b326e4f4d7afbf6b05/set_theory/ordinal.lean\">the 3 theorems I marked with <code>try_for</code></a>?</p>",
        "id": 134912452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538291387
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">forall₂_nil_left_iff</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">forall₂</span> <span class=\"n\">r</span> <span class=\"n\">nil</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">forall₂_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">exists_false</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">forall₂_nil_left_iff&#39;</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">forall₂</span> <span class=\"n\">r</span> <span class=\"n\">nil</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 134929631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538328338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> which one do you like more? they take the same time</p>",
        "id": 134929634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538328347
    },
    {
        "content": "<p>the original proof was <code>by rw [forall₂_iff]; simp</code> so maybe the first one in order to avoid changing too much</p>",
        "id": 134929683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538328424
    },
    {
        "content": "<p>I would prefer the one below</p>",
        "id": 134929728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538328493
    },
    {
        "content": "<p>I would prefer the one below, although I would use <code>exact forall2.nil</code> instead of <code>constructor</code> (which has to search through the constructors to apply one)</p>",
        "id": 134936006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538341707
    },
    {
        "content": "<p>before:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n    compilation 85.7ms\n    decl post-processing 1.17s\n    elaboration 126s\n    elaboration: tactic compilation 4.88s\n    elaboration: tactic execution 90.9s\n    parsing 7.79s\n    type checking 145ms\n</pre></div>\n\n\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span>cumulative profiling times:\n        compilation 46.9ms\n        decl post-processing 159ms\n        elaboration 12.5s\n        elaboration: tactic compilation 1.58s\n        elaboration: tactic execution 918ms\n        parsing 5.4s\n        type checking 109ms\n</pre></div>",
        "id": 134957374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538382809
    },
    {
        "content": "<p>Is this <code>ordinal.lean</code>?</p>",
        "id": 134959164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538385666
    },
    {
        "content": "<p>Mario, is all of this making you rethink your writing style?</p>",
        "id": 134959180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538385700
    },
    {
        "content": "<p>I'm worried about kenny's writing style</p>",
        "id": 134959310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385847
    },
    {
        "content": "<p>I don't want to sacrifice readability here if I can at all help it</p>",
        "id": 134959318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385872
    },
    {
        "content": "<p>but these numbers are hard to argue with</p>",
        "id": 134959332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385903
    },
    {
        "content": "<p>I think in the future we will need to work a post processing step into the workflow, using things like <code>squeeze_simp</code></p>",
        "id": 134959355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385952
    },
    {
        "content": "<p>But I <em>do not</em> want to be thinking about compile time when I am writing a proof</p>",
        "id": 134959415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538385992
    },
    {
        "content": "<p>the mindset is completely different, it is a distraction</p>",
        "id": 134959421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538386013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You are talking like a mathematician.</p>",
        "id": 134959496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538386088
    },
    {
        "content": "<p>this is data/list/basic.lean</p>",
        "id": 134959627,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538386268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ /c/lean/bin/lean --profile analysis/topology/topological_space.lean &gt;/dev/null\ncumulative profiling times:\n        compilation 53.6ms\n        decl post-processing 52.3ms\n        elaboration 6.15s\n        elaboration: tactic compilation 929ms\n        elaboration: tactic execution 979ms\n        parsing 1.24s\n        type checking 35.9ms\n</pre></div>",
        "id": 135070742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538523154
    },
    {
        "content": "<p>it was the 7th on my list sorted by time</p>",
        "id": 135070748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538523181
    },
    {
        "content": "<p>now it's 6.15 s</p>",
        "id": 135070752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538523183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you want to PR <code>faster</code> in one go or in stages?</p>",
        "id": 135079880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538539610
    },
    {
        "content": "<p>What does your profile list look like now?</p>",
        "id": 135079891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538539629
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\">https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852</a></p>",
        "id": 135083606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538546996
    },
    {
        "content": "<p>Is it worth PR'ing now? My impression is that Mario will want to check that you didn't do anything he doesn't approve of.</p>",
        "id": 135085735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538550795
    },
    {
        "content": "<p>I see <code>uniform_space</code> may be the next target. You may want to skip that one since Johannes and I are currently working on it (see completions branch in the community fork). Actually part of the file moved to a <code>completion</code> file</p>",
        "id": 135086194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538551463
    },
    {
        "content": "<p>That's all the more reason to PR now I guess. Kenny did you see if anyone is working on any files you have already changed? This seems like a difficult task -- there are a million branches in community mathlib.</p>",
        "id": 135086353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538551731
    },
    {
        "content": "<p>The <code>determinants</code> PR is touching like 10 basic files.</p>",
        "id": 135086430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538551887
    },
    {
        "content": "<p>Hopefully git's merging strategies will be smart enough</p>",
        "id": 135086437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538551919
    },
    {
        "content": "<blockquote>\n<p>I see <code>uniform_space</code> may be the next target. You may want to skip that one since Johannes and I are currently working on it (see completions branch in the community fork). Actually part of the file moved to a <code>completion</code> file</p>\n</blockquote>\n<p>ah well I almost finished. I'll deal with the merging issues then.</p>",
        "id": 135087752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538553787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I still haven't finished, but do you want me to PR them (a) one by one when I finish (so you'll have 100 PRs), (b) one by one now (so you'll have 100 PRs distributed across a month), or (c) all in one go (so you'll have 1 big PR)?</p>",
        "id": 135244802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538732520
    },
    {
        "content": "<p>and 100 is not a hyperbole</p>",
        "id": 135244846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538732541
    },
    {
        "content": "<p>I think we shouldn't have one mega-PR. It will only sit and wait and rot and die a silent death.</p>",
        "id": 135249251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538739255
    },
    {
        "content": "<p>100 PR's on 1 day won't work either.</p>",
        "id": 135249258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538739271
    },
    {
        "content": "<p>So I think it is best to either have 100 small PR's that appear on a continuous basis. Or chunk them into 20 PR's that take 5 files each.<br>\nJust my €0.02</p>",
        "id": 135249281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538739334
    },
    {
        "content": "<p>One issue that might influence the choice is whether the feedback from early changes will influence later changes. That is, from the reviewer's PoV, one doesn't want to make the same suggestion in large numbers. So to avoid this, you might start with a few small PRs and, as you get feedback, get them merged, and roll the feedback into later PRs, the PRs can either become larger or stay the same size but go through more easily. My R0.02.</p>",
        "id": 135249828,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538740158
    },
    {
        "content": "<p>My €0.02 are worth R0.34 <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span> <a href=\"https://duckduckgo.com/?q=0.02EUR+in+ZAR&amp;t=ffab&amp;ia=currency\" target=\"_blank\" title=\"https://duckduckgo.com/?q=0.02EUR+in+ZAR&amp;t=ffab&amp;ia=currency\">https://duckduckgo.com/?q=0.02EUR+in+ZAR&amp;t=ffab&amp;ia=currency</a></p>",
        "id": 135249991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538740404
    },
    {
        "content": "<p>Hmm, I should have given my US$0.02 instead. (<a href=\"https://ddg.gg/?q=0.02USD+in+EUR\" target=\"_blank\" title=\"https://ddg.gg/?q=0.02USD+in+EUR\">€ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≈</mo></mrow><annotation encoding=\"application/x-tex\">\\approx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.48312em;\"></span><span class=\"strut bottom\" style=\"height:0.48312em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mrel\">≈</span></span></span></span> $!</a>)</p>",
        "id": 135250336,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538740835
    },
    {
        "content": "<p>Or you could say I'm thrifty...</p>",
        "id": 135250366,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538740873
    },
    {
        "content": "<p>ok, I'll PR after this one</p>",
        "id": 135253455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538744769
    },
    {
        "content": "<p><code>sum_sum_index</code> and friends™ have poor elaboration and often takes up time</p>",
        "id": 135255097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538746559
    },
    {
        "content": "<p>and it's worse than <code>simp</code> at friends™ because you can't track elaboration</p>",
        "id": 135255398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538746836
    },
    {
        "content": "<p>and I even used <code>calc</code></p>",
        "id": 135255639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538747125
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">finsupp_prod_equiv</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">γ</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">sum_sum_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum_zero_index</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sum_add_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">single_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">single_add</span><span class=\"o\">))</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum_single_index</span> <span class=\"n\">sum_zero_index</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sum_single_index</span> <span class=\"n\">single_zero</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"n\">single</span> <span class=\"o\">:</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">single</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">sum_single</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135255642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538747129
    },
    {
        "content": "<p>MWE ^</p>",
        "id": 135255644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538747130
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ /c/lean/bin/lean --profile data/finsupp.lean &gt;/dev/null\ncumulative profiling times:\n        compilation 143ms\n        decl post-processing 1.9s\n        elaboration 7.22s\n        elaboration: tactic compilation 548ms\n        elaboration: tactic execution 1.79s\n        parsing 643ms\n        type checking 110ms\n</pre></div>",
        "id": 135259451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538751124
    },
    {
        "content": "<p>Hurray!</p>",
        "id": 135259496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538751193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Will you share the total progress after you PR?</p>",
        "id": 135259677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538751348
    },
    {
        "content": "<p>I know it won't be 70% reduction yet. But I think you took off a massive chunk anyway.</p>",
        "id": 135259725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538751369
    },
    {
        "content": "<p>Kenny the sooner you PR what you've done so far the better. People like Chris will I think already appreciate your achievements.</p>",
        "id": 135260053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538751704
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Will you share the total progress after you PR?</p>\n</blockquote>\n<p>it's always the same link</p>",
        "id": 135261120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538752713
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\">https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852</a></p>",
        "id": 135261122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538752714
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/391\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/391\">The PR is live</a></p>",
        "id": 135262720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538754284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I meant some total stats: So the sum of the \"before\" column, and the sum of the \"after\" column.</p>",
        "id": 135264898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538756715
    },
    {
        "content": "<p>I know I could throw your file through <code>awk</code>, but maybe you had already done that...</p>",
        "id": 135264908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538756735
    },
    {
        "content": "<p>you see, the before column isnt exactly before, and the after column isnt exactly after</p>",
        "id": 135266401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538758665
    },
    {
        "content": "<p>I'm asking about <em>statistics</em> anyway... so you're allowed to be off by 10%.</p>",
        "id": 135266463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538758713
    },
    {
        "content": "<p>Here are the new measurements: <a href=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\">https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185</a></p>",
        "id": 135280222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538771964
    },
    {
        "content": "<p>total compile time went from 3219 seconds to 3191 seconds</p>",
        "id": 135280312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772035
    },
    {
        "content": "<p>28 seconds improvement!</p>",
        "id": 135280347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538772098
    },
    {
        "content": "<p>Impressive. No wonder that guy is the only one to get a personal message in Scott's talk</p>",
        "id": 135280423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538772141
    },
    {
        "content": "<p>which guy?</p>",
        "id": 135280480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772216
    },
    {
        "content": "<p>You</p>",
        "id": 135280580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538772327
    },
    {
        "content": "<p>I guess there is a typo in your numbers</p>",
        "id": 135280592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538772338
    },
    {
        "content": "<p>Or I don't understand what you mean, and I should go to bed</p>",
        "id": 135280641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538772367
    },
    {
        "content": "<p>those numbers indeed seem unreasonably small compared to your earlier quotes. I thought you had trimmed at least 5 minutes off, what happened or am I not understanding your claim?</p>",
        "id": 135280699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538772473
    },
    {
        "content": "<p>what happened is that the newly added <code>data/zmod/quadratic_reciprocity.lean</code> adds 2 minutes</p>",
        "id": 135280788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772547
    },
    {
        "content": "<p>ha ha you are swimming against the tide. Oh boy.</p>",
        "id": 135280815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538772597
    },
    {
        "content": "<p>that's what happens when I'm the only one doing all this</p>",
        "id": 135280869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772621
    },
    {
        "content": "<p>what happens when we replace you by a computer?</p>",
        "id": 135280877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538772633
    },
    {
        "content": "<p>and the newly added <code>data/padics/padic_numbers.lean</code> adds 1 minute</p>",
        "id": 135280913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772716
    },
    {
        "content": "<p><code>linear_algebra/basic.lean</code> went from 67.3 to 87.1 despite nothing having been changed, so this might just be a statistical noise</p>",
        "id": 135280978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772756
    },
    {
        "content": "<p><code>data/rat.lean</code> from 55.4 to 78 despite only having a small change</p>",
        "id": 135280994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772770
    },
    {
        "content": "<p>Is there a more reliable way to time these things on average or something?</p>",
        "id": 135281021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538772807
    },
    {
        "content": "<p>I don't know. All of these times are measured on my computer, which is far from being a constant environment</p>",
        "id": 135281097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772875
    },
    {
        "content": "<p>there might be some statistical methods to make the results more representative of the situation at hand</p>",
        "id": 135281141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772932
    },
    {
        "content": "<p>but I don't study statistics</p>",
        "id": 135281151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538772939
    },
    {
        "content": "<p>did you turn off discord?</p>",
        "id": 135281254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538773055
    },
    {
        "content": "<p>no</p>",
        "id": 135281261,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773065
    },
    {
        "content": "<p>one should just look at <a href=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/f7c6cbfb2aa8bf7e4784e8c65d6c4852\">this bunch of data produced 9 days ago</a> and <a href=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\">this bunch of data produced 1 hour ago</a> and make of them what one wills</p>",
        "id": 135281333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773122
    },
    {
        "content": "<p>It's time consuming, but if you want better data you should just run it multiple times, say 3 times and average</p>",
        "id": 135281384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538773201
    },
    {
        "content": "<p>that would take me 6 hours, so maybe I'll do this tomorrow</p>",
        "id": 135281467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773266
    },
    {
        "content": "<p>Obviously I wouldn't count any new material in the count. I assume your PR doesn't introduce quadratic reciprocity, you should just compare before/after on the branch</p>",
        "id": 135281473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538773275
    },
    {
        "content": "<p>I'll actually compare between the origin/master branch and the lean-community/faster branch, both in the current (i.e. tomorrow) state</p>",
        "id": 135281492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773312
    },
    {
        "content": "<p>how does this sound?</p>",
        "id": 135281494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773314
    },
    {
        "content": "<p>(I rebase the <code>faster</code> branch constantly to make sure that there are no conflicts with the origin/master branch)</p>",
        "id": 135281542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773339
    },
    {
        "content": "<p>that should be fine. For the test you should stop rebasing for a bit, just use master as of the beginning of the test</p>",
        "id": 135281561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538773373
    },
    {
        "content": "<p>so you mean origin/master as of now?</p>",
        "id": 135281592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773419
    },
    {
        "content": "<p>oh, you mean no rebasing in those 6 hours</p>",
        "id": 135281696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773518
    },
    {
        "content": "<p>Kenny if you send me instructions I can run some timing tests on a faster machine</p>",
        "id": 135281723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538773558
    },
    {
        "content": "<p>ok</p>",
        "id": 135281772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538773577
    },
    {
        "content": "<p>I did some runs: <a href=\"https://gist.github.com/tobig/86477b42e1cc1d8f8f73666a002edc03\" target=\"_blank\" title=\"https://gist.github.com/tobig/86477b42e1cc1d8f8f73666a002edc03\">https://gist.github.com/tobig/86477b42e1cc1d8f8f73666a002edc03</a></p>",
        "id": 135306803,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538820180
    },
    {
        "content": "<p>faster is at around 7m10s to 7m30s  vs master at 9m30s to 10m00.</p>",
        "id": 135306849,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538820251
    },
    {
        "content": "<p>On one of our faster servers.</p>",
        "id": 135306852,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538820264
    },
    {
        "content": "<p>thanks</p>",
        "id": 135306914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538820406
    },
    {
        "content": "<p>This is around 207m vs 320m single threaded.</p>",
        "id": 135306925,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538820473
    },
    {
        "content": "<p>Well done Kenny! <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 135307121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538820844
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, I just pushed <code>squeeze_simp</code> as a separate branch, as Simon requested.</p>",
        "id": 135313490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538834705
    },
    {
        "content": "<p>If you'd like, I can rebase your <code>faster</code> branch on to that.</p>",
        "id": 135313495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538834718
    },
    {
        "content": "<p>I guess the current <code>faster</code> PR doesn't need it, right?</p>",
        "id": 135313500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538834745
    },
    {
        "content": "<p>Well, the current <code>faster</code> branch includes <code>squeeze_simp</code>.</p>",
        "id": 135313545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538834770
    },
    {
        "content": "<p>It's a bit of a mess, but Simon wanted the tactic PR'd separately from all the library improvements.</p>",
        "id": 135313549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538834788
    },
    {
        "content": "<p>Sure</p>",
        "id": 135313551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538834795
    },
    {
        "content": "<p>Now I should sleep, however.</p>",
        "id": 135313552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538834799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>,  I was  wondering if instead of have <code>squeeze_simp</code> be a <code>tactic unit</code>, we could have it be a <code>tactic string</code>, that also reports the <code>simp only ...</code> invocation it found via the return value.</p>",
        "id": 135330404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538870064
    },
    {
        "content": "<p>The benefit of doing this is that <code>tidy</code> already produces \"proof scripts\", showing the sequence of successful tactics it found.</p>",
        "id": 135330408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538870094
    },
    {
        "content": "<p>If <code>tidy</code> called <code>squeeze_simp</code>, then it would automatically generate <code>simp only ...</code> lines.</p>",
        "id": 135330416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538870124
    },
    {
        "content": "<p>Nice! I like the idea. Yes it can do that. I just added an option for inhibiting the printout when nothing would change. I assume that would be detrimental to you. I can create a <code>tactic</code> version and an <code>interactive</code> version.</p>",
        "id": 135333526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538876980
    },
    {
        "content": "<p>So this is what I do to each file:<br>\n1. Place <code>set_option profiler true</code> and <code>set_option trace.simplify.rewrite true</code> at the top of the file, and select \"checking visible lines and above\"<br>\n2. Click the name of each theorem to see if it takes too long to compile. (<code>simp</code> and <code>simpa</code> are the most reliable indicator for proofs that take a long time, but I always check the actual time used to be sure)<br>\n3. Then I click on each <code>simp</code> to see which simp lemmas are used, and decide what to do:<br>\n3a. I can change <code>simp</code> to <code>simp only</code> and insert all the simp lemmas that are used. Usually <code>eq_self_iff_true</code> and <code>iff_self</code> are redundant. Sometimes if the lemmas don't involving rewriting under a lambda, I may change it to <code>rw</code>, but this actually doesn't save a lot of time.<br>\n3b. If I see (with the help of the list of simp lemmas used) that the proof can be written to a short proof in term mode, then I may write it in term mode.<br>\n3c. If I see that the simp lemmas are all proved using <code>rfl</code>, I will replace the proof with <code>rfl</code> to see if it works (surprise, it is not infrequent to see a <code>rfl</code> proof being proved by <code>simp</code>).<br>\n4. And then I make sure that the proof is sped up after my changes.<br>\n5. And you can always ask me if you don't know how to deal with a certain theorem.</p>",
        "id": 135422821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539026363
    },
    {
        "content": "<p>Do you keep a list of the worst offenders?</p>",
        "id": 135422977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539026584
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 135423054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539026710
    },
    {
        "content": "<p>I mean now that you've done all this work, what are the files that eat up most of the compile time</p>",
        "id": 135423245,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539026962
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185\">https://gist.github.com/kckennylau/fd94d8c3a1cd2be9953deffd53657185</a></p>",
        "id": 135423247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539026976
    },
    {
        "content": "<p>this is the data as of Oct 05</p>",
        "id": 135423256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539026985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> You now have experience with git hooks. Can we have a git hook that will disallow commits that import squeeze_simp?</p>",
        "id": 135444340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539060568
    },
    {
        "content": "<p>Yes, you write a script and you place it in <code>.git/hooks/</code> and call it <code>pre-commit</code> (no extensions). If you look in that directory, you can see a number of samples already present. They have <code>.sample</code> extension</p>",
        "id": 135446493,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539064492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think it's worth it to PR such a hook into mathlib?</p>",
        "id": 135447691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539066559
    },
    {
        "content": "<p>Could also have a hook that checks for end-of-line-whitespace</p>",
        "id": 135447694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539066575
    },
    {
        "content": "<p>I think there are a variety of style things you could check</p>",
        "id": 135447749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539066625
    },
    {
        "content": "<p>Sure, but I wouldn't mind to offload the more advanced checks to a proper linter.</p>",
        "id": 135448002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539067081
    },
    {
        "content": "<p>In terms of performances, I think it might be worthwhile to check the import structure and trim the redundant dependencies. I'm still unsure how to do it well though</p>",
        "id": 135449522,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539069593
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jcommelin/ab7b99ee1dcd9084e2f73a940e91bb40\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/ab7b99ee1dcd9084e2f73a940e91bb40\">https://gist.github.com/jcommelin/ab7b99ee1dcd9084e2f73a940e91bb40</a> is a python script that I hacked together. If we change <code>squeeze_simp</code> enough, maybe we can automate the replacement into batch mode.</p>",
        "id": 135463886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539087213
    },
    {
        "content": "<p>Problem is that if I change <code>squeeze_simp</code> to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">squeeze_simp</span>\n  <span class=\"o\">(</span><span class=\"n\">pbegin</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cur_pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use_iota_eqn</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">)</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">record_lit</span><span class=\"err\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pend</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cur_pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">main_goal</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"n\">cfg&#39;</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">parse_config</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>\n   <span class=\"n\">hs&#39;</span> <span class=\"err\">←</span> <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">arg</span><span class=\"bp\">.</span><span class=\"n\">to_tactic_format</span><span class=\"o\">,</span>\n   <span class=\"n\">simp</span> <span class=\"n\">use_iota_eqn</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span> <span class=\"n\">cfg&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">list_constant</span><span class=\"o\">,</span>\n   <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"n\">vs</span><span class=\"bp\">.</span><span class=\"n\">mfilter</span> <span class=\"o\">(</span><span class=\"n\">succeeds</span> <span class=\"err\">∘</span> <span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">use_iota_eqn</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">use_iota_eqn</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"k\">then</span> <span class=\"s2\">&quot;!&quot;</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">attr_names</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"k\">then</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">else</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">intersperse</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">(</span><span class=\"s2\">&quot; with&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">attr_names</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span><span class=\"o\">)),</span>\n   <span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">locat</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">hs&#39;</span> <span class=\"bp\">++</span> <span class=\"n\">vs</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_fmt</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;{pbegin.line}:{pbegin.column}:{pend.line}:{pend.column}:simp{use_iota_eqn} only {args}{attrs}{loc}{c}&quot;</span>\n</pre></div>",
        "id": 135463913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539087242
    },
    {
        "content": "<p>And I test with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">squeeze_simp</span> <span class=\"c1\">-- this is line 105</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I get the output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 135463953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539087298
    },
    {
        "content": "<p>So the line:col:line:col coordinates are not very useful atm</p>",
        "id": 135463971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539087315
    },
    {
        "content": "<p>Does it help if you add a comma after squeeze_simp?</p>",
        "id": 135480544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539101511
    },
    {
        "content": "<p><code>conv _ in _ etc</code> is slow</p>",
        "id": 135503455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539124105
    },
    {
        "content": "<p>slower than <code>simp</code></p>",
        "id": 135503462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539124113
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/WKTRF2rdqUEt60_Qu8goPD5c/2018-10-10.png\" target=\"_blank\" title=\"2018-10-10.png\">2018-10-10.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WKTRF2rdqUEt60_Qu8goPD5c/2018-10-10.png\" target=\"_blank\" title=\"2018-10-10.png\"><img src=\"/user_uploads/3121/WKTRF2rdqUEt60_Qu8goPD5c/2018-10-10.png\"></a></div>",
        "id": 135508682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130095
    },
    {
        "content": "<p>if you do <code>set_option profiler true</code> and <code>set_option trace.simplify.rewrite true</code> then you can actually see which tactic takes the most time</p>",
        "id": 135508741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130198
    },
    {
        "content": "<p>by observing when the green squiggly line comes up</p>",
        "id": 135508796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130211
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8zf8fXTD-Qbb-p_O1hIZTa2a/2018-10-10-1.png\" target=\"_blank\" title=\"2018-10-10-1.png\">2018-10-10-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8zf8fXTD-Qbb-p_O1hIZTa2a/2018-10-10-1.png\" target=\"_blank\" title=\"2018-10-10-1.png\"><img src=\"/user_uploads/3121/8zf8fXTD-Qbb-p_O1hIZTa2a/2018-10-10-1.png\"></a></div>",
        "id": 135509069,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130640
    },
    {
        "content": "<p>so I changed one line and suddenly the proof takes 20s less to compile</p>",
        "id": 135509074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130650
    },
    {
        "content": "<p>(ok part of it is due to caching, but whatever)</p>",
        "id": 135509127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539130697
    },
    {
        "content": "<blockquote>\n<p>(ok part of it is due to caching, but whatever)</p>\n</blockquote>\n<p>Can you get a more robust method for timing?</p>",
        "id": 135521322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539151724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> How long does a full compile of mathlib take on your beast?</p>",
        "id": 135524641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539156991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  7 min 52 s</p>",
        "id": 135528668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539162667
    },
    {
        "content": "<p>(During which 80m24s of core time is being used --- so it managed to average using 10 cores. I see it peak above 20 cores.)</p>",
        "id": 135528937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539163090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> and me just talked a bit about mathlib's performance troubles. Much of this will change in Lean 4 anyway, but it may still be interesting if someone other than us could take a look and profile (using e.g. <code>perf</code>) what parts in the C++ code are so slow. Some time ago, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> profiled that most time is spent in creating the simp lemmas cache from scratch, afair. Is this still the case? Does this mean the cache doesn't work at all, i.e. are subsequent <code>simp</code>s still slow even if no simp attributes have been changed in between? If not, might it be worth to e.g. delay and bundle up simp attribute additions where possible, instead of laboriously optimizing the proofs themselves? etc. pp.</p>",
        "id": 135566004,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203041
    },
    {
        "content": "<p>I am not sure how much of a problem this is at large scale in mathlib, but I think <code>haveI</code> and friends just turn off caching altogether, which is pretty bad from a performance standpoint</p>",
        "id": 135566074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203125
    },
    {
        "content": "<p>The semantics I wanted them to have was that <code>haveI</code> would clear the cache but not turn it off permanently</p>",
        "id": 135566092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203158
    },
    {
        "content": "<p>there was at least one example of a large proof that had a <code>haveI</code> early on and lots of typeclass problems later and it was super slow. I fixed it by breaking out a lemma, but I would prefer to avoid this in many cases</p>",
        "id": 135566171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203277
    },
    {
        "content": "<p>Is it possible to run simp with a prebuilt cache somehow?</p>",
        "id": 135566234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203345
    },
    {
        "content": "<p>I see. I had the impression that most proofs Kenny changed were <code>simp</code> one-liners. The typeclass cache story will probably change in Lean 4, but I don't think we want to touch that part before that</p>",
        "id": 135566338,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203470
    },
    {
        "content": "<p>they were about 80% simp and 20% typeclass inference</p>",
        "id": 135566361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203522
    },
    {
        "content": "<p>Ok, good to know</p>",
        "id": 135566404,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203531
    },
    {
        "content": "<p>But it could also be that we (I) just use <code>simp</code> disproportionately</p>",
        "id": 135566434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203597
    },
    {
        "content": "<blockquote>\n<p>Is it possible to run simp with a prebuilt cache somehow?</p>\n</blockquote>\n<p>That should be possible using the tactic primitives, no? E.g. put simp lemma generation in one <code>timeit</code> and <code>simp_core</code> or whatever it was called in another</p>",
        "id": 135566435,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203598
    },
    {
        "content": "<p>i.e. <code>ring</code> is slow but I know it is slow and avoid it when possible</p>",
        "id": 135566447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203617
    },
    {
        "content": "<p>If I put two copies of the same theorem one after another, will the second one have a hot simp cache?</p>",
        "id": 135566500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203678
    },
    {
        "content": "<p>I guess multithreaded execution causes problems here</p>",
        "id": 135566519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203710
    },
    {
        "content": "<p>Yeah. You should try running it with <code>-j0</code>.</p>",
        "id": 135566530,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203736
    },
    {
        "content": "<p>There are a lot of files like <code>multiset</code> where there are lots of simp proofs, but almost every theorem is also a simp lemma so the cache doesn't stay still</p>",
        "id": 135566539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203751
    },
    {
        "content": "<p>What about running some proofs as though the previous lemmas are added to the bracket list rather than adding them to the default simp set? That way you can chunk up additions to the simp set a bit and decrease the number of rebuilds</p>",
        "id": 135566626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203864
    },
    {
        "content": "<p>Heh, that's kind of what we want to do in Lean 4. It would definitely be a helpful experiment</p>",
        "id": 135566702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539203966
    },
    {
        "content": "<p>It could probably be done with a wrapper around <code>simp</code></p>",
        "id": 135567209,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539204572
    },
    {
        "content": "<p>And I'd use an attribute set on one dummy definition to keep track of the lemmas used in a proof.</p>",
        "id": 135567298,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539204636
    },
    {
        "content": "<blockquote>\n<p>What about running some proofs as though the previous lemmas are added to the bracket list rather than adding them to the default simp set? That way you can chunk up additions to the simp set a bit and decrease the number of rebuilds</p>\n</blockquote>\n<p>Btw, do you mean the lemmas previously defined or the lemmas previously used?</p>",
        "id": 135567424,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539204759
    },
    {
        "content": "<p>Also, what's the difference between the lemmas in the <code>simp</code> brackets and those that are simply in the <code>simp</code> list?</p>",
        "id": 135567445,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539204792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can I add the following lemma to <a href=\"https://github.com/leanprover/mathlib/blob/master/data/rat.lean#L196-L203\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/rat.lean#L196-L203\"><code>data/rat.lean</code></a>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">num_denom_cases_on&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">num_denom_cases_on&#39;</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"err\">$</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 135573105,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539211768
    },
    {
        "content": "<p>Sure. You sure you don't want <code>d &gt; 0</code> in the assumptions instead?</p>",
        "id": 135580682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539223210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yes, because <code>add_def</code> and friends all use <code>n /. d</code> with <code>d \\ne 0</code></p>",
        "id": 135593540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539246081
    },
    {
        "content": "<p>well now <code>mk_nonneg</code> uses <code>n /. d</code> with <code>d &gt; 0</code> so can I get another recursor?</p>",
        "id": 135594056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539246896
    },
    {
        "content": "<p>actually I need <code>add_def</code> and <code>mk_nonneg</code> at the same time, so maybe I don't need a new recursor, but I would like to have this instead:</p>",
        "id": 135594135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539247018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">num_denom_cases_on&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">num_denom_cases_on&#39;</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135594154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539247045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>git ls-files *.lean | xargs -I % sh -c &#39;&gt;&amp;2 echo %; /c/lean/bin/lean --profile % &gt;/dev/null;&#39; &gt; profile.txt 2&gt;&amp;1\n</pre></div>",
        "id": 135645931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304694
    },
    {
        "content": "<p>I'm starting to think that this is the wrong thing to type</p>",
        "id": 135645933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304700
    },
    {
        "content": "<p>somehow it only uses one thread</p>",
        "id": 135645935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know enough bash magic to make it work?</p>",
        "id": 135645937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304717
    },
    {
        "content": "<p>or one core. I'm just guessing based on the output</p>",
        "id": 135645949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304761
    },
    {
        "content": "<p>did you try setting the <code>-j</code> option of lean?</p>",
        "id": 135646003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304811
    },
    {
        "content": "<p>also, your latest version of <code>num_denom_cases_on''</code> seems sillier than the last. Is <code>ne_of_gt</code> so expensive?</p>",
        "id": 135646023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304874
    },
    {
        "content": "<p>well it's long</p>",
        "id": 135646035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304906
    },
    {
        "content": "<p>you have a strange sense of long</p>",
        "id": 135646084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304927
    },
    {
        "content": "<p>you have a strange interpretation of convention</p>",
        "id": 135646095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304968
    },
    {
        "content": "<p>which one?</p>",
        "id": 135646109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304983
    },
    {
        "content": "<p>that there can be two conventions</p>",
        "id": 135646128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305010
    },
    {
        "content": "<p>maybe we shouldn't have two conventions to start with</p>",
        "id": 135646133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305026
    },
    {
        "content": "<p>I will defend my right to have exceptions to rules, but I still don't know what you are talking about</p>",
        "id": 135646176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305049
    },
    {
        "content": "<p>that add_def and friends uses \"denom ne zero\" and mk_nonneg uses \"denom &gt; zero\"</p>",
        "id": 135646188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305080
    },
    {
        "content": "<p>um... <code>mk_nonneg</code> is about nonnegative things</p>",
        "id": 135646197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305100
    },
    {
        "content": "<p>of course it needs to know the inputs are nonnegative</p>",
        "id": 135646211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305112
    },
    {
        "content": "<p>and who thought the original <code>num_denom_cases_on'</code> is a good idea despite literally every instance of it needing a fix</p>",
        "id": 135646215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305125
    },
    {
        "content": "<p>I don't see it. It gets used like 20 times immediately afterwards and there are no fixes</p>",
        "id": 135646269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305208
    },
    {
        "content": "<p>by \"fix\" I mean, wrapper</p>",
        "id": 135646286,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305245
    },
    {
        "content": "<p>The fact that <code>d</code> is referred to in a <code>\\u</code> is deliberate</p>",
        "id": 135646297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305263
    },
    {
        "content": "<p>it's a cheap way of saying nonnegative integer without any overhead</p>",
        "id": 135646303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305280
    },
    {
        "content": "<p>but matches none of the theorem's hypothesis</p>",
        "id": 135646339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305283
    },
    {
        "content": "<p>Maybe you are right, most of the theorems don't care that it's nonnegative so having it be an integer is just as well. But in that case I would stick to your first proposal</p>",
        "id": 135646403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539305404
    },
    {
        "content": "<p>ok</p>",
        "id": 135646438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539305492
    }
]