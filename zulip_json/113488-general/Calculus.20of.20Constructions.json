[
    {
        "content": "<p>I have built a type checker for the calculus of constructions in Lean over at <a href=\"https://github.com/anfelor/coc-lean\" target=\"_blank\" title=\"https://github.com/anfelor/coc-lean\">https://github.com/anfelor/coc-lean</a> that can generate a proof for the well-typedness of a term. There are still some things I have yet to prove and the code is a bit ugly, so consider this very much work in progress. Still, if someone is interested in writing a programming language in Lean, this might be a good starting point; it is general enough to support any type theory of the lambda cube, and I am currently working on parser combinators and some basic types.</p>",
        "id": 191507348,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584984218
    },
    {
        "content": "<p>Thanks go out to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for some general recommendations and review as well as the rest of the Lean Zulip Channel for patiently answering my questions :)</p>",
        "id": 191507917,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584984459
    },
    {
        "content": "<p>Could you post a couple of examples here, so that we can see what it looks like?</p>",
        "id": 191514444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584987115
    },
    {
        "content": "<p>Of the type checker or terms in the calculus?</p>",
        "id": 191515478,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584987591
    },
    {
        "content": "<p>The type checker typechecking a term and reporting a proof.</p>",
        "id": 191515565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584987616
    },
    {
        "content": "<p>The proof of well-typedness is currently in Prop and so can't be printed. But it is available in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">typecheck</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContextWF</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TC</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Judgement</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">typecheck</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">star</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">bound</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Context</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ContextWF</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Π(x : *) → *</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">typecheck</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">star</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">bound</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Context</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ContextWF</span><span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Unbound index: 1</span>\n</pre></div>",
        "id": 191516189,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584987921
    },
    {
        "content": "<p>Here <code>Exp.lam x a b</code> corresponds to leans <code>(λ x : a, b)</code> and <code>star/box</code> are the two universes. I use de-bruijn indices so 0 means the \"nearest\" binding of a variable. The function type-checked above is therefore the identity on types <code>λ x : *, x</code>.</p>",
        "id": 191516505,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584988086
    },
    {
        "content": "<p><code>ContextWF</code> is a well-formedness condition on contexts. It can be generated by sequentially type-checking the terms in a context.</p>",
        "id": 191516623,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1584988173
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 191540599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584999698
    }
]