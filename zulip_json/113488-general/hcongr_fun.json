[
    {
        "content": "<p>Here's my example; I struggled to minimise it but I got a version which only depends on mathlib, so: <a href=\"https://gist.github.com/b-mehta/6853a5d1ec83c33f9b7181532fa445c8\">https://gist.github.com/b-mehta/6853a5d1ec83c33f9b7181532fa445c8</a>. I think I'd like some sort of hcongr_fun, where I have a heq of functions (or really, pi types) and I can apply to one argument. Alternatively I could use <code>heq_iff_eq</code> but by equality of types is in scope and I can't <code>subst</code> it</p>",
        "id": 201416632,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592586292
    },
    {
        "content": "<p>Essentially I'm struggling with using these sigma types and help would be appreciated!</p>",
        "id": 201416669,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592586313
    },
    {
        "content": "<p>One way to deal with this is to extract your goal into a lemma, but replace some of the complicated types involved with variables. In this case the types are probably <code>Y</code> and <code>(w.a ((w.a a).snd Y.unop f.unop)).fst</code>, which should be replaced with <code>Y</code> and <code>X</code> in some extracted lemma which can then be applied to your goal. The extracted lemma will be easier to prove because <code>subst (h : X = Y)</code> will work. It's probably better to change something earlier in your proof, but I'd need to understand the category theory library to know how.</p>",
        "id": 201425957,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592591581
    },
    {
        "content": "<p>I see what you mean, I'll try</p>",
        "id": 201427187,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592592409
    },
    {
        "content": "<p>I got pretty close. For some reason I can't use <code>heq_eq_to_hom</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">==</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a&#39;</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">heq_eq_to_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">hYZ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hYZ</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_to_hom</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coalgebra_to_presheaf</span> <span class=\"o\">:</span> <span class=\"n\">coalgebra</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"err\">ᵒᵖ</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">},</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"err\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">sorry</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">coassoc</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">comonad</span><span class=\"bp\">.</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">injection</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span> <span class=\"n\">at</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">t₂</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"err\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">sorry</span><span class=\"o\">),</span>\n      <span class=\"n\">replace</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">t₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">ext1</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">id_comp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">counit</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">ext1</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span>\n      <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">coassoc</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">comonad</span><span class=\"bp\">.</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">injection</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">heq_iff_eq</span> <span class=\"n\">at</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">t₂</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">t₂</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eta</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">t₂</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">t₃</span><span class=\"o\">,</span> <span class=\"n\">t₄</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">blah</span> <span class=\"n\">t₄</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">heq_of_eq</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">t₃</span> <span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n\n      <span class=\"c1\">-- by using t₄, we get the result pretty easily</span>\n\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201428573,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592593282
    },
    {
        "content": "<p>If I make it a <code>lemma</code> then I can apply <code>heq_eq_to_hom</code></p>",
        "id": 201428877,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592593478
    },
    {
        "content": "<p>Your <code>blah</code> looks like the sort of <code>hcongr_pi</code> I thought should already exist</p>",
        "id": 201429765,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592594063
    },
    {
        "content": "<p>I think it's probably worth having these lemmas. But it's also probably a sign of a bad interface that they're needed, and I imagine the best way of doing it would be to extract some category theory lemmas that don't mention <code>heq</code> anywhere.</p>",
        "id": 201429951,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592594172
    },
    {
        "content": "<p>I think the use of <code>heq</code> here isn't due to category theory at all though - it's due to the sigma type in <code>W</code></p>",
        "id": 201431192,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592594978
    },
    {
        "content": "<p>Is <code>W</code> something to do with <code>W</code> types?</p>",
        "id": 201432574,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592595858
    },
    {
        "content": "<p>Not particularly, it's unimaginatively called that because people sometimes use <code>W</code> for comonads :P</p>",
        "id": 201432640,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592595921
    },
    {
        "content": "<p>Or at least - I don't know of any connection between that <code>W</code> and <code>W</code> types</p>",
        "id": 201432895,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592596056
    },
    {
        "content": "<p>Actually I think it might be possible to get to a similar point with the heq without any category theory whatsoever</p>",
        "id": 201433279,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592596264
    },
    {
        "content": "<p>There might be some lemmas about <code>W</code> you could extract, I'm not really sure.</p>",
        "id": 201433292,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592596277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/hcongr_fun/near/201428877\">said</a>:</p>\n<blockquote>\n<p>If I make it a <code>lemma</code> then I can apply <code>heq_eq_to_hom</code></p>\n</blockquote>\n<p>I'm not entirely sure what you meant here - your proof works for me!</p>",
        "id": 201433969,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592596724
    },
    {
        "content": "<p>I just had to pull the obj field out - which I'd done in the meantime anyway - and it works perfectly, thanks :)</p>",
        "id": 201434003,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592596749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/hcongr_fun/near/201432640\">said</a>:</p>\n<blockquote>\n<p>Not particularly, it's unimaginatively called that because people sometimes use <code>W</code> for comonads :P</p>\n</blockquote>\n<p>Amusingly, the coinductive version of <code>W</code> types are called <code>M</code> types. Great minds think alike <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 201440137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592600824
    },
    {
        "content": "<p>I believe the W in W-type stands for well-founded tree</p>",
        "id": 201440185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592600875
    },
    {
        "content": "<p>I thought it was going to be Mario and Wario</p>",
        "id": 201443285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592602927
    },
    {
        "content": "<p>Next time I need a variable name for a monad or comonad I'm definitely using mario or wario</p>",
        "id": 201491977,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592679808
    },
    {
        "content": "<p><code>blah</code> is essentially a characterisation of equality of sigmas:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_sigma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a&#39;</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cc</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If you find yourself equating dependent structures more often, I would prove the equivalent of this lemma for each structure (should be automatable in theory) and use that.</p>\n<p>We can also play this game without heterogeneous equality, but this doesn't really improve anything (in Lean). It does bring out a nice symmetry: equality of sigmas is a sigma of equalities.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">relevant_iff</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">forward</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">backward</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">relevant_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">relevant_eq</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_sigma&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">relevant_iff</span>\n      <span class=\"o\">(</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a&#39;</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">eqa</span> <span class=\"o\">:</span> <span class=\"n\">relevant_eq</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">relevant_eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">_</span> <span class=\"n\">eqa</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">relevant_eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h_fst</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h_snd</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201555107,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1592777473
    }
]