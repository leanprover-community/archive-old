[
    {
        "content": "<p>While troubleshooting <a href=\"https://github.com/leanprover-community/mathlib/pull/11128\">#11128</a>, I discovered a principle of typeclasses that was kind of surprising to me: if a class takes an instance parameter, and that instance parameter depends on an <code>out_param</code>, sometimes instance search gets blocked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.core</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">erroring</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ext_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">add_monoid_hom_class</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semiring_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">semiring.one</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">semiring_hom_class.ext_nat</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom_class.ext_nat</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">semiring_hom_class.map_one</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">semiring_hom_class.map_one</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"c1\">-- error: can't synthesize type `H`</span>\n  <span class=\"c1\">-- no attempt is made to infer `add_monoid_hom_class`</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">erroring</span>\n</code></pre></div>\n<p>The correct solution appears to make everything that depends on an <code>out_param</code> also an <code>out_param</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">working</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ext_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">add_monoid_hom_class</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semiring_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">semiring.one</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">semiring_hom_class.ext_nat</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom_class.ext_nat</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">semiring_hom_class.map_one</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">semiring_hom_class.map_one</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">working</span>\n</code></pre></div>\n<p>Does the smarter order of elaboration in Lean 4 fix this?</p>",
        "id": 266675058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641208487
    },
    {
        "content": "<p>This has nothing to do with the elaboration order.</p>",
        "id": 266675532,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641208883
    },
    {
        "content": "<p>What happens when you mark a type class argument as <code>out_param</code> is that Lean will preprocess type class queries for that class as follows:<br>\n<code>add_monoid_hom_class (A ...) (B...)</code> is rewritten to <code>add_monoid_hom_class (A ...) ?H</code> (i.e., every out_param is replaced by a metavariable).</p>",
        "id": 266675673,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641208995
    },
    {
        "content": "<p>Note: this only happens for the top-level query.  No preprocessing happens during search.  If you have <code>instance [add_monoid_hom_class A B] : blah</code> then <code>B</code> is not replaced by a metavariable when the instance is applied.</p>",
        "id": 266675757,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641209060
    },
    {
        "content": "<p>Looking at your example more closely, marking the instances as out_param as well is actually supposed to be done automatically:</p>\n<blockquote>\n<p>Type class parameters can be annotated with out_param annotations.</p>\n<p>Given (C a_1 ... a_n), we replace a_i with a temporary metavariable ?x_i IF</p>\n<ul>\n<li>\n<p>Case 1<br>\n   a_i is an out_param<br>\nOR</p>\n</li>\n<li>\n<p>Case 2<br>\n   a_i depends on a_j for j &lt; i, and a_j was replaced with a temporary metavariable ?x_j.<br>\n   This case is needed to make sure the new C-application is type correct.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 266676094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641209367
    },
    {
        "content": "<p>I now have the precise diagnosis: <code>elaborator::synthesize_type_class_instances_step</code> skips instances if <code>elaborator::ready_to_synthesize</code> indicates they have metavariables that are not covered by <code>out_param</code>s. However, it doesn't count dependencies of <code>out_param</code>s. (Note that <code>preprocess_class</code> is called by the elaborator only after the elaborator decides to call <code>mk_instance</code>, i.e. <code>ready_to_synthesize</code> returns true. So I'd say this is kind of an elaboration order issue.)</p>",
        "id": 266684843,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641216077
    },
    {
        "content": "<p>Unfortunately, copying the logic from <code>type_context_old::preprocess_class</code> to <code>elaborator::ready_to_synthesize</code> is not so easy, since <code>preprocess_class</code> uses the metavariables it inserts for <code>out_param</code>s to determine the other parameters that have a dependency.</p>",
        "id": 266685233,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641216312
    },
    {
        "content": "<p>Alright, I think I have something that works correctly. After the version with more documentation (re-)compiles I'll run the test suite with an <code>assert</code> that the new non-mutating check does the same as the previous one.</p>",
        "id": 266693165,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641220914
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/657\">lean#657</a></p>",
        "id": 266700247,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641224647
    }
]