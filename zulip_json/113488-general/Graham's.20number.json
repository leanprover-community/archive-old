[
    {
        "content": "<p>Inspired by a recent numberphile video, here's Graham's number in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- knuth e m n = m ^(e) n</span>\n<span class=\"n\">def</span> <span class=\"n\">knuth</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">knuth</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">knuth</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graham_number</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"mi\">64</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">graham_number</span>\n</pre></div>",
        "id": 179094694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572042662
    },
    {
        "content": "<p>no one ever talks about the 0 base case</p>",
        "id": 179094770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572042724
    },
    {
        "content": "<p>wait, this times out on my my machine</p>",
        "id": 179094896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572042871
    },
    {
        "content": "<p>I would be very impressed if it didn't</p>",
        "id": 179094906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572042890
    },
    {
        "content": "<p>my machine would need a lot more atoms than the universe could provide, I suspect</p>",
        "id": 179094928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572042915
    },
    {
        "content": "<p>just wait for moore's law to catch up</p>",
        "id": 179094949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572042953
    },
    {
        "content": "<p>or for the sun to burn out</p>",
        "id": 179094995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572042972
    },
    {
        "content": "<p>I guess <code>TREE(3)</code> is probably impossible to define in lean</p>",
        "id": 179095058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043082
    },
    {
        "content": "<p>oh actually I take that back, you only need second order arithmetic to prove it exists</p>",
        "id": 179095142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043180
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"c1\">-- 10</span>\n</pre></div>\n\n\n<p>Since when has that been a thing? I didn't know about that thing</p>",
        "id": 179095210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572043239
    },
    {
        "content": "<p>it's in core</p>",
        "id": 179095231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043270
    },
    {
        "content": "<p>oh wow</p>",
        "id": 179095232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572043277
    },
    {
        "content": "<p><code>nat.iterate</code></p>",
        "id": 179095234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043278
    },
    {
        "content": "<p>Is that busy beaver number which is unknowable definable in Lean? I guess not.</p>",
        "id": 179095247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572043298
    },
    {
        "content": "<p><a href=\"https://www.scottaaronson.com/blog/?p=2725\" target=\"_blank\" title=\"https://www.scottaaronson.com/blog/?p=2725\">https://www.scottaaronson.com/blog/?p=2725</a></p>",
        "id": 179095252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572043315
    },
    {
        "content": "<p>No, I think it is</p>",
        "id": 179095255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043318
    },
    {
        "content": "<p>it's not <code>computable</code> though :P</p>",
        "id": 179095296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043335
    },
    {
        "content": "<p>It's actually within our capabilities given the computability theory stuff</p>",
        "id": 179095307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043378
    },
    {
        "content": "<p>I think <code>TREE(3)</code> is provable and computable</p>",
        "id": 179095344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572043425
    }
]