[
    {
        "content": "<p>(forked from <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197722955\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/freek.2Eyaml/near/197722955</a>)</p>\n<p>So far I've \"cloned mathlib\" via <code>leanproject get mathlib</code> and \"checked out a branch\" via <code>git checkout -b &lt;branch-name&gt;</code></p>",
        "id": 197731335,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589566550
    },
    {
        "content": "<p>Then i edited some files and my <code>git status</code> looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">42</span>\n<span class=\"n\">Changes</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">unstage</span><span class=\"o\">)</span>\n\n    <span class=\"n\">new</span> <span class=\"n\">file</span><span class=\"o\">:</span>   <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">100</span><span class=\"bp\">/</span><span class=\"n\">problem</span><span class=\"bp\">-</span><span class=\"mi\">42</span><span class=\"bp\">/</span><span class=\"n\">inverse</span><span class=\"bp\">-</span><span class=\"n\">triangle</span><span class=\"bp\">-</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n    <span class=\"n\">new</span> <span class=\"n\">file</span><span class=\"o\">:</span>   <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">100</span><span class=\"bp\">/</span><span class=\"n\">problem</span><span class=\"bp\">-</span><span class=\"mi\">82</span><span class=\"bp\">/</span><span class=\"n\">cubing_a_cube</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n\n<span class=\"n\">Changes</span> <span class=\"n\">not</span> <span class=\"n\">staged</span> <span class=\"n\">for</span> <span class=\"n\">commit</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git add/rm &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"n\">what</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">discard</span> <span class=\"n\">changes</span> <span class=\"k\">in</span> <span class=\"n\">working</span> <span class=\"n\">directory</span><span class=\"o\">)</span>\n\n    <span class=\"n\">deleted</span><span class=\"o\">:</span>    <span class=\"n\">cubing_a_cube</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n\n<span class=\"n\">Untracked</span> <span class=\"n\">files</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git add &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">include</span> <span class=\"k\">in</span> <span class=\"n\">what</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">)</span>\n\n    <span class=\"bp\">../.</span><span class=\"n\">DS_Store</span>\n</code></pre></div>",
        "id": 197731412,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589566572
    },
    {
        "content": "<p>I think that means I should be writing <code>git commit -m &lt;commit-message&gt;</code></p>",
        "id": 197731455,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589566606
    },
    {
        "content": "<p>Do you want to delete the top-level cubing_a_cube.lean in this commit? If you do, you want to <code>git rm cubing_a_cube.lean</code> before your <code>git commit</code></p>",
        "id": 197731603,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589566682
    },
    {
        "content": "<p>done</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">42</span>\n<span class=\"n\">Changes</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">unstage</span><span class=\"o\">)</span>\n\n    <span class=\"n\">new</span> <span class=\"n\">file</span><span class=\"o\">:</span>   <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">100</span><span class=\"bp\">/</span><span class=\"n\">problem</span><span class=\"bp\">-</span><span class=\"mi\">42</span><span class=\"bp\">/</span><span class=\"n\">inverse</span><span class=\"bp\">-</span><span class=\"n\">triangle</span><span class=\"bp\">-</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n    <span class=\"n\">renamed</span><span class=\"o\">:</span>    <span class=\"n\">cubing_a_cube</span><span class=\"bp\">.</span><span class=\"n\">lean</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">100</span><span class=\"bp\">/</span><span class=\"n\">problem</span><span class=\"bp\">-</span><span class=\"mi\">82</span><span class=\"bp\">/</span><span class=\"n\">cubing_a_cube</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n\n<span class=\"n\">Untracked</span> <span class=\"n\">files</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">&quot;git add &lt;file&gt;...&quot;</span> <span class=\"n\">to</span> <span class=\"n\">include</span> <span class=\"k\">in</span> <span class=\"n\">what</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">)</span>\n\n    <span class=\"bp\">../.</span><span class=\"n\">DS_Store</span>\n</code></pre></div>",
        "id": 197731738,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589566735
    },
    {
        "content": "<p>tangentially, you might want to add the line <code>.DS_Store/</code> to the .gitignore file in your home directory (<code>~/.gitignore</code> on a Unix-like system)</p>",
        "id": 197731745,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589566740
    },
    {
        "content": "<p>In that case, yep <code>git commit -m \"message\"</code> will put a commit onto your local branch with those changes on</p>",
        "id": 197731789,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589566757
    },
    {
        "content": "<p>I'm going to eat now, but <code>git push</code> should cause that commit to show up on a new branch called <code>freek-42</code> on GitHub</p>",
        "id": 197731841,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589566783
    },
    {
        "content": "<p>(<a href=\"https://git-scm.com/book/en/v2\">This book</a> is a good intro to Git.)</p>",
        "id": 197731986,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589566844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197731986\">said</a>:</p>\n<blockquote>\n<p>(<a href=\"https://git-scm.com/book/en/v2\">This book</a> is a good intro to Git.)</p>\n</blockquote>\n<p>it's a good sign that you and bryan recommend the same book</p>",
        "id": 197733184,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567357
    },
    {
        "content": "<p>It's the canonical book, I also recommend it</p>",
        "id": 197734518,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">42</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">upstream</span> <span class=\"n\">branch</span><span class=\"bp\">.</span>\n<span class=\"n\">To</span> <span class=\"n\">push</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">and</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">remote</span> <span class=\"n\">as</span> <span class=\"n\">upstream</span><span class=\"o\">,</span> <span class=\"n\">use</span>\n\n    <span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"c1\">--set-upstream origin freek-42</span>\n</code></pre></div>",
        "id": 197734923,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568198
    },
    {
        "content": "<p>is this expected?</p>",
        "id": 197734936,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568203
    },
    {
        "content": "<p>Execute that command</p>",
        "id": 197734943,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568207
    },
    {
        "content": "<p>I'll dig out the config that makes it do that command automatically and transparently</p>",
        "id": 197734969,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197734969\">said</a>:</p>\n<blockquote>\n<p>I'll dig out the config that makes it do that command automatically and transparently</p>\n</blockquote>\n<p>is that per user or per repo?</p>",
        "id": 197735013,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568240
    },
    {
        "content": "<p>By the way, annoying Git fact you encountered above: Git has no inherent notion of \"moving\" a file, under the covers it thinks a move is just a deletion and an addition; <code>git status</code> will try and infer that a certain deletion-and-addition is a move, but it's not built into the underlying protocol. If you use <code>git mv</code> instead of <code>mv</code> to rename a file, then you don't have to do the delete-and-add manually</p>",
        "id": 197735053,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568243
    },
    {
        "content": "<p>thanks, I'm sure i learned the <code>git mv</code> trick and forgotten about it at least twice</p>",
        "id": 197735117,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197735013\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197734969\">said</a>:</p>\n<blockquote>\n<p>I'll dig out the config that makes it do that command automatically and transparently</p>\n</blockquote>\n<p>is that per user or per repo?</p>\n</blockquote>\n<p>Your choice, really - I'd recommend per user. (There are three levels of Git config: per-repo, per-user, and per-computer. Any config can go in any level.) It's least confusing per-user for most config</p>",
        "id": 197735169,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568296
    },
    {
        "content": "<p><code>git config --global push.default current</code> will set the config at the user level, so it applies to all repos you manipulate using your user account on your computer</p>",
        "id": 197735409,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568395
    },
    {
        "content": "<p>That means \"Git: set config, for me-the-current-user on all repos I access on this machine, setting what happens when I push: assume I mean the current branch to appear on the remote with the same name as it has locally\"</p>",
        "id": 197735505,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568441
    },
    {
        "content": "<p>sorry, I mean per repo in the other direction</p>",
        "id": 197735554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568469
    },
    {
        "content": "<p>can you enable it by default for anyone that makes a local clone of mathlib</p>",
        "id": 197735574,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568480
    },
    {
        "content": "<p>Nope, sorry</p>",
        "id": 197735624,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568487
    },
    {
        "content": "<p>… actually probably it is possible</p>",
        "id": 197735642,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568499
    },
    {
        "content": "<p>I've never thought of that</p>",
        "id": 197735659,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568505
    },
    {
        "content": "<p>we either need to enable it for mathlib or put this config command in our instructions</p>",
        "id": 197735680,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568520
    },
    {
        "content": "<p>However, I would be strongly disinclined to do it because it'll be very unexpected for people who are familiar with git</p>",
        "id": 197735703,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568532
    },
    {
        "content": "<p>Definitely putting that config command in the instructions is wise</p>",
        "id": 197735727,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589568541
    },
    {
        "content": "<p>we don't want to train people like me to always accept the commands the machine feeds out</p>",
        "id": 197735734,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568544
    },
    {
        "content": "<p>(cf earlier in this conversation when <em>not</em> following such a command was key to realizing that I was not using leanproject but should be)</p>",
        "id": 197735778,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568572
    },
    {
        "content": "<p>that's the way you are supposed to do it</p>",
        "id": 197735862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197735703\">said</a>:</p>\n<blockquote>\n<p>However, I would be strongly disinclined to do it because it'll be very unexpected for people who are familiar with git</p>\n</blockquote>\n<p>okay, i trust you, we'll put it in the instructions</p>",
        "id": 197735868,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568608
    },
    {
        "content": "<p>you can also write <code>git push -u origin my_branch</code></p>",
        "id": 197735882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197735862\">said</a>:</p>\n<blockquote>\n<p>that's the way you are supposed to do it</p>\n</blockquote>\n<p>what's the <code>that</code> here?</p>",
        "id": 197735905,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568630
    },
    {
        "content": "<p>but it's a personal choice how to alias this if you want to make it easier</p>",
        "id": 197735915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568636
    },
    {
        "content": "<p>how to push a new branch to mathlib</p>",
        "id": 197735983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568666
    },
    {
        "content": "<p>if the branch already exists you can leave off the <code>-u</code></p>",
        "id": 197736009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568681
    },
    {
        "content": "<p>if it already exists upstream, is what Mario means</p>",
        "id": 197736136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589568737
    },
    {
        "content": "<p>so now I expect to be able to find the branch on github?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">jalex</span><span class=\"err\">$</span> <span class=\"n\">git</span> <span class=\"n\">push</span>\n<span class=\"n\">Everything</span> <span class=\"n\">up</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">date</span>\n</code></pre></div>",
        "id": 197736139,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568738
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/freek-42\">https://github.com/leanprover-community/mathlib/tree/freek-42</a></p>",
        "id": 197736196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589568766
    },
    {
        "content": "<p>If you click on that link, it will ask you if you want to start a PR</p>",
        "id": 197736228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589568783
    },
    {
        "content": "<p>If you go to <a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> github will helpfully tell you if you have just pushed a new branch and allow you to create a PR</p>",
        "id": 197736296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568809
    },
    {
        "content": "<p>do i want to start a PR?</p>",
        "id": 197736399,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568847
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197736415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589568855
    },
    {
        "content": "<p>If I recall the reason you created this branch correctly, I think the answer is no</p>",
        "id": 197736468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568879
    },
    {
        "content": "<p>well, I guess you could create a [WIP] PR just so you don't lose track of it</p>",
        "id": 197736532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568907
    },
    {
        "content": "<p>okay, so you want to create a PR once you have code that's ready to be reviewed for merging?</p>",
        "id": 197736586,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568933
    },
    {
        "content": "<p>basically</p>",
        "id": 197736606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568942
    },
    {
        "content": "<p>I guess Bryan's answer is \"yes\" because I was supposed to make a separate PR for changing the folder structure</p>",
        "id": 197736705,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568965
    },
    {
        "content": "<p>Oh yeah, Mario's right. I assumed that your code was ready for review.</p>",
        "id": 197736721,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589568972
    },
    {
        "content": "<p>You can use either a [WIP] PR or just a branch if your only interest is in opening up a collaborative project</p>",
        "id": 197736791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569003
    },
    {
        "content": "<p>The archive folder isn't very active so we could probably just do the re-organization with your PR / branch.</p>",
        "id": 197736857,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589569029
    },
    {
        "content": "<p>is <code>[WIP] PR</code> a formal concept in git?</p>",
        "id": 197736858,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589569029
    },
    {
        "content": "<p>or is it a social construct where the title has [WIP] in it and people know to not review the code?</p>",
        "id": 197736915,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589569054
    },
    {
        "content": "<p>there is a \"draft PR\" in github, but I mean a PR with [WIP] in the title and the WIP tag</p>",
        "id": 197736927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569061
    },
    {
        "content": "<p>There's a [WIP] label that we add on GitHub. The PR title should follow our requirements, e.g. \"feat(archive/*): whatever\"</p>",
        "id": 197737027,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589569095
    },
    {
        "content": "<p>(In fact \"PR\" is not even a concept of Git - rather, it's a concept of GitHub, which is simply a platform that stores git repositories and puts lots of nice features on top of them)</p>",
        "id": 197737109,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589569137
    },
    {
        "content": "<p>I think it's okay to have [WIP] in the title as long as it gets removed before the merge</p>",
        "id": 197737112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569138
    },
    {
        "content": "<p>an hour ago i was feeling frustrated that learning this stuff requires work, but I guess it's the same sort of work required to e.g. learn linear algebra when you're a mathematician-in-training</p>",
        "id": 197737119,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589569141
    },
    {
        "content": "<p>there's also a relatively recent option to make a Draft PR, which indicates that the code isn't ready for review</p>",
        "id": 197737285,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589569206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197737109\">said</a>:</p>\n<blockquote>\n<p>(In fact \"PR\" is not even a concept of Git - rather, it's a concept of GitHub, which is simply a platform that stores git repositories and puts lots of nice features on top of them)</p>\n</blockquote>\n<p>To add further, the real primitive of Git is patches and diffs, commits are just bunch of diffs (with some nice messages, extra metadata) applied in the order to give you the current view depending on whether you are in a branch, or on a specific commit, etc.</p>",
        "id": 197753389,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589577335
    },
    {
        "content": "<p>Actually the real primitive of Git is the <a href=\"https://www.tartley.com/a-guide-to-git-using-spatial-analogies\">high-dimensional source code phase space</a></p>",
        "id": 197753678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589577497
    },
    {
        "content": "<p>:'D, on a related note, some people wants to apply category theory to version control: <a href=\"https://pijul.org/\">https://pijul.org/</a> to replace Git</p>",
        "id": 197753792,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589577570
    },
    {
        "content": "<p>What's the connection between pijul and category theory?</p>",
        "id": 197754122,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589577763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197754122\">said</a>:</p>\n<blockquote>\n<p>What's the connection between pijul and category theory?</p>\n</blockquote>\n<p><a href=\"https://pijul.org/model/\">https://pijul.org/model/</a> — The second paragraph</p>",
        "id": 197754214,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589577826
    },
    {
        "content": "<p>I love it!!</p>",
        "id": 197754236,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589577838
    },
    {
        "content": "<p>I think I made a PR</p>",
        "id": 197758340,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589580737
    },
    {
        "content": "<p>I guess we have linkifiers like this? <a href=\"https://github.com/leanprover-community/mathlib/issues/2692\">#2692</a></p>",
        "id": 197758441,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589580838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197758340\">said</a>:</p>\n<blockquote>\n<p>I think I made a PR</p>\n</blockquote>\n<p>Congrats!</p>",
        "id": 197774935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589601075
    },
    {
        "content": "<p>i'm currently editing files on my local machine in response to comments that several people left on the PR</p>",
        "id": 197775594,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589602281
    },
    {
        "content": "<p>i don't know how that code is supposed to flow back in</p>",
        "id": 197775598,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589602307
    },
    {
        "content": "<p>i will probably try just <code>git commit</code> and <code>git push</code> and hope that does the right thing</p>",
        "id": 197775641,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589602334
    },
    {
        "content": "<p>It should, yes</p>",
        "id": 197775822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589602663
    },
    {
        "content": "<p>(Once you start working on a branch that other people are also working on, you'll need new tools/tricks. But don't worry about that for now.)</p>",
        "id": 197775867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589602712
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">pull</span>\n<span class=\"n\">Auto</span><span class=\"bp\">-</span><span class=\"n\">merging</span> <span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">inverse</span><span class=\"bp\">-</span><span class=\"n\">triangle</span><span class=\"bp\">-</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"n\">CONFLICT</span> <span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">):</span> <span class=\"n\">Merge</span> <span class=\"n\">conflict</span> <span class=\"k\">in</span> <span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">inverse</span><span class=\"bp\">-</span><span class=\"n\">triangle</span><span class=\"bp\">-</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"n\">Automatic</span> <span class=\"n\">merge</span> <span class=\"n\">failed</span><span class=\"bp\">;</span> <span class=\"n\">fix</span> <span class=\"n\">conflicts</span> <span class=\"n\">and</span> <span class=\"k\">then</span> <span class=\"n\">commit</span> <span class=\"n\">the</span> <span class=\"n\">result</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 197776516,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589603826
    },
    {
        "content": "<p>how do I see which content is conflicting?</p>",
        "id": 197776519,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589603836
    },
    {
        "content": "<p>oh okay i can see it with <code>git diff</code></p>",
        "id": 197776575,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589603916
    },
    {
        "content": "<p>what a sad error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">merge</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Merging</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">possible</span> <span class=\"n\">because</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">unmerged</span> <span class=\"n\">files</span><span class=\"bp\">.</span>\n<span class=\"n\">hint</span><span class=\"o\">:</span> <span class=\"n\">Fix</span> <span class=\"n\">them</span> <span class=\"n\">up</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">work</span> <span class=\"n\">tree</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"k\">then</span> <span class=\"n\">use</span> <span class=\"err\">&#39;</span><span class=\"n\">git</span> <span class=\"n\">add</span><span class=\"bp\">/</span><span class=\"n\">rm</span> <span class=\"bp\">&lt;</span><span class=\"n\">file</span><span class=\"bp\">&gt;</span><span class=\"err\">&#39;</span>\n<span class=\"n\">hint</span><span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"n\">appropriate</span> <span class=\"n\">to</span> <span class=\"n\">mark</span> <span class=\"n\">resolution</span> <span class=\"n\">and</span> <span class=\"n\">make</span> <span class=\"n\">a</span> <span class=\"n\">commit</span><span class=\"bp\">.</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">Exiting</span> <span class=\"n\">because</span> <span class=\"n\">of</span> <span class=\"n\">an</span> <span class=\"n\">unresolved</span> <span class=\"n\">conflict</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 197776596,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589603996
    },
    {
        "content": "<p>i manually implemented something similar to the tactic <code>repeat {git pull &lt;|&gt; git push &lt;|&gt; git merge &lt;|&gt; git add * &lt;|&gt; git commit}</code> and it eventually pushed</p>",
        "id": 197776656,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589604103
    },
    {
        "content": "<p>I made a suggestion on your PR with more info.</p>",
        "id": 197777373,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589605269
    },
    {
        "content": "<p>Thanks! Eventually VSCode gave me little buttons to help me decide whether to take the local, remote, or both changes.</p>",
        "id": 197777472,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589605520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197776656\">said</a>:</p>\n<blockquote>\n<p>i manually implemented something similar to the tactic <code>repeat {git pull &lt;|&gt; git push &lt;|&gt; git merge &lt;|&gt; git add * &lt;|&gt; git commit}</code> and it eventually pushed</p>\n</blockquote>\n<p>That's good. I think it's supposed to be manual.</p>",
        "id": 197777540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589605675
    },
    {
        "content": "<p>Bots still aren't smart enough. So we need brains at some point in the process (-;</p>",
        "id": 197777577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589605691
    },
    {
        "content": "<p>sure, I was emphasizing the fact that I didn't have any clue which one was going to make progress</p>",
        "id": 197777580,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589605733
    },
    {
        "content": "<p>that I was acting in a way that is about as dumb as that tactic</p>",
        "id": 197777583,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589605743
    },
    {
        "content": "<p>I think I resolved all comments that implied code changes</p>",
        "id": 197777588,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589605773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197753389\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197737109\">said</a>:</p>\n<blockquote>\n<p>(In fact \"PR\" is not even a concept of Git - rather, it's a concept of GitHub, which is simply a platform that stores git repositories and puts lots of nice features on top of them)</p>\n</blockquote>\n<p>To add further, the real primitive of Git is patches and diffs, commits are just bunch of diffs (with some nice messages, extra metadata) applied in the order to give you the current view depending on whether you are in a branch, or on a specific commit, etc.</p>\n</blockquote>\n<p>This isn't actually true; a commit is a complete snapshot of a mapping of filename to file contents. Diffs are not a primitive of Git; it infers them where necessary, and it sometimes uses them as a perf optimisation, but they are not fundamental either. Pijul and Darcs are based on patches; git is not.</p>",
        "id": 197779063,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589608446
    },
    {
        "content": "<p>And that's why it doesn't do renames</p>",
        "id": 197779079,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589608488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197779063\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197753389\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197737109\">said</a>:</p>\n<blockquote>\n<p>(In fact \"PR\" is not even a concept of Git - rather, it's a concept of GitHub, which is simply a platform that stores git repositories and puts lots of nice features on top of them)</p>\n</blockquote>\n<p>To add further, the real primitive of Git is patches and diffs, commits are just bunch of diffs (with some nice messages, extra metadata) applied in the order to give you the current view depending on whether you are in a branch, or on a specific commit, etc.</p>\n</blockquote>\n<p>This isn't actually true; a commit is a complete snapshot of a mapping of filename to file contents. Diffs are not a primitive of Git; it infers them where necessary, and it sometimes uses them as a perf optimisation, but they are not fundamental either. Pijul and Darcs are based on patches; git is not.</p>\n</blockquote>\n<p>I stand corrected, thank you</p>",
        "id": 197823698,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589678199
    },
    {
        "content": "<p>ugh I made a mess of making a new PR<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/2772/files\">https://github.com/leanprover-community/mathlib/pull/2772/files</a></p>",
        "id": 198395845,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108146
    },
    {
        "content": "<p>i ran <code>git status</code> and it showed just one file with a change</p>",
        "id": 198395853,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108159
    },
    {
        "content": "<p>and then I ran <code>git push</code> and it had junk from my other branches in it</p>",
        "id": 198395858,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590108175
    },
    {
        "content": "<p><code>git status</code> shows the differences since the last commit. So I suspect your branches all share the same set of commits. <code>git log</code> will show you the recent commits on your current branch.</p>",
        "id": 198396515,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590109066
    },
    {
        "content": "<p>You might be able to remove commits using <code>git rebase -i</code>. I'd read the section of the git book on rebasing before attempting it though.</p>",
        "id": 198396592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590109107
    },
    {
        "content": "<p>You can read also about <code>git stash</code></p>",
        "id": 198397683,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590110337
    },
    {
        "content": "<p>It can just store in a stash some changes you don't want right now, you do your stuff, you commit, push, then switch to another branch and apply the stash</p>",
        "id": 198397693,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590110357
    },
    {
        "content": "<p>(I'd advise against learning <code>git rebase</code> until you're comfortable with the basics. It's a bit of a tar pit, and often <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> applies, in any case.)</p>",
        "id": 198400581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114332
    },
    {
        "content": "<p>I find a simple way to \"recover\" from bad branches is to use <code>git merge --squash</code>.</p>",
        "id": 198400587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114358
    },
    {
        "content": "<p>Say I have a branch <code>bad</code>, which has the changes I care about, but also some other garbage in other files, that I've accidentally committed, and I can't or don't want to understand the history well enough to cherry pick or rebase.</p>",
        "id": 198400636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114401
    },
    {
        "content": "<p>I then:</p>\n<ol>\n<li><code>git checkout master</code></li>\n<li><code>git checkout -b good</code> (this creates a brand new branch, whose content matches <code>master</code></li>\n<li><code>git merge --squash bad</code> (this dumps all the changes made in the <code>bad</code> branch into my current working copy, but without committing anything)</li>\n<li><code>git checkout -- X.lean</code> (to abandon the changes made to a file <code>X.lean</code>, which I realise I don't want, repeat as necessary)</li>\n<li><code>git commit -m \"feat(algebra/awesome): wow\"</code></li>\n</ol>",
        "id": 198400739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114547
    },
    {
        "content": "<p>That was helpful, scott! I think i know what i did wrong now<br>\nbranches are organized in a tree, and <code>git checkout -b new-branch</code> makes a child of whatever branch i'm currently in</p>",
        "id": 198401307,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590115379
    },
    {
        "content": "<p>so i thought I made a bunch of parallel branches that were children of master, but in fact I made a line graph of branches</p>",
        "id": 198401392,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590115493
    },
    {
        "content": "<p>probably after reading enough of the book i will know how to get git to tell me which branch I am in and which branches are upstream of it</p>",
        "id": 198401476,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590115600
    },
    {
        "content": "<p>I don't use it much anymore, but I used to use a GUI often. Sourcetree was the one I used, but there are many others.</p>",
        "id": 198401570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590115737
    },
    {
        "content": "<p>Something that I learnt way too late was to use <code>git worktree</code>. With <code>git worktree</code> you just keep a separate directory for each branch you're interested in at the moment, so much less often do you actually change branches in a given directory.</p>",
        "id": 198401589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590115793
    },
    {
        "content": "<p>Saves on rebuilding oleans, and saves on confusion about which branch you're currently on, and why.</p>",
        "id": 198401634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590115806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/198401476\">said</a>:</p>\n<blockquote>\n<p>probably after reading enough of the book i will know how to get git to tell me which branch I am in and which branches are upstream of it</p>\n</blockquote>\n<p><code>git status</code> tells you what branch you're on. <code>git log</code> gives you a list of commits on the current branch. In that list, look for a commit with annotation <code>(master)</code>; this is the last commit ('head') of the master branch.</p>",
        "id": 198401656,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590115863
    },
    {
        "content": "<p>You can also get git to draw you the tree of branches, a quick way is <code>git log --graph --oneline</code> and there's more sophisticated and pretty versions here <a href=\"https://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal\">https://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal</a></p>",
        "id": 198401725,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590115967
    },
    {
        "content": "<p><code>git log</code> doesn't seem particularly useful in my current state, it's giving me information about everything pushed to mathlib in the past two days<br>\n(even though <code>git status</code> says I'm on some local branch)</p>",
        "id": 198401815,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590116118
    },
    {
        "content": "<p>You probably haven't committed any changes to that branch then.</p>",
        "id": 198401863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590116171
    },
    {
        "content": "<p>yes, that's true<br>\n(I'm worried that this game of \"infer what state Jalex's git is in\" is not a particularly efficient use of anyone's time; I think we expect me to go off and read and then come back with well-formed questions)</p>",
        "id": 198401929,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590116303
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 198401943,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590116342
    },
    {
        "content": "<p>:) I guess one can literally give an example by like making a branch public or something</p>",
        "id": 198401955,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590116395
    },
    {
        "content": "<p>it seems insane to me that there wasn't a class about this stuff in my undergrad program, if apparently it's used by anyone that does software development</p>",
        "id": 198402025,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590116491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/198401815\">said</a>:</p>\n<blockquote>\n<p><code>git log</code> doesn't seem particularly useful in my current state, it's giving me information about everything pushed to mathlib in the past two days<br>\n(even though <code>git status</code> says I'm on some local branch)</p>\n</blockquote>\n<p>That's because your local branch contains all these commits. A branch is a list of commits (not really but close enough). When you create a new branch, it initially contains all the commits from the current branch. When you commit changes, you add a commit on top of the current branch. When you create a PR, you're saying, roughly, 'take any commits from my branch which aren't already on <code>master</code> and add them'.</p>\n<p>Git's UI is legendarily bad, so there really should be classes about it.</p>",
        "id": 198402085,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590116593
    },
    {
        "content": "<p>I can't speak precisely to the quality of the course because I haven't undergone it, but a friend who I trust technically made <a href=\"https://www.gitscientist.com\">https://www.gitscientist.com</a> as a training course aimed at scientists</p>",
        "id": 198406964,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590124641
    },
    {
        "content": "<p>Dunno how much they charge for it</p>",
        "id": 198406969,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590124666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/198406969\">said</a>:</p>\n<blockquote>\n<p>Dunno how much they charge for it</p>\n</blockquote>\n<p>No explicit pricing is the worst kind of pricing, I was super interested and know people who would benefit a lot of this but :/</p>",
        "id": 198407957,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590126390
    },
    {
        "content": "<p>I've asked my friend already</p>",
        "id": 198408435,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590127166
    },
    {
        "content": "<blockquote>\n<p>A branch is a list of commits</p>\n</blockquote>\n<p>No, a branch is a marked commit. Git stores history in a directed graph of states (\"commits\") with no cycles. While many commits have one parent (the previous commit in the same branch), there are \"merge\" commits with two or more parents (<code>git merge</code> / <code>git pull</code>). When you run <code>git log</code>, it starts at your current commit (<code>HEAD</code>) and goes backwards in history.</p>",
        "id": 198411595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590131342
    },
    {
        "content": "<p>So it shows you all ancestors of your current commit.</p>",
        "id": 198411615,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590131368
    },
    {
        "content": "<p>The <code>master</code> branch of <code>mathlib</code> has a linear history because we “squash” branches before merging them back to master.</p>",
        "id": 198411678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590131407
    },
    {
        "content": "<p>So probably you'll see a few of your commits to the new branch, then the whole history of <code>master</code>.</p>",
        "id": 198411725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590131512
    }
]