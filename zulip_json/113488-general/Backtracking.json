[
    {
        "content": "<p>Let's say I have a finite list of tactics (with no arguments) that I'd like to try on a state.  I'd like to do a <strong>breath first search</strong> with this list of tactics.  Two questions:</p>\n<ol>\n<li>Is this theoretically possible?  Can one \"back track\" or go to a previously visited state using tactics?</li>\n<li>Is there any caching or will I have to incur the cost of executing that tactic again every time I go back to a previously explored branch. </li>\n</ol>\n<p>(I'm not actually interested in this exact application per say, but I'm trying to understand how flexible tree searching is in Lean tactics.)</p>",
        "id": 194748479,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428107
    },
    {
        "content": "<p>Actually, I realize the answer to (1) is true, but the algorithm I have in mind isn't pretty.  The top tactic enumerates all the finite partial paths through the tree in BFS order and then repeatedly tries to execute the sub tactics in that order.  However, it is algorithms like this which make me ask the second question.  Is there anything more efficient?</p>",
        "id": 194748727,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428294
    },
    {
        "content": "<p>Maybe after applying a string of tactics, e.g. A, B, A, C if it succeeds one can record the partial term proof so far and store it in a map object.  Whenever a path extending that path comes up again, one can just execute the term instead of the tactics, but I don't know if this is entirely possible.</p>",
        "id": 194748917,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428504
    },
    {
        "content": "<p>Another possibility is that it is possible to save all the expressions in a goal stack and manually set that goal stack.  (This might only partially work, since I assume changing the goals isn't sound, so if a tactic does it, the final proof won't work.)</p>",
        "id": 194749075,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428630
    },
    {
        "content": "<p>Sure, it's no problem.</p>",
        "id": 194749123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428648
    },
    {
        "content": "<p>Backtracking is free.</p>",
        "id": 194749130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428655
    },
    {
        "content": "<p>How does one do it?</p>",
        "id": 194749154,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428667
    },
    {
        "content": "<p>You can use <code>get_state</code> and <code>set_state</code>, and pass the <code>tactic_state</code> terms around however you please.</p>",
        "id": 194749178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428689
    },
    {
        "content": "<p>I'm not sure from what you say if you already know about <code>s &lt;|&gt; t</code></p>",
        "id": 194749202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428717
    },
    {
        "content": "<p>which runs <code>s</code>, and if that fails restores the previous state, then runs <code>t</code>.</p>",
        "id": 194749216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428734
    },
    {
        "content": "<p>I do know about <code>s &lt;|&gt; t</code>.  I don't just want to backtrack on fails.</p>",
        "id": 194749274,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428766
    },
    {
        "content": "<p><code>try_core t</code>, which returns an <code>none</code> if <code>t</code> fails, and <code>some a</code> if <code>t</code> returns <code>a</code></p>",
        "id": 194749325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428838
    },
    {
        "content": "<p>and <code>get_state</code> / <code>set_state</code></p>",
        "id": 194749329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428844
    },
    {
        "content": "<p>should allow you to do anything you like</p>",
        "id": 194749332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428852
    },
    {
        "content": "<p>without any re-running tactics.</p>",
        "id": 194749339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428858
    },
    {
        "content": "<p>We have lots of \"time-travelling\" tactics in <code>tactic.core</code>.</p>",
        "id": 194749347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587428874
    },
    {
        "content": "<p>Follow up question: Can you use <code>get_state</code>'s output as a key in a <code>rbmap</code> or <code>rbset</code>?</p>",
        "id": 194749451,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587428987
    },
    {
        "content": "<p>no</p>",
        "id": 194749527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429023
    },
    {
        "content": "<p>Is \"no\" addressed to the last comment? If so, I agree, <code>tactic.core</code> doesn't have much of this.</p>",
        "id": 194749558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429057
    },
    {
        "content": "<p>I think there is a tactic for checking if the goal has changed</p>",
        "id": 194749571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429071
    },
    {
        "content": "<p>but you can't hash the entire state (from lean)</p>",
        "id": 194749586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429097
    },
    {
        "content": "<p><code>tactic.suggest</code> does a certain amount of manipulation of <code>tactic_state</code>.</p>",
        "id": 194749609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429119
    },
    {
        "content": "<p>Oh -- I don't know if <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> is actually talking about detecting multiple paths in the graph of <code>tactic_state</code>s and state transitions.</p>",
        "id": 194749685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429163
    },
    {
        "content": "<p>My reading of his question was that he was happy to treat it as a tree.</p>",
        "id": 194749694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429176
    },
    {
        "content": "<p>And the point of the question is about breadth first, rather than depth first, search.</p>",
        "id": 194749714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429198
    },
    {
        "content": "<p>My thoughts are many level's deep.  I've moved from tree to graph. With a tree, I can key each node by the path if needed.  As a graph, I could record all the expressions in the goals (including the local context and target) if I really want to.</p>",
        "id": 194749801,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587429267
    },
    {
        "content": "<p>I don't actually know why you need to compare <code>tactic_state</code> objects for your original use case</p>",
        "id": 194749842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429288
    },
    {
        "content": "<p>I probably don't, but I was just curious.</p>",
        "id": 194749934,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587429364
    },
    {
        "content": "<p>Even if you could, the relation would probably be too fine for your needs</p>",
        "id": 194749953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429394
    },
    {
        "content": "<p>If you want to deduplicate nodes in the tree, you should focus on the important things that future tactics will be looking at: the goal statement and the hypotheses. I don't know if you are treating multiple goals differently</p>",
        "id": 194750013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587429469
    },
    {
        "content": "<p>I would avoid comparing <code>tactic_state</code> for now, and make sure you know how to do a BFS search of the tree resulting from tactic applications.</p>",
        "id": 194750056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429483
    },
    {
        "content": "<p>I can write something if you'd like some hints; it's probably only a few lines long.</p>",
        "id": 194750092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587429523
    },
    {
        "content": "<p>Thanks.  This was very informative.  I think I know where to start, but if you every feel inclined, I'd be happy to see some code. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194750127,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587429579
    },
    {
        "content": "<p>I haven't attempted to polish this at all, or test anything beyond the example, but:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">run_for_state</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">tactic_state</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get_state</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">which_succeed</span> <span class=\"o\">(</span><span class=\"n\">tactics</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">tactic_state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">tactic_state</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">os</span> <span class=\"err\">←</span>\n  <span class=\"n\">tactics</span><span class=\"bp\">.</span><span class=\"n\">enum</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">set_state</span> <span class=\"n\">state</span><span class=\"o\">,</span>\n    <span class=\"n\">r</span> <span class=\"err\">←</span> <span class=\"n\">run_for_state</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s&#39;</span><span class=\"o\">))),</span>\n  <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">os</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bfs</span> <span class=\"o\">(</span><span class=\"n\">tactics</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">done</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"o\">[[]])</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">get_state</span><span class=\"o\">,</span>\n  <span class=\"n\">rs</span> <span class=\"err\">←</span> <span class=\"n\">which_succeed</span> <span class=\"n\">tactics</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">set_state</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ns</span> <span class=\"err\">←</span> <span class=\"n\">bfs</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">::</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"n\">return</span> <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">join</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">bfs</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">split</span><span class=\"o\">]]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194751323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587430780
    },
    {
        "content": "<p>Thanks!  Let me play with the code a little, so I understand everything.</p>",
        "id": 194751850,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587431322
    },
    {
        "content": "<p>First, think I need to upgrade from 3.4.2.  I wonder what I've been missing out...</p>",
        "id": 194752535,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587432216
    }
]