[
    {
        "content": "<p>Hey, here's an mwe. I would like Lean to think of A as a  natural fixed parameter throughout the file, and <code>three_A</code> as another natural which depends on A, rather than as a function which can be applied to other values like <code>B</code>. Is there some way to get the rewrite in <code>h2</code> and the goal to not happen?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">my_section</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">three_A</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">three_A</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_section</span>\n</code></pre></div>",
        "id": 252985631,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631452433
    },
    {
        "content": "<p>oh god, the hack that rw does isn't nice</p>",
        "id": 252987624,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631454273
    },
    {
        "content": "<p>what's your reason for doing this?</p>",
        "id": 252987630,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1631454282
    },
    {
        "content": "<p>Unfortunately parameters don't work in tactic blocks. It should work if you introduce them like <code>let three_A := three_A in begin ...</code> outside the tactic block</p>",
        "id": 252987862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631454429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/rw.20definition.20with.20parameter.20leads.20to.20weird.20state/near/252987630\">said</a>:</p>\n<blockquote>\n<p>what's your reason for doing this?</p>\n</blockquote>\n<p>One reason is simply that the expression <code>3 * A</code> is large in my code and I'd like to look at something more simple. Another reason (and I'm not sure this is right so please tell me if I'm wrong) is that I do a lot of simplification of expressions with 3 * A by expressions with 3 * A, and I was hoping it might run faster if it didn't have to match the whole complicated <code>3 * A</code> expression, it would make the code faster.</p>",
        "id": 252988006,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631454585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/rw.20definition.20with.20parameter.20leads.20to.20weird.20state/near/252987862\">said</a>:</p>\n<blockquote>\n<p>Unfortunately parameters don't work in tactic blocks. It should work if you introduce them like <code>let three_A := three_A in begin ...</code> outside the tactic block</p>\n</blockquote>\n<p>Thanks, I'll try this</p>",
        "id": 252988077,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631454628
    },
    {
        "content": "<p>Another workaround is to use <code>three_A A</code> in tactics</p>",
        "id": 252988721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631455220
    }
]