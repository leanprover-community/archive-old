[
    {
        "content": "<p>Does anyone know what the issue with the following is, or better yet how to fix it :):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">zmod.comm_ring</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm completely stumped</p>",
        "id": 285845235,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655043747
    },
    {
        "content": "<p>Probably because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.comm_ring\">docs#zmod.comm_ring</a> is defined by cases (whether n = 0) and therefore not defeq to its eta-expanded form (i.e. with all fields in the structure expanded).</p>",
        "id": 285846761,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655045854
    },
    {
        "content": "<p>Ah so it's a matter of <code>f (nat.rec hzero hsucc) = nat.rec (f hzero) (λ n, f (hsucc n))</code> not being defeq?</p>",
        "id": 285846835,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655045961
    },
    {
        "content": "<p>Yeah that makes sense, I wonder if its even possible to get around this then, if <code>field</code> etc. were new structures that would help I guess?</p>",
        "id": 285847044,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655046204
    },
    {
        "content": "<p>If you replace p by p+1 it works</p>",
        "id": 285847059,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655046232
    },
    {
        "content": "<p>Or maybe we could redefine the comm_ring structure so each field was individually defined via cases, but that sounds horrible</p>",
        "id": 285847071,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655046243
    },
    {
        "content": "<p>Yes, that's how to fix the problem</p>",
        "id": 285847508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655046870
    },
    {
        "content": "<p>In Lean 4 this doesn't need to be fixed, right? Because eta-expansion is defeq (<a href=\"https://github.com/leanprover/lean4/pull/777\">lean4#777</a>).</p>",
        "id": 285847536,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655046933
    },
    {
        "content": "<p>BTW to prove it in the original form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">euclidean_domain.to_comm_ring</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_euclidean_domain</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">zmod.comm_ring</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 285847617,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655047046
    },
    {
        "content": "<p>This isn't just structure eta, this is more general inductive eta</p>",
        "id": 285847845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655047437
    },
    {
        "content": "<p>But as soon you expand the RHS to <code>{add := (zmod.comm_ring p).add, ...}</code> I think it's then defeq to the LHS.</p>",
        "id": 285847971,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655047596
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.field\">docs#zmod.field</a> is <a href=\"https://github.com/leanprover-community/mathlib/blob/8cad81ae3de9cfcd414abe7d2d3e1c33488d3f08/src/data/zmod/basic.lean#L918\">defined with <code>.. zmod.comm_ring p</code></a>.</p>",
        "id": 285848012,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655047683
    },
    {
        "content": "<p>Is there a reason <code>zmod n</code> isn't defined as, you know, Z mod (n)</p>",
        "id": 285848865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655049159
    },
    {
        "content": "<p>Well, taking the quotient <code>zmod 0</code> wouldn't be equal to <code>Z</code>.</p>",
        "id": 285849363,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655049913
    },
    {
        "content": "<p>Sure, but is <code>ℤ/0ℤ</code> really equal to <code>ℤ</code> anyway?</p>",
        "id": 285849429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655049991
    },
    {
        "content": "<p>Neither the current definition nor Reid's proposed refactor make <code>zmod 0</code> definitionally equal to <code>ℤ</code>.</p>",
        "id": 285849629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655050275
    },
    {
        "content": "<p>Certainly the docstring should include more information about the actual definition. Right now <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a> simply says:</p>\n<blockquote>\n<p>The integers modulo <code>n : ℕ</code>.</p>\n</blockquote>",
        "id": 285849637,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1655050290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/zmod.20comm_ring.20field.20diamond/near/285849629\">said</a>:</p>\n<blockquote>\n<p>Neither the current definition nor Reid's proposed refactor make <code>zmod 0</code> definitionally equal to <code>ℤ</code>.</p>\n</blockquote>\n<p>Sorry? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a> says <code>zmod 0 = ℤ</code></p>",
        "id": 285849840,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655050580
    },
    {
        "content": "<p>Currently it's propositionally equal at least</p>",
        "id": 285849854,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655050626
    },
    {
        "content": "<p>Oh no you're absolutely right, I had misremembered, I thought it was defined with if then else. It is indeed definitionally equal right now.</p>",
        "id": 285849863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655050654
    },
    {
        "content": "<p>This is now <a href=\"https://github.com/leanprover-community/mathlib/pull/14712\">#14712</a></p>",
        "id": 285916220,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655121729
    }
]