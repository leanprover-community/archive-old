[
    {
        "content": "<p>Is it possible to either redefine <code>eq_comm</code> or provide another version that is like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">eq.symm</span><span class=\"o\">,</span> <span class=\"n\">eq.symm</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Often, I have to rely on <code>eq_comm</code> to rearrange some equalities so that iff statements like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_eq_some'\">docs#map_eq_some'</a> can actually proc. Alternatively, suggestions on how to get such iffs to simp when the equality is in the RHS = LHS form would be welcome.</p>",
        "id": 220757449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608692676
    },
    {
        "content": "<p>Is it so bad to write <code>@eq_comm _</code>?</p>",
        "id": 220759820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608696857
    },
    {
        "content": "<p>I don't understand your example use case</p>",
        "id": 220759825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608696886
    },
    {
        "content": "<p>No, it's not so bad.</p>",
        "id": 220759953,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608697147
    },
    {
        "content": "<p>I agree that they should be explicit arguments, but I don't feel very strongly about it.</p>",
        "id": 220832917,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1608762412
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_comm'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">eq_comm</span>\n</code></pre></div>",
        "id": 220836820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608766576
    },
    {
        "content": "<p>In some cases I added symmetric versions of simp lemmas.</p>",
        "id": 220836838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608766616
    }
]