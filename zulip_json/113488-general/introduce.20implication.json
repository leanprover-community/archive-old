[
    {
        "content": "<p>Beginner question: is there an intro command for simple implication, like iff.intro for equivalence? I somehow can't find it in the manual</p>",
        "id": 177083910,
        "sender_full_name": "Chris Laux",
        "timestamp": 1569954567
    },
    {
        "content": "<p>A lambda expression does that. <code>λ x : t, (s : u)</code> has type <code>t -&gt; u</code></p>",
        "id": 177084873,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569955229
    },
    {
        "content": "<p>Ok, I see. I'm trying to solve the simple exercise <code>example : (∃ x : α, r) → r := sorry</code>, but I just can't find the right notation. Would anyone mind telling me the answer?</p>",
        "id": 177088639,
        "sender_full_name": "Chris Laux",
        "timestamp": 1569957668
    },
    {
        "content": "<p>Do you want to use term mode or tactic mode? With or without mathlib?</p>",
        "id": 177089171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569958036
    },
    {
        "content": "<p>Assuming <code>r</code> is a proposition (of type <code>Prop</code>) then the following is a short way to prove it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>The <code>λ⟨x, h⟩</code> introduces a variable <code>x : α</code> and <code>h : r</code> (so that together, <code>⟨x, h⟩ : ∃ x : α, r</code>), and then the proof of <code>r</code> is <code>h</code>.</p>",
        "id": 177089215,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569958076
    },
    {
        "content": "<p>This doesn't work if <code>r</code> is not a proposition.</p>",
        "id": 177089263,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569958087
    },
    {
        "content": "<p>Slightly longer, but without the <code>⟨x, h⟩</code> brackets:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">prf</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here we call <code>exists.elim prf</code> to eliminate the existential quantifier.</p>",
        "id": 177089377,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569958176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> : thanks. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> : I'm just getting started, so I'm not sure about those distinctions</p>",
        "id": 177089728,
        "sender_full_name": "Chris Laux",
        "timestamp": 1569958398
    },
    {
        "content": "<p>If your background is in CS then you might want to start with term mode like Floris was doing. If you background is in maths then you might want to learn tactic mode first</p>",
        "id": 177103073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569968509
    },
    {
        "content": "<p>Yes, I also wanted to give you an example of the proof in tactic mode, but I had to run:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">prf</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">prf</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Probably the best way to learn more is to look at relevant parts of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">theorem proving in Lean</a></p>",
        "id": 177105187,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569970211
    },
    {
        "content": "<p>That is an exercise from \"Theorem proving in Lean\", in that chapter they are showing answers in term mode.</p>",
        "id": 177131084,
        "sender_full_name": "Chris Laux",
        "timestamp": 1570005101
    },
    {
        "content": "<p>Btw, is there a reference handbook/file of sorts that lists all possible \"commands\" for Lean?</p>",
        "id": 177137848,
        "sender_full_name": "Chris Laux",
        "timestamp": 1570012147
    },
    {
        "content": "<p>The command <code>#help commands</code> lists them, with a short description.</p>",
        "id": 177139533,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1570014041
    },
    {
        "content": "<p>But those are just the top-level commands, like <code>def</code> and <code>import</code> and so on</p>",
        "id": 177139563,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1570014098
    },
    {
        "content": "<p>There's also the reference manual, which may not be 100% up to date, but tries to document things like this. <a href=\"https://leanprover.github.io/reference/\" target=\"_blank\" title=\"https://leanprover.github.io/reference/\">https://leanprover.github.io/reference/</a></p>",
        "id": 177139661,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570014198
    },
    {
        "content": "<p>Thanks, guys</p>",
        "id": 177140332,
        "sender_full_name": "Chris Laux",
        "timestamp": 1570015021
    }
]