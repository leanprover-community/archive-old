[
    {
        "content": "<p>This proof doesn't work today, because it gets stuck on <code>list.pairwise ne nil</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.pairwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi₁₂</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi₁₃</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi₂₃</span> <span class=\"o\">:</span> <span class=\"n\">i₂</span> <span class=\"bp\">≠</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">i₃</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>\n\n<p>I can fix it either with <code>attribute [simp] list.pairwise.nil</code> or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">list.pairwise_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.pairwise.nil</span>\n</code></pre></div>\n\n<p>noting that the latter is consistent with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise_cons.\">docs#list.pairwise_cons.</a></p>\n<p>Should one of these be PR'd?</p>",
        "id": 211249816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601036146
    },
    {
        "content": "<p>Yes please. I ran into the same problem just recently, but didn't fix it.</p>",
        "id": 211251791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601037315
    },
    {
        "content": "<p>LGTM</p>",
        "id": 211252349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601037687
    },
    {
        "content": "<p>I note there is <code>attribute [simp] chain.nil</code> a bit lower in <code>data.list.defs</code>.</p>",
        "id": 211252876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601038005
    },
    {
        "content": "<p>Presumably I should prefer the  <code>pairwise_nil</code> spelling for consistency?</p>",
        "id": 211254218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601038855
    },
    {
        "content": "<p>Ah, nevermind, I'll just match <code>chain</code></p>",
        "id": 211254559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601039065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4254\">#4254</a></p>",
        "id": 211254901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601039259
    },
    {
        "content": "<p>As a follow-up question - if I didn't have <code>hi₁₂</code> etc in the above <code>example</code>, is there some case-bash tactic I can use to convert a goal of <code>[i₁, i₂, i₃].pairwise R</code> into <code>R i₁ i₂ ∧ R i₁ i₃ ∧ R i₂ i₃</code>?</p>",
        "id": 211276203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049130
    },
    {
        "content": "<p><code>simp</code> should do that?</p>",
        "id": 211276273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049175
    },
    {
        "content": "<p><code>simp</code> doesn't know I want it in that form, and gives me a slightly ugly forall</p>",
        "id": 211276441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049243
    },
    {
        "content": "<p>Oh, you need a simp lemma for forall_mem</p>",
        "id": 211276447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049247
    },
    {
        "content": "<p>in theory <code>forall_mem_cons</code> should trigger</p>",
        "id": 211276511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049284
    },
    {
        "content": "<p>It seems that <code>list.mem_cons_iff</code> triggers instead</p>",
        "id": 211276620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049334
    },
    {
        "content": "<p><code>simp [-list.mem_cons_iff],</code> gives me what I want</p>",
        "id": 211276777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049390
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">i₃</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">,</span> <span class=\"n\">list.pairwise.nil</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>this works well</p>",
        "id": 211276829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049415
    },
    {
        "content": "<p><code>list.pairwise.nil</code> will be included automatically shortly</p>",
        "id": 211276878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049436
    },
    {
        "content": "<p>Can we teach simp to match <code>mem_cons_iff</code> with lower priority that <code>forall_mem_cons</code>?</p>",
        "id": 211276917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049456
    },
    {
        "content": "<p>I don't think so, because it matches in a subterm</p>",
        "id": 211277122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049537
    },
    {
        "content": "<p>Doesn't that mean the LHS of <code>@list.forall_mem_cons</code> is not in simp-normal form?</p>",
        "id": 211277159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049557
    },
    {
        "content": "<p>yes</p>",
        "id": 211277190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049570
    },
    {
        "content": "<p>it's not a simp lemma though</p>",
        "id": 211277205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049577
    },
    {
        "content": "<p>Oh, that's what I missed</p>",
        "id": 211277235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049589
    },
    {
        "content": "<p>How do I ask lean to show me annotations on a lemma?</p>",
        "id": 211277266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601049599
    },
    {
        "content": "<p>the \"fixed\" version is <code>list.forall_mem_cons'</code> but that's also no good for this example</p>",
        "id": 211277314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601049604
    }
]