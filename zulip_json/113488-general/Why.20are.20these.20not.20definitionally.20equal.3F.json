[
    {
        "content": "<p>This project is sorry-free except for one theorem at the end of <code>archive/100-theorems-list/83_friendship/char_poly.lean</code>:<a href=\"https://github.com/leanprover-community/mathlib/compare/freek_83_friendship_theorem\">https://github.com/leanprover-community/mathlib/compare/freek_83_friendship_theorem</a></p>",
        "id": 204321893,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595113642
    },
    {
        "content": "<p>The sorries in that theorem seem like they should be solvable by <code>refl</code>, but there's some subtle difference in the definitions.</p>",
        "id": 204321935,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595113713
    },
    {
        "content": "<p>Can anybody help figure out how to make lean realize these things are trivially equal, or even better, avoid using <code>transitivity</code> to begin with?</p>",
        "id": 204321944,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1595113778
    },
    {
        "content": "<p>By removing the <code>classical</code>, I managed to prove one of the remaining sorries with <code>refl</code>.</p>",
        "id": 204416548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595248674
    },
    {
        "content": "<p>The other one I popped out into a lemma immediately above. It looks completely doable, but when I try to rewrite by <code>matrix.map_sub</code> (which is missing, so I added) something goes wrong...</p>",
        "id": 204416634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595248716
    },
    {
        "content": "<p>Even using <code>convert</code> with <code>matrix.map_sub</code> times out, so there is still something definitionally sick hiding in these terms! :-)</p>",
        "id": 204416657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595248743
    },
    {
        "content": "<p>oof</p>",
        "id": 204417330,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595249175
    },
    {
        "content": "<p>hmm I'm not sure how to show that <code>(X • 1)^p = X^p • 1</code> (I'm working on writing this as a sorry)</p>",
        "id": 204419177,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595250277
    },
    {
        "content": "<p>I got it with this, which I wasn't able to find in the library</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_pow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204421025,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595251288
    },
    {
        "content": "<p>Clearly, we need a <code>smul_one</code> simp-lemma</p>",
        "id": 204426436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595254144
    },
    {
        "content": "<p>i have these but i'm not sure how they generalize</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">matrix</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span>  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">gsmul_one</span>\n</code></pre></div>",
        "id": 204428277,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595255034
    },
    {
        "content": "<p>I think something like <code>mat_poly_equiv_coeff_apply</code> can do a chunk of the work here</p>",
        "id": 204498809,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595289509
    },
    {
        "content": "<p>yeah, we have to check an equality in <code>matrix n n (polynomial (zmod p))</code>, and it would be \"just a computation\" if we were thinking of it as <code>matrix n n (zmod p) \\otimes polynomial (zmod p)</code></p>",
        "id": 204499139,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595289772
    },
    {
        "content": "<p>so I guess i should go study scott's proof of cayley hamilton more closely</p>",
        "id": 204499150,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595289792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Hmmm, are you sure that it makes a substantial difference? If <code>p</code> is arbitrary, than it's not like you can ask Lean to do the computation for you.</p>",
        "id": 204511730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595306115
    },
    {
        "content": "<p>Sorry, I don't mean that the proof will be <code>dec_trivial</code>, but rather it'll be <code>rw</code>with several forms of bilinearity of the tensor product</p>",
        "id": 204533932,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595328954
    },
    {
        "content": "<p>we sorted this out! one of the several issues was that typeclass inference could not find the appropriate <code>char_p</code> instance, hence <a href=\"https://github.com/leanprover-community/mathlib/issues/3535\">#3535</a></p>",
        "id": 204874627,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595559115
    }
]