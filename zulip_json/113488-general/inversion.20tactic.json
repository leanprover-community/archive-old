[
    {
        "content": "<p>Is anybody aware of any implementations of an <a href=\"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.inversion\">inversion</a> tactic in Lean 3?</p>",
        "id": 221826968,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1609968969
    },
    {
        "content": "<p><code>cases</code> is probably what you're looking for.</p>",
        "id": 221827003,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609969002
    },
    {
        "content": "<p>There is also a (possibly outdated) Coq-Lean <a href=\"https://github.com/jldodds/coq-lean-cheatsheet\">cheatsheet</a>.</p>",
        "id": 221828286,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1609969870
    },
    {
        "content": "<p>Does <code>cases</code> create the equalities as in that <code>contains0</code> example in the Coq Doc?</p>",
        "id": 221828464,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1609969966
    },
    {
        "content": "<p>It seems not, unfortunately</p>",
        "id": 221829775,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1609970690
    },
    {
        "content": "<p>Can you give a lean example showing what tactic state you actually want?</p>",
        "id": 221830018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609970833
    },
    {
        "content": "<p>(and are you looking for <code>cases h : x</code>?)</p>",
        "id": 221830053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609970856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/113488-general/topic/inversion.20tactic/near/221828464\">said</a>:</p>\n<blockquote>\n<p>Does <code>cases</code> create the equalities as in that <code>contains0</code> example in the Coq Doc?</p>\n</blockquote>\n<p><code>cases</code> substitutes the generated equations immediately, so you don't get to see them. This is like Coq's<br>\n<code>inversion_clear</code>.</p>",
        "id": 221830749,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609971158
    },
    {
        "content": "<p>Ah I guess, I can then easily write a wrapper around cases that gets me the equalities</p>",
        "id": 221831181,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1609971442
    },
    {
        "content": "<p><code>cases</code> with the colon generates the equations and also substitutes them, but without discarding them</p>",
        "id": 221831580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609971693
    },
    {
        "content": "<p>Ah, completely missed the colon</p>",
        "id": 221831890,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1609971888
    }
]