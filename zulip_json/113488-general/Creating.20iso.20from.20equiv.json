[
    {
        "content": "<p>Compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.to_Group_iso\">docs#mul_equiv.to_Group_iso</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Preorder.iso.mk\">docs#Preorder.iso.mk</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Build an isomorphism in the category `Group` from a `mul_equiv` between `group`s. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_equiv.to_Group_iso</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group.of</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Group.of</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">e.to_monoid_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm.to_monoid_hom</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Constructs an equivalence between preorders from an order isomorphism between them. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Preorder.iso.mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e.symm_apply_apply</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e.apply_symm_apply</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 273154603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645739705
    },
    {
        "content": "<p>The first bundles <code>X</code> and  <code>Y</code> as <code>Group</code>s on the fly while the second takes <code>X Y : Preorder</code> directly. The destruction-construction happening in the first case is making me eat my hat because it breaks defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group.of</span> <span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group.of</span> <span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 273154613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645739711
    },
    {
        "content": "<p>Is there any reason why it is so? Does anyone mind if I change <code>mul_equiv.to_Group_iso</code> to take <code>X Y : Group</code> directly?</p>",
        "id": 273154677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645739754
    },
    {
        "content": "<p>cc the usual suspect, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 273154729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645739765
    },
    {
        "content": "<p>Yes, I agree <code>X Y : Group</code> is the right way to set up the first one. (As a bonus, it's shorter too!)</p>",
        "id": 273155132,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645740002
    },
    {
        "content": "<p>I can't recall immediately anything that this change would break.</p>",
        "id": 273155151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1645740005
    },
    {
        "content": "<p>From trying it out quickly now, it breaks more uses of <code>Group.of</code> downstream, whose fix is the same.</p>",
        "id": 273155302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645740050
    },
    {
        "content": "<p>I suspect this was just because in the \"early days\", there was less of an audience for API in terms of <code>Group</code>, because no one was actually using it, and so I may have written it this way just to have the argument all live in the \"classical\"/\"unbundled\" world.</p>",
        "id": 273155358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1645740079
    },
    {
        "content": "<p>Hmm, I'm a little surprised that change would break anything--can you give an example?</p>",
        "id": 273155475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645740124
    },
    {
        "content": "<p>If <code>e : X ≃* Y</code>, then <code>e.to_Group_iso</code> doesn't work. You need <code>(e : ↥(Group.of X) ≃* ↥(Group.of Y)).to_Group_iso</code> or something.</p>",
        "id": 273155828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645740325
    },
    {
        "content": "<p>It's really benign.</p>",
        "id": 273155864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645740356
    },
    {
        "content": "<p>Most of the time inference should be outside-in, so this won't be a problem</p>",
        "id": 273156966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645741005
    },
    {
        "content": "<p>It just breaks dot notation in my case due to order of elaboration. But the alternative is undefeqness pain, so I'll take it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273157463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645741203
    },
    {
        "content": "<p>Just to be clear, it works fine with non-dot notation?</p>",
        "id": 273162283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645743918
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12407\">#12407</a></p>",
        "id": 273840051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646240580
    }
]