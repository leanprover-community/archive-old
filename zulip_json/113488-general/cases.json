[
    {
        "content": "<p>I know this is fuzzy as hell, but I've run into the problem that when writing an automated tactic, <code>cases</code> fails for a goal in which it succeeds when I run <code>cases</code> manually. It fails with <code>cases tactic failed, it is not applicable to the given hypothesis</code>.</p>",
        "id": 125991838,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525265166
    },
    {
        "content": "<p>and what is the hypothesis?</p>",
        "id": 125991862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525265228
    },
    {
        "content": "<p>Keep in mind that <code>tactic.cases</code> and <code>tactic.interactive.cases</code> are not the same. Does calling the other one result in the same thing?</p>",
        "id": 125991869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525265268
    },
    {
        "content": "<p>I'll try</p>",
        "id": 125992075,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525265547
    },
    {
        "content": "<p>Oh, so <code>tactic.cases</code> lacks the generalizing part?</p>",
        "id": 125992089,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525265600
    },
    {
        "content": "<p>I guess so</p>",
        "id": 125992145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525265698
    },
    {
        "content": "<p>The distinction between <code>tactic</code> and <code>tactic.interactive</code> is I think never mentioned in Programming In Lean, and caused me some grief when I discovered it the hard way (attempting to write basic tactics which ran tactics which were already there).</p>",
        "id": 125992222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525265881
    },
    {
        "content": "<p>(but in a different namespace :-) )</p>",
        "id": 125992263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525265907
    },
    {
        "content": "<p>So does <code>begin ... end</code> open <code>tactic.interactive</code>?</p>",
        "id": 125992285,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525265944
    },
    {
        "content": "<p>Not exactly. More accurate is that if the first token in an interactive script line is <code>token</code>, then that is interpreted as a call to the tactic <code>tactic.interactive.token</code></p>",
        "id": 125992440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266144
    },
    {
        "content": "<p>there is no elaborate namespace resolution like normal</p>",
        "id": 125992444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266171
    },
    {
        "content": "<p>Hmm okay... looking at the definition of <code>tactic.interactive.cases</code> it doesn't look like this is the problem here...</p>",
        "id": 125992549,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266336
    },
    {
        "content": "<p>So the goal looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>cases tactic failed, it is not applicable to the given hypothesis\nstate:\n5 goals\nDC.M.A&#39; : Type,\nDC.M.lt&#39; : DC.M.A&#39; → DC.M.A&#39; → Type,\nDC.M.iota_A : A → DC.M.A&#39;,\nDC.M.mid : Π (DC.M.x DC.M.y : DC.M.A&#39;), DC.M.lt&#39; DC.M.x DC.M.y → DC.M.A&#39;,\nDC.M.iota_lt : Π (a b : A), lt a b → DC.M.lt&#39; (DC.M.iota_A a) (DC.M.iota_A b),\nDC.M.mid_l :\n  Π (DC.M.x DC.M.y : DC.M.A&#39;) (DC.M.p : DC.M.lt&#39; DC.M.x DC.M.y), DC.M.lt&#39; DC.M.x (DC.M.mid DC.M.x DC.M.y DC.M.p),\nDC.M.mid_r :\n  Π (DC.M.x DC.M.y : DC.M.A&#39;) (DC.M.p : DC.M.lt&#39; DC.M.x DC.M.y), DC.M.lt&#39; (DC.M.mid DC.M.x DC.M.y DC.M.p) DC.M.y,\nb : DC.SI,\nx : A,\na a&#39; : DC.Rarg DC.SI.A&#39;,\nar : DC.rel DC.SI.A&#39; (DC.S&#39;.iota_A x) a,\nar&#39; : DC.rel DC.SI.A&#39; (DC.S&#39;.iota_A x) a&#39;\n⊢ a = a&#39;\n</pre></div>",
        "id": 125992598,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266373
    },
    {
        "content": "<p>And the failing tactic is</p>\n<div class=\"codehilite\"><pre><span></span>b ←  i_to_expr ```(ar&#39;),\ncases_core b [],\n</pre></div>",
        "id": 125992608,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266398
    },
    {
        "content": "<p>your local variables have namespaces?</p>",
        "id": 125992624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266429
    },
    {
        "content": "<p>They're just composite names, because.... because I didn't know what else to do with them. Actually I'd want to put all of that <code>DC.M</code> into parameters of some section...</p>",
        "id": 125992681,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266499
    },
    {
        "content": "<p>seems like you want a structure to hold all that</p>",
        "id": 125992700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266555
    },
    {
        "content": "<p>Structures aren't exposed to the meta languages, so I thought I'd spare me the work.</p>",
        "id": 125992762,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266630
    },
    {
        "content": "<p>in any case I don't recommend variable names with dots in them</p>",
        "id": 125992767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266656
    },
    {
        "content": "<p>not sure if it's causing the problem, but it might be related</p>",
        "id": 125992775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266670
    },
    {
        "content": "<p>If you want, you can have a look at the mess that is my attempt to implement inductive-inductive types at <a href=\"https://bitbucket.org/javra/indind/src/master/\" target=\"_blank\" title=\"https://bitbucket.org/javra/indind/src/master/\">https://bitbucket.org/javra/indind/src/master/</a></p>",
        "id": 125992779,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266678
    },
    {
        "content": "<p>Okay, thanks for the advice</p>",
        "id": 125992783,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525266703
    },
    {
        "content": "<blockquote>\n<p>Structures aren't exposed to the meta languages, so I thought I'd spare me the work.</p>\n</blockquote>\n<p>What do you mean by this?</p>",
        "id": 125992862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525266814
    },
    {
        "content": "<p>Since I want to create all that stuff automatically, I need to rely on what's available to the meta language which afaik is just <code>add_inductive</code>. I'd have to define all the projections of the structure myself, no?</p>",
        "id": 125993005,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525267017
    },
    {
        "content": "<p>Any more clues? :(</p>",
        "id": 126000435,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525277294
    },
    {
        "content": "<p>It's not quite clear to me what you are trying to do, exactly. If you are doing an automatic theorem, presumably all the assumptions are generated from the inputs somehow? What is induction-induction and how does it map to your representation?</p>",
        "id": 126000989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525278051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> It's so hacky I haven't even thought about it until now, but since you're inside a user-defined command, I guess you could define structures by assembling them as strings and passing them to the parser, like Gabriel did in hott3 <a href=\"https://github.com/gebner/hott3/blob/ec79a762a478f775ca03de45361e215a5ad4c129/src/hott/init/meta/support.lean#L97-L98\" target=\"_blank\" title=\"https://github.com/gebner/hott3/blob/ec79a762a478f775ca03de45361e215a5ad4c129/src/hott/init/meta/support.lean#L97-L98\">https://github.com/gebner/hott3/blob/ec79a762a478f775ca03de45361e215a5ad4c129/src/hott/init/meta/support.lean#L97-L98</a></p>",
        "id": 126001180,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525278320
    },
    {
        "content": "<p>This is quite fragile of course since the pretty printer doesn't always roundtrip, even with <code>pp.all</code></p>",
        "id": 126001274,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525278432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I can tell you all of that but it's pretty irrelevant to my problem :D In short the thing I'm trying to write gets some expressions as input and adds some stuff to the environment. So yes, the type of the theorem I'm proving is generated with some steps from these inputs. <code>DC.SI</code>, <code>DC.Rarg</code> and <code>DC.rel</code> are all inductive types that I add via <code>add_inductive</code> before I get to prove the theorem with the goal which I stated above. (Said theorem I'm adding via <code>add_theorem_by</code>, so I assemble the type directly but prove the theorem itself by a tactic which I'm just about to write.</p>\n<p>The question is just why I'm getting this error message instead of <code>cases</code> being sucessful in destructing <code>ar'</code>.</p>",
        "id": 126004451,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525282838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Oh wow, that's evil. Thanks for the pointer. But I guess I'd rather stay away from that :D</p>",
        "id": 126004480,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525282908
    },
    {
        "content": "<p>Ohhh could it be that cases just doesn't deal with inductive types that have been added using <code>add_inductive</code> when they lack <code>rec_names</code>, for example?</p>",
        "id": 126007194,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525286035
    },
    {
        "content": "<p>That would be a shame <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 126007262,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525286081
    },
    {
        "content": "<p>I got a MNWE here:</p>\n<div class=\"codehilite\"><pre><span></span>meta def add_stuff : tactic unit :=\ndo tactic.add_inductive `foo [] 0 `(Type) $\n   [(`bar, expr.const `foo [])]\n\nexample : unit :=\nbegin\n  add_stuff,\n  have x : foo, exact bar,\n  cases x,\nend\n</pre></div>",
        "id": 126041805,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525348811
    },
    {
        "content": "<p>Does <code>is_ginductive</code> fail for the inductive types added by <code>add_inductive</code>? <em>guess</em></p>",
        "id": 126053566,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525365841
    },
    {
        "content": "<p>yes</p>",
        "id": 126053612,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525365874
    },
    {
        "content": "<p>So there's just no way to use <code>cases</code> then? :(</p>",
        "id": 126054107,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525366621
    },
    {
        "content": "<p>You can use <code>induction</code> :)</p>",
        "id": 126054191,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525366721
    },
    {
        "content": "<p><code>induction</code> doesn't do the generalizing itself, right?</p>",
        "id": 126054440,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525367018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> This one? <a href=\"https://github.com/leanprover/lean/blob/e181232c8ffd2bc2ba1b2f9799f8ac0ea0e4e505/library/init/meta/interactive.lean#L518\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/e181232c8ffd2bc2ba1b2f9799f8ac0ea0e4e505/library/init/meta/interactive.lean#L518\">https://github.com/leanprover/lean/blob/e181232c8ffd2bc2ba1b2f9799f8ac0ea0e4e505/library/init/meta/interactive.lean#L518</a></p>",
        "id": 126087605,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525424980
    },
    {
        "content": "<p>Ah, I only tried <code>tactic.induction</code> before... The problem is not generalizing the expression itself but errors like <code>induction tactic failed, argument #8 of major premise type\n  DC.rel DC.M.A' DC.M.lt' DC.M.iota_A DC.M.mid DC.M.iota_lt DC.M.mid_l DC.M.mid_r DC.SI.A' (DC.S'.iota_A x) a\nis not a variable</code>...</p>",
        "id": 126088668,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525426838
    },
    {
        "content": "<p>Isn't it a bit strange that the parsing bits of the interactive versions of these tactics are combined with adding more features?</p>",
        "id": 126088856,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525427259
    },
    {
        "content": "<p>It seems pretty bad that I have to fiddle around with the parser monad :(</p>",
        "id": 126089062,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525427604
    },
    {
        "content": "<p>In that sense <code>cases</code> is stronger than <code>tactic.interactive.inductive</code>...</p>",
        "id": 126090649,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525430657
    },
    {
        "content": "<p>Hm, I thought we generalized major premise in <code>induction</code> as well</p>",
        "id": 126090829,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525431039
    },
    {
        "content": "<p>At least not in the version I'm on right now (3.3)</p>",
        "id": 126092990,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525435238
    },
    {
        "content": "<p>The best solution for this mismatch would be to somehow expose <code>add_ginductive</code> to the meta language, I guess</p>",
        "id": 126092999,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525435274
    },
    {
        "content": "<p>Well, why would you use such an ancient version :P</p>",
        "id": 126094398,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525437915
    },
    {
        "content": "<p>Well, in 3.4.1 it doesn't look any different ;)</p>",
        "id": 126095025,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525439086
    },
    {
        "content": "<p>I think it's about generalizing the _argument_ to the major premise, no?</p>",
        "id": 126095041,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525439122
    },
    {
        "content": "<p>What's your best guess for the amount of work it would be to add an interface <code>add_ginductive</code>?</p>",
        "id": 126095100,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525439248
    },
    {
        "content": "<blockquote>\n<p>I think it's about generalizing the _argument_ to the major premise, no?</p>\n</blockquote>\n<p>There is <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545\">https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545</a></p>",
        "id": 126097169,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525442640
    },
    {
        "content": "<blockquote>\n<p>What's your best guess for the amount of work it would be to add an interface <code>add_ginductive</code>?</p>\n</blockquote>\n<p>Well, first you have to fork Lean... but the implementation itself shouldn't be hard</p>",
        "id": 126097297,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525442807
    },
    {
        "content": "<blockquote>\n<p>There is <a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545\">https://github.com/leanprover/lean/blob/master/library/init/meta/interactive.lean#L545</a></p>\n</blockquote>\n<p>I saw that, yes, but that's still not as general as <code>cases</code>, otherwise the message <code>argument #8 of major premise type [...] is not a variable</code> wouldn't make sense. I'll try to come up with a small example...</p>",
        "id": 126097884,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525443612
    },
    {
        "content": "<p>The generalization has some issues anyway, see for example the error that</p>\n<div class=\"codehilite\"><pre><span></span>inductive foo : bool → Type\n| mk : foo ff\n\ninductive bar : Π b, foo b → Type\n| mk : bar ff foo.mk\n\nexample (y: foo ff) (x : bar ff y) : unit :=\nbegin\n  induction x,\nend\n</pre></div>\n\n\n<p>gives...</p>",
        "id": 126097901,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525443646
    },
    {
        "content": "<p>Small example where cases works:</p>\n<div class=\"codehilite\"><pre><span></span>inductive foo : bool → Type\n| mk : foo ff\n\ninductive bar : Π b, foo b → Type\n\nexample (x : bar ff foo.mk): unit :=\nbegin\n  induction x,\nend\n</pre></div>",
        "id": 126098128,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525443988
    },
    {
        "content": "<p>Recreating all the <code>revert</code>s and <code>generalize</code>s is really difficult :-/</p>",
        "id": 126256543,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525771142
    },
    {
        "content": "<p>Does anybody have a good explanation of what's the difference between <code>cases</code> and <code>induction</code> there?</p>",
        "id": 126258976,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525776091
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--bar.cases_on : Π (C : Π (b : bool) (a : foo b), bar b a → Sort l) {b : bool} {a : foo b} (n : bar b a), C b a n</span>\n<span class=\"c1\">--bar.rec_on   : Π (C : Π (b : bool) (a : foo b), bar b a → Sort l) {b : bool} {a : foo b} (n : bar b a), C b a n</span>\n</pre></div>",
        "id": 126259387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776850
    },
    {
        "content": "<p>o_O</p>",
        "id": 126259390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776863
    },
    {
        "content": "<p>But in Jacob's code, <code>cases</code> works and <code>induction</code> produces the error</p>",
        "id": 126259508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525777109
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>generalize tactic failed, result is not type correct\nnested exception message:\ncheck failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)\nstate:\n⊢ bar ff foo.mk → unit\n</pre></div>",
        "id": 126259509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525777113
    },
    {
        "content": "<p>With <code>set_option trace.check true</code> we see</p>",
        "id": 126259574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525777219
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[check] application type mismatch at\n  bar _x foo.mk\nargument type\n  foo ff\nexpected type\n  foo _x\n</pre></div>",
        "id": 126259576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525777236
    },
    {
        "content": "<p>(this is with the 20/4 nightly)</p>",
        "id": 126259597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525777315
    },
    {
        "content": "<p><code>cases</code> does <em>something</em> to generalize the arguments in the correct way that <code>induction</code> doesn't, it's not really about the recursor it uses</p>",
        "id": 126263030,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525783606
    },
    {
        "content": "<p>Do you think this will change in Lean 4?</p>",
        "id": 126316715,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525875716
    },
    {
        "content": "<p>Lean 4 will probably not have any <code>ginductive</code>s</p>",
        "id": 126316950,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525876005
    },
    {
        "content": "<p>Care to elaborate?</p>",
        "id": 126322056,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525882613
    },
    {
        "content": "<p>With nested and mutual inductives moving into the kernel, there shouldn't be any need for an abstraction layer. Well, it's still not clear how nested inductives would be represented.</p>",
        "id": 126323093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525884323
    },
    {
        "content": "<p>Why are they moved into the kernel if they can be reduced outside the kernel?</p>",
        "id": 126323554,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525885059
    },
    {
        "content": "<p>They can't :) . The reduction rules are too weak, that is. Also, it's the most horrible part of the code base.</p>",
        "id": 126323646,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1525885202
    },
    {
        "content": "<p>So I'll wait for Lean 4 or try to emulate what cases does for generalizing</p>",
        "id": 126367079,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525962430
    },
    {
        "content": "<p>Apparently the part I'm missing is mostly some magical <code>no_confusion</code> applications</p>",
        "id": 126368002,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525963750
    },
    {
        "content": "<p>Is it still Daniel who maintains the ginductive compiler?</p>",
        "id": 126369196,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1525965459
    },
    {
        "content": "<p>I think it's just Leo, who says he doesn't even understand the code any more</p>",
        "id": 126525983,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1526282533
    },
    {
        "content": "<p>That's bad news :(</p>",
        "id": 126544666,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1526313839
    }
]