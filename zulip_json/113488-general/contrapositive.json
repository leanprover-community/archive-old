[
    {
        "content": "<p>A student has asked me how to prove <code>example (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) </code> and <code>library_search</code> is failing me :-) What's this function called?</p>",
        "id": 177281656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570132849
    },
    {
        "content": "<p>What if you assume <code>Q</code> is decidable and try again?</p>",
        "id": 177281785,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570132898
    },
    {
        "content": "<p><code>by contrapose!, ...</code>?</p>",
        "id": 177282018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570132979
    },
    {
        "content": "<p>I'm assuming everything's decidable!</p>",
        "id": 177282048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570132994
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>still fails!</p>",
        "id": 177282245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570133064
    },
    {
        "content": "<p><code>  contrapose!, exact (and_comm _ _).1,</code> works :-/</p>",
        "id": 177282343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570133143
    },
    {
        "content": "<p><code>by tauto!</code></p>",
        "id": 177282469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133220
    },
    {
        "content": "<p>It is a tautology after all <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 177282738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570133298
    },
    {
        "content": "<p>And <code>contrapose!, library_search</code> works too</p>",
        "id": 177282746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133305
    },
    {
        "content": "<p>Even <code>by tauto</code> works</p>",
        "id": 177282770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133333
    },
    {
        "content": "<p>and <code>apply not_imp_not</code> works too</p>",
        "id": 177282795,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570133347
    },
    {
        "content": "<p>Looks like almost any random sequence of characters works then.</p>",
        "id": 177282865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133401
    },
    {
        "content": "<p>That sounds like the right conclusion to draw</p>",
        "id": 177282960,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570133451
    },
    {
        "content": "<p><code>apply not_imp_not</code> doesn't work, it's an iff, and I think you hit the apply bug if you use <code>.1</code>.  <code>exact not_imp_not.1</code> works.</p>",
        "id": 177282996,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133485
    },
    {
        "content": "<p>Oh, have you tried <code>apply'</code>?</p>",
        "id": 177283109,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570133537
    },
    {
        "content": "<p><code>apply'</code> leaves you with a mess.</p>",
        "id": 177283139,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>4 goals\nP Q : Prop,\n_inst_1 : decidable P,\n_inst_2 : decidable Q\n⊢ ¬((¬Q → ¬P) → P → Q) → ¬?m_1\n\nP Q : Prop,\n_inst_1 : decidable P,\n_inst_2 : decidable Q\n⊢ ?m_1\n\nP Q : Prop,\n_inst_1 : decidable P,\n_inst_2 : decidable Q\n⊢ Prop\n\nP Q : Prop,\n_inst_1 : decidable P,\n_inst_2 : decidable Q\n⊢ decidable ((¬Q → ¬P) → P → Q)\n</pre></div>",
        "id": 177283156,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133575
    },
    {
        "content": "<p><code>simp [not_imp_not]</code> works</p>",
        "id": 177283219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133626
    },
    {
        "content": "<p>Why are you all still writing random sequences of characters</p>",
        "id": 177283298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570133654
    },
    {
        "content": "<p>I sort of lost track of what we are trying to do.</p>",
        "id": 177283316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133675
    },
    {
        "content": "<p>Heh. <code>cc</code> works.</p>",
        "id": 177283329,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133684
    },
    {
        "content": "<p>Also, isn't library_search supposed to be able to apply iff lemmas?</p>",
        "id": 177283334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570133687
    },
    {
        "content": "<p>Isn't it a contest about finding as many proofs are possible?</p>",
        "id": 177283343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133694
    },
    {
        "content": "<p>I think the problem is with <code>apply</code>, not <code>library_search</code>.</p>",
        "id": 177283370,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133711
    },
    {
        "content": "<p><code>by finish</code></p>",
        "id": 177283374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133712
    },
    {
        "content": "<p><code>by clarify</code></p>",
        "id": 177283403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133749
    },
    {
        "content": "<p><code>by safe</code></p>",
        "id": 177283413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133758
    },
    {
        "content": "<p><code>tidy</code> takes a long time and reduces the goal to proving <code>Q</code>, that's not so good.</p>",
        "id": 177283471,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133775
    },
    {
        "content": "<p>Did I win?</p>",
        "id": 177283474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133781
    },
    {
        "content": "<p><code>by cc</code> is the shortest!</p>",
        "id": 177283499,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133811
    },
    {
        "content": "<p>Can we write a shorter proof still?</p>",
        "id": 177283649,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570133875
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">cc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 177283654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133878
    },
    {
        "content": "<p>Nah, the auxiliary def counts.</p>",
        "id": 177283824,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570133910
    },
    {
        "content": "<p>Does that count as shorter? You have to write a definition first</p>",
        "id": 177283826,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570133912
    },
    {
        "content": "<p>Let me open some PR.</p>",
        "id": 177283843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570133926
    },
    {
        "content": "<blockquote>\n<p>and <code>apply not_imp_not</code> works too</p>\n</blockquote>\n<p>Chris is here and he swore blind that something with not_imp_not should work -- I don't know why it didn't show up. What I don't understand is why <code>library_search</code> doesn't help</p>",
        "id": 177283854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570133934
    },
    {
        "content": "<p>I think that <code>library_search</code> doesn't break iffs into implications</p>",
        "id": 177284112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570134012
    },
    {
        "content": "<p><code>library_search</code> doesn't work because of the <code>apply</code> bug. I'm not sure if it uses <code>apply'</code> instead, but it doesn't matter, because <code>apply'</code> is broken here too.</p>",
        "id": 177284120,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570134022
    },
    {
        "content": "<p>It doesn't use <code>apply'</code></p>",
        "id": 177284184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570134060
    },
    {
        "content": "<blockquote>\n<p>I think that <code>library_search</code> doesn't break iffs into implications</p>\n</blockquote>\n<p>I think it does. The tactic is definitely doing something with <code>iff</code>s.</p>",
        "id": 177284452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570134183
    },
    {
        "content": "<p>There was a time when it didn't, though</p>",
        "id": 177284518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570134226
    },
    {
        "content": "<p>It tries <code>iff</code>s in the reverse direction</p>",
        "id": 177284614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570134276
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>both work.</p>",
        "id": 177284672,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570134305
    },
    {
        "content": "<p>Ok, I give up</p>",
        "id": 177284713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570134332
    },
    {
        "content": "<p>the problem is the decidable instances probably</p>",
        "id": 177288020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570136520
    },
    {
        "content": "<p>is <code>classical.dec</code> in the context / a local instance?</p>",
        "id": 177288088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570136547
    },
    {
        "content": "<p>It was sometimes, and it wasn't sometimes. I think it wasn't when I made the props decidable. Before that I was just using the <code>classical</code> tactic before <code>library_search</code> and it still didn't work.</p>",
        "id": 177290530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570138443
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>both work.</p>\n</blockquote>\n<p>Currently <code>example : B ↔ A := by library_search</code> doesn't work, and I would like to fix this.</p>",
        "id": 177305451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570155678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nNot sure if this is related, but in mathlib rev c5d91, the following fails when I would have expected it to find <code>not_not</code> :</p>\n<div class=\"codehilite\"><pre><span></span>example (p : Prop) [decidable p] : (¬¬p) → p := by library_search\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>failed\nstate:\np : Prop,\n_inst_1 : decidable p\n|- ¬¬p → p\n</pre></div>",
        "id": 185436510,
        "sender_full_name": "Chris B",
        "timestamp": 1578839320
    },
    {
        "content": "<p>Actually this also fails, but some how succeeds in finding MyAx if I change both to <code>(¬¬p ↔ p)</code>.</p>\n<div class=\"codehilite\"><pre><span></span>axiom MyAx (p : Prop) [decidable p] : (¬¬p) → p\n\nexample (p : Prop) [decidable p] : (¬¬p) → p := by library_search\n</pre></div>",
        "id": 185436629,
        "sender_full_name": "Chris B",
        "timestamp": 1578839569
    }
]