[
    {
        "content": "<p>I'm currently fixing some horrible performance problems in the <code>ext</code> tactic.  (It takes a few seconds after <code>import all</code>.)  Some parts of the code support more than one extensionality lemma per structure.  Does anybody use this / want this / have any idea what this is about?</p>",
        "id": 197442322,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589388870
    },
    {
        "content": "<p>how does that even work?</p>",
        "id": 197442387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589388903
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 197442867,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589389061
    },
    {
        "content": "<p>I just noticed that the ext attribute stores a list of names.</p>",
        "id": 197442926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589389080
    },
    {
        "content": "<p>I guess we don't want/need this. Do you have examples?</p>",
        "id": 197443019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589389107
    },
    {
        "content": "<p>I'm pretty sure we don't because every lemma but the last is discarded.</p>",
        "id": 197443072,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589389132
    },
    {
        "content": "<p>There are examples in the doc comment on <code>extensional_attribute</code></p>",
        "id": 197443215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589389193
    },
    {
        "content": "<p>you can mark one lemma as the extensionality for two types</p>",
        "id": 197443293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589389207
    },
    {
        "content": "<p>that are presumably defeq</p>",
        "id": 197443320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589389218
    },
    {
        "content": "<p>Is this related to the several lines of <code>bit1 (bit0 (bit0 ...))</code> I get when <code>#print</code>ing an extensionality lemma?</p>",
        "id": 197445140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589389903
    },
    {
        "content": "<p>oh wow that looks pretty terrible</p>",
        "id": 197446289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390327
    },
    {
        "content": "<p><code>@[ext]</code> stores an <code>expr</code>, and <code>#print</code> apparently doesn't use the proper pp settings to show that expr</p>",
        "id": 197446343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390354
    },
    {
        "content": "<p>The whole <code>user_attribute</code> param story is pretty bad.  NEVER USE <code>user_attribute.get_param</code>.  This will call <code>eval_expr</code>.  Calling <code>eval_expr</code> coincidentally also disables the attribute cache IIRC.</p>",
        "id": 197446499,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589390415
    },
    {
        "content": "<p>The parameters are stored as expressions using <code>has_reflect</code> in case it wasn't clear.</p>",
        "id": 197446570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589390449
    },
    {
        "content": "<p>how are you supposed to get the parameter without <code>get_param</code>? It's not passed to <code>after_set</code></p>",
        "id": 197446731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589390513
    },
    {
        "content": "<p>Multiple <code>ext</code> lemmas per structure can be useful, e.g., <a href=\"https://github.com/leanprover-community/mathlib/pull/2670/files#diff-cf5abebacea368c294b6dd8f78d7daccR62\">here</a></p>",
        "id": 197450016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589391935
    },
    {
        "content": "<p><code>free_monoid.hom_eq</code> is an <code>ext</code> lemma for <code>free_monoid α →* M</code>.</p>",
        "id": 197450135,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589391970
    },
    {
        "content": "<p>And it makes sense to have similar lemmas for other structures with relatively small generating sets.</p>",
        "id": 197451105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589392378
    },
    {
        "content": "<p>E.g., two <code>nat →+ M</code> are equal if they agree at <code>1</code>.</p>",
        "id": 197451167,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589392409
    },
    {
        "content": "<p>Yup, that's a good example</p>",
        "id": 197451574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589392571
    },
    {
        "content": "<p>But it doesn't work at the moment, right?  We can do that as a follow-up PR.</p>",
        "id": 197451693,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589392617
    },
    {
        "content": "<p>This needs some kind of discrimination tree lookup</p>",
        "id": 197451761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589392641
    },
    {
        "content": "<p>I added <code>@[ext]</code> to <code>free_monoid.hom_eq</code>, and <code>mathlib</code> still builds.</p>",
        "id": 197456224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589394667
    },
    {
        "content": "<p>Probably it tries this lemma first for each <code>monoid_hom</code>, then falls back to <code>monoid_hom.ext</code>.</p>",
        "id": 197456405,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589394748
    },
    {
        "content": "<p>Even better, it first tries the named extensionality lemma, and if that fails, it tries all of them..</p>",
        "id": 197458006,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589395414
    }
]