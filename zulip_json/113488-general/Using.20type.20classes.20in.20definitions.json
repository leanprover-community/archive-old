[
    {
        "content": "<p>So, I have a theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">class_equation</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n      <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">conjugacy_classes</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>and I have proofs that <code>conjugacy_classes G</code> coerces to a fintype, as are all sets in <code>conjugacy_classes G</code>. How do I tell Lean that those proofs exist, so I can use ∑ and <code>fintype.card x</code> in the statement of the theorem?</p>",
        "id": 215200932,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604163982
    },
    {
        "content": "<p>Do you have <code>instance : fintype (conjugacy_classes G)</code> somewhere?</p>",
        "id": 215201019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604164119
    },
    {
        "content": "<p>I don't know what you mean by \"coerces to a fintype\"</p>",
        "id": 215201023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604164134
    },
    {
        "content": "<p>Note that <code>∑ x in foo</code> is summing over a <code>finset</code>, whereas <code>∑ x : foo</code> is summing over a <code>Type</code> (and there must be an instance of <code>fintype foo</code>).</p>",
        "id": 215201043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604164194
    },
    {
        "content": "<p>Note that there is also <code>finset.card</code>, if you are taking the cardinality of a <code>finset</code>.</p>",
        "id": 215201112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604164260
    },
    {
        "content": "<p>Well, what I have is a proof that, under certain conditions, there exists an instance of <code>fintype (conjugacy_classes G)</code>. I'm not entirely sure how to write a dependent instance like that; do I have to define a structure for it, maybe?</p>",
        "id": 215201144,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604164323
    },
    {
        "content": "<p>and by \"coerces to a fintype\" I just mean <code>fintype ↥(conjugacy_classes G)</code></p>",
        "id": 215201553,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604164817
    },
    {
        "content": "<p>I don't understand the question. Are you asking how to make a term of that type, or saying you can make a term of that type?</p>",
        "id": 215201597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604164899
    },
    {
        "content": "<p>I'm saying I can make a term of that type, but not always; so my ability to coherently state my theorem is conditional.</p>",
        "id": 215201651,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604164935
    },
    {
        "content": "<p>Which actually sounds pretty 'just make a dedicated structure'-ish to me, except that I seem to have accidentally gotten it working ...</p>",
        "id": 215201656,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604164954
    },
    {
        "content": "<p>but now I want to know <em>why</em> this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">class_equation</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n      <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">conjugacy_classes</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215201662,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604164971
    },
    {
        "content": "<p>We can't answer that without more context.</p>",
        "id": 215201954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165332
    },
    {
        "content": "<p>You'll need to link to a file with more code.</p>",
        "id": 215201958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165345
    },
    {
        "content": "<p>that's an mwe lol</p>",
        "id": 215202037,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165461
    },
    {
        "content": "<p>or almost</p>",
        "id": 215202040,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">fin_group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conjugacy_classes</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">group.conjugates</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nontrivial_conjugacy_classes</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">conjugacy_classes</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">nontrivial</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">class_equation</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin_group</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n      <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nontrivial_conjugacy_classes</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215202043,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165467
    },
    {
        "content": "<p>there, that's an mwe</p>",
        "id": 215202049,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165476
    },
    {
        "content": "<p>I have no idea why this works and I'm vaguely suspicious it shouldn't</p>",
        "id": 215202056,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165495
    },
    {
        "content": "<p>Lean knows that <code>s : set X</code> and <code>[fintype X]</code> implies <code>[fintype s]</code></p>",
        "id": 215202121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165580
    },
    {
        "content": "<p>Are you using VS code?</p>",
        "id": 215202130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165589
    },
    {
        "content": "<p>If so, you can explore your statement with the widgets in the infoview.</p>",
        "id": 215202141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165606
    },
    {
        "content": "<p>Click on the <code>\\sum</code> symbol, and then click on <code>finset.univ</code></p>",
        "id": 215202147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165621
    },
    {
        "content": "<p>You'll see <code>subtype.fintype</code> show up in a pop-up window.</p>",
        "id": 215202191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165645
    },
    {
        "content": "<p>You put <code>open_locale classical</code> so now sanity prevails and everything which is obviously finite classically is known to be finite in lean</p>",
        "id": 215202194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604165652
    },
    {
        "content": "<p>If you want it to break, add <code>@[irreducible]</code> before one of the defs.</p>",
        "id": 215202235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604165722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ahh, okay. That would make sense. I had kind of gotten used to having it off</p>",
        "id": 215202238,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165737
    },
    {
        "content": "<p>and yeah I've been wandering around my file in VS Code but wasn't really getting anywhere</p>",
        "id": 215202301,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604165778
    },
    {
        "content": "<p>By the way, regarding your earlier question about proving that <code>congugacy_classes</code> is finite, you can express it as <code>finset.image group.conjugates_finset finset.univ</code> provided that <code>G</code> has decidable equality</p>",
        "id": 215202757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604166375
    },
    {
        "content": "<p>where <code>group.conjugates_finset a</code> is defined as <code>finset.image (\\lam g, g^-1 * a * g) finset.univ</code></p>",
        "id": 215202787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604166449
    }
]