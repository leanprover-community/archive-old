[
    {
        "content": "<p>Hi,<br>\nI failed to build lean 3 from source on Fedora 30. It seems that the reason is GCC 9.1.<br>\nMore precisely, the code compiles with many warnings, then crashes every time.</p>",
        "id": 170801039,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563043891
    },
    {
        "content": "<p>That's strange, it works for me with GCC 9.1.0 on Arch Linux. Is it the community version (<a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a>)?</p>",
        "id": 170801557,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563044756
    },
    {
        "content": "<p>I tried both 3.4.2 and community version. I'll try <code>git clean</code>, then recompile.</p>",
        "id": 170802356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563046085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Do you get a lot of warnings?</p>",
        "id": 170802449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563046314
    },
    {
        "content": "<p>I get a lot of <code>-Wdeprecated-copy</code>, but the built binary works fine. Possibly Fedora has a different set of libraries that break something.</p>",
        "id": 170802514,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563046435
    },
    {
        "content": "<p>I also get -Wpessimizing-move</p>",
        "id": 170802564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563046525
    },
    {
        "content": "<p>(still compiles)</p>",
        "id": 170802569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563046556
    },
    {
        "content": "<p>Yeah, I also get a few of <code>-Wpessimizing-move</code>.</p>",
        "id": 170802609,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563046586
    },
    {
        "content": "<p>Here is the error:</p>\n<div class=\"codehilite\"><pre><span></span>/home/urkud/projects/lean3/library/init/meta/tactic.lean: parsing at line 1399terminate called after throwing an instance of &#39;lean::exception&#39;\n  what():  vm check failed: is_composite(o) (possibly due to incorrect axioms, or sorry)\n</pre></div>",
        "id": 170803431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563048207
    },
    {
        "content": "<p>I've seen that one before. I'm not sure exactly why it happens. For me removing the Lean folder, downloading from git again and rebuilding fixed it. Sorry I don't have a cleaner possible solution!</p>",
        "id": 170803478,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563048301
    },
    {
        "content": "<p>(It seemed to have something to do with the built .olean files under lean/library/ being corrupted, but don't quote me on it).</p>",
        "id": 170803539,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563048448
    },
    {
        "content": "<p><code>git clean -fdx</code> removed all <code>.olean</code> files</p>",
        "id": 170803989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049359
    },
    {
        "content": "<p>Actually, I fixed this somehow a few months ago (or just got lucky after one more recompile), and use this lean binary since then. Probably I'll try to fix (most of) the warning and see if it fixes compilation.</p>",
        "id": 170804042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049453
    },
    {
        "content": "<p>BTW, writing outside of the build directory is supposed to be a bad idea, and lean cmake script does it (instead of, e.g., copying <code>lean/library</code> to the build directory).</p>",
        "id": 170804055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049516
    },
    {
        "content": "<p>This is a bad idea because different build directories are no longer independent. E.g., I can't try different compilers/flags in different build directories and be sure that they do not interfere with each other.</p>",
        "id": 170804104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049574
    },
    {
        "content": "<p>I've made an issue for this in <a href=\"https://github.com/leanprover-community/lean/issues/62\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/62\">https://github.com/leanprover-community/lean/issues/62</a> .</p>",
        "id": 174351336,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1566989917
    },
    {
        "content": "<p>Can you guys setup a travis build that will reproduce the problem? Is it specific to Linux or will it crash also on Mac and Windows?</p>",
        "id": 174354617,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566993490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> It already fails in the AppVeyor MinGW build, for example <a href=\"https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/27002887/job/pkp6cl1q3t4wf5xk\" target=\"_blank\" title=\"https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/27002887/job/pkp6cl1q3t4wf5xk\">https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/27002887/job/pkp6cl1q3t4wf5xk</a></p>",
        "id": 174362662,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1566999406
    },
    {
        "content": "<p>Ok but there are changes in that branch. Without the changes, I think it's still working</p>",
        "id": 174363031,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566999637
    },
    {
        "content": "<p>There are changes, but your own PR from 24 days ago <a href=\"https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/26836597/job/a0p7ulnskt0e1arb\" target=\"_blank\" title=\"https://ci.appveyor.com/project/cipher1024/lean-e5aoi/builds/26836597/job/a0p7ulnskt0e1arb\">fails with the same error</a> despite changing completely different things. In the bug report I also mention that I get this error on a fresh <code>master</code>.  This makes me semi-confident that new GCC (which MinGW also uses) started doing something Lean doesn't like. Either it's UB in Lean, or an incorrect optimization in GCC. I will also try clang++ on my laptop and see if it works</p>",
        "id": 174363438,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1566999911
    },
    {
        "content": "<p>what's UB?</p>",
        "id": 174363645,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567000036
    },
    {
        "content": "<p>undefined behavior</p>",
        "id": 174363774,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1567000103
    },
    {
        "content": "<p>Ok, I'll see what happens when I revert my changes and then we can start looking at removing the warnings</p>",
        "id": 174363955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567000232
    },
    {
        "content": "<p>Note this is probably a bug in Lean proper, and not the community fork, because I also reliably see it when building <a href=\"http://github.com/leanprover/lean\" target=\"_blank\" title=\"http://github.com/leanprover/lean\">github.com/leanprover/lean</a> . (See <a href=\"https://ci.appveyor.com/project/leodemoura/lean/build/job/jmxe5g5ywklbaofr\" target=\"_blank\" title=\"https://ci.appveyor.com/project/leodemoura/lean/build/job/jmxe5g5ywklbaofr\">https://ci.appveyor.com/project/leodemoura/lean/build/job/jmxe5g5ywklbaofr</a> )</p>",
        "id": 174364087,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567000312
    },
    {
        "content": "<p><code>lean --make</code> just segfaults for me on <code>library/</code> when built by Clang 8.0.1. I'll stick to GCC for now</p>",
        "id": 174364942,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567000837
    },
    {
        "content": "<p><a href=\"https://ci.appveyor.com/project/leodemoura/lean/history\" target=\"_blank\" title=\"https://ci.appveyor.com/project/leodemoura/lean/history\">The appveyor build history</a> (for <code>leanprover/lean</code>) shows that the nightly builds started failing Aug 1. It looks like that's when GCC was changed <a href=\"https://ci.appveyor.com/project/leodemoura/lean/builds/26389340/job/hdj3e9hge6tg3y05?fullLog=true#L44\" target=\"_blank\" title=\"https://ci.appveyor.com/project/leodemoura/lean/builds/26389340/job/hdj3e9hge6tg3y05?fullLog=true#L44\">from 8.2.0</a> to <a href=\"https://ci.appveyor.com/project/leodemoura/lean/builds/26417837/job/5r3twj6en27xru3d?fullLog=true#L44\" target=\"_blank\" title=\"https://ci.appveyor.com/project/leodemoura/lean/builds/26417837/job/5r3twj6en27xru3d?fullLog=true#L44\">9.1.0</a> . And that's presumably due to the update to MSYS2 <a href=\"https://www.appveyor.com/updates/2019/08/01/\" target=\"_blank\" title=\"https://www.appveyor.com/updates/2019/08/01/\">here</a>.</p>",
        "id": 174365305,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1567001074
    },
    {
        "content": "<p>If there is UB in lean, I wonder if we can tame the nasal demons to prove false in paranoid mode</p>",
        "id": 174381777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567011670
    },
    {
        "content": "<p>I don't know about GCC, but LLVM 8 is known to miscompile Lean due to <a href=\"https://bugs.llvm.org/show_bug.cgi?id=40044\" target=\"_blank\" title=\"https://bugs.llvm.org/show_bug.cgi?id=40044\">https://bugs.llvm.org/show_bug.cgi?id=40044</a></p>",
        "id": 174382100,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567011895
    },
    {
        "content": "<p>This was a little ridiculous to debug since minute changes like adding print statements make the code compile correctly, but the bug is this:<br>\nThe <code>vm_obj_cell::dealloc</code> code has a <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm.cpp#L301\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm.cpp#L301\">switch statement</a> which calls the right function to <code>dealloc</code> a <code>vm_obj_cell</code> depending on its kind. Two of these kinds are together called \"composites\":  <code>inline bool is_composite(vm_obj_cell const * o) { return is_constructor(o) || is_closure(o); }</code> and are both deallocated with <code>to_composite(it)-&gt;dealloc(todo)</code>. The code looks correct to me, but it gets compiled to:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"c1\">// vm_obj_kind::Constructor</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kr\">__int8</span><span class=\"p\">)</span><span class=\"n\">o</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span> <span class=\"p\">)</span>\n          <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_check_failed</span><span class=\"p\">(</span><span class=\"s\">&quot;to_composite: is_composite(o)&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_composite</span><span class=\"o\">::</span><span class=\"n\">dealloc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"o\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj_cell</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">todo</span><span class=\"p\">);</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"k\">case</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"c1\">// vm_obj_kind::Closure</span>\n        <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_check_failed</span><span class=\"p\">(</span><span class=\"s\">&quot;to_composite: is_composite(o)&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>where the <code>Closure</code> branch incorrectly goes straight to failure without checking the <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm.h#L51\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm.h#L51\"><code>LEAN_VM_IS_PTR</code></a> tag on the <code>vm_obj_cell* o</code> pointer. I tried adding <code>alignas(2)</code> to <code>class vm_obj_cell</code> but no dice. At this point I'm not sure if Lean is abusing the pointer-int conversions (which are sometimes UB) or if some optimization in GCC incorrectly figures that  <code>o</code> is always odd.</p>",
        "id": 174388922,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567016965
    },
    {
        "content": "<p>Although it crashes there, the problem might appear earlier. I suggest you try addressing the warnings first and see if anything gets fixed. Because of the new features of C++11 and so on, I wouldn't be surprised if misusing them in subtle ways would result in code whose behavior varies between compilers</p>",
        "id": 174389540,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567017447
    },
    {
        "content": "<p>Yeah, I agree. I've started looking through the warnings.</p>",
        "id": 174389725,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567017587
    },
    {
        "content": "<p>Sadly nothing useful comes out of <code>-Wall -Wextra -Wpedantic</code>, I'll try making an MWE.</p>",
        "id": 174399481,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567025000
    },
    {
        "content": "<p>It would be nice to know which test or which file in <code>library/</code> makes Lean fail and which ones do not</p>",
        "id": 174399577,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567025061
    },
    {
        "content": "<p>It fails on <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/hole_command.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/hole_command.lean\">init/meta/hole_command.lean</a>, but I think that's probably just the first place in the library that exercises deallocation on closures.</p>",
        "id": 174400004,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567025403
    },
    {
        "content": "<p>You might want to create a custom <code>.lean</code> file and add one ingredient at a time from <code>hole_command.lean</code> to see what does it</p>",
        "id": 174400348,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567025660
    },
    {
        "content": "<p>I don't think the issue is with that line of code exactly, and AFAICT it's not UB, but the general type-punning scheme implemented with <code>LEAN_VM_IS_PTR</code> is implementation-defined. According to <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.reinterpret.cast#5\" target=\"_blank\" title=\"https://timsong-cpp.github.io/cppwp/n4659/expr.reinterpret.cast#5\">the standard</a>, casting <code>uintptr_t -&gt; T* -&gt; uintptr_t</code> is not guaranteed to be the identity, and in particular GCC is allowed to assume that every element of the type <code>T*</code> is aligned, which may have something to do with this optimization</p>",
        "id": 174407303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567031802
    },
    {
        "content": "<p>I just posted an update on the GitHub issue, but the gist of is that the following code, derived directly from bits of <code>vm.cpp</code> doesn't do what it should when compiled by GCC 9.1.0 with at least <code>-O2</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstddef&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cstdint&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">enum</span> <span class=\"k\">class</span> <span class=\"nc\">foo_kind</span> <span class=\"p\">{</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span> <span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"nf\">alignas</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"n\">foo</span> <span class=\"p\">{</span>\n    <span class=\"n\">foo_kind</span> <span class=\"n\">m_kind</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">foo_kind</span> <span class=\"nf\">kind_</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">uintptr_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">m_kind</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"n\">A</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">is_bc</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">kind_</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"n\">B</span> <span class=\"o\">||</span> <span class=\"n\">kind_</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">);</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">always_inline</span><span class=\"p\">))</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">loop_if_bc</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">__builtin_expect</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">is_bc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"k\">throw</span> <span class=\"s\">&quot;what&quot;</span><span class=\"p\">;</span> <span class=\"c1\">// Should never be thrown if loop_if_bc is called only with B/C kind foos.</span>\n                      <span class=\"c1\">// But with GCC, it&#39;s *always* thrown.</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">m_kind</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"nl\">A</span><span class=\"p\">:</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"nl\">B</span><span class=\"p\">:</span> <span class=\"n\">loop_if_bc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"nl\">C</span><span class=\"p\">:</span> <span class=\"n\">loop_if_bc</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">foo</span> <span class=\"n\">obj</span> <span class=\"p\">{</span> <span class=\"n\">foo_kind</span><span class=\"o\">::</span><span class=\"n\">C</span> <span class=\"p\">};</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obj</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 174408531,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567033123
    },
    {
        "content": "<p>Note that for the LSB check to fail, GCC would have to assume that all <code>foo</code>s are <em>not</em> aligned, and have odd addresses.</p>",
        "id": 174408786,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567033346
    },
    {
        "content": "<p>According to the compiler explorer, this bug exists in 9.1 and 9.2 and is fixed in GCC trunk</p>",
        "id": 174410838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567035580
    },
    {
        "content": "<p>Wow, lean found a gcc bug. It's growing up so fast. :P</p>",
        "id": 174523668,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567152224
    },
    {
        "content": "<p>Wait until Lean 6 autogenerate a certified GCC</p>",
        "id": 174523875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567152379
    },
    {
        "content": "<p>I guess we can't really say it found a bug if it's already fixed in trunk</p>",
        "id": 174523918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567152460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85764\" target=\"_blank\" title=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85764\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85764</a></p>",
        "id": 174524369,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567152937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I wish I had a gcc issue which had status <code>RESOLVED FIXED</code> :)<br>\nIsn't that the pinnacle of CS achievement?</p>",
        "id": 174525939,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567154350
    },
    {
        "content": "<p>It may be so only until it turns out Lean 4 is faster than gcc.</p>",
        "id": 174526018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567154412
    },
    {
        "content": "<p>Well, we're using clang by default, which <em>is</em> faster than GCC in quite a few benchmarks...</p>",
        "id": 174526174,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567154561
    },
    {
        "content": "<p>(I hope you're not talking about the compile times because let's not talk about those...)</p>",
        "id": 174526214,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567154603
    },
    {
        "content": "<p>You mean Lean code gets compiled to C++ code which is then compiled by clang which is faster than GCC?</p>",
        "id": 174526239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567154634
    },
    {
        "content": "<p>Who cares about compile time?</p>",
        "id": 174526285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567154645
    },
    {
        "content": "<p>I think to C, actually</p>",
        "id": 174526292,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567154661
    },
    {
        "content": "<p>Incidentally, why the switch Sebastian?</p>",
        "id": 174526303,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567154677
    },
    {
        "content": "<p>Users don't care (unless you include interactive proof checking speed in compile time)</p>",
        "id": 174526307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567154680
    },
    {
        "content": "<blockquote>\n<p>Incidentally, why the switch Sebastian?</p>\n</blockquote>\n<p>Because it's faster</p>",
        "id": 174527052,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567155358
    },
    {
        "content": "<p>To compile or run?</p>",
        "id": 174527196,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567155481
    },
    {
        "content": "<p>Which C++ features were you using</p>",
        "id": 174527242,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567155494
    },
    {
        "content": "<p>Oh, you mean the switch from C++ to C. It's faster to compile, yes. We were only using C++ because the runtime header was written in it, but it's now all C.</p>",
        "id": 174527680,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1567155954
    },
    {
        "content": "<p>Cool</p>",
        "id": 174527838,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567156083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> re it being fixed, i asked the gcc devs about it, and the fix seems to be more or less accidental. So probably a real bug :)</p>",
        "id": 174533533,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1567162137
    }
]