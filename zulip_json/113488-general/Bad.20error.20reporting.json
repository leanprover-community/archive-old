[
    {
        "content": "<p>Can someone understand why the following code doesn't raise an error on the expected line but rather claims to have solved the goal and puts an error on the example line?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">@[interactive]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bug</span> <span class=\"o\">(</span><span class=\"n\">pe</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"at\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pe'</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">pe</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">pe'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">e</span> <span class=\"o\">[</span><span class=\"n\">e'</span><span class=\"o\">],</span>\n  <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.exact</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hRP</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">bug</span> <span class=\"n\">hRP</span> <span class=\"n\">at</span> <span class=\"n\">hQ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223197332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 223197402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044325
    },
    {
        "content": "<p>because you built a bad term</p>",
        "id": 223197702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044554
    },
    {
        "content": "<p>you basically wrote <code>exact hRP hQ</code></p>",
        "id": 223197712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044565
    },
    {
        "content": "<p>You never typechecked <code>proof</code>, so there is no error</p>",
        "id": 223197748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044600
    },
    {
        "content": "<p>I know why term I constructed. If I type <code>exact hRP hQ</code> I do get the expected error.</p>",
        "id": 223197830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044645
    },
    {
        "content": "<p>Did you see how the error is displayed with my code?</p>",
        "id": 223197857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044665
    },
    {
        "content": "<p>the expr constructors don't check their arguments (how could they, the function is pure) and antiquoting an expr into a pexpr doesn't typecheck it either for performance reasons, it just uses <code>infer_type</code> on it to figure out how it fits in</p>",
        "id": 223197868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044675
    },
    {
        "content": "<p>I think if you use <code>infer_type</code> on <code>hRP hQ</code> you get <code>P</code> so everything looks ok and exact accepts it</p>",
        "id": 223197915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044711
    },
    {
        "content": "<p>But I run <code>tactic.exact</code> in my code, isn't this type-checking?</p>",
        "id": 223197922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044716
    },
    {
        "content": "<p>Yes, I noticed that adding an <code>infer_type</code> doesn't fix things.</p>",
        "id": 223197938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044737
    },
    {
        "content": "<p>It's doing <code>i_to_expr</code> first, which will give an error at <code>hRP hQ</code></p>",
        "id": 223197943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044739
    },
    {
        "content": "<p>In other words, it is in the conversion from pexpr to expr that local application constraints are checked</p>",
        "id": 223198004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044769
    },
    {
        "content": "<p>once you have an expr the assumption is that this term is internally coherent</p>",
        "id": 223198021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044784
    },
    {
        "content": "<p>if you use <code>mk_app</code> it will also typecheck the application</p>",
        "id": 223198060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044814
    },
    {
        "content": "<p><code>mk_app</code> is not an option, it expects a name</p>",
        "id": 223198107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044849
    },
    {
        "content": "<p>(that would work in this example but not in my real use case)</p>",
        "id": 223198118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611044863
    },
    {
        "content": "<p>Here's a low tech solution if you just need a single application:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">expr.pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">infer_type</span> <span class=\"n\">e'</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 223198275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611044984
    },
    {
        "content": "<p>Thanks, but I need to handle several arguments in general.</p>",
        "id": 223198473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611045119
    },
    {
        "content": "<p>well you can do that multiple times</p>",
        "id": 223198523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_expr_app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">expr.pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">infer_type</span> <span class=\"n\">e'</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">mk_expr_app</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 223198605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045242
    },
    {
        "content": "<p>(this should really be a C++ function though)</p>",
        "id": 223198684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045283
    },
    {
        "content": "<p>Thanks! I was writing it, but obviously you are much faster.</p>",
        "id": 223198740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611045353
    },
    {
        "content": "<p>unlike <code>mk_app</code> that won't do anything special with implicit arguments</p>",
        "id": 223198834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045409
    },
    {
        "content": "<p>but you can create a metavariable and put it in the list if you want one</p>",
        "id": 223198851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045437
    },
    {
        "content": "<p>Apparently there's <code>tactic.interactive.mk_mapp'</code> which is misnamed in various ways, undocumented, and in the wrong file, but I think does the same thing!</p>",
        "id": 223199304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611045838
    },
    {
        "content": "<p>oh yeah that's a bit more robust than the version I just gave</p>",
        "id": 223199418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611045921
    },
    {
        "content": "<p>Thanks Rob!</p>",
        "id": 223199430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611045933
    },
    {
        "content": "<p>(A PR to move, rename, and document this would be fine. I just found it with <code>#find</code>.)</p>",
        "id": 223199527,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611045986
    },
    {
        "content": "<p>wow I didn't know <code>#find</code> was actually good at finding anything</p>",
        "id": 223199557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611046016
    },
    {
        "content": "<p>It's great for things like this. Much better for defs than theorems because you usually know the exact type</p>",
        "id": 223199628,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611046058
    },
    {
        "content": "<p><code>#find expr → list expr → tactic expr</code></p>",
        "id": 223199703,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611046088
    },
    {
        "content": "<p>I was talking to Cyril Cohen last week and he said that one reason he liked Coq more than Lean was that Coq's version of #find was so much quicker than Lean's, and I resisted the urge to say \"if you're using #find, you're doing it wrong\". I too had essentially forgotten that this existed!</p>",
        "id": 223202521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611048049
    },
    {
        "content": "<p>I think that writing a good <code>find</code> would be an excellent exercise for people interested in Lean 4 programming, and a very useful asset.</p>",
        "id": 223204997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611049672
    },
    {
        "content": "<p>Continuing the conversation about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.mk_mapp'\">docs#tactic.interactive.mk_mapp'</a>, I'd be very grateful if a meta-guru could make a version of this tactic that takes a list of <code>pexpr</code> for the function arguments, and elaborate them only when trying to put them inside the function. The current version can lead of bad elaboration.</p>",
        "id": 223834978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611521523
    },
    {
        "content": "<p>What type of elaboration do you need? There are several variants of <code>to_expr</code>. This is the most naive conversion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_mapp_aux_pexpr'</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">infer_type</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">fn</span> <span class=\"bp\">←</span> <span class=\"n\">head_beta</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n   <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate_var</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n   <span class=\"n\">mk_mapp_aux_pexpr'</span> <span class=\"n\">fn</span> <span class=\"n\">t</span> <span class=\"n\">as</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">fn</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_mapp_pexpr'</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">fn</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span><span class=\"o\">,</span>\n   <span class=\"n\">mk_mapp_aux_pexpr'</span> <span class=\"n\">fn</span> <span class=\"n\">t</span> <span class=\"n\">args</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n</code></pre></div>",
        "id": 223847461,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611538051
    },
    {
        "content": "<p>Thank you very much Yakov, this seems to help.</p>",
        "id": 223932683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611596155
    },
    {
        "content": "<p>I'm interested to know, will the following work in your case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_mapp_pexpr''</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">mmap</span> <span class=\"n\">to_expr</span> <span class=\"n\">args</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_mapp'</span> <span class=\"n\">fn</span>\n</code></pre></div>",
        "id": 223933144,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611596367
    },
    {
        "content": "<p>Or does that not work because the elaboration occurs prior to and without the <code>expr.pi</code> resolving?</p>",
        "id": 223933268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611596409
    },
    {
        "content": "<p>Actually I would also need a stupid version that does no elaboration or type checking at all. Isn't it possible to make a function<br>\n<code>pexpr -&gt; list pexpr -&gt; pexpr</code> which simply applies the first <code>pexpr</code>to all elements of the list?</p>",
        "id": 224035848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611666681
    },
    {
        "content": "<p>That's just <code>expr.mk_app</code></p>",
        "id": 224035920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611666719
    },
    {
        "content": "<p>I'm not sure if it's generic over <code>expr tt</code> and <code>expr ff</code> but if not you can just copy the implementation</p>",
        "id": 224036077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611666756
    }
]