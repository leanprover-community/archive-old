[
    {
        "content": "<p>I'm trying to write a small metaprogram that finds an instance of <code>tgt : expr</code>, and being able to use an instance of <code>cond : expr</code>.</p>\n<p>For example, I might want to find an \"instance\" of <code>semigroup α → has_mul α</code>.</p>\n<p>Here is what I tried, but the printed expressions look very wrong. </p>\n<ul>\n<li>Am I doing something wrong?</li>\n<li>Is there a better way of doing this?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">universe</span> <span class=\"kn\">variable</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"c\">/-</span><span class=\"cm\"> finds an instance of an implication `cond → tgt`.</span>\n<span class=\"cm\">  Returns a pair of a local constant `e` of type `cond`, and an instance of `tgt` that can mention `e`. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_conditional_instance</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"n\">f</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">assertv</span> <span class=\"bp\">`</span><span class=\"n\">c</span> <span class=\"n\">cond</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n<span class=\"n\">reset_instance_cache</span><span class=\"o\">,</span>\n<span class=\"n\">inst</span> <span class=\"err\">←</span> <span class=\"n\">mk_instance</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">pformat</span><span class=\"bp\">!</span><span class=\"s2\">&quot;({e} : {infer_type e})&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;raw local type of {e}: {e.local_type.to_raw_fmt}&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">pformat</span><span class=\"bp\">!</span><span class=\"s2\">&quot;({inst} : {infer_type inst})&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">pformat</span><span class=\"bp\">!</span><span class=\"s2\">&quot;({inst.bind_lambda e} : {infer_type $ inst.bind_lambda e})&quot;</span><span class=\"o\">,</span>\n<span class=\"n\">type_check</span> <span class=\"n\">inst</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">mk_conditional_instance</span>\n    <span class=\"o\">((</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">semigroup</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">],</span>\n  <span class=\"n\">trace</span> <span class=\"n\">pformat</span><span class=\"bp\">!</span><span class=\"s2\">&quot;({g} : {infer_type g})&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">pformat</span><span class=\"bp\">!</span><span class=\"s2\">&quot;({g.bind_lambda f} : {infer_type $ g.bind_lambda f})&quot;</span>\n</code></pre></div>",
        "id": 204466228,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595273806
    },
    {
        "content": "<p>I get expressions that look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span> <span class=\"n\">α</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Here <code>1</code> is <code>const 1 []</code>, which is the <code>local_type</code> of the local constant <code>e</code>.</p>",
        "id": 204466749,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595274093
    },
    {
        "content": "<p><code>1</code> should be <code>semigroup α</code>, which is what I get if I run <code>infer_type e</code> (but not if I run <code>infer_type `inst.bind_lambda e</code>)</p>",
        "id": 204466868,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595274154
    },
    {
        "content": "<p><code>local_type</code> is useless precisely because of this issue. (The docs for <code>expr</code> mention this.) You need to use <code>infer_type</code> to get the type of a local const or mvar.</p>",
        "id": 204466946,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595274200
    },
    {
        "content": "<p>But <code>bind_lambda</code> puts this useless field in my expression. What should I be using instead of <code>bind_lambda</code>?</p>",
        "id": 204467235,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595274345
    },
    {
        "content": "<p>I don't know if my expression is incorrect, or that this is still an issue of \"the pretty printer is showing the wrong thing\". I suspect the former.</p>",
        "id": 204467692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595274592
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.lambdas\">docs#tactic.lambdas</a> which I believe is a tactic mode version of <code>bind_lambda</code></p>",
        "id": 204469204,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595275385
    },
    {
        "content": "<p>That looks a lot better. I will try that. Thanks!</p>",
        "id": 204469711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595275675
    },
    {
        "content": "<p>That indeed solved my problem.</p>",
        "id": 204470483,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595276068
    },
    {
        "content": "<p>Ah that's what those variants are for! Thanks Rob, now I can kill my workaround for this issue.</p>",
        "id": 204478635,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595280558
    }
]