[
    {
        "content": "<p>I can't make progress with the following goals, maybe I am missing something to reason with strings. Any idea? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">5</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">ir</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hasChild\"</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"s2\">\"hasChild\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"hasChild\"</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">ir</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hasChild\"</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ic</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"man\"</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"s2\">\"man\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"woman\"</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">ir</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hasChild\"</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ic</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"man\"</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"s2\">\"man\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"man\"</span><span class=\"n\">a</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">interp</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Every</span> <span class=\"o\">(</span><span class=\"n\">Role.Atomic</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hasChild\"</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Atomic</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"s2\">\"man\"</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>I am trying to formalize the basic idea of the interpretation of a description logic called ALC. Complete code at <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L100\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L100</a></p>",
        "id": 225832166,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1612962163
    },
    {
        "content": "<p><code>dec_trivial</code> will prove things like <code>¬\"man\" = \"woman\"</code>. Unless you're redefined negation, I hope you can't prove <code>¬\"hasChild\" = \"hasChild\"</code>!</p>",
        "id": 225840621,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1612966280
    },
    {
        "content": "<p><code>h1</code> before that goal looks like it could provide <code>b ∈ ∅</code> which is false, so it may be provable after all.</p>",
        "id": 225843128,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612967232
    },
    {
        "content": "<p>I changed my code for using inductive types instead of strings. With this new formalization, I made some progress. But I am now in a situation that may suggest the interpretation of concepts should be changed... My current open goal is below. It is clear that for n=1 and b=2, hypothesis h1 is true. I can even instantiate h1 to h2 with the right number. But now I have a true hypothesis that doesn't depend on the <code>n=1</code>... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">},</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L106\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L106</a> is the open goal. Another question is how <code>finish</code> magically solves the goal below in <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L117\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L117</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">i.δ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∧</span> <span class=\"n\">n2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 225852213,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1612970781
    },
    {
        "content": "<p>Your second question can be answered with <code>show_term</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225856128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612972320
    },
    {
        "content": "<p>Looking at that messy output, it turns out that <code>exact nat.one_ne_bit0 _ h</code> is the short proof (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.one_ne_bit0\">docs#nat.one_ne_bit0</a>)</p>",
        "id": 225856343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612972399
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , but quite unnatural, right?</p>",
        "id": 225857816,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1612972874
    },
    {
        "content": "<p>Well, you could also prove it by repeatedly subtracting until you have succ_ne_zero. as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.succ_ne_zero</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_injective</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>I'm not sure what you mean by unnatural.</p>",
        "id": 225858253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612972949
    },
    {
        "content": "<p>For your first question: <code>h2</code> is trivially true and the goal isn't provable, e.g. evaluate it at <code>n = 3</code>. For your second question: <code>norm_num at hb1</code></p>",
        "id": 225860637,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1612973490
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 225862742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973953
    },
    {
        "content": "<p>oh there's a link at the end</p>",
        "id": 225862921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612973984
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">interp</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Every</span> <span class=\"o\">(</span><span class=\"n\">Role.Atomic</span> <span class=\"n\">ar.hasChild</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Concept.Atomic</span> <span class=\"n\">ac.man</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">4</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">,</span> <span class=\"n\">r_interp</span><span class=\"o\">,</span> <span class=\"n\">ir</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">H</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩),</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225865497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612974592
    },
    {
        "content": "<p>However this probably isn't the theorem you wanted to prove</p>",
        "id": 225865726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612974642
    },
    {
        "content": "<p>but I don't know enough about your description logic to suggest fixes</p>",
        "id": 225865845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612974670
    },
    {
        "content": "<p>Also you have too many things marked <code>reducible</code>. None of those definitions should be reducible; definitions by pattern matching should never be reducible</p>",
        "id": 225866428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612974807
    },
    {
        "content": "<blockquote>\n<p>None of those definitions should be reducible; definitions by pattern matching should never be reducible</p>\n</blockquote>\n<p>Why's that?</p>",
        "id": 225867602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612975176
    },
    {
        "content": "<p>Because the only thing it can reduce to is an equation compiler mess</p>",
        "id": 225867660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612975194
    },
    {
        "content": "<p>Actually, looking at your definitions, it seems like this result is correct: <code>Every hasChild man</code> seems to mean the collection of all people such that every child of theirs is a man, and since the men are <code>2,4</code>, the women are <code>1,3</code> and <code>2</code> is a child of <code>1</code> and <code>3</code> a child of <code>4</code>, the only person for which the predicate fails is <code>4</code> (all the nonbinaries at &gt;4 have no children so the concept is also satisfied for them)</p>",
        "id": 225868145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612975324
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I don't understand the <code>bit0</code>, I didn't find any documentation about it. Besides that, it seems that the fact that 1=4 is also should not depend on a bit representation of naturals. In other words, the second proof you suggest  is entirely in the level of abstraction that I would expect: naturals, successor, the fact that succ is injective etc. </p>\n<p>BTW, what is <code>succ.inj</code> in the theorem <code>succ_injective</code>? I didn't find the definition of it (go to definition didn't find it).  But yes, thank you so much for helping me to make sense of this (now obvious!) proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"c1\">-- if succ 0 = succ 3 then 0 = 3 because succ is injective</span>\n <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_injective</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n <span class=\"n\">apply</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">h1.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225868964,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1612975608
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit0\">docs#bit0</a> has a \"&gt; equations\" toggle you can expand</p>",
        "id": 225869243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612975674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20with.20strings/near/225867660\">said</a>:</p>\n<blockquote>\n<p>Because the only thing it can reduce to is an equation compiler mess</p>\n</blockquote>\n<p>Is this really true?  I still remember the time when unification produced brec_on, but this has been fixed a long long time ago now.</p>",
        "id": 225869362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612975692
    },
    {
        "content": "<p><code>succ.inj</code> is autogenerated - all inductive type constructors are axiomatically injective (I think?)</p>",
        "id": 225869449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612975721
    },
    {
        "content": "<blockquote>\n<p>it seems that the fact that 1=4 is also should not depend on a bit representation of naturals.</p>\n</blockquote>\n<p>Lean is proof-irrelevant - facts are never dependent on how you choose to prove them</p>",
        "id": 225869605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612975763
    },
    {
        "content": "<p>But if you choose to prove equality of naturals using bit0/bit1 instead of zero/succ, you only need <code>log2 n</code> steps instead of <code>n</code> steps to do so</p>",
        "id": 225869797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612975813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20with.20strings/near/225869362\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20with.20strings/near/225867660\">said</a>:</p>\n<blockquote>\n<p>Because the only thing it can reduce to is an equation compiler mess</p>\n</blockquote>\n<p>Is this really true?  I still remember the time when unification produced brec_on, but this has been fixed a long long time ago now.</p>\n</blockquote>\n<p>Not really, it seems that lean will just ignore the <code>@[reducible]</code> marker in this case instead of providing a brec_on</p>",
        "id": 225870581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612976094
    },
    {
        "content": "<p>my point is mostly that the annotation does not make any sense</p>",
        "id": 225870663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612976126
    },
    {
        "content": "<p>I will reiterate <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> 's point that the correct way to prove <code>1 != 4</code> is <code>norm_num</code>. it handles all this bit0 stuff for you and doesn't suffer from any exponential time issues like <code>dec_trivial</code></p>",
        "id": 225870901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612976222
    },
    {
        "content": "<p>Yes you can prove it directly using <code>nat.one_ne_bit0</code> but that's just what norm_num uses under the hood, users shouldn't need to interact with numerals on this level of abstraction</p>",
        "id": 225871195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612976335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20with.20strings/near/225869797\">said</a>:</p>\n<blockquote>\n<p>But if you choose to prove equality of naturals using bit0/bit1 instead of zero/succ, you only need <code>log2 n</code> steps instead of <code>n</code> steps to do so</p>\n</blockquote>\n<p>Interesting, I saw the equations, but still, they don't make sense for me. Maybe I am missing the context. How/Why/When they are used.</p>",
        "id": 225874441,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1612977622
    },
    {
        "content": "<p>It's expensive to express numerals in a unary system: <code>4 = 1 + 1 + 1 + 1</code>. It is more efficient to say that <del><code>4 = bit0 (bit1 0)</code></del> <code>4 = bit0 (bit0 1)</code></p>",
        "id": 225874536,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612977665
    },
    {
        "content": "<p>actually <code>bit0 (bit0 1)</code></p>",
        "id": 225874605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612977697
    }
]