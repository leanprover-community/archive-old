[
    {
        "content": "<p>What do you think about something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_simple_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_simple_coe_to_fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_simple_coe_to_fun</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I'm working on partition of unity and I want to make a definition that works both for continuous maps and for smooth maps. It seems that the most natural way is to use something like (yes, it uses the deprecated <code>is_ring_hom</code> class)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_simple_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))]</span>\n</code></pre></div>",
        "id": 230877426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616079486
    },
    {
        "content": "<p>This looks a lot like the thing that <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> posted recently</p>",
        "id": 230878036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616079684
    },
    {
        "content": "<p>If you are interested in changing this, I would suggest to do it in core and backport the Lean 4 definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 230878069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616079699
    },
    {
        "content": "<p>I don't think you need to change anything in the C++ code.  It should work as long as the <code>coe_fn</code> function remains.</p>",
        "id": 230878237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616079743
    },
    {
        "content": "<p>/me is creating a new branch in lean repo</p>",
        "id": 230879230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616080073
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Typeclasses.20for.20morphisms/near/230332072\">This is the thread I'm referring to</a></p>",
        "id": 230880313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616080392
    },
    {
        "content": "<p>I guess your typeclass is a silghtly more general version of <a href=\"https://github.com/leanprover-community/mathlib/blob/eabef9377ffbd89142dedfa1cf309798d645b580/src/algebra/group/hom.lean#L64-L73\">https://github.com/leanprover-community/mathlib/blob/eabef9377ffbd89142dedfa1cf309798d645b580/src/algebra/group/hom.lean#L64-L73</a></p>",
        "id": 230880762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616080465
    },
    {
        "content": "<p>This corresponds pretty well with my <code>hom_class</code> experiments, where my approached used <code>[ring_hom_class F X ℝ]</code> instead of <code>[has_simple_coe_to_fun F X (λ _, ℝ)] [is_ring_hom (λ f : F, (f : X → ℝ))]</code></p>",
        "id": 230884623,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616081698
    },
    {
        "content": "<p>I'm going to backport the Lean 4 classes.</p>",
        "id": 230884631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616081701
    },
    {
        "content": "<p>I don't like the idea that <code>[ring_hom_class]</code> has both data and properties.</p>",
        "id": 230884959,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616081794
    },
    {
        "content": "<p>E.g., for <code>C(X, R)</code> the coercion to functions is defined for any <code>R</code> but it has extra properties if <code>R</code> is a topological monoid/group/ring.</p>",
        "id": 230885076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616081834
    },
    {
        "content": "<p>Is that an issue? For the algebraic hierarchy, there is always an instance for <code>comm_ring (adjoin_root p)</code>. And you need extra assumptions on <code>p</code> to get the <code>field (adjoin_root p)</code> instance.</p>",
        "id": 230885431,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616081955
    },
    {
        "content": "<p>Switching between those two instances does not cause problems in my experience.</p>",
        "id": 230885740,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616082045
    },
    {
        "content": "<p>Not that I have a big objection to making <code>coe_fun</code> an instance parameter to <code>ring_hom_class</code>, except that it would be a bit more to type each time.</p>",
        "id": 230886381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616082244
    },
    {
        "content": "<p>If we don't make <code>[has_one R]</code> an argument for <code>[monoid R]</code>, I don't see why we'd decide to treat <code>[has_fun F]</code> and <code>[monoid_hom_class F]</code> differently.</p>",
        "id": 230886794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616082370
    },
    {
        "content": "<p>Anyway, this can wait till we have a Lean 4-style <code>coe_fn</code></p>",
        "id": 230887329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616082555
    },
    {
        "content": "<p>Is the motivation behind putting this in core instead of mathlib just to make mathport slightly easier?</p>",
        "id": 230888232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616082832
    },
    {
        "content": "<p>Yes.</p>",
        "id": 230888511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616082917
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/lean/issues/557\">lean#557</a> <code>library/init/coe</code> builds but <code>coe_sort</code> doesn't work anymore.</p>",
        "id": 230888631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616082955
    },
    {
        "content": "<p>And I don't understand how to debug it.</p>",
        "id": 230888764,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616082985
    },
    {
        "content": "<p>I was too optimistic with the C++ code.  Two lines needed to be changed.  I've pushed a fix.</p>",
        "id": 230893237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616083963
    },
    {
        "content": "<p>Is there any situation in which the extra flexibility of the old version of <code>coe_fn </code> was even usable? I can't get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">weird_func</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_nat</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">bool.rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">is_nat</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">weird_func</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">weird_func.f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">weird_func</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 230895511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616084809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks! I fixed the rest of the instances, fixing tests.</p>",
        "id": 230905776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616088508
    },
    {
        "content": "<p>How often do we have dependent <code>has_coe_to_fun</code>, where in the <code>has_coe_to_fun _ (λ x, A → B)</code>, the <code>x</code> is actually used?</p>",
        "id": 230911808,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616090659
    },
    {
        "content": "<p>Not often but sometimes we do, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_pmap\">docs#linear_pmap</a></p>",
        "id": 230912167,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616090778
    },
    {
        "content": "<p>Which means that <code>linear_pmap</code> can't work in lean 4?</p>",
        "id": 230912378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616090862
    },
    {
        "content": "<p>Why?</p>",
        "id": 230915538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616092084
    },
    {
        "content": "<p>I think I'm confusing the lean 4 definition with your <code>has_simple_coe_to_fun</code></p>",
        "id": 230918741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616093419
    },
    {
        "content": "<p>Gabriel quoted the Lean 4 definition above.</p>",
        "id": 230929127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616097896
    },
    {
        "content": "<p>BTW, he says that Lean 4 removes <code>coe</code>/<code>coe_fn</code> while elaborating expressions, so we shouldn't add simp lemmas that rely on matching <code>coe</code>.</p>",
        "id": 230929296,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616097980
    }
]