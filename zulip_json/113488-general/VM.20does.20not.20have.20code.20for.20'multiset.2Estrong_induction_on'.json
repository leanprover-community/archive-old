[
    {
        "content": "<p>What's happening here? I'm defining a map from <code>multiset nat</code> to <code>nat</code> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">multiset.strong_induction_on :</span>\n<span class=\"cm\">  Π {α : Type u_1} {p : multiset α → Sort u_2} (s : multiset α),</span>\n<span class=\"cm\">    (Π (s : multiset α), (Π (t : multiset α), t &lt; s → p t) → p s) → p s</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s&#39;</span> <span class=\"n\">H</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>but the <code>#eval</code> fails with </p>\n<div class=\"codehilite\"><pre><span></span>code generation failed, VM does not have code for &#39;multiset.strong_induction_on&#39;\n</pre></div>\n\n\n<p>I must be honest, I don't really know what a virtual machine is. I don't really see an obstruction to evaluating the function, however I can see that there might be issues with dealing with the quotient type. Can't the VM just assume everything is well-defined on equivalence classes and have a punt? Or is the issue elsewhere?</p>",
        "id": 129309672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531074619
    },
    {
        "content": "<p>does <code>#reduce</code> produce the same error message?</p>",
        "id": 129309806,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1531074927
    },
    {
        "content": "<p><code>multiset.strong_induction_on</code> should not have been marked a <code>lemma</code> instead of a <code>def</code></p>",
        "id": 129309871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531075067
    },
    {
        "content": "<p>because it produces elements of type <code>p s : Sort*</code></p>",
        "id": 129309913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531075111
    },
    {
        "content": "<p>Oh! :-)</p>",
        "id": 129309917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531075135
    },
    {
        "content": "<p>I should really add this to my list of \"basic checks when something isn't working\". I've been caught out in the past myself writing <code>have</code> instead of <code>let</code> and then wondering why something won't unfold.</p>",
        "id": 129309929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531075198
    },
    {
        "content": "<p>This is a different issue. The VM constructs code for all definitions that are not <code>noncomputable</code>; this is what enables the use of <code>#eval</code> to run functions. But <code>lemma</code> and <code>theorem</code> definitions do not have code generated, which is usually okay since these are usually propositions which do not have any computational content anyway, but it causes problems if data is marked like this</p>",
        "id": 129310102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531075487
    },
    {
        "content": "<p>This can cause issues even if you don't use <code>#eval</code> at all:</p>\n<div class=\"codehilite\"><pre><span></span>lemma A : nat := 42\ndef B : nat := A\n-- failed to generate bytecode for &#39;B&#39;\n-- code generation failed, VM does not have code for &#39;A&#39;\n</pre></div>",
        "id": 129310119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531075558
    }
]