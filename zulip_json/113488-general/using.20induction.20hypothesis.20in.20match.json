[
    {
        "content": "<p>Why does the second one work but not the first?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">id1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">--fails</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">--works</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 156987200,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548621616
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 156987454,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1548622080
    },
    {
        "content": "<p>Because the first one is intended to not work and the second one is not intended to work</p>",
        "id": 156987699,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548622421
    },
    {
        "content": "<p>I noticed this too, back <a href=\"#narrow/stream/113489-new-members/topic/Recursively.20prove/near/137114175\" title=\"#narrow/stream/113489-new-members/topic/Recursively.20prove/near/137114175\">here</a>; I guess we're \"supposed to\" put <code>x</code> to the right of the colon like Mario did in that thread.</p>",
        "id": 156987903,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548622703
    },
    {
        "content": "<p>Sometimes <code>x</code> isn't an argument to the function however, it's something defined later.</p>",
        "id": 156989018,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548624697
    },
    {
        "content": "<p>the \"official\" solution is to just have an auxiliary function, or use <code>induction</code> to construct the function. In lean 4, if my suggestion to sebastian worked, we will have an actual term mode notation for this using <code>let</code></p>",
        "id": 156989577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548625687
    }
]