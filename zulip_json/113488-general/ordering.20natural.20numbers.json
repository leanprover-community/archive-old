[
    {
        "content": "<p>It appears that lean can't synthesize what appears to be a natural order on natural numbers, and neither can I.</p>\n<p>I'm a bit lost on what to do. I think I need <code>something: linear_ordered_field nat</code> but not sure how to get that <code>something</code>. Any help would be greatly appreciated. The terms I'm trying to produce are called <code>DOESNTWORK</code> and <code>DOESNTWORKEITHER</code> and are at the bottom of the second lemma.</p>\n<div class=\"codehilite\"><pre><span></span>def  gt1or0 (a : nat) : a =  0  ∨ a &gt;  0  :=\nsorry\n\ndef  multiply_is_no_less (a b : nat) (P : b ≠  0) : a &lt;= a * b :=\nor.elim (gt1or0 a)\n(λ (H : a =  0),\nhave A : 0  &lt;=  0, from dec_trivial,\nhave B : 0  =  0  * b, from eq.symm (zero_mul b),\nhave C : 0  &lt;=  0  * b, from eq.subst B A,\nhave D : 0  = a, from eq.symm H,\nshow a &lt;= a * b, from eq.subst D C\n)\n(λ (H : a &gt;  0),\nhave A : b &gt;  1, from  sorry,\n-- this won&#39;t be automatically true, but we can get it from appropriate or.elim or similarly.\nhave DOESNTWORK : a &lt; a * b, from lt_mul_of_gt_one_right H A,\nhave DOESNTWORKEITHER : a &lt; a * b, from  @lt_mul_of_gt_one_right nat _ b a H A, sorry\n )\n</pre></div>",
        "id": 124667719,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522929185
    },
    {
        "content": "<p>In maths, a field is something with <code>+ - * /</code> like the rationals or reals.</p>",
        "id": 124667890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929506
    },
    {
        "content": "<p>nat is no good because no <code>-</code> and no <code>/</code></p>",
        "id": 124667891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929521
    },
    {
        "content": "<p>In particular you can't use the general result <code> lt_mul_of_gt_one_right </code> on <code>nat</code></p>",
        "id": 124667906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929576
    },
    {
        "content": "<p>Ah of course. It's a bad lemma then.</p>",
        "id": 124667907,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522929584
    },
    {
        "content": "<p>You might well find though, that the lemma you want is there anyway</p>",
        "id": 124667909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929598
    },
    {
        "content": "<p>because when it comes to nat, the library seems to me to be fairly robust and complete</p>",
        "id": 124667965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929623
    },
    {
        "content": "<p>In fact it would not surprise me if pretty much anything like this that you wanted to prove was either there (although you already found a counterexample to that with the div thing) or was easily provable from what is there.</p>",
        "id": 124667983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929681
    },
    {
        "content": "<p>I know what each of the words <code>linear</code>, <code>field</code> and <code>ordered</code> mean, but of course typing was faster than thinking this time :D. I'll have a look, thanks!</p>",
        "id": 124668038,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522929763
    },
    {
        "content": "<p>For <code>gt1or0</code> (which maybe should be called <code>gt0or0</code>) my instinct (in VS Code) is to type <code>#check nat.pos_of</code> and then hit esc, ctrl-space, esc,ctrl-space (the lean plugin is a bit buggy in this regard)</p>",
        "id": 124668056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929831
    },
    {
        "content": "<p>and to see what comes up.</p>",
        "id": 124668099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929852
    },
    {
        "content": "<p><code>nat.pos_of...</code> means \"proof, specific to nat, that something is positive if...\"</p>",
        "id": 124668105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929872
    },
    {
        "content": "<p>and then we find <code>nat.pos_of_ne_zero</code></p>",
        "id": 124668111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522929891
    },
    {
        "content": "<p>Similarly, <code>#check nat.le_mul</code> (ctrl-space dance) leads you to <code>nat.mul_le_mul_right</code></p>",
        "id": 124668183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930017
    },
    {
        "content": "<p>Yup, looks like <code>nat.pos_of_ne_zero</code> will work (I can't reproduce your problems with the plugin, it works for me no problem, which is strange, since we're both using ubuntu 16.04 if I recall correctly).</p>",
        "id": 124668242,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522930089
    },
    {
        "content": "<p>To prove <code>a = a * 1</code> (I am suggesting proving <code>a &lt;= a * b</code> by proving <code>b &gt;= 1</code> and <code>a = a * 1</code> and the lemma) that's just <code>mul_one</code></p>",
        "id": 124668244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930104
    },
    {
        "content": "<p>The issue with the plugin, which you might run into at some point, is that sometimes ctrl-space gives you a list of possibilities, and then esc and ctrl-space again gives you a bigger list!</p>",
        "id": 124668250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930137
    },
    {
        "content": "<p>It's difficult to reproduce reliably</p>",
        "id": 124668256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930145
    },
    {
        "content": "<p><code>nat.succ_le_of_lt</code> will get you from <code>b &gt; 0</code> to <code>b &gt;= 1</code>, and you can guess how I found this</p>",
        "id": 124668312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930252
    },
    {
        "content": "<p>In fact I could have guessed the name of that lemma without even searching.</p>",
        "id": 124668318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930269
    },
    {
        "content": "<p>(note that le and lt are preferred to ge and gt in the naming convention)</p>",
        "id": 124668320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930284
    },
    {
        "content": "<p>One naming convention gotcha -- <code>div</code> is <code>/</code> and and <code>dvd</code> is <code>|</code> (or more precisely <code>\\|</code>)</p>",
        "id": 124668365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930324
    },
    {
        "content": "<p>and <code>sub</code> and <code>neg</code> are different -- one is binary, one unary</p>",
        "id": 124668370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930337
    },
    {
        "content": "<p>but the rigorous naming conventions make looking through the library much easier and if you're proving stuff about nat then it should be really helpful for you.</p>",
        "id": 124668374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930374
    },
    {
        "content": "<p>Last thing: <code>example : decidable_linear_order ℕ :=  by apply_instance</code> would have been the answer if the instance had been there. But stuff like <code>decidable_linear_order</code> is part of the type class system, so should all happen magically (indeed <code>apply_instance</code> is a tactic which invokes the magic).</p>",
        "id": 124668428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522930503
    },
    {
        "content": "<p>great, I think things will be much easier from now on. Thank you! I'm trying to show there are infinitely many primes, which I think is a good exercise, although it's already in mathlib:<br>\n<a href=\"https://github.com/leanprover/mathlib/blob/08f19fde695d20cf1bd899969a1c59b350dd9e43/data/nat/prime.lean#L201\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/08f19fde695d20cf1bd899969a1c59b350dd9e43/data/nat/prime.lean#L201\">https://github.com/leanprover/mathlib/blob/08f19fde695d20cf1bd899969a1c59b350dd9e43/data/nat/prime.lean#L201</a></p>",
        "id": 124668574,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1522930787
    }
]