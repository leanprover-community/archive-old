[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">0. [simplify.rewrite] [mul_inv_rev]: (g * h)⁻¹ ==&gt; h⁻¹ * g⁻¹</span>\n<span class=\"cm\">1. [simplify.rewrite] [mul_right_inj]: h⁻¹ * g⁻¹ = h⁻¹ * g⁻¹ ==&gt; h⁻¹ = h⁻¹</span>\n<span class=\"cm\">2. [simplify.rewrite] [inv_inj&#39;]: h⁻¹ = h⁻¹ ==&gt; h = h</span>\n<span class=\"cm\">3. [simplify.rewrite] [eq_self_iff_true]: h = h ==&gt; true</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p><code>simp</code> is making a bit of a meal of this one. Is that to be expected? It doesn't try <code>rfl</code> earlier?</p>",
        "id": 163198292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555081498
    },
    {
        "content": "<p><code>a = a</code> doesn't syntactically match the goal, because the two sides are not syntactically the same</p>",
        "id": 163199316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082154
    },
    {
        "content": "<p>Why do you always want the shortest path? You should enjoy the trip, and all the scenery. \"The journey is the destination\"...</p>",
        "id": 163199324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555082161
    },
    {
        "content": "<p>I guess this is the minimal example of our category theory <code>comp_id</code> woes</p>",
        "id": 163199382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you mean that <code>a</code> doesn't match <code>h⁻¹ * g⁻¹</code>? That's a pity...</p>",
        "id": 163199443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555082223
    },
    {
        "content": "<p><code>a</code> can't match both sides at once</p>",
        "id": 163199465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082240
    },
    {
        "content": "<p>After the 1st simplification step, both sides are identical, right?</p>",
        "id": 163199519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555082275
    },
    {
        "content": "<p>Ohh, you mean after the first step</p>",
        "id": 163199597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082300
    },
    {
        "content": "<p>yes, then it could. I guess it just applies simp lemmas in some random order</p>",
        "id": 163199621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082316
    },
    {
        "content": "<p>When I try this it gets to true in two steps. Are you importing anything?</p>\n<div class=\"codehilite\"><pre><span></span>0. [simplify.rewrite] [mul_inv_rev]: (g * h)⁻¹ ==&gt; h⁻¹ * g⁻¹\n1. [simplify.rewrite] [eq_self_iff_true]: h⁻¹ * g⁻¹ = h⁻¹ * g⁻¹ ==&gt; true\n</pre></div>",
        "id": 163199892,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555082494
    },
    {
        "content": "<p>What the hell, both of those line numbers should be 0, Zulip is rewriting the second to 1...</p>",
        "id": 163200007,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555082563
    },
    {
        "content": "<p>That's confusing.</p>",
        "id": 163200015,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555082573
    },
    {
        "content": "<p>Oops, I just realized your original statement is not true by defeq</p>",
        "id": 163200375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555082795
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I had a random import at the top of my scratch file! <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> why did this happen?</p>",
        "id": 163203004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555084675
    },
    {
        "content": "<p>Oh -- they are importing algebra.group</p>",
        "id": 163203098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555084738
    },
    {
        "content": "<p>I want Lean to try eq_self_iff_true before some random lemmas in algebra_group. What order does simp look for its lemmas?</p>",
        "id": 163203126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555084770
    },
    {
        "content": "<p>I also don't know how to work out how they are getting to algebra.group</p>",
        "id": 163203197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555084808
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1000000</span><span class=\"o\">]</span> <span class=\"n\">eq_self_iff_true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there any danger to setting <code>eq_self_iff_true</code> to be high priority globally?</p>",
        "id": 163204710,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555086117
    },
    {
        "content": "<p>I wish I had tried this while I was still at the office so I could profile on my desktop...</p>",
        "id": 163204907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555086268
    },
    {
        "content": "<p>on my machine, with the <code>category_theory</code> import, execution time of <code>simp</code> is like <code>650ms</code>, but with just the <code>algebra.group</code> import, it goes back down to <code>177ms</code> (with the same unnecessarily large simp set)</p>",
        "id": 163205668,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555086919
    },
    {
        "content": "<p>sadly <code>eblast</code> is slower than <code>simp</code> in either case (and i imagine there are far more <code>simp</code> lemmas than <code>ematch</code> lemmas in the imports):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"n\">mul_inv_rev</span> <span class=\"n\">mul_right_inj</span> <span class=\"n\">eq_self_iff_true</span> <span class=\"n\">inv_inj&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast</span><span class=\"o\">}</span>  <span class=\"c1\">-- 300ms</span>\n</pre></div>",
        "id": 163205799,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555087046
    },
    {
        "content": "<p>I'm curious about the effect if you set priority 1000000 low in the import hierarchy. Does it make a noticeable difference to compiling mathlib?</p>",
        "id": 163206328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555087481
    },
    {
        "content": "<p>I'm trying while I make dinner.</p>",
        "id": 163206366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555087530
    },
    {
        "content": "<p>simp is making a meal of it while Rob is making dinner... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 163211088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555091172
    },
    {
        "content": "<p>Answer: no, no noticeable difference. Although one proof breaks because simp finishes early, a reminder to avoid non-terminal simp: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/fintype.lean#L508\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/fintype.lean#L508\">https://github.com/leanprover-community/mathlib/blob/master/src/data/fintype.lean#L508</a></p>",
        "id": 163217254,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555095565
    }
]