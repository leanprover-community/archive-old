[
    {
        "content": "<p>Do we have examples in mathlib of typeclasses specifying the behaviour of a data structure?</p>\n<p>While working on a complicated tactic, I found myself wanting a priority queue, and ended up just using a list with <code>ordered_insert</code> (from <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean#L71\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean#L71\">data/list/sort.lean</a>), because we don't have a good priority queue available.</p>\n<p>It occurred to me that I really should be writing against an API for a priority queue, so that if one was ever implemented I could drop that in easily, and I suppose that the right way to do this is with a typeclass describing how to think of some type <code>Q</code> as a priority queue. However I'm a bit disconcerted by not knowing examples of us doing this in mathlib at present. (Obviously the question of what to do here generalises to any other interesting data structure.)</p>\n<p>Does anyone have advice on best practice here?</p>",
        "id": 175694153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568456670
    },
    {
        "content": "<p>My API might look something like:</p>\n<div class=\"codehilite\"><pre><span></span>class priority_queue_ops (Q : Π (α : Type u) [decidable_linear_order α], Type u) :=\n(size   : Π {α : Type u} [decidable_linear_order α], Q α → ℕ)\n(insert : Π {α : Type u} [decidable_linear_order α], α → Q α → Q α)\n(peek   : Π {α : Type u} [decidable_linear_order α], Π (q : Q α), 0 &lt; size q → α)\n(pull   : Π {α : Type u} [decidable_linear_order α], Π (q : Q α), 0 &lt; size q → (α × Q α))\n\nclass priority_queue (Q : Π (α : Type u) [decidable_linear_order α], Type u) extends priority_queue_ops Q :=\n(peek_eq_pull : ∀ {α : Type u} [decidable_linear_order α] (q : Q α) (h : 0 &lt; size q), peek q h = (pull q h).1)\n(insert_size  : ∀ {α : Type u} [decidable_linear_order α] (q : Q α) (a : α), size (insert a q) = size q + 1)\n(pull_size    : ∀ {α : Type u} [decidable_linear_order α] (q : Q α) (h : 0 &lt; size q), size (pull q h).2 = size q - 1)\n(count        : Π {α : Type u} [decidable_linear_order α], α → Q α → ℕ)\n(pull_min     : ∀ {α : Type u} [decidable_linear_order α] (q : Q α) (h : 0 &lt; size q) (a : α) (w : 0 &lt; count a (pull q h).2), (pull q h).1 ≤ a)\n(count_insert : ∀ {α : Type u} [decidable_linear_order α] (a b : α) (q : Q α), count a (insert b q) = count a q + (if a = b then 1 else 0))\n(count_pull   : ∀ {α : Type u} [decidable_linear_order α] (a : α) (q : Q α) (h : 0 &lt; size q), count a (pull q h).2 = count a q - (if a = (pull q h).1 then 1 else 0))\n\ninstance sorted_list_priority_queue : priority_queue (λ α _, by exactI (Σ&#39; L : list α, L.sorted (≤))) := ...\n</pre></div>",
        "id": 175694177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568456725
    },
    {
        "content": "<p>(A separate more specific question is whether this is a reasonable API for a priority queue, but I really want to hear about the general idea of using typeclasses for this purpose in mathlib.)</p>",
        "id": 175694220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568456764
    },
    {
        "content": "<p>(If people are happy with it, I have an implementation of that final instance.)</p>",
        "id": 175694233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568456792
    },
    {
        "content": "<p>One idea is to look how type classes for priority queues (and other data structures) are is implemented in other languages like <a href=\"http://hackage.haskell.org/package/priority-queue-0.2.2/docs/Data-PriorityQueue.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/priority-queue-0.2.2/docs/Data-PriorityQueue.html\">Haskell</a>.</p>",
        "id": 175697507,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568462761
    },
    {
        "content": "<p>While in Lean, you can say <code>0 &lt; size q</code> explicitly, it might still be good to also have an option version of some of these functions.  In other programming languages at least, it allows for easy composibility.  For example it makes pull-or-else easy to implement and possible to chain a bunch of pulls together.  (And since there is only one failure case with a pull or peek, there is no loss of information when it returns none.)</p>",
        "id": 175697547,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568462774
    },
    {
        "content": "<p>Also for implementing this and other such data structures in an efficient way, you might look at this <a href=\"https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf\" target=\"_blank\" title=\"https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf\">thesis</a> (which I guess is also a <a href=\"https://www.amazon.com/Purely-Functional-Data-Structures-Okasaki/dp/0521663504/ref=nodl_\" target=\"_blank\" title=\"https://www.amazon.com/Purely-Functional-Data-Structures-Okasaki/dp/0521663504/ref=nodl_\">book</a>, neither of which I’ve read).</p>",
        "id": 175697551,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568462796
    },
    {
        "content": "<p><del>Finally since it is Lean, you could have a separate lawful priority queue class which includes proofs that it really is a priority queue.</del></p>",
        "id": 175697558,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568462827
    },
    {
        "content": "<p>(I don’t really program in Lean, so take my advice with a grain of salt.)</p>",
        "id": 175697607,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568462896
    },
    {
        "content": "<p>Oh, sorry.  You already showed it is lawful.</p>",
        "id": 175697861,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568463379
    },
    {
        "content": "<p>Should you have an <code>empty</code> function and proofs that size and count of <code>empty</code> are 0?</p>",
        "id": 175698500,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568464745
    },
    {
        "content": "<p><code>empty</code> isn’t a good name, but I think you get the idea.  I can’t see how to use the API in an implementation free way without being able to have a starting point.</p>",
        "id": 175699330,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568466277
    },
    {
        "content": "<p>Also more advance ideas:  Priority queues are monads (similar to the set monad).  I am not sure this fact is useful in practice and it is probably not worth implementing your priority queue as a monad.</p>",
        "id": 175699551,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568466612
    },
    {
        "content": "<p>Thanks, Jason, that's all helpful.</p>",
        "id": 175699824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568467188
    },
    {
        "content": "<p>I'd first like to get some opinions on the higher level question --- should we even have APIs for data structures in Lean, or just build particular implementations of them? It's not totally obvious to me that we need the APIs yet, given how little programming infrastructure there is generally.</p>",
        "id": 175699825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568467189
    },
    {
        "content": "<p>On some of the other points --- I actually added <code>empty</code> locally in the meantime. :-) I agree that the <code>option</code>-valued <code>pull</code> and <code>peek</code> are essential in use, but I struggled to write the laws in terms of those, so thought I'd tack them on afterwards.</p>",
        "id": 175699904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568467283
    },
    {
        "content": "<p>As to that question, I know monad and such are implemented without the laws.  Should the first class be the standard priority queue class?  For tactics, verified implementations of algorithms and data structures are good, but not essential.  And I could imagine it would be more inviting to first implement a fast priority queue and unit test it rather than do that and formally verify its correctness at the same time.</p>",
        "id": 175701616,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568467901
    },
    {
        "content": "<p>(I know this is now beside the point, but) I think it is possible to satisfy your contract in a few paradoxical ways.  First an ordered list  where size is one minus the length of the list should satisfy it I think.</p>",
        "id": 175701673,
        "sender_full_name": "Jason Rute",
        "timestamp": 1568467970
    }
]