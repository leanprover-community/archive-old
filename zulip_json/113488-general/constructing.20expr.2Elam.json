[
    {
        "content": "<p>How do I construct <code>expr.lam</code> terms? In particular, I have  an expression <code>e_1</code> that already has a <code>var n</code> inside it, and another <code>e_2</code>, and I want to construct the <code>expr</code> representing <code>lam x, e_1 = e_2</code>.</p>",
        "id": 133600290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536481680
    },
    {
        "content": "<p>I tried to use <code>to_expr ``(%%e_1 = %%e_2)</code>, but that chokes because <code>e_1</code> has a <code>var</code> inside it.</p>",
        "id": 133600338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536481753
    },
    {
        "content": "<p>It's kind of ugly but I recommend </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">feq</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">feq</span> <span class=\"n\">v</span> <span class=\"n\">e_1</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133600394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536481911
    },
    {
        "content": "<p>the downside is that you're postponing type checking. If you don't want to postpone type checking, you have to take the long way around, instantiate your <code>var</code> with <code>local_const</code>, type check, then use <code>lambdas</code></p>",
        "id": 133600442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536482021
    },
    {
        "content": "<p>Ah, I see. Turning my <code>var</code> into a <code>local_const</code> is maybe not so bad, in any case. How does one construct the <code>expr.lam</code> then?</p>",
        "id": 133600976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536483314
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_local_def</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">e_1</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">e_2</span><span class=\"o\">],</span>\n<span class=\"n\">lambdas</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 133601026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536483426
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 133601300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536483978
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 133601301,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536484000
    }
]