[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">option.rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">option.rec</span> <span class=\"n\">infer_instance</span> <span class=\"n\">infer_instance</span> <span class=\"n\">i</span> <span class=\"c1\">--doesn't find it otherwise</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">option.rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">option.rec</span> <span class=\"n\">infer_instance</span> <span class=\"n\">infer_instance</span> <span class=\"n\">i</span> <span class=\"c1\">--doesn't find it otherwise</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst'</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">option.rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_monoid</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">option.rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">inst</span> <span class=\"c1\">--doesn't work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The reason it doesn't work is because the first <code>Π₀ i, option.rec α β i</code>is actually <code>@dfinsupp (option ι) (λ i, option.rec α β i) inst0</code>, <br>\nwhereas <code>@dfinsupp.add_monoid (option ι) (λ i, option.rec α β i) inst</code> actually gives an <code>add_monoid</code> structure to <br>\n<code>@dfinsupp (option ι) (λ i, option.rec α β i) (λ i, @add_monoid.to_has_zero _ (inst i))</code>. (actually there's an extra step between <code>add_monoid</code> and <code>has_zero</code> but it doesn't matter)</p>\n<p>The two <code>Π i, has_zero (option.rec α β i)</code> instances should be defeq but it doesn't see it (probably because it need some helper instances to build these). How can I avoid getting this error ?</p>",
        "id": 277265807,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648725894
    },
    {
        "content": "<p>I don't think using recursors to define typeclass instances is safe</p>",
        "id": 277266144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726114
    },
    {
        "content": "<p>but how can I avoid this ?</p>",
        "id": 277266206,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726170
    },
    {
        "content": "<p>The problem is roughly the same as the fact that <code>(λ n, 2 * nat.rec x f n)</code> is not the same as <code>(λ n, nat.rec (2 * x) (2 * f) n)</code></p>",
        "id": 277266239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726196
    },
    {
        "content": "<p>Lean can't unfold the recursor unless it knows <code>i</code></p>",
        "id": 277266283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726204
    },
    {
        "content": "<p>Which means it can't unify diamonds in the typeclass heirarchy for a general <code>i</code></p>",
        "id": 277266318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726229
    },
    {
        "content": "<p>I tried something similar with <code>sum.elim</code> a while ago, see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218484619\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218484619</a></p>",
        "id": 277266427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726304
    },
    {
        "content": "<p>this is indeed exactly the problem, as unfolding everything it's basically <code>λ i, add_comm_monoid.to_has_zero (option.rec α β i)</code> vs <code>λ i, option.rec (add_comm_monoid.to_has_zero α) (add_comm_monoid.to_has_zero β) i</code></p>",
        "id": 277266687,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726445
    },
    {
        "content": "<p>But I don't know how I could avoid the use of <code>option.rec</code></p>",
        "id": 277266737,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726475
    },
    {
        "content": "<p>Can you give some  more context?</p>",
        "id": 277266989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726633
    },
    {
        "content": "<p>I'm trying to add one term to a dfinsupp/direct sum</p>",
        "id": 277267038,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726670
    },
    {
        "content": "<p>Once way you could avoid this is to use <code>option.rec</code> to define <code>has_zero</code>, <code>has_one</code>, etc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">option.rec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">option.rec</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277267089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726687
    },
    {
        "content": "<p>And then build <code>add_monoid</code> by using <code>option.rec</code> in each proof field</p>",
        "id": 277267118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726703
    },
    {
        "content": "<p>so I have a <code>noncomputable def equiv_prod_dfinsupp : (Π₀ i, option.rec α β i) ≃ α × Π₀ i, β i := ...</code> and I want to extend it to an <code>≃+</code></p>",
        "id": 277267140,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726724
    },
    {
        "content": "<p>The key thing is to push the  <code>option.rec</code> inside all the constructors</p>",
        "id": 277267144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726726
    },
    {
        "content": "<p><code>(Π₀ i : fin n.succ, α i) ≃ α × Π₀ i : fin n, α i.succ</code> would be one way out</p>",
        "id": 277267219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726777
    },
    {
        "content": "<p>Or <code>(Π₀ i : option X, α i) ≃ α none × Π₀ i : X, α (some i)</code></p>",
        "id": 277267341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726826
    },
    {
        "content": "<p>the latter seems better because it also works with infinite direct sums</p>",
        "id": 277267392,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726869
    },
    {
        "content": "<p>I'd go for that option first, and come back to <code>option.rec</code> instances if that has issues</p>",
        "id": 277267417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648726893
    },
    {
        "content": "<p>(but actually the former is my use case so I was considering doing only this first at some point)</p>",
        "id": 277267439,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1648726910
    }
]