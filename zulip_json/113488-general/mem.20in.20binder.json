[
    {
        "content": "<p>I wrote the code <code>⨅ U ∈ nhd_zero R, principal {p : R×R | p.2 - p.1 ∈ U}</code> but now I realize I don't quite understand what's going on under the hood. The inf notation is defined by:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">infi</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⨅</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">infi</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>What is <code>ι</code> in my case? <code>{U : set R // U ∈ nhd_zero R}</code>?</p>",
        "id": 128145487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529102766
    },
    {
        "content": "<p>or is it some kind of Pi type?</p>",
        "id": 128145505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529102869
    },
    {
        "content": "<p>It magically becomes <code>⨅ U, ⨅ (H : U ∈ nhd_zero R), principal {p : R×R | p.2 - p.1 ∈ U}</code></p>",
        "id": 128145510,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529102881
    },
    {
        "content": "<p>ok, this is consistent with stuff I saw</p>",
        "id": 128145564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529102924
    },
    {
        "content": "<p>You can even refer to <code>H</code> after the comma, though this seems like a bad idea to me</p>",
        "id": 128145649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529103024
    },
    {
        "content": "<p>Thank you</p>",
        "id": 128145811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529103266
    },
    {
        "content": "<p>I'm writing really strange looking code</p>",
        "id": 128145812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529103277
    },
    {
        "content": "<p>I hope Johannes will help me clean it up</p>",
        "id": 128145817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529103291
    },
    {
        "content": "<p>It's getting really late here. I'll give up for today. If someone else wants to play with filters while I sleep, I think the lemma I need next is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">mem_sets_of_mem_infi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n</pre></div>",
        "id": 128146158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529103765
    }
]