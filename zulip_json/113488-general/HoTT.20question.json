[
    {
        "content": "<p>I've been chatting to Martin Escudo, someone who knows a lot more about univalence than me. My understanding of one of his claims was that it was impossible to define (in Lean) a predicate P on types such that P(nat) was provably true and P(int) was provably false. His argument seemed to be that a sufficiently large part of univalence was consistent with Lean. However he said that for functions from Type to Type one could find such functions P in the presence of global choice. My understanding of his claim is that he's saying the following is provable in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>In words: in the presence of what he calls \"global choice\" (c) one can find P : Type -&gt; Type such that P(X) is inhabited but P(Y) isn't, for some isomorphic X and Y. Have I understood him correctly?</p>",
        "id": 172809524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565304118
    },
    {
        "content": "<p>Your formal statement is certainly false, since you are claiming that this property holds of all P</p>",
        "id": 172809932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565304507
    },
    {
        "content": "<p>I don't think the claim you attribute to Martin is true either though; even in the presence of global choice it's still possible that <code>nat</code> and <code>int</code> are literally different names for the same underlying type</p>",
        "id": 172809967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565304559
    },
    {
        "content": "<blockquote>\n<p>it was impossible to define (in Lean) a predicate P on types such that P(nat) was provably true and P(int) was provably false</p>\n</blockquote>\n<p>I agree with this</p>\n<blockquote>\n<p>However he said that for functions from Type to Type one could find such functions P in the presence of global choice. </p>\n</blockquote>\n<p>I disagree with this unless \"find\" is meant in a sense other than \"there is a definable lean term P such that P(X) is provably true and P(Y) is provably false and X ~= Y is provable\"</p>",
        "id": 172810078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565304690
    },
    {
        "content": "<p>Aren't I claiming that if univalence holds for all P then we have a contradiction?</p>",
        "id": 172810538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565305169
    },
    {
        "content": "<p>Of course anything Martin said about univalence could well have been mangled as it passed through my brain</p>",
        "id": 172810644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565305233
    },
    {
        "content": "<p>Oh I have made an elementary error, hang on</p>",
        "id": 172811043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565305649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>This is what I meant to claim that he was saying should be provable. Sorry.</p>",
        "id": 172811258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565305884
    },
    {
        "content": "<p>\"global choice is inconsistent with univalence\"</p>",
        "id": 172811272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565305912
    },
    {
        "content": "<p>That's also false</p>",
        "id": 172811629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565306320
    },
    {
        "content": "<p>It's not the same as \"global choice is inconsistent with univalence\" which is true</p>",
        "id": 172811652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565306348
    },
    {
        "content": "<p>The key data point is that \"weak univalence\", or <code>A ~= B -&gt; A = B</code>, is consistent with lean</p>",
        "id": 172811669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565306383
    },
    {
        "content": "<p>which implies that your example statement is not provable</p>",
        "id": 172811676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565306397
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">weak_ua</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">},</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">hX</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">weak_ua</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">hX</span>\n</pre></div>",
        "id": 172811831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565306541
    },
    {
        "content": "<p>Here is a proof that full univalence is false (using proof irrelevance, not choice)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">transport</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kn\">constant</span> <span class=\"n\">ua</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">ua_left_inv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"n\">ua</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bswap</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bnot</span><span class=\"o\">,</span> <span class=\"n\">bnot</span><span class=\"o\">,</span> <span class=\"n\">bnot_bnot</span><span class=\"o\">,</span> <span class=\"n\">bnot_bnot</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"n\">ua</span> <span class=\"n\">bswap</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ua_left_inv</span> <span class=\"n\">bswap</span><span class=\"o\">):</span><span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"n\">ua</span> <span class=\"n\">bswap</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ua_left_inv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)):</span><span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff_ne_tt</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172812287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565307049
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 172812421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565307205
    },
    {
        "content": "<p>That was written just as I went to bed but I now realise that it's just the standard <code>bool</code> thing again. Aut(bool) is not a subsingleton, which is problematic with an impredicative =. But what I'm trying to understand is why global choice contradicts univalence.</p>",
        "id": 172828877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565332534
    },
    {
        "content": "<p>I think it's more or less because if I choose from a non subsingleton type, that choice won't be preserved under a non identity permutation of that type.</p>",
        "id": 172829551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565333681
    },
    {
        "content": "<p>I had a go in HoTT Lean. There are a couple of sorries. Not sure if this is the right idea. Also HoTT Lean wants me to give explicit motives for every substitution. Thinking about it more, I'm not sure if <code>hb'</code> is provable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">hott</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">bool_not</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">bnot</span> <span class=\"err\">$</span> <span class=\"n\">is_equiv</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">bnot</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">b</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">choice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">trunc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ua</span> <span class=\"n\">bool_not</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">cast_ua</span> <span class=\"n\">bool_not</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">ff</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">choice</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"n\">ff</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n        <span class=\"n\">sorry</span>\n        <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 172831754,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565336275
    },
    {
        "content": "<p>Martin says that I need to use \"full univalence\", as other people have pointed out, and because full univalence is just inconsistent with Lean, it's inconsistent with global choice in Lean, as Mario pointed out. I don't think I have a question any more. Thanks Mario and Chris.</p>",
        "id": 172832217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565336947
    },
    {
        "content": "<p>There are two separate claims here, both of which are true:</p>\n<ul>\n<li>Univalence is inconsistent with proof irrelevance;</li>\n<li>Univalence is inconsistent with global choice.</li>\n</ul>",
        "id": 172858680,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565363232
    },
    {
        "content": "<p>I am able to formalize the proof in Lemma 3.8.5 in the HoTT book; the middle paragraph isn't used.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">hott.hit.trunc</span>\n<span class=\"kn\">open</span> <span class=\"n\">hott</span>\n<span class=\"n\">hott_theory</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">choice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">trunc</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[hott]</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">trunc</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)},</span>\n  <span class=\"k\">let</span> <span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">trunc.tr</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">is_contr</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">trunc.trunc_functor</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sigma.subtype_eq</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">is_prop</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₀</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sigma.subtype_eq_equiv</span> <span class=\"n\">x₀</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bool.not_is_prop_bool_eq_bool</span> <span class=\"o\">(</span><span class=\"n\">is_trunc.is_trunc_equiv_closed</span> <span class=\"n\">_</span> <span class=\"n\">he</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Choice is stated as <code>trunc -1 α → α</code> as it normally is, not <code>trunc 0 α → α</code>. I don't know why <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> uses <code>trunc 0</code> and I don't know whether that version is consistent with univalence.</p>",
        "id": 290529345,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658505192
    },
    {
        "content": "<p>Are you sure that with your conventions <code>trunc -1 α → α</code> is in <code>Prop</code>?</p>",
        "id": 290699173,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658695835
    },
    {
        "content": "<p>I don't think <code>trunc -1 α → α</code> is in <code>Prop</code>, but <a href=\"https://github.com/gebner/hott3/blob/7ead7a8a2503049eacd45cbff6587802bae2add2/src/hott/hit/trunc.lean#L118\"><code>trunc -1 α</code> is</a> (more precisely, the type <code>trunc -1 α</code> together with a proof that it <code>is_prop</code>, is a term of type <code>Prop</code>). I think <code>trunc -1</code> is the HoTT analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty\">docs#nonempty</a>, so <code>axiom choice</code> above is the analogue of global choice (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a>). <code>trunc 0 α</code> on the other hand truncates <code>α</code> to a set.</p>",
        "id": 290701054,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658698544
    }
]