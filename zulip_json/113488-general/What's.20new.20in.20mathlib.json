[
    {
        "content": "<p>There is a thread in the <code>#maths</code> stream: <a href=\"#narrow/stream/116395-maths/subject/What's.20new.20in.20Lean.20maths.3F\" title=\"#narrow/stream/116395-maths/subject/What's.20new.20in.20Lean.20maths.3F\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/What's.20new.20in.20Lean.20maths.3F</a><br>\nIt is a place to announce recent merges to mathlib that have clear mathematical relevance.</p>",
        "id": 135038239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489298
    },
    {
        "content": "<p>I propose to announce other general contributions in this thread.</p>",
        "id": 135038253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538489316
    },
    {
        "content": "<p>There is now a <code>choice</code> tactic that will help with applying the axiom of choice: <a href=\"https://github.com/leanprover/mathlib/blob/c2df6b1f3f62575649dbe128a2c5fc9e2de26ffb/docs/tactics.md#choice\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/c2df6b1f3f62575649dbe128a2c5fc9e2de26ffb/docs/tactics.md#choice\">https://github.com/leanprover/mathlib/blob/c2df6b1f3f62575649dbe128a2c5fc9e2de26ffb/docs/tactics.md#choice</a><br>\nKudos to <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 135086366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538551778
    },
    {
        "content": "<p>I changed the syntax to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Also it allows a arbitrary prefix of quantifiers and existentials.</p>",
        "id": 135091616,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538559138
    },
    {
        "content": "<p>Does that include higher than Pi^2 complexity?</p>",
        "id": 135091695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538559245
    },
    {
        "content": "<p>i.e. after the first <code>choose</code> you might end up with a hypothesis that is again of the form AE and repeat</p>",
        "id": 135091718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538559304
    },
    {
        "content": "<p>(I'm not sure how applicable this is, but it would be nice to say we have full skolemization)</p>",
        "id": 135091734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538559343
    },
    {
        "content": "<p>\"Mathlib: aiming for full skolemization\". I think this should be our catch phrase.</p>",
        "id": 135091910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538559565
    },
    {
        "content": "<p>It should handle quantifiers again. But problem is that it doesn't handle conjunctions currently. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n_1</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">n_1</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135092306,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538560161
    },
    {
        "content": "<p>also, since it doesn't use <code>axiom_of_choice</code> but <code>classical.some</code> it can be used in <code>Type</code> and not only in <code>Prop</code>.</p>",
        "id": 135092364,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538560214
    },
    {
        "content": "<p>Oh, I just noticed <a href=\"https://github.com/leanprover/mathlib/pull/383#issuecomment-426571007\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/383#issuecomment-426571007\">https://github.com/leanprover/mathlib/pull/383#issuecomment-426571007</a> it means I don't need <code>set_option pp.beta true</code> in my demo file anymore</p>",
        "id": 135104186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538574454
    },
    {
        "content": "<p><span class=\"emoji emoji-1f514\" title=\"bell\">:bell:</span> We have a new pair of tactics: <code>tfae_have</code> and <code>tfae_finish</code>. The help with proving \"the following are equivalent\".<br>\nTake a look at <a href=\"https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/data/list/basic.lean#L3890\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/data/list/basic.lean#L3890\">https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/data/list/basic.lean#L3890</a> and at <a href=\"https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/docs/tactics.md#tfae\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/docs/tactics.md#tfae\">https://github.com/leanprover/mathlib/blob/b7d314f3f2f4b18a491b359aaeb889b5c83640bc/docs/tactics.md#tfae</a></p>",
        "id": 135178667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538658694
    },
    {
        "content": "<p>There have been valiant efforts by the community to improve the installation experience: <a href=\"https://github.com/leanprover/mathlib/commit/4dbe0cdfaee201cc15cd2a74fbe8731f8bd4642a\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/4dbe0cdfaee201cc15cd2a74fbe8731f8bd4642a\">https://github.com/leanprover/mathlib/commit/4dbe0cdfaee201cc15cd2a74fbe8731f8bd4642a</a></p>",
        "id": 135843553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539622064
    },
    {
        "content": "<p>In this context I think it is worth pointing once more to Kevin's page: <a href=\"https://xenaproject.wordpress.com/installing-lean-and-mathlib/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/installing-lean-and-mathlib/\">https://xenaproject.wordpress.com/installing-lean-and-mathlib/</a> which also links to two fantastic installation walkthrough videos by Scott.</p>",
        "id": 135843730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539622216
    },
    {
        "content": "<p>New in Lean itself: the patches to deal with spaces in Windows user names have landed, <a href=\"https://github.com/leanprover/lean-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover/lean-nightly/releases\">https://github.com/leanprover/lean-nightly/releases</a>.</p>",
        "id": 136909599,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541063586
    },
    {
        "content": "<p>In mathlib, my <code>fin_cases</code> tactic was merged. Sorry I haven't been paying attention to mathlib much recently; perhaps someone else can give some updates on recent merges?</p>",
        "id": 136909612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541063627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cd /c/lean\ngit pull\ncd build/release\nninja clean-olean\nninja\n</pre></div>\n\n\n<p>:P</p>",
        "id": 136909834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541063888
    },
    {
        "content": "<p>?</p>",
        "id": 136909849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541063944
    },
    {
        "content": "<p>that's how to manually update lean</p>",
        "id": 136909865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541063987
    },
    {
        "content": "<p>but kenny, this means you are yet to bask in the glorious <code>elan</code> way</p>",
        "id": 136909925,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541064012
    },
    {
        "content": "<p>:D</p>",
        "id": 136909927,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541064015
    },
    {
        "content": "<p>maybe <code>elan</code> is yet to work for windows</p>",
        "id": 136909973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541064093
    },
    {
        "content": "<p>nah it even has a windows binary and everything!</p>",
        "id": 136909976,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541064106
    },
    {
        "content": "<p>there is even scope for like a windows installer, but someone will have to be bothered to repair it</p>",
        "id": 136910034,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541064154
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[...]\nCurrent installation options:\n\n     default toolchain: stable\n  modify PATH variable: yes\n\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n\n\nerror: toolchain &#39;stable&#39; is not installed\ninfo: caused by: not a directory: &#39;C:\\Users\\Kenny Lau\\.elan\\toolchains\\stable&#39;\n\nPress the Enter key to continue.\n</pre></div>",
        "id": 136910643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541064870
    },
    {
        "content": "<p>I think the old space in the name strikes again</p>",
        "id": 136910681,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541064943
    },
    {
        "content": "<p>I think the correct name is <code>stable-x86_64-pc-windows-msvc</code> not <code>stable</code></p>",
        "id": 136910816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541065096
    },
    {
        "content": "<p>Is that because there was a folder created in <code>...\\toolchains\\</code> which is called that? How did you get that name?<br>\nMy understanding of the <code>elan</code> toolchain code is that <code>stable</code> is a special keyword, along with <code>nightly</code>. In my testing I tend to get the error <code>\nerror: toolchain 'stable' is not installed</code> when <code>elan</code> is failing silently because of something.<br>\nI suppose I should stop talking about this in this thread... :o</p>",
        "id": 136911316,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541065858
    },
    {
        "content": "<p>Gonna be a lot of stuff this week.</p>",
        "id": 146800725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541429867
    },
    {
        "content": "<p>oh man</p>",
        "id": 146801829,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541430815
    },
    {
        "content": "<p>Keeley's PR's for extending <code>conv</code> mode with <code>ring</code> and <code>erw</code> have been merged.</p>",
        "id": 146817419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541445949
    },
    {
        "content": "<p>Woah, the pull-request list fits onto one page now!</p>",
        "id": 146840826,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541472106
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/q/2987631/328173\" target=\"_blank\" title=\"https://math.stackexchange.com/q/2987631/328173\">https://math.stackexchange.com/q/2987631/328173</a></p>",
        "id": 146891337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541535639
    },
    {
        "content": "<p>We just got <code>elide</code>: <a href=\"https://github.com/leanprover/mathlib/blob/ebf3008ba84fec5363334fa77a947f43bd71a965/docs/tactics.md#elideunelide\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/ebf3008ba84fec5363334fa77a947f43bd71a965/docs/tactics.md#elideunelide\">https://github.com/leanprover/mathlib/blob/ebf3008ba84fec5363334fa77a947f43bd71a965/docs/tactics.md#elideunelide</a><br>\nThanks Mario!</p>",
        "id": 152046738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545069251
    },
    {
        "content": "<p>interesting...</p>",
        "id": 152047300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545069649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/489\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/489\">#489</a> is merged. This adds a new command <code>#where</code>. Kudos to <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <br>\nIf you insert <code>#where</code> in a file, Lean will print a message explaining what your current namespace is, and which variables are in use.</p>",
        "id": 152242473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545295897
    },
    {
        "content": "<p>Mario needs a medal (or at least a high-five) for the insane response time after I fixed up his suggestions</p>",
        "id": 152242572,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545296002
    },
    {
        "content": "<p>34 merged PRs in the past week!<br>\n<a href=\"https://github.com/leanprover/mathlib/pulse\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pulse\">https://github.com/leanprover/mathlib/pulse</a></p>",
        "id": 152396140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545498811
    },
    {
        "content": "<p>and I'm sure there are more open PRs now than when I started :P</p>",
        "id": 152396214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545498943
    },
    {
        "content": "<p><a href=\"https://xkcd.com/2086/\" target=\"_blank\" title=\"https://xkcd.com/2086/\">https://xkcd.com/2086/</a></p>",
        "id": 152396943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545500425
    },
    {
        "content": "<blockquote>\n<p>and I'm sure there are more open PRs now than when I started :P</p>\n</blockquote>\n<p>You did ask for many small PR everywhere there could be one big...</p>",
        "id": 152397916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545502492
    },
    {
        "content": "<p>I think most of the remaining PRs are fairly large though</p>",
        "id": 152398095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545502889
    },
    {
        "content": "<p>Simon wrote a bunch of long expected hole commands <a href=\"https://github.com/leanprover/mathlib/commit/84d1c450111d4c576c7aefd3a7901c4aa07d0b6f\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/84d1c450111d4c576c7aefd3a7901c4aa07d0b6f\">https://github.com/leanprover/mathlib/commit/84d1c450111d4c576c7aefd3a7901c4aa07d0b6f</a>!</p>",
        "id": 156968908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548589108
    },
    {
        "content": "<p>Nice</p>",
        "id": 156968928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548589161
    },
    {
        "content": "<p>I hope you guys enjoy it! There's a lot of room for improvement. Please let me know what the pain points are.</p>",
        "id": 156979900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548609852
    },
    {
        "content": "<p>There's a new tactic <code>suggest</code>, that I'd encourage everyone to try out. Like <code>library_search</code>, it attempts to find a useful lemma from the imported library to close the current goal. It prints a list of everything (up to some cutoff) that it finds, even if they don't completely close the goal. Thus you'll sometimes see results of the form <code>exact ...</code>, but also <code>refine ...</code> with underscores for new goals.</p>\n<p>(This is joint work with a student Lucas Allen at the ANU.)</p>\n<p>Bug reports, or suggestions for improvements in its behaviour, very welcome. There's still a lot of low-hanging fruit in this direction.</p>",
        "id": 178740365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571738811
    },
    {
        "content": "<p><code>interval_cases</code> has landed in mathlib. It's good for situations where you know <code>n &lt; 3</code>, and just want to be given the cases <code>n = 0</code>, <code>n=1</code>, and <code>n=2</code> to deal with separately.</p>\n<p>Just call it as <code>interval_cases n</code>, and it will automatically look for appropriate bounds.</p>",
        "id": 189647055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583279198
    },
    {
        "content": "<p>It currently works with a variable in <code>nat</code>, <code>int</code>, or <code>pnat</code>: it's not so hard to add support for others, so please let me know if there are specific other types that would be useful to you.</p>",
        "id": 189647077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583279247
    },
    {
        "content": "<p>is this the evolution of <code>fin_cases</code>?</p>",
        "id": 189651001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583283247
    },
    {
        "content": "<p>Yes, under the hood it is just assembling the pieces into a new hypotheses <code>n \\mem set.Ico a b</code>, and then calling <code>fin_cases</code> on that.</p>",
        "id": 189658477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583293671
    },
    {
        "content": "<p>So as long as there is a <code>fintype (set.Ico a b)</code> instance available for a type, this has a chance of working. It needs some lattice-type instances in order to combine multiple bounds if they appear, and to automatically find lower bounds for e.g. nat.</p>",
        "id": 189658554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583293786
    },
    {
        "content": "<p><code>fin_cases</code> is still there, as before.</p>",
        "id": 189658561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583293797
    },
    {
        "content": "<p>The inverse function theorem <a href=\"https://github.com/leanprover-community/mathlib/issues/2228\" title=\"https://github.com/leanprover-community/mathlib/issues/2228\">#2228</a> has been merged. Thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> !</p>",
        "id": 195670581,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588145551
    },
    {
        "content": "<p>Mathlib is almost a grown up now!</p>",
        "id": 195672044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146517
    },
    {
        "content": "<p>Kenny still refers to Lean as a first year undergraduate</p>",
        "id": 195673520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588147290
    },
    {
        "content": "<p>Hmmm... and most of those aren't grown up <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 195673682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147349
    },
    {
        "content": "<p>Let me revive this topic with the Divergence thm for a Henstock-style integral, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/box_integral.has_integral_bot_divergence_of_forall_has_deriv_within_at\">docs#box_integral.has_integral_bot_divergence_of_forall_has_deriv_within_at</a></p>",
        "id": 258263489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634674167
    },
    {
        "content": "<p>A version for the Bochner integral <a href=\"https://github.com/leanprover-community/mathlib/issues/9811\">#9811</a> is awaiting review.</p>",
        "id": 258263550,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634674193
    }
]