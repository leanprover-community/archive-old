[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.add_monoid\">docs#set.add_monoid</a> forms a smul diamond with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_scalar_set\">docs#set.has_scalar_set</a>: <code>2 • {1, 2}</code> is either <code>{2, 4}</code> or <code>{2, 3, 4}</code> depending on which instance you find</p>",
        "id": 264004833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638885633
    },
    {
        "content": "<p>I must say that pointwise smul is the one I would expect here. Can we somehow override repeated addition?</p>",
        "id": 264005552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885907
    },
    {
        "content": "<p>A simple way would be to turn <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_scalar_set\">docs#set.has_scalar_set</a> in a definition <code>set.smul : set α → set β → set β</code>.</p>",
        "id": 264005646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885957
    },
    {
        "content": "<p>Whoever had the crazy idea that <code>2 • X = X + X</code>? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 264006327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638886238
    },
    {
        "content": "<p>Proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set.has_scalar_set</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.has_scalar_nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">iff_of_eq</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">h</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">succ_nsmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.image_smul</span><span class=\"o\">,</span> <span class=\"n\">set.image_insert_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.image2_add</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264008149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638887068
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pointwise.20set.20division\">#Is there code for X? &gt; Pointwise set division</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 264008475,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638887196
    },
    {
        "content": "<p>I don't know whether this diamond is a good illustration of why <code>add_monoid.nsmul</code> is a good idea, or of why it is a bad idea. It certainly illustrates that <code>add_monoid.nsmul</code> is an idea. :P</p>",
        "id": 264017339,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638891242
    },
    {
        "content": "<p>Maybe having pointwise binops on sets should be opt-in.</p>",
        "id": 264017834,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638891448
    },
    {
        "content": "<p>As an example, I made <code>open_locale lex</code> switch between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.has_le\">docs#sigma.has_le</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.lex.has_le\">docs#sigma.lex.has_le</a>. I don't know whether that's the correct way, but at least it's doable.</p>",
        "id": 264019109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638891930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/nat.20smul.20diamond.20in.20set.20actions/near/264017834\">said</a>:</p>\n<blockquote>\n<p>Maybe having pointwise binops on sets should be opt-in.</p>\n</blockquote>\n<p>It is opt-in, via <code>open_locale pointwise</code>. It just happens to be the same opt in as the scalar action, so you either have both conflicting instances or neither.</p>",
        "id": 264028089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638895096
    },
    {
        "content": "<p>Ah, but to me, the scalar one isn't a binop between sets.</p>",
        "id": 264031124,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638896103
    },
    {
        "content": "<p>Well true, but <code>open_locale pointwise</code> is still the opt in for binop between sets you asked for, it just happens to opt into other things too.</p>",
        "id": 264051028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638902354
    },
    {
        "content": "<p>More agressive would be to make the nat-action opt-in</p>",
        "id": 264051059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638902365
    },
    {
        "content": "<p>Or even all the non-transitive actions</p>",
        "id": 264051071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638902372
    },
    {
        "content": "<p>Can't we just set instance priorities or something?</p>",
        "id": 264053806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638903404
    },
    {
        "content": "<p>I still think assuming there's just one action/multiplication/order/whatever on a space will be quite annoying to work with in many cases :/ I wish ther was a better solution</p>",
        "id": 264055181,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638903887
    },
    {
        "content": "<p>What about making the <code>has_scalar α (set β)</code> instance a definition?</p>",
        "id": 264055566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638904047
    },
    {
        "content": "<p>It's really useful, so I'd rather keep it as an instance (inside <code>open_locale pointwise</code>). I agree that we should just put some priorities here (and it's sufficiently uncommon that it shouldn't be an issue in general).</p>",
        "id": 264056559,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638904506
    },
    {
        "content": "<p>For now, perhaps I'll just add a comment to the docstring of <code>set.add_monoid</code> noting the diamond that appears</p>",
        "id": 264063718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638907483
    }
]