[
    {
        "content": "<p>Is there a tactic for (part of) this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</pre></div>",
        "id": 133785751,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536741609
    },
    {
        "content": "<p>Will <code>tidy</code> do this? Or can it not yet do <code>exists.intro</code>?</p>",
        "id": 133785823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536741732
    },
    {
        "content": "<p>I've never used <code>tidy</code>.</p>",
        "id": 133785841,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536741791
    },
    {
        "content": "<p>It is really cool. You'll need <code>import tactic.tidy</code>.</p>",
        "id": 133785855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536741832
    },
    {
        "content": "<p>I'd just write the whole thing in term mode</p>",
        "id": 133785901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536741870
    },
    {
        "content": "<p>Kenny: I had that, but the tactic is more robust to changes in <code>l</code>, which are happening.</p>",
        "id": 133786086,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536742190
    },
    {
        "content": "<p>Also, <code>l</code> has a lot of fields, so either using pattern matching or <code>cases l with ...</code> is annoyingly long.</p>",
        "id": 133786206,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536742386
    },
    {
        "content": "<p>Does <code>tidy</code> work?</p>",
        "id": 133786220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536742421
    },
    {
        "content": "<p><code> by cases l; tidy</code> works</p>",
        "id": 133786279,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536742505
    },
    {
        "content": "<p><code> by cases l; tidy {trace_result:=tt}</code> doesn't print anything. <span class=\"emoji emoji-1f615\" title=\"concerned\">:concerned:</span></p>",
        "id": 133786383,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536742646
    },
    {
        "content": "<p>Huh, so <code>tidy</code> won't do the <code>cases</code> for you? I expected that it would try that, as some last resort...</p>",
        "id": 133786679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536742934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> You can use hole commands to let VScode replace <code>tidy</code> with the proof it generated.</p>",
        "id": 133786702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536742975
    },
    {
        "content": "<p>I suppose that would be listed here if it did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">default_tactics</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span> <span class=\"n\">reflexivity</span>                                 <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;refl&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>                        <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;exact dec_trivial&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">propositional_goal</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">assumption</span>            <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;assumption&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">ext1</span><span class=\"o\">]</span>                                     <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;ext1&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">intros1</span>                                     <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"s2\">&quot;intros &quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">)))),</span>\n  <span class=\"n\">auto_cases</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply_auto_param</span><span class=\"o\">]</span>                         <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;apply_auto_param&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">]</span>                               <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;dsimp at *&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">]</span>                                <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;simp at *&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span>                                      <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;fsplit&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">injections_and_clear</span>                        <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;injections_and_clear&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">propositional_goal</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">solve_by_elim</span><span class=\"o\">])</span>    <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;solve_by_elim&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">unfold_aux</span><span class=\"o\">]</span>                               <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"s2\">&quot;unfold_aux&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"bp\">.</span><span class=\"n\">run_tactics</span> <span class=\"o\">]</span>\n</pre></div>",
        "id": 133786713,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536742992
    },
    {
        "content": "<p>what does <code>auto_cases</code> do?</p>",
        "id": 133786720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536743005
    },
    {
        "content": "<p>No idea. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 133786728,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743021
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">t&#39;</span> <span class=\"err\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">t&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">use_cases</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t&#39;</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">empty</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">pempty</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unit</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">punit</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">plift</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"bp\">_</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"c1\">-- This is perhaps dangerous!</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"c1\">-- This is perhaps dangerous!</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</pre></div>",
        "id": 133786771,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743057
    },
    {
        "content": "<p>Looks like it's restricted to certain patterns.</p>",
        "id": 133786777,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743076
    },
    {
        "content": "<p>Right... I guess that makes sense.</p>",
        "id": 133786786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536743089
    },
    {
        "content": "<p>Anyway, we still golfed your proof (-;</p>",
        "id": 133786795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536743102
    },
    {
        "content": "<p>It makes sense that <code>cases l</code> remains in the proof. It is probably an \"idea\". After that it is \"follow your nose\"</p>",
        "id": 133786812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536743130
    },
    {
        "content": "<p>Yep, thanks! I learned something new.</p>",
        "id": 133786813,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743133
    },
    {
        "content": "<p>It would be nice to see what <code>tidy</code> is doing, though.</p>",
        "id": 133786871,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743186
    },
    {
        "content": "<p>Sean, are you using a version of mathlib which incorporates this commit?<br>\n<a href=\"https://github.com/leanprover/mathlib/commit/e95111d38c0b2d666f70624ce25a5d728e0db376\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/e95111d38c0b2d666f70624ce25a5d728e0db376\">https://github.com/leanprover/mathlib/commit/e95111d38c0b2d666f70624ce25a5d728e0db376</a></p>",
        "id": 133786948,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536743334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> No, certainly not. Thanks!</p>",
        "id": 133787037,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536743414
    }
]