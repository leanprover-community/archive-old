[
    {
        "content": "<p>I recently made some changes to <code>ext</code> that allow it to recurse into tensor products and products when equating linear maps. I'm wondering where to draw the line on what should and what shouldn't be an ext lemma.</p>\n<p>For instance, this is almost certainly a bad<code>ext</code> lemma, as the user could just apply <code>induction</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">function.nat_ext</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat.rec</span> <span class=\"n\">h0</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>What about when the bundled function allows one of the inductive cases to be eliminated? Is this a bad ext lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_hom.nat_ext</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">zero_hom</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_hom.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"n\">f.map_zero.trans</span> <span class=\"n\">g.map_zero.symm</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In the same line of <code>ext</code> lemma, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.ext_nat\">docs#add_monoid_hom.ext_nat</a> which <em>is</em> marked <code>ext</code>, and  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.ext_nat\">docs#ring_hom.ext_nat</a> which is not.</p>",
        "id": 225884336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612981543
    },
    {
        "content": "<p>The actual context of the question is whether this should be an ext lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Two linear maps agree if they agree on 1, `ι`, and agree on a product if they agree on its parts. -/</span>\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">def</span> <span class=\"n\">exterior_algebra.hom_extₗ</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">exterior_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_ι</span> <span class=\"o\">:</span> <span class=\"n\">f.comp</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g.comp</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 225885462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612981987
    },
    {
        "content": "<p>I don't think ext lemmas should be recursive</p>",
        "id": 225888744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983206
    },
    {
        "content": "<p>which would exclude all three examples</p>",
        "id": 225888819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983234
    },
    {
        "content": "<p>Do you object to <code>linear_map.prod_ext</code> (<a href=\"https://github.com/leanprover-community/mathlib/issues/6124\">#6124</a>) then too?</p>",
        "id": 225888949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612983277
    },
    {
        "content": "<p>bad link</p>",
        "id": 225889044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983318
    },
    {
        "content": "<p>Fixed</p>",
        "id": 225889103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612983351
    },
    {
        "content": "<p>no, that's fine</p>",
        "id": 225889170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983367
    },
    {
        "content": "<p>recursive here meaning that there are equalities in the assumptions of a hypothesis to the theorem</p>",
        "id": 225889252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983397
    },
    {
        "content": "<p>the theorem hypotheses should just be plain equalities or universally quantified equalities</p>",
        "id": 225889305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983423
    },
    {
        "content": "<p>That's a reasonable rule</p>",
        "id": 225889339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612983436
    },
    {
        "content": "<p>Which means that presumably ring_hom.ext_nat should be marked ext</p>",
        "id": 225889374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612983454
    },
    {
        "content": "<p>There's also the matter of \"canonicality\" though; too many ext lemmas and it's not clear what's going to get applied when you use <code>ext</code>, since you don't specify which ext lemma to apply</p>",
        "id": 225890356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983802
    },
    {
        "content": "<p>it is basically the same kind of situation as typeclass instances being \"unique\"</p>",
        "id": 225890407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983828
    },
    {
        "content": "<p><code>ring_hom.ext_nat</code> looks more like a subsingleton instance to me</p>",
        "id": 225890561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612983891
    }
]