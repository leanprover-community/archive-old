[
    {
        "content": "<p>I'm constructing a fairly complicated tactic with a lot of parts which I've broken into many separate tactic-valued functions.  I also need to pass around certain information a lot.  This is a sort of \"state\", but not the tactic state.  I happen to call it <code>search_state</code>.  I find myself writing a lot of tactics of the form:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">search_state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"bp\">×</span> <span class=\"n\">search_state</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">new_s</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>for various <code>output</code> types.  Clearly, I should just make my own monad, <code>new_monad</code> and then everything is cleaner:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">new_monad</span> <span class=\"n\">output</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">some</span> <span class=\"n\">tactic</span> <span class=\"n\">which</span> <span class=\"n\">changes</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">search_state</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">return</span> <span class=\"n\">o</span>\n</code></pre></div>\n\n\n<p>Last,  I'd like <code>new_monad</code> to be able to (fairly easily) call regular <code>tactic</code> monads.</p>\n<p>I could hack through this (\"type sudoku\" if you will), but is there a tried-and-true approach to doing this (i.e. creating a new state monad on top of the tactic monad that plays nicely with the tactic monad)?</p>",
        "id": 197647244,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589516795
    },
    {
        "content": "<p>Yes, you can do similar tricks as in haskell monad transformers</p>",
        "id": 197647305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589516887
    },
    {
        "content": "<p>Pretend I don't know Haskell.</p>",
        "id": 197647309,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589516906
    },
    {
        "content": "<p>(I know Scala, Lean, and some OCaml.)</p>",
        "id": 197647315,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589516922
    },
    {
        "content": "<p>Here is an example from the <code>ring</code> tactic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">monad</span><span class=\"o\">,</span> <span class=\"n\">alternative</span><span class=\"o\">]]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ring_m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">reader_t</span> <span class=\"n\">cache</span> <span class=\"o\">(</span><span class=\"n\">state_t</span> <span class=\"o\">(</span><span class=\"n\">buffer</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 197647341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589516956
    },
    {
        "content": "<p>This is augmenting the tactic monad with a state monad transformer (so you can modify an object of type <code>buffer expr</code>) and a reader monad transformer (so any tactic gets read only access to an object of type <code>cache</code>)</p>",
        "id": 197647419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517028
    },
    {
        "content": "<p>Ok, that is probably a good place to start.  Thanks!</p>",
        "id": 197647447,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517106
    },
    {
        "content": "<p>concretely, this means that a <code>ring_m A</code> is actually a <code>cache -&gt; buffer expr -&gt; tactic (buffer expr x A)</code>, but using monad transformers means that you get the monad operations for free</p>",
        "id": 197647448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517108
    },
    {
        "content": "<p>Also, how do you call a regular tactic inside this ring tactic (like in a <code>do</code> block)?</p>",
        "id": 197647498,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517159
    },
    {
        "content": "<p>Do you just construct the obvious conversion function <code>tac_to_ring</code> and wrap your tactics with that?</p>",
        "id": 197647511,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517200
    },
    {
        "content": "<p>monad transformers usually come with an operation called <code>lift</code> of type <code>inner_monad A -&gt; transformed_monad A</code></p>",
        "id": 197647513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517203
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring_m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">reader_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197647522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517228
    },
    {
        "content": "<p>you don't need to define these functions unless you hide the definition of the transformer stack behind a definition like <code>ring_m</code> here</p>",
        "id": 197647575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517290
    },
    {
        "content": "<p>otherwise you can just use <code>state_t.lift</code> directly</p>",
        "id": 197647580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517303
    },
    {
        "content": "<p>You can also declare <code>lift</code> to be a coercion, and then you can write regular tactics in a <code>do</code> block for the transformed monad without any notation</p>",
        "id": 197647648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517382
    },
    {
        "content": "<p>By \"not hiding it\", do you mean writing functions with signature <code>def foo : reader_t cache (state_t (buffer expr) tactic) α</code>?</p>",
        "id": 197647683,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517438
    },
    {
        "content": "<p>yes</p>",
        "id": 197647688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517446
    },
    {
        "content": "<p>If it's just one <code>state_t</code> this is reasonable, but once you stack more than one I would suggest making a definition</p>",
        "id": 197647698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517475
    },
    {
        "content": "<p>Also, you might consider whether a mutable variable of type <code>ref search_state</code> is better than threading the state through everything using the state monad</p>",
        "id": 197647752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517543
    },
    {
        "content": "<p>Care to explain mutable variables?  (Or point the way to an explanation.)</p>",
        "id": 197647797,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517605
    },
    {
        "content": "<p>It's a pretty simple api, see <code>#print ref</code> and go to definition</p>",
        "id": 197647812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517661
    },
    {
        "content": "<p>Will do.  Thanks for all this!</p>",
        "id": 197647822,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589517681
    },
    {
        "content": "<p>inside the tactic monad you can create (scoped) mutable variables and modify them</p>",
        "id": 197647835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589517709
    },
    {
        "content": "<p>Oh, I never knew about this <code>ref</code> thing!</p>",
        "id": 197648160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589518177
    },
    {
        "content": "<p>One important thing to note about <code>ref</code> is that it is tied to the tactic state (the tactic state contains a map storing the values of the <code>ref</code> variables).  Backtracking (<code>&lt;|&gt;</code>) hence also backtracks the state of the <code>ref</code> variable.  So they are not really mutable variables in the sense you may be used to.</p>",
        "id": 197657636,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589529089
    }
]