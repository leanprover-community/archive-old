[
    {
        "content": "<p>Dear All,</p>\n<p>I am planning to PR a few lemmas on polynomials.  After yesterday's discussion in <a href=\"#narrow/stream/144837-PR-reviews/topic/.235361.20Liouville\">Liouville PR</a>, I am wondering about preferred style.  Below is an example: which form is preferred for the PR?</p>\n<p>Note that in this case, the truth of the lemma is \"trivial\".  My question applies to these kinds of lemmas.  I am definitely not asking this question about proof with \"mathematical content\".</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- readable form</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_mul_C_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">coeff_mul_C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_eq_zero_of_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">nat.le_pred_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">nat_degree</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">hn.trans_le</span> <span class=\"n\">n0.le</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.pred_lt</span> <span class=\"n\">n0</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- halfway readable</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_mul_C_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.coeff_mul_C</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_eq_zero_of_left</span> <span class=\"o\">((</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">nat.le_pred_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">nat_degree</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">hn.trans_le</span> <span class=\"n\">n0.le</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.pred_lt</span> <span class=\"n\">n0</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- totally obscure</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_mul_C_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"n\">coeff_mul_C</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>  <span class=\"o\">(</span><span class=\"n\">mul_eq_zero_of_left</span>  <span class=\"o\">((</span><span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">nat.le_pred_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n   <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">nat_degree</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"o\">(</span><span class=\"n\">hn.trans_le</span> <span class=\"n\">n0.le</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">nat.pred_lt</span> <span class=\"n\">n0</span><span class=\"o\">)))</span>   <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 226257218,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613237962
    },
    {
        "content": "<p>My personal preference would be the middle version. I find the last version intimidating from a maintenance point of view</p>",
        "id": 226258184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613239049
    },
    {
        "content": "<p>Is there any way to use <code>calc</code> for the initial inequality stuff?</p>",
        "id": 226258260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613239111
    },
    {
        "content": "<p>Ok, I will aim for the halfway style.</p>\n<p>As for calc, in this specific case, I think that there might not be enough \"calc\" stuff, but I will keep it in mind for similar lemmas that do have a succession of inequalities.</p>",
        "id": 226258670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613239529
    },
    {
        "content": "<p>(I am a little intimidated by calc, hence my small resistance!)</p>",
        "id": 226258727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613239568
    },
    {
        "content": "<p>I went for a style in-between the verbose and the halfway incomprehensible: PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6224\">#6224</a>.</p>",
        "id": 226266144,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613249148
    },
    {
        "content": "<p>Do we have nat_degree(fg)&lt;=nat_degree(f)+nat_degree(g)? It seems like this would be the most natural way to prove the above lemma</p>",
        "id": 226266477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613249517
    },
    {
        "content": "<p>Let me check!</p>",
        "id": 226266549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613249579
    },
    {
        "content": "<p>It's immediate from this</p>",
        "id": 226266562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613249597
    },
    {
        "content": "<p>actually yes!</p>\n<p><code>polynomial.nat_degree_mul_le</code></p>",
        "id": 226266656,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613249688
    },
    {
        "content": "<p>(My Lean is really slow right now, so I am having a little trouble actually checking that it works, but from the documentation it seems that it has the right assumptions!)</p>",
        "id": 226266680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613249723
    },
    {
        "content": "<p>And the nat_degree of a constant is zero I should think</p>",
        "id": 226266683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613249728
    },
    {
        "content": "<p>And then you can abuse d+0 defeq to d</p>",
        "id": 226266707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613249759
    },
    {
        "content": "<p>Lean is now working again and this is a proof along your lines, Kevin:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_C_mul_le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_degree_mul_le.trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_iff_nonpos_left.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_zero_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_C</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 226266877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613249979
    },
    {
        "content": "<p>I made a git mess on my computer: I will push this proof tomorrow!</p>\n<p>Thanks for the suggestion, Kevin!</p>",
        "id": 226267555,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613250612
    },
    {
        "content": "<p>Here's a calc proof for Bryan:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_mul_C_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree_mul_le</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_C</span> <span class=\"n\">a</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f.nat_degree</span> <span class=\"o\">:</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 226268776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613252012
    },
    {
        "content": "<p><code>calc</code> proofs are very nice!</p>",
        "id": 226272113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613254695
    },
    {
        "content": "<p>I pushed a version of the PR where all three proofs use calc mode!</p>",
        "id": 226285465,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613277505
    }
]