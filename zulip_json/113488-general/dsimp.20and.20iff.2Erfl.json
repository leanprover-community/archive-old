[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/6935\">#6935</a>, Yury discusses the following set of lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_image2_eq</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">image2</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>  <span class=\"kd\">lemma</span> <span class=\"n\">mem_image2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">image2</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>\n<p>They are currently like that in <code>data/set/basic.lean</code>. Yury suggests to move the <code>simp</code> attribute to the other lemma, to make sure that it can be used by <code>dsimp</code>. I don't have an opinion on this, except that <code>eq</code> lemmas on Prop like this seem a little odd. I am wondering why we have these two lemmas, and why <code>dsimp</code> is designed to not use <code>iff.rfl</code> lemmas. Comments welcome!</p>",
        "id": 232281471,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1617029746
    },
    {
        "content": "<p>I don't know why <code>dsimp</code> can't use <code>iff.rfl</code> lemmas and if it's hard to make it work.</p>",
        "id": 232286267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617031422
    },
    {
        "content": "<p>dsimp will only use lemmas proved by the literal string <code>rfl</code></p>",
        "id": 232296425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617035577
    },
    {
        "content": "<p>not <code>by refl</code> or <code>eq.refl _</code> or <code>@rfl _ _</code></p>",
        "id": 232296492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617035605
    },
    {
        "content": "<p>This is a magic word that triggers the <code>@[_refl_lemma]</code> attribute</p>",
        "id": 232296550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617035639
    },
    {
        "content": "<p>You can also set the <code>_refl_lemma</code> attribute yourself. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232296692,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617035691
    },
    {
        "content": "<p>There's no fundamental reason why <code>iff.rfl</code> isn't accepted.  A PR in that direction would be accepted (est. effort ~10 lines + 5 lines test).</p>",
        "id": 232296750,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617035726
    },
    {
        "content": "<p>oh wow, <code>dsimp</code> just doesn't care</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[_refl_lemma]</span> <span class=\"c1\">-- sure, why not?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span> <span class=\"c1\">-- no problem</span>\n  <span class=\"c1\">-- ⊢ x + (y + z) = x + (y + z)</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished!</span>\n<span class=\"kd\">end</span> <span class=\"c1\">-- wait a minute...</span>\n</code></pre></div>",
        "id": 232297560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036115
    },
    {
        "content": "<p>w00t</p>",
        "id": 232297929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617036282
    },
    {
        "content": "<p>Will lemmas proved by <code>iff.rfl</code> cause failures in situations when <code>dsimp</code> vs <code>simp</code> is really important?</p>",
        "id": 232298632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617036552
    },
    {
        "content": "<p>E.g., in some complex goal with dependent types etc.</p>",
        "id": 232298690,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617036579
    },
    {
        "content": "<p>This is great -- all our motive is not type correct problems are now solved, right?</p>",
        "id": 232327810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617048438
    },
    {
        "content": "<p>Not yet. We have a <em>proposed solution</em>. It was neither <em>implemented</em>, nor <em>tested</em>.</p>",
        "id": 232327981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617048506
    },
    {
        "content": "<p>I think Mario tested it already :-/ (not at lean right now but I have a bad feeling based on his comments...)</p>",
        "id": 232328176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617048589
    },
    {
        "content": "<p>I tried a PR for this at <a href=\"https://github.com/leanprover-community/lean/pull/723\">leanprover-community/lean#723</a></p>",
        "id": 285446062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654718616
    }
]