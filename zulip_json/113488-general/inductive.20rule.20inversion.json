[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm trying to use Lean to prove stuff about a simple expression language <code>e ::= zero | succ(e) | true | false</code>. The language has types, so e.g. <code>e: nat =&gt; succ(e): nat</code>. I'm trying to prove the inversion of one of the inductive rules, so <code>succ(e): nat =&gt; e: nat</code> like the following, but I'm not sure how to say that 'only one of the rules in the inductive definition can possibly apply'. Sorry if this is a super basic question <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">exp</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">true_</span><span class=\"o\">:</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">false_</span><span class=\"o\">:</span> <span class=\"n\">exp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">typ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"o\">:</span> <span class=\"n\">typ</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span><span class=\"o\">:</span> <span class=\"n\">typ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">has_typ</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">has_typ</span> <span class=\"n\">exp.zero</span> <span class=\"n\">typ.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">):</span> <span class=\"n\">has_typ</span> <span class=\"n\">e</span> <span class=\"n\">typ.nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_typ</span> <span class=\"o\">(</span><span class=\"n\">exp.succ</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">typ.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">true_</span><span class=\"o\">:</span> <span class=\"n\">has_typ</span> <span class=\"n\">exp.true_</span> <span class=\"n\">typ.bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">false_</span><span class=\"o\">:</span> <span class=\"n\">has_typ</span> <span class=\"n\">exp.true_</span> <span class=\"n\">typ.bool</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inversion_succ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typing</span><span class=\"o\">:</span> <span class=\"n\">has_typ</span> <span class=\"o\">(</span><span class=\"n\">exp.succ</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">typ.nat</span><span class=\"o\">):</span> <span class=\"n\">has_typ</span> <span class=\"n\">e</span> <span class=\"n\">typ.nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">typing</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_typ.zero</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_typ.succ</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">typing_ih</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_typ.true_</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_typ.false_</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232063097,
        "sender_full_name": "Ariel Davis",
        "timestamp": 1616819810
    },
    {
        "content": "<p>try <code>cases typing</code></p>",
        "id": 232063300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616820092
    },
    {
        "content": "<p>Incidentally, your inversion theorem can be strengthened to <code>has_typ (exp.succ e) A -&gt; A = typ.nat /\\ has_typ e typ.nat</code></p>",
        "id": 232063361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616820159
    },
    {
        "content": "<p>also, <code>true</code> is not a keyword, so you don't have to use <code>true_</code></p>",
        "id": 232063377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616820197
    },
    {
        "content": "<p>great, thanks :D</p>",
        "id": 232074838,
        "sender_full_name": "Ariel Davis",
        "timestamp": 1616833918
    }
]