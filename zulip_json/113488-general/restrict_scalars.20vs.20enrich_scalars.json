[
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/7807\">#7807</a> in which I propose adding a trivial (but useful!) equiv. While I was there I decided to update a doc string and as a result of writing it I now wonder if we could save some confusion by renaming what we currently call <code>restrict_scalars</code> to <code>enrich_scalars</code>.</p>",
        "id": 241172703,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622650716
    },
    {
        "content": "<p>Here's the relevant doc string:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A type synonym representing the functor from the category of modules over `A`, regarded as a</span>\n<span class=\"sd\">(semi)ring, to the category of modules over `A`, regarded as an `R`-algebra.</span>\n\n<span class=\"sd\">Warning: use this type synonym judiciously! Often what one wants instead of `restrict_scalars` is</span>\n<span class=\"sd\">actually the following setup:</span>\n<span class=\"sd\">`[comm_semiring R] [semiring A] [algebra R A] [module R M] [module A M] [is_scalar_tower R A M]` (*)</span>\n<span class=\"sd\">which is just the way of saying \"let `M` be a module over the `R`-algebra `A`\".</span>\n\n<span class=\"sd\">Mathematically, when `A` is an `R`-algebra, there are two different functors:</span>\n<span class=\"sd\"> 1. The functor from the category of modules over the (semi)ring `A` to the category of modules over</span>\n<span class=\"sd\">    the `R`-algebra `A`. This is what is defined here, and is called `restrict_scalars` (though</span>\n<span class=\"sd\">    perhaps a better name would be `enrich_scalars`).</span>\n<span class=\"sd\"> 2. The functor from the category of modules over the `R`-algebra `A` to the category of modules</span>\n<span class=\"sd\">    over the (semi)ring `R`. This is the true restriction of scalars but when one uses the setup (*)</span>\n<span class=\"sd\">    above, it is invisible functor available for free through typeclass inference.</span>\n\n<span class=\"sd\">A standard example of when one might want to invoke 1 would be if one has a vector space over a</span>\n<span class=\"sd\">field of characteristic zero and wishes to make use of the `ℚ`-algebra structure. -/</span>\n<span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">restrict_scalars</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 241172829,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622650794
    },
    {
        "content": "<p>Just to make things more confusing, I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.comap\">docs#algebra.comap</a> is exactly the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars\">docs#restrict_scalars</a></p>",
        "id": 241175209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622651863
    },
    {
        "content": "<p>Or at least, they could be unified into the same type alias, because the structures they confer are defeq</p>",
        "id": 241175294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622651886
    },
    {
        "content": "<p>Yes, it's essentially the same.</p>",
        "id": 241175530,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652001
    },
    {
        "content": "<p>The pojnt of <code>restrict_scalars</code>, as I understand it, is not really to get a module over the <code>R</code>-algebra <code>A</code>, but mainly a module over <code>R</code>. And this operation is commonly called restriction of scalars, right?</p>",
        "id": 241175690,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622652071
    },
    {
        "content": "<p>Well I think it depends. What <code>restrict_scalars</code> actually provides is a module over the <code>R</code>-algebra <code>A</code>. Because of how we set things up, once you have a module over an <code>R</code>-algebra <code>A</code>, you can invisibly restrict scalars to get an <code>R</code>-module. However I don't know what the person who invokes it wants until they use it.</p>",
        "id": 241175981,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652216
    },
    {
        "content": "<p>E.g., we could have some theorem somehwere which demands the following: <code>(K L V : Type*) [field K] [field L] [algebra K L] [add_comm_group V] [module K V] [module L V] [is_scalar_tower K L V]</code>.</p>",
        "id": 241176402,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652379
    },
    {
        "content": "<p>If we only have <code>[field L] [char_zero L] [add_comm_group V] [module L V]</code> then we can use such a theorem on <code>restrict_scalars ℚ L V</code>.</p>",
        "id": 241176508,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652435
    },
    {
        "content": "<p>So I claim that <code>restrict_scalars</code> is really _enriching_ the scalars.</p>",
        "id": 241176534,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652449
    },
    {
        "content": "<p>It's enriching them with extra typeclasses but restricting them to a type of (usually) smaller cardinality, right?</p>",
        "id": 241176905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622652637
    },
    {
        "content": "<p>I'm a little confused by the discussion above - isn't the whole point of <code>restrict_scalars R A M</code> to provide a <code>module R M</code> instance when only <code>module A M</code> is available?</p>",
        "id": 241176994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622652697
    },
    {
        "content": "<p>I agree that it is enriching the scalars, in the sense that instead of having one scalar field now we have two. But in most cases the new field <code>L</code> is a subfield of the original one <code>K</code>, so the new action consists in forgetting how a bunch of elements act (the ones in <code>K \\ L</code>). In this sense, you are forgetting information, and I think that's why is called scalar restriction. In any case, it's standard math terminology, so I don't think it would make sense to change our naming here.</p>",
        "id": 241177025,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622652715
    },
    {
        "content": "<p>I absolutely do not want to diverge from standard math terminology. In fact I want to get back to it since I think we are applying it incorrectly in this case and it causes confusion.</p>",
        "id": 241177215,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652819
    },
    {
        "content": "<blockquote>\n<p>In this sense, you are forgetting information, </p>\n</blockquote>\n<p>well, for <code>[algebra L K] [module K M]</code>, the instance <code>module K (restrict_scalars L K M)</code> still exists, so the action of elements in <code>K \\ L</code> hasn't been forgotten</p>",
        "id": 241177430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622652920
    },
    {
        "content": "<p>Right!</p>",
        "id": 241177455,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622652937
    },
    {
        "content": "<p>Without any mathematical training to ground my interpretation, I read \"restrict_scalars R A M\" as <em>\"provide <code>M</code> with a new action by the restricted \"set\" <code>R</code> of elements from <code>A</code>\"</em></p>",
        "id": 241177648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622653041
    },
    {
        "content": "<p>I claim that mathematically, the data required to perform restriction of scalars is a module over an algebra. What we currently call <code>restrict_scalars</code> allows us to get this data if somehow (e.g., vector space over field of char 0) we are not explicitly in this situation and want to get there.</p>",
        "id": 241177661,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622653048
    },
    {
        "content": "<p>Once we are there, we _may_ then use this data to restrict scalars or we may not.</p>",
        "id": 241177694,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622653064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/restrict_scalars.20vs.20enrich_scalars/near/241177648\">said</a>:</p>\n<blockquote>\n<p>Without any mathematical training to ground my interpretation, I read \"restrict_scalars R A M\" as <em>\"provide <code>M</code> with a new action by the restricted \"set\" <code>R</code> of elements from <code>A</code>\"</em></p>\n</blockquote>\n<p>I agree with this. If everyone (except me) reads it this way then we're fine as we are.</p>",
        "id": 241177835,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622653125
    },
    {
        "content": "<p>I'd note that probably <code>restrict_scalars</code> shouldn't  ever appear in a lemma or definition statement, only in a proof / implementation</p>",
        "id": 241177838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622653127
    },
    {
        "content": "<p>Technically I think it could but I agree that is the right rule of thumb.</p>",
        "id": 241177894,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622653163
    }
]