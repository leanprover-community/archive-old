[
    {
        "content": "<p>Consider the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">*</span>\n</code></pre></div>\n<p>Puzzle 1: Explain why <code>simp</code> succesfully proves this. (I will post the solution below.)<br>\nPuzzle 2: Is there any <code>simp only [h, ...]</code> invocation that solves this, using only lemmas that <code>simp*</code> used? <code>simp only [h, set.image]</code> works but doesn't count, because <code>simp*</code> didn't unfold <code>set.image</code>. (I have no idea how to do it / whether this is possible.)</p>\n<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib/issues/7250\">#7250</a>.</p>",
        "id": 235117311,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618796542
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution to puzzle 1</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>simp</code> uses the congr-lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_congr\">docs#set.image_congr</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">image_congr</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">''</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Therefore, it can use the hypothesis <code>h</code> to rewrite inside <code>set.image</code>.</p>\n</div></div>",
        "id": 235117416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618796692
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Thoughts on puzzle 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<ul>\n<li><code>squeeze_simp</code> and <code>simp?</code> give (different) outputs that both fail to complete the goal.</li>\n<li>Interestingly, <code>simp [*, - set.image_congr]</code> also fails to complete the goal</li>\n<li><code>simp only [h, set.image_congr]</code> or something similar doesn't work. Is there a bug here that we cannot add <code>@[congr]</code> lemmas to the simp-set, only remove them?</li>\n</ul>\n</div></div>",
        "id": 235117648,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618796992
    },
    {
        "content": "<p>congr lemmas aren't part of the simp set</p>",
        "id": 235117802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618797145
    },
    {
        "content": "<p>But <code>simp [h, - set.image_congr]</code> removes <code>set.image_congr</code> from something (the congr-set?). Can we make it so that <code>simp only [h, set.image_congr]</code> adds <code>set.image_congr</code> to that set?</p>",
        "id": 235118342,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618797734
    },
    {
        "content": "<p>isn't that ambiguous? <code>set.image_congr</code> is a very bad simp lemma</p>",
        "id": 235118362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618797769
    },
    {
        "content": "<p>actually it's probably ineligible</p>",
        "id": 235118377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618797787
    },
    {
        "content": "<p>Maybe it is ambiguous, but can we allow <code>simp</code> to use <code>congr</code>-lemmas from the provided names? Currently it seems like we have a thing that <code>simp</code> can do but no <code>simp only [...]</code> invocation can do, which is bad when using <code>squeeze_simp</code>.</p>",
        "id": 235118584,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618797974
    },
    {
        "content": "<p>I think the functionality is a good idea but I'm not sure how to make the syntax work</p>",
        "id": 235119863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618799469
    },
    {
        "content": "<p>we could do something like <code>simp only [lemmas...] using congr [lemmas...]</code>?</p>",
        "id": 235119924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618799535
    }
]