[
    {
        "content": "<p>elan doesn't seem to have any documentation for installing 3.4, and there's no example sheets for lean4 so I don't feel like using it...<br>\nany tips?</p>",
        "id": 284188313,
        "sender_full_name": "Aron",
        "timestamp": 1653687954
    },
    {
        "content": "<p>Lean 3.4? We're on 3.42 already</p>",
        "id": 284188402,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653688002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/installing.203.2E4/near/284188402\">said</a>:</p>\n<blockquote>\n<p>Lean 3.4? We're on 3.42 already</p>\n</blockquote>\n<p>Yes, 3.42.</p>",
        "id": 284188471,
        "sender_full_name": "Aron",
        "timestamp": 1653688068
    },
    {
        "content": "<p>3.43 actually</p>",
        "id": 284188479,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653688074
    },
    {
        "content": "<p>Whichever one they stopped on.</p>",
        "id": 284188550,
        "sender_full_name": "Aron",
        "timestamp": 1653688099
    },
    {
        "content": "<p>Either I'm living in the past, or Violeta is living in the future :)</p>",
        "id": 284188551,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653688100
    },
    {
        "content": "<p>That and If you're just not interested in Lean 4 because there are no examples, we have quite a nice ressource available here already: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> the reason people pick Lean 3 over 4 at the moment is mostly that the former has mathlib while the latter doesnt have mathlib but all the sparkly new features.</p>",
        "id": 284188555,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653688104
    },
    {
        "content": "<p>Lean 3.4 is the last \"official\" version, but the community has been maintaining the core library in the meanwhile</p>",
        "id": 284188601,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653688141
    },
    {
        "content": "<p>And those \"non-official\" versions are the ones used by mathlib</p>",
        "id": 284188630,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653688173
    },
    {
        "content": "<p>So they're basically official as far as I care :P</p>",
        "id": 284188649,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653688184
    },
    {
        "content": "<p>On an unrelated note, how would I use the usual toolchain to write \"exists unique\" in lean4? \\ex ! doesn't seem to work. Is exunique not implemented in lean4?</p>",
        "id": 284190181,
        "sender_full_name": "Aron",
        "timestamp": 1653689217
    },
    {
        "content": "<p>Its at least no implemented in the core library, I dont know if its in the mathlib4 stub from the top of my head (though it would of course be easy to define yourself)</p>",
        "id": 284190440,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653689406
    },
    {
        "content": "<p>Is it possible to do so without requiring <code>BEq</code>?</p>",
        "id": 284190505,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653689467
    },
    {
        "content": "<p>Sure the definition is straightforward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 284190989,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653689909
    },
    {
        "content": "<p>Oh, right, I confused some concepts! Thanks :D</p>",
        "id": 284191108,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653690018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/installing.203.2E4/near/284190989\">said</a>:</p>\n<blockquote>\n<p>Sure the definition is straightforward:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Trying to apply it is causing problems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">exunique</span> <span class=\"n\">l</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">l</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.93</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.92</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 284202934,
        "sender_full_name": "Aron",
        "timestamp": 1653703302
    },
    {
        "content": "<p>Is this Lean 4? You might have more luck on the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream</p>",
        "id": 284206774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653708430
    },
    {
        "content": "<p>You need a lambda expression to bind <code>l</code></p>",
        "id": 284304322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653856792
    }
]