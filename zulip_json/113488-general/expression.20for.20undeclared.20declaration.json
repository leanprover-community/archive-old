[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">has_bind.seq (tactic.save_info {line := 102, column := 9})</span>\n<span class=\"cm\">  (tactic.step</span>\n<span class=\"cm\">     (tactic.interactive.rw</span>\n<span class=\"cm\">        {rules := [{pos := {line := 102, column := 12}, symm := ff, rule := ``(foo)}], end_pos := none pos}</span>\n<span class=\"cm\">        (interactive.loc.ns [none]))) :</span>\n<span class=\"cm\">  tactic unit</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier &#39;foo&#39;</span>\n</code></pre></div>",
        "id": 197810429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589656610
    },
    {
        "content": "<p>why can I have ``(foo) inside rewrite but not by itself?</p>",
        "id": 197810439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589656631
    },
    {
        "content": "<p>and what exactly does it do? I tried <code>pp.all</code> but it's still ``(foo)</p>",
        "id": 197810492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589656698
    },
    {
        "content": "<p>You <em>could</em> have <code>``(foo)</code> directly, but lean doesn't let you on purpose</p>",
        "id": 197810729,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657057
    },
    {
        "content": "<p>Someone just wrote code which checks this</p>",
        "id": 197810735,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657082
    },
    {
        "content": "<p>To catch mistakes</p>",
        "id": 197810737,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657088
    },
    {
        "content": "<p>And it is convenient when, while you're writing your tactic, to write  <code>``(foo)</code> and mean the <code>foo</code> which is currently in-scope, so lean secretly does the replacement <code>foo</code> -&gt; <code>my.namspace.foo</code></p>",
        "id": 197810761,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657151
    },
    {
        "content": "<p>See:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">ff</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">[]))</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">)</span>\n<span class=\"n\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197810883,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657308
    },
    {
        "content": "<p>They print the same</p>",
        "id": 197810889,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657316
    },
    {
        "content": "<p>Without the <code>to_raw_fmt</code>s they print differently, but just because of secret macros wrapped around the latter (is my understanding)</p>",
        "id": 197811001,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589657496
    },
    {
        "content": "<p>The actual equivalent is <code>```(foo)</code></p>",
        "id": 197812502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659630
    },
    {
        "content": "<p>to do the same as <code>`[rw foo]</code> would be something like <code>to_expr ```(foo) &gt;&gt;= \\lam h, rewrite_goal h</code></p>",
        "id": 197812530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589659673
    }
]