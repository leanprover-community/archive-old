[
    {
        "content": "<p>I think mathlib should adopt notation for <code>ennreal</code>, which is hard to parse if you first see it. On paper I would write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>. You cannot define custom notation with <code>,</code> so I suggest the notation <code>[0..∞]</code>.</p>\n<p>I started this on <a href=\"https://github.com/leanprover-community/mathlib/tree/ennreal-notation\">branch#ennreal-notation</a>, but I wanted to check if there are any objections before changing it everywhere.</p>",
        "id": 224928108,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612296162
    },
    {
        "content": "<p>I certainly agree <code>ennreal</code> is hard to read.</p>",
        "id": 224928404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612296264
    },
    {
        "content": "<p>I think your suggestion is fine. It's pretty self-explanatory.</p>",
        "id": 224928704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612296405
    },
    {
        "content": "<p>My first thought when seeing this notation is that it means <code>Icc 0 ∞</code>.  I would have expected <code>ℝ⁺∞</code> or <code>ℝ≥0∞</code> for the type.  But that's just my first impression.</p>",
        "id": 224928737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612296421
    },
    {
        "content": "<p>There is a similar question for the intervals <code>Ixx</code>. This is a bit trickier, since we cannot use parentheses in notation. We could do something similar to Isabelle, which uses <code>{..&lt;u}</code>, <code>{l..}</code>, and <code>{l&lt;..u}</code> for <code>Iio u</code>, <code>Ici l</code> and <code>Ioc l u</code>. <br>\nWe could use <code>≤</code> as well: <code>{..&lt;u}</code>, <code>{l≤..}</code>, and <code>{l&lt;..≤u}</code></p>",
        "id": 224929210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612296624
    },
    {
        "content": "<p>I don't think this works in Lean 3, <code>{..u}</code> is already taken, and we can't realistically override <code>{</code>.</p>",
        "id": 224929501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612296755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20ennreal/near/224928737\">said</a>:</p>\n<blockquote>\n<p>My first thought when seeing this notation is that it means <code>Icc 0 ∞</code>.  I would have expected <code>ℝ⁺∞</code> or <code>ℝ≥0∞</code> for the type.  But that's just my first impression.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> something like that is possible too, but I prefer <code>[0..∞]</code>.</p>",
        "id": 224929510,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612296760
    },
    {
        "content": "<p>Oh, good point. Maybe with square brackets? Though that might also conflict with other notation and I'm not sure if that is more readable then.</p>",
        "id": 224929584,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612296799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20ennreal/near/224928737\">said</a>:</p>\n<blockquote>\n<p>My first thought when seeing this notation is that it means <code>Icc 0 ∞</code>.  I would have expected <code>ℝ⁺∞</code> or <code>ℝ≥0∞</code> for the type.  But that's just my first impression.</p>\n</blockquote>\n<p>Hmm, I like <code>ℝ≥0∞</code> as well... it's more in line with the notation for <code>nnreal</code>.</p>",
        "id": 224929707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612296844
    },
    {
        "content": "<p>As types, are <code>Icc 0 (info : ereal)</code> and <code>ennreal</code> isomorphic?</p>",
        "id": 224932319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612297986
    },
    {
        "content": "<p>At least, the <code>..</code> is not a real issue, you can use any unicode variant like <code>…</code> (I just typed <code>\\ldots</code> in vscode, and it gave me this)</p>",
        "id": 224932582,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612298087
    },
    {
        "content": "<p>And you can use fancy brackets like <code>⟮</code> for the end of the interval.</p>",
        "id": 224932776,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612298178
    },
    {
        "content": "<p>Out of interest, will we be able to do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> in Lean 4?</p>",
        "id": 224935624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612299586
    },
    {
        "content": "<p>PS I am also very happy with the <code>[0..\\infty]</code> idea.</p>",
        "id": 224935730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612299613
    },
    {
        "content": "<p>/poll What should the notation for ennreal be?<br>\n[0..∞]<br>\nℝ≥0∞</p>",
        "id": 224937292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612300344
    },
    {
        "content": "<p>I used <code>ℝ≥0∞</code> following the majority in <a href=\"https://github.com/leanprover-community/mathlib/issues/6044\">#6044</a></p>",
        "id": 225209493,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612466827
    },
    {
        "content": "<p>I would like to define a shortcut for the ennreal notation, such that typing \\ennreal writes <code>ℝ≥0∞</code>, like what we already have for nnreal, for which typing \\nnreal produces <code>ℝ≥0</code>. However I don't know where those things are defined. Can someone help me do that?</p>",
        "id": 225545890,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612792062
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json\">https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json</a></p>",
        "id": 225546745,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612792465
    },
    {
        "content": "<p>PRs welcome.</p>",
        "id": 225546752,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612792467
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 225547053,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612792624
    }
]