[
    {
        "content": "<p>Quite often a long list of <code>rw</code> works equally well with a <code>simp only</code> tactic: for instance, in my code, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">minor_map</span><span class=\"o\">,</span> <span class=\"n\">minor_minor</span><span class=\"o\">,</span> <span class=\"n\">equiv.self_comp_symm</span><span class=\"o\">,</span> <span class=\"n\">minor_id_id</span><span class=\"o\">,</span> <span class=\"n\">map_map</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>and I can equally well write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minor_map</span><span class=\"o\">,</span> <span class=\"n\">minor_minor</span><span class=\"o\">,</span> <span class=\"n\">equiv.self_comp_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.self_comp_symm</span><span class=\"o\">,</span> <span class=\"n\">minor_id_id</span><span class=\"o\">,</span> <span class=\"n\">map_map</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>to obtain the same result. I wonder which is considered nicer: on a one hand, <code>rw</code> seems (to me) more basic a tactic than <code>simp only</code>, so it looks more elegant; on the other, to make the <code>rw</code> work I have to repeat <code>equiv.self_comp_symm</code> twice, and it makes it less elegant... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span aria-label=\"tie\" class=\"emoji emoji-1f454\" role=\"img\" title=\"tie\">:tie:</span></p>",
        "id": 243806454,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624549877
    },
    {
        "content": "<p>Yet another alternative is <code>simp_rw</code>, which is basically <code>rw</code> on steroids. But, as opposed to <code>simp only</code>, it will try the lemmas in order, and ,not cycle.</p>",
        "id": 243807406,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1624550298
    },
    {
        "content": "<p>Well, I normally use <code>simp_rw</code> when I need to <code>rw</code> inside binders, which <code>simp_rw</code> can do and <code>rw</code> can't. But you're right, one more option...</p>",
        "id": 243807901,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624550510
    },
    {
        "content": "<p>The advantage of <code>rw</code> is you can stick your cursor in the proof to see how the goal evolves after each step</p>",
        "id": 243809509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624551308
    },
    {
        "content": "<p>I personally prefer <code>rw</code> until I have to start repeating, and then I'll just use <code>simp only</code> (I've never tried <code>simp_rw</code> with repeats...)</p>",
        "id": 243812937,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624552819
    },
    {
        "content": "<p>I think <code>simp_rw</code> also needs repeats.</p>",
        "id": 243814452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624553529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/rw.20or.20simp.20only/near/243809509\">said</a>:</p>\n<blockquote>\n<p>The advantage of <code>rw</code> is you can stick your cursor in the proof to see how the goal evolves after each step</p>\n</blockquote>\n<p>Oh, yes, this seems a very good point. OK, I'll stick to <code>rw</code> as long as I can, and only switch to <code>simp only</code> when repetitions arise.</p>",
        "id": 243853327,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624572732
    }
]