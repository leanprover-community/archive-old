[
    {
        "content": "<p>Sometimes when you use <code>structure ...</code>, Lean decides to create an <code>inductive ...</code> instead. Is there a description available of how it decides this?</p>",
        "id": 257508688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634205240
    },
    {
        "content": "<p>What do mean by \"sometimes\"?  Lean <em>always</em> creates an inductive for a structure.</p>",
        "id": 257509094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634205464
    },
    {
        "content": "<p>ah, but doesn't create \"structure notation\" and projections.</p>",
        "id": 257509188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634205502
    },
    {
        "content": "<p>(and when you #print the <code>structure</code>, it shows <code>inductive ...</code> rather than <code>structure ...</code>)</p>",
        "id": 257509281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634205567
    },
    {
        "content": "<p>Unfortunately my example is on a messy branch. I will see if I can extract it.</p>",
        "id": 257509306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634205582
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/tree/alg_equiv_old_structure_cmd\">branch#alg_equiv_old_structure_cmd</a>, in <code>algebra/algebra/basic.lean</code>, I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An equivalence of algebras is an equivalence of rings commuting with the actions of scalars. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">to_ring_equiv</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">to_ring_equiv.to_fun</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">alg_equiv</span>\n</code></pre></div>\n<p>and it is saying <code>inductive alg_equiv ...</code>.</p>",
        "id": 257510140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634205977
    },
    {
        "content": "<p>(and structure syntax, i.e. <code>{ to_ring_equiv := ..., commutes' := ... }</code>, is not available)</p>",
        "id": 257510237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206033
    },
    {
        "content": "<p>Hmm, this looks like a bug.  But the example looks fairly innocent, I wonder why we haven't run into it so far.</p>",
        "id": 257510501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634206191
    },
    {
        "content": "<p>Okay, I need to head off this evening, but I will think about it more later. Thanks!</p>",
        "id": 257510587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634206228
    }
]