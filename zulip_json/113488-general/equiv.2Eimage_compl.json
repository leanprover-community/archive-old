[
    {
        "content": "<p>Do we have <code>example (f : equiv a b) (s : set a) : f '' -s = - f '' s</code> hidden somewhere?</p>",
        "id": 124501726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522617833
    },
    {
        "content": "<p>(or not hidden would also be good)</p>",
        "id": 124501766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522617870
    },
    {
        "content": "<p>Didn't this come up earlier?</p>",
        "id": 124501930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522618321
    },
    {
        "content": "<p>You asked about this identity and we found it wasn't there, then you wrote a proof</p>",
        "id": 124501972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522618338
    },
    {
        "content": "<p>Really?</p>",
        "id": 124501974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618349
    },
    {
        "content": "<p>I'm trying to get back to doing Lean, but I forgot where I stopped</p>",
        "id": 124501980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618376
    },
    {
        "content": "<p>But I don't see that one in my file</p>",
        "id": 124501988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618390
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/image.20of.20complement/near/123655801\" title=\"#narrow/stream/113488-general/subject/image.20of.20complement/near/123655801\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/image.20of.20complement/near/123655801</a></p>",
        "id": 124502043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522618455
    },
    {
        "content": "<p>Ok, I can see I already asked the question</p>",
        "id": 124502045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618497
    },
    {
        "content": "<p>But I don't see my proof there</p>",
        "id": 124502051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618508
    },
    {
        "content": "<p>So presumably I never proved it</p>",
        "id": 124502052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618515
    },
    {
        "content": "<p>because real life caught me</p>",
        "id": 124502055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522618521
    },
    {
        "content": "<p>This is so painful</p>",
        "id": 124502328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522619162
    },
    {
        "content": "<p>I give up for tonight. I'm stuck at proving that if b is not in the image of S then its preimage is not in S</p>",
        "id": 124502482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522619426
    },
    {
        "content": "<p>I had a new idea while feeding the cat, so now I'm stuck at <code>example (f : equiv α β) (b) : f (f.inv_fun b) = b := sorry</code></p>",
        "id": 124503021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620706
    },
    {
        "content": "<p><code>f.right_inv b</code>?</p>",
        "id": 124503061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522620732
    },
    {
        "content": "<p>This so frustrating <span class=\"emoji emoji-1f479\" title=\"ogre\">:ogre:</span></p>",
        "id": 124503062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620754
    },
    {
        "content": "<p>that's funny (and frustrating). I tried a million variations on <code>rw f.right_inv b</code> in my main proof</p>",
        "id": 124503067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620816
    },
    {
        "content": "<p>it always fail</p>",
        "id": 124503068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620825
    },
    {
        "content": "<p>but when you extract the statement as a lemma it works</p>",
        "id": 124503069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620838
    },
    {
        "content": "<p>maybe if you stop writing <code>f.to_fun</code> as <code>f</code> then <code>rw</code> will work</p>",
        "id": 124503109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522620874
    },
    {
        "content": "<p>I did not write this</p>",
        "id": 124503110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620891
    },
    {
        "content": "<p>even inside conversion mode it fails</p>",
        "id": 124503158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522620968
    },
    {
        "content": "<p>I think this is the most ridiculous proof I ever wrote in Lean. The ratio \"ugliness of proof\"/\"triviality of statement\" is probably my worse so far</p>",
        "id": 124503205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522621129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fuck</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">image_compl</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">b_in_image_compl</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">b_in_image_compl</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_compl_s</span><span class=\"o\">,</span> <span class=\"n\">f_a_b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_iff_eq_inverse_apply</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">f_a_b</span> <span class=\"n\">at</span> <span class=\"n\">a_compl_s</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mem_image_iff_of_inverse</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">a_compl_s</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subset_def</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">b_in_compl_image</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mem_image_iff_of_inverse</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">b_not_in_image</span> <span class=\"o\">:=</span> <span class=\"n\">not_mem_of_mem_compl</span> <span class=\"n\">b_in_compl_image</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fuck</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 124503210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522621165
    },
    {
        "content": "<p>But at least Lean was defeated</p>",
        "id": 124503212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522621200
    },
    {
        "content": "<p>Actually, I recommend not using <code>f.right_inv</code> in favor of the coercions</p>",
        "id": 124503802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522622712
    },
    {
        "content": "<p>Another example of mathematicians getting very frustrated about how sometimes something which is \"trivial in maths\" can be hard in Lean.</p>",
        "id": 124504087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623434
    },
    {
        "content": "<p>In the long term these really need to be fixed somehow</p>",
        "id": 124504088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623449
    },
    {
        "content": "<p>if CS people want mathematicians to use the software.</p>",
        "id": 124504090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623462
    },
    {
        "content": "<p>And funnily enough, just the same thing happened to me with rw</p>",
        "id": 124504131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623528
    },
    {
        "content": "<p>I don't think it will ever happen that a mathematician using this or another theorem prover and will, 100% of the time, think \"this is trivial\" and have the prover confirm that (when the statement is true).</p>",
        "id": 124504132,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522623531
    },
    {
        "content": "<p>no, with exact</p>",
        "id": 124504133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623535
    },
    {
        "content": "<p><code>exact (congr_fun H HUigx)</code> failed (type mismatch)</p>",
        "id": 124504140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623550
    },
    {
        "content": "<p>but <code>have H2 := congr_fun H HUigx, exact H2</code> succeeded</p>",
        "id": 124504143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522623573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I definitely think that this should happen in the future.</p>",
        "id": 124504524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624482
    },
    {
        "content": "<p>I am suggesting we meet you somewhere in the middle.</p>",
        "id": 124504526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624489
    },
    {
        "content": "<p>But if it doesn't happen then what hope is there for people to start adopting this computer viewpoint?</p>",
        "id": 124504533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624510
    },
    {
        "content": "<p>I think it's a matter of education on our part and adding lemmas on your part</p>",
        "id": 124504534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624528
    },
    {
        "content": "<p>We already saw this week how Chris couldn't prove something which was mathematically trivial, and then we found a framework for it and it became straightforward to prove</p>",
        "id": 124504574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624564
    },
    {
        "content": "<p>In that case, I think we're on the same page. In general, we probably need to build packages to better support undergraduate level mathematics and at least the basics of graduate level math.</p>",
        "id": 124504629,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522624755
    },
    {
        "content": "<p>Improving the automation and the documentation for building your own tactics will probably help you bridge the gap too.</p>",
        "id": 124504631,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522624787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I wrote a proof of this that should appear in mathlib once it finishes checking. It's not nearly as complicated as you made it, and after appropriate sublemmas it's a one-liner:</p>\n<div class=\"codehilite\"><pre><span></span>theorem image_compl_subset {f : α → β} {s : set α} (H : injective f) :\n  f &#39;&#39; -s ⊆ -(f &#39;&#39; s) :=\nsubset_compl_iff_disjoint.2 $ by simp [image_inter H]\n\ntheorem subset_image_compl {f : α → β} {s : set α} (H : surjective f) :\n  -(f &#39;&#39; s) ⊆ f &#39;&#39; -s :=\ncompl_subset_iff_union.2 $\nby rw ← image_union; simp [image_univ_of_surjective H]\n\ntheorem image_compl_eq {f : α → β} {s : set α} (H : bijective f) :\n  f &#39;&#39; -s = -(f &#39;&#39; s) :=\nsubset.antisymm (image_compl_subset H.1) (subset_image_compl H.2)\n</pre></div>",
        "id": 124507833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522632376
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. I noticed that many support lemmas were missing. I'll use my crappy version in the mean time. But I'm still very much interested in any explanation why I could not avoid having this one lemma in order to rewrite.</p>",
        "id": 124518916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522658823
    },
    {
        "content": "<p>I am not quite sure what you were doing, but I think you wrote things in a non-idiomatic way (which is to say, not the way that mathlib is designed to help with), which made the proof more painful than it should have been</p>",
        "id": 124518965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522658997
    },
    {
        "content": "<p>The idiomatic version of your <code>fuck</code> lemma is <code>f (f.symm x) = x</code> (and it's called <code>apply_inverse_apply</code>)</p>",
        "id": 124519016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522659050
    },
    {
        "content": "<p><code> rw fuck at this </code></p>",
        "id": 124519028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659114
    },
    {
        "content": "<p>i.e. <code>fuck this</code></p>",
        "id": 124519031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659119
    },
    {
        "content": "<p>I'll tell you exactly what I was doing. First my brain absolutely refuses to think in this kind of situation, it's only filled with anger. Then I search for all lemmas in mathlib which seem vaguely related and try to apply them. But I got stuck with sorts of coercions issues, and stuff like rw refuses to rewrite etc, so I'm get even more upset. So of course the proof ends up not looking like what I would write on paper (of course in the beginning I would write nothing but then I'm able to write some proof on paper)</p>",
        "id": 124519141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659262
    },
    {
        "content": "<p>But why does <code> rw f.right_inv b </code> fails?</p>",
        "id": 124519148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659305
    },
    {
        "content": "<p><code>rw</code> matches exactly the expression</p>",
        "id": 124519156,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659329
    },
    {
        "content": "<p>without any definitorial expansion</p>",
        "id": 124519157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659335
    },
    {
        "content": "<p>Something else I notice with your solution is I should have gave up on proving this on <code>equiv</code> but go back to functions and <code>bijective f</code></p>",
        "id": 124519160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659355
    },
    {
        "content": "<p>At least this removes the coercion hell</p>",
        "id": 124519200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659368
    },
    {
        "content": "<p>don't</p>",
        "id": 124519201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659383
    },
    {
        "content": "<p>the <code>bijective f</code> has no data</p>",
        "id": 124519203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659402
    },
    {
        "content": "<p>i.e. it is not constructive</p>",
        "id": 124519205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659408
    },
    {
        "content": "<blockquote>\n<p><code>rw</code> matches exactly the expression </p>\n</blockquote>\n<p>This is only correct for the expression _head_</p>",
        "id": 124519206,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522659420
    },
    {
        "content": "<p>matches the expression pattern</p>",
        "id": 124519212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659442
    },
    {
        "content": "<p>I still fail to see how this explains my situation</p>",
        "id": 124519265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659528
    },
    {
        "content": "<p>I only copied the hypothesis into the statement of a lemma, and this rw accepts to do its job</p>",
        "id": 124519276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522659577
    },
    {
        "content": "<p>kenny, <code>bijective f</code> is a precondition to the theorem. Constructively, <code>bijective f</code> is weaker than <code>equiv</code>, so the theorem is stronger</p>",
        "id": 124519374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522659783
    },
    {
        "content": "<p>well</p>",
        "id": 124519379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522659804
    },
    {
        "content": "<p>... but the proof uses excluded middle, although the theorem itself has no data anyway so it doesn't matter computation-wise</p>",
        "id": 124519430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522659900
    },
    {
        "content": "<p>It's not possible to prove the versions I stated without excluded middle</p>",
        "id": 124519479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522659969
    },
    {
        "content": "<p>Needless to say, I'm perfectly happy with excluded middle in this proof</p>",
        "id": 124519482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522660001
    },
    {
        "content": "<p>And it's even better if I can get the opportunity to deduce from this the statement for equiv which could be constructive</p>",
        "id": 124519488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522660053
    },
    {
        "content": "<p>excluded middle is an overgeneralization of the situation observed from finite situations</p>",
        "id": 124519491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522660076
    }
]