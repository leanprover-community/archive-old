[
    {
        "content": "<p>The tactic state contains a few types of information.  It contains information about local declarations and it also contains information about the environment.  The environment contains lots of information about previous definitions and other things.  It can be changed by a tactic.  The most obvious example is the <code>set_env</code>.  My question is do <em>any</em> of the interactive tactics which are used in <code>begin...end</code> blocks actually change the environment?  (Also if they do, does it have any effect on anything outside the <code>begin...end</code> block?)</p>",
        "id": 197863011,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589740790
    },
    {
        "content": "<p>The <code>environment</code> is a \"persistent\" data structure. That means that everything that appears to change it is really making a modified copy. When you undo a tactic it reverts any changes to the environment</p>",
        "id": 197863103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589740913
    },
    {
        "content": "<p>Most interactive tactics don't change the environment because they cannot effect permanent changes</p>",
        "id": 197863154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589740965
    },
    {
        "content": "<p>The determination is not whether it is in a begin end block but rather whether it is a <code>def</code> or <code>theorem</code>. A <code>theorem</code> is elaborated asynchronously, and any changes to the environment are discarded once the proof is obtained, while a <code>def</code> operates synchronously with the processing of the file, meaning that any tactics here hold up the processing of everything else, but they can change the environment, for example by adding auxiliary definitions or theorems. The <code>abstract {}</code> tactic is an interactive tactic that does this</p>",
        "id": 197863246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589741138
    },
    {
        "content": "<p>I knew the persistence thing already.  (For example a tactic never \"changes\" the goals, just makes new goals.)  But thanks for the clarification on the rest.  I think this example illustrates what you told me well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">abstract</span> <span class=\"n\">abc123</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">abc123</span><span class=\"o\">]},</span> <span class=\"c1\">-- can be called internally</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">abc123</span> <span class=\"c1\">-- 0 = 0</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">abstract</span> <span class=\"n\">abc123</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n<span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">abc123</span><span class=\"o\">]},</span> <span class=\"c1\">-- can be called internally</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">abc123</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 197864428,
        "sender_full_name": "Jason Rute",
        "timestamp": 1589742719
    },
    {
        "content": "<p>Lean actually has to inline the proofs of lemmas that were added to the environment in the middle of a <code>theorem</code>. If you <code>#print</code> foo and bar you will see that <code>foo</code> actually references <code>foo.abc123</code> but <code>bar</code> doesn't, and the proof is right there in the middle of the theorem</p>",
        "id": 197864549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589742908
    }
]