[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"n\">a</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>How does unification work? I was in the middle of something else and I wrote the first line, confident that Lean should be able to figure it out, but it didn't: I got</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch, term\n  le_refl ?m_3\nhas type\n  ?m_3 ≤ ?m_3\nbut is expected to have type\n  a ∈ {x : ℕ | x ≤ a}\n</pre></div>\n\n\n<p>What is Lean's algorithm for attempting to solve for these metavariables, and how does adding the extra <code>a</code> actually help it? The moment Lean unfolds the definitions of <code>has_mem.mem</code> and <code>set.mem</code> it can see what's going on -- but why does adding <code>a</code> push it towards doing this? Is the algorithm easy to explain or is it some arcane thing which I should never be thinking about?</p>",
        "id": 156838225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">le_refl</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">--works</span>\n</pre></div>",
        "id": 156838324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406428
    },
    {
        "content": "<p>Lean can't even figure out that we're talking about the natural numbers</p>",
        "id": 156838326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406440
    },
    {
        "content": "<p>Aah! I remember now. The <code>@</code> changes Lean's strategy doesn't it.</p>",
        "id": 156838374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406448
    },
    {
        "content": "<p>but once we tell Lean that, Lean can figure it out by itself</p>",
        "id": 156838376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406451
    },
    {
        "content": "<p>does it?</p>",
        "id": 156838379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406463
    },
    {
        "content": "<p>I am not sure it's as simple as what you say</p>",
        "id": 156838380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406466
    },
    {
        "content": "<p>I <em>think</em> the <code>@</code> changes Lean's elaboration procedure.</p>",
        "id": 156838384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406483
    },
    {
        "content": "<p>well Lean sees the head term being \"has_mem.mem\" and is like \"what? where is has_le.le?\"</p>",
        "id": 156838385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406488
    },
    {
        "content": "<p>Hey, look at us, mathematicians talking about head terms and elaboration procedures. This is progress, as far as I am concerned.</p>",
        "id": 156838395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406523
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">le_refl&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl&#39;</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"c1\">--works</span>\n</pre></div>",
        "id": 156838401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406542
    },
    {
        "content": "<p>no <code>@</code></p>",
        "id": 156838402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406544
    },
    {
        "content": "<p>Right, but when I use <code>a</code> explicitly, it must say \"OK! I can't see <code>has_le.le</code> -- let's go for the unfold option.</p>",
        "id": 156838403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406546
    },
    {
        "content": "<p>Oh so you are right.</p>",
        "id": 156838447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406571
    },
    {
        "content": "<p>It's not using <code>a</code>, it's using its type. How does this help things I wonder?</p>",
        "id": 156838451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> might we plebs be honoured by your explanation?</p>",
        "id": 156838468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548406631
    },
    {
        "content": "<p>ha ha, he logs on and within seconds he's being pestered by mathematicians :-)</p>",
        "id": 156838476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406649
    },
    {
        "content": "<p>aka plebs</p>",
        "id": 156838482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406663
    },
    {
        "content": "<p>I should re-read the bit in TPIL where it talks about <code>elab_as_eliminator</code> etc.</p>",
        "id": 156838544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406728
    },
    {
        "content": "<p>\"Lean has to rely on heuristics to determine what to unfold or reduce, and when.\"</p>",
        "id": 156838634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406813
    },
    {
        "content": "<p><em>arrives at university</em></p>\n<blockquote>\n<p>How does unification work?</p>\n</blockquote>\n<p><em>turns around and leaves</em></p>",
        "id": 156838699,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548406904
    },
    {
        "content": "<p>maybe it's hard?</p>",
        "id": 156838749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406937
    },
    {
        "content": "<p>\"using the @ symbol in front of an identifier in an expression<br>\ninstructs the elaborator to use the [elab_simple] strategy\" -- that was what I was remembering</p>",
        "id": 156838755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406947
    },
    {
        "content": "<p>But </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_simple</span><span class=\"o\">]</span> <span class=\"n\">le_refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>so it's not the <code>@</code>, as Kenny suspected.</p>",
        "id": 156838765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548406982
    },
    {
        "content": "<p><code>example (a : ℕ) : a ∈ {x : ℕ | x ≤ a} := @@le_refl _ _ -- fails</code></p>",
        "id": 156838850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407104
    },
    {
        "content": "<p>not something you see very often, the <code>@@</code></p>",
        "id": 156838865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407118
    },
    {
        "content": "<p>The first <code>_</code> in the above is expecting <code>preorder ?m_1</code> so again it seems to be a case of \"I will unfold <code>has_mem.mem</code> iff you tell me we're talking about nats\"</p>",
        "id": 156838961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407239
    },
    {
        "content": "<p>Computers are so stupid. Why are we even here? Maybe I should go back to writing references.</p>",
        "id": 156839117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you know if this is \"higher order unification\" or something else?</p>",
        "id": 156839144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407510
    },
    {
        "content": "<p>perhaps</p>",
        "id": 156839158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548407519
    },
    {
        "content": "<p>I realise I am a bit unclear about what that term even means.</p>",
        "id": 156839201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407525
    },
    {
        "content": "<p>has_le.le is a function with &gt; 0 inputs</p>",
        "id": 156839205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548407536
    },
    {
        "content": "<p>i.e. what a mathematician would call \"a function\"</p>",
        "id": 156839212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407555
    },
    {
        "content": "<p>It has taken me a year to be proficient enough at Lean to be able to start formalising basic questions about what I don't understand, and because I have learnt type theory in some weird way (by trying to use it in a random context, i.e. mathematics) there are still, I'm sure, several important things which I don't understand yet.</p>",
        "id": 156839316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407682
    },
    {
        "content": "<p>It took me a year to understand what equality was, basically, and now I'm pressing on from there.</p>",
        "id": 156839335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548407709
    },
    {
        "content": "<p>global sections of affine schemes are dependent functions</p>",
        "id": 156839392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548407765
    },
    {
        "content": "<p>This I know. As is Fermat's Last Theorem.</p>",
        "id": 156839691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548408236
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 156840744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548409543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">le_refl&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">--fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">--works</span>\n</pre></div>",
        "id": 156840862,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548409663
    },
    {
        "content": "<p>I think this must be a bug in <code>has_mem.mem</code> ;-)</p>",
        "id": 156840979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548409791
    },
    {
        "content": "<p>but unfortunately I've now made it to work so need to do something serious.</p>",
        "id": 156841033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548409824
    },
    {
        "content": "<p>Yeah, this one is a bit involved. In your first example, you're asking Lean to figure out all parameters of <code>le_refl</code> by unifying its type with the expected type (the goal).</p>\n<div class=\"codehilite\"><pre><span></span>8:7: [type_context.is_def_eq_detail] [1]: @has_mem.mem nat (set nat) (@set.has_mem nat) a (@set_of nat (λ (x : nat), @has_le.le nat nat.has_le x a)) =?= @has_le.le ?m_1 (@preorder.to_has_le ?m_1 ?m_2) ?m_3 ?m_3\n[type_context.is_def_eq_detail] [2]: @set.mem nat a (@set_of nat (λ (x : nat), @has_le.le nat nat.has_le x a)) =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n[type_context.is_def_eq_detail] unfold left: set.mem\n[type_context.is_def_eq_detail] [3]: @set_of nat (λ (x : nat), @has_le.le nat nat.has_le x a) a =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n[type_context.is_def_eq_detail] unfold left: set_of\n[type_context.is_def_eq_detail] [4]: (λ (x : nat), @has_le.le nat nat.has_le x a) a =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n[type_context.is_def_eq_detail] after whnf_core: @has_le.le nat nat.has_le a a =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n[type_context.is_def_eq_detail] [5]: nat.less_than_or_equal a a =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n[type_context.is_def_eq_detail] [6]: nat.less_than_or_equal =?= preorder.le\n[type_context.is_def_eq_detail] on failure: nat.less_than_or_equal =?= preorder.le\n[type_context.is_def_eq_detail] on failure: nat.less_than_or_equal a a =?= @preorder.le ?m_1 ?m_2 ?m_3 ?m_3\n</pre></div>\n\n\n<p>At different points during unification, Lean has unfolded the LHS <code>has_le.le</code> to <code>nat.less_than_or_equal</code> and the RHS's to <code>preorder.le</code>, but in the end fails to unify these two, because it doesn't know the RHS preorder yet and so can't unfold <code>preorder.le</code>.<br>\nIf Lean can otherwise figure out the preorder (by specifying one of the arguments), it works. If you use <code>set.mem</code>, it works more or less coincidentally because Lean prefers unfolding the definition <code>set.mem</code> over the projection <code>has_le.le</code>.</p>",
        "id": 156841375,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548410244
    },
    {
        "content": "<p>Will this be easier with the Lean 4 non-monotonic elaboration?</p>",
        "id": 156841546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548410467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> how did you get that output?</p>",
        "id": 156841634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548410574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>set_option pp.implicit true\nset_option pp.notation false\nset_option trace.type_context.is_def_eq true\nset_option trace.type_context.is_def_eq_detail true\n</pre></div>",
        "id": 156841690,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548410641
    },
    {
        "content": "<p>thanks</p>",
        "id": 156841741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548410657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No. The only thing the elaborator can do to figure out <code>le_refl _</code>'s arguments is to unify it with the expected type. Elaboration order doesn't matter if there's only a single way to proceed.</p>",
        "id": 156841918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548410868
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 156841984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548410893
    },
    {
        "content": "<p>I love it when those trace outputs turn from \"incomprehensible debugging messages which I can't make any sense of and hence just ignore\" to \"something I can actually understand\". Thanks Sebastian.</p>",
        "id": 156841988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548410897
    },
    {
        "content": "<blockquote>\n<p>If you use <code>set.mem</code>, it works more or less coincidentally because Lean prefers unfolding the definition <code>set.mem</code> over the projection <code>has_le.le</code>.</p>\n</blockquote>\n<p>One could imagine that rewriting Lean from scratch might change the coincidences that happen now to a completely different set of coincidences which may or may not happen. I wonder to what extent mathlib depends on such coincidences.</p>",
        "id": 156842132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548411097
    },
    {
        "content": "<p>So the bug in <code>has_mem.mem</code> is that is that it is unfolded after <code>has_le.le</code>. Maybe someone should make a PR. How does one control unfolding power?</p>",
        "id": 156842295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548411242
    },
    {
        "content": "<p>No, they're both unfolded in the same step. You can't customize this.</p>",
        "id": 156842367,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548411301
    },
    {
        "content": "<p>Unification isn't likely to change much, but heuristics in other parts of the elaborator may behave differently, yes.<br>\nI'm not an expert on unification, but I suppose one could argue that maybe Lean shouldn't unfold projections of stuck parent projections like <code>@has_le.le ?m_1 (@preorder.to_has_le ?m_1 ?m_2)</code>. Not sure how other systems handle that.</p>",
        "id": 156842486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548411415
    },
    {
        "content": "<p>Uh... which is exactly what it would do when using new-style structures. If you copy the relevant code to a context where <code>old_structure_cmd</code> is not set, it just works.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"n\">class</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_lt</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">order_laws_tac</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">le_refl</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 156842926,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548411762
    },
    {
        "content": "<p>So depending on what <code>preorder</code> looks like in Lean 4 (where it may not be a part of core), this may just work. If it gets bundled, the unfication problems will look completely different anyway.</p>",
        "id": 156843094,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548411920
    }
]