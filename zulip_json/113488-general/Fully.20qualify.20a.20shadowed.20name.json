[
    {
        "content": "<p>I'm just missing a silly bit of syntax here, but I'm having trouble in <code>data.real.sqrt</code> because its import, <code>data.real.basic</code>, defines <code>add_lt_add_iff_left</code> which shadows the generic one (which is there in <code>mul</code> form as <code>mul_lt_mul_iff_left</code>) from <code>algebra.order.monoid_lemmas</code>; so I can't work out how to use the rational version. How can I either exclude the one from <code>data.real.basic</code>, or fully-qualify the one from <code>algebra.order.monoid_lemmas</code>? E.g. I can't <code>apply algebra.order.monoid_lemmas.add_lt_add_iff_left</code> because \"unknown identifier <code>algebra.order</code>\".</p>",
        "id": 280527201,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1651166349
    },
    {
        "content": "<p>Try <code>_root_.add_lt_add_iff_left</code></p>",
        "id": 280530182,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651167776
    },
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.add_lt_add_iff_left\">docs#real.add_lt_add_iff_left</a> even a thing?</p>",
        "id": 280531505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651168237
    },
    {
        "content": "<p>because it's used in the <code>ordered_comm_ring</code> instance--but it should be <code>protected</code></p>",
        "id": 280532312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651168596
    },
    {
        "content": "<p>But it's only used once, so it should be inlined.</p>",
        "id": 280532816,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651168826
    },
    {
        "content": "<p>(I mean maybe in this case, but not as a general principle)</p>",
        "id": 280533094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651168962
    },
    {
        "content": "<p>To be clear, such type-specific lemmas do exist, but only when they are not a special case of the general lemma. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.add_lt_add\">docs#ennreal.add_lt_add</a> or (maybe more visibly) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.add_lt_add_of_lt_of_le\">docs#ennreal.add_lt_add_of_lt_of_le</a></p>",
        "id": 280533262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651169042
    },
    {
        "content": "<p>Sometimes a lemma is just a lemma.</p>",
        "id": 280533342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651169076
    },
    {
        "content": "<p>In fact, in math, it would be true most of the time.</p>",
        "id": 280533371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651169092
    },
    {
        "content": "<p>Like if the proof of the lemma was 50 lines and then the instance (using the lemma) was another 50 lines, it definitely wouldn't be sensible to inline the lemma just because the lemma can be deduced from the instance (as is often the case with lemmas).</p>",
        "id": 280536700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651170681
    },
    {
        "content": "<p>Personally, I think it's also nice to separate the bits that are dependent on the definition of the real numbers (like the lemma here) from the admistrative business of building instances, but that's not such a big deal (and I'm sure it is not being done consistently).</p>",
        "id": 280536905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651170760
    },
    {
        "content": "<p>I feel like I'd even inline the 50-line long lemma, personally. To me, if a lemma comes from an instance, that's an instant area of possible generalisation.</p>",
        "id": 280537039,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651170842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Fully.20qualify.20a.20shadowed.20name/near/280537039\">said</a>:</p>\n<blockquote>\n<p>To me, if a lemma comes from an instance, that's an instant area of possible generalisation.</p>\n</blockquote>\n<p>I don't understand what this means</p>",
        "id": 280537858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651171200
    },
    {
        "content": "<p>I think performance considerations can make inlining a bad idea</p>",
        "id": 280537905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651171206
    },
    {
        "content": "<p>But you could make the lemma private</p>",
        "id": 280537923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651171220
    },
    {
        "content": "<p>Having a specific lemma for a type is to me a big red flag for \"Generalization here is hard\".</p>",
        "id": 280538012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651171261
    },
    {
        "content": "<p>(sometimes it's just hard for the unifier / instance resolution, not the mathematician; but those cases should have a docstring to clarify)</p>",
        "id": 280538269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651171373
    },
    {
        "content": "<p>Huh?</p>",
        "id": 280538742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651171576
    },
    {
        "content": "<p>Anyways I don't think whatever that is about is important--<br>\nIn both programming and ordinary math, it's very common and generally good style to have top-level functions/lemmas that get used only once. Maybe in programming the function would not be part of the \"public API\", a concept which basically doesn't exist in Lean (and isn't really needed in informal math).</p>",
        "id": 280539137,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651171766
    },
    {
        "content": "<p>(my comment was regarding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_eq_mul\">docs#smul_eq_mul</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id.smul_eq_mul\">docs#algebra.id.smul_eq_mul</a> vs yet another <code>smul_eq_mul</code>  in a recent PR)</p>",
        "id": 280540465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651172406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Fully.20qualify.20a.20shadowed.20name/near/280537039\">said</a>:</p>\n<blockquote>\n<p>if a lemma comes from an instance, that's an instant area of possible generalisation.</p>\n</blockquote>\n<p>I think we must not be discussing the same kind of situation--here there is lemma which is going to be <strong>used</strong> to prove that the reals form an ordered ring (or whatever); and so, naturally, the lemma is also a general statement about ordered rings specialized to the reals--but you can't prove it that way in the first place, of course</p>",
        "id": 280540590,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651172439
    }
]