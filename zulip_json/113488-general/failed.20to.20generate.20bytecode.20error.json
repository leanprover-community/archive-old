[
    {
        "content": "<p>I'm writing special cases of eliminators for pedagogical purposes. The following definition of <code>myseq</code> results in the the warning<code>failed to generate bytecode for 'myseq' code generation failed, VM does not have code for 'nat.seq'</code>. What's going on? This is Lean 3.30.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myseq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat.seq</span> <span class=\"n\">n</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">seq_k</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">seq_k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240699328,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622290695
    },
    {
        "content": "<p><code>nat.seq</code> should be a <code>def</code></p>",
        "id": 240699438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622290871
    },
    {
        "content": "<p>Thanks very much!</p>",
        "id": 240699446,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622290901
    },
    {
        "content": "<p>Can we edit that error somehow? Sometimes Lean gives you a rare error and then says something helpful like \"possible fix:try tactic.unfreeze_local_instances\". Can we have a \"possible fix: Lint your file by writing <code>#lint</code> at the bottom, to detect any lemmas which should have been definitions.\"</p>",
        "id": 240710237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622306328
    },
    {
        "content": "<p>Gihan is by no means the first person to ask this question.</p>",
        "id": 240710240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622306347
    },
    {
        "content": "<p>I've changed these messages before - you can just search the lean source code for some snippet of the message, and then PR a rewording</p>",
        "id": 240719625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622320224
    },
    {
        "content": "<p>\"perhaps it is a lemma but was intended to be a def\" would probably be a good addition to the error message here</p>",
        "id": 240719660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622320286
    },
    {
        "content": "<p>I'm now getting an error <code>\"eliminator\" elaborator failed to compute the motive</code> when the definition <code>nat.rec_on'</code> below is in a section. Everything's fine if the definition is outside a section. What's happening? Is the only fix not to define <code>nat.rec_on'</code> within a section?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.rec_on'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat.rec_on'</span> <span class=\"n\">n</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">seq_k</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">seq_k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Edit: I see now that this works fine if <em>at most one</em> of the definitions <code>nat.rec_on'</code> and <code>seq</code> are in the section <code>foo</code>!</p>\n<p>Edit edit: Now I see everything is fine as long as <code>universe u</code> is declared outside the section. I probably need to refer back to TPIL.</p>",
        "id": 240727509,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622331224
    },
    {
        "content": "<p>This looks like it could be a bug - could you post as separate mwes the versions that do and do not work?</p>",
        "id": 240742495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622358407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the above does not work, the following does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.rec_on'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">h₀</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat.rec_on'</span> <span class=\"n\">n</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">seq_k</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">seq_k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 240751220,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622373860
    }
]