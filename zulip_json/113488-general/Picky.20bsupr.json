[
    {
        "content": "<p>I've been having problems with <code>bsupr</code> several times now, but I had put that on the account on me being unfamiliar with the API. Far from me was the idea that <code>binfi</code> is actually better behaved! But here's a code snippet testifying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fixed_points_complete_lattice</span> <span class=\"o\">:</span>\n<span class=\"n\">complete_lattice</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">bsupr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx.trans</span> <span class=\"o\">(‹</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">le_bsupr</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">))),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h.antisymm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_bsupr_of_le</span> <span class=\"n\">_</span><span class=\"o\">,</span><span class=\"c1\">--exact le_bsupr (f u) (‹monotone f› h), weirdly doesn't work</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">›</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">le_binfi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(‹</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">binfi_le</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">))</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">h.antisymm</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">binfi_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(‹</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">›</span> <span class=\"n\">h</span><span class=\"o\">),</span><span class=\"c1\">--and this works!!!</span>\n   <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Sup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Inf</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>le_bsupr</code> doesn't match while in the same situation with dual order <code>le_binfi</code> matches. I'm baffled.</p>",
        "id": 238212094,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620680793
    },
    {
        "content": "<p>In general, dealing with <code>supr</code>/<code>infi</code> nested more than two times is a pain. I've since filled in the <code>Sup</code> field, and several times I had to use <code>le_binfi</code>, intro two variables, use <code>le_infi</code>, intro a variable, prove the stuff. I would want instead to do something like use <code>le_bbinfi</code>, intro three variables, prove the stuff. And of course generally I would want to use <code>le_b...binfi</code>, intro n variables, prove the stuff. Unless I'm wrong, we currently have no lemma/tactic that would make this process smoother.</p>",
        "id": 238259626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620715798
    },
    {
        "content": "<p>For example, try proving this lemma that is not supposed to be hard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n  <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Here's my proof, to guide you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n  <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_binfi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(‹</span><span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">›</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">binfi_le_of_le</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">infi_le</span> <span class=\"n\">_</span> <span class=\"n\">hxs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238260011,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620716072
    },
    {
        "content": "<p>Should the <code>mono</code> tactic be able help here in principle?</p>",
        "id": 238260292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620716290
    },
    {
        "content": "<p>Oh. What's this?</p>",
        "id": 238261401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620716954
    },
    {
        "content": "<p>Okay, here's the battleground: <a href=\"https://github.com/leanprover-community/mathlib/blob/knaster-tarski/src/order/knaster_tarski.lean\">https://github.com/leanprover-community/mathlib/blob/knaster-tarski/src/order/knaster_tarski.lean</a><br>\nIt's all done, but every single proof is golfable because of the \"<code>bbsupr</code>/<code>bbinfi</code>\". Have fun!</p>",
        "id": 238267845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620720591
    },
    {
        "content": "<p>(yeah, I just read the statement and Knaster–Tarski yesterday on Wikipedia and thought \"Oh, that would be fun to do in Lean!\", hence I did)</p>",
        "id": 238267961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620720641
    },
    {
        "content": "<p>The commented out code is junk?</p>",
        "id": 238274643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620723904
    },
    {
        "content": "<p>It's not short, but I found your mwe very easy to prove going one step at a time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mwe</span>  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n  <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf.map_infi_le.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">infi_le_infi</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf.map_infi_le.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">infi_le_infi</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf.map_infi_le.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">infi_le_infi</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238275546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620724323
    },
    {
        "content": "<p>This does feel like something <code>mono</code> ought to be able to help withh</p>",
        "id": 238275917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620724526
    },
    {
        "content": "<p>tagging <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.map_infi_le\">docs#monotone.map_infi_le</a> with <code>[mono]</code> gives an error, presumably because the <code>≤</code> in the hypothesis is hidden under a binder</p>",
        "id": 238276258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620724686
    },
    {
        "content": "<p>Yeah, the commented code was my attempt with using <code>complete_lattice</code> directly.</p>",
        "id": 238276264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620724690
    },
    {
        "content": "<p>There's this general theme about <code>supr</code> and <code>infi</code> that makes me think a tactic designed specifically for them would be beneficial. Here I want inequalities about them, but earlier I wanted a <code>\\in \\Inter</code> to be transformed into nested <code>\\forall</code>.</p>",
        "id": 238276604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620724879
    },
    {
        "content": "<p>But maybe I'm lacking overview and the <code>mono</code> tactic you're talking about generalizes the tactic I want.</p>",
        "id": 238276781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620724964
    },
    {
        "content": "<p>I assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_Inter\">docs#set.mem_Inter</a> exists and handles your desire for a forall?</p>",
        "id": 238276987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620725081
    },
    {
        "content": "<p><code>mem</code> is kinda special here; we have no typeclasses for how it interacts with lattice structures as far as I know</p>",
        "id": 238277099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620725161
    },
    {
        "content": "<p>Maybe we should</p>",
        "id": 238277155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620725178
    },
    {
        "content": "<p>Yeah but then I have the same problem as here. One nested Inter can be dealt with <code>mem_Inter</code>. Two nested Inters can be dealt with <code>mem_bInter</code> (actually not even that, because <code>mem_bInter</code> only picks up the case <code>\\Inter (x : \\a) (hx : x \\in S)</code> and not <code>\\Inter (x : \\a) (hx : p x)</code> where <code>p</code> is a general predicate). But three nested Inters can only be dealt with <code>mem_Inter</code> + <code>mem_bInter</code>, <code>mem_bInter</code> + <code>mem_Inter</code> or <code>mem_Inter</code> + <code>mem_Inter</code> + <code>mem_Inter</code>. There has to be a better way.</p>",
        "id": 238280212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620726880
    },
    {
        "content": "<p><code>simp only [mem_Inter]</code> should clean them all up, right?</p>",
        "id": 238280656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620727102
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Inter</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- `x ∈ y i j k` : oops my goal wasn't true</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238280925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620727246
    },
    {
        "content": "<p>Oh, maybe the tactic I want is <code>simp only</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238288060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620731109
    },
    {
        "content": "<p>I'm PRing <a href=\"https://github.com/leanprover-community/mathlib/issues/7589\">#7589</a> because I really can't see how to get a cleaner code.</p>",
        "id": 238430674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620803187
    }
]