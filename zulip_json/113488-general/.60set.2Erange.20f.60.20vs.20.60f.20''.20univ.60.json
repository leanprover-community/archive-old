[
    {
        "content": "<p>The bundled homs seem to disagree about how to define the range of a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.range</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.srange</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.to_monoid_hom.mrange</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.to_add_monoid_hom.range</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Note that <code>set.range f</code> is not defeq to <code>f '' set.univ</code>.</p>\n<p>This is annoying, because it means that <code>↥(f.to_add_monoid_hom.range)</code> and <code>↥(f.range)</code> are not defeq types.</p>\n<p>I'd argue that the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.range/src\">src#add_monoid_hom.range</a> definition is nicer, as it doesn't create a <code>∈ set.univ</code> obligation when constructing an element. However, it means that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.range_eq_map\">docs#add_monoid_hom.range_eq_map</a> stops being true by definition.</p>",
        "id": 234893679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618594861
    },
    {
        "content": "<p>/poll Which end result is better?</p>\n<ul>\n<li>Change <code>(add_)monoid_hom.range</code> to use the <code>f '' univ</code> definition</li>\n<li>Change <code>(add_)monoid_hom.range</code> to use the <code>f '' univ</code> definition, _and_ change <code>set.range</code> to do the same</li>\n<li>Change <code>(every other)_hom.range</code> to use the  <code>set.range</code> definition</li>\n</ul>",
        "id": 234893953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618594994
    },
    {
        "content": "<p>Yes, <code>set.range</code> is specifically defined not to be <code>set.image top</code> for this reason, and recently I was annoyed about this random <code>mem_top</code> obligation -- when you take hypotheses apart with cases you always get this junk hypothesis, and when you are building proofs you always have to throw in a mem_top for no obvious reason.</p>",
        "id": 234894022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618595027
    },
    {
        "content": "<p>Yeah, my hunch is that the person who built <code>subgroup</code> got annoyed by this, but either: they didn't transfer their learnings to <code>submonoid</code>; someone else working on <code>submonoid</code> cared more about <code>range_eq_map</code>; and/or they were developed in parallel without much communication.</p>",
        "id": 234894376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618595167
    },
    {
        "content": "<p>My memory is that Imperial students wrote a lot of the subgroup and submonoid (and subsemiring) API because I discovered that persuading undergraduates/PhD students to do manual work like this was a really good way to get them to learn Lean. I wish that <code>subgroup.lean</code> got deleted periodically and then we have to send out an emergency call for someone to rewrite it following <code>submonoid</code>.</p>",
        "id": 234894920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618595408
    },
    {
        "content": "<p>Well in this case it seems <code>subgroup.lean</code> stumbled upon a useful pattern that might otherwise have been lost entirely</p>",
        "id": 234895916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618595813
    },
    {
        "content": "<p>Evolutionary library development?</p>",
        "id": 234896038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618595873
    },
    {
        "content": "<p>You never know which pattern it will stumble upon next time someone rewrites it (-;</p>",
        "id": 234896119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618595896
    },
    {
        "content": "<p>I've made a start in <a href=\"https://github.com/leanprover-community/mathlib/issues/7227\">#7227</a>. Lets see how many CI cycles it takes to track down all the places that relied on the <code>f '' univ</code> definition...</p>",
        "id": 234902538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618598652
    },
    {
        "content": "<p>Alright, CI is passing on that now</p>",
        "id": 235060043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618739622
    }
]