[
    {
        "content": "<p>Is there a convenient way of performing case analysis on a bounded nat? For example, given a nat <code>n : nat</code> and a concrete bound <code>h : n &lt; 30</code>, there might be a tactic <code>enum_cases_bounded h</code> that produces 30 subgoals with the <code>i</code>th goal including <code>h_i : n = i</code>.</p>",
        "id": 273419620,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1645988509
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases\">tactic#interval_cases</a></p>",
        "id": 273419669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645988553
    },
    {
        "content": "<p>The following hits a deterministic timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">interval_cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Am I the first person to try this on double-digit ranges?</p>",
        "id": 273420773,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1645990136
    },
    {
        "content": "<p>No, this is a known problem. <a href=\"https://github.com/leanprover-community/mathlib/pull/12237\">#12237</a> is an attempt at a faster version.</p>",
        "id": 273421281,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1645990705
    },
    {
        "content": "<p>You can also do this using <code>fin_cases</code>, which seems to be a bit faster in Lean runtime but a bit more unwieldy in terms of number of lines of code.<br>\n<a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Odd.20residues.20mod.208/near/272725327\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20Odd.20residues.20mod.208/near/272725327</a></p>",
        "id": 273423909,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645994355
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12237\">#12237</a> is an attempt at a faster version.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> since this is not <code>awaiting-review</code>, it doesn't show up on the <a href=\"https://bit.ly/3zVLgqR\">#queue</a>. Would it make sense to explicitly ping some maintainers (not me, I don't speak <code>meta</code>) to review this?</p>",
        "id": 273447988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646026544
    }
]