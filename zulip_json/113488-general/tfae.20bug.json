[
    {
        "content": "<p>Minimized from the open maps thread:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>fails with: <code>exact tactic failed, type mismatch, given expression has type\n  (∀ (x : α), Q x) ↔ ∀ (x : α), R x\nbut is expected to have type\n  (∀ (x : α), Q x) ↔ ∀ (x : α), P x</code></p>",
        "id": 135238104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538722744
    },
    {
        "content": "<p>I'm on it</p>",
        "id": 135238243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538722979
    },
    {
        "content": "<p>Note that removing the forall hides the issue</p>",
        "id": 135238244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538722980
    },
    {
        "content": "<p>Does it? That's odd</p>",
        "id": 135238255,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538723028
    },
    {
        "content": "<p>maybe not</p>",
        "id": 135238366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723169
    },
    {
        "content": "<p>I changed many times what I tried</p>",
        "id": 135238370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723176
    },
    {
        "content": "<p>And also, undo in VScode vim extension is completely crazy, you never know how many steps you will go back</p>",
        "id": 135238381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723202
    },
    {
        "content": "<p>Wow, I see completely random behavior</p>",
        "id": 135238463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723356
    },
    {
        "content": "<p>I have a series of test cases, restarting Lean server changes the set of failing tests randomly</p>",
        "id": 135238466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723378
    },
    {
        "content": "<p>Heisenbugs!</p>",
        "id": 135238471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723390
    },
    {
        "content": "<p>A Heisenbug in a theorem prover — the irony</p>",
        "id": 135238534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723461
    },
    {
        "content": "<p>My test file is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tfae</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135238543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723488
    },
    {
        "content": "<p>Creating and deleting a line between two examples also changes what works</p>",
        "id": 135238549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723515
    },
    {
        "content": "<p>Can anyone see that, or is it only my computer going crazy?</p>",
        "id": 135238607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723566
    },
    {
        "content": "<p>I can reproduce</p>",
        "id": 135238615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723587
    },
    {
        "content": "<p>Creating and deleting lines changes what works <em>nondeterministically</em>.</p>",
        "id": 135238624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723611
    },
    {
        "content": "<p>I guess meta-land allows non-deterministic algorithms</p>",
        "id": 135238683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723651
    },
    {
        "content": "<p>I don't get non-deterministic behavior with that code. I'm in emacs.</p>",
        "id": 135238704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538723697
    },
    {
        "content": "<p>Right... we need a tactic that will first toss a coin to decide if it will actually help you <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 135238712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723705
    },
    {
        "content": "<p>I have such tactics</p>",
        "id": 135238720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538723718
    },
    {
        "content": "<p>we see that</p>",
        "id": 135238739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538723733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you get any errors at all with that code (apart from the sorries)?</p>",
        "id": 135238742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538723741
    },
    {
        "content": "<p>Yes, it fails deterministically</p>",
        "id": 135238744,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538723755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'll remember that</p>",
        "id": 135238787,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538723764
    },
    {
        "content": "<blockquote>\n<p>And also, undo in VScode vim extension is completely crazy, you never know how many steps you will go back</p>\n</blockquote>\n<p>This annoys me to no end as well. However it seems that VS code's built-in undo (cmd+z on mac, ctrl+z on other systems) works independently and seems to function properly.</p>",
        "id": 135238799,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538723822
    },
    {
        "content": "<p>Ok now I see the non deterministic behavior. That looks weird. I think it's because some vertices are being ignored and because they are stored in a hash table and their hash code probably depends on the memory address of the expressions which changes from run to run.</p>",
        "id": 135239970,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538725770
    },
    {
        "content": "<p>is this because of <code>ref</code>?</p>",
        "id": 135240044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538725844
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 135240047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538725861
    },
    {
        "content": "<p>I'm only using <code>expr</code> as a key in hash tables</p>",
        "id": 135240076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538725898
    },
    {
        "content": "<p>In the mean time, I'd like to sorry this <code>tfae</code> and move on. How to you actually use a <code>tfae</code> statement? I don't see anything in the docs</p>",
        "id": 135240138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538725963
    },
    {
        "content": "<p>That's a correct use of tfae.</p>",
        "id": 135240208,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538726052
    },
    {
        "content": "<p><code>tfae.out</code> is probably what you want. It's mentioned obliquely in the docs: \"In <code>data/list/basic.lean</code>there are propositions of the form...\"</p>",
        "id": 135240212,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538726065
    },
    {
        "content": "<p>you state follow up equivalences you are interested in and refer to the elements of the list by their index</p>",
        "id": 135240221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538726097
    },
    {
        "content": "<p>and use those numbers in <code>tfae.out</code></p>",
        "id": 135240260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538726162
    },
    {
        "content": "<p>With one added oddity: the indices are <code>1 ≤ i ≤ xs.length</code> rather than <code>0 ≤ i &lt; xs.length</code></p>",
        "id": 135240283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538726219
    },
    {
        "content": "<p>I can't use it, probably because of parameters. Compare:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tfae</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eqv</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eqvs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tfae</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">eqvs</span> <span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135240585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538726745
    },
    {
        "content": "<p>Sorry, my comment was misleading: the indices start at 1 in the proof, not when you use the theorem.</p>\n<p>Now that I'm saying, I think we should remove that oddity.</p>",
        "id": 135240708,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538726903
    },
    {
        "content": "<p>Can you fix my example above?</p>",
        "id": 135240728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538726941
    },
    {
        "content": "<p><code> rw tfae.out (eqvs ) 0 1,</code></p>",
        "id": 135240741,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538726967
    },
    {
        "content": "<p>doesn't work</p>",
        "id": 135240789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727003
    },
    {
        "content": "<p>What error do you get?</p>",
        "id": 135240802,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538727038
    },
    {
        "content": "<p>Sorry I wasn't clear. You can't use it directly as a rewrite rule, you have to restate the theorem and prove it by <code>tfae.out</code></p>",
        "id": 135241134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538727511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem eqvs_PQ (x : α) : P x ↔ Q x := (eqvs x).out 0 1\ntheorem eqvs_PR (x : α) : P x ↔ R x := (eqvs x).out 0 2\n</pre></div>",
        "id": 135241156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538727585
    },
    {
        "content": "<p>Thanks. It's somehow disappointing</p>",
        "id": 135241387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727873
    },
    {
        "content": "<p>Arg, I'm super late</p>",
        "id": 135241396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727894
    },
    {
        "content": "<p>Oooh, that's disappointing indeed.</p>",
        "id": 135241466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538727964
    },
    {
        "content": "<p>Would something like <code>erw</code> be able to deal with this?</p>",
        "id": 135241610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728171
    },
    {
        "content": "<p>What if you could do: <code>from_tfae h : eqvs 0 1</code> first to add an assumption <code>h</code> with the right equivalence?</p>",
        "id": 135241679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538728220
    },
    {
        "content": "<p>We need a <code>rw</code> on steroids. One that will use more power to do the job. Like <code>simp</code> it should dive into binders etc, so that we no longer need to do the <code>conv</code> dance. And it should also unpack this stuff from <code>tfae.out</code> so that it can just use it to <code>rw</code>.</p>",
        "id": 135241704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Yes, you could just do <code>have : P → Q := tfae.out 0 1</code> and then <code>rw this</code>.</p>",
        "id": 135241728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728291
    },
    {
        "content": "<p>But it is too verbose.</p>",
        "id": 135241732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728298
    },
    {
        "content": "<p>Yes. It's confusing... mathematicians keep complaining that proofs are too compact and unreadable in term mode. Otoh we love the brevity of informal maths...</p>",
        "id": 135241794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728358
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>And also, undo in VScode vim extension is completely crazy, you never know how many steps you will go back</p>\n</blockquote>\n<p>This annoys me to no end as well. However it seems that VS code's built-in undo (cmd+z on mac, ctrl+z on other systems) works independently and seems to function properly.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  Gabriel just told me to use the trick described in <a href=\"https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221\" target=\"_blank\" title=\"https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221\">https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221</a></p>",
        "id": 135317699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538843493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> How are things going with <code>tfae</code>? Is there something blocking progress? I'm currently stating 5 equivalent conditions for a presheaf to be a sheaf. I think <code>tfae</code> could increase the user experience <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 147925497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542565098
    },
    {
        "content": "<p>I haven't fixed the bug yet, I was under the impression that it didn't always manifest and tfae has been merged so you should be able to use it and cross your fingers.</p>",
        "id": 147925626,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542565397
    },
    {
        "content": "<p>I can still see the bug using the latest mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tfae</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>doesn't work here</p>",
        "id": 147998398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542664368
    }
]