[
    {
        "content": "<p>Bors has failed building <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> twice now, and it seems to be a deterministic timeout in <code>mv_polynomial</code>.  The PR touches <code>control/traversable</code>, but only by adding documentation and reordering a definition.</p>\n<p><code>/home/runner/work/mathlib/mathlib/src/data/mv_polynomial/basic.lean:414:0: error: (deterministic) timeout</code></p>",
        "id": 212391723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601968384
    },
    {
        "content": "<p>I guess the first thing to do is to try merging master on that branch and letting the CI run</p>",
        "id": 212391974,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601968583
    },
    {
        "content": "<p>Hereâ€™s the line referenced in the error: <a href=\"https://github.com/leanprover-community/mathlib/blob/523bddb4f0cbfdc401b3b2f943ca6eba92ad90cc/src/data/mv_polynomial/basic.lean#L414\">https://github.com/leanprover-community/mathlib/blob/523bddb4f0cbfdc401b3b2f943ca6eba92ad90cc/src/data/mv_polynomial/basic.lean#L414</a></p>",
        "id": 212392281,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601968804
    },
    {
        "content": "<p>Ok, I've merged master and pushed it.  Is the CI just to see if it can still build?</p>",
        "id": 212392685,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601969101
    },
    {
        "content": "<p>I'm having the same issue with <a href=\"https://github.com/leanprover-community/mathlib/issues/4461\">#4461</a></p>",
        "id": 212392844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969180
    },
    {
        "content": "<p>The problem is <code>coeff_mul</code></p>",
        "id": 212393028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969328
    },
    {
        "content": "<p>It's known to be slow... I guess we need to work on it</p>",
        "id": 212393044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601969341
    },
    {
        "content": "<p>So it's not <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>'s docstrings that broke the build? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212393374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601969552
    },
    {
        "content": "<p>Is the deterministic timeout actually nondeterministic? (at least when it comes to building all of mathlib?)  It seems sort of improbable that a commit with only documentation comments would change much...</p>",
        "id": 212394460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601970464
    },
    {
        "content": "<p>Yeah, I'm not sure what deterministic really means here. For what it's worth, I ran <code>lean --make src/data/mv_polynomial/basic.lean</code> on the <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> branch of mathlib and didn't get a timeout when opening the file in VS Code, even though it should be enforcing the same <code>-T100000</code> limit. </p>\n<p>According to the profiler, the tactic execution in <code>mv_polynomial.coeff_mul</code> is taking 19.7 seconds, so it's definitely ripe for reworking. I don't know how to interpret the more detailed output though:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>elaboration: tactic execution took 19.7s\nnum. allocated objects:  7835\nnum. allocated closures: 10779\n19748ms   100.0%   tactic.istep\n19748ms   100.0%   _interaction\n19748ms   100.0%   tactic.istep._lambda_1\n19748ms   100.0%   scope_trace\n19748ms   100.0%   _interaction._lambda_2\n19748ms   100.0%   tactic.step\n19667ms    99.6%   tactic.solve1\n19525ms    98.9%   _interaction._lambda_19\n19140ms    96.9%   tactic.interactive.propagate_tags\n18716ms    94.8%   interaction_monad_orelse\n18665ms    94.5%   _interaction._lambda_17\n18615ms    94.3%   tactic.interactive.simp_core\n18554ms    94.0%   tactic.interactive.simp_core_aux\n18550ms    93.9%   tactic.simplify\n18550ms    93.9%   tactic.try\n18502ms    93.7%   tactic.interactive.simpa._lambda_6\n18501ms    93.7%   tactic.interactive.simpa\n17747ms    89.9%   tactic.simp_target\n17747ms    89.9%   tactic.interactive.simp_core_aux._lambda_5\n13118ms    66.4%   _interaction._lambda_16\n13061ms    66.1%   _interaction._lambda_14\n 5162ms    26.1%   _interaction._lambda_10\n 1697ms     8.6%   interaction_monad.monad._lambda_9\n  807ms     4.1%   tactic.interactive.simp_core_aux._lambda_4\n  807ms     4.1%   tactic.interactive.simp_core_aux._lambda_2\n  525ms     2.7%   rw_core\n  524ms     2.7%   interactive.loc.apply\n  521ms     2.6%   interaction_monad.orelse'\n  492ms     2.5%   _private.3291397495.rw_goal._lambda_4\n  481ms     2.4%   _private.3291397495.rw_goal._lambda_2\n  415ms     2.1%   tactic.rewrite_target\n  415ms     2.1%   tactic.rewrite\n  414ms     2.1%   tactic.rewrite_core\n  368ms     1.9%   tactic.mk_instance\n  287ms     1.5%   _interaction._lambda_12\n  286ms     1.4%   tactic.apply_instance\n  268ms     1.4%   tactic.all_goals'\n  268ms     1.4%   all_goals'_core\n  268ms     1.4%   _private.3677394557.all_goals'_core._main._lambda_2\n  268ms     1.4%   tactic.to_expr\n  235ms     1.2%   _interaction._lambda_18\n  147ms     0.7%   _interaction._lambda_7\n  142ms     0.7%   _interaction._lambda_4\n  139ms     0.7%   tactic.interactive.have._lambda_1\n   99ms     0.5%   tactic.interactive.concat_tags._lambda_5\n   98ms     0.5%   repeat_aux\n   98ms     0.5%   tactic.try_core\n   98ms     0.5%   tactic.repeat\n   98ms     0.5%   _interaction._lambda_3\n   98ms     0.5%   _private.1616170719.repeat_aux._main._lambda_1\n   94ms     0.5%   _interaction._lambda_11\n   93ms     0.5%   tactic.interactive.by_cases._lambda_2\n   93ms     0.5%   tactic.interactive.by_cases\n   84ms     0.4%   tactic.interactive.to_expr'\n   83ms     0.4%   tactic.by_cases\n   59ms     0.3%   tactic.mk_simp_set_core\n   59ms     0.3%   tactic.mk_simp_set\n   57ms     0.3%   tactic.interactive.convert\n   57ms     0.3%   tactic.focus1\n   54ms     0.3%   tactic.congr'\n   52ms     0.3%   _interaction._lambda_13\n   39ms     0.2%   _interaction._lambda_8\n   39ms     0.2%   simp_lemmas.add_pexpr\n   39ms     0.2%   simp_lemmas.append_pexprs\n   39ms     0.2%   tactic.mk_simp_set_core._lambda_5\n   36ms     0.2%   tactic.apply_eq_congr_core\n   36ms     0.2%   tactic.congr_core'\n   35ms     0.2%   tactic.congr'._main._lambda_3\n   32ms     0.2%   tactic.mk_specialized_congr_lemma\n   31ms     0.2%   rw_hyp\n   30ms     0.2%   _private.859230899.rw_hyp._main._lambda_3\n   23ms     0.1%   _private.859230899.rw_hyp._main._lambda_2\n   23ms     0.1%   tactic.apply_core\n   21ms     0.1%   tactic.rewrite_hyp\n   21ms     0.1%   _interaction._lambda_5\n   20ms     0.1%   tactic.seq'\n   18ms     0.1%   tactic.join_user_simp_lemmas\n   18ms     0.1%   simp_lemmas.mk_default\n   17ms     0.1%   relation_tactic\n   17ms     0.1%   _interaction._lambda_6\n   16ms     0.1%   _private.1624076617.relation_tactic._lambda_1\n   16ms     0.1%   tactic.exact\n   15ms     0.1%   tactic.congr'._main._lambda_4\n   14ms     0.1%   tactic.replace_target\n   10ms     0.1%   tactic.interactive.simpa._lambda_1\n   10ms     0.1%   tactic.replace_hyp\n   10ms     0.1%   _private.3291397495.rw_goal._lambda_3\n    9ms     0.0%   tactic.save_info_with_widgets\n    8ms     0.0%   tactic.apply\n    8ms     0.0%   tactic.mk_eq_mpr\n    8ms     0.0%   tactic.save_widget\n    7ms     0.0%   tactic.save_type_info\n    6ms     0.0%   tactic.assert\n    6ms     0.0%   tactic.interactive.apply._lambda_1\n    5ms     0.0%   tactic.assumption._lambda_1\n    5ms     0.0%   tactic.find_same_type\n    5ms     0.0%   tactic.refine\n    4ms     0.0%   tactic.apply_congr_core\n    4ms     0.0%   tactic.mk_eq_mp\n    3ms     0.0%   tactic.rintro\n    3ms     0.0%   tactic.find_same_type._main._lambda_1\n    3ms     0.0%   simp_lemmas.resolve_and_add\n    3ms     0.0%   tactic.unify\n    3ms     0.0%   tactic.assert_core\n    3ms     0.0%   _private.3676539765.simp_lemmas.resolve_and_add._lambda_2\n    3ms     0.0%   tactic.interactive.rintro\n    3ms     0.0%   tactic.infer_type\n    3ms     0.0%   tactic.rintro._lambda_3\n    3ms     0.0%   simp_lemmas.add_simp\n    2ms     0.0%   tactic.mk_app\n    2ms     0.0%   simp_lemmas.erase\n    2ms     0.0%   tactic.rcases_core._main._lambda_5\n    2ms     0.0%   tactic.interactive.exact\n    2ms     0.0%   tactic.rcases_core._main._lambda_9\n    2ms     0.0%   tactic.rcases_core\n    2ms     0.0%   tactic.mk_id_eq\n    2ms     0.0%   tactic.rcases.continue\n    2ms     0.0%   tactic.cases_core\n    2ms     0.0%   _interaction._lambda_9\n    1ms     0.0%   tactic.has_opt_auto_param._lambda_2\n    1ms     0.0%   tactic.clear_goals._lambda_5\n    1ms     0.0%   tactic.apply_congr_core._lambda_1\n    1ms     0.0%   tactic.applyc\n    1ms     0.0%   tactic.mk_const\n    1ms     0.0%   tactic.has_opt_auto_param_for_apply._lambda_2\n    1ms     0.0%   tactic.intro_core\n    1ms     0.0%   tactic.get_eqn_lemmas_for\n    1ms     0.0%   tactic.i_to_expr_for_apply\n    1ms     0.0%   tactic.interactive.get_rule_eqn_lemmas\n    1ms     0.0%   tactic.clear\n    1ms     0.0%   format.join\n    1ms     0.0%   environment.get_ext_eqn_lemmas_for\n    1ms     0.0%   tactic.interactive.dsimp\n    1ms     0.0%   tactic.save_info_thunk\n    1ms     0.0%   tactic.dsimp_target\n    1ms     0.0%   tactic.interactive.get_rule_eqn_lemmas._lambda_3\n    1ms     0.0%   tactic.clear_goals\n    1ms     0.0%   tactic.assertv\n    1ms     0.0%   expr.get_app_fn\n    1ms     0.0%   resolve_name'\n    1ms     0.0%   tactic.clear'\n    1ms     0.0%   expr.is_napp_of\n    1ms     0.0%   list.foldl\n    1ms     0.0%   tactic.mk_const._lambda_1\n    1ms     0.0%   tactic.intro\n    1ms     0.0%   expr.const\n    1ms     0.0%   simp_lemmas.dsimplify\n    1ms     0.0%   format.compose\n    1ms     0.0%   expr.is_app_of\n    1ms     0.0%   tactic.swap\n    1ms     0.0%   tactic.instantiate_mvars\n    1ms     0.0%   _interaction._lambda_15\n    1ms     0.0%   tactic.assertv_core\n    1ms     0.0%   tactic.congr'._main._lambda_2\n</code></pre></div>",
        "id": 212395338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971144
    },
    {
        "content": "<p>I think that is saying <code>simpa</code> is the culprit.</p>",
        "id": 212395712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601971436
    },
    {
        "content": "<p>Indeed, changing the two <code>simpa</code>s to <code>simpa only</code> speeds it up to 2.64 seconds!</p>",
        "id": 212395880,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971539
    },
    {
        "content": "<p>I almost have a PR ready</p>",
        "id": 212396003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971634
    },
    {
        "content": "<p>I'm restructuring it a bit more</p>",
        "id": 212396015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971641
    },
    {
        "content": "<p>Ah, OK. I was just about to submit one myself (with just the <code>simpa only</code> change).</p>",
        "id": 212396103,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601971687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a></p>",
        "id": 212396284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971817
    },
    {
        "content": "<p>It's below 2s on my box now</p>",
        "id": 212396295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601971829
    },
    {
        "content": "<p>oops, I did it as well...</p>",
        "id": 212397381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601972516
    },
    {
        "content": "<p>I'll close.</p>",
        "id": 212397434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601972528
    },
    {
        "content": "<p>Hmm, <code>coeff_mul</code> just caused the most recent <code>bors</code> batch to fail again: <a href=\"https://github.com/leanprover-community/mathlib/runs/1213623252\">https://github.com/leanprover-community/mathlib/runs/1213623252</a></p>\n<p>So maybe we should see if we can try and merge that first.</p>",
        "id": 212398549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601973280
    },
    {
        "content": "<p>Yup, we might want to cancel everything, and squeeze this in first.</p>",
        "id": 212398705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601973372
    },
    {
        "content": "<p>I just added <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> to the queue. Even if the currently running batch fails, <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> should be in the next batch and then everything should be good, I think.</p>",
        "id": 212399224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601973799
    },
    {
        "content": "<p><code>bors r+ p=10</code> will give it higher priority</p>",
        "id": 212402301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601975685
    },
    {
        "content": "<p>I considered doing that but since <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> won't conflict with any of the other PRs, it should be more efficient just to have it run in a batch.</p>",
        "id": 212402461,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601975794
    },
    {
        "content": "<p>Also, the batch including <a href=\"https://github.com/leanprover-community/mathlib/issues/4469\">#4469</a> is now running, since the batch that was running failed again. I went ahead and reconsolidated those PRs along with <a href=\"https://github.com/leanprover-community/mathlib/issues/4444\">#4444</a> into a new batch.</p>",
        "id": 212402645,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601975934
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4472\">#4472</a> is not critical for bors, but it brings <code>coeff_mul</code> down into the 1.0s - 1.2s range, and shortens the proof.</p>",
        "id": 212404257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601976997
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/15837\">#15837</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15836\">#15836</a> should not be on the same batch, can someone jank one of them from the queue?</p>",
        "id": 292572916,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660049813
    },
    {
        "content": "<p>Done</p>",
        "id": 292573031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660049863
    },
    {
        "content": "<p>I pulled <a href=\"https://github.com/leanprover-community/mathlib/pull/15837\">#15837</a> off the queue</p>",
        "id": 292573059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660049872
    },
    {
        "content": "<p>thanks</p>",
        "id": 292573138,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660049889
    },
    {
        "content": "<p>Bors handles this sort of this automatically though. It just tries again, dividing and conquering as it goes, right?</p>",
        "id": 292573248,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660049935
    },
    {
        "content": "<p>but since we know what the issue is (<a href=\"https://github.com/leanprover-community/mathlib/pull/15836\">#15836</a> proves stuff with <code>positive_cone</code> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15837\">#15837</a> renames <code>positive_cone</code> to <code>positive</code>), it is easier to cancel on of them and not waste time for builds that will fail anyways.</p>",
        "id": 292574357,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660050333
    },
    {
        "content": "<p>It's a shame there's no way to tell bors to undo a divide and conquer when we know better</p>",
        "id": 292574572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660050409
    },
    {
        "content": "<p>I wish <code>bors</code> priorities worked properly</p>",
        "id": 292577168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660051377
    },
    {
        "content": "<p>By the way, I think anyone can <code>bors cancel</code>?<br>\nAt least it work for me in <a href=\"https://github.com/leanprover-community/mathlib/pull/15436\">#15436</a> where I was not delegated.</p>",
        "id": 292588701,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1660055191
    },
    {
        "content": "<p>Could someone take a look at why <a href=\"https://github.com/leanprover-community/mathlib/pull/14115\">#14115</a> failed? The check that failed was <code>bors â€” Merge conflict</code>, but I hadn't seen any merge conflicts before approving the PR.</p>",
        "id": 293500605,
        "sender_full_name": "MarÃ­a InÃ©s de Frutos FernÃ¡ndez",
        "timestamp": 1660561353
    },
    {
        "content": "<p>It's about to have a conflict with <a href=\"https://github.com/leanprover-community/mathlib/pull/15594\">#15594</a>.</p>",
        "id": 293500909,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660561490
    },
    {
        "content": "<p>That's not the answer to the question though.</p>",
        "id": 293501021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660561556
    },
    {
        "content": "<p>The answer is that bors detected the conflict.</p>",
        "id": 293501132,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660561595
    },
    {
        "content": "<p>With an open PR??</p>",
        "id": 293501157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660561613
    },
    {
        "content": "<p>Oh I see! My mistake. It's also on the queue.</p>",
        "id": 293501203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660561641
    },
    {
        "content": "<p>This question comes up over and over again; is this something we need to document, or that we need to ask bors to document better?</p>",
        "id": 293502388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660562213
    },
    {
        "content": "<p>How does one fix this?</p>",
        "id": 293502774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660562441
    },
    {
        "content": "<p>I mean the conflict, not the fact that it confused some people</p>",
        "id": 293502800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660562458
    },
    {
        "content": "<p>Wait for bors to be done with either PR, then you can merge the one that went through in the one that didn't.</p>",
        "id": 293502859,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660562496
    },
    {
        "content": "<p>you can also head the process off by merging onto bors' staging commit</p>",
        "id": 293502968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660562548
    },
    {
        "content": "<p>Given that this batch already failed once, I'm not sure that's wise.</p>",
        "id": 293503010,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660562574
    },
    {
        "content": "<p>A maintainer could check in the build logs whether <a href=\"https://github.com/leanprover-community/mathlib/pull/15594\">#15594</a> was the faulty PR in that batch.</p>",
        "id": 293503051,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660562602
    },
    {
        "content": "<p>I think this question comes up often because the way that bors operates is not widely known, especially if you're not a programmer</p>",
        "id": 293503080,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1660562620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/bors.20build.20failure/near/293502388\">said</a>:</p>\n<blockquote>\n<p>This question comes up over and over again; is this something we need to document, or that we need to ask bors to document better?</p>\n</blockquote>\n<p>I think some documentation would be helpful.</p>",
        "id": 293503195,
        "sender_full_name": "MarÃ­a InÃ©s de Frutos FernÃ¡ndez",
        "timestamp": 1660562647
    },
    {
        "content": "<p>Once you have done the merge work on that staging commit, it shouldn't be too bad to merge on whatever ends up on master since that will probably also have the conflicting PR</p>",
        "id": 293503211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660562656
    },
    {
        "content": "<p>(when I say \"merge\" I mean \"rebase\")</p>",
        "id": 293503264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660562684
    },
    {
        "content": "<p>or you can just wait the 4 hours or so</p>",
        "id": 293503348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660562731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/bors.20build.20failure/near/293503051\">said</a>:</p>\n<blockquote>\n<p>A maintainer could check in the build logs whether <a href=\"https://github.com/leanprover-community/mathlib/pull/15994\">#15994</a> was the faulty PR in that batch.</p>\n</blockquote>\n<p>So can a non-maintainer</p>",
        "id": 293503592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660562851
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9xXpkDmsnFGjZ-YtJEUQXQ7C/image.png\">No</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9xXpkDmsnFGjZ-YtJEUQXQ7C/image.png\" title=\"No\"><img src=\"/user_uploads/3121/9xXpkDmsnFGjZ-YtJEUQXQ7C/image.png\"></a></div>",
        "id": 293503769,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660562946
    },
    {
        "content": "<p><em>Sometimes</em> I can see the logs on the commit, but here <a href=\"https://github.com/leanprover-community/mathlib/commit/6eb146e873f32077111041472656aa3153f88b6f\">https://github.com/leanprover-community/mathlib/commit/6eb146e873f32077111041472656aa3153f88b6f</a> doesn't have them.</p>",
        "id": 293503924,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660563006
    },
    {
        "content": "<p>The logs are here: <a href=\"https://github.com/leanprover-community/mathlib/actions/workflows/bors.yml\">https://github.com/leanprover-community/mathlib/actions/workflows/bors.yml</a></p>",
        "id": 293504637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660563298
    },
    {
        "content": "<p>Your page just links to the appropiate entry on that one</p>",
        "id": 293504701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660563324
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/pull/15594\">#15594</a> was indeed the one failing. I just fixed the error (<code>to_additive</code> was now guessing the wrong name). Can someone put it back on the queue?</p>",
        "id": 293517075,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1660568963
    },
    {
        "content": "<p>Now it's my turn to cause build failures with <a href=\"https://github.com/leanprover-community/mathlib/pull/14534\">#14534</a></p>",
        "id": 293568531,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660580801
    },
    {
        "content": "<p>It is a quite old PRs so there are \"implicit conflicts\" e.g some rewrites no longer work</p>",
        "id": 293568614,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660580826
    },
    {
        "content": "<p>I'm fixing it, sorry for the inconvenience</p>",
        "id": 293568641,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660580835
    },
    {
        "content": "<p>No need at all to apologise; this sort of thing is a normal part of collaborative development.</p>",
        "id": 293571656,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660581782
    },
    {
        "content": "<p>strangely <a href=\"https://app.bors.tech/repositories/24316\">#bors</a> is currently showing no jobs running</p>",
        "id": 293574084,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660582643
    },
    {
        "content": "<p>but at the bottom of my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16046\">#16046</a> it shows bors is running</p>",
        "id": 293574235,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660582696
    },
    {
        "content": "<p>It looks like bors is still feeling ill <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 293600030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660588853
    },
    {
        "content": "<p>I don't know why it hasn't restarted automatically with a smaller batch, but the failure of the last batch shows a genuine conflict between <a href=\"https://github.com/leanprover-community/mathlib/pull/16011\">#16011</a> (uses <code>topological_group_is_uniform</code>) and <a href=\"https://github.com/leanprover-community/mathlib/pull/16027\">#16027</a> (renames <code>topological_group_is_uniform</code>), so one of those needs to be removed from the batch before it's restarted.</p>",
        "id": 293600505,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1660589023
    },
    {
        "content": "<p>Thanks. I asked it to take <a href=\"https://github.com/leanprover-community/mathlib/pull/16011\">#16011</a> of the queue</p>",
        "id": 293602272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660589753
    },
    {
        "content": "<p>Ha!</p>",
        "id": 293602564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660589858
    },
    {
        "content": "<p>I just kicked a PR on the queue, and bors started working again.</p>",
        "id": 293602603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660589871
    },
    {
        "content": "<p>So it seems like it just completely lost track of all its queues <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 293602700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660589892
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib/pull/14534#issuecomment-1215301959\">bors cancel</a> vs. <code>bors r-</code> matter?<br>\n(Edit: apparently they're equivalent: <a href=\"https://bors.tech/documentation/\">https://bors.tech/documentation/</a> )</p>",
        "id": 293603075,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660590027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/bors.20build.20failure/near/293602603\">said</a>:</p>\n<blockquote>\n<p>I just kicked a PR on the queue, and bors started working again.</p>\n</blockquote>\n<p>But does <a href=\"https://app.bors.tech/repositories/24316\">#bors</a> still remember the other PRs?</p>",
        "id": 293603186,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1660590067
    },
    {
        "content": "<p>Nope. All the queues were gone.</p>",
        "id": 293604429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660590527
    },
    {
        "content": "<p>I'm adding everything back now.</p>",
        "id": 293604447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660590533
    },
    {
        "content": "<p>Doing an experiment with manually putting 10 PRs in a batch using priorities.</p>",
        "id": 293604498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660590549
    },
    {
        "content": "<p>I think everything that had <code>ready-to-merge</code> should now be back on a <a href=\"https://app.bors.tech/repositories/24316\">#bors</a> queue. Let's hope it doesn't forget the queues again.</p>",
        "id": 293605283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660590913
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14534\">#14534</a> is ready again, should I just <code>bors r+</code> it again?</p>",
        "id": 293610596,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1660593003
    },
    {
        "content": "<p>Feel free to try</p>",
        "id": 293610836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660593123
    },
    {
        "content": "<p>It looks like all the queues were dropped because bors crashed (only maintainers can view <a href=\"https://app.bors.tech/repositories/24316/log\">this link</a>). If it happens again it could be worth reporting.</p>",
        "id": 293613161,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1660594104
    },
    {
        "content": "<p>Hmm, I didn't know bors would combine PRs with different priorities<br>\n<a href=\"/user_uploads/3121/tqBIOn5JoPdTZXwCe5VEFo3Y/Screenshot-from-2022-08-15-23-33-33.png\">Screenshot-from-2022-08-15-23-33-33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tqBIOn5JoPdTZXwCe5VEFo3Y/Screenshot-from-2022-08-15-23-33-33.png\" title=\"Screenshot-from-2022-08-15-23-33-33.png\"><img src=\"/user_uploads/3121/tqBIOn5JoPdTZXwCe5VEFo3Y/Screenshot-from-2022-08-15-23-33-33.png\"></a></div>",
        "id": 293624402,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660599266
    },
    {
        "content": "<p>If you go to the PR, I think it's because the priority was set twice</p>",
        "id": 293625787,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1660599873
    },
    {
        "content": "<p>The next build failure says that <a href=\"https://github.com/leanprover-community/mathlib/pull/15065\">#15065</a> should be removed from the queue until it's been updated for the <code>has_scalar</code> rename. (But bors seems to have carried on automatically with a different subset of the queue after that build failure.)</p>",
        "id": 293640148,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1660608324
    },
    {
        "content": "<p>Thanks! It looks like <a href=\"https://github.com/leanprover-community/mathlib/pull/15065\">#15065</a> has since been removed from the queue.</p>",
        "id": 293641846,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1660609595
    },
    {
        "content": "<p>Crazy. Bors is now building a queue with prio 0, even though there are two queues with prio 4.</p>",
        "id": 293657337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660627657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/113488-general/topic/bors.20build.20failure/near/293625787\">said</a>:</p>\n<blockquote>\n<p>If you go to the PR, I think it's because the priority was set twice</p>\n</blockquote>\n<p>But all queues had a unique prio ~ 8hrs ago. So there is no good reason for mixing them.</p>",
        "id": 293657402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660627686
    },
    {
        "content": "<p>I completely don't understand how bors priorities work.</p>",
        "id": 293657411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660627697
    },
    {
        "content": "<p>It seems that when bors bisects (due to failed build), the half that's not chosen forms a batch that goes to the end of the queue.</p>",
        "id": 293657974,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660628186
    }
]