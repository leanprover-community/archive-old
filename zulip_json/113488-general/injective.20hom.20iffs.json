[
    {
        "content": "<p>Do we have the following? What should they be with our new class structure? Are ring_homs outside the class structure?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one_hom.map_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">one_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid_with_zero_hom.map_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.to_monoid_hom.to_one_hom.map_eq_one_iff</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid_with_zero_hom.map_eq_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">monoid_with_zero_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.to_zero_hom.map_eq_zero_iff</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_hom.map_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.to_monoid_hom.to_one_hom.map_eq_one_iff</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_hom.map_eq_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.to_monoid_with_zero_hom.to_zero_hom.map_eq_zero_iff</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 266984158,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641413193
    },
    {
        "content": "<p>You should now use <code>one_hom_class</code>, <code>monoid_with_zero_hom_class</code>, ...</p>",
        "id": 266988089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641415184
    },
    {
        "content": "<p>Just <code>one_hom_class</code> actually <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 266988165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641415213
    },
    {
        "content": "<p>for ring_homs, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.injective_iff\">docs#ring_hom.injective_iff</a>. not sure about other versions</p>",
        "id": 266988192,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641415238
    },
    {
        "content": "<p>but yes, I agree this should be fun-liked, especially now that we nearly got the fixes in!</p>",
        "id": 266988218,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641415254
    },
    {
        "content": "<p>oh, there's also both monoid-hom versions, ofc (dah): <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.injective_iff\">docs#add_monoid_hom.injective_iff</a></p>",
        "id": 266988709,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641415513
    },
    {
        "content": "<p>OK, working on it</p>",
        "id": 266989275,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641415826
    },
    {
        "content": "<p>Those existing ones are a bit weak, because the <code>iff.mpr</code> to produce an <code>injective f</code> requires inverses on the domain</p>",
        "id": 266989674,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641416064
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.eq_iff'\">docs#function.injective.eq_iff'</a></p>",
        "id": 267008475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641426492
    },
    {
        "content": "<p>Your lemma is just <code>hf.eq_iff' (map_one f)</code></p>",
        "id": 267008501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641426515
    },
    {
        "content": "<p>Feel free to add to <code>algebra/group/hom</code> for a <code>map_one_class</code></p>",
        "id": 267008526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641426549
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11275\">#11275</a></p>",
        "id": 267014762,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641431225
    }
]