[
    {
        "content": "<p>In core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"o\">[],</span>    <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"o\">[],</span>     <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">[],</span> <span class=\"n\">congr_arg</span> <span class=\"n\">pred</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">pred</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n\n<p>I don't understand why <code>head</code> requires a non-empty vector, but <code>tail</code> doesn't. And <code>tail</code> creates a nasty <code>n - 1</code> dep-type. Why not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"o\">[],</span>    <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 214247774,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603400529
    },
    {
        "content": "<p>Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 - 1= 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 214247861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603400578
    },
    {
        "content": "<p>and <code>nat.succ n - 1 = n</code></p>",
        "id": 214247902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603400601
    },
    {
        "content": "<p>that definition of tail also accords with <code>list.tail</code>, which is not partial but returns the empty list on an empty input</p>",
        "id": 214248026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603400665
    },
    {
        "content": "<p>If I do <code>tail</code> on a <code>vector (n + 1)</code> -- that is defeq to <code>vector n</code>?</p>",
        "id": 214248030,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603400666
    },
    {
        "content": "<p>yes</p>",
        "id": 214248036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603400672
    },
    {
        "content": "<p>Great.</p>",
        "id": 214248047,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603400680
    }
]