[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3198/checks?check_run_id=814314665\">https://github.com/leanprover-community/mathlib/pull/3198/checks?check_run_id=814314665</a></p>",
        "id": 202197329,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593280417
    },
    {
        "content": "<p>lint tells me that I have an unused argument</p>",
        "id": 202197331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593280422
    },
    {
        "content": "<p>but I think I used it</p>",
        "id": 202197333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593280426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> could you check this? thanks</p>",
        "id": 202197336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593280435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What happens if you remove the argument?</p>",
        "id": 202198054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281340
    },
    {
        "content": "<p>it's used in the <code>char_p.cast_eq_zero</code> line</p>",
        "id": 202198136,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593281431
    },
    {
        "content": "<p><code>invalid rewrite tactic, failed to synthesize type class instance</code></p>",
        "id": 202198145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593281452
    },
    {
        "content": "<p>That's a different lemma</p>",
        "id": 202198154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281466
    },
    {
        "content": "<p>It's complaining about <code>of_irreducible_expand</code></p>",
        "id": 202198160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281476
    },
    {
        "content": "<p>And there I don't see how it's used</p>",
        "id": 202198165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281483
    },
    {
        "content": "<p>You seem to be looking at <code>of_separable_expand</code></p>",
        "id": 202198174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281499
    },
    {
        "content": "<p>oh I'm blind</p>",
        "id": 202198177,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593281508
    },
    {
        "content": "<p>Tip: copy the linter output to the bottom of the file, and ctrl-click on the names</p>",
        "id": 202198225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Could <code>#lint</code> be \"Try this\"-ified?</p>",
        "id": 202198232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281569
    },
    {
        "content": "<p>For certain linters it might be possible to get a \"Try this\" in theory. I think quite some work is needed though, to determine what parts to replace, and how to guess how the source looks from the elaborated expression. In this particular case, it would have to insert an <code>omit HF</code> just before the declaration...</p>",
        "id": 202198470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593281910
    },
    {
        "content": "<p>No... I didn't mean anything fancy.</p>",
        "id": 202198489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281964
    },
    {
        "content": "<p>Just that you can hit <code>Alt-V</code> and have the output of <code>#lint</code> be copied to the main window.</p>",
        "id": 202198497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593281987
    },
    {
        "content": "<p>I guess it just saves 5 keystrokes...</p>",
        "id": 202198540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282008
    },
    {
        "content": "<p>But it will save them a lot of times for a lot of people.</p>",
        "id": 202198546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282018
    },
    {
        "content": "<p>Of course you should only do this if it's easy.</p>",
        "id": 202198554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282028
    },
    {
        "content": "<p>I think that should be possible. I don't know if the <code>try this</code> logic to decide what to replace is already compatible with things other than tactics.<br>\nNote: there is also a hole command linter option</p>",
        "id": 202198653,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593282240
    },
    {
        "content": "<p>Aaah, I forgot about the hole command</p>",
        "id": 202198721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593282336
    },
    {
        "content": "<p>Unfortunately you cannot use hole commands at the top level (would that be possible/desirable to change <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>?), so you currently have to write <code>#eval _</code> or something.</p>",
        "id": 202198774,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593282384
    },
    {
        "content": "<p>I opened an issue about better integrating <code>#lint</code> with vscode-lean a while back: <a href=\"https://github.com/leanprover/vscode-lean/issues/149\">leanprover/vscode-lean#149</a> </p>\n<p>There aren't any real concrete ideas there yet though.</p>",
        "id": 202199608,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593283681
    },
    {
        "content": "<p>In Lean 3.17 we could make the linting output a widget and make the declaration names clickable.</p>",
        "id": 202199996,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593284221
    },
    {
        "content": "<p>Presumably then we could also have the extension add diagnostics at the locations of the linter errors?</p>",
        "id": 202200059,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593284312
    },
    {
        "content": "<p>Oh yes, I'm also missing the summer festivals. <span aria-label=\"sweet potato\" class=\"emoji emoji-1f360\" role=\"img\" title=\"sweet potato\">:sweet_potato:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 202200144,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593284422
    },
    {
        "content": "<p>I'm really looking forward to the <code>extract_goal</code> widget, paired with the recently discussed name-auto-generator.</p>",
        "id": 202200612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593285083
    },
    {
        "content": "<p>BTW, at least for the current file it is possible to generate diagnostics from Lean, without modifying the vscode extension at all:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"c1\">--&lt;- blue squiggles here</span>\n<span class=\"n\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">widget</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n<span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">decl_pos</span> <span class=\"bp\">``</span><span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">tc</span> <span class=\"n\">unit</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n    <span class=\"n\">tc</span><span class=\"bp\">.</span><span class=\"n\">stateless</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"o\">[</span>\n        <span class=\"n\">h</span> <span class=\"s2\">&quot;details&quot;</span> <span class=\"o\">[</span><span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;open&quot;</span> <span class=\"s2\">&quot;true&quot;</span><span class=\"o\">]</span> <span class=\"o\">[</span>\n            <span class=\"n\">h</span> <span class=\"s2\">&quot;summary&quot;</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"s2\">&quot;unused argument&quot;</span><span class=\"o\">],</span>\n            <span class=\"s2\">&quot;blah&quot;</span><span class=\"o\">]],</span>\n<span class=\"n\">trace_widget_at</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">to_component</span> <span class=\"s2\">&quot;unused argument: blah&quot;</span>\n</code></pre></div>",
        "id": 202200855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593285387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/unused.20argument/near/202200612\">said</a>:</p>\n<blockquote>\n<p>I'm really looking forward to the <code>extract_goal</code> widget, paired with the recently discussed name-auto-generator.</p>\n</blockquote>\n<p>Has it been done in the meanwhile?</p>",
        "id": 295312061,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1661462257
    }
]