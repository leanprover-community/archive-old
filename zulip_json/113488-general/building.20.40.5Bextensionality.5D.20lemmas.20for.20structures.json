[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I'm wondering if you've thought recently about building <code>@[extensionality]</code> lemmas for structures automatically. I know we had some discussion about this a long time ago (gitter?), and some attempts at a <code>congr_struct</code> tactic.</p>",
        "id": 132045472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534165647
    },
    {
        "content": "<p>Hi Scott! No, I haven't thought of it but I think it shouldn't be hard. We could invoke it with <code>@[make_extentionality]</code> to distinguish from the lemma itself.</p>",
        "id": 132046891,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534167133
    },
    {
        "content": "<p>shouldn't that obviously be a derive handler?</p>",
        "id": 132046948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167219
    },
    {
        "content": "<p>From memory the problems quickly arose when there were dependent fields. First there's the question of whether to use rewrites or heqs.</p>",
        "id": 132046968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167239
    },
    {
        "content": "<p>But I think correctly building the statements for later fields, in either approach, seemed hardish.</p>",
        "id": 132047029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167262
    },
    {
        "content": "<p>can't you just use <code>congr</code> to generate the lemma?</p>",
        "id": 132047037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167274
    },
    {
        "content": "<p>At the time I knew almost nothing about writing tactics, and haven't thought much about it since, however. :-)</p>",
        "id": 132047051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167292
    },
    {
        "content": "<p>However, I don't usually find that extensionality lemmas are automatable</p>",
        "id": 132047080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167328
    },
    {
        "content": "<p>since they are often mathematically nontrivial, e.g. <code>units A</code> only depends on the first component</p>",
        "id": 132047104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I also thought about making it a derive handler but I think it has to be a type class for that, no?</p>",
        "id": 132047105,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534167354
    },
    {
        "content": "<p>I thought the thing after <code>derive</code> was just a label</p>",
        "id": 132047165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167383
    },
    {
        "content": "<p>You mean ... make a metavariable of type <code>a = b</code>, actually run the <code>cases a, cases b, congr</code> tactic, then inspect the goals, take those as arguments for your declaration, and have the proof by <code>cases a, cases b, congr ; assumption</code>?</p>",
        "id": 132047194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167417
    },
    {
        "content": "<p>yes</p>",
        "id": 132047240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167482
    },
    {
        "content": "<p>or more directly, just generate the <code>congr_lemma</code> and inspect its type</p>",
        "id": 132047277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167500
    },
    {
        "content": "<p>I see. We'd need a cleanup phase that decides when fields are propositional and omits those <code>heq</code>s.</p>",
        "id": 132047460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167706
    },
    {
        "content": "<p>no, that's why I am suggesting you use the <code>congr_lemma</code></p>",
        "id": 132047519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167759
    },
    {
        "content": "<p>it does that already</p>",
        "id": 132047521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534167764
    },
    {
        "content": "<p>Looking at the code for <code>derive_attr</code>, I think you're right Mario and it is of course a much better way</p>",
        "id": 132047629,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534167894
    },
    {
        "content": "<p>oh, okay: why doesn't <code>congr</code> do that then?</p>",
        "id": 132047635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534167904
    },
    {
        "content": "<p>Doesn't it?</p>",
        "id": 132047661,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534167935
    },
    {
        "content": "<p>I just tried on <code>category_theory.functor</code>, and got goals for the propositional fields.</p>",
        "id": 132047751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534168035
    },
    {
        "content": "<p>I'm surprised. You can clean them up I think using <code>match_eq</code> / <code>match_heq</code> and then using <code>is_proof</code> on the results.</p>",
        "id": 132047967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534168244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The annoying thing with <code>derive</code> is that it parses a <code>pexpr</code> and does some basic name resolution. We may get around it by defining a dummy like <code>def extensionality := ()</code></p>",
        "id": 132048418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534168726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any luck in building it?</p>",
        "id": 132126240,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534270296
    },
    {
        "content": "<p>Sorry, haven't got back to it. Writing <code>ext</code> lemmas by hand is annoying but not critical. :-)</p>",
        "id": 132141380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534286578
    }
]