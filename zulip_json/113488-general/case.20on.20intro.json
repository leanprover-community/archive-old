[
    {
        "content": "<p>Is there a way to split value from intro at once?<br>\nI have a lot of such code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fg_inv</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">fg_inv</span> <span class=\"k\">with</span> <span class=\"n\">gf</span> <span class=\"n\">fg</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>And I want something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">gf</span><span class=\"o\">,</span> <span class=\"n\">fg</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div>\n<p>Like in ssreflect</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"k\">move</span><span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">gf</span> <span class=\"n\">fg</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 243723465,
        "sender_full_name": "kana",
        "timestamp": 1624489178
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a></p>",
        "id": 243723486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624489200
    },
    {
        "content": "<p>and <code>⟨</code> is right associative so <code>rintro ⟨f, g, gf, fg⟩,</code> should work</p>",
        "id": 243723594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624489270
    },
    {
        "content": "<p>Oh, but it requires mathlib, and mathlib imports a lot of notations, that conflict with my notations, and it is impossible to hide or disable them.</p>",
        "id": 243726358,
        "sender_full_name": "kana",
        "timestamp": 1624491311
    },
    {
        "content": "<p>which notations?</p>",
        "id": 243726468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624491381
    },
    {
        "content": "<p>most mathlib notations are scoped</p>",
        "id": 243726504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624491420
    },
    {
        "content": "<p><code>_ᵒᵖ</code>, <code>_ ⟶ _</code></p>\n<p>I am playing with category theory formalization from scratch, and I have such notations</p>",
        "id": 243726732,
        "sender_full_name": "kana",
        "timestamp": 1624491598
    },
    {
        "content": "<p>Just import <code>tactic.rcases</code> then</p>",
        "id": 243726874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624491685
    },
    {
        "content": "<p>Oh thanks, it works. I tried to import the whole <code>tactic</code></p>",
        "id": 243726957,
        "sender_full_name": "kana",
        "timestamp": 1624491751
    },
    {
        "content": "<p>wow, I wonder which tactic needs opposite categories! (but you do seem to be right, one of them does!)</p>",
        "id": 243727034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624491822
    },
    {
        "content": "<p><code>_ᵒᵖ</code> is used for more than just opposite categories, if I recall correctly... (e.g. the opposite ring, opposite monoid, etc.). I still don't know why importing <code>tactic</code> imports the notation though!</p>",
        "id": 243727295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624492035
    },
    {
        "content": "<p>I bet <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a> is a culprit</p>",
        "id": 243727539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624492266
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#op_induction\">tactic#op_induction</a> is my guess</p>",
        "id": 243727948,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624492594
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.op_induction\">docs#tactic.interactive.op_induction</a>?</p>",
        "id": 243753979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624522352
    }
]