[
    {
        "content": "<p>I keep running into the problem of <code>simp</code> reducing something to <code>p = ff</code> when I really want <code>¬↥p</code>. I then end up doing a <code>rw</code> explicitly, which is a pain. Is there any way to work around this issue with <code>simp</code>?</p>",
        "id": 127703649,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528360231
    },
    {
        "content": "<p>You can often do <code>suffices : &lt;what you want&gt;, simpa using this</code> or <code>...simp [this]</code> or similar. You want something neater than this though?</p>",
        "id": 127703860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528360453
    },
    {
        "content": "<p>I was hoping for something like <code>simp [-&lt;theorem&gt;]</code>, disabling a particular rewrite but still using only <code>simp</code>. I'm not sure those other options are any better than the <code>rw</code> that I do now.</p>",
        "id": 127703975,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528360589
    },
    {
        "content": "<p>Or, even better, remove the <code>simp</code> attribute locally for my whole file. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 127703996,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528360626
    },
    {
        "content": "<p>Ah, found it: <code>simp [-eq_ff_eq_not_eq_tt]</code>. I just had to look at the <code>simp</code> rules with <code>set_option trace.simplify.rewrite true</code>.</p>",
        "id": 127704359,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528361065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">eq_ff_eq_not_eq_tt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127704372,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528361092
    },
    {
        "content": "<p>Not the rule I expected.</p>",
        "id": 127704392,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528361113
    },
    {
        "content": "<p>But I guess it makes sense due to this instance and defeq:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">coe_sort_bool</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 127704475,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528361209
    }
]