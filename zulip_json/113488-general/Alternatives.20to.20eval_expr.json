[
    {
        "content": "<p>Hi all, does anyone know of functions that are similar to <code>eval_expr</code> but can handle local variables? I have tried to write a tactic that is similar to ring but commutative semigroups. It uses <code>eval_expr</code> to map expressions representing products in the semigroup into a type I can work with. The tactic is working when asked to prove an equality such as <code>example : 3*((2*3)*3)=(2*3)*(3*3)</code> but not when asked to prove a statement such as <code>example (n m : ℕ) : n*((m*n)*n) = (m*n)*(n*n)</code>. In the second case I get the error <code>invalid eval_expr, expression must be closed</code>. </p>\n<p>Here is a minimal working example that gives the same error </p>\n<div class=\"codehilite\"><pre><span></span>import tactic.interactive\nopen tactic\n\nexample (n : ℕ) : ℕ :=\nbegin\n(do [m] ← local_context,\n    m&#39; ← eval_expr ℕ m,\n    let r := reflect (m&#39; + 2),\n    exact r)\nend\n</pre></div>\n\n\n<p>Is there any other tactic I could replace <code>eval_expr</code> with to make the above construction work?<br>\nThanks!</p>",
        "id": 163462746,
        "sender_full_name": "Michael Howes",
        "timestamp": 1555416285
    },
    {
        "content": "<p>What do you expect the tactic to do here? <code>eval_expr</code> will try to produce a value of type <code>nat</code>, like 0, 1, 2, ... If you just give it a variable <code>n</code>, it can't turn it into a value.</p>",
        "id": 163463142,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555416719
    },
    {
        "content": "<p>In your example, you can work entirely at the <code>expr</code> level, no need to evaluate anything.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163463201,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555416738
    },
    {
        "content": "<p>Does something like this work in your real application?</p>",
        "id": 163463304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555416855
    },
    {
        "content": "<p>I think something like this doesn't work in the application I am trying. This is the function I've defined which used <code>eval_expr</code>:</p>\n<div class=\"codehilite\"><pre><span></span>meta def reflect_expr (α : Type) [reflected α] : expr → tactic (csge α)\n| `(%%e₁ * %%e₂) := do\n p₁ ← reflect_expr e₁,\n p₂ ← reflect_expr e₂,\n return (comp p₁ p₂)\n| `(%%e : α) := do\n a ← eval_expr α e,\n return (const a)\n</pre></div>\n\n\n<p>The type <code>csge α</code>  is short for <code>comm_semigroup_expr α</code> which is an inductive type I defined to represent products in the commutative semigroup <code>α</code>.  It is defined like so:</p>\n<div class=\"codehilite\"><pre><span></span>inductive csge (α : Type)  : Type\n| const : α → csge\n| comp  : csge → csge → csge\n</pre></div>\n\n\n<p>If I replace the above function with:</p>\n<div class=\"codehilite\"><pre><span></span>meta def reflect_expr (α : Type) [reflected α] : expr → tactic (csge α)\n| `(%%e₁ * %%e₂) := do\n p₁ ← reflect_expr e₁,\n p₂ ← reflect_expr e₂,\n return (comp p₁ p₂)\n| `(%%e : α) := do\n return `(const %%e)\n</pre></div>\n\n\n<p>I get a type mismatch error. Also for reference I am basing the tactic I'm writing off this blog post <a href=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\">https://xenaproject.wordpress.com/2018/06/13/ab3/</a> about ring</p>",
        "id": 163464125,
        "sender_full_name": "Michael Howes",
        "timestamp": 1555417657
    }
]