[
    {
        "content": "<p>Heh...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">le_refl&#39;</span>\n  <span class=\"n\">sorry</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 124004577,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521628478
    },
    {
        "content": "<p>did you put <code>sorry</code> for the definition of <code>le</code> as well?</p>",
        "id": 124004587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521628528
    },
    {
        "content": "<p><code>le := _, le_refl := sorry</code> will error</p>",
        "id": 124004627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521628565
    },
    {
        "content": "<p>Yes :). I just sorried everything to build it incrementally, I know I don' goof'd, it's just amusing that sorry can actually fail to typecheck.</p>",
        "id": 124004630,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521628567
    },
    {
        "content": "<p>Indeed! :)</p>",
        "id": 124004634,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521628581
    },
    {
        "content": "<p>It's the first time I've seen <code>sorry</code> being red-squiggled in Lean</p>",
        "id": 124004641,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521628620
    },
    {
        "content": "<p>I think it is having difficulty unifying the types, this would happen also if you tried to use something of type <code>\\forall {x : Type*}. x</code></p>",
        "id": 124004706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521628698
    },
    {
        "content": "<p>So I guess  sorry first needs to know the type and then gives you a bogus term thereof, rather than just \"closing the goal\" as if by magic? Would the latter behaviour lead to weirdness in scenarios where something depends on a (presumably temporary) sorry?</p>",
        "id": 124004853,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521629012
    },
    {
        "content": "<p>I think the problem has to do with unresolved metavariables in the type</p>",
        "id": 124004895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521629082
    },
    {
        "content": "<p>You should always be able to sorry everything, but you have to work from the beginning, from the nondependent <code>sorry</code>s to the dependent ones</p>",
        "id": 124004947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521629185
    },
    {
        "content": "<p>Right. It's just interesting that sorry cares about anything at all :)! So for example, <code>{ le := sorry, le_refl := sorry ... }</code> would work but <code>{ le := _, le_refl := sorry ... }</code> would not.</p>",
        "id": 124005016,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521629297
    },
    {
        "content": "<p>I got sorry red-squiggled about 2 weeks ago, for probably the first time. I awarded myself an achievement.</p>",
        "id": 124005487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521630261
    },
    {
        "content": "<p>It's like the dual problem of proving an inconsistency :)</p>",
        "id": 124005556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521630404
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/too.20many.20axioms.20in.20comm_ring.20class/near/123391025\" title=\"#narrow/stream/113488-general/subject/too.20many.20axioms.20in.20comm_ring.20class/near/123391025\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/too.20many.20axioms.20in.20comm_ring.20class/near/123391025</a></p>",
        "id": 124006030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521631432
    }
]