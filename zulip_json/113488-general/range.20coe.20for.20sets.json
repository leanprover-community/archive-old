[
    {
        "content": "<p>This might be a dumb question but I just bumped into the fact that <code>subtype.range_coe</code> is not true by <code>rfl</code>. More precisely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.range_coe</span> <span class=\"c1\">-- But not true by `rfl`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This is what we trying to prove; it's obviously not true by definition</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Even granting extensionality, it's obviously still not true by definition</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">coe</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc.</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256557003,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633603636
    },
    {
        "content": "<p>Of course this doesn't really matter but I wondered if things had to be this way. Could we have a library of <code>set</code>s where we had this by definition?</p>",
        "id": 256557116,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633603702
    },
    {
        "content": "<p>I think it will be really hard to make that defeq. But I don't know how to make my intuition precise.</p>",
        "id": 256558743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633604549
    },
    {
        "content": "<p>That was basically my conclusion also. There might not be much more to say here.</p>",
        "id": 256559065,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633604742
    },
    {
        "content": "<p>I agree with Johan. One way to make it a bit more clear is to consider what happens if we treat it as a computable function, under the substitution Prop |-&gt; Type. In that case, we are composing <code>coe s : (Σ x: A, s x) -&gt; A</code> with <code>range : (A -&gt; B) -&gt; B -&gt; Type</code> and wish for <code>range (coe s) x = s x</code> to be defeq. The definition of <code>coe</code> here is basically set in stone (it is the first projection), so the only question is whether there is a definition of <code>range</code> making this work. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- λ f b, Σ a, plift (f a = b)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ??</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>Notice that this is an equality of types. Since there are no reductions or cancellations at the level of type operators, the only way we could hope to have <code>range (coe s)</code> compute to <code>s</code> would be if it was (directly or indirectly) an input to <code>range</code>, but the implicit arguments are <code>@range (Sigma s) A (coe s)</code>, so we are stymied by the fact that <code>Sigma</code> is not an injective type operator (certainly not at the defeq level).</p>",
        "id": 256563309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633607060
    },
    {
        "content": "<p>Thanks Mario, this is the sort of great answer I had hoped I might receive if I was lucky!</p>",
        "id": 256570883,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633610847
    }
]