[
    {
        "content": "<p>Is this expected behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- error: not marked noncomputable</span>\n</code></pre></div>\n<p>Surely the computability of types is irrelevant, so <code>foo</code> shouldn't poison <code>baz</code></p>",
        "id": 258174927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634640989
    },
    {
        "content": "<p>I'm pretty sure it complains about the <code>foo</code> in <code>@bar.mk foo 1</code>.</p>",
        "id": 258175214,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634641146
    },
    {
        "content": "<p>Ah right, and then this is just the simpler case that lean doesn't track computability at that level</p>",
        "id": 258175394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634641226
    },
    {
        "content": "<p>This came up when wanting to show a <code>galois_insertion</code> between two noncomputable functions, with a computable choice operation</p>",
        "id": 258175455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634641258
    }
]