[
    {
        "content": "<p>What is the canonical way to solve</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192900441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585995006
    },
    {
        "content": "<p><code>by finish</code> probably works.</p>",
        "id": 192901655,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585997003
    },
    {
        "content": "<p>Or <code>finish [finset.ext]</code></p>",
        "id": 192901659,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585997020
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 192902127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585997786
    },
    {
        "content": "<p>isn't there an <code>insert_comm</code> theorem for this?</p>",
        "id": 192902277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585998030
    },
    {
        "content": "<p>Mario, my next question would be how to prove <code>{a,b,c,d,e} = {d,a,c,e,b}</code>.</p>",
        "id": 192902363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585998187
    },
    {
        "content": "<p>I feel like <code>simp</code> should be able to use <code>insert_comm</code> to do general AC simplifications just as it does with addition currently (when you give it <code>add_left_comm</code>)</p>",
        "id": 192902638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585998634
    },
    {
        "content": "<p>In this case <code>finset.ext</code> should be enough since simp definitely knows how to play the game with permuting disjuncts</p>",
        "id": 192902653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585998682
    },
    {
        "content": "<p>You can do <code>simp [finset.ext, or_comm]</code></p>",
        "id": 192903661,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586000383
    },
    {
        "content": "<p>How come no or_assoc?</p>",
        "id": 192904344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586001483
    },
    {
        "content": "<p>Because there is only one <code>or</code> on each side.</p>",
        "id": 192905545,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586003500
    },
    {
        "content": "<p>How about this one</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192922609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586027521
    },
    {
        "content": "<p>This are the kind of trivialities that I don't want to think about...</p>",
        "id": 192922659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586027586
    },
    {
        "content": "<p>That doesn't even typecheck for me</p>",
        "id": 192922733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586027745
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nX : Type ?,\na b c d : X\n⊢ has_insert ?m_1 (finset X)\n</pre></div>",
        "id": 192922741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586027756
    },
    {
        "content": "<p>I'd knock off a proof for you but I can't get anything to work</p>",
        "id": 192922879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586027998
    },
    {
        "content": "<p>Hmm, does <code>import data.finset</code> solve it?</p>",
        "id": 192922944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028079
    },
    {
        "content": "<p>no</p>",
        "id": 192922946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586028087
    },
    {
        "content": "<p>I copy pasted this out of a file where it does typecheck</p>",
        "id": 192922947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028091
    },
    {
        "content": "<p>Crazy</p>",
        "id": 192922948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028097
    },
    {
        "content": "<p>What mathlib are you using?</p>",
        "id": 192923007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586028147
    },
    {
        "content": "<p>The first example doesn't work for me either. What have I done? I've tried in two projects.</p>",
        "id": 192923022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586028185
    },
    {
        "content": "<p>Both mathlibs from April</p>",
        "id": 192923074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586028245
    },
    {
        "content": "<p>I don't see any reason why that wouldn't work</p>",
        "id": 192923091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028275
    },
    {
        "content": "<p>Oh, does <code>@eq (finset X) {a, b} {c, d}</code> work?</p>",
        "id": 192923103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028306
    },
    {
        "content": "<p>decidable equality issue?</p>",
        "id": 192923116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586028357
    },
    {
        "content": "<p>Ha, that might be it. I do have <code>open_locale classical</code> at the top of the file</p>",
        "id": 192923230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028561
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">Test</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192923256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028581
    },
    {
        "content": "<p>Of course this result is <em>classical</em>, in every sense of the word...</p>",
        "id": 192923315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028642
    },
    {
        "content": "<p>Is this something that existing automation should be able to do? <code>finish</code> doesn't...</p>",
        "id": 192923440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586028901
    },
    {
        "content": "<p>This is the best I could do. I think it is something that there should be an algorithm that does it, at least after <code>simp [finset.ext] at h</code>, because it's a first order in the language with no relation or functions other than equality which must be decidable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192923749,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586029403
    },
    {
        "content": "<p>More generally one could ask</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192925069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586031323
    },
    {
        "content": "<p>with <code>finish using</code> we can make it even shorter, but it must still be spoon-fed the instantiations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">d</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192928827,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1586037339
    },
    {
        "content": "<p>This is a bit surprising to me because <code>h a</code> doesn't make sense until after <code>finset.ext</code> has been applied to <code>h</code></p>",
        "id": 192929902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586038992
    },
    {
        "content": "<p>Aah I see, it applies <code>simp [finset.ext]</code> to all the hypotheses, presumably before reading what happens after <code>using</code></p>",
        "id": 192929958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586039065
    },
    {
        "content": "<p>Suppose I wanted to generalize this example to a pair of N-element sets.  Is there any way to do it with N a parameter ?</p>",
        "id": 192959324,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1586092810
    },
    {
        "content": "<p>You're in danger of formalising the assertion that if L is a list and P is a permutation, then P L and L give the same multiset, which will be true by definition because multiset is defined as a quotient of list by permutations.</p>",
        "id": 192959415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586092936
    },
    {
        "content": "<p>It's also not true that <code>{a, b, c} = {d, e, f}</code> implies <code> (a = d and b = e and c = f) or [5 other permutations]</code>.</p>",
        "id": 192959922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586093746
    },
    {
        "content": "<p>because <code>{1,1,2}={1,2,2}</code> if they're finsets</p>",
        "id": 192960266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094305
    }
]