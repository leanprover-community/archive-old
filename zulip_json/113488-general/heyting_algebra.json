[
    {
        "content": "<p>So because heyting_algebras define complement in terms of implication, but the current boolean algebra is defined in terms of complement, everywhere we provide an instance of boolean_algebra has to change with my current refactor. Is there some way to avoid this?</p>",
        "id": 220509160,
        "sender_full_name": "christopher andrew upshaw",
        "timestamp": 1608452487
    },
    {
        "content": "<p>a heyting algebra has a complement field too, but it adds the constraint that the complement is equal to the definition using implication</p>",
        "id": 220511664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608457065
    },
    {
        "content": "<p>Take a look at the way <code>lt</code> is written in the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder/src\">src#preorder</a></p>",
        "id": 220511705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608457097
    },
    {
        "content": "<p>I think I am already doing that, but it still means that the definition of boolean changes enough that instances do longer work.<br>\nFrom<br>\n ```lean<br>\nclass boolean_algebra α extends bounded_distrib_lattice α, has_compl α, has_sdiff α :=<br>\n(inf_compl_le_bot : ∀x:α, x ⊓ xᶜ ≤ ⊥)<br>\n(top_le_sup_compl : ∀x:α, ⊤ ≤ x ⊔ xᶜ)<br>\n(sdiff_eq : ∀x y:α, x \\ y = x ⊓ yᶜ)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">to</span>\n<span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"kd\">class</span> <span class=\"n\">heyting_algebra</span> <span class=\"n\">α</span> <span class=\"kd\">extends</span> <span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_compl</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_internal_imp</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">imp_adjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">⇨</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">compl_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⇨</span> <span class=\"bp\">⊥</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span> <span class=\"kd\">extends</span> <span class=\"n\">heyting_algebra</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_sdiff</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">top_le_sup_compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">x</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sdiff_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So under the old scheme all you needed was the complement and sdiff, but now you need to define the implication and imp_adjoint. (Which seems harder to prove sometimes.) I am very much open to suggestions about how this should be structured.</p>",
        "id": 220535534,
        "sender_full_name": "christopher andrew upshaw",
        "timestamp": 1608495429
    },
    {
        "content": "<p>You should probably keep implication as part of the definition of <code>boolean_algebra</code>, but provide a new constructor for people to construct a <code>boolean_algebra</code> with only the sdiff and complement fields the same way as before.</p>",
        "id": 220699034,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1608649987
    },
    {
        "content": "<p>Could you try to fix your <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> christopher?</p>",
        "id": 220699177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608650058
    }
]