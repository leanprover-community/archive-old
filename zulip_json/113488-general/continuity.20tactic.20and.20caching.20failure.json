[
    {
        "content": "<p>While playing with irreducible continuity, I tried to have a look at what makes the continuity tactic too slow to be really usable. A good example is <code>trans</code> in <code>path_connected.lean</code>, in which two lines are written by hand since <code>continuity</code> is too slow. Put back a <code>continuity</code> there. With <code>set_option trace.class_instances true</code>, one can see that Lean tries several times to find the same instance, with the message <code>caching failure for ...</code></p>",
        "id": 217149808,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605713399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , is that something to be expected?</p>",
        "id": 217150906,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605713793
    },
    {
        "content": "<p>This is definitely the opposite of expected.</p>",
        "id": 217153289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605714746
    },
    {
        "content": "<p>That's what I was expecting :-)</p>",
        "id": 217154322,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605715105
    },
    {
        "content": "<p>Weirdly enough, if you insert <code>have : has_mul X, apply_instance</code> instead of <code>continuity</code>, then it fails quickly (and the cache works as expected).</p>",
        "id": 217154930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605715310
    },
    {
        "content": "<p>More minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">foo1</span><span class=\"o\">,</span> <span class=\"n\">foo2</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The instance trace shows that the instance cache created when trying to apply <code>foo1</code> is not used when trying to apply <code>foo2</code>.</p>",
        "id": 217158531,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605716497
    },
    {
        "content": "<p>This means that <code>continuity</code> will try to infer instances zillions of times (each time it applies a new lemma, it tries again to solve the instances). It's not surprising it's slow then!</p>",
        "id": 217158786,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605716587
    },
    {
        "content": "<p>Then <code>continuity</code> is even worse, because the cache doesn't work at all there.  (There are some <code>cached failure for</code> with <code>apply_rules</code> but not with <code>continuity</code>)</p>",
        "id": 217160911,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605717435
    },
    {
        "content": "<p>Yes, it's true, <code>continuity</code> is even worse. If I get it correctly, <code>continuity</code> is essentially <code>apply_rules</code> called from <code>tidy</code>, so both are probably doing something wrong with respect to caching (or caching is doing something wrong with respects to tactics). I don't remember doing anything fancy when I wrote <code>apply_rules</code>, but my tactic writing skills are not really developed :)</p>",
        "id": 217170048,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605721142
    },
    {
        "content": "<p>Even more basic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">foo2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>apply foo1</code> fails, but the instance cache is not preserved for the <code>apply foo2</code> search. This is normal since <code>&lt;|&gt;</code> does not preserve anything when the first branch fails, if I understand correctly. Instead, one would need a more clever combinator, doing first the instance search for <code>foo1</code> (and adding it to the instance cache), and then applying <code>foo1</code>  if possible, or going to the <code>foo2</code> branch if necessary. This is above my pay grade, though :-(</p>",
        "id": 217188613,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605729573
    },
    {
        "content": "<p>In fact, I think I know how to fix the <code>apply_rules</code> issue, precisely by replacing the combinator <code>&lt;|&gt;</code> which ditches the state after the application of <code>apply foo1</code> (and therefore the newly built instance cache) before calling <code>apply foo2</code>. With a new combinator that propagates the state, the instance cache seems to be kept. The code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">interaction_monad.result</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">interaction_monad</span> <span class=\"n\">state</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interaction_monad_orelse_propagating_state</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">interaction_monad.result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">success</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e₁</span> <span class=\"n\">ref₁</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">interaction_monad.result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n     <span class=\"n\">success</span>\n     <span class=\"n\">exception</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">apply_list_expr</span> <span class=\"o\">(</span><span class=\"n\">opt</span> <span class=\"o\">:</span> <span class=\"n\">apply_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no matching rule\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">interaction_monad_orelse_propagating_state</span> <span class=\"n\">tactic_state</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">interactive.concat_tags</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"n\">opt</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">apply_list_expr</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of the original</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">apply_list_expr</span> <span class=\"o\">(</span><span class=\"n\">opt</span> <span class=\"o\">:</span> <span class=\"n\">apply_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no matching rule\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">interactive.concat_tags</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"n\">opt</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply_list_expr</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Does it makes sense, or I am overlooking an obvious issue? (the tests for <code>apply_rules</code> pass as well with the new version)</p>",
        "id": 217272317,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605794409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , in fact the problem in the continuity application doesn't seem to be related to the <code>continuity</code>tactic, it already shows up with a single <code>apply</code>. Maybe related to the way caching works along different instance search paths? In <code>topology/path_connected.lean</code>, if you replace the line 298</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">path.continuous</span> <span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_proj_I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_const.mul</span> <span class=\"n\">continuous_id'</span><span class=\"o\">)},</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">continuous.mul</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>of course this fails, but the instance search message is too long, truncated at 262144 characters, and there are a lot of <code>caching failure for linear_ordered_field X</code> in the instance trace.</p>",
        "id": 217278958,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605797323
    },
    {
        "content": "<p>(I guess the <code>linear_ordered_field</code> instances are in fact not the same wrt how the multiplication would be defined, so they count as different)</p>",
        "id": 217279345,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605797472
    },
    {
        "content": "<p>This is interesting.</p>",
        "id": 217279529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605797544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/continuity.20tactic.20and.20caching.20failure/near/217279345\">said</a>:</p>\n<blockquote>\n<p>(I guess the <code>linear_ordered_field</code> instances are in fact not the same wrt how the multiplication would be defined, so they count as different)</p>\n</blockquote>\n<p>The caching mechanism assumes that all instances are definitionally equal.  It won't try to find an instance twice.</p>",
        "id": 217279603,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605797586
    },
    {
        "content": "<p>Then it's really weird</p>",
        "id": 217280226,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605797848
    },
    {
        "content": "<p>Issue registered as <a href=\"https://github.com/leanprover-community/lean/issues/504\">lean#504</a>. I could not minimize further than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous.mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(the trace of the failing <code>apply</code> is really scary)</p>",
        "id": 217409549,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605883612
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/505\">lean#505</a>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  is amazing, but we already knew that <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 217432050,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605892892
    }
]