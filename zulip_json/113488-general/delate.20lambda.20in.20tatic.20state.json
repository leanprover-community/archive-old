[
    {
        "content": "<p>Hello, i have a tatic state of the form : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">œÄ1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">œÄ2</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">‚®Ø</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)),</span> <span class=\"n\">œÄ1</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">œÄ2</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"err\">‚ü¶</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"err\">‚üß</span> <span class=\"n\">g</span>\n</pre></div>\n\n\n<p>Is it possible to remove the lambda ? To have something like : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">œÄ1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">œÄ2</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">œÄ1</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">œÄ2</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"err\">‚ü¶</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"err\">‚üß</span> <span class=\"n\">g</span>\n</pre></div>\n\n\n<p>i.e reduce the <code> \\lambda </code>, i thinck it's the name of the operation ?<br>\nThx</p>",
        "id": 194024185,
        "sender_full_name": "orlando",
        "timestamp": 1586955108
    },
    {
        "content": "<p><code>dsimp only</code></p>",
        "id": 194024359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586955187
    },
    {
        "content": "<p>But really we should have a <code>beta_reduce</code> tactic.</p>",
        "id": 194024409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586955211
    },
    {
        "content": "<p>I usually just type <code>dsimp</code> to do this. <code>dsimp only</code> what?</p>",
        "id": 194024561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955287
    },
    {
        "content": "<p>Ok so the operation that i want is named beta reduction : <br>\nwith dsimp, <br>\n<code> (œÄ1 ((Y &lt; œÄ1&gt; | Y &lt; œÄ2&gt;) g) | œÄ2 ((Y &lt; œÄ1&gt; | Y &lt; œÄ2&gt;) g)) = g </code>  </p>\n<p>nice !</p>",
        "id": 194024717,
        "sender_full_name": "orlando",
        "timestamp": 1586955357
    },
    {
        "content": "<p><code>dsimp only []</code></p>",
        "id": 194024869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955425
    },
    {
        "content": "<p>no <code> dsimp only </code>  and  <code>dsimp only [],</code> fail but dsimp transform my expression !</p>",
        "id": 194025137,
        "sender_full_name": "orlando",
        "timestamp": 1586955547
    },
    {
        "content": "<p>my code is a little too long to put here</p>",
        "id": 194025327,
        "sender_full_name": "orlando",
        "timestamp": 1586955618
    },
    {
        "content": "<p>Maybe you could find out what's going on with <code>squeeze_simp</code></p>",
        "id": 194025347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955627
    },
    {
        "content": "<p><code>dsimp</code> means something like \"use only the simp lemmas whose proof is <code>rfl</code>\"</p>",
        "id": 194025487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955687
    },
    {
        "content": "<p>But you don't actually have a lambda applied to something, do you?</p>",
        "id": 194025496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955692
    },
    {
        "content": "<p>The reverse category composition order makes everything hard to read <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 194025529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955711
    },
    {
        "content": "<p>Scott thinks exactly the opposite.</p>",
        "id": 194025751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955789
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Users may like to add `f ‚äö g` for composition in the standard convention, using\n```lean\nlocal notation f ` ‚äö `:80 g:80 := category.comp g f    -- type as \\oo\n```\n</pre></div>",
        "id": 194025829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955818
    },
    {
        "content": "<p>Yeah but Scott doesn't actually write any proofs...?</p>",
        "id": 194025843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955826
    },
    {
        "content": "<p>because everything is supposed to be <code>by obviously</code></p>",
        "id": 194025922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955850
    },
    {
        "content": "<p>He worked hard on <code>tidy</code> to avoid that.</p>",
        "id": 194025930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586955854
    },
    {
        "content": "<p>he writes things which mathematicians would call proofs, but which turn out to be definitions.</p>",
        "id": 194025933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955854
    },
    {
        "content": "<p>but in the real world, it's hard</p>",
        "id": 194025939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955856
    },
    {
        "content": "<p>The first expression is :  <br>\n<code> ((Y &lt; œÄ1&gt; | Y &lt; œÄ2&gt;) ‚â´ Œª (g : (Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B)), œÄ1 g | œÄ2 g) g = ùüô Y‚ü¶(A ‚®Ø B)‚üß g </code></p>\n<p>so it's the left hand, <code> a ‚â´ (\\lambda  b, f b) b </code> i thinck it's equal  <code> a ‚â´ f b</code></p>",
        "id": 194025990,
        "sender_full_name": "orlando",
        "timestamp": 1586955880
    },
    {
        "content": "<p>I still don't understand Scott's position on the order of composition really</p>",
        "id": 194025991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955880
    },
    {
        "content": "<p>This is category theory, homs are not meant to be applied.</p>",
        "id": 194026003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586955890
    },
    {
        "content": "<p>@orlando just imagine maps on the right :-)</p>",
        "id": 194026018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955898
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">(x)f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span></p>",
        "id": 194026032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955903
    },
    {
        "content": "<p>then it all makes sense</p>",
        "id": 194026044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586955909
    },
    {
        "content": "<p>It's really <code>(a ‚â´ (\\lambda  b, f b)) b =  (\\lambda  b, f b) (a b) = f (a b)</code></p>",
        "id": 194026075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955933
    },
    {
        "content": "<p>and this is awful</p>",
        "id": 194026112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586955949
    },
    {
        "content": "<p>This is because you are applying homs to elements of the object, which is utterly bad taste for category theory minded people.</p>",
        "id": 194026286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586956005
    },
    {
        "content": "<p>Not really, because everything is really a set by Yoneda.</p>",
        "id": 194026332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586956021
    },
    {
        "content": "<p><code>(a ‚â´ (\\lambda  b, f b)) b = (a ‚â´ f) b</code></p>",
        "id": 194026345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586956024
    },
    {
        "content": "<p>sad CCC noises</p>",
        "id": 194026360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586956031
    },
    {
        "content": "<p>I think I've only seen one category theory paper ever that uses the <code>‚â´</code> direction</p>",
        "id": 194026664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586956151
    },
    {
        "content": "<p>hum ok <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  !</p>",
        "id": 194026698,
        "sender_full_name": "orlando",
        "timestamp": 1586956168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  :  i   thinck it's not too bad notation, when you make diagram that clear !</p>",
        "id": 194026838,
        "sender_full_name": "orlando",
        "timestamp": 1586956221
    },
    {
        "content": "<p>I wonder whether it's feasible now to move ‚àò to a class</p>",
        "id": 194026922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586956260
    },
    {
        "content": "<p>Sounds like a nice idea</p>",
        "id": 194027454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586956477
    },
    {
        "content": "<p>or, it might be a disaster <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194027748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586956570
    },
    {
        "content": "<p>I'm sorry about <code>‚â´</code>! I was converted when I wanted to think about categories enriched in braided categories (for modelling domain walls of 3d topological phases), and composition really is a map hom(a,b) \\otimes hom(b,c) \\to hom(a,c), and unless you assume your braiding is symmetric, thus throwing out the nice examples, you just can't write it the other way. But this is absolutely no excuse for inflicting it on anyone else --- just the story of how I got there...</p>",
        "id": 194027801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586956588
    },
    {
        "content": "<p>but I don't think ‚àò is used that frequently elsewhere anyways</p>",
        "id": 194027802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586956589
    },
    {
        "content": "<p>I got used to it. For me it's helpful having it Scott's way around because when I'm staring at a commutative diagram and wanting to translate the assertion that it commutes into Lean I don't have to read everything backwards.</p>",
        "id": 194033173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586958675
    },
    {
        "content": "<p>Do we have notation for reversed function application? Something like <code>x ¬£ f := f x</code></p>",
        "id": 194034785,
        "sender_full_name": "David W√§rn",
        "timestamp": 1586959336
    },
    {
        "content": "<p><code>\\mapsfrom</code></p>",
        "id": 194034962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959419
    },
    {
        "content": "<p>no that's something slightly different I guess. How about <code>\\gg</code> again?</p>",
        "id": 194035227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959524
    },
    {
        "content": "<p>isn't it <code>$&lt;</code>?</p>",
        "id": 194035906,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586959799
    },
    {
        "content": "<p>but we actually want <code>|&gt;</code> in the future, but it's in core</p>",
        "id": 194035982,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586959817
    },
    {
        "content": "<p>I think McLane writes stuff in the &gt;&gt; direction in Sheaves in Geometry and Logic</p>",
        "id": 194042749,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586962419
    },
    {
        "content": "<p>Or geology and logic, as it's called in the topos repo</p>",
        "id": 194043084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586962554
    },
    {
        "content": "<p>I had amazon show me a random page from this book and it happened to give the definition of category, and there it's clear that composition is written in the usual order.</p>",
        "id": 194044967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963284
    },
    {
        "content": "<p>p. 10</p>",
        "id": 194044985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963291
    },
    {
        "content": "<p>I think in this subject in particular it's nearly impossible to use the reverse order consistently, because all the objects being considered are closely related to sets and categories and one wants to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>F</mi><mi>G</mi><mo stretchy=\"false\">)</mo><mi>X</mi><mo>=</mo><mi>F</mi><mi>G</mi><mi>X</mi><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(FG)X = FGX = F(GX)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 194045062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963326
    },
    {
        "content": "<p>That is, impossible unless one also writes function application on the other side, which is what the one paper I've seen use this convention also tries to do, but then it gets a bit weird to write things like Sub(X) or Hom(X, Y) which look like function applications with the usual order</p>",
        "id": 194045321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963427
    },
    {
        "content": "<p>So I just checked, and yeah, my bad on this one. I had that mistaken with some other weird convention the book has about applying a contravariant on a morphism. Anyway, it's not important. </p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You're mentioning a topos repo, I'm quite new to lean and I wanted to do some toposy-category-y stuff for fun with it, do you have a link to the repo or is it private at this point?</p>",
        "id": 194046707,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586963895
    },
    {
        "content": "<p><a href=\"https://github.com/b-mehta/topos\" title=\"https://github.com/b-mehta/topos\">https://github.com/b-mehta/topos</a></p>",
        "id": 194046831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586963964
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 194047008,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586964031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"286014\">@Robin Carlier</span> I'm currently taking a little break from adding stuff to that repo and making a bunch of PRs to mathlib instead - if there's anything in particular you'd like to work on in there (especially from the issues and coming soon list) let me know, or if you have any questions about it! :)</p>",
        "id": 194065782,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586972175
    },
    {
        "content": "<p>Ok! for now I think I will just play around with what have been done so far. However I see that the fact that any presheaf is a colimit of representable is an open issue on the repo, I might be interested in doing that later on, when I'm confident enough with lean ;) <br>\n(actually, I installed lean because I thought \"hey proving co-yoneda might be a cool challenge\", so it's quite a nice coincidence)</p>",
        "id": 194066816,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586972653
    },
    {
        "content": "<p>there is a version of co / Yoneda in mathlib  inthe repertory \"category_theory\" perhaps it can help you !</p>",
        "id": 194205225,
        "sender_full_name": "orlando",
        "timestamp": 1586974047
    },
    {
        "content": "<p>Yes, that's a great idea! I really like the proof given in Geology and Logic (I.5, Proposition 1) in particular using the result in Theorem 2 which is useful in other contexts so I'd like to have it in the repo (and eventually in mathlib) - but of course I'd be more than happy with an alternate proof too!</p>",
        "id": 194206105,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586974502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> <a href=\"#narrow/stream/113488-general/topic/delate.20lambda.20in.20tatic.20state/near/194042749\" title=\"#narrow/stream/113488-general/topic/delate.20lambda.20in.20tatic.20state/near/194042749\">said</a>:</p>\n<blockquote>\n<p>I think McLane writes stuff in the &gt;&gt; direction in Sheaves in Geometry and Logic</p>\n</blockquote>\n<p>I don't think so - at least not in the edition I have</p>",
        "id": 194206289,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586974590
    },
    {
        "content": "<p>Yeah no I had that mistaken for its notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚ãÖ</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">x \\cdot f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">‚ãÖ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(f)(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a presheaf</p>\n<p>I agree with you that Th 2 is the good stuff (and to me it's the really important point, the fact that you get an adjoint pair gives sooo many nice constructions), and I was intending to do it this way. <br>\nFor now I'll read a bit how things are proved in the category_theory package and in the repo to get a grasp of how things are done (I'm just fresh out of reading \"Theorem Proving in Lean\" and playing the natural numbers game, so I still have to get a bit more used to lean syntax/all the nice tactics around)</p>",
        "id": 194206973,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586974964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> <a href=\"#narrow/stream/113488-general/topic/delate.20lambda.20in.20tatic.20state/near/194206973\" title=\"#narrow/stream/113488-general/topic/delate.20lambda.20in.20tatic.20state/near/194206973\">said</a>:</p>\n<blockquote>\n<p>all the nice tactics around</p>\n</blockquote>\n<p>On this note, if there's any tactics you think would be useful for category theory, definitely start a thread for it!</p>",
        "id": 194209924,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586976292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  <span class=\"user-mention\" data-user-id=\"286014\">@Robin Carlier</span>  </p>\n<p>A question i do a little exercice  :  Traduction of group structure on objet of a category with product and terminal objet. And Show that this give a structure of group on Yoneda functor. There is  3 files : <a href=\"https://github.com/Or7ando/lean/tree/master/.github/workflows\" title=\"https://github.com/Or7ando/lean/tree/master/.github/workflows\">here</a> <code>group_objet.lean</code> <code>sugar_yoneda.lean</code> <br>\n<code> to_product.lean </code> </p>\n<ol>\n<li>My proof is horrible cause i don't know good theorem on category perhaps. </li>\n<li>Do you have a cool proof of this fact : <a href=\"https://ncatlab.org/nlab/show/group+object\" title=\"https://ncatlab.org/nlab/show/group+object\">see here</a> for definition  ? Without big calculus like me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></li>\n<li>Yesterday i try to make, group action of group object on a objet. And I asked myself the question: is there an automatic translation of the axioms of algebraics structure, For example, how to write the ring object axioms in a category ? </li>\n</ol>\n<p>Is it  topos theory behind ?</p>",
        "id": 194216055,
        "sender_full_name": "orlando",
        "timestamp": 1586979135
    },
    {
        "content": "<p>I don't make functoriality for the moment !</p>",
        "id": 194216310,
        "sender_full_name": "orlando",
        "timestamp": 1586979280
    }
]