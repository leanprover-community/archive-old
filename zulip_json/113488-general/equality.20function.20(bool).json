[
    {
        "content": "<p>Hey, this seems pretty basic, but if I have a straightforward inductive datatype, how do I test for equality of two values in a way that returns a boolean? After lots of looking, I finally found that you can use <code>@[derive decidable_eq]</code> to come close, but it still seems like there's a bit of gymnastics to get it to a bool, so I suspect I'm not doing it right.</p>",
        "id": 210800199,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600722484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">colours</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span>\n<span class=\"bp\">|</span> <span class=\"n\">green</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">colours</span><span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"bp\">=</span> <span class=\"n\">colours</span><span class=\"bp\">.</span><span class=\"n\">blue</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">colours</span><span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"bp\">=</span> <span class=\"n\">colours</span><span class=\"bp\">.</span><span class=\"n\">blue</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210800388,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600722569
    },
    {
        "content": "<p>yaaaay. It's so obvious when one is told how to do it :P</p>",
        "id": 210800637,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600722673
    },
    {
        "content": "<p>I couldn't find documentation that describes derive, and I'm also struggling to find source for the standard libraries. Like, where does <code>to_bool</code> live?</p>",
        "id": 210800779,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600722731
    },
    {
        "content": "<p><code>derive</code> sadly doesn't have good documentation yet (see <a href=\"https://github.com/leanprover-community/mathlib/issues/3533\">#3533</a>). To find the source, VS Code and emacs both should have a \"go to definition\" feature that you can use.</p>\n<p><del>On zulip, we can also do this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_bool\"><a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_bool\">docs#to_bool</a></a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_bool/src\"><a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_bool/src\">src#to_bool</a></a></del></p>",
        "id": 210801004,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600722868
    },
    {
        "content": "<p>womp womp, 404</p>",
        "id": 210801105,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600722908
    },
    {
        "content": "<p>This works: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool\">docs#decidable.to_bool</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool/src\">src#decidable.to_bool</a></p>",
        "id": 210801349,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600723034
    },
    {
        "content": "<p>rad. Thanks for the help!</p>",
        "id": 210801382,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600723067
    }
]