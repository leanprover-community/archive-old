[
    {
        "content": "<p>We have <code>empty</code>, <code>pempty</code>, and <code>fin 0</code>. Possibly more. Should there be a typeclass that abstracts over empty types? How do we make it play nicely with <code>[nonempty X]</code>?</p>\n<p>Question is inspired by <a href=\"https://github.com/leanprover-community/mathlib/pull/5520/files#diff-713f1ae1a0f3e41d74048db22cbe6705516ab077f6e352f19b46d29a230b9a2cR150\">https://github.com/leanprover-community/mathlib/pull/5520/files#diff-713f1ae1a0f3e41d74048db22cbe6705516ab077f6e352f19b46d29a230b9a2cR150</a></p>",
        "id": 221115121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609223562
    },
    {
        "content": "<p>I think we have <code>finite</code> and <code>infinite</code>?</p>",
        "id": 221118309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609229205
    },
    {
        "content": "<p>We can have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_False</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_empty_or_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">α</span> <span class=\"bp\">∨</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Then <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#inhabit\">tactic#inhabit</a> can try <code>cases is_empty_or_nonempty α, { resetI, simp }</code> like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nontriviality\">tactic#nontriviality</a></p>",
        "id": 221321722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609453772
    },
    {
        "content": "<p><code>False</code>? have you been playing with Lean 4?</p>",
        "id": 221327542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609462185
    },
    {
        "content": "<p>No, I guess this is from Python.</p>",
        "id": 221330523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609467199
    }
]