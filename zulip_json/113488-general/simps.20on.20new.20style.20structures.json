[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.field</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_class</span> <span class=\"kd\">extends</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_class</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">initialize_simps_projections</span><span class=\"bp\">?</span> <span class=\"n\">my_class</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">my_class'</span> <span class=\"kd\">extends</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_class'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">initialize_simps_projections</span><span class=\"bp\">?</span> <span class=\"n\">my_class'</span>\n</code></pre></div>\n<p>I can't seem to get the <code>coe</code> projections to work properly on new-style structures. Note that <code>my_class'</code> uses the <code>coe</code> projection, whilst <code>my_class</code> doesn't. How can I fix this?</p>",
        "id": 296582995,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662037927
    },
    {
        "content": "<p>This is for <a href=\"https://github.com/leanprover-community/mathlib/pull/16340\">#16340</a>, right? :)</p>",
        "id": 296588125,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1662039605
    },
    {
        "content": "<p>Search the library for \"We need to specify this projection explicitly in this case\" and mimic what is done in all those cases.</p>",
        "id": 296589376,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662040022
    },
    {
        "content": "<p>you need to define a <code>my_class.simps.apply</code> function manually with the projection you want <code>simps</code> to use.</p>",
        "id": 296589519,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662040062
    },
    {
        "content": "<p>ahh, I see that what Anne suggested is a common workaround :) should I draft a library note about this?</p>",
        "id": 296595548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662041875
    },
    {
        "content": "<p>What's wrong with the <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#custom%20simps%20projection\">library note that Anne linked?</a></p>",
        "id": 296621684,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662047078
    }
]