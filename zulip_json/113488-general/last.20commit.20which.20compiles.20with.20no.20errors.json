[
    {
        "content": "<p>I have a Lean 3.4.2 project with a mathlib dependency. The last time I edited <code>leanpkg.html</code> was about four days ago; after that point, mathlib doesn't move any more. Since then, the project has sometimes compiled and sometimes not compiled. How do I find the \"last\" time that the project compiled with that particular lean and mathlib?</p>",
        "id": 163827069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555808221
    },
    {
        "content": "<p>you can ask git for where a branch lived at some point in the past, I think</p>",
        "id": 163827126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808297
    },
    {
        "content": "<p>it's also not hard to bisect based on the commit times</p>",
        "id": 163827129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808331
    },
    {
        "content": "<p>Is there some automation I can use? Assume my history is completely linear. I want to know the last time <code>leanpkg build</code> built my repo within some commit range.</p>",
        "id": 163827202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555808412
    },
    {
        "content": "<p>does your leanpkg.toml have commit SHAs in it?</p>",
        "id": 163827214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808472
    },
    {
        "content": "<p>this is actually why leanpkg didn't support branch references for a while... they are not reproducible - you can build the exact same project on two days and get a different result</p>",
        "id": 163827266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808574
    },
    {
        "content": "<p>if this matters for your application you should use commit references rather than branch references</p>",
        "id": 163827281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808606
    },
    {
        "content": "<p>Can't you use both?</p>",
        "id": 163827284,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555808627
    },
    {
        "content": "<p>?</p>",
        "id": 163827309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808643
    },
    {
        "content": "<p>both a commit and a branch reference?</p>",
        "id": 163827344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555808721
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 163827400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808820
    },
    {
        "content": "<p>like this?</p>\n<div class=\"codehilite\"><pre><span></span>[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover/mathlib&quot;, branch = &quot;master&quot;, rev = &quot;c1aff1b5c52b7996d69da2d2522cd696d811ed06&quot;}\n</pre></div>",
        "id": 163827464,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555808910
    },
    {
        "content": "<p>That would mean that, if you do <code>leanpkg configure</code>, it checks out the commit. If you do <code>leanpkg update</code> it gets the head of the branch, replace the sha commit with the new one and does the rest of the expected stuff</p>",
        "id": 163827481,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555808988
    },
    {
        "content": "<p>So I could imagine Lean schemes tracking a perfectoid branch of mathlib, which Scott updates occasionally. This system makes that easy.</p>",
        "id": 163828263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555810295
    },
    {
        "content": "<p>We're basically forking mathlib and claiming that our version is better than yours because it contains some high-risk category theory code</p>",
        "id": 163828309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555810344
    },
    {
        "content": "<p>or you could PR some stuff...</p>",
        "id": 163828323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555810397
    },
    {
        "content": "<p>Right, I could add my crappy code to Scott's branch and he could just accept it and hang the quality control if he felt it was the most fun way to proceed</p>",
        "id": 163828577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555810841
    },
    {
        "content": "<p><code>simp, dsimp, simp, dsimp</code> I ask you. Is all that nonsense fixed in the fork?</p>",
        "id": 163828589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555810889
    },
    {
        "content": "<p>no one's touched <code>simp</code>... yet</p>",
        "id": 163828653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555811006
    },
    {
        "content": "<p>What is broken about <code>simp</code>?</p>",
        "id": 163828660,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555811040
    },
    {
        "content": "<p>Scott sometimes has to iterate simp and dsimp to make progress, in his perfectoid branch. Or at least he had to. Scott and Reid were talking about some subtle tweak to <code>simp</code> which might make things better, but it was above my head. The discussion was on Zulip though. IIRC it was left undecided about whether <code>simp</code> could do what they wanted, or not. Mario, can you find a link to the conversation?</p>",
        "id": 163829465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555812501
    },
    {
        "content": "<p>this? <a href=\"#narrow/stream/144837-PR-reviews/topic/.23886.20presheaves/near/162782481\" title=\"#narrow/stream/144837-PR-reviews/topic/.23886.20presheaves/near/162782481\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.23886.20presheaves/near/162782481</a></p>",
        "id": 163829481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555812587
    },
    {
        "content": "<p>Dumb question, veering a little more back towards the topic: if I decide to change my leanpkg.toml so that it tracks some random branch of mathlib, then can I no longer use <code>update-mathlib</code>?</p>",
        "id": 163829580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555812743
    }
]