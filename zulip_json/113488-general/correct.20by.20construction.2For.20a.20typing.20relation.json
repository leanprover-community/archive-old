[
    {
        "content": "<p>So I have been trying to formalize an reversible programing language in lean, and have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ctype</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">⇔</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ctype.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ctype</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">pie</span> <span class=\"o\">:</span> <span class=\"n\">ctype</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atomic</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">atomic</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⇔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⇔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⇔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But there are two problems here, one composition is only associative up to isomorphism, when I would really like it to be strictly associative.<br>\nAnd two, the bigger problem, defining recursive functions is a real pain because the equation compiler doesn't seem to be able to handle the polymorphic recursion.</p>\n<p>Should I keep going on my path of trying to define and prove well founded a subexpression relation?<br>\nOr should I make a untyped version, and then define a typing relation on raw expressions?</p>\n<p>If I do the second I should be able to replace comp with <code>comp' : list pie -&gt; pie -&gt; pie</code> and make <code>comp</code> an append.</p>",
        "id": 248743873,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1628383474
    },
    {
        "content": "<blockquote>\n<p>And two, the bigger problem, defining recursive functions is a real pain because the equation compiler doesn't seem to be able to handle the polymorphic recursion.</p>\n</blockquote>\n<p>Do you have an example of this?</p>",
        "id": 248744272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628384075
    },
    {
        "content": "<p>I would be inclined to go for the untyped version because it's easier to get the equations you want without dependent typing issues</p>",
        "id": 248744296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628384110
    },
    {
        "content": "<p>Sure!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pie.inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pie</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⇔</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">pie.atomic</span> <span class=\"n\">atom</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pie.atomic</span> <span class=\"o\">(</span><span class=\"n\">atom.inv</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g.inv</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">f.inv</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.inv</span> <span class=\"bp\">⊗</span> <span class=\"n\">g.inv</span>\n  <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">♯</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.inv</span> <span class=\"bp\">♯</span> <span class=\"n\">g.inv</span>\n</code></pre></div>\n<p>Gives me the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">},</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma.has_well_founded</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">},</span> <span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">},</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">})</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"n\">base</span> <span class=\"n\">base.has_sizeof_inst</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">psigma.has_well_founded</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">},</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">})</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"n\">base</span> <span class=\"n\">base.has_sizeof_inst</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">),</span>\n               <span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span><span class=\"o\">})</span>\n                 <span class=\"o\">(</span><span class=\"n\">pie.has_sizeof_inst</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span><span class=\"o\">}))))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">using_well_founded'</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kd\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"kn\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">have</span><span class=\"bp\">'-</span><span class=\"n\">expressions.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">default_dec_tac</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">pie.inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">_p</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">},</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">}),</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">_p.snd.fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">_p.fst</span><span class=\"o\">},</span>\n<span class=\"n\">__mlocal__fresh_75_215</span> <span class=\"n\">__mlocal__fresh_75_216</span> <span class=\"n\">__mlocal__fresh_75_217</span> <span class=\"n\">__mlocal__fresh_75_218</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">__mlocal__fresh_75_215</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">__mlocal__fresh_75_216</span><span class=\"o\">},</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">__mlocal__fresh_75_217</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">__mlocal__fresh_75_218</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">psigma.lex</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">),</span> <span class=\"n\">a₁.sizeof</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂.sizeof</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">),</span>\n       <span class=\"n\">psigma.lex</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">),</span> <span class=\"n\">a₁.sizeof</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂.sizeof</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">pie</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span><span class=\"o\">}),</span>\n            <span class=\"n\">pie.sizeof</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span><span class=\"o\">}</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pie.sizeof</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span><span class=\"o\">}</span> <span class=\"n\">a₂</span><span class=\"o\">))</span>\n    <span class=\"o\">⟨</span><span class=\"n\">__mlocal__fresh_75_217</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">__mlocal__fresh_75_218</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩⟩</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">.</span> <span class=\"o\">(</span><span class=\"n\">__mlocal__fresh_75_215</span> <span class=\"bp\">+</span> <span class=\"n\">__mlocal__fresh_75_217</span><span class=\"o\">),</span>\n     <span class=\"o\">⟨</span><span class=\"bp\">.</span> <span class=\"o\">(</span><span class=\"n\">__mlocal__fresh_75_216</span> <span class=\"bp\">+</span> <span class=\"n\">__mlocal__fresh_75_218</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"bp\">♯</span><span class=\"n\">g</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 248744529,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1628384328
    },
    {
        "content": "<p>You should try <code>pie : base -&gt; base -&gt; Type</code></p>",
        "id": 248744687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628384486
    }
]