[
    {
        "content": "<p>I'm trying to write an recursive definition against a <code>ℕ+</code>, but am having a really hard time. Ideally I'd match against <code>1</code> and <code>n + 1</code>, but that doesn't seem to work. My follow up attempt is as follows, but this fails at proof of well-founded-ness</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Kₙ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Kₙ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Am I missing an obvious trick here?</p>",
        "id": 205571671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596186621
    },
    {
        "content": "<p>(again, I realize this definition is contrived, but matching against <code>pnat</code> and <code>fin n</code> is something I'd like to know how best to do)</p>",
        "id": 205571708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596186660
    },
    {
        "content": "<p>This works, but feels clumsy:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Kₙ_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Kₙ_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">Kₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Kₙ_aux</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</code></pre></div>",
        "id": 205572179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596186985
    },
    {
        "content": "<p>I'd go for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Kₙ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Kₙ</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 205572419,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596187213
    },
    {
        "content": "<p>Ah, but then I can't use the builtin <code>add_comm_group (prod x y)</code> instance</p>",
        "id": 205572450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596187249
    },
    {
        "content": "<p>Because there is no <code>add_comm_group unit</code></p>",
        "id": 205572465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596187260
    },
    {
        "content": "<p>We have <code>punit</code> instances.  The trivial group should definitely be <code>punit</code>.</p>",
        "id": 205572659,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596187390
    },
    {
        "content": "<p>Even if it didn't work, you could define a <code>add_comm_group (Kₙ (n+1))</code> instance.</p>",
        "id": 205572697,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596187416
    },
    {
        "content": "<p>Am I missing an import to find those punit instances?</p>",
        "id": 205572794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596187485
    },
    {
        "content": "<p>Yep! <code>algebra.punit_instances</code></p>",
        "id": 205572831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596187523
    },
    {
        "content": "<p>It would be great if lean had a mechanism to suggest imports</p>",
        "id": 205572848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596187539
    },
    {
        "content": "<p>Instead of using the equation compiler you can just write your own recursor as a function and then apply that.</p>",
        "id": 205575526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596189627
    },
    {
        "content": "<p>My goal here is to produce something as readable as possible for someone who doesn't really know lean, and the pattern matcher seems clearer to me than writing my own recursor</p>",
        "id": 205576195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596190235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  's <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">punit_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- vectors</span>\n<span class=\"n\">def</span> <span class=\"n\">Kₙ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Kₙ</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- addition and scalar multiplication</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">Kₙ</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">dunfold</span> <span class=\"n\">Kₙ</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">dunfold</span> <span class=\"n\">Kₙ</span><span class=\"o\">,</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Kₙ</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Kₙ</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">dunfold</span> <span class=\"n\">Kₙ</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">dunfold</span> <span class=\"n\">Kₙ</span><span class=\"o\">,</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Kₙ</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205578379,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596192577
    },
    {
        "content": "<p>Should the following work? But it doesn't yet.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span><span class=\"o\">]]</span>\n<span class=\"n\">def</span> <span class=\"n\">Kₙ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Kₙ</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 205578396,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596192597
    },
    {
        "content": "<p>Feels like a pattern, could be a new <code>derive_handler</code> PR?</p>",
        "id": 205578508,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596192705
    }
]