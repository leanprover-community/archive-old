[
    {
        "content": "<p>I seem to be looking at a bug in ac_refl. Does this pattern of behavior look familiar to anyone?</p>\n<p>It's failing at an equality that is indeed just a matter of commutativity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">arcsin</span> <span class=\"o\">((</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">/</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ac_refl failed</span>\n<span class=\"cm\">  state:</span>\n<span class=\"cm\">  r x : ℝ,</span>\n<span class=\"cm\">  hne : r ≠ 0,</span>\n<span class=\"cm\">  hx1 : -r &lt; x,</span>\n<span class=\"cm\">  hx2 : x &lt; r</span>\n<span class=\"cm\">  ⊢ 1 / (sqrt ((r ^ 2 - x ^ 2) / r ^ 2) * r) = 1 / (r * sqrt ((r ^ 2 - x ^ 2) / r ^ 2))</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232861032,
        "sender_full_name": "Greg Price",
        "timestamp": 1617339954
    },
    {
        "content": "<p>Replacing the <code>ac_refl</code> by <code>rw mul_comm</code> successfully closes the goal.</p>",
        "id": 232861082,
        "sender_full_name": "Greg Price",
        "timestamp": 1617339971
    },
    {
        "content": "<p>This behavior seems to have some kind of interaction going on with state that <code>field_simp</code> leaves behind which isn't immediately visible. If we start directly from what the infoview says is the goal state at that point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>then it succeeds, just as one would hope.</p>",
        "id": 232861140,
        "sender_full_name": "Greg Price",
        "timestamp": 1617340048
    },
    {
        "content": "<p>when you make that example, are you sure your numerals are the same type as in your failing goal?</p>",
        "id": 232861201,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617340097
    },
    {
        "content": "<p>Hmm I'll double-check!</p>",
        "id": 232861214,
        "sender_full_name": "Greg Price",
        "timestamp": 1617340119
    },
    {
        "content": "<p>Looks like the <code>1</code> numerators are of type ℝ in both cases.</p>",
        "id": 232861311,
        "sender_full_name": "Greg Price",
        "timestamp": 1617340209
    },
    {
        "content": "<p>And the <code>2</code> exponents are of type ℕ.</p>\n<p>And the <code>0</code> in a hypothesis is of type ℝ too.</p>\n<p>So it seems like the types all match between the two cases.</p>",
        "id": 232861361,
        "sender_full_name": "Greg Price",
        "timestamp": 1617340275
    },
    {
        "content": "<p>That's based on hovering over them in the infoview.</p>",
        "id": 232861363,
        "sender_full_name": "Greg Price",
        "timestamp": 1617340283
    },
    {
        "content": "<p>Turns out the second <code>1</code> is different, it comes from <code>monoid.has_one</code> instead of <code>real.has_one</code>.</p>",
        "id": 232862089,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617341044
    },
    {
        "content": "<p>Haha oof.</p>\n<p>Thanks! How did you track that down?</p>",
        "id": 232862110,
        "sender_full_name": "Greg Price",
        "timestamp": 1617341065
    },
    {
        "content": "<p>Ah I see, that's also there in the little box in the infoview that I get when I click on that subexpression.</p>",
        "id": 232862136,
        "sender_full_name": "Greg Price",
        "timestamp": 1617341112
    },
    {
        "content": "<p>I tracked it down by doing <code>set_option pp.all true</code> before the examples and then trying to see a difference</p>",
        "id": 232862204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617341177
    },
    {
        "content": "<p>The two are supposedly defeq, so now it's a question of what's going on in <code>ac_refl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monoid.to_has_one</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">real.has_one</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monoid.to_has_one</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">real.has_one</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 232862245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617341246
    },
    {
        "content": "<p>Ah excellent, thanks.</p>\n<p>Wow yeah, with that it really jumps out that there is a difference.</p>",
        "id": 232862250,
        "sender_full_name": "Greg Price",
        "timestamp": 1617341249
    },
    {
        "content": "<p>I tried to take a peek at the implementation of <code>ac_refl</code>, but it looks like it's mostly behind <code>meta constant</code> declarations. I'm guessing that means the implementation is in C++ and not in Lean.</p>",
        "id": 232862362,
        "sender_full_name": "Greg Price",
        "timestamp": 1617341370
    }
]