[
    {
        "content": "<p>I downloaded the 3.4.2 tar.gz image of lean and unpacked it into a directory, which contains only bin, include, and lib. In bin there is an executable called 'lean' which apparently does nothing. I've used lean in the browser and want a command line version on my linux box. <br>\nCan someone point me to instructions to actually run this executable? Google searches have turned up nothing.</p>",
        "id": 176901134,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569815733
    },
    {
        "content": "<p>What do you see if you run <code>lean -v</code>?</p>",
        "id": 176901325,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569816094
    },
    {
        "content": "<p>Lean (version 3.4.2, commit cbd26686ddb, release)</p>",
        "id": 176901395,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569816214
    },
    {
        "content": "<p>So you have <code>lean</code>. You can call it on a file to check it and call <code>lean --help</code> to see the options</p>",
        "id": 176901450,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569816273
    },
    {
        "content": "<p>You might rather use it in emacs or VS code</p>",
        "id": 176901455,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569816293
    },
    {
        "content": "<p>Thanks. I am looking for console interactions because I'm trying to feed it I/O from a lisp program.</p>",
        "id": 176901577,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569816554
    },
    {
        "content": "<p>There is also a C API if want to go that way</p>",
        "id": 176901680,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569816725
    },
    {
        "content": "<p>I'm trying to use it \"underneath\" the Axiom compuer algebra system, essentially feeding it input and capturing the output. The \"-server\" command seems unhappy with \"import <a href=\"http://system.io\" target=\"_blank\" title=\"http://system.io\">system.io</a>\".</p>",
        "id": 176901744,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569816856
    },
    {
        "content": "<p>It looks like the linux version has no \"console\" I/O.</p>",
        "id": 176901764,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569816932
    },
    {
        "content": "<p>I'll look at the source code and see if I can hack something up. Sigh.</p>",
        "id": 176901813,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569816988
    },
    {
        "content": "<p>You can look at the way emacs or VS code are setup to interact with it. That should help</p>",
        "id": 176901871,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569817097
    },
    {
        "content": "<p>I'll do that. Thanks. I expected that a linux version of the program would follow the standard \"pipeline\" model of interaction.</p>",
        "id": 176901903,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569817171
    },
    {
        "content": "<p>It doesn't seem flexible enough to make a language server</p>",
        "id": 176902231,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569817720
    },
    {
        "content": "<p>In its basic mode <code>lean</code> is essentially a compiler, which can also run your program for you (<code>lean --run</code>)</p>",
        "id": 176902382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569817980
    },
    {
        "content": "<p>There is no such thing as a simple job... </p>\n<p>I suppose I could create tmp files and do everything through the file system.</p>",
        "id": 176902388,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569817997
    },
    {
        "content": "<p>Does <code>fopen</code> work on a unix socket?</p>",
        "id": 176902570,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1569818337
    },
    {
        "content": "<p>There's a bit more information / links regarding the <code>lean --server</code> mode in <a href=\"#narrow/stream/113489-new-members/topic/I.20want.20to.20DLLize.20Lean/near/174027850\" title=\"#narrow/stream/113489-new-members/topic/I.20want.20to.20DLLize.20Lean/near/174027850\">this thread</a>.</p>",
        "id": 176902581,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569818387
    },
    {
        "content": "<blockquote>\n<p>Does <code>fopen</code> work on a unix socket?</p>\n</blockquote>\n<p>If you want to play that game you can just do <code>lean /dev/stdin</code></p>",
        "id": 176902626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569818407
    },
    {
        "content": "<p>re: fopen .... yes</p>",
        "id": 176902628,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569818419
    },
    {
        "content": "<p>however I suspect Lean will want to read the whole input before producing any output</p>",
        "id": 176902647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569818467
    },
    {
        "content": "<p>the -run option wants \"main\" but I don't see a reference to main in the book \"Theorem Proving in Lean\", nor in the online tutorial. Can anyone point me at a working \"-run\" example file?</p>",
        "id": 176902650,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569818495
    },
    {
        "content": "<p>Leanpkg is one example: <a href=\"https://github.com/leanprover/lean/tree/master/leanpkg\" target=\"_blank\" title=\"https://github.com/leanprover/lean/tree/master/leanpkg\">https://github.com/leanprover/lean/tree/master/leanpkg</a></p>",
        "id": 176902701,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569818532
    },
    {
        "content": "<p>lean /dev/sdtin almost works</p>",
        "id": 176902852,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569818844
    },
    {
        "content": "<p>This sorta-kinda-almost works:</p>\n<p>lean /dev/stdin<br>\nimport <a href=\"http://system.io\" target=\"_blank\" title=\"http://system.io\">system.io</a><br>\nvariable [io.interface]<br>\nopen io</p>\n<p>def main : io unit :=<br>\nput_str \"hello world\\n\"</p>\n<p>main<br>\nctrl-d</p>\n<p>except that it doesn't seem to like the put_str type and it says \"too may arguments\"</p>\n<p>but, hey, progress!</p>",
        "id": 176903368,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569819705
    },
    {
        "content": "<p>The above code is the first example from the tutorial with hello_world changed to main</p>",
        "id": 176903523,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569819883
    },
    {
        "content": "<p>And this \"worked\":</p>\n<p>lean /dev/stdio<br>\nimport <a href=\"http://system.io\" target=\"_blank\" title=\"http://system.io\">system.io</a><br>\nopen io</p>\n<p>def main : io unit := put_str \"hello world\\n\"</p>\n<p>#check main<br>\nctrl-d</p>\n<p>resulting in the output:<br>\nmain : io unit</p>",
        "id": 176904047,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569820763
    },
    {
        "content": "<p>lean doesn't work incrementally, it expects a complete file, so it seems a bit silly to be taking input on stdin</p>",
        "id": 176904138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569820911
    },
    {
        "content": "<p>Success!</p>\n<p>lean /dev/stdio<br>\nimport <a href=\"http://system.io\" target=\"_blank\" title=\"http://system.io\">system.io</a><br>\nopen io</p>\n<p>def main : io unit := put_str \"hello world\\n\"</p>\n<p>#eval main<br>\nctrl-d</p>\n<p>resulting in the output<br>\nhello world</p>\n<p>Many thanks.</p>",
        "id": 176904182,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569820932
    },
    {
        "content": "<p>It also uses the location of the file to find relative imports</p>",
        "id": 176904185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569820951
    },
    {
        "content": "<p>so you are going to have trouble with nontrivial import statements</p>",
        "id": 176904189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569820964
    },
    {
        "content": "<p>also use triple backtick <code> ```lean ... ``` </code> to bracket lean text</p>",
        "id": 176904209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821005
    },
    {
        "content": "<p>Mario, the problem is that I'm using I/O from Axiom, not from a file.</p>",
        "id": 176904213,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821016
    },
    {
        "content": "<p>then use Axiom to write to a file that exists somewhere in the intended import hierarchy</p>",
        "id": 176904220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821041
    },
    {
        "content": "<p>what are you trying to get lean to do? What kind of input are you expecting to feed it?</p>",
        "id": 176904283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821088
    },
    {
        "content": "<p>Axiom creates dependent types \"on the fly\" in the interpreter so there isn't (normally) an associated file</p>",
        "id": 176904284,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821090
    },
    {
        "content": "<p><code>lean --run foo.lean</code> is essentially the same as <code>lean foo.lean</code> except that lean adds the line <code>#eval main</code> at the end of your file</p>",
        "id": 176904352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821167
    },
    {
        "content": "<p>This is useful for using lean as a programming language for standalone executables</p>",
        "id": 176904369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821223
    },
    {
        "content": "<p>If you are just proving theorems, you don't need it</p>",
        "id": 176904377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821244
    },
    {
        "content": "<p>Yep. lean --run hello.lean works.</p>\n<p>I'm looking to feed a lot of things into lean, and indeed, using lean for checking Axiom's spad code generated from a compiler back-end</p>",
        "id": 176904424,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821308
    },
    {
        "content": "<p>I'm proving Axiom's algorithms correct and trying to use Lean as the proof machine. So I need to \"converse\" with it.</p>",
        "id": 176904512,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821501
    },
    {
        "content": "<p>Lean's axioms and lemmas will come from Axiom's type hierarchy, along with tactics. They won't exist in files.</p>",
        "id": 176904624,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821655
    },
    {
        "content": "<p>Why don't you spit all the proof obligations into a file and then check it?</p>",
        "id": 176904631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821697
    },
    {
        "content": "<p>what's the \"conversation\"?</p>",
        "id": 176904640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569821722
    },
    {
        "content": "<p>File I/O is possible but ugly. It's the late 90s. We can do better. (Just my opinion, actually)</p>\n<p>Axiom interacts with other tools, like a browser, without file I/O</p>",
        "id": 176904714,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569821871
    },
    {
        "content": "<p>You can communicate using memory only files using the server mode, but it's still not clear to me what conversation you want to have with lean. It's not particularly chatty when it comes to verifying a theorem is correct - the answer is either \"yes\" or a spew of errors</p>",
        "id": 176904824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822038
    },
    {
        "content": "<p>I'm trying to learn lean programming. I'm pondering \"compiling to lean\" as one of the compiler backends. Of course, the user's program won't pass the compiler(s) (Axiom or Lean's) and I'll have to give feedback.</p>",
        "id": 176904827,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822039
    },
    {
        "content": "<p>If you want to \"compile to lean\" then you should clearly be writing to a file</p>",
        "id": 176904832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822063
    },
    {
        "content": "<p>Axiom can compile \"on the fly\" from the command line. In fact it does so when resolving parametric types. </p>\n<p>If you define f(x) == x*x then the call f(3) will compile an integer version and f(3.0) will compile a float version, all \"on the fly\"</p>",
        "id": 176904886,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822167
    },
    {
        "content": "<p>Everything could be done through files, I agree.</p>",
        "id": 176904895,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822215
    },
    {
        "content": "<p>I don't think lean will care about that. From lean's point of view that's just one function</p>",
        "id": 176904897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822219
    },
    {
        "content": "<p>but f(\"noise\") should fail</p>",
        "id": 176904949,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822303
    },
    {
        "content": "<p>That doesn't map very easily to lean's type theory, although it can be done</p>",
        "id": 176904963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822341
    },
    {
        "content": "<p>lean uses typeclasses for that sort of thing</p>",
        "id": 176905014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822402
    },
    {
        "content": "<p>I suspect Axiom's dependent type machinery is going to give lean a bit of trouble. But that's pretty much my own research problem.</p>",
        "id": 176905023,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822426
    },
    {
        "content": "<p>In any case, I would recommend using lean as a compiler, as Reid suggested. Don't try to start it up on every REPL line</p>",
        "id": 176905069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569822496
    },
    {
        "content": "<p>Does the emacs interface use files?</p>",
        "id": 176905076,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822530
    },
    {
        "content": "<p>In unix, a file is nothing more than a stream of bytes anyway</p>",
        "id": 176905156,
        "sender_full_name": "Tim Daly",
        "timestamp": 1569822678
    },
    {
        "content": "<p>The emacs mode uses <code>--server</code>, which you could also use yourself, but fundamentally it's not that different than invoking Lean on the entire file repeatedly</p>",
        "id": 176933167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569851173
    },
    {
        "content": "<p>It might be possible to implement a REPL in Lean without too much difficulty</p>",
        "id": 176933437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569851372
    }
]