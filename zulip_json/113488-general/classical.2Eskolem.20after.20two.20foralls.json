[
    {
        "content": "<p><code>classical.skolem</code> turns a <code>forall, exists</code> into an <code>exists, forall</code>. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ ∃ (f : ℤ → ℤ), ∀ (x : ℤ), f x &lt; x</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But I was expecting this to work too:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I don't understand why Lean doesn't rewrite once, let alone twice.</p>",
        "id": 204532909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595328179
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>works</p>",
        "id": 204532937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595328217
    },
    {
        "content": "<p>probably higher order unification?</p>",
        "id": 204532996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595328251
    },
    {
        "content": "<p>Really? I'm just switching a forall and an exists. Here is the application.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hausdorff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hausdorff&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">hausdorff_iff</span> <span class=\"o\">:</span> <span class=\"n\">hausdorff</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">hausdorff&#39;</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">hUV</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hUV</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span>\n    <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">skolem</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n  <span class=\"c1\">-- { rintro ⟨U, V, hUV⟩,</span>\n  <span class=\"c1\">--   intros x y hxy,</span>\n  <span class=\"c1\">--   use (U x y hxy),</span>\n  <span class=\"c1\">--   use (V x y hxy),</span>\n  <span class=\"c1\">--   exact hUV x y hxy }</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I want the proof in the &lt;- direction to be <code>simp [classical.skolem]</code></p>",
        "id": 204534400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595329341
    },
    {
        "content": "<p>I've been talking to too many constructivists on Twitter</p>",
        "id": 204534417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595329371
    }
]