[
    {
        "content": "<p>At <a href=\"https://github.com/leanprover-community/tutorials/issues/11\">https://github.com/leanprover-community/tutorials/issues/11</a>, <span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span> asks why <code>rw</code> is so powerful. I know that part of the answer is it calls <code>refl</code>, by I don't understand why <code>refl</code> works when the relevant lemma doesn't seem to be tagged.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- The following lemma is not tagged refl</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">dvd_refl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> dvd_refl : ∀ {α : Type*} [comm_semiring α] (a : α), a ∣ a -/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 197414121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377411
    },
    {
        "content": "<p>Note that you cannot replace <code>by refl</code> with <code>rfl</code> here</p>",
        "id": 197414396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589377528
    },
    {
        "content": "<p>It is tagged?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- #print dvd_refl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">dvd_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 197415116,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589377851
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197415294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589377924
    },
    {
        "content": "<p>Ok, so someone added this attribute far away from the lemma itself (presumably in mathlib)</p>",
        "id": 197415503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589378001
    },
    {
        "content": "<p>I should have used #print instead of \"Go to definition\"</p>",
        "id": 197415522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589378013
    },
    {
        "content": "<p>I'm about to move that definition out of core</p>",
        "id": 197415571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589378039
    },
    {
        "content": "<p>It even sounds familiar. I think this is not the first time I meet this issue actually.</p>",
        "id": 197415574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589378040
    },
    {
        "content": "<p>And when I say \"I\", of course I mean \"Johan, with an enormous amount of help from Gabriel\"</p>",
        "id": 197415704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589378085
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring.lean#L156\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring.lean#L156</a></p>",
        "id": 197415809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589378131
    }
]