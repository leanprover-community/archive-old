[
    {
        "content": "<p>is there an inverse of <code>$</code>? (the backwards pipe operator<code>&lt;|</code>)  i.e. instead of <code>g (f x)</code> being written as <code>g $ f x</code> I'd like to write <code>f x &lt;| g</code></p>",
        "id": 127186287,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527477052
    },
    {
        "content": "<p>I though <code>$</code> was backwards pipe? Do you mean you'd like to write <code>x |&gt; f |&gt; g</code>?</p>",
        "id": 127186348,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477183
    },
    {
        "content": "<p>(big fan of directional composition/application operators at any rate)</p>",
        "id": 127186357,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477224
    },
    {
        "content": "<p>er, maybe it's a forwards pipe? but yes, I'd like to reverse the order that function arguments appear</p>",
        "id": 127186402,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527477280
    },
    {
        "content": "<p>in fact, I just googled and yeah, seems I have my directions mixed up, whoops</p>",
        "id": 127186414,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527477322
    },
    {
        "content": "<p>To be more precise, I'd also recommend saying 'apply' and 'application' rather than 'pipe', which is a little ambiguous.</p>",
        "id": 127186455,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477372
    },
    {
        "content": "<p>short answer: no</p>",
        "id": 127186527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477555
    },
    {
        "content": "<p>I believe that operator is used for <code>option.lhoare</code></p>",
        "id": 127186532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477568
    },
    {
        "content": "<p>eughhh. <code>|&gt;</code> and <code>&lt;|</code> have been around for ages  to represent reverse and forward function application.... maybe I can steal them back after Lean 4 releases</p>",
        "id": 127186590,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527477678
    },
    {
        "content": "<p>I think that <code>lhoare</code> and <code>rhoare</code> are surprisingly useless operators</p>",
        "id": 127186593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477706
    },
    {
        "content": "<p>what on earth is a <code>hoare</code>?</p>",
        "id": 127186631,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477726
    },
    {
        "content": "<p>I have never seen a use for them</p>",
        "id": 127186634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477729
    },
    {
        "content": "<p>as in tony</p>",
        "id": 127186635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477734
    },
    {
        "content": "<p>hoare logic?</p>",
        "id": 127186636,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477742
    },
    {
        "content": "<p>i don't have a problem with useless library files, but the problem is you can't unset global notation :(</p>",
        "id": 127186637,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527477753
    },
    {
        "content": "<p>Also a big fan of <code>&gt;&gt;</code> and <code>&lt;&lt;</code> for composition (as in F#, Elm), but those are often stolen by haskell-like langs for monady stuff. I just say use <code>*&gt;</code> and <code>&lt;*</code> from applicative instead.</p>",
        "id": 127186688,
        "sender_full_name": "Brendan Zabarauskas",
        "timestamp": 1527477860
    },
    {
        "content": "<p>looks like <code>lhoare</code> and <code>rhoare</code> are not used anywhere in core either</p>",
        "id": 127186692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477894
    },
    {
        "content": "<p><code>rhoare</code> is almost the same as <code>option.guard</code> but its logic is reversed</p>",
        "id": 127186700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527477952
    },
    {
        "content": "<p>maybe I can get <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> to burninate it?</p>",
        "id": 127186748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478015
    },
    {
        "content": "<p>for symmetry reasons I'd vote for that, <code>|&gt;</code> and <code>&lt;|</code> is more pleasant to look at than dollar signs</p>",
        "id": 127186757,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478068
    },
    {
        "content": "<p>the dollar's not going anywhere though</p>",
        "id": 127186798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478103
    },
    {
        "content": "<p>and whatever arbitrary unicode symbol i would pick to replace <code>&lt;|</code></p>",
        "id": 127186799,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478105
    },
    {
        "content": "<p>what about <code>&lt;$</code>?</p>",
        "id": 127186804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478125
    },
    {
        "content": "<p>yea, I know the dollar sign is one character and from haskell</p>",
        "id": 127186805,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478127
    },
    {
        "content": "<p>that is more obviously related to application</p>",
        "id": 127186808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478144
    },
    {
        "content": "<p>I assume <code>&lt;|</code> and <code>|&gt;</code> have something to do with orelse</p>",
        "id": 127186814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478159
    },
    {
        "content": "<p>and the hoare things are also orelsey</p>",
        "id": 127186815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478174
    },
    {
        "content": "<p><code>|&gt;</code> and <code>&lt;|</code> is ocaml notation</p>",
        "id": 127186818,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478201
    },
    {
        "content": "<p>does haskell have a <code>&lt;|</code> equiv</p>",
        "id": 127186864,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478245
    },
    {
        "content": "<p>I assume that haskell has a meaning for every sequence of &lt;= 3 punctuation chars</p>",
        "id": 127186876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478316
    },
    {
        "content": "<p>I can get behind <code>&lt;$</code> if <code>$</code> is sticking around</p>",
        "id": 127186921,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478379
    },
    {
        "content": "<p>But don't you want <code>$&gt;</code> ?</p>",
        "id": 127186928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478399
    },
    {
        "content": "<p>That seems more intuitive to me...</p>",
        "id": 127186929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478408
    },
    {
        "content": "<p>But then, I've never used OCaml</p>",
        "id": 127186971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478472
    },
    {
        "content": "<p>as in <code>g (f x)</code> would be written <code>f x $&gt; g</code>?</p>",
        "id": 127186977,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478508
    },
    {
        "content": "<p>Yes...</p>",
        "id": 127186980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478516
    },
    {
        "content": "<p>The <code>&gt;</code> conveys in which way the arguments flow</p>",
        "id": 127186981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478532
    },
    {
        "content": "<p>Just like in Bash...</p>",
        "id": 127186985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478559
    },
    {
        "content": "<p>if you write to a file</p>",
        "id": 127187024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478565
    },
    {
        "content": "<p>i can see that some might prefer that, i always thought of it as moving the top function instead of the arguments</p>",
        "id": 127187027,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478590
    },
    {
        "content": "<p>Ok, that also makes sense...</p>",
        "id": 127187035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478630
    },
    {
        "content": "<p>I was thinking <code>$</code> with a reversal, so a backward arrow to indicate that</p>",
        "id": 127187036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478657
    },
    {
        "content": "<p>oh, <code>&lt;$</code> is taken...</p>",
        "id": 127187038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478671
    },
    {
        "content": "<p><code>functor.map_const</code></p>",
        "id": 127187039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478676
    },
    {
        "content": "<p>What about <code>$&lt;</code> ?</p>",
        "id": 127187078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478690
    },
    {
        "content": "<p>(No lean here, atm)</p>",
        "id": 127187082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527478736
    },
    {
        "content": "<p>i prefer the bracket to be on the correct side of the dollar sign, haha</p>",
        "id": 127187083,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527478741
    },
    {
        "content": "<p><code>$&lt;</code> is clear</p>",
        "id": 127187089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478765
    },
    {
        "content": "<p>yeah, that's why it's taken :P</p>",
        "id": 127187090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478786
    },
    {
        "content": "<p>I guess <code>&lt;$</code> is named similar to <code>&lt;$&gt;</code></p>",
        "id": 127187135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527478835
    },
    {
        "content": "<p>when lean 4 is released I will have to be very quick and reserve <code>|&gt;</code> and <code>&lt;|</code> as fast as possible in some large library most users install...</p>",
        "id": 127187190,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479037
    },
    {
        "content": "<p>since it seems those might have a chance of being deleted anyway</p>",
        "id": 127187229,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479069
    },
    {
        "content": "<p>or maybe there's some unicode variant of the eq.subst triangle hanging around</p>",
        "id": 127187243,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479153
    },
    {
        "content": "<p>there is unicode for everything</p>",
        "id": 127187284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479176
    },
    {
        "content": "<p><code>◁ </code>?</p>",
        "id": 127187288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479195
    },
    {
        "content": "<p>= \\lhd</p>",
        "id": 127187289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479215
    },
    {
        "content": "<p>but mathematicians are also jockeying for these symbols</p>",
        "id": 127187299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479240
    },
    {
        "content": "<p>this operator is so commonly used I'm boggled nobody has complained about it yet in this chat</p>",
        "id": 127187301,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479267
    },
    {
        "content": "<p>I hope in Lean 4 there will be a way to selectively import notation</p>",
        "id": 127187302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479267
    },
    {
        "content": "<p><code>import foo with bar as xyzzy</code></p>",
        "id": 127187344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479292
    },
    {
        "content": "<p>Like in python</p>",
        "id": 127187345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479296
    },
    {
        "content": "<p>am I really the first person to miss the dual of <code>$</code></p>",
        "id": 127187346,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479297
    },
    {
        "content": "<p>for CS things I prefer ascii because mathematicians won't lower themselves to use them</p>",
        "id": 127187347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479298
    },
    {
        "content": "<p>lol</p>",
        "id": 127187354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479326
    },
    {
        "content": "<p>well, it is obviously redundant...</p>",
        "id": 127187355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> So plug a zero-width char in between, an create a keyboard shortcut to type the 3-char-combo. Or does VScode not render 0-width-chars with 0 width?</p>",
        "id": 127187411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479410
    },
    {
        "content": "<p>nooo</p>",
        "id": 127187414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479424
    },
    {
        "content": "<p>Or use <code>local notation</code> to override the global stuff. I did that with <code>[n]</code>.</p>",
        "id": 127187420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479467
    },
    {
        "content": "<p>Does Lean recognize 0-width space as whitespace?</p>",
        "id": 127187471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479615
    },
    {
        "content": "<p>i guess.. but when people do more actual programming, it's nice to write something like <code>[1..10] |&gt; map f</code> (with the arrow the way Johan likes it)</p>",
        "id": 127187570,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479839
    },
    {
        "content": "<p>I was going to say, isn't <code>|&gt;</code> the flipped application?</p>",
        "id": 127187574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527479861
    },
    {
        "content": "<p>But in lean, can't you write <code>[1..10].map f</code>?</p>",
        "id": 127187576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527479872
    },
    {
        "content": "<p><code>[1..10]</code> might be some arbitrary expression that spans multiple lines</p>",
        "id": 127187619,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def «te​st» := 1\n#print «te​st»\n</pre></div>",
        "id": 127187621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479921
    },
    {
        "content": "<p>it doesn't like it as a space or as an identifier</p>",
        "id": 127187625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527479936
    },
    {
        "content": "<p>also I've completely got the application directions mixed up in my head, if I could delete it all I would :)</p>",
        "id": 127187627,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527479938
    },
    {
        "content": "<p>I don't really see what you gain over using parentheses or a variety of other options</p>",
        "id": 127187636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527479973
    },
    {
        "content": "<p>/me should prove <code>fermаt_lаst_theorem</code> in a couple lines, after importing <a href=\"https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean\" target=\"_blank\" title=\"https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean\">https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean</a>, and some other obscure libraries... <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 127187639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527479998
    },
    {
        "content": "<p>The uses I know of for flipped application are when you have left-to-right type inference / overloading resolution (Haskell doesn't have this, Lean might, not sure) or you want the order of effects to be left-to-right (Haskell has <code>&gt;&gt;=</code>)</p>",
        "id": 127187684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527480021
    },
    {
        "content": "<p>No-one will notice that I used a Cyrillic <code>a</code> in <code>fermat</code></p>",
        "id": 127187687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527480050
    },
    {
        "content": "<p>And of course it can be a style thing. One can debate the merits of having more styles available versus having fewer styles available</p>",
        "id": 127187695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527480117
    },
    {
        "content": "<p>Just want to point out that I am a mathematician who loves ascii</p>",
        "id": 127187696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527480119
    },
    {
        "content": "<p>it is a little redundant, yes, you can argue field notation, <code>$</code>, and parens should be all you need, for me it's a stylistic issue v0v</p>",
        "id": 127187790,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527480288
    },
    {
        "content": "<p>it's a bigger deal in F# because as you mentioned type checking is done left-to-right</p>",
        "id": 127187801,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527480333
    },
    {
        "content": "<p>but it enables you to build up nice looking data transformation definitions that look natural</p>",
        "id": 127187845,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527480418
    },
    {
        "content": "<p>actually the type checking thing is a good point</p>",
        "id": 127187851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527480442
    },
    {
        "content": "<p>with no parentheses like you might need with Lean's field notation</p>",
        "id": 127187891,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527480496
    },
    {
        "content": "<blockquote>\n<p>actually the type checking thing is a good point</p>\n</blockquote>\n<p>how so?</p>",
        "id": 127187900,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527480569
    },
    {
        "content": "<p>hm, I'm having trouble coming up with an example of a difference from the order change</p>",
        "id": 127188224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527481323
    },
    {
        "content": "<p>but in theory there should be some differences due to the parse order, which does matter</p>",
        "id": 127188228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527481344
    },
    {
        "content": "<p>consider this F# snippet: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"nv\">res</span> <span class=\"o\">=</span>\n  <span class=\"o\">[</span> <span class=\"mi\">1</span> <span class=\"o\">..</span> <span class=\"mi\">10</span> <span class=\"o\">]</span>\n  <span class=\"o\">|&gt;</span> <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">filter</span> <span class=\"n\">isEven</span>\n  <span class=\"o\">|&gt;</span> <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span> <span class=\"n\">formatInt</span>\n</pre></div>\n\n\n<p>writing this in Lean using field notation is a little cumbersome, and doesn't look as pretty</p>",
        "id": 127188235,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527481391
    }
]