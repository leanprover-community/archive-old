[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> (or anyone else who knows about what goes on in <code>src/control</code>): I have been removing unbundled monoid homomorphisms <code>(f : M -&gt; N) [is_monoid_hom f]</code> from mathlib and replacing them with bundled monoid homs (<code>f : M -&gt;* N</code>). Right now at the edge of this refactor we have <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/control/fold.lean\">src/control/fold</a> (with you two listed as authors) which as you can see on <code>master</code> now has an <code>import deprecated.group</code> which I want to nuke. This file does not seem to be imported anywhere else in mathlib.</p>\n<p>There are two ways to do the port to bundled monoid homs. The first way is not to touch the definitions you made like <a href=\"https://github.com/leanprover-community/mathlib/blob/1b771af7cb2cac078411bfc8b32422d5aa5ddaeb/src/control/fold.lean#L108\">foldl.of_free_monoid</a> and make a new definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fold_foldl_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"n\">free_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">monoid.foldl</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">foldl.of_free_monoid</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>The disadvantage of this is that it makes proofs a bit more inconvenient, because <code>⇑(fold_foldl_monoid_hom f)</code> is not syntactically equal to <code>foldl.of_free_monoid</code>, so one needs extra moves (<code>show</code> or some definitional rewrites) to fix up the proofs. I tried implementing this fix yesterday and the diff looks like <a href=\"https://github.com/leanprover-community/mathlib/compare/undeprecate-fold\">this</a>. Around line 204 you can see the change I made -- instead of a lemma proving <code>is_monoid_hom</code> I make a def of a new monoid hom. Now take a look around line 315 at the consequences -- the new <code>h2</code> is told to have type mentioning only <code>foldl.of_free_monoid</code> whereas in fact the term that generates it has a type involving <code>fold_foldl_monoid_hom</code>. This issue stops the old proof from working. Another approach is to add a <code>simp</code> lemma saying fold_foldl_monoid_hom coerced to function is just <code>foldl.of_free_monoid</code> and I could certainly go down that route.</p>\n<p>But another approach is simply to nuke the definition of <code>foldl.of_free_monoid</code> completely (and <code>free.map</code> and all the other functions which are actually monoid homs) and replace it with the monoid hom itself. This would be a very convenient approach for this particular file and all the proofs wouldn't need to be edited, you would just move the <code>is_monoid_hom</code> proofs into the definitions of the functions. However this might break upstream stuff which you have so I am reluctant to do it without checking with you first. </p>\n<p>Comments?</p>",
        "id": 247909950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627903197
    },
    {
        "content": "<p>My impression is that there isn't much downstream use of this outside mathlib, so I think we should go ahead with your suggested change assuming mathib itself doesn't break too badly. (These authors have also not been active for a while, so this is at most contributing to bitrot of an unused repository. It would still be good to hear if they have something to add though.)</p>",
        "id": 247910826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627903927
    },
    {
        "content": "<p>I am not sure if this file is used anywhere in mathlib either. While you're here, how do you feel about redefining <code>multiset.map</code> to be a monoid hom?</p>",
        "id": 247916511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627908854
    },
    {
        "content": "<p>I think the simpler solution is a good choice.</p>",
        "id": 247917508,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1627909456
    },
    {
        "content": "<p>Is \"your suggested change\" the \"add new definitions\" solution? Is \"the simpler solution\" the one where we nuke the existing definitions?</p>",
        "id": 247918004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627909787
    },
    {
        "content": "<p>Yes, that's it. I assume you still keep <code>foldl</code>, <code>foldr</code>, <code>mfold</code> and the lemmas that depend on them</p>",
        "id": 247919933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1627911079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/control.2Efold/near/247918004\">said</a>:</p>\n<blockquote>\n<p>Is \"your suggested change\" the \"add new definitions\" solution? Is \"the simpler solution\" the one where we nuke the existing definitions?</p>\n</blockquote>\n<p>I was referring to this:</p>\n<blockquote>\n<p>But another approach is simply to nuke the definition of foldl.of_free_monoid completely (and <a href=\"http://free.map\">free.map</a> and all the other functions which are actually monoid homs) and replace it with the monoid hom itself.</p>\n</blockquote>",
        "id": 247935997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627919870
    },
    {
        "content": "<p>So I have one expert telling me to do one thing and another expert telling me to do another thing? :-/</p>",
        "id": 247945484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627925075
    },
    {
        "content": "<p>I don't think we've disagreed anywhere?</p>",
        "id": 247945800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627925233
    },
    {
        "content": "<p>Oh Ok great! So I'm nuking the definitions!</p>",
        "id": 247945957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627925321
    },
    {
        "content": "<p>I also thought there was a disagreement actually. I thought the proposal was to delete the file altogether</p>",
        "id": 247959140,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1627932068
    },
    {
        "content": "<p>I think we're just replacing uses of <code>foldl.of_free_monoid</code> with <code>⇑(fold_foldl_monoid_hom f)</code></p>",
        "id": 247960451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627932645
    }
]