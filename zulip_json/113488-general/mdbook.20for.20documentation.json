[
    {
        "content": "<p>I noticed with Lean 4 there has been a migration to <a href=\"https://rust-lang.github.io/mdBook/\">mdbook</a> for narrative-style documentation: the Lean 4 <a href=\"https://leanprover.github.io/lean4/doc/\">manual</a> and <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">TPIL4</a>.</p>",
        "id": 272437160,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645208087
    },
    {
        "content": "<p>I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> mdbook as I envision a workflow where my papers/course notes/etc... start as mdbook documents and get processed into tex or something else. Plus it is easy to set up, work with, and modify.</p>",
        "id": 272437404,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645208189
    },
    {
        "content": "<p>I was wondering: is this part of some broader plan for this type of documentation for Lean?</p>",
        "id": 272437504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645208254
    },
    {
        "content": "<p>(Note: this is separate from API documentation which also is wonderful)</p>",
        "id": 272437604,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645208293
    },
    {
        "content": "<p>I wouldn't say there's a grand plan behind it. We chose mdbook because it looks good, and because everyone knows Markdown.</p>",
        "id": 272527614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645287995
    },
    {
        "content": "<p>I was secretly hoping there was a formally specified enhanced markdown language with parser implemented  in Lean 4 coming. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 272528868,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645289596
    },
    {
        "content": "<p>More seriously, one feature mdbook has that I haven't seen in other generators is the ability to pipe the markdown out to an existing binary and then pipe it back in via stdout/stdin. This way you can use preprocessors that written in anything.</p>",
        "id": 272711730,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645461921
    },
    {
        "content": "<p>Other tools like Sphinx take the approach of letting you declare new syntax blocks, and handle them in-process where you have access to the parses state of the document. Preprocessing markdown via the standard streams sounds fragile, especially if your binary expects a different dialect of markdown to what mdbook uses.</p>",
        "id": 273064283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645694497
    },
    {
        "content": "<p>Oh, I should have been more clear. Mdbook has easily extensible syntax in the usual way for generators. Piping everything in and out would be an eccentric choice. </p>\n<p>I highlighted that ability to emphasize the commitment to flexibility. Since getting tired of Jekyll build times I’ve tried to find a speedier option that allowed the same level of extensibility. Hugo is fast and has a vast ecosystem but it’s not very flexible. I haven’t used Sphinx but I assume it’s build times are comparable to Jekyll?</p>",
        "id": 273083726,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645706697
    },
    {
        "content": "<p>My experience of sphinx is usually that it's slow, but that's because the extensions I run it with end up executing arbitrarily slow python code of my own... Conversely, I've never used mdbook!</p>",
        "id": 273088172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645709096
    },
    {
        "content": "<p>I'm interested in writing a document that will include Lean examples, including examples of errors.  I'd like the examples of errors to show the red wavy lines that Lean uses to indicate errors.  Can that be done in mdbook?  Would it require changes in highlight.js?</p>\n<p>I have never used mdbook or any similar system--Sphinx, Quarto, etc.  I don't know python.  So I'm looking for the system that would easiest for a beginner to use.</p>",
        "id": 297494235,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1662501980
    },
    {
        "content": "<p>Yeah, I was recently writing the chapter on monads for lean 4 using mdbook with a preprocessing toolchain based on <a href=\"https://github.com/leanprover/LeanInk/\">https://github.com/leanprover/LeanInk/</a> and <a href=\"https://github.com/Kha/alectryon\">https://github.com/Kha/alectryon</a>, and I too ran into the need to show some red squiggles on <a href=\"https://leanprover.github.io/lean4/doc/monads/transformers.lean.html#add-your-own-custom-monadlift\">this code snippet</a>, so I opened this issue: <a href=\"https://github.com/leanprover/LeanInk/issues/34\">https://github.com/leanprover/LeanInk/issues/34</a>.  The fix would be for leanink to convey the information in the json file so that alectryon can put the red squiggles in the right place.  Should not be too hard to do.  The LeanInk toolchain for example, does format the lean snippet with a tooltip that shows the error when you hover in the right place which is cool - we just need the red squiggle to show the user they can hover in that location.</p>\n<p><a href=\"/user_uploads/3121/QkT_PKRu7vdTDyf42TPjaUWk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QkT_PKRu7vdTDyf42TPjaUWk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QkT_PKRu7vdTDyf42TPjaUWk/image.png\"></a></div>",
        "id": 299214464,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663351297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> I was looking at your chapter on monads and wanted to replicated your workflow but I failed. How do you turn literate <code>*.lean</code> file into <code>*.md</code> file? I have managed to get only html or rst file.</p>",
        "id": 299427758,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663503931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> this might do if you're stuck:<br>\n<a href=\"https://github.com/arthurpaulino/lean2md\">https://github.com/arthurpaulino/lean2md</a></p>",
        "id": 299541674,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663584921
    },
    {
        "content": "<p>Cool, is it using LeanInk/Alectryon? I want the expandable states. Also does it support Lean 4?</p>",
        "id": 299541917,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663585047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Have you seen <a href=\"https://leanprover.github.io/lean4/doc/dev/mdbook.html#build\">https://leanprover.github.io/lean4/doc/dev/mdbook.html#build</a>?</p>",
        "id": 299542369,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663585232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I think the mistake I was doing is that I didn't use <strong>your</strong> fork of Alectryon. The command <code>alectryon --frontend lean4+markup examples\\palindromes.lean --backend webpage -o palindromes.lean.md</code> didn't work for me with the vanilla version.</p>",
        "id": 299544478,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663586158
    },
    {
        "content": "<p>Yeah, the fork situation is not ideal. It doesn't help that we don't know in which direction we should continue, sticking with Alectryon or moving towards doc-gen4.</p>",
        "id": 299544718,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663586238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> it's a purely syntactical converter. It works for Lean 3 and Lean 4 (that's what we used to create the markdown files for the metaprogramming book)</p>",
        "id": 299545902,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663586780
    },
    {
        "content": "<p>Hi Tomas, I have a build script like this:</p>\n<div class=\"codehilite\" data-code-language=\"Batchfile\"><pre><span></span><code><span class=\"p\">@</span><span class=\"k\">echo</span> off\n<span class=\"k\">for</span> <span class=\"se\">%%</span>i <span class=\"k\">in</span> <span class=\"p\">(</span>*.lean<span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"p\">(</span>\n   <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"s2\">\"</span><span class=\"se\">%%</span><span class=\"s2\">i\"</span> <span class=\"o\">==</span> <span class=\"s2\">\"lakefile.lean\"</span> <span class=\"p\">(</span>\n      <span class=\"k\">echo</span> ==================== <span class=\"se\">%%</span>i\n      <span class=\"k\">echo</span> alectryon --frontend lean4+markup <span class=\"se\">%%</span>i --backend webpage --lake lakefile.lean -o <span class=\"se\">%%</span>i.md\n      alectryon.exe --frontend lean4+markup <span class=\"se\">%%</span>i --backend webpage --lake lakefile.lean -o <span class=\"se\">%%</span>i.md\n   <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\nmdbook build\n<span class=\"k\">start</span> out\\index.html\n</code></pre></div>\n<p>note the <code>--lake lakefile.lean</code> is only needed if your lean files have dependencies described in a lakefile.  The reference manual does not have this, but other projects might, especially if you want one .lean file to be able to import another to bring dependencies across chapters.</p>",
        "id": 299604397,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663606215
    }
]