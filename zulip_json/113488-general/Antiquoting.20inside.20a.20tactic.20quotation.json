[
    {
        "content": "<p>Hi!! So I'm trying to write my first tactic and I have something that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">naturally</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iterate</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span> <span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">]</span>\n</pre></div>\n\n\n<p>but I get this error:</p>\n<div class=\"codehilite\"><pre><span></span>kernel failed to type check declaration &#39;naturally&#39; this is usually due to a buggy tactic or a bug in the builtin elaborator\nelaborated type:\n  Type → tactic unit\nelaborated value:\n  λ (t : Type),\n     .....................\n</pre></div>\n\n\n<p>I can write it without the antiquotation, but I realized I then have to have <code>t</code> in scope when I run <code>naturally</code> to get it to work that way <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 134069500,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537135669
    },
    {
        "content": "<p>Do you know what the issue is and how I could write it properly? :)</p>",
        "id": 134069543,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537135714
    },
    {
        "content": "<p>Background: I'm basically trying to write a tactic that converts statements about \\N embedded in \\R into statements about \\N, like the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"n\">naturally</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 134069695,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537136061
    },
    {
        "content": "<p>Why I’m trying to restrict it to a certain type is to prevent infinite recursion (e.g. 0 with lots of coercions from nat to nat); it would be cool if there was a better way to do this but I have not explored tactics much</p>",
        "id": 134069807,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537136348
    },
    {
        "content": "<p><code>t</code> should have type <code>expr</code> not <code>Type</code></p>",
        "id": 134070948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537138945
    },
    {
        "content": "<p>Hm ... I believe you, but it still doesn't seem to compile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">naturally&#39;</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">iterate</span> <span class=\"n\">none</span> <span class=\"bp\">`</span><span class=\"o\">[</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span> <span class=\"err\">%%</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">]</span>\n</pre></div>",
        "id": 134072594,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537142745
    },
    {
        "content": "<p>I'm using Lean v3.4.1 btw</p>",
        "id": 134072699,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537142950
    },
    {
        "content": "<p>it looks like this term is failing: <code>rule := expr.subst (to_pexpr t)</code> (it's missing the second argument)<br>\nwithout the antiquotation it is: <code>rule := ``(@nat.cast_zero t)</code></p>",
        "id": 134072755,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537143036
    },
    {
        "content": "<p>I think it should be <code>rule := expr.subst ``(λ (_x_1 : _), @nat.cast_zero _x_1) (to_pexpr t)</code></p>",
        "id": 134072861,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537143280
    },
    {
        "content": "<p><code>rw</code> is tricky to use this way. Try not quoting it. You'll see its argument list is not a list of expr (in which case your attempt should work); it's a list of <code>rw_rules</code></p>",
        "id": 134077733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537154047
    },
    {
        "content": "<p>yeah, this is what I ended up with (forgive the messy code): <a href=\"https://github.com/MonoidMusician/MATH361/blob/56b6b5df40598bddade40e973a400a67cb79d184/src/hw/hw2.lean#L380-L407\" target=\"_blank\" title=\"https://github.com/MonoidMusician/MATH361/blob/56b6b5df40598bddade40e973a400a67cb79d184/src/hw/hw2.lean#L380-L407\">https://github.com/MonoidMusician/MATH361/blob/56b6b5df40598bddade40e973a400a67cb79d184/src/hw/hw2.lean#L380-L407</a></p>",
        "id": 134079385,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537157986
    },
    {
        "content": "<p>I wasn’t able to get it to parse an expression in interactive mode, so I just made an alias for applying it to reals haha</p>",
        "id": 134079431,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537158081
    },
    {
        "content": "<p>I suggest you use the noninteractive rw tactic outside interactive mode</p>",
        "id": 134079528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537158318
    },
    {
        "content": "<p>that would probably be a good idea :D</p>",
        "id": 134079539,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537158352
    },
    {
        "content": "<p>would that be <code>rewrite_target</code>?</p>",
        "id": 134079627,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1537158520
    },
    {
        "content": "<p>I was about to suggest <code>rewrite_target</code> but it requires that you encode <code>&lt;- </code> by hand</p>",
        "id": 134108985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537199272
    }
]