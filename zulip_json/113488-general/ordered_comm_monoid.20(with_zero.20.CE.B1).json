[
    {
        "content": "<p>Three years ago <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> added <code>with_zero</code> and wrote <a href=\"https://github.com/leanprover-community/mathlib/blame/c9fca15420e2ad443707ace831679fd1762580fe/src/algebra/ordered_group.lean#L181\">this line</a> making <code>with_zero</code> of an <code>ordered_comm_monoid</code> and <code>ordered_comm_monoid</code>, but he used <code>instance</code> rather than <code>def</code> and, this being three years ago, there's no explanation as to why. Is there a reason for this or is it just an oversight?</p>\n<p>This is the type with the bad name -- it should have been<code>ordered_add_comm_monoid</code> (and it now is); I am now un-to-additiving everything. Interestingly, <code>to_additive</code> changes the hypothesis <code>one_le</code> into not <code>zero_le</code> but <code>nonneg</code> :-)</p>",
        "id": 220308474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608242059
    },
    {
        "content": "<blockquote>\n<p>but he used instance rather than def </p>\n</blockquote>\n<p>I'm confused, the line you links to uses <code>def</code>. Did you say that backwards, or are you referring to a different version to the one the link goes to?</p>",
        "id": 220308741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608242222
    },
    {
        "content": "<p>What needs explanation here exactly? This is showing sufficient conditions for a <code>with_zero</code> to be a <code>ordered_comm_monoid</code></p>",
        "id": 220311462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608243688
    },
    {
        "content": "<p>I'm not saying this is a recommended construction or anything, it's just a factoid</p>",
        "id": 220311494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608243713
    },
    {
        "content": "<p>As Eric says, it's not an instance, and even if it wasn't a really bizarre instance it can't be one because of the non-typeclass hypothesis</p>",
        "id": 220311627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608243785
    },
    {
        "content": "<p>Sorry, I meant \"he used def rather than instance\" -- and now I see why. Thanks!</p>",
        "id": 220312377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608244223
    },
    {
        "content": "<p>Related: we have <code>instance [partial_order α] : partial_order (with_zero α) := with_bot.partial_order</code>. Is this insanity? Can I do <code>instance [partial_order α] : partial_order (with_one α) := with_bot.partial_order</code>? It would make <code>to_additive</code> happy!</p>",
        "id": 220312537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608244321
    },
    {
        "content": "<p><code>instance [partial_order α] : partial_order (with_one α) := with_bot.partial_order</code> is surely insanity, e.g. for <code>Ico 0 1</code>.</p>",
        "id": 220313442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608244820
    },
    {
        "content": "<p>If anything it should be <code>with_top.partial_order</code></p>",
        "id": 220314134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608245206
    },
    {
        "content": "<p>I think it's okay if not everything in this space is using <code>to_additive</code>. It's not true that literally everything is the same, or else we wouldn't have two names for \"addition\" and \"multiplication\"</p>",
        "id": 220314262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608245282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ordered_comm_monoid.20(with_zero.20.CE.B1)/near/220314134\">said</a>:</p>\n<blockquote>\n<p>If anything it should be <code>with_top.partial_order</code></p>\n</blockquote>\n<p>Yes exactly! There is some weird duality going on here in the kind of applications we're thinking about. The standard additive p-adic valuation on the integers takes values in with_top nat, sends p^n to n and 0 to +infinity. The standard multiplicative valuation takes values in nnreal or even [0,1], sends p^n to p^{-n} and 0 to 0. The translation from the additive to the multiplicative world is order-reversing.</p>",
        "id": 220316109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246371
    },
    {
        "content": "<p>I think the safest thing is just not to put an order</p>",
        "id": 220316156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608246419
    },
    {
        "content": "<p>I would really like to have a name for the object {0} union {e^n} where n : nat and you can think of e as being a real between 0 and 1; I just need this abstract object as a totally ordered commutative monoid with 0. It's the fundamental monoid which receives the multiplicative valuation on any discrete valuation ring. For example if k is any field then there's a multiplicative valuation on the power series ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[[T]]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi>T</mi><mi>n</mi></msup><mo>+</mo><mi>b</mi><msup><mi>T</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">aT^n+bT^{n+1}+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a\\not=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. This is a monoid homomorphism into a fundamental object which doesn't seem to have a name in mathlib yet.</p>",
        "id": 220316333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246562
    },
    {
        "content": "<p>The target of the additive version does have a name -- here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi>T</mi><mi>n</mi></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">aT^n+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> gets sent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> goes to \\top; the target space is <code>with_top nat</code> but with these conventions the map doesn't have a name because it satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>v</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>v</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v(ab)=v(a)+v(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 220316418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246613
    },
    {
        "content": "<p>So the thing I want is <code>multiplicative (order_dual (with_top nat)))</code> and this is not going to be much fun to work with I suspect.</p>",
        "id": 220316467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246670
    },
    {
        "content": "<p>If I can name it I can make an API for it (it's an anti-canonically-linear-ordered-monoid!) but I don't know what to call it! Mathematicians don't have a name for it as far as I know.</p>",
        "id": 220316551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246723
    },
    {
        "content": "<p>Its with_zero_group of fractions is <code>with_zero (multiplicative int)</code> which also doesn't have a name.</p>",
        "id": 220316622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246795
    },
    {
        "content": "<p>or strictly speaking <code>with_zero (multiplicative (order_dual int))</code> but you can't see the order_dual, it's just that the canonical map from the nat thing sends n to -n.</p>",
        "id": 220316706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608246846
    },
    {
        "content": "<p>you could just go ahead and give it a name</p>",
        "id": 220317615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608247450
    },
    {
        "content": "<p><code>co_enat</code>? I have no idea</p>",
        "id": 220317621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608247458
    }
]