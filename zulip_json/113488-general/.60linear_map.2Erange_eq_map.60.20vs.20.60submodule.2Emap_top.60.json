[
    {
        "content": "<p>It looks like we have a duplicated lemma, viz: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range_eq_map\">docs#linear_map.range_eq_map</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map_top\">docs#submodule.map_top</a></p>",
        "id": 235821791,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619175752
    },
    {
        "content": "<p>/poll Which one should we keep?</p>",
        "id": 235821901,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619175814
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib/pull/7227#pullrequestreview-639764803\">my comment on #7227</a></p>",
        "id": 235822265,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619176002
    },
    {
        "content": "<p>Random data point: I opened a PR earlier today with code that has been broken by <a href=\"https://github.com/leanprover-community/mathlib/issues/7227\">#7227</a> and when I looked for the lemma I found range_eq_map first</p>",
        "id": 235822360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619176053
    },
    {
        "content": "<p>My vote goes for: <del>either</del> keep both <code>range</code> and <code>map_top</code><del>, or get rid of both <code>range</code> and <code>map_top</code></del>. If we want to rewrite away <code>range</code> in most proofs, why use it in the statement?</p>",
        "id": 235822542,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619176134
    },
    {
        "content": "<p>Anne, are you voting for eliminating <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range\">docs#linear_map.range</a> entirely?</p>",
        "id": 235823084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619176442
    },
    {
        "content": "<p>I'm considering it, if using <code>range</code> means almost all proofs start with <code>rw range_eq_map</code>.</p>",
        "id": 235823439,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619176631
    },
    {
        "content": "<p>There are lots of proofs using <code>range</code> that start with <code>exists.elim</code> hidden behind <code>let</code>, <code>obtain</code>, <code>λ ⟨x, hx⟩,</code> ...</p>",
        "id": 235823481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619176656
    },
    {
        "content": "<p>The point of <a href=\"https://github.com/leanprover-community/mathlib/issues/7227\">#7227</a> was to be able to more freely switch between <code>set.range</code> and <code>linear_map.range</code> in contexts where they were coerced to a type; I'd argue any arguments for removing the latter would also apply to the former.</p>",
        "id": 235823671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619176773
    },
    {
        "content": "<p>Okay, since it is a feature that <code>y ∈ range f</code> is defeq to <code>∃ x, f x = y</code> (for <code>set</code> and for <code>linear_map</code>), then we should have both <code>range</code> and <code>map</code>. Therefore, <code>map_top</code> is a good <code>simp</code> lemma since it turns <code>∃ x, x ∈ \\top ∧ f x = y</code> into <code>∃ x, f x = y</code> and we should prefer it over <code>range_eq_map</code>.</p>",
        "id": 235824333,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619177086
    },
    {
        "content": "<p>Is it worth having both for ease of discovery?</p>",
        "id": 235824407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619177134
    },
    {
        "content": "<p>I assume we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_univ\">docs#set.image_univ</a> but not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range_eq_image\">docs#set.range_eq_image</a></p>",
        "id": 235824439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619177156
    },
    {
        "content": "<p>Which I suppose would be an argument for either removing <code>linear_map.range_eq_map</code> or adding the <code>set</code> lemma</p>",
        "id": 235824582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619177220
    },
    {
        "content": "<blockquote>\n<p>Therefore, <code>map_top</code> is a good simp lemma</p>\n</blockquote>\n<p>In that case, we should probably add <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.map_top\">docs#submonoid.map_top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.map_top\">docs#subgroup.map_top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield.map_top\">docs#subfield.map_top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_submodule.map_top\">docs#lie_submodule.map_top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_ideal.map_top\">docs#lie_ideal.map_top</a>, and rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.map_top\">docs#algebra.map_top</a> to <code>subalgebra.map_top</code>.</p>",
        "id": 235824629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619177241
    },
    {
        "content": "<p>I like them both</p>",
        "id": 235837410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619183475
    },
    {
        "content": "<p>and <code>map_top</code> is a good simp lemma</p>",
        "id": 235837439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619183489
    },
    {
        "content": "<p>So add the missing lemmas but don't remove any, would be your vote?</p>",
        "id": 235837550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619183525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I actually need to define <code>lie_module_hom.range</code> and <code>lie_submodule.map_top</code> for something right now. Should I just follow the pattern you put in place for <code>linear_map.range</code> and so also introduce <code>lie_submodule.copy</code>?</p>",
        "id": 235843440,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619185864
    },
    {
        "content": "<p>Yes, I think introducing <code>.copy</code> is a good idea</p>",
        "id": 235843817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186034
    },
    {
        "content": "<p>Thanks, will do.</p>",
        "id": 235843871,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619186043
    },
    {
        "content": "<p>Is this pattern explained in some library note?</p>",
        "id": 235845192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619186536
    },
    {
        "content": "<p>I don't believe it is but I think it should be!</p>",
        "id": 235845292,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619186586
    },
    {
        "content": "<p>I can include a library note as part of my PR if desired?</p>",
        "id": 235845388,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619186615
    },
    {
        "content": "<p>It's in the docstring for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range_coe\">docs#linear_map.range_coe</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.coe_mrange\">docs#monoid_hom.coe_mrange</a>, etc</p>",
        "id": 235845427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186636
    },
    {
        "content": "<p>Perhaps it should me migrated to a library note</p>",
        "id": 235845485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186645
    },
    {
        "content": "<p>Oh good, those lemmas have different names...</p>",
        "id": 235845653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186713
    },
    {
        "content": "<p>From that page</p>\n<blockquote>\n<p>Note that <code>monoid_hom.mrange</code> is deliberately defined in a way that makes this true by <code>rfl</code>, as this means the types <code>↥(set.range f)</code> and <code>↥f.mrange</code> are interchangeable without proof obligations.</p>\n</blockquote>",
        "id": 235845853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619186773
    },
    {
        "content": "<p>I think a good library note would also explain <em>how</em> this goal is achieved.</p>",
        "id": 235845997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619186833
    },
    {
        "content": "<p>I have attempted to include such a library note in <a href=\"https://github.com/leanprover-community/mathlib/issues/7313\">#7313</a> <a href=\"https://github.com/leanprover-community/mathlib/pull/7313/files#diff-c965538e812a886218af4cbf509527efe95eed112b198a92c854f61bbf3ba22cR515\">here</a>.</p>",
        "id": 235973886,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619274226
    }
]