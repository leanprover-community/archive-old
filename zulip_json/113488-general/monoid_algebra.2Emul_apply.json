[
    {
        "content": "<p>For some reason the statement of <code>monoid_algebra.mul_apply</code> (<code>data/monoid_algebra</code>, line 77) takes about 4 seconds to elaborate. (I commented out the proof.)<br>\nWhat's the reason for this?</p>",
        "id": 199530486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591121149
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">information</span>\n<span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">508</span><span class=\"n\">ms</span>\n<span class=\"n\">monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">information</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">mul_apply</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">503</span><span class=\"n\">ms</span>\n<span class=\"n\">monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">information</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">mul_apply</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0135</span><span class=\"n\">ms</span>\n<span class=\"n\">monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">information</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">mul_apply</span> <span class=\"n\">took</span> <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n</code></pre></div>\n\n\n<p>But it certainly takes a lot more than 1s when I watch the orange bars. So there is some secret time sink here.</p>",
        "id": 199535997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any idea what's going on here?</p>",
        "id": 199593928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591174147
    },
    {
        "content": "<p>Nope! :-(</p>",
        "id": 199593950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591174172
    },
    {
        "content": "<p>Was it snappy when you wrote it? If so, lean got worse at this part of the game...</p>",
        "id": 199593979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591174198
    },
    {
        "content": "<p>I'm starting to see a pattern...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</code></pre></div>",
        "id": 199594788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591174690
    },
    {
        "content": "<p>Is this priority simply the better one for <code>open_locale classical</code>?</p>",
        "id": 199595027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591174810
    },
    {
        "content": "<p>The priority is dangerous in general: <code>if 1 = 2 then 3 else 4</code> is elaborated to a definitionally not equal term if you change the priority:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">4</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">4</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 199595235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591174937
    },
    {
        "content": "<p>Ouch</p>",
        "id": 199595324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591174992
    },
    {
        "content": "<p>It <em>might</em> also be a good idea to add explicit <code>decidable_eq</code> assumptions to lemmas with if-then-else:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- also fast, but proof&#39;s broken</span>\n</code></pre></div>",
        "id": 199595458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591175087
    },
    {
        "content": "<p>I have no idea if you ever want to apply results about monoid algebras to things like natural numbers.  But if you do, you'll quickly run into multiple different decidability instances and you won't be able to (directly) apply <code>mul_apply</code> to an if-then-else.</p>",
        "id": 199595622,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591175200
    },
    {
        "content": "<p>Would it be reasonable if <code>open_locale classical</code> also set</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">decidable</span> <span class=\"n\">decidable_eq_of_decidable_le</span>\n</code></pre></div>\n\n\n<p>? These seem to be the problematic instances that make Lean search through all the algebraic hierarchy whenever it wants to solve any decidability problem.</p>",
        "id": 199595932,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591175459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/monoid_algebra.2Emul_apply/near/199595622\">said</a>:</p>\n<blockquote>\n<p>I have no idea if you ever want to apply results about monoid algebras to things like natural numbers.  But if you do, you'll quickly run into multiple different decidability instances and you won't be able to (directly) apply <code>mul_apply</code> to an if-then-else.</p>\n</blockquote>\n<p>I think that occasionally we will want to do that (or with <code>int</code> or <code>zmod n</code>). Same is true for polynomials.</p>",
        "id": 199596048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591175532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> This seems like a reasonable change.</p>",
        "id": 199596184,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591175647
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2932\">#2932</a></p>",
        "id": 199597402,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591176485
    }
]