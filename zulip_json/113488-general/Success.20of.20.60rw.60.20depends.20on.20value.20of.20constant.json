[
    {
        "content": "<p>I'm in a situation where using <code>1</code> in my defintion works, but using <code> (⅟(2 : R))</code> does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">free_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- part of #4289, which breaks some things there</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- change (⅟(2 : R)) to 1 and the below `rw` works</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">my_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">my_mul</span> <span class=\"o\">(</span><span class=\"n\">my_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">my_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Why can lean only match <code>smul_sub</code> against <code>1 • (_ * _)</code> and not <code>⅟ 2 • (_ * _)</code>?</p>",
        "id": 212580241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602086356
    },
    {
        "content": "<p>I don't really know... can you try feeding it the <code>\\frac1 2</code> as an explicit argument (in the <code>rw</code>)?</p>",
        "id": 212580730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602086533
    },
    {
        "content": "<p>That fails too</p>",
        "id": 212580860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602086593
    },
    {
        "content": "<p>Ah, a simpler reproduction: <code>(1 : R)</code> fails, <code>1</code> succeeds</p>",
        "id": 212581386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602086765
    },
    {
        "content": "<p>Aha, so if you write <code>1</code>, then it's the unit of the tensor algebra, I guess.</p>",
        "id": 212581551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602086861
    },
    {
        "content": "<p>No, when I write <code>1</code> it's <code>(1 : ℕ)</code></p>",
        "id": 212581643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602086893
    },
    {
        "content": "<p>With <code>(1 : ℕ)</code>, both the definition and proof find <code>semimodule ℕ (tensor_algebra R M)</code>.<br>\nWith <code>(1 : R)</code>, the definition finds <code>semimodule R (tensor_algebra R M)</code> but the proof does not</p>",
        "id": 212581773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602086966
    }
]