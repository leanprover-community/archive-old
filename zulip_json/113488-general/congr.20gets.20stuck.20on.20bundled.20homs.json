[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_congr</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xj</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"bp\">==</span> <span class=\"n\">xj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.of</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">xi</span> <span class=\"bp\">=</span> <span class=\"n\">direct_sum.of</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"n\">xj</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- doesn't work without this line</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.of</span><span class=\"o\">,</span> <span class=\"n\">dfinsupp.single_add_hom_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is it possible to write a <code>@[congr]</code> lemma such that lean doesn't need the <code>dsimp</code>?</p>",
        "id": 263773820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638718402
    },
    {
        "content": "<p>Does <code>congr</code> care about <code>[congr]</code> lemmas?</p>",
        "id": 263774600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638719539
    },
    {
        "content": "<p>AFAIK not.</p>",
        "id": 263774633,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638719594
    },
    {
        "content": "<p>Ah, then this is sort of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, as my actual problem was that simp wasn't able to simplify the express for <code>i</code> due to the dependent type in <code>xi</code></p>",
        "id": 263774686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638719646
    },
    {
        "content": "<p>I'm guessing we don't have much documentation for <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#congr\">attr#congr</a> (that link doesn't work)</p>",
        "id": 263774697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638719672
    },
    {
        "content": "<p>Right, <code>simp</code> does care about <code>[congr]</code> lemmas</p>",
        "id": 263774699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638719679
    },
    {
        "content": "<p>Is there any way for me to teach <code>congr</code> about this case, if <code>[congr]</code> isn't the way?</p>",
        "id": 263774719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638719735
    },
    {
        "content": "<p>If not, and if <code>simp</code> also can't be taught, then maybe we need to unbundled <code>direct_sum.of</code></p>",
        "id": 263774725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638719745
    },
    {
        "content": "<p>We can already tell this was an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> question because it uses heq</p>",
        "id": 263774797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638719849
    },
    {
        "content": "<p><code>@[congr]</code> is the way, but the teaching involves changing the <code>congr</code> tactic which is in core Lean.</p>",
        "id": 263774799,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638719855
    },
    {
        "content": "<p>Does <code>congr'</code> understand <code>@[congr]</code>, and is it implemented in a way that we wouldn't need to modify core?</p>",
        "id": 263774866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638719958
    },
    {
        "content": "<p>Yes, you could also just change it in <code>congr'</code>.  That can be done inside mathlib.</p>",
        "id": 263775299,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638720484
    },
    {
        "content": "<p>There's the separate problem here though that I can't work out how to even declare something that <code>@[congr]</code> accepts here</p>",
        "id": 263775332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638720581
    }
]