[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>                        <span class=\"c1\">-- Works</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- squeeze_simp suggestion, doesn't work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The context is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>And I simply want to remove the <code>coe</code>. Simp can do it, but the squeeze_simp suggestion fails. Any idea why? <code>rw finset.mem_coe at h</code> doesn't want to do anything either.</p>",
        "id": 223986694,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1611624221
    },
    {
        "content": "<p>Hmm, I can't say I know what's going on here either. With <code>set_option trace.simplify true</code> before the example, the relevant part of the output of <code>simp at h</code> is this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[simplify] eq: x = ⨆ (x : α) (H : x ∈ ↑s), x\n[simplify] eq: x\n[simplify] eq: ⨆ (x : α) (H : x ∈ ↑s), x\n[simplify.canonize]\ncomplete_lattice.to_has_Sup α\n==&gt;\ncomplete_lattice.to_has_Sup α\n[simplify] eq: λ (x : α), ⨆ (H : x ∈ ↑s), x\n[simplify] eq: ⨆ (H : x ∈ ↑s), x\n[simplify.canonize]\ncomplete_lattice.to_has_Sup α\n==&gt;\ncomplete_lattice.to_has_Sup α\n[simplify] iff: x ∈ ↑s\n[simplify.canonize]\nset.has_mem\n==&gt;\nset.has_mem\n... lots of failures skipped ...\n5. [simplify.rewrite] [finset.mem_coe]: x ∈ ↑s ==&gt; x ∈ s\n[simplify.canonize]\nfinset.has_mem\n==&gt;\nfinset.has_mem\n... lots of failures skipped ...\n</code></pre></div>\n<p>The full output of <code>simp only [finset.mem_coe] at h</code> seems to be missing the <code>[simplify] iff: x ∈ ↑s, [simplify.canonize], set.has_mem</code> part but I don't know enough about <code>simp</code> to know what can be done:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[simplify] eq: x = ⨆ (x : α) (H : x ∈ ↑s), x\n[simplify] eq: x\n[simplify] eq: ⨆ (x : α) (H : x ∈ ↑s), x\n[simplify.canonize]\ncomplete_lattice.to_has_Sup α\n==&gt;\ncomplete_lattice.to_has_Sup α\n[simplify] eq: λ (x : α), ⨆ (H : x ∈ ↑s), x\n[simplify] eq: ⨆ (H : x ∈ ↑s), x\n[simplify.canonize]\ncomplete_lattice.to_has_Sup α\n==&gt;\ncomplete_lattice.to_has_Sup α\n[simplify] eq: λ (H : x ∈ ↑s), x\n[simplify] eq: x\n[simplify] eq: supr\n[simplify] eq: supr\n[simplify] eq: eq\n</code></pre></div>\n<p>(By the way, it's not a MWE unless I can copy and paste it into my editor completely mindlessly. In this case the example is missing imports, but <code>import tactic</code> works.)</p>",
        "id": 223996781,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611636055
    },
    {
        "content": "<p>It's worth noting that a fairly inoffensive solution here would be something <code>change x ∈ ↑s with x ∈ s at h</code>, I don't know if it's possible to use <code>change</code> under binders like that (i.e., without copy-pasting the whole of <code>h</code> and <code>change</code>ing that).</p>",
        "id": 224000020,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1611640238
    },
    {
        "content": "<p>Does <code>dsimp</code> behave any differently here?</p>",
        "id": 224000463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611640875
    },
    {
        "content": "<p>I couldn't get <code>dsimp</code> to work at all with the example above.</p>",
        "id": 224000726,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611641245
    }
]