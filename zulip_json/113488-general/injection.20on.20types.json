[
    {
        "content": "<p>If I have the hypothesis <code>h : fin n = fin m</code>, am I allowed to conclude <code>n = m</code>? If so, how?</p>",
        "id": 163114235,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999277
    },
    {
        "content": "<p>No you can't</p>",
        "id": 163114282,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554999320
    },
    {
        "content": "<p>you can, but you'll have to work</p>",
        "id": 163114319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999353
    },
    {
        "content": "<p>you can count both sides, right?</p>",
        "id": 163114325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999359
    },
    {
        "content": "<p>Note however that equality of types is evil, so what you are doing might not be the best idea.</p>",
        "id": 163114390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999380
    },
    {
        "content": "<p>You would need for <code>fin</code> to be an injective function and inductive types are not assumed to be injective. Only their constructors</p>",
        "id": 163114400,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554999387
    },
    {
        "content": "<p>There's a trick in this particular case though</p>",
        "id": 163114425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999403
    },
    {
        "content": "<p>Don't you think?</p>",
        "id": 163114433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999411
    },
    {
        "content": "<p>You mean proving a bijection?</p>",
        "id": 163114442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554999419
    },
    {
        "content": "<p>Something should work, shouldn't it?</p>",
        "id": 163114474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999437
    },
    {
        "content": "<p>I may not need this, but it came up in a larger proof I was struggling with and I was curious if I was missing something obvious or if it was truly non-trivial</p>",
        "id": 163114579,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999491
    },
    {
        "content": "<p>It is true but not trivial by Lean standards</p>",
        "id": 163114601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554999522
    },
    {
        "content": "<p>It is non-trivial. In general, it is not possible. I'm not convinced that it's possible in this case</p>",
        "id": 163114608,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554999527
    },
    {
        "content": "<p>Yeah, that makes sense</p>",
        "id": 163114637,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999550
    },
    {
        "content": "<p>Also, what Kevin said--if you find yourself needing this then most likely something went wrong earlier</p>",
        "id": 163114827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554999691
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fin_injective</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcard</span> <span class=\"o\">:</span>  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">hcard</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">convert</span> <span class=\"n\">hm</span>\n</pre></div>",
        "id": 163114854,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554999717
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>!</p>",
        "id": 163114969,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554999782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That's also good to know, thanks</p>",
        "id": 163114994,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999791
    },
    {
        "content": "<p>Interesting, so it's classically provable, I guess?</p>",
        "id": 163115009,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999803
    },
    {
        "content": "<p>It shouldn't need classical logic. Equality of naturals is decidable, so <code>by_contradiction</code> is fine. My theorem does use classical logic, but only because mathlib uses it where it's totally unnecessary.</p>",
        "id": 163115172,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554999924
    },
    {
        "content": "<p>I think the more interesting question is why you were faced with this goal in the first place. We just got lucky in this case. We can't prove <code>ℕ ≠ ℤ</code> for example. Equality of types is not at all well-behaved in dependent type theory.</p>",
        "id": 163115229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554999963
    },
    {
        "content": "<p>Oh right, that by_contradiction uses the decidable instance</p>",
        "id": 163115253,
        "sender_full_name": "Scott Olson",
        "timestamp": 1554999970
    },
    {
        "content": "<p>Yeah, I expect I'll be back later with a question closer to the actual problem I'm dealing with</p>",
        "id": 163115294,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555000015
    },
    {
        "content": "<p>In my experience it is typically <code>simp</code> which makes every theorem use every axiom</p>",
        "id": 163115338,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555000059
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"c1\">-- phew</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"c1\">-- phew</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163115511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555000174
    },
    {
        "content": "<p>I want a prop valued <code>fintype</code> for this stuff.</p>",
        "id": 163115539,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555000200
    },
    {
        "content": "<p><code>finite</code> isn't good enough because you lose the size?</p>",
        "id": 163115613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555000224
    },
    {
        "content": "<p>Because it's <code>set.finite</code></p>",
        "id": 163115663,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555000270
    },
    {
        "content": "<p>Oh yes!</p>",
        "id": 163115674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555000283
    },
    {
        "content": "<p>So it's just <code>nonempty (fintype X)</code>?</p>",
        "id": 163115707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555000319
    },
    {
        "content": "<p>Yes.</p>",
        "id": 163115807,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555000385
    },
    {
        "content": "<p>And then you'll have some noncomputable <code>prop_fintype.card</code>?</p>",
        "id": 163115904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555000447
    },
    {
        "content": "<p>Something like that. I don't know if this is a good approach though. I guess coq with its non definitional proof irrelevance must have good tactics for dealing with this.</p>",
        "id": 163116096,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555000599
    },
    {
        "content": "<p>Inspired by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s, I realized the reasoning is pretty direct:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>                    <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">m</span>\n</pre></div>",
        "id": 163116231,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555000729
    },
    {
        "content": "<p>The middle equality is the ropey one. Look at this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  rw h, -- fails!</span>\n<span class=\"c1\">--  erw h, -- fails!</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"c1\">-- works...</span>\n  <span class=\"c1\">-- ⊢ fintype.card (fin n) = n</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- fails!</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The failure error is:</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  @fintype.card (fin n) (fin.fintype n) = n\nbut is expected to have type\n  @fintype.card (fin n) (@eq.rec Type (fin m) (λ (α : Type), fintype α) (fin.fintype m) (fin n) h) = n\n</pre></div>\n\n\n<p>Lean has switched on pp.all so you can see the problem. When Lean says <code>fintype.card X</code> it really means <code>@fintype.card X (term of type fintype X)</code>, and the hidden terms are not definitionally equal.</p>",
        "id": 163117254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555001484
    },
    {
        "content": "<p>On the other hand, this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ fintype.card (fin n) = n</span>\n  <span class=\"n\">convert</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>When you're playing fast and loose with type equality like this, I've seen situations where <code>exact</code> doesn't close the goal but <code>convert</code> does.</p>",
        "id": 163117367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555001566
    },
    {
        "content": "<p>The point is that fintype is not a proposition, but it is a subsingleton, so there can be at most one term of type <code>fintype X</code>. However, if my understanding is correct, then if you have two terms of type <code>fintype X</code> then in contrast to propositions, the fact that they are equal might be a theorem, rather than definitional.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>In the proof that fintype X is a subsingleton in the library, congr is used.</p>",
        "id": 163117617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555001745
    },
    {
        "content": "<p>If you dump the proof term of my proof you see this: <code>(congr (eq.refl (fintype.card α_1)) (subsingleton.elim (eq.rec _inst_1 e_1) _inst_1_1)))</code> which is relating two different instances of fintype and mentions subsingleton =)</p>",
        "id": 163117811,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555001884
    },
    {
        "content": "<p><code>congr</code> knows about subsingletons and will automatically take care of goals that would have been generated that say that two values of a subsingleton are equal. That's why Scott's <code>congr</code> proof worked, because of the subsingleton instance that Kevin just mentioned. It's also why using <code>convert</code> worked, because <code>convert</code> uses <code>congr</code> internally.</p>",
        "id": 163117835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555001909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ fintype.card (fin n) = n but there&#39;s a horrible term of type fintype (fin n) in there</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"c1\">--    refl, -- fails</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- horrible invisible term now replaced by correct term</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- now works</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here I manually do the rewrite, so I can get <code>exact</code> to work.</p>",
        "id": 163118271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555002258
    },
    {
        "content": "<p><code>h2</code> is an equality of two terms of type <code>fintype n</code></p>",
        "id": 163118303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555002302
    },
    {
        "content": "<p>Maybe equivs are easier than type equalities.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fin_injective</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_congr</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 163118882,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555002807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130491\">@Scott Olson</span> Chris' approach is much better, because if you have two types which you personally think are equal, then dependent type theory wants them not to be equal but to be equiv. Nobody has mentioned this yet in this thread! <code>equiv</code> of types (which is <em>data</em>) is the correct notion of type equality. Chris takes your crazy equality, translates it into an equiv of types, and then the proof is straightforward with no weird stuff going on under the hood.</p>",
        "id": 163119172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555003044
    },
    {
        "content": "<p>Actually, here the congr is hidden in the application of <code>fintype.card_congr</code> so there is still some dirty work going on.</p>",
        "id": 163119314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555003166
    },
    {
        "content": "<p>Yeah, for sure, I wouldn't intentionally try to bring type equalities into my proof but they came up automatically during a few attempts and I got curious about the limits of those</p>",
        "id": 163119493,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555003289
    },
    {
        "content": "<p>An example of another true one that's probably harder or impossible to solve is <code>list a = list b -&gt; a = b</code></p>",
        "id": 163119629,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555003416
    },
    {
        "content": "<p>Whereas with equivalences it <em>might</em> be provable by building an equivalence of <code>a</code> and <code>b</code> that goes through single-element lists and proves they must roundtrip properly because of the left/right inverse properties</p>",
        "id": 163120465,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555004024
    },
    {
        "content": "<p>For lists, it doesn't work with equivalences if <code>a</code> and <code>b</code> are finite or countable.</p>",
        "id": 163124366,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555006678
    },
    {
        "content": "<p>Well, if they are used completely parametrically the <code>list a \\equiv list b</code> equivalence can't know if they're finite/countable or not, but then it turns into an argument of parametricity, another set of things that tend to be true but unprovable in current dependent type systems</p>",
        "id": 163125161,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555007210
    },
    {
        "content": "<p>You don't really want parametricity statements to be theorems internally, because they aren't true in the \"standard\" model that we usually want to interpret Lean into.</p>",
        "id": 163125917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1555007715
    },
    {
        "content": "<p>What is an \"argument of parametricity\"?</p>",
        "id": 163131467,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1555012380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> parametricity is the property that functions which are completely generic over some type are restricted in what they could possibly do with them, e.g. I can argue that <code>∀ {α : Type}, α → α</code> <em>must</em> be the identity function</p>",
        "id": 163137042,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555016658
    },
    {
        "content": "<p>Not sure of a good link off the top of my head, but there's a bit of a wikipedia article <a href=\"https://en.wikipedia.org/wiki/Parametricity\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Parametricity\">https://en.wikipedia.org/wiki/Parametricity</a></p>",
        "id": 163137060,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555016680
    },
    {
        "content": "<p>You could argue this but it's not provable, right? And in Lean's type theory it's not even true, if you allow me to switch on decidability of all propositions and then say that it's the identity except on bool when it switches true and false</p>",
        "id": 163141468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555020624
    },
    {
        "content": "<p>Maybe that's a concrete version of what Reid is saying</p>",
        "id": 163141517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555020675
    },
    {
        "content": "<p>Why are we even talking about this? If you have the hypothesis list a = list b then my impression is that you have made a design error of some sort</p>",
        "id": 163141607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555020760
    },
    {
        "content": "<p>I put some rather self contained identity stuff here, which I guess is intended to show some trouble <a href=\"https://gist.github.com/ratmice/eb771aa05ff9106ff0bb07dca6e6eecb\" target=\"_blank\" title=\"https://gist.github.com/ratmice/eb771aa05ff9106ff0bb07dca6e6eecb\">https://gist.github.com/ratmice/eb771aa05ff9106ff0bb07dca6e6eecb</a></p>",
        "id": 163143824,
        "sender_full_name": "matt rice",
        "timestamp": 1555022800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yeah, I brought it up as a more likely unprovable example to support the idea that this should be avoided.</p>\n<p>And right, the parametricity argument is not provable in most current systems of dependent types I've seen. There are a few papers on designing systems where you actually get the \"Theorems for Free\" for free.</p>",
        "id": 163145667,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555024628
    },
    {
        "content": "<p>I hadn't thought about classical reasoning breaking parametricity but that makes sense. Anything that lets you match on opaque types in some way means you don't actually have parametric polymophism, you have ad hoc polymorphism.</p>",
        "id": 163145782,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555024734
    },
    {
        "content": "<p>To make things completely concrete, this is the classical counterexample to parametricity I didn't think about that was mentioned:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">non_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">bool</span>\n<span class=\"k\">then</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"k\">else</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 163149937,
        "sender_full_name": "Scott Olson",
        "timestamp": 1555029751
    },
    {
        "content": "<p>Notably, this definition is <code>noncomputable</code>. It is believed (but not proven, I think) that any computable definition of id is defeq to the obvious one</p>",
        "id": 163150126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555029973
    },
    {
        "content": "<p>ah, no defeq is the wrong notion for that. Here's a counterexample:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">stuck_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">bool</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">stuck_id_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stuck_id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">stuck_id</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"bp\">@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">bool</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"bp\">⟩;</span> <span class=\"n\">refl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">stuck_id</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">stuck_id_eq</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n<span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">stuck_id</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">stuck_id_eq</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">@</span><span class=\"n\">foo</span>\n<span class=\"c1\">-- λ {α : Type} (x : α),</span>\n<span class=\"c1\">--   eq.rec</span>\n<span class=\"c1\">--     (eq.rec x</span>\n<span class=\"c1\">--        (eq.rec (eq.refl (bool.rec α α (classical.choice (nonempty.intro tt))))</span>\n<span class=\"c1\">--           (bool.rec (eq.refl α) (eq.refl α) (classical.choice (nonempty.intro tt)))))</span>\n<span class=\"c1\">--     (bool.rec (eq.refl α) (eq.refl α) (classical.choice (nonempty.intro tt)))</span>\n\n<span class=\"c1\">-- Lean VM doesn&#39;t know what the big deal is...</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n</pre></div>",
        "id": 163150788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555030924
    }
]