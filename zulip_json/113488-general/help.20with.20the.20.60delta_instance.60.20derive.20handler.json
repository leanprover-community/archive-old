[
    {
        "content": "<p>I'm failing to use the <code>delta_instance</code> derive handler. In particular, here's the MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Mon</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">formatter</span><span class=\"bp\">.</span><span class=\"n\">hide_full_terms</span> <span class=\"n\">false</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">large_category</span><span class=\"o\">]</span> <span class=\"n\">Mon</span>\n</pre></div>\n\n\n<p>This correctly finds the instance it wants, but fails to add the declaration with the error message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">Mon</span><span class=\"bp\">.</span><span class=\"n\">large_category_1&#39;</span> <span class=\"n\">to</span> <span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">large_category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">Mon</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 194627327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347609
    },
    {
        "content": "<p>I can see that <code>delta_instance</code> looks for the universe parameters in the instance it has found, using <code>inst.collect_univ_params</code>, and passes those to <code>add_decl</code>, so I'd hoped that would cover this situation.</p>",
        "id": 194627375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347657
    },
    {
        "content": "<p>However in this example <code>inst.collect_univ_params</code> returns <code>[]</code>.</p>",
        "id": 194627395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347671
    },
    {
        "content": "<p>The issue might be that there are free universe metavariables, not free universe variables</p>",
        "id": 194627465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587347814
    },
    {
        "content": "<p>Ah, okay.</p>",
        "id": 194627477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347864
    },
    {
        "content": "<p>Because we're in category theory land, and there's an undetermined universe...</p>",
        "id": 194627520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347883
    },
    {
        "content": "<p>So it this something I can fix, by constructing new universe variables and substituting?</p>",
        "id": 194627531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347904
    },
    {
        "content": "<p>hopefully there is a similar function for collecting universe metavariables? If not, it's not hard to write</p>",
        "id": 194627533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587347908
    },
    {
        "content": "<p>Or am I doomed?</p>",
        "id": 194627535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347908
    },
    {
        "content": "<p>Sounds like I'm not doomed. :-)</p>",
        "id": 194627540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347919
    },
    {
        "content": "<p>Once you have the list of metavariables, you can just create fresh universe names and substitute</p>",
        "id": 194627543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587347940
    },
    {
        "content": "<p>But is that the general idea? I collect the universe metavariables, for each one unify with a fresh ...</p>",
        "id": 194627552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347943
    },
    {
        "content": "<p>great.</p>",
        "id": 194627553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587347944
    },
    {
        "content": "<p>that's what lean does whenever you use things like <code>Type*</code></p>",
        "id": 194627563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587347974
    },
    {
        "content": "<p>How are universe metavariables represented in an <code>expr</code>?</p>",
        "id": 194627640,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348114
    },
    {
        "content": "<p>They must be either <code>expr.mvar</code> of a special variety, or <code>expr.sort</code> with some special variety of <code>level</code>?</p>",
        "id": 194627693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348176
    },
    {
        "content": "<p>I see, there's <code>level.mvar</code>.</p>",
        "id": 194627705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, do you know if there's anything existing in <code>tactic.core</code> that replaces all universe metavariables in an expression with fresh universe variables?</p>",
        "id": 194627773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348305
    },
    {
        "content": "<p>I guess I don't understand how the unification step is meant to happen here.</p>",
        "id": 194627967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348676
    },
    {
        "content": "<p>If I have a <code>level.mvar</code>, what do I replace it with? And how? I guess I have to build a new <code>level.param</code> for each, with a <code>mk_fresh_name</code>. But then do I have to traverse the expression myself replacing <code>level.mvar</code>s with <code>level.param</code>s by hand?</p>",
        "id": 194628017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348752
    },
    {
        "content": "<p>I see the built-in function <code>expr.instantiate_univ_params</code>, but that seems to be for replacing <code>level.param</code>s, not replacing <code>level.mvar</code>s.</p>",
        "id": 194628026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587348822
    },
    {
        "content": "<p>You can use these functions to enumerate all the level <code>mvar</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">level</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fold_mvar</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">fold_mvar</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">param</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">fold_mvar</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">fold_mvar</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">fold_mvar</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">fold_mvar</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">level</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">collect_meta_univ</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">mk_rb_set</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e&#39;</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">e&#39;</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">fold_mvar</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">_</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s&#39;</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">fold_mvar</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_set</span><span class=\"bp\">.</span><span class=\"n\">insert</span><span class=\"o\">)</span> <span class=\"n\">s&#39;</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">expr</span>\n</pre></div>",
        "id": 194628671,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587349945
    },
    {
        "content": "<p>You create a new <code>level.param</code> for each and unify them with the variables to assign to them</p>",
        "id": 194628682,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587350020
    },
    {
        "content": "<p>Okay, I'll investigate, thanks!</p>",
        "id": 194628814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587350263
    },
    {
        "content": "<p>I don't understand what unification means for <code>level</code>, however.</p>",
        "id": 194628818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587350278
    },
    {
        "content": "<p>same as it does for <code>expr</code></p>",
        "id": 194628857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587350299
    },
    {
        "content": "<p>metavariables are assigned to make them equal</p>",
        "id": 194628860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587350313
    },
    {
        "content": "<p>In this case it would be more convenient to just have a metavariable assignment API, but I don't think one is exposed</p>",
        "id": 194628864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587350380
    },
    {
        "content": "<p>And you can use <code>unify (sort u) (sort u')</code> to make the assignment</p>",
        "id": 194628866,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587350393
    },
    {
        "content": "<p>Oh!</p>",
        "id": 194628867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587350397
    },
    {
        "content": "<p>Hooray, problem solved!</p>",
        "id": 194629046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587350731
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, PR on its way.</p>",
        "id": 194629048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587350744
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2463\" title=\"https://github.com/leanprover-community/mathlib/issues/2463\">#2463</a></p>",
        "id": 194630032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587352850
    }
]