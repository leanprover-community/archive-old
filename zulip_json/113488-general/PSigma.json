[
    {
        "content": "<p>Does anyone know how to set up list notation for <a href=\"http://PSigma.mk\">PSigma.mk</a>? This gives me errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span><span class=\"n\">Unit</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to be able to make something like this too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 319628643,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672938057
    },
    {
        "content": "<p>Lean already supports this out of the box, with different brackets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span><span class=\"n\">Unit</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">),</span><span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">,</span> <span class=\"n\">Unit.unit</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 319630053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672938462
    },
    {
        "content": "<p>this called is the anonymous constructor notation, if you want to search for it.</p>",
        "id": 319630223,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672938502
    },
    {
        "content": "<p>Are you aware you only need to write the sigma once?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 319708131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672971202
    },
    {
        "content": "<p>Are you aware you don't need to write the sigma at all?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(),</span> <span class=\"o\">(),</span> <span class=\"o\">(),</span> <span class=\"o\">()⟩</span>\n</code></pre></div>",
        "id": 319708404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672971434
    }
]