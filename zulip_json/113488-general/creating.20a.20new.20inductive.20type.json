[
    {
        "content": "<p>What happens to the underlying system when a new inductive type <code>X</code> is created in Lean? A new axiom seems to appear, namely the eliminator for the type -- <code>X.rec</code>. Is that right? A new axiom appears? Is that the only new axiom that appears, and all of the other stuff I see when I type <code>#print prefix X</code> is always deducible from <code>X.rec</code>? I see that occasionally other stuff is used, like <code>and</code> or <code>eq.rec</code> or propext. Is it possible to list exactly which functions are used when creating these new facts? I am trying to get to the bottom of the difference between equality and definitional equality and I think one main difference is these random axioms that seem to appear every time to create a new type.</p>",
        "id": 123817890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521240717
    },
    {
        "content": "<p>For example I think a+(b+c)=(a+b)+c for nats isn't a defeq, it's a theorem, and the reason seems to be that the proof uses induction on c, which uses nat.rec, which seems to be a way of proving that things are equal other than by definitional equality.</p>",
        "id": 123817958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521240817
    },
    {
        "content": "<p>Have I got all this sort-of straight?</p>",
        "id": 123817965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521240834
    },
    {
        "content": "<p>Something seems to be missing</p>",
        "id": 123818103,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521241078
    },
    {
        "content": "<p>I think <code>a + succ b = succ (a + b)</code> is a definitional equality despite relying on rec</p>",
        "id": 123818155,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521241129
    },
    {
        "content": "<p>Why does this rely on rec?</p>",
        "id": 123818821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242253
    },
    {
        "content": "<p>Isn't it just the definition of addition?</p>",
        "id": 123818829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242273
    },
    {
        "content": "<p>oh</p>",
        "id": 123818876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242324
    },
    {
        "content": "<p><code>#print nat.add._main</code> was rather more complex than I had expected</p>",
        "id": 123818886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242347
    },
    {
        "content": "<p>This is funny because the definition of <code>nat.add</code> in <code>core.lean</code> seems to be the standard one</p>",
        "id": 123818959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242419
    },
    {
        "content": "<p>Oh it somehow relies on everything either being zero or a succ</p>",
        "id": 123818963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242435
    },
    {
        "content": "<p>Somehow this is OK. We are defining <code>nat.add</code> using what might be called the equation compiler, and internally Lean has to make sense of this definition. Hmm. Maybe what is going on is that I don't understand the definition of defeq that Lean uses in practice.</p>",
        "id": 123819077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242629
    },
    {
        "content": "<p>The definition of <code>nat.add_main</code> looks like a mess to me, but <code>nat.add.equations._eqn_2</code> is the assertion that <code>a+succ b = succ(a+b)</code>. The proof isn't rfl though.</p>",
        "id": 123819159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242747
    },
    {
        "content": "<p>If you use <code>nat.rec f (succ n)</code> it looks to me like Lean treats it as definitionally equal to <code>f n</code></p>",
        "id": 123819164,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521242754
    },
    {
        "content": "<p>Is this just some weirdness with nat though, because it's such a primitive object?</p>",
        "id": 123819208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242765
    },
    {
        "content": "<blockquote>\n<p>The proof isn't rfl though.</p>\n</blockquote>\n<p>I don't think that equations get labelled as <code>rfl</code></p>",
        "id": 123819230,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521242828
    },
    {
        "content": "<p>you'd think <code>rec</code> wouldn't be part of defeq but it's common in type theory settings to include delta reduction as part of it</p>",
        "id": 123819316,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521242959
    },
    {
        "content": "<p>I just rolled my own nat and nat.add and the same happens, it's not something specific to nat</p>",
        "id": 123819329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521242994
    },
    {
        "content": "<p>Maybe this is iota reduction</p>",
        "id": 123819396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243082
    },
    {
        "content": "<p>Why did you guys choose such weird names for all these reductions?</p>",
        "id": 123819400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243099
    },
    {
        "content": "<p>most people regard alonzo church as a mathematician :)</p>",
        "id": 123819467,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521243220
    },
    {
        "content": "<p>OK so I am going to say that the reason a + succ b = succ (a+b) is a defeq despite relying on nat.rec is that the entire definition of add relies on nat.rec, and nonetheless they're defeq because of iota reduction. I knew what none of this stuff meant a few months ago though so if this isn't right then I hope someone lets me know.</p>",
        "id": 123819516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243280
    },
    {
        "content": "<p>Funny ... and they regard Turing as a sort of computer scientist. They pretty much did the same things</p>",
        "id": 123819519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243287
    },
    {
        "content": "<blockquote>\n<p>you'd think <code>rec</code> wouldn't be part of defeq but it's common in type theory settings to include delta reduction as part of it</p>\n</blockquote>\n<p>Isn't delta reduction about definitions? If <code>rec</code> is a constant, it doesn't have a definition ... what am I missing?</p>",
        "id": 123819539,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243327
    },
    {
        "content": "<p>According to Wikipedia Church was a mathematician and logician, so maybe he was being a logician at that point</p>",
        "id": 123819601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243398
    },
    {
        "content": "<p>Haha! Your honor is safe then!</p>",
        "id": 123819615,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243440
    },
    {
        "content": "<p>I am only going on the Lean reference manual, but delta reduction seems to say that if I define something without using matching then I can just substitute and I'm still defeq.</p>",
        "id": 123819618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243460
    },
    {
        "content": "<p>Do mathematicians regard logicians in a similar way in which they regard philosophers?</p>",
        "id": 123819623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243471
    },
    {
        "content": "<p>Using matching is implicitly using what seems to be called iota reduction</p>",
        "id": 123819624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243480
    },
    {
        "content": "<p>That's what I'm going with as well</p>",
        "id": 123819669,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243498
    },
    {
        "content": "<p>No, philosophers aren't doing maths at all. Logicians are doing stuff which some people would say was maths but most maths departments don't have any</p>",
        "id": 123819674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243509
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>you'd think <code>rec</code> wouldn't be part of defeq but it's common in type theory settings to include delta reduction as part of it</p>\n</blockquote>\n<p>Isn't delta reduction about definitions? If <code>rec</code> is a constant, it doesn't have a definition ... what am I missing?</p>\n</blockquote>\n<p>i'd have to check. i make no guarantees on whatever i remember about the lambda calculus</p>",
        "id": 123819680,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521243528
    },
    {
        "content": "<p>Let me compress the path for you: <a href=\"https://leanprover.github.io/reference/expressions.html#computation\" target=\"_blank\" title=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 123819693,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243561
    },
    {
        "content": "<p>I was suggesting that you can't use delta reduction to prove a + succ b = succ (a + b) because the definition of + depends on how the inductive type inputs were born</p>",
        "id": 123819710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243586
    },
    {
        "content": "<p>so I am not sure + is a \"defined constant\".</p>",
        "id": 123819773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243633
    },
    {
        "content": "<p>However + does sound a lot like a function defined by recursion on an inductive type</p>",
        "id": 123819781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243659
    },
    {
        "content": "<p><code>+</code> is a defined constant, its definition is going to be something like <code>nat.rec [...]</code> or possibly <code>lam a b, nat.rec [...]</code></p>",
        "id": 123819796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243689
    },
    {
        "content": "<p>and a + succ b does sound a lot like the function \"a +\" being applied to an element given by an explicit constructor</p>",
        "id": 123819797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243690
    },
    {
        "content": "<p>Oh!</p>",
        "id": 123819803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243716
    },
    {
        "content": "<p>Right, this also makes sense.</p>",
        "id": 123819850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243751
    },
    {
        "content": "<p>Then maybe (a) beta reduction(s) will apply to cancel the lambdas with the arguments, and then finally iota reduction will apply to <code>nat.rec</code>.</p>",
        "id": 123819859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243765
    },
    {
        "content": "<p>(At least, this is my understanding without actually checking the definitions.)</p>",
        "id": 123819870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243810
    },
    {
        "content": "<p>What is the point of iota-reduction then?</p>",
        "id": 123819871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243816
    },
    {
        "content": "<p>That would be my thought as well. So the remaining question is: is iota reduction part of the def_eq definition?</p>",
        "id": 123819872,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243819
    },
    {
        "content": "<p><code>ι-reduction : When a function defined by recursion on an inductive type is applied to an element given by an explicit constructor, the result ι-reduces to the specified function value</code></p>",
        "id": 123819875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243836
    },
    {
        "content": "<p>from the reference manual</p>",
        "id": 123819877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243841
    },
    {
        "content": "<p>I think it's the rule that, after expanding the definition of <code>+</code> and then substituting the arguments, allows one to replace <code>nat.rec [...] (succ [...])</code> by something simpler.</p>",
        "id": 123819920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243858
    },
    {
        "content": "<p>Oh so it only explicitly applies to the recursor?</p>",
        "id": 123819923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243879
    },
    {
        "content": "<p>That sounds relevant doesn't it? I think here, \"recursion\" and \"pattern matching\" are synonymous</p>",
        "id": 123819924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521243879
    },
    {
        "content": "<p>And I think that has been paraphrased into a higher-level form in the lean documentation</p>",
        "id": 123819925,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243891
    },
    {
        "content": "<p>i.e. what Simon said.</p>",
        "id": 123819928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243901
    },
    {
        "content": "<p>(But I've never encountered the phrase \"iota reduction\" outside the context of lean, so I am guessing a bit.)</p>",
        "id": 123819938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521243934
    },
    {
        "content": "<p>At the end of the day it all adds up to the same thing -- a + succ b = succ (a + b) is defeq despite relying on nat.rec</p>",
        "id": 123819941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521243947
    },
    {
        "content": "<p>Google led me to some pages about CIC:</p>",
        "id": 123819999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244028
    },
    {
        "content": "<p>\" A specific conversion rule is associated to the inductive objects in the environment. We shall give later on (section 4.5.4) the precise rules but it just says that a destructor applied to an object built from a constructor behaves as expected. This reduction is called iota-reduction and is more precisely studied in [103, 117].\"</p>",
        "id": 123820002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244039
    },
    {
        "content": "<p>This seems to say more explicitly that iota reduction is exactly how you prove that <code>blah.rec</code> is defeq to something else</p>",
        "id": 123820012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244079
    },
    {
        "content": "<p>On the other hand, the manual doesn't seem to give a definition of \"what Lean uses for defeq\" other than observing that (a) it's not the actual definition of defeq (proof: Lean's defeq isn't transitive) and (b) I think they're saying it's decidable (and actual defeq isn't).</p>",
        "id": 123820089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244191
    },
    {
        "content": "<p>So some of these reductions are from lambda calculus and iota reduction has just been tagged on afterwards as something coming from CIC it seems to me.</p>",
        "id": 123820142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244225
    },
    {
        "content": "<p>yes, lean and coq are CIC + extras</p>",
        "id": 123820143,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244236
    },
    {
        "content": "<p>and we don't know what Lean is doing.</p>",
        "id": 123820144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244237
    },
    {
        "content": "<p>Yes--specifically <code>blah.rec</code> applied to a constructor.<br>\nThis will also go by names like \"the elimination rule for the constructor\"</p>",
        "id": 123820145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521244241
    },
    {
        "content": "<blockquote>\n<p>Yes--specifically <code>blah.rec</code> applied to a constructor.<br>\nThis will also go by names like \"the elimination rule for the constructor\"</p>\n</blockquote>\n<p>I don't get what you're responding to</p>",
        "id": 123820214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521244351
    },
    {
        "content": "<p>To </p>\n<blockquote>\n<p>iota reduction is exactly how you prove that blah.rec is defeq to something else</p>\n</blockquote>",
        "id": 123820230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521244390
    },
    {
        "content": "<p>the extras that are added to CIC make defeq not transitive</p>",
        "id": 123820232,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244407
    },
    {
        "content": "<p>and it has something something to do with how you can go from an inductively defined proposition to a Type</p>",
        "id": 123820296,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244507
    },
    {
        "content": "<p>but we don't want to do without because classical reasoning is so convenient</p>",
        "id": 123820300,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244537
    },
    {
        "content": "<p>so little bits are stuck on here and there and we sort of politely ignore it</p>",
        "id": 123820304,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244559
    },
    {
        "content": "<p>is my terrible understanding of the base theory</p>",
        "id": 123820344,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244575
    },
    {
        "content": "<p>if you go completely constructive you get HoTT and you may then hop on voevodsky's bandwagon</p>",
        "id": 123820351,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244635
    },
    {
        "content": "<blockquote>\n<p>the extras that are added to CIC make defeq not transitive</p>\n</blockquote>\n<p>My reading of section 3.7 of the manual is that \"true defeq\" is transitive by definition, and \"Lean defeq\" is not.</p>",
        "id": 123820406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521244744
    },
    {
        "content": "<p>yup, that's my understanding as well</p>",
        "id": 123820407,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521244761
    },
    {
        "content": "<p>So implicit in the reference manual is a description of two terms which have different weak head normal forms but which can be proved equal using rfl.</p>",
        "id": 123820577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245052
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def R (x y : unit) := false\ndef accrec := @acc.rec unit R (λ_, unit) (λ _ a ih, ()) ()\nexample (h) : accrec h = accrec (acc.intro _ (λ y, acc.inv h)) := rfl\nexample (h) : accrec h = accrec (acc.intro _ (λ y, acc.inv h)) :=\nbegin\nconv begin\nto_rhs,\nwhnf,\nend,\nconv begin\nto_lhs,\nwhnf,\nend,\nadmit,\nend\n</pre></div>",
        "id": 123820591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245132
    },
    {
        "content": "<p>rfl works, but if you reduce both terms to weak head normal form then you see they are different.</p>",
        "id": 123820594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245154
    },
    {
        "content": "<p>So I am at a loss as to what Lean's definition of defeq is, but I understand it a lot better after this chat.</p>",
        "id": 123820760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245479
    },
    {
        "content": "<p>Looking back at the proof of associativity of nat.add it's interesting to actually try and point at exactly what stops the argument being rfl.</p>",
        "id": 123820768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245516
    },
    {
        "content": "<p>You prove it by induction on c; the zero case is rfl</p>",
        "id": 123820807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245529
    },
    {
        "content": "<p>and the inductive step is a bunch of rfls up to <code>a+(b+c)=(a+b)+c -&gt; nat.succ (a+(b+c))=nat.succ((a+b)+c)</code></p>",
        "id": 123820815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245583
    },
    {
        "content": "<p>but the inductive hypothesis isn't rfl, it's an assumption because we're using nat.rec</p>",
        "id": 123820823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245614
    },
    {
        "content": "<p>and in particular we can't deduce associativity from this iota-reduction thing because even though c is either zero or a succ, in the succ case we need more than a case split, we need induction.</p>",
        "id": 123820867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245666
    },
    {
        "content": "<p>It seems to me that it's this one point which stops associativity being defeq</p>",
        "id": 123820872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245700
    },
    {
        "content": "<p>On the other hand you can chase this back to congr_arg and hence to eq.subst and eq.rec</p>",
        "id": 123820994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521245962
    },
    {
        "content": "<p>Somehow this is not relevant.</p>",
        "id": 123821066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521246111
    },
    {
        "content": "<p>More simply, you might consider the relationship between <code>(p.1, p.2)</code> and <code>p</code></p>",
        "id": 123821246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521246368
    },
    {
        "content": "<p>Also the coq page I was looking at seems to be saying that iota reduction says that a definition by cases can be reduced to its value for a given constructor when applied to a term constructed using this constructor.</p>",
        "id": 123822140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521248203
    },
    {
        "content": "<p>This seems to be weaker than what it says in the Lean reference manual, which seems to imply that general definitions by recursion (like the definition of nat.add) can be iota-reduced.</p>",
        "id": 123822158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521248250
    },
    {
        "content": "<p>So looking at what the manual says about inductive types, it seems that the answer to my original question is that what is added is the type, the constructors, and the recursor, and then everything else is worked out from this. And it also seems to say that iota reduction is fine for eliminating <code>X.rec</code>.</p>",
        "id": 123822746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521249363
    },
    {
        "content": "<p>For example I think <code>(a,b).1=a</code> is rfl</p>",
        "id": 123822757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521249428
    },
    {
        "content": "<p>but is <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggesting that <code>p=(p.1,p.2)</code> is not? It doesn't seem to be.</p>",
        "id": 123822798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521249484
    },
    {
        "content": "<p>Yes and yes (the latter is not definitionally equal)</p>",
        "id": 123822800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521249513
    },
    {
        "content": "<p>Do you know Lean's definition of definitionally equal?</p>",
        "id": 123822801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521249530
    },
    {
        "content": "<p>Not really, no.</p>",
        "id": 123822807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521249547
    },
    {
        "content": "<p>I just have some bits of type theory knowledge cobbled together from various sources.</p>",
        "id": 123823460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521250903
    },
    {
        "content": "<p>Aah, you really should see this paper I'm working on</p>",
        "id": 123825965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521255984
    },
    {
        "content": "<p>I basically lay all of this out in precise (too precise, probably) detail</p>",
        "id": 123825973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521256026
    }
]