[
    {
        "content": "<p>Although <code>finsupp</code> has the instance <code>has_coe_to_fun</code>, I don't understand why lean cannot infer that <code>mv_polynomial</code> also has the instance. </p>\n<p>For example, in the following code, Unlike <code>lemma three</code>, there is a type error in <code>lemma one</code>, which says that \"expected a function at <code>p</code>...\", and I have to write it as <code>lemma two</code> instead. </p>\n<p>How can I fix this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">two</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">three</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158736260,
        "sender_full_name": "AHan",
        "timestamp": 1550396054
    },
    {
        "content": "<p>because <code>mv_polynomial</code> isn't <code>@[reducible]</code></p>",
        "id": 158736266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550396089
    },
    {
        "content": "<p>so the instances don't transfer</p>",
        "id": 158736267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550396101
    },
    {
        "content": "<p>by which kenny means not that you should add <code>@[reducible]</code>, but you should copy the instances</p>",
        "id": 158736286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550396127
    },
    {
        "content": "<p>Ahh... I added <code>@[reducibility]</code> instead... <br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Adding the attribute <code>@[reducible]</code> did work, but why should I copy the instances instead of adding the attribute?</p>",
        "id": 158736428,
        "sender_full_name": "AHan",
        "timestamp": 1550396393
    },
    {
        "content": "<p>because one of the purposes of type synonyms is to isolate different kinds of typeclasses on the same type. In fact this is one such example: the <code>coe_fn</code> instance on <code>finsupp</code> makes sense as applying the finitely supported function on an argument, but the <code>coe_fn</code> instance we would expect of <code>mv_polynomial</code> is treating the polynomial as a function on the base ring, i.e. <code>eval</code>. The actual <code>coe_fn</code> instance inherited from <code>finsupp</code> is the <code>coeff</code> function</p>",
        "id": 158736970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550397412
    },
    {
        "content": "<p>Then if I don't add the attribute <code>@[reducible ]</code>, some lemmas like <code>finsupp.support_zero</code> won't be simplified under the type of <code>mv_polynomial</code><br>\nI have to copy the lemma and prove it again instead. How can I fix this kind of problem?</p>",
        "id": 158737385,
        "sender_full_name": "AHan",
        "timestamp": 1550398265
    },
    {
        "content": "<p>that's a feature not a bug</p>",
        "id": 158737439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550398369
    },
    {
        "content": "<p>you don't need to reprove it, but you do need to restate it</p>",
        "id": 158737446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550398389
    },
    {
        "content": "<p>and this makes you think about how your new interpretation of the type affects the meaning of the theorems</p>",
        "id": 158737449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550398420
    },
    {
        "content": "<p>some of them are no longer applicable, some new theorems may appear</p>",
        "id": 158737451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550398432
    },
    {
        "content": "<p>Sorry, I don't mean it's a bug, I'm just thinking of if there's anyway to avoid to restate those lemmas.</p>",
        "id": 158737495,
        "sender_full_name": "AHan",
        "timestamp": 1550398471
    },
    {
        "content": "<p>OK, I understand! Thanks a lot for explanations!</p>",
        "id": 158737509,
        "sender_full_name": "AHan",
        "timestamp": 1550398514
    },
    {
        "content": "<p>You can also try using the original theorems in the new context but YMMV</p>",
        "id": 158737514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550398558
    }
]