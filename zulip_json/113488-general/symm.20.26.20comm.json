[
    {
        "content": "<p><code>symm</code> and <code>comm</code> seem to really be the same thing, but one being about functions <code>α → Prop</code> and the other about functions <code>α → Type*</code>. Why come we, the mathlib people, not have taken this opportunity to unify vocabulary and definitions? Here are a few potential reasons I came up with:</p>\n<ul>\n<li>There are contexts where both are used concurrently and incompatibly. Doesn't seem to be the case?</li>\n<li>The names are pretty anchored in mathematicians' minds so we keep them for historical reason. We took radical solutions in other similar situations (module/vector space, rank/dim...) and I don't think there's that much attachment to the distinction symmetry/commutativity. I found myself trying to use <code>symm</code> for <code>comm</code> or vice versa.</li>\n<li>Nobody yet bothered changing it.</li>\n</ul>\n<p>So what should we do?</p>",
        "id": 240385327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622060413
    },
    {
        "content": "<p>/poll What should happen of <code>symm</code> and <code>comm</code>?<br>\nNot change anything<br>\nChange all <code>comm</code> to <code>symm</code><br>\nChange all <code>symm</code> to <code>comm</code></p>",
        "id": 240385509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622060493
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">eq.symm</span> <span class=\"c1\">-- a = b → b = a</span>\n<span class=\"k\">#check</span> <span class=\"n\">eq_comm</span> <span class=\"c1\">-- a = b ↔ b = a</span>\n</code></pre></div>",
        "id": 240385529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622060503
    },
    {
        "content": "<p>They are different</p>",
        "id": 240385534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622060509
    },
    {
        "content": "<p>But they are all defined everywhere? It didn't seem to me.</p>",
        "id": 240385626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622060534
    },
    {
        "content": "<p>It is a common pattern, but there might be some gaps</p>",
        "id": 240385825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622060642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/symm.20.26.20comm/near/240385327\">said</a>:</p>\n<blockquote>\n<ul>\n<li>We took radical solutions in other similar situations (module/vector space, rank/dim...)</li>\n</ul>\n</blockquote>\n<p>I'd like to caution against inferring a pattern from <em>only</em> this refactor which was done for mostly technical reasons (and I still have fixing the loss of recognizability on my todo list). Having <code>semimodule</code> and <code>vector_space</code> mean something else than <code>module</code> resulted in subtle breakages in the category theory library and <a href=\"https://github.com/leanprover-community/mathlib/blob/3b8cfdc905c663f3d99acac325c7dff1a0ce744c/src/algebra/triv_sq_zero_ext.lean#L164\">workarounds involving re-instantiating the same definition under a different name like here</a>.</p>",
        "id": 240432919,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622103096
    },
    {
        "content": "<p>I assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and.symm\">docs#and.symm</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and_comm\">docs#and_comm</a> is another example</p>",
        "id": 240433288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622103317
    },
    {
        "content": "<p>If we added a <code>has_coe_to_fun (iff a b) (a -&gt; b)</code> then dot notation would work for <code>comm</code> which would remove the need for <code>symm</code>; but that was met with substantial resistance last time I suggested it due to students already being confused by <code>rw</code> vs <code>apply</code>. I'll try to find that topic, and edit this message with a link when I do.</p>",
        "id": 240433456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622103431
    },
    {
        "content": "<p>Very interesting! Please tell me more</p>",
        "id": 240436831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622105703
    },
    {
        "content": "<p>Updated with a link to the topic</p>",
        "id": 240437736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622106343
    }
]