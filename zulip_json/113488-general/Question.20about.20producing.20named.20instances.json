[
    {
        "content": "<p>Hi, sorry for a rather silly beginner question.</p>\n<p>Consider the following type and class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Assoc</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ordAssoc</span><span class=\"o\">:</span> <span class=\"n\">Ord</span> <span class=\"n\">Assoc</span>\n  <span class=\"n\">beqK</span><span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">Assoc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's trivial to produce <code>ordAssoc</code> by selecting a type, which is <code>Ord</code>.<br>\nIt's trivial to demonstrate that given <code>Ord T</code>, we can produce <code>BEq (K T)</code>.</p>\n<p>What I don't understand is how to take the second demonstration (I write it as <code>instance [Ord T]: BEq (K T) where ...</code>) and shove it into <code>beqK</code>.</p>",
        "id": 285589361,
        "sender_full_name": "cognivore",
        "timestamp": 1654805491
    },
    {
        "content": "<p><code>inferInstance</code> and <code>inferInstanceAs</code> are probably what you're looking for.</p>\n<p>Maybe this is just a minimisation artifact, but your <code>C</code> looks fishy: the type <code>A</code> is never used.</p>",
        "id": 285638270,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1654844272
    },
    {
        "content": "<p>It is a minmisation artefact indeed, I'll look at <code>inferInstance</code> (I actually found it, but couldn't understand). In the meantime, <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> has shown me that one can simply name an <code>instance</code>, which makes me feel that even without automatic or semi-automatic resolution, a user should be able to present <code>beqK</code>.</p>",
        "id": 285652632,
        "sender_full_name": "cognivore",
        "timestamp": 1654854069
    },
    {
        "content": "<p>Yes, you can name the instance and then the user can give it directly. <code>instance</code> is syntactic sugar for a <code>structure</code> with the <code>@[instance]</code> attribute, so a named instance is roughly the same as <code>@[instance] def myInst [Ord T] : BEq (K T) := ...</code>. (In fact, all instances are named; if you don't give a name, Lean will invent one.)</p>\n<p><code>inferInstance</code> gives direct access to typeclass inference. If an instance <code>C A</code> is registered, <code>inferInstanceAs (C A)</code> has type <code>C A</code> (and you don't have to write the instance's name). <code>inferInstance</code> allows you to omit the <code>C A</code> if Lean can figure out from context which class and type you mean.</p>",
        "id": 285655223,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1654855616
    }
]