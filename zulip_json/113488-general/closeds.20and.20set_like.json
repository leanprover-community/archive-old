[
    {
        "content": "<p>Currently, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closeds\">docs#closeds</a> (and similarly for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opens\">docs#opens</a> and others) is a structure built of a set and a proof that it is closed (I think <code>opens</code> may actually be a subtype rather than a structure, but whatever). Then a <code>set_like</code> instance is provided.  One downside is that we can only use this to talk about the closed subsets of a topological space.</p>\n<p>However, if instead <code>closeds</code> took a <code>set_like</code> instance as a parameter, then we could talk about closed subobjects generally, e.g., we could write <code>closeds (ideal R)</code> to talk about the closed left ideals in a ring which is also a topological space. The current (major) downside to this is that <code>set</code> has no <code>set_like</code> instance, so paradoxically we would lose the ability to talk about the closed subsets of a topological space. </p>\n<p>So, what is the word on making <code>set</code> into a <code>set_like</code> instance? Is this a terrible idea? I thought maybe it had been discussed before.</p>",
        "id": 300551916,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664033301
    },
    {
        "content": "<p>Does your idea provide anything beyong basic boilerplate? To me it doesn't seem like you can prove <code>lattice (closeds Œ±)</code> (for your <code>closeds</code>) because you don't know that <code>‚Üë(a ‚äî b) = ‚Üëa ‚à™ ‚Üëb</code> and similar (and indeed it might not be the case). So you will end up writing <code>lattice (closeds (set Œ±))</code>, <code>lattice (closeds (ideal Œ±))</code>, etc... separately</p>",
        "id": 300555182,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664035109
    },
    {
        "content": "<p>I mean, it provides a unified framework, but sure, the lattice operations might be different in different contexts. For <code>closeds</code> you could get a universal <code>inf_semilattice</code>, and then specialize the <code>sup</code> for different types, and for <code>opens</code> the reverse would be true.</p>",
        "id": 300556148,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664035575
    },
    {
        "content": "<p>Right now I mainly just want to express an order isomorphism <code>opens X ‚âÉo closeds (ideal C(X, ùïú))</code>, and use it to prove some basic things. But I can't write down the right-hand side as-is, so I expressed it as a subtype, but then I'm missing basic API. And this will only get to be a bigger deal for me as time goes on (closed ideals play a fundamental role in C‚ãÜ-algebra theory).</p>",
        "id": 300556629,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664035861
    },
    {
        "content": "<p>Then define <code>closed_ideal</code>! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 300556789,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664035951
    },
    {
        "content": "<p>Right, of course I could, but that seems silly when there should be a universal solution to this problem!</p>",
        "id": 300556813,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664035972
    },
    {
        "content": "<p>especially one that (almost) already exists.</p>",
        "id": 300556832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664035987
    },
    {
        "content": "<p>My point is that \"writing the API for <code>closeds</code> and the API for <code>closed_ideal</code>\" is less time than \"writing the API for <code>closeds</code> and the API for <code>closeds (set Œ±)</code> and the API for <code>closeds (ideal R)</code>\" and less design decisions too.</p>",
        "id": 300556956,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664036052
    },
    {
        "content": "<p>emphasis on the design decisions</p>",
        "id": 300557002,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664036082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> What did you have in mind for the interface for closed subsets of a topological space with this idea? Would it be <code>closeds (set X)</code>? I'm not sure how you could get <code>closeds X</code> to work.</p>",
        "id": 300557283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664036225
    },
    {
        "content": "<p>Yes, it would be <code>closeds (set X)</code>, sorry, I mixed usage in my example above.</p>",
        "id": 300557387,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664036281
    },
    {
        "content": "<p>Certainly design decisions can be time-consuming, but I would prefer to do it right rather than create pockets of things which are half-duplicates across the library. Closed ideals are not the only situation where we care about closed subobjects.</p>",
        "id": 300557494,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664036320
    },
    {
        "content": "<p>IMO we should just define <code>closed_ideal</code> because the open analogue is not really useful</p>",
        "id": 300557808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664036471
    },
    {
        "content": "<p>I'm not saying this is a good idea, but there's always this sort of thing to have a global definition <code>closeds</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sets.closeds</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_closeds</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">closeds</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_closeds</span> <span class=\"o\">(</span><span class=\"n\">closeds</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_closeds</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">topological_space.closeds</span> <span class=\"n\">Œ±</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 300558048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664036611
    },
    {
        "content": "<p>Or another sort of design to bundle a type's is-closed property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sets.closeds</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_is_closed</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_closed'</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"c1\">-- name conflict with current `is_closed`, hence the '</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_is_closed</span> <span class=\"o\">(</span><span class=\"n\">is_closed'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">closeds</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_is_closed</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed'</span> <span class=\"o\">:</span> <span class=\"n\">is_closed'</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_is_closed</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">is_closed</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 300558949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664037064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I haven't been able to figure out where you'd need the <code>set_like</code> instance. Could you give some Lean to clarify?</p>",
        "id": 300559196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664037186
    },
    {
        "content": "<p>It's to state that an ideal is closed. <code>closed</code> eats up a <code>set</code>, not an <code>ideal</code>.</p>",
        "id": 300562450,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664039010
    },
    {
        "content": "<p>Right now, <code>closeds (ideal R)</code> would mean the type of closed (collections of ideals), assuming that <code>ideal R</code> had a <code>topological_space</code> instance.</p>",
        "id": 300562756,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664039201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , this isn't really about open ideals vs closed ideals; it's about closed subobjects in general.</p>",
        "id": 300563555,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664039763
    },
    {
        "content": "<p>Another option is to just create a new type <code>set_like.closeds</code> which does what I mentioned, and to keep this separate from <code>topological_space.closeds</code>. I'm leaning towards this if there isn't support (or if it isn't a good idea) for making a <code>set_like</code> instance for <code>set</code>.</p>",
        "id": 300564761,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664040550
    },
    {
        "content": "<p>But then you will exactly one use: <code>ideal</code></p>",
        "id": 300565630,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664041100
    },
    {
        "content": "<p>I'm much more for having at least three examples before abstracting boilerplate away, because you might figure out later that there's little to gain.</p>",
        "id": 300565699,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664041158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/closeds.20and.20set_like/near/300565630\">said</a>:</p>\n<blockquote>\n<p>But then you will exactly one use: <code>ideal</code></p>\n</blockquote>\n<p>That seems like a strong statement. What about closed subgroups?</p>",
        "id": 300565894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664041272
    },
    {
        "content": "<p>I mean now</p>",
        "id": 300566022,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1664041327
    },
    {
        "content": "<p>Ya√´l, if it were significantly more work to do <code>set_like.closeds</code> vs <code>closed_ideal</code>, then I might agree with you, but this is a trivial abstraction. Moreover, I can already think of other scenarios: as Kyle mentioned, there's closed subgroups, but for my purposes, closed subalgebras and closed star_subalgebras will be important as well. Of course, sometimes we don't want these bundled, but other times we do. For example, there is a natural correspondence between closed left ideals in a C‚ãÜ-algebra and hereditary C‚ãÜ-algebras.</p>",
        "id": 300566633,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664041720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/113488-general/topic/closeds.20and.20set_like/near/300562450\">said</a>:</p>\n<blockquote>\n<p>It's to state that an ideal is closed. <code>closed</code> eats up a <code>set</code>, not an <code>ideal</code>.</p>\n</blockquote>\n<p>I get that -- my thought was that the definitions themselves don't need a <code>set_like</code> instance since you need to supply the <code>is_closed'</code> field. There could then be a property typeclass (I guess what we're calling mixins) that says <code>is_closed'</code> respects the inf structure to support general lemmas.</p>",
        "id": 300566806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664041838
    },
    {
        "content": "<p>It would be nice if there were some general way to deal with the subtype-of-subtype problem. There's something about it that reminds me of monad transformer stacks... We'd like to be able to lift structures that are present in interior subtypes out to the whole stack of subtypes when possible.</p>",
        "id": 300566976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664041994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Regarding <code>set_like</code> for <code>set</code>, I suggest just trying it and seeing if mathlib breaks. I suspect there are some instances that <code>set_like</code> provides that might conflict, however. One solution to this might be to split <code>set_like</code> into two parts, one which is just the injective map to <code>set</code> and the other which, when you create an instance of it, will add all the bells and whistles.</p>",
        "id": 300567155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664042139
    },
    {
        "content": "<p>I thought it was tried very recently, and it broke stuff really badly</p>",
        "id": 300567321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664042226
    },
    {
        "content": "<p>I think a more general thing to do is to write some predicate that says a thing is closed with respect to a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a></p>",
        "id": 300567952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664042616
    },
    {
        "content": "<p>I think the map sending an ideal to its closure is such an operator</p>",
        "id": 300568011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664042645
    },
    {
        "content": "<p>That sounds nice and <del>pointless</del> pointfree.</p>",
        "id": 300568075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664042703
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator.closed\">docs#closure_operator.closed</a>, so I guess you mean using this with respect to Kyle's second suggestion above?</p>",
        "id": 300572065,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664045272
    },
    {
        "content": "<p>So, as far as I can tell, Adam's suggestion would amount to making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a> into a class, or maybe a new class with a single field which is a <code>closure_operator</code> in order to provide an API specific to the class separate from the structure <code>closure_operator</code>. While this does seem very appealing, I do wonder about the applicability. </p>\n<p>For example, if we had an instance of this class for topological spaces (where the provided closure operator is the usual one) and then have other instances on other types where the closure operator has nothing to do with topological closure, we could easily end up with real diamonds that way. </p>\n<p>To me that suggests that we should restrict to topological closure, but then that just leads me back to <code>set_like.closeds</code>. Please let me know if I'm overlooking something or have missed the point.</p>",
        "id": 300597367,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664067882
    }
]