[
    {
        "content": "<p>Is there a way to jump to the definition of an instance? For example, when I click on the sup symbol in <code>f ⊔ g</code>, where <code>f</code> and <code>g</code> are filters, I would like it to take me to the instance of has_sup for filters instead of taking me to the definition of the sup symbol. The only workaround for this that I know is to go to the mathlib docs page, find the definition of has_sup and search for the instances there.</p>",
        "id": 307398598,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667334730
    },
    {
        "content": "<p>You can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to get the name, and chase it as far down as you would like</p>",
        "id": 307398793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667334826
    },
    {
        "content": "<p>Doing so leads to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.complete_lattice\">docs#filter.complete_lattice</a></p>",
        "id": 307399009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667334894
    },
    {
        "content": "<p>I see. Hmm... this is not really an improvement.</p>",
        "id": 307399394,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667335047
    },
    {
        "content": "<p>Well, once you get the name, you can use <code>#check the_name</code> and right click on <code>the_name</code> to go to the definition.</p>",
        "id": 307399593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667335115
    },
    {
        "content": "<p>Yeah, it's not completely automatic, but it's better than nothing.</p>",
        "id": 307399644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667335138
    },
    {
        "content": "<p>You can inspect everything in the infoview!</p>",
        "id": 307399807,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667335203
    },
    {
        "content": "<p>that too!</p>",
        "id": 307399837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667335215
    },
    {
        "content": "<p>some of us hermits still use emacs occasionally <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 307399879,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667335238
    },
    {
        "content": "<p>Just click on the instances recursively (until you have exhausted the mathematically boring forgetful instances)</p>",
        "id": 307399892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667335243
    },
    {
        "content": "<p>True, the infoview is better. However, I can't seem to use it on typeclass methods.</p>",
        "id": 307400733,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667335611
    },
    {
        "content": "<p>Why not?</p>",
        "id": 307400984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667335730
    },
    {
        "content": "<p>I don't know. I don't get anything when I put the cursor on a typeclass method in a typeclass.</p>",
        "id": 307401303,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667335868
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/15KawgeJdqu1a9ogORsIEkij/Peek-2022-11-01-14-54.gif\">Peek-2022-11-01-14-54.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/15KawgeJdqu1a9ogORsIEkij/Peek-2022-11-01-14-54.gif\" title=\"Peek-2022-11-01-14-54.gif\"><img src=\"/user_uploads/3121/15KawgeJdqu1a9ogORsIEkij/Peek-2022-11-01-14-54.gif\"></a></div>",
        "id": 307401869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667336098
    },
    {
        "content": "<p>Yes, that works. But now try making type class with a method that uses F ⊔ G and try to get the infoview to show you F ⊔ G.</p>",
        "id": 307403898,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667336955
    },
    {
        "content": "<p>I'm not sure what you mean.</p>",
        "id": 307403956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667336992
    },
    {
        "content": "<p>If you just have <code>variables (X : Type*) [has_sup X]</code> then there is nothing more to say! The <code>has_sup</code> instance was just an assumption!</p>",
        "id": 307404123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337052
    },
    {
        "content": "<p>But I'm probably misunderstanding what you want</p>",
        "id": 307404142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337061
    },
    {
        "content": "<p>In my case, I have this class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to see f ≤ g in the infoview so that I can get to the instance. Alas, it does not appear.</p>",
        "id": 307404343,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667337156
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/CEWouE6UWa2LPPJClND5aDm1/Peek-2022-11-01-15-15.gif\">Peek-2022-11-01-15-15.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CEWouE6UWa2LPPJClND5aDm1/Peek-2022-11-01-15-15.gif\" title=\"Peek-2022-11-01-15-15.gif\"><img src=\"/user_uploads/3121/CEWouE6UWa2LPPJClND5aDm1/Peek-2022-11-01-15-15.gif\"></a></div>",
        "id": 307404755,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337342
    },
    {
        "content": "<p>I didn't even need to include the <code>(α : Type*) [convergence_space α]</code>, as you can see</p>",
        "id": 307404871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337385
    },
    {
        "content": "<p>I think you're misunderstanding. I'm interested in seeing f ≤ g from the type class itself in the infoview, not in some example using it.</p>",
        "id": 307405057,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667337471
    },
    {
        "content": "<p>what do you mean \"from the typeclass itself\"?</p>",
        "id": 307405151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337496
    },
    {
        "content": "<p>Well, you basically cheated by creating an example and then seeing the infoview for the example. Try getting the infoview without any example, i.e. just from looking at the code of the typeclass.</p>",
        "id": 307405319,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667337581
    },
    {
        "content": "<p>okay if you don't want to use the infoview, then you can do all that stuff with <code>#check</code> I mentioned above.</p>",
        "id": 307405450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337631
    },
    {
        "content": "<p>I want to use the infoview, but it's not available in that situation. It's the same thing in <code>def</code>s. It seems like the infoview only appears in tactic mode.</p>",
        "id": 307405614,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667337718
    },
    {
        "content": "<p>Thanks for helping though.</p>",
        "id": 307405771,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667337772
    },
    {
        "content": "<p>So put an </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>above your definition as a temporary playground so you can use the infoview</p>",
        "id": 307405838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667337792
    },
    {
        "content": "<p>Yes, I will add that to my scratch file where I normally use library_search and so on.</p>",
        "id": 307406318,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1667338020
    },
    {
        "content": "<p>I wonder if it would ever be possible (in Lean 3 or Lean 4) to click on an expression and be able to inspect it with widgets. It'd be great to be able to more directly see how an expression is elaborated without these workarounds.</p>",
        "id": 307407847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667338784
    },
    {
        "content": "<p>It should be a pretty simple improvement of the \"term goal view\" to (optionally) show the term itself as well (edit: though that could be confusing in situations where the expected type differs from the inferred type). For the specific initial request, see also <a href=\"https://github.com/leanprover/lean4/pull/1767\">https://github.com/leanprover/lean4/pull/1767</a>.</p>",
        "id": 307475055,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667378802
    }
]