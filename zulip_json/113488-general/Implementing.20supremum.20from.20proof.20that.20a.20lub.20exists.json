[
    {
        "content": "<p>So, as an exercise for my own self enrichment I'm trying to implement as much of \"baby rudin\" (the analysis book). I have the following defined, for reference</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upper_bound</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lower_bound</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bounded_above</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">upper_bound</span> <span class=\"n\">b</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bounded_below</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">lower_bound</span> <span class=\"n\">b</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">upper_bound</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">upper_bound</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">glb</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lower_bound</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">lower_bound</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>anyway, I want to define a <code>sup</code> function that obeys the properties of the supremum function, for use in equational theorems involving <code>sup</code>, which are quite common in Rudin. However, I'm having trouble with that, since <code>Exists</code> can only eliminate into <code>Prop</code>, which makes sense, but is somewhat annoying since it prevents what I want. Here is my attempt, for reference</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">lub</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Is there a way to do what I want? Or am I going about this completely wrong?</p>",
        "id": 323167780,
        "sender_full_name": "Kevin Fisher",
        "timestamp": 1674538009
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose#doc\">docs4#Exists.choose</a></p>",
        "id": 323178024,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1674544015
    },
    {
        "content": "<p>In mathlib3, <code>sup</code> is defined for <em>all</em> subsets of \\R and returns junk values for subsets that don't have a sup. This makes it much easier to use. It might not be mathematically \"normal\" but it's a more effective way of implementing the idea within lean's type theory.</p>",
        "id": 323183479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674546566
    },
    {
        "content": "<p>Thanks for the options, I'll think about it</p>",
        "id": 323325726,
        "sender_full_name": "Kevin Fisher",
        "timestamp": 1674585362
    }
]