[
    {
        "content": "<p>Hi all, this is a follow-up to my difficulties with the <code>occs</code> configuration for <code>rw</code>. I'm still not there writing a \"please find _all_ the possible rewrites\" function.</p>\n<p>Something that would be really helpful for me would be a \"rewrite entire\" function, that takes <code>r:expr</code> and <code>e:expr</code>, where <code>r</code> is some rewrite rule, and tells me whether it can rewrite the entirety of <code>e</code> using it (that is, not rewriting a subexpression).</p>",
        "id": 123679200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520987103
    },
    {
        "content": "<p>I'm pretty confident I can implement that myself, but I think it may exist already, or be even easier than I'm anticipating, so I thought I'd ask here.</p>",
        "id": 123679208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520987129
    },
    {
        "content": "<p>I haven't seen it anywhere</p>",
        "id": 123679467,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520987609
    },
    {
        "content": "<p>To be clear, <code>r</code> may be <code>forall x y z, E = F</code> and that tactic would unify E with the parameter <code>e</code>. Is that accurate?</p>",
        "id": 123679514,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520987671
    },
    {
        "content": "<p>Yes, that's exactly what I want.</p>",
        "id": 123679591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520987809
    },
    {
        "content": "<p>Ok, I can do it myself easily enough.</p>",
        "id": 123679595,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520987819
    },
    {
        "content": "<p>I think <code>simp_lemmas</code> will do that</p>",
        "id": 123679602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520987838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, the documentation for <code>simp_lemmas</code> talks about simplification lemmas. Can I ignore that and<br>\n attempt to use it with arbitrary rewrite rules? And it won't attempt to look in subexpressions, just rewrite the entire thing?</p>",
        "id": 123679758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520988106
    },
    {
        "content": "<p>I guess I can read the implementation of <code>simp_lemmas.rewrite</code> myself... :-)</p>",
        "id": 123679823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520988228
    },
    {
        "content": "<p>Pretty sure it doesn't look in subexpressions, since it is intended for use with <code>ext_simplify_core</code> which does the subexpression traversal itself</p>",
        "id": 123679869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520988265
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 123679871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520988275
    },
    {
        "content": "<p>okay, I will give that a go.</p>",
        "id": 123679881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520988317
    },
    {
        "content": "<p>Do we have an analogue of <code>mk_eq_symm</code> that traverses through binders?</p>",
        "id": 123698442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521026256
    },
    {
        "content": "<p>e.g. turning the <code>expr</code> <code>位 a : A, 位 b : B, f a b = g a b</code> into <code>位 a : A, 位 b : B, g a b = f a b</code>?</p>",
        "id": 123698486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521026322
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/master/library/init/meta/expr.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/meta/expr.lean\">expr.lean</a> is spectacularly unhelpful about the arguments of <code>expr.elet</code>. One can glean from it that the four <code>expr</code> arguments of <code>elet</code> ought to be called <code>n</code>, <code>g</code>, <code>e</code>, <code>f</code>, in that order, but not much more. Is there somewhere these things are written down?</p>",
        "id": 123698913,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521027302
    },
    {
        "content": "<p>Oh... I was asking for the wrong thing, and I don't think I know how to do it. Suppose I have an <code>expr</code> which is just the name of a equation lemma; how can I get the <code>eq.symm</code> version of that lemma?</p>",
        "id": 123699122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521027832
    },
    {
        "content": "<p>I'm guessing I need to ... <code>infer</code> the type of my expression, and then while the type is Pi, replace the expression with a lambda wrapped around it, and then when there are no more Pis use <code>mk_eq_symm</code>?</p>",
        "id": 123699509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1521028708
    }
]