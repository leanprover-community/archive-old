[
    {
        "content": "<p>Call me type checker curious. Is there some sort of framework where you can easily build your own type checker, by just writing some simple specs. E.g., you specify the judgment rules in some variant of BNF + epsilon and the framework spits out a type checker.</p>",
        "id": 183916820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576830129
    },
    {
        "content": "<p>I would dearly love to see this. I have tried to reverse engineer the judgement rules without success.</p>",
        "id": 183917203,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576830694
    },
    {
        "content": "<p>andrej bauer recently gave a talk on a future tool like this at icfp 2019 <a href=\"https://youtube.com/watch?v=YZqOVsuyQyQ\" target=\"_blank\" title=\"https://youtube.com/watch?v=YZqOVsuyQyQ\">https://youtube.com/watch?v=YZqOVsuyQyQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"YZqOVsuyQyQ\" href=\"https://youtube.com/watch?v=YZqOVsuyQyQ\" target=\"_blank\" title=\"https://youtube.com/watch?v=YZqOVsuyQyQ\"><img src=\"https://i.ytimg.com/vi/YZqOVsuyQyQ/default.jpg\"></a></div>",
        "id": 183918019,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576831704
    },
    {
        "content": "<p>Cool, I'm going to watch this</p>",
        "id": 183918034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576831722
    },
    {
        "content": "<p>Bauer also gave a talk on Vimeo \"How to Implement Type Theory in an Hour (<a href=\"https://vimeo.com/286652934\" target=\"_blank\" title=\"https://vimeo.com/286652934\">https://vimeo.com/286652934</a>) but I need the rules rules implemented by Lean</p>",
        "id": 183918793,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576832511
    },
    {
        "content": "<blockquote>\n<p>Bauer also gave a talk on Vimeo \"How to Implement Type Theory in an Hour (<a href=\"https://vimeo.com/286652934\" target=\"_blank\" title=\"https://vimeo.com/286652934\">https://vimeo.com/286652934</a>) but I need the rules rules implemented by Lean</p>\n</blockquote>\n<p>Those rules are in Mario's thesis</p>",
        "id": 183918852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576832533
    },
    {
        "content": "<p>As for perhaps more mature tools, <a href=\"https://docs.racket-lang.org/redex/tutorial.html\" target=\"_blank\" title=\"https://docs.racket-lang.org/redex/tutorial.html\">redex</a> is quite popular. You need to know a bit of Lisp/Racket, but... the good thing about Lisp is that there isn't much to know about it.</p>",
        "id": 183919070,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1576832753
    },
    {
        "content": "<p>Has anyone tried to implement Lean's rules in Andromeda?</p>",
        "id": 183919851,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576833601
    },
    {
        "content": "<p>Meta-theoriy of type theories.... let the recursion begin :-)</p>",
        "id": 183920404,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576834084
    },
    {
        "content": "<p>Interesting points about humans using type assistants at about minute 35</p>",
        "id": 183923370,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576836967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> Thanks for the link to the talk about Andromeda. It's really cool.</p>",
        "id": 183923403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576837036
    },
    {
        "content": "<p>no problem! <span class=\"user-mention\" data-user-id=\"126113\">@Olli</span> posted it here once before for the comments on itp in general.</p>",
        "id": 183923937,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576837538
    },
    {
        "content": "<p>It is interesting that these ideas from the proof community show up (in different words) in the computer algebra area. His comment about implicit coercions (especially since Axiom has first class dependent types) has to be handled on an ad-hoc basis in Axiom since it isn't decidable.</p>",
        "id": 183924099,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576837665
    },
    {
        "content": "<p>Around minute 46 he talks about \"callbacks\", where the \"User code\" (in my case Axiom) is used as an Oracle (my term) for things like judgement equality.Equality checking can be  \"computed\" in Axiom. Computer algebra allows computing equality in many special contexts (e.g. \"Is this equal to that\" in the current context of a non-abelian domain (e.g. matrix).</p>",
        "id": 183924651,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576838173
    },
    {
        "content": "<p>You might have a type A as a polynomial with fractional coefficients and need to see if it is equal to type B which is a fraction of polynomials with integer coefficients. Axiom can do this.</p>",
        "id": 183924786,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576838304
    },
    {
        "content": "<p>Note that in Andrej's case, the callback for equal(A,B) is supposed to use functions from the kernel to produce a proof of |- A = B. I don't think your Axiom computations will do this</p>",
        "id": 183924859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576838402
    },
    {
        "content": "<p>The andromeda kernel (nucleus) isn't involved in the equal(A,B) interaction with user code, at least from what I can see from his talk. I will be reading his papers.</p>",
        "id": 183926436,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576839920
    },
    {
        "content": "<p>Even more interesting is his distinction between proof relevant and proof irrelevant rules, such as equality. A conjecture would be that Oracle systems (i.e. computer algebra) are ideal for answering proof irrelevant questions</p>",
        "id": 183929068,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576842654
    },
    {
        "content": "<p>The kernel is the only thing that produces elements of the abstract data type \"judgment\". This is what ensures soundness and a \"small trusted kernel\" mentioned earlier in the talk</p>",
        "id": 183929930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576843474
    },
    {
        "content": "<p>So user code that wants to return a proof of |- A = B has to call kernel functions in order to construct the data, that's the whole point</p>",
        "id": 183929988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576843538
    },
    {
        "content": "<p>you can't just respond \"yes\" to the query equal(A,B)</p>",
        "id": 183930042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576843571
    },
    {
        "content": "<p>The question equal(A,B) question becomes \"Is there a (proven) coercion between A and B?\". Given a proof of the coercion code in Axiom (already provided by a prior Lean proof) the answer to the question equal(A,B) where A is POLY(FRAC(INT)) and B is FRAC(POLY(INT)) is decideable and proof irrelevant.</p>",
        "id": 183930172,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576843758
    },
    {
        "content": "<p>In Andrej's system, equal(A,B) means \"please provide a proof of the convertibility of A and B, i.e. |- A = B\". This proof can go by any means, including equality reflection on some theorem that you have lying around if the theory supports it, but it needs an actual proof; trusted code doesn't work for this purpose</p>",
        "id": 183930603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576844146
    },
    {
        "content": "<p>The Axiom Sane effort is using Lean to prove the coercion code. So the coercion becomes an axiom in Lean. There is an \"actual proof\" in Lean which is a proof of the Axiom code, the proof can be provided as it is carried with the code.</p>",
        "id": 183930938,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576844457
    },
    {
        "content": "<p>The coercion code is essentially a Lean tactic.</p>",
        "id": 183930965,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576844503
    },
    {
        "content": "<p>Ultimately  the Axiom algorithms can all be used as Lean tactics or Lean axioms once they are proven.</p>",
        "id": 183931071,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576844601
    },
    {
        "content": "<p>One could compute a GCD by calling the Axiom code rather than using Peano</p>",
        "id": 183931151,
        "sender_full_name": "Tim Daly",
        "timestamp": 1576844668
    }
]