[
    {
        "content": "<p>I came across the following. In mathlib, there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_not</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but the following does not work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>\n<p>I'm wondering why <code>simp</code> does not fire here, even though <code>not_not</code> is marked as a <code>simp</code> lemma.</p>",
        "id": 289878013,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658055296
    },
    {
        "content": "<p>This is because <code>p → false</code> and <code>¬ p</code> are not syntactically equal, but only defeq, and <code>simp</code> (and <code>rw</code>) work up to syntactic equality.</p>",
        "id": 289878068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658055367
    },
    {
        "content": "<p>Is there a way to make <code>simp</code> work with this?<br>\n(Right now, I have a proof consisting of a <code>simp only [...]</code>, but then I have to follow it by <code>exact not_not</code> to clear the goal, which has the form mentioned. If <code>simp</code> could be made to deal with it, it would be a one-liner.)</p>",
        "id": 289878165,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658055587
    },
    {
        "content": "<p><del>I would guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.simp_config\">docs#tactic.simp_config</a> has an option for that</del> it does not</p>",
        "id": 289879635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658057762
    },
    {
        "content": "<p>You could add the <code>simp</code> lemma :-)</p>",
        "id": 289880499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658059098
    },
    {
        "content": "<p>I'm afraid of touching <code>logic.basic</code> <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nI guess this would trigger a recompilation of all of mathlib...</p>",
        "id": 289882596,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658061878
    },
    {
        "content": "<p>I guess I can do the following (this is silly in the example, but would give a one-liner in my use-case).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 289882691,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658061990
    },
    {
        "content": "<p><code>change</code> is also a hack to get around this issue.</p>",
        "id": 289882727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658062078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/.60not_not.60.20and.20.60simp.60/near/289882596\">said</a>:</p>\n<blockquote>\n<p>I'm afraid of touching <code>logic.basic</code> <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nI guess this would trigger a recompilation of all of mathlib...</p>\n</blockquote>\n<p>Well, this what CI is for. It's not in <code>core</code> so you can add the lemma, open the PR and see what happens (around 1 minutes of work).</p>",
        "id": 289882772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658062118
    },
    {
        "content": "<p>It has been changed four days ago, so there is nothing special in touching it.</p>",
        "id": 289882793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658062166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60not_not.60.20and.20.60simp.60/near/289882727\">said</a>:</p>\n<blockquote>\n<p><code>change</code> is also a hack to get around this issue.</p>\n</blockquote>\n<p>But this would also need an extra line in the proof.</p>",
        "id": 289882794,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658062168
    },
    {
        "content": "<p>Would it be a good idea to mark <a href=\"https://leanprover-community.github.io/mathlib_docs/find/imp_false\">docs#imp_false</a> as a simp lemma? It would at least solve this problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">imp_false'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">imp_false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 289882865,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658062261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I've now opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15461\">#15461</a>.</p>",
        "id": 289883125,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658062608
    },
    {
        "content": "<p>Maybe throw <code>imp_false</code> into the <code>simp</code> call?</p>",
        "id": 289883139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658062630
    },
    {
        "content": "<p>Bur maybe <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> 's suggestion is better.</p>",
        "id": 289883147,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658062645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You were right, <code>by simp [imp_false]</code> does it.</p>",
        "id": 289883222,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658062727
    },
    {
        "content": "<p>I deleted the post initially because I meant to say \"why not throw <code>imp_false'</code> into the <code>simp</code> call?\" but then realised that it didn't exist beyond Patrick's post! And I thought that obviously throwing <code>imp_false</code> into it wouldn't solve anything ;-)</p>",
        "id": 289883303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658062839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60not_not.60.20and.20.60simp.60/near/289883139\">said</a>:</p>\n<blockquote>\n<p>You can just throw <code>imp_false</code> into the <code>simp</code> call I guess?</p>\n</blockquote>\n<p>Yes, but I was just wondering whether making it a simp lemma would be a good pattern, since there are more simp lemmas involving <code>not</code> rather than <code>→ false</code>, even though that would in some sense be a reverse unfold of the <code>not</code> definition.</p>",
        "id": 289883405,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658062978
    },
    {
        "content": "<p>CI is already unhappy, I think because of a nonterminal <code>simp</code> that now changed its behavior.  The solution is to make it a <code>simp only</code></p>",
        "id": 289883735,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658063353
    },
    {
        "content": "<p>I fixed that by first adding <code>-not_imp_false_iff</code> and squeezing it.<br>\n(I suspect, though, that using the new lemma might simplify the proof there, but I'm not going down that rabbit hole...)</p>",
        "id": 289884490,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658064025
    },
    {
        "content": "<p>Note that  <code>A -&gt; false</code> is more general than <code>not A</code> because the former allows non-props</p>",
        "id": 289887741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658068097
    },
    {
        "content": "<p>So simping it to <code>¬ p</code>  for <code>p : Prop</code> makes sense, right?</p>",
        "id": 289887759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658068146
    },
    {
        "content": "<p>yes, but it doesn't mean that simp lemmas about <code>A -&gt; false</code>  aren't needed, and in fact this adds another (commuting) diamond in simp</p>",
        "id": 289887845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658068261
    },
    {
        "content": "<p>In any case,  <a href=\"https://github.com/leanprover-community/mathlib/pull/15461\">#15461</a> is now green...</p>",
        "id": 289897657,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658082510
    }
]