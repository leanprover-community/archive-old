[
    {
        "content": "<p>I've got the following code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">free_module</span>\n<span class=\"kn\">definition</span> <span class=\"n\">free_module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span> <span class=\"n\">S</span> <span class=\"n\">R</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">free_module</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">free_module</span>\n</pre></div>",
        "id": 126254021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766679
    },
    {
        "content": "<p>And this is the error</p>\n<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\nR : Type u_1,\n_inst_1 : ring R,\nS : Type u_2\n‚ä¢ Type ?\n</pre></div>",
        "id": 126254025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766701
    },
    {
        "content": "<p>Aah, I should point out that the red squiggles are under <code>free_module</code> in the line with <code>sorry</code></p>",
        "id": 126254034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766731
    },
    {
        "content": "<p>Shouldn't <code>R</code> be explicit in <code>free_module</code>? It is not inferrable</p>",
        "id": 126254076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525766771
    },
    {
        "content": "<p>I think the error means that it can't figure out in which universe <code>free_module S</code> lives</p>",
        "id": 126254077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766773
    },
    {
        "content": "<p>Aah, Ok, is that the problem. I thought it was automatically included, since I declared it a variable</p>",
        "id": 126254085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766806
    },
    {
        "content": "<p>Or should I then use <code>()</code> instead of <code>{}</code></p>",
        "id": 126254090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766815
    },
    {
        "content": "<p>it isn't a parameter</p>",
        "id": 126254096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525766829
    },
    {
        "content": "<p>it is included, but the later use might refer to a different <code>R</code></p>",
        "id": 126254097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525766836
    },
    {
        "content": "<p>Ok... well, that fixed my problem. Thanks a lot!</p>",
        "id": 126254154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525766946
    },
    {
        "content": "<p>no, don't use parameter</p>",
        "id": 126254155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525766953
    },
    {
        "content": "<p>you won't be able to use it once you leave the section</p>",
        "id": 126254158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525766963
    },
    {
        "content": "<p>Hmm, what do you mean?</p>",
        "id": 126254203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767037
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">free_module</span>\n<span class=\"kn\">definition</span> <span class=\"n\">free_module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span> <span class=\"n\">S</span> <span class=\"n\">R</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">free_module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic fails</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">free_module</span>\n</pre></div>",
        "id": 126254205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767059
    },
    {
        "content": "<p>Is that wrong?</p>",
        "id": 126254209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767064
    },
    {
        "content": "<p>never mind</p>",
        "id": 126254214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525767067
    },
    {
        "content": "<p>that isn't wrong</p>",
        "id": 126254216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525767074
    },
    {
        "content": "<p>Ok, I don't mind learning a better way (-;</p>",
        "id": 126254219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767086
    },
    {
        "content": "<p>So, why is <code>split</code> failing? I expected to get 4 goals, according to the 4 axioms of a module</p>",
        "id": 126254265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767138
    },
    {
        "content": "<p>constructor</p>",
        "id": 126254270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525767151
    },
    {
        "content": "<p>but you don't want to use it since it <code>extends</code> something</p>",
        "id": 126254273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525767163
    },
    {
        "content": "<p>maybe if you really want to stay in tactic mode, do <code>refine {..}</code></p>",
        "id": 126254279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525767175
    },
    {
        "content": "<p>Well, I don't <em>want</em> to stay in tactic mode. It is just that I have no clue how to do things in term mode. And tactic mode helps me a bit (-;</p>",
        "id": 126254482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767512
    },
    {
        "content": "<p>So what would be the proper way to prove this <code>instance</code>?</p>",
        "id": 126254761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768035
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">free_module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>etc</p>",
        "id": 126254774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525768070
    },
    {
        "content": "<p>Ok, thanks! I'll try to do that.</p>",
        "id": 126254830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768163
    },
    {
        "content": "<p>Lol, this is already in <code>finsupp</code>: <code>to_module</code></p>",
        "id": 126255445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525769176
    },
    {
        "content": "<p>lol</p>",
        "id": 126255448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525769187
    },
    {
        "content": "<p>The errors continue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">free_module</span>\n<span class=\"kn\">definition</span> <span class=\"n\">free_module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span> <span class=\"n\">S</span> <span class=\"n\">R</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">free_module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">free_module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_module</span>\n<span class=\"kn\">end</span> <span class=\"n\">free_module</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">generators</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">natural_map</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">free_module</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">generated_submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">natural_map</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">is_finitely_generated</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">generated_submodule</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">M</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">generators</span>\n</pre></div>",
        "id": 126256750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525771545
    },
    {
        "content": "<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span>generators.lean:19:57: error\n\nfailed to synthesize type class instance for\nM : Type u_2,\nS : set M\n‚ä¢ module ?m_1 M\ngenerators.lean:19:57: error\n\ndon&#39;t know how to synthesize placeholder\ncontext:\nM : Type u_2,\nS : set M\n‚ä¢ Type ?\n</pre></div>",
        "id": 126256792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525771569
    },
    {
        "content": "<p>But I am telling it that M is a module over R, so why can't it unify <code>?m_1</code> with <code>R</code>?</p>",
        "id": 126256799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525771614
    },
    {
        "content": "<p>You started a new section so Lean has forgotten about the variable R</p>",
        "id": 126258817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525775791
    },
    {
        "content": "<p>wait</p>",
        "id": 126258821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525775820
    },
    {
        "content": "<p>that doesn't seem to be true</p>",
        "id": 126258825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525775823
    },
    {
        "content": "<p>It seems to be because you don't ever mention R so the type class inference doesn't kick in</p>",
        "id": 126258898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525775977
    },
    {
        "content": "<p><code>definition generated_submodule (S : set M) [module R M] := set.range (natural_map S) -- works</code></p>",
        "id": 126258966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776066
    },
    {
        "content": "<p>Type class inference is a strange thing</p>",
        "id": 126258971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776074
    },
    {
        "content": "<p>include R</p>",
        "id": 126258973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525776082
    },
    {
        "content": "<p>I would still not say I had completely got the hang of it</p>",
        "id": 126258974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776086
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">include</span> <span class=\"n\">R</span>\n<span class=\"kn\">definition</span> <span class=\"n\">generated_submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">natural_map</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 126258979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776121
    },
    {
        "content": "<p>Kenny's fix</p>",
        "id": 126259016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776125
    },
    {
        "content": "<p>What does <code>include</code> do?</p>",
        "id": 126259021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776141
    },
    {
        "content": "<p>I thought this was for including variable names in tactic proofs</p>",
        "id": 126259026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776152
    },
    {
        "content": "<p>As for the equality failing</p>",
        "id": 126259037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776209
    },
    {
        "content": "<p><code>set.univ : Œ† {Œ± : Type u}, set Œ±</code></p>",
        "id": 126259038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776213
    },
    {
        "content": "<p><code>set.univ</code> doesn't take <code>M</code>, it guesses it.</p>",
        "id": 126259041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776230
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">is_finitely_generated</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">generated_submodule</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 126259081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776251
    },
    {
        "content": "<p>Recently I realised that I pretty fully understood most Lean errors</p>",
        "id": 126259083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776268
    },
    {
        "content": "<p>i.e. I can look at the error and actually figure out what is wrong with my code, in many cases</p>",
        "id": 126259086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  generated_submodule {x : M | x ‚àà S} = set.univ M\nterm\n  set.univ M\nhas type\n  Prop : Type\nbut is expected to have type\n  set M : Type ?\n</pre></div>",
        "id": 126259096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776314
    },
    {
        "content": "<p>says \"the right hand side is supposed to have type <code>set M</code> but it has type <code>Prop</code> so you have not written what you meant to write -- it doesn't typecheck.\"</p>",
        "id": 126259103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776354
    },
    {
        "content": "<p>You are attempting to assert that two sets are equal</p>",
        "id": 126259146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776382
    },
    {
        "content": "<p>so the correct type is <code>set M</code></p>",
        "id": 126259147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776394
    },
    {
        "content": "<p>so the problem is that <code>set.univ M</code> has type Prop instead of type <code>set M</code></p>",
        "id": 126259149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776415
    },
    {
        "content": "<p>and now you look at what <code>set.univ</code> actually does by hovering your mouse over <code>set.univ</code></p>",
        "id": 126259156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776437
    },
    {
        "content": "<p>and you see your error</p>",
        "id": 126259159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776441
    },
    {
        "content": "<p>I would urge you <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> to learn to read errors so you can find out the problem.</p>",
        "id": 126259207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776513
    },
    {
        "content": "<p>Sometimes the problem is that type class inference has failed. Type class inference is just something you have to get the hang of and I had to ask and ask here about it -- see my typeclass inference woes thread</p>",
        "id": 126259211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776543
    },
    {
        "content": "<p>But for other errors, try and make it so that there is exactly one error (i.e put sorry everywhere else) and then try and read the error.</p>",
        "id": 126259224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776597
    },
    {
        "content": "<p>And then hope that you can fix it</p>",
        "id": 126259266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525776609
    },
    {
        "content": "<p>Ok, thanks! I hope to get the hang of it as well...</p>",
        "id": 126259847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525777797
    },
    {
        "content": "<p><code>set.univ : set M</code> should help</p>",
        "id": 126266575,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525789467
    },
    {
        "content": "<p>Or perhaps <code>@set.univ M</code></p>",
        "id": 126266785,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525789730
    }
]