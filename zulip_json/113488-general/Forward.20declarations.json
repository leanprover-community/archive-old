[
    {
        "content": "<p>Is it possible to forward declare definitions in lean? I'd like to write something like</p>\n<div class=\"codehilite\"><pre><span></span>structure some_data -- forward declare structure because lean can&#39;t look ahead\n\ndef mutator_fn := some_data → some_data\n\nstructure some_data :=\n  (the_data : list nat)\n  (data_mutator : mutator_fn)\n\ndef some_data.mutate (my_data : some_data) : some_data := my_data.data_mutator my_data\n</pre></div>\n\n\n<p>and that way <code>my_data.mutate</code> would be able mutate itself, for example.</p>\n<p>If you can't I'm pretty sad. :( Has it ever been asked for?</p>",
        "id": 131227150,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533893643
    },
    {
        "content": "<p>I'm not exactly sure what you're after yet, but \"mutual defs\" may be what you want, and I think are as close as you're going to get.</p>",
        "id": 131227260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533893800
    },
    {
        "content": "<p>I'm now all about mutual definitions!</p>",
        "id": 131227578,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894181
    },
    {
        "content": "<p>This sounds like an obvious source of unsoundness, so it's definitely by design that this isn't doable. I think you should explain in more detail what you are trying to do - there is likely a standard \"functional\" approach to your problem that does not require forward declaration.</p>",
        "id": 131227588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894196
    },
    {
        "content": "<p>Rather than forward declaration, the structure can just refer to itself. Since this makes it recursive you have to define it with <code>inductive</code>:</p>\n<div class=\"codehilite\"><pre><span></span>meta inductive some_data\n| mk (the_data : list nat)\n     (data_mutator : some_data → some_data) : some_data\n</pre></div>\n\n\n<p>This has to be <code>meta</code>, though, because it <em>is</em> unsound</p>",
        "id": 131227747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894377
    },
    {
        "content": "<p>Sure, this was just for programming in lean just like another functional language (i.e. with reckless abandon). Often functions invoke each other, for example. I was willing to sell my soul to the <code>meta</code>s :D</p>",
        "id": 131227775,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894433
    },
    {
        "content": "<p>here is the mutator:</p>\n<div class=\"codehilite\"><pre><span></span>meta def some_data.mutate : some_data → some_data\n| ⟨d, m⟩ := m ⟨d, m⟩\n</pre></div>",
        "id": 131227827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894484
    },
    {
        "content": "<p>cheers</p>",
        "id": 131227844,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894531
    },
    {
        "content": "<p>what does <code>meta</code> mean?</p>",
        "id": 131227848,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533894539
    },
    {
        "content": "<p>Roughly that you are doing <em>raw</em> Lean. Without proof checking. So all tactics are written in <code>meta</code> land.</p>",
        "id": 131227901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533894603
    },
    {
        "content": "<p>But Mario can give you a definition that is a lot better.</p>",
        "id": 131227918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533894613
    },
    {
        "content": "<p>It turns off the safety</p>",
        "id": 131227919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894619
    },
    {
        "content": "<p>you can do unbounded recursion and non-positive inductives and other unsound things, as well as being able to call meta constants that have a definition in C++</p>",
        "id": 131227946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894660
    },
    {
        "content": "<p>Actually, how might I solve a related problem, like declaring (toy example):</p>\n<div class=\"codehilite\"><pre><span></span>meta structure vertex :=\n( color : string )\n( adj_list : list edge )\n\nmeta structure edge :=\n( start end : vertex )\n( weight : nat )\n</pre></div>",
        "id": 131227961,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894708
    },
    {
        "content": "<p>mutual inductive</p>",
        "id": 131227962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894719
    },
    {
        "content": "<p>(thanks again for the practically instant help)</p>",
        "id": 131228003,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894725
    },
    {
        "content": "<p>beat me!</p>",
        "id": 131228007,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533894731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta mutual inductive vertex, edge\nwith vertex : Type\n| mk (color : string) (adj_list : list edge) : vertex\nwith edge : Type\n| mk (start end_ : vertex) (weight : nat) : edge\n</pre></div>",
        "id": 131228035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894813
    },
    {
        "content": "<p><code>end</code> is a keyword</p>",
        "id": 131228039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894821
    },
    {
        "content": "<p>Note that these are dangerous even in pure programming lean, because the pointer structure has cycles and lean is reference counted</p>",
        "id": 131228161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533894984
    },
    {
        "content": "<p>(In principle) there are countermeasures against rc cycles though, right? Are you saying that lean isn't able to find them at the moment?---if so, appreciate the heads up. thanks again :)</p>",
        "id": 131229142,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1533896624
    },
    {
        "content": "<p>Well, lean is pretty explicitly designed to make rc cycles impossible as a result of the type system</p>",
        "id": 131229209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533896695
    },
    {
        "content": "<p>I don't know if it does something special for meta mutual inductives, but I doubt it</p>",
        "id": 131229223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533896734
    },
    {
        "content": "<p>the goal is to have a strong enough type system that lean can assume powerful things about your code. Functional stuff like common subexpression evaluation is one simple example</p>",
        "id": 131229297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533896820
    }
]