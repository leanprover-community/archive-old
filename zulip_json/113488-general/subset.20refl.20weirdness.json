[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">error: invalid apply tactic, failed to unify</span>\n<span class=\"cm\">  @has_subset.subset.{0} (set.{0} α) (@set.has_subset.{0} α) s s</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  @has_subset.subset.{?l_1} (list.{?l_1} ?m_2) (@list.has_subset.{?l_1} ?m_2) ?m_3 ?m_3</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">s : set.{0} α</span>\n<span class=\"cm\">⊢ @has_subset.subset.{0} (set.{0} α) (@set.has_subset.{0} α) s s</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 126108434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525459621
    },
    {
        "content": "<p>I guess this actually does not exist anywhere...?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 126108665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525459932
    },
    {
        "content": "<p>You're probably right. You can try:</p>\n<div class=\"codehilite\"><pre><span></span>local attribute [refl] set.subset.refl -- if that&#39;s the name of the appropriate lemma\n</pre></div>",
        "id": 126108698,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525459990
    },
    {
        "content": "<p>Then your proof will work</p>",
        "id": 126108701,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525459999
    },
    {
        "content": "<p>Ah, the lemma does exist in mathlib, but without <code>@[refl]</code></p>",
        "id": 126108905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525460305
    },
    {
        "content": "<p>The proof of a refl lemma is often <code>rfl</code>, and conversely any proof which is proved with <code>rfl</code> is I think automatically tagged <code>@[refl]</code>, but because the proof wasn't rfl here the tag is needed.</p>",
        "id": 126115996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525471267
    },
    {
        "content": "<p><code>rfl</code> is only for reflexivity of equality and the tag comes from the fact that <code>rfl</code> implies that the two terms are definitionally equal. But if we're talking of reflexivity of other relations than equality, it doesn't imply anything with regards to definitional equality</p>",
        "id": 126116079,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525471394
    },
    {
        "content": "<p>I just tried my theory and the lemma I proved with rfl was tagged <code>@[_refl_lemma]</code> not <code>@[refl]</code></p>",
        "id": 126116346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525471833
    },
    {
        "content": "<p><code>@[refl]</code> means it's a proof that a relation is reflexive and is for the <code>refl</code> tactic. <code>@[_refl_lemma]</code> means it's a proof of equality proved using <code>rfl</code> for the <code>dsimp</code> tactic.</p>",
        "id": 126151045,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525550349
    }
]