[
    {
        "content": "<p>It seems <span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> may have run into a bug in Lean, which I've posted as <a href=\"https://github.com/leanprover-community/lean/issues/451\">https://github.com/leanprover-community/lean/issues/451</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>gives a warning <code>definition 'N' was incorrectly marked as noncomputable</code>, while</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n\n<span class=\"n\">def</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>gives an error <code>rec_fn_macro only allowed in meta definitions</code>.</p>",
        "id": 207587608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597967300
    },
    {
        "content": "<p>This is minimised from <a href=\"https://github.com/leanprover-community/mathlib/issues/3855\">#3855</a>, if it's helpful to see the original context, defining the combinatorial game \"nim\".</p>",
        "id": 207587684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597967394
    },
    {
        "content": "<p>the error suggests that it wants to be meta, not noncomputable</p>",
        "id": 207588596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597968229
    },
    {
        "content": "<p>Interestingly, you can get it to compile if you use <code>noncomputable theory</code> and also mark the def <code>noncomputable</code></p>",
        "id": 207589582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597969128
    },
    {
        "content": "<p>None of the auxiliary definitions here should be noncomputable, but there are lots of noncomputable subterms in irrelevant positions, specifically <code>O₁.out</code></p>",
        "id": 207589814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597969435
    },
    {
        "content": "<p>If you stick this before the definition it works just fine:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Well_order</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">wo</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n\n<span class=\"n\">def</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p><code>ordinal.out</code> \"launders\" <code>quotient.out</code> through a bunch of irrelevant types to make it computable</p>",
        "id": 207589936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597969560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span>, do you want to try using Mario's <code>ordinal.out</code>?</p>",
        "id": 207590027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597969670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I tried adding this to my definition and it works if I 'prove' <code>hwf</code> by <code>sorry</code> but my current proof of <code>hwf</code> uses <code>ordinal.type_out</code> which I think is causing problems, how could I translate this to use your definition of <code>ordinal.out</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nim</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"k\">begin</span> <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"err\">←</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">type_out</span> <span class=\"n\">O₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein_lt_type</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"k\">begin</span> <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"err\">←</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">type_out</span> <span class=\"n\">O₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein_lt_type</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">typein</span> <span class=\"n\">O₁</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207618263,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1598004491
    },
    {
        "content": "<p>Same trick:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">type_out&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"n\">o</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">type_out</span>\n</code></pre></div>\n\n\n<p>use this instead of <code>ordinal.type_out</code></p>",
        "id": 207665023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598033095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span></p>",
        "id": 207665032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598033101
    }
]