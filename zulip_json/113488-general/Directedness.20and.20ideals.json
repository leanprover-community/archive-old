[
    {
        "content": "<p>Am I right in thinking that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.ideal.ideal_inter_nonempty\">docs#order.ideal.ideal_inter_nonempty</a> is equivalent to <code>is_directed P (swap (≤))</code>?</p>",
        "id": 267844628,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642066868
    },
    {
        "content": "<p>and similarly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.ideal.ideal_Inter_nonempty\">docs#order.ideal.ideal_Inter_nonempty</a> should be equivalent to a strong directedness which should be satisfied by a <code>complete_latlice</code>.</p>",
        "id": 267845038,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642067116
    },
    {
        "content": "<p>Yup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.ideal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">order.ideal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ideal_inter_nonempty</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">is_directed</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">introI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">inter_nonempty</span> <span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"n\">b</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">introI</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">I.nonempty</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">J.nonempty</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">hbc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">directed_of</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">I.mem_of_le</span> <span class=\"n\">hac</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">J.mem_of_le</span> <span class=\"n\">hbc</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267846224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642067826
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"251122\">@Noam Atar</span></p>",
        "id": 267846257,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642067853
    },
    {
        "content": "<p>Actually, strong directedness is just the existence of a bottom element (doesn't have to be <code>order_bot</code>).</p>",
        "id": 267846483,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642067975
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11421\">#11421</a></p>",
        "id": 267850463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642070353
    }
]