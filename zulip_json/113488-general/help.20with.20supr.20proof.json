[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">fin.append</span> <span class=\"n\">hn</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">supr</span> <span class=\"n\">g₁</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">supr_mono'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The family <code>g</code> of filters is basically the family <code>g₁</code> followed by the family <code>g₂</code>. And I want to show <code>supr g₁ ≤ supr g</code> and <code>supr g₂ ≤ supr g</code>. This is straighforward on paper, but I'm having trouble writing this formally in Lean. Any tips?</p>\n<p>I wonder if it would be easier to just use sets of filters instead of fin-indexed families.</p>",
        "id": 289779308,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657916811
    },
    {
        "content": "<p>is there a <code>supr_sum_eq_sup</code> lemma somewhere?</p>",
        "id": 289779377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657916868
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_sum\">docs#supr_sum</a></p>",
        "id": 289779453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657916897
    },
    {
        "content": "<p>so if you can identify <code>g</code> with the supr over the sum type, that would let you reduce to <code>le_sup_left</code> and <code>le_sup_right</code></p>",
        "id": 289779511,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657916937
    },
    {
        "content": "<p>or you could just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_le\">docs#supr_le</a></p>",
        "id": 289779583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657916982
    },
    {
        "content": "<p>I had an attempt using supr_le, but I didn't get very far.</p>",
        "id": 289779795,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917096
    },
    {
        "content": "<p>Using the sum seems interesting.</p>",
        "id": 289779875,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917127
    },
    {
        "content": "<p>Hmm..., but I can't use a sum since I need to deal with fin indexed families only.</p>",
        "id": 289779988,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917211
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">fin.append</span> <span class=\"n\">hn</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">supr</span> <span class=\"n\">g₁</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">supr_le</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_supr</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289780085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917260
    },
    {
        "content": "<p>I don't know how hard that sorry is with the current api for <code>fin.append</code></p>",
        "id": 289780101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917274
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_fin_equiv\">docs#fin_sum_fin_equiv</a></p>",
        "id": 289780124,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657917290
    },
    {
        "content": "<p>Ah, fin_sum_fin_equiv is pretty handy here.</p>",
        "id": 289780373,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917446
    },
    {
        "content": "<p>Maybe <code>fin.append</code> should be redefined using <code>fin_sum_fin_equiv</code>?</p>",
        "id": 289780488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917512
    },
    {
        "content": "<p>I'm thinking though... maybe I should just redefine g₁, g₂, g to be finite sets. I think it will be easier this way to prove the corresponding Sup inequalities.</p>",
        "id": 289780522,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917541
    },
    {
        "content": "<p>working with indexed families is almost always better when you're using supr and infi</p>",
        "id": 289780558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917566
    },
    {
        "content": "<p>you could use arbitrary indexing types satisfying <code>[fintype _]</code> and use the sum type instead of the <code>append</code></p>",
        "id": 289780585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917596
    },
    {
        "content": "<p>Yeah. However, indexed families feels too sophisticated to me, at least in Lean. I'm more comfortable dealing with sets.</p>",
        "id": 289780743,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657917675
    },
    {
        "content": "<p>It's much easier if you use types, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">sum.rec_on</span> <span class=\"n\">t</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">supr</span> <span class=\"n\">g₁</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">supr_le_iff</span><span class=\"o\">],</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_supr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289781093,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657917926
    },
    {
        "content": "<p>Nice. I'll try this out if I can't get a set-based proof going. Thanks a lot.</p>",
        "id": 289781417,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1657918085
    },
    {
        "content": "<p>You'd have to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fin.append</span> <span class=\"n\">hn</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"n\">sum.cases_on</span> <span class=\"n\">i</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">fin_sum_fin_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"n\">hn</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n</code></pre></div>",
        "id": 289785098,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657920252
    },
    {
        "content": "<p>Which requires some lemmas about the application of <code>fin.append</code> which I don't see right now</p>",
        "id": 289785120,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657920268
    },
    {
        "content": "<p>And some of these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">assist</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">supr</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_supr_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">assist'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">supr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">supr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_supr_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">supr_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289785148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657920291
    },
    {
        "content": "<p>or something of that natrue</p>",
        "id": 289785163,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657920303
    }
]