[
    {
        "content": "<p>I have been bitten several times lately by a weird <code>simp</code> behavior (bug?). Each time I have avoided it by using <code>rw</code> instead, but it keeps showing up, so I would be glad if someone can help me understand what is going on. I tried to build a minimal working example as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo_rec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"n\">rec</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Everything here is stupid, but hopefully my real use case is not. The proof of <code>stupid</code> is not accepted: more precisely, I get red squiggles under the name of the lemma, with the message</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">normed_field</span> <span class=\"n\">k_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">normed_field</span> <span class=\"n\">k</span>\n<span class=\"n\">types</span> <span class=\"n\">contain</span> <span class=\"n\">aliased</span> <span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">k</span>\n<span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">dedup</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">rename</span> <span class=\"n\">aliases</span>\n</pre></div>\n\n\n<p>This looks to me like a <code>simp</code> or <code>induction</code> bug. Any opinion on this?</p>",
        "id": 167133557,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559501374
    },
    {
        "content": "<p>It looks like <code>simp</code> might be building a buggy <code>congr</code> proof. Here's a slightly more condensed example. It succeeds if you change the order of <code>n</code> and <code>k</code> in <code>foo_rec</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo_rec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">k</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"n\">rec</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167144184,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1559518763
    },
    {
        "content": "<blockquote>\n<p>It looks like <code>simp</code> might be building a buggy <code>congr</code> proof. Here's a slightly more condensed example. It succeeds if you change the order of <code>n</code> and <code>k</code> in <code>foo_rec</code>.</p>\n</blockquote>\n<p>Thanks for this remark on the order of <code>n</code> and <code>k</code>. In my use case, the order does not really matter, so I put <code>k</code>before <code>n</code> and now everything works fine. The bug is still here, though, and mysterious, but at least it won't be a problem for me.</p>",
        "id": 167181805,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559563483
    },
    {
        "content": "<p>Does anyone have any ideas on this?</p>",
        "id": 197593906,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589479185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/simp.20and.20dedup/near/197593906\">said</a>:</p>\n<blockquote>\n<p>Does anyone have any ideas on this?</p>\n</blockquote>\n<p>What is this pointing to? (hopefully I'm not crazy, it looks like this is the first message in a new topic?)</p>",
        "id": 197598144,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589481003
    },
    {
        "content": "<p>There are 3 earlier posts from half a year ago</p>",
        "id": 197598244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589481046
    },
    {
        "content": "<p>Ah, i joined the server between now and then, and the part of the history that says \"you subscribed to stream general\" breaks this up visually in the same way that different topics are broken up if I look at the stream-wide feed</p>",
        "id": 197598532,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589481160
    },
    {
        "content": "<p>Is there a leanprover-community/lean issue about this? (If not, someone who's familiar with the issue should create one.)</p>",
        "id": 197598808,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589481284
    },
    {
        "content": "<p>None that I'm aware of, but I don't understand enough what's happening to make a coherent issue</p>",
        "id": 197598967,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589481357
    },
    {
        "content": "<p>I think it would be enough to submit an issue including a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>, mainly so that we don't forget about this.</p>",
        "id": 197600367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589481947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/236\">https://github.com/leanprover-community/lean/issues/236</a></p>",
        "id": 197602554,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589482818
    }
]