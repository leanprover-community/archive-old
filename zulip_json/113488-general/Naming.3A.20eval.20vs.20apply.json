[
    {
        "content": "<p>I'd like to unify the names of the following definitions:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.apply\">docs#monoid_hom.apply</a>: Evaluation of a dependent function at a point is a monoid hom</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.apply\">docs#ring_hom.apply</a>: Evaluation of a dependent function at a point is a ring hom</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.eval\">docs#monoid_hom.eval</a>: Evaluation of a monoid_hom at a point is a monoid hom</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.applyₗ\">docs#linear_map.applyₗ</a>: Evaluation of a linear_map over a commutative R at a point is a linear_map</li>\n<li>doesn't yet exist: Evaluation of a linear map over a non-commutative R at a point is an add_monoid_hom</li>\n</ul>\n<p>Essentially, these are all \"evaluation of an X at a point is a Y\", where <code>X</code> is possibly-bundled function type and <code>Y</code> is a definitely bundled function type. Unfortunately, the naming is currently very ad-hoc.</p>\n<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/issues/5851\">#5851</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/5847\">#5847</a> to make the picture a little better, but realized that even with my naming  there, the question of <code>eval</code> vs <code>apply</code> still comes up. Some naming options:</p>\n<p>``</p>\n<ol>\n<li>\n<p>Use <code>X.apply_Y</code> for all cases. The above functions become</p>\n<ul>\n<li><code>pi.apply_monoid_hom : (Π i, f i) →* f i</code></li>\n<li><code>pi.apply_ring_hom : (Π i, f i) →+* f i</code></li>\n<li><code>monoid_hom.apply_monoid_hom : (M →* M₂) →* M₂</code></li>\n<li><code>linear_map.apply_linear_map : (M →ₗ[R] M₂) →ₗ[R] M₂</code></li>\n<li><code>linear_map.apply_add_monoid_hom : (M →ₗ[R] M₂) →+ M₂</code></li>\n</ul>\n</li>\n<li>\n<p>Use <code>Y.apply_X</code> for all cases. The above functions become</p>\n<ul>\n<li><code>monoid_hom.apply_pi : (Π i, f i) →* f i</code></li>\n<li><code>ring_hom.apply_pi : (Π i, f i) →+* f i</code></li>\n<li><code>monoid_hom.apply_monoid_hom : (M →* M₂) →* M₂</code></li>\n<li><code>linear_map.apply_linear_map : (M →ₗ[R] M₂) →ₗ[R] M₂</code></li>\n<li><code>monoid_hom.apply_linear_map : (M →ₗ[R] M₂) →+ M₂</code></li>\n</ul>\n</li>\n</ol>\n<p>Plus some variants:</p>\n<p>(i) Use <code>eval</code> instead of <code>apply</code><br>\n(ii) Shorten <code>X.apply_pi</code> to <code>X.apply</code><br>\n(iii) Shorten <code>X.apply_X</code> to <code>X.apply</code></p>\n<p>I have a fairly strong feeling that 1 is better than 2 (it enables dot notation).<br>\nI don't have any opinion on (i), (ii) is moot given the choice of 2, and (iii) is in my opinion not worth the impact it has on discoverability of the other variants.</p>",
        "id": 223813950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611494821
    },
    {
        "content": "<p>I agree the dot notation is a good reason to prefer 1 over 2 (except for <code>pi</code>). Slight preference for <code>apply</code> over <code>eval</code> (for computer-sciency reasons: <code>eval</code> indicates some kind of \"syntactical\" representation of a function, e.g. polynomials). Slight preference for (iii), for symmetry.</p>",
        "id": 223874439,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611568188
    },
    {
        "content": "<p>/poll <code>X.apply_Y</code> turns a:<br>\n<code>X</code> into a <code>Y</code><br>\n<code>Y</code> into an <code>X</code></p>",
        "id": 223874553,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611568244
    },
    {
        "content": "<p>/poll eval or apply?<br>\neval<br>\napply</p>",
        "id": 223874588,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611568266
    },
    {
        "content": "<p>/poll <code>X.apply</code> is short for?<br>\n<code>X.apply_pi</code><br>\n<code>X.apply_X</code><br>\nneither</p>",
        "id": 223874668,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611568322
    },
    {
        "content": "<p>I don't understand any of these questions</p>",
        "id": 223874746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611568365
    },
    {
        "content": "<p>for me <code>apply</code> means function application</p>",
        "id": 223874786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611568382
    },
    {
        "content": "<p>What would you call the definition <code>M → (M →ₗ[R] M₂) →ₗ[R] M₂</code>?</p>",
        "id": 223874856,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1611568438
    },
    {
        "content": "<p><code>eval</code> seems fine since it's backwards</p>",
        "id": 223874928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611568460
    },
    {
        "content": "<p>it could be <code>apply</code> but not if that name is already being used for the reverse</p>",
        "id": 223874984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611568498
    },
    {
        "content": "<p>I don't think we have a proper name for <code>\\lam f, f x</code></p>",
        "id": 223875013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611568522
    },
    {
        "content": "<p>this is the \"evaluation at <code>x</code>\" function, which is different from <code>pi.apply</code> right?</p>",
        "id": 223875169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611568627
    },
    {
        "content": "<p>The current <code>monoid_hom.apply _ x f</code> is \"evaluation of a <code>pi</code> function <code>f</code> at <code>x</code>\" (which is what I'm proposing be renamed to <code>pi.apply</code> or <code>pi.eval</code>, making your statement wrong)</p>",
        "id": 223875741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611568939
    },
    {
        "content": "<p>The current <code>monoid_hom.eval _ x f</code> is \"evaluation of a <code>monoid_hom</code> function <code>f</code> at <code>x</code>\".</p>\n<p>All of these definitions take an argument <code>x</code> and emit a bundled hom mapping <code>f</code> to <code>f x</code>. They differ both in the type of <code>f</code>, and the bundling of the resulting hom.</p>",
        "id": 223875785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611568970
    },
    {
        "content": "<p>I could imagine calling \"evaluation of a <code>pi</code> function <code>f</code> at <code>x</code>\" something like <code>f.coeff x</code>.</p>",
        "id": 223876080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611569115
    },
    {
        "content": "<p>Maybe dot-notation will not work <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 223876123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611569143
    },
    {
        "content": "<p>In most cases when you're using these definitions you don't have <code>f</code>, because the whole points is to create the bundled thing from <code>f \\to f x</code></p>",
        "id": 223876139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611569151
    },
    {
        "content": "<p>And I guess even when you do end up working through the proof and end up with <code>monoid_hom.coeff x f</code>, dot notation won't be used by the pretty printer because dot notation isn't used for bundled homs</p>",
        "id": 223876282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611569227
    },
    {
        "content": "<p>Some other cases for <code>X</code> not mentioned in my top message: <code>finsupp</code>, <code>dfinsupp</code>.</p>",
        "id": 223876681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611569501
    },
    {
        "content": "<p>There seems to be consensus at least on which namespace these defs belong in. Any more votes on eval vs apply?</p>",
        "id": 223971989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611613735
    },
    {
        "content": "<p>Oh, we also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.eval\">docs#function.eval</a> <code>: i → (Π i, f i) → f i</code> it seems (cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.apply\">docs#monoid_hom.apply</a> <code>: i → (Π i, f i) →* f i</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.eval\">docs#monoid_hom.eval</a> <code>: A →* (A →* B) →* B</code>)</p>",
        "id": 225091769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612390721
    },
    {
        "content": "<p>I have a small preference for <code>eval</code>, but am fine with either.</p>\n<blockquote>\n<p>I have a fairly strong feeling that 1 is better than 2 (it enables dot notation).</p>\n</blockquote>\n<p>This confuses me. I thought that dot notation doesn't work, even with this naming scheme, because it has to insert a <code>coe_fn</code> before the definition has an argument that is actually an <code>X</code>, and dot notation doesn't do that(?)</p>",
        "id": 225100824,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612396386
    },
    {
        "content": "<p>A related question is whether things belong in the <code>function</code> or <code>pi</code> namespace</p>",
        "id": 225103437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612398141
    },
    {
        "content": "<p>I've renamed just the <code>pi</code> definitions in <a href=\"https://github.com/leanprover-community/mathlib/issues/5851\">#5851</a>, so that we have <code>pi.eval_add_monoid_hom</code> for consistency with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.eval_add_monoid_hom\">docs#dfinsupp.eval_add_monoid_hom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quadratic_form.eval_add_monoid_hom\">docs#quadratic_form.eval_add_monoid_hom</a>, and partial consistency with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.eval\">docs#function.eval</a>. That choice seems consistent with the result of the poll above.</p>",
        "id": 238485851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620830715
    },
    {
        "content": "<p>Left out of the above was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.proj\">docs#linear_map.proj</a>, which I figured would be unpopular as <code>pi.eval_linear_map</code></p>",
        "id": 238961521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621155173
    },
    {
        "content": "<p>When we were discussing these things and writing LTE code you suggested <code>eval_add_monoid_hom</code> and I ended up getting really irritated with how long this name was for a function which was appearing everywhere in my code, so I changed it to <code>proj</code> in LTE.</p>",
        "id": 238965720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621159743
    },
    {
        "content": "<p>I assume you're referring to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.eval_add_monoid_hom\">docs#dfinsupp.eval_add_monoid_hom</a>?</p>",
        "id": 238965813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621159808
    },
    {
        "content": "<p>The problem is that <code>proj</code> is really just an alternative for <code>eval</code>; it doesn't solve the \"preserves zero\" / \"preserves add\" / \"preserves both\" / \"preserves both and smul\" part of the name that is <code>_add_monoid_hom</code>.</p>",
        "id": 238965869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621159905
    },
    {
        "content": "<p>How close to possible is syntax that promotes functions to bundled homs like <code>(function.eval i : _ \\to+ _)</code>? Could <a href=\"https://leanprover-community.github.io/mathlib_docs/find/can_lift\">docs#can_lift</a> help?</p>",
        "id": 238966038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621160067
    },
    {
        "content": "<p>I totally agree that proj=eval; I prefer proj because even though <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⊕</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\oplus_iA_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is implemented as a function type, it doesn't mean that people think of elements as functions and as the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>↦</mo><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">(a_i)\\mapsto a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> as an evaluation. You're also totally right that there is no way to distiguish whether the evaluations is a group hom, a monoid hom or whatever. I'm merely making the point that if you're actually working with graded objects then you use these maps <em>all the time</em> and <code>eval_add_monoid_hom</code> is a _really long name_ for something you're writing everywhere. How about we use notation for this? <code>pr+</code>?</p>",
        "id": 238974802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621169219
    },
    {
        "content": "<p>Oh, I agree that for <code>direct_sum</code> that <code>proj</code> is better than eval. For <code>pi</code> it's a bit of a gray area - proj is clearly appropriate for things like <code>fin 3 -&gt; R</code>, but less clear for arbitrary functions.</p>",
        "id": 238981861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621174760
    }
]