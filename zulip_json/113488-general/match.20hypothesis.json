[
    {
        "content": "<p>Hi, </p>\n<p>I hope you can help me with the following issue:</p>\n<p>I have this defintion containing a proof obligation:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">def</span> <span class=\"n\">clip_tensor_index2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ds₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ds₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">tensor_index</span> <span class=\"o\">(</span><span class=\"n\">zipdims</span> <span class=\"n\">ds₂</span> <span class=\"n\">ds₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">tensor_index</span> <span class=\"n\">ds₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ds₁</span> <span class=\"n\">ds₂</span> <span class=\"bp\">⟨</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">clip_tensor_index_list</span> <span class=\"n\">ds₂</span> <span class=\"n\">is</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span> <span class=\"o\">,</span> <span class=\"n\">clip_tensor_index_list_correct</span> <span class=\"n\">ds₂</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Where I put <code>sorry</code>, I need to prove that <code>clip_tensor_index_list ds₂ is = some js</code>, which should be obvious since I matched <code>clip_tensor_index_list ds₂ is</code> with <code>some js</code>. How can I do this?</p>\n<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  helped me out with this solution using tactics:</p>\n<div class=\"codehilite\"><pre><span></span>  def clip_tensor_index2 : Π {ds₁ : list ℕ} (ds₂ : list ℕ), tensor_index (zipdims ds₂ ds₁) → option (tensor_index ds₂)\n  | ds₁ ds₂ ⟨is, h⟩ :=\n  begin\n    cases h1 : clip_tensor_index_list ds₂ is with js,\n    exact none,\n    exact some ⟨ js , clip_tensor_index_list_correct ds₂ is js h1 ⟩\n  end\n</pre></div>\n\n\n<p>This works, but I am curious if I could avoid using tactics inside a definition.</p>",
        "id": 133796312,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536756374
    },
    {
        "content": "<p>If the thing you're matching on (<code>clip_tensor_index_list ds₂ is</code>) is an inductive type T then you could use <code>T.rec</code> (it looks like <code>option.rec</code> in your case)</p>",
        "id": 133798275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536758712
    },
    {
        "content": "<p>Yes, <code>clip_tensor_index_list ds₂ is</code> is of type <code>option</code>. However, with <code>option.rec</code>, I still have the same issue. Where you see the <code>sorry</code> below, I need to provide a proof of <code>clip_tensor_index_list ds₂ is = some js</code>. How can I get it?</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">def</span> <span class=\"n\">clip_tensor_index2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ds₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ds₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">tensor_index</span> <span class=\"o\">(</span><span class=\"n\">zipdims</span> <span class=\"n\">ds₂</span> <span class=\"n\">ds₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">tensor_index</span> <span class=\"n\">ds₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ds₁</span> <span class=\"n\">ds₂</span> <span class=\"bp\">⟨</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span> <span class=\"o\">,</span> <span class=\"n\">clip_tensor_index_list_correct</span> <span class=\"n\">ds₂</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">clip_tensor_index_list</span> <span class=\"n\">ds₂</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133869597,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536827286
    },
    {
        "content": "<p>I see: I was too quick. This has come up before and I can't remember the answer :-(</p>",
        "id": 133870081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536828004
    },
    {
        "content": "<p>Of course you could look at the proof term generated by the tactic version and see how Lean did it ;-)</p>",
        "id": 133870103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536828119
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- h : b = ff</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- h : b = tt and I will now use h</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133870338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536828419
    },
    {
        "content": "<p>and <code>#print f</code> tells me that Lean used <code>bool.cases_on</code></p>",
        "id": 133870367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536828455
    },
    {
        "content": "<p>Like I told you yesterday, I'm sure there's a way to make <code>match</code> handle this, but I can't remember. Here's a workaround in term mode, by giving a motive to the recursor explicitly. I suspect that the tactic version is doing basically this under the hood.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">})</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 133870592,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536828692
    },
    {
        "content": "<p>right, that's what the term looks like in my bool example. The trick is a cleverly-chosen motive.</p>",
        "id": 133870647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536828736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">tt</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">ff</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133871740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is this the answer to your question?</p>",
        "id": 133871743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830116
    },
    {
        "content": "<p>right</p>",
        "id": 133871755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830129
    },
    {
        "content": "<p>so you are defining an auxiliary <code>f'</code> using pattern matching</p>",
        "id": 133871766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830145
    },
    {
        "content": "<p>and then you can define f using f'</p>",
        "id": 133871768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830148
    },
    {
        "content": "<p>wait, I think I have another answer</p>",
        "id": 133871811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830164
    },
    {
        "content": "<p>I had a look at that <code>tail</code> / <code>vector</code> example in TPIL and they also used an auxiliary function, but then they did something cleverer and got the equation compiler to do it</p>",
        "id": 133871818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830186
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching</a></p>",
        "id": 133871830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830216
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">f&#39; : ℕ → ℕ,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">K : ℕ := n + 1</span>\n<span class=\"cm\">⊢ ℕ</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 133871840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830245
    },
    {
        "content": "<p>this is the answer you seek</p>",
        "id": 133871841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">@</span><span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133871888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536830287
    },
    {
        "content": "<p>excellent, thanks Kenny. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> hopefully this is enough hints :-)</p>",
        "id": 133871893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536830311
    },
    {
        "content": "<p>I have no idea what you are talking about, and yet it seems interesting. What the point of that definition of <code>f'</code>? Clearly <code>example : f' = (λ x, ⟨tt, rfl⟩) := by  ext x ; cases x; refl</code></p>",
        "id": 133872520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536831093
    },
    {
        "content": "<p>So, what are you trying to do?</p>",
        "id": 133872524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536831107
    },
    {
        "content": "<p>honestly, nobody knows what we're trying to do unless OP provides an MWE</p>",
        "id": 133872592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536831168
    },
    {
        "content": "<p>Hi, thanks for all the answers. I am trying to apply what you wrote to my situation, but I am still having trouble.</p>\n<p>What's an MWE?</p>",
        "id": 133873156,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536831879
    },
    {
        "content": "<p>Minimum working example</p>",
        "id": 133873162,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536831895
    },
    {
        "content": "<p>Oh, ok. I'll try to come up with something.</p>",
        "id": 133873179,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536831917
    },
    {
        "content": "<p>Patrick my definition is too minimal. The OP just wants to define a function on <code>option A</code> by matching, and when defining its value at <code>x := some y</code> he needs the proof that <code>x = some y</code> to define the value.</p>",
        "id": 133873602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536832496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> the reason your original post didn't get much attention is because we can't just cut and paste your code into a blank lean session, so someone had to figure out what you were actually asking.</p>",
        "id": 133873615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536832536
    },
    {
        "content": "<p>Oh, I feel like my post is getting a lot of attention :)<br>\nI almost finished the MWE...</p>",
        "id": 133873672,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536832613
    },
    {
        "content": "<p>Here it is:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">def</span> <span class=\"n\">clip</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n    <span class=\"kn\">lemma</span> <span class=\"n\">clip_correct</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">clip</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"bp\">_</span> <span class=\"bp\">⟩</span>\n    <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The last underscore would need a proof that <code>clip is = some js</code>.</p>",
        "id": 133873823,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536832889
    },
    {
        "content": "<p>If I follow <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's advise, i.e. I use tactic mode to generate a working definition and use #print to view it, then I get this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">option</span> <span class=\"o\">{</span><span class=\"n\">js</span> <span class=\"bp\">//</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">),</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n       <span class=\"n\">h1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">clip</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n    <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>But if I copy paste this into the editor, I get </p>\n<div class=\"codehilite\"><pre><span></span>invalid &#39;option.cases_on&#39; application, elaborator has special support for this kind of application (it is handled as an &quot;eliminator&quot;), but the expected type must be known\n</pre></div>\n\n\n<p>What type needs to be known?</p>",
        "id": 133874241,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536833450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">clip</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">clip_correct</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lookup_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cis</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">cis</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">is</span> <span class=\"n\">none</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">lookup_aux</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 133875506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536835310
    },
    {
        "content": "<p>my guess is that it's the type of of the lambda which you're evaluating at <code>clip is</code></p>",
        "id": 133875547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536835325
    },
    {
        "content": "<p>So Kenny's solution is via the auxiliary function trick which is mentioned in TPIL</p>",
        "id": 133875555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536835349
    },
    {
        "content": "<p>The elaborator isn't able to infer the motive for <code>cases_on</code>. If you don't want to use an aux declaration, you can give the motive manually, but personally I think the tactic version is cleaner than all of these.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lookup&#39;</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">clip</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">js</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lookup&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 133875645,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536835545
    },
    {
        "content": "<p>Ok, I guess you are right. I'll stick to the tactic version. Anyway, good to know how the other options look like. Thanks!</p>",
        "id": 133877252,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536837766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>  for this concrete example you can use the following solution: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">clip</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"n\">is</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The trick is to put the <code>clip_correct</code> into the parameters to <code>match</code>, with enough instantiations that <code>clip is</code> is found in it. But Rob is right, for more complicated things tactics will be easier.</p>",
        "id": 133918080,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536878689
    },
    {
        "content": "<p>interesting!</p>",
        "id": 133919060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536880154
    },
    {
        "content": "<p>By the way, Rob's last match example can also be written using the (rarely used) \"return\" argument of match (i.e. <code>match stuff : type with</code> syntax):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lookup</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">clip</span> <span class=\"n\">is</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">{</span> <span class=\"n\">js</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">is</span> <span class=\"n\">js</span><span class=\"o\">}</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>    <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">⟨</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"n\">clip_correct</span> <span class=\"n\">is</span> <span class=\"n\">js</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133919298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536880509
    },
    {
        "content": "<p>wow</p>",
        "id": 133919453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536880768
    },
    {
        "content": "<p>this is amazing</p>",
        "id": 133919461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536880792
    },
    {
        "content": "<p>I learn something new every day</p>",
        "id": 133919463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536880797
    },
    {
        "content": "<p>cool! I went for Johannes's solution now.</p>",
        "id": 133941546,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1536917612
    }
]