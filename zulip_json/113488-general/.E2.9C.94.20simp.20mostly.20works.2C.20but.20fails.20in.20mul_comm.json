[
    {
        "content": "<p>I'm defining a comm_ring, the ring part all goes over fine, simp unfolds the multiplication to its definition.  But once I try to prove mul_comm, simp fails and can't unfold them for some reason.  It just says \"simplify tactic failed to simplify\"  <a href=\"/user_uploads/3121/x1Ad9FsF0DbHsFCT6Hm8kQFV/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/x1Ad9FsF0DbHsFCT6Hm8kQFV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/x1Ad9FsF0DbHsFCT6Hm8kQFV/image.png\"></a></div><p>And when I try to take baby steps and add in a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>  <span class=\"bp\">=</span> <span class=\"n\">seq.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finset.sum</span> <span class=\"o\">(</span><span class=\"n\">finset.nat.antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a.f</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">b.f</span> <span class=\"n\">m.snd</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>it says failed to synthesize instance of <code>has_mul (seq M)</code>.  What's going wrong?</p>",
        "id": 266756465,
        "sender_full_name": "Sigma",
        "timestamp": 1641257524
    },
    {
        "content": "<p>can you post your code?</p>",
        "id": 266756492,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641257548
    },
    {
        "content": "<p>its spread over a couple files, but I can try</p>",
        "id": 266756545,
        "sender_full_name": "Sigma",
        "timestamp": 1641257603
    },
    {
        "content": "<p>if it's mathlib just push to a branch and we can look at it, or try to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>; we have no clue what <code>seq_ext</code> is</p>",
        "id": 266756695,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641257707
    },
    {
        "content": "<p>(else just a gist)</p>",
        "id": 266756741,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641257718
    },
    {
        "content": "<p>Try defining the mul instance before defining the ring instance. In between, have a lemma that says what multiplication of seq means</p>",
        "id": 266756874,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641257747
    },
    {
        "content": "<p>I guess what's going on is that you defined the <code>mul</code> in that definition of <code>comm_ring</code>, and so Lean is gettinf confused what you really want to do</p>",
        "id": 266756875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641257747
    },
    {
        "content": "<p>defining the mul ahead of it and a simp lemma worked, thanks</p>",
        "id": 266758467,
        "sender_full_name": "Sigma",
        "timestamp": 1641258901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"436145\">Sigma</span> has marked this topic as resolved.</p>",
        "id": 266758619,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641259033
    }
]