[
    {
        "content": "<p>I have a complicated structure (Schwartz spaces) on which I want to define scalar multiplication and I fail to find the correct typeclasses to make everything work. The issue is that in order to prove properties for the scalar multiplication I need to take the norm of an element, but<br>\nat the same time I want the typeclass system to find instances for <code>nat</code> so that I can build the algebraic structure for free.</p>\n<p>Not really <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.is_R_or_C</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">schwartz</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"c1\">-- I spare you the real condition</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">schwartz</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fun_like</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"n\">schwartz</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">ℝ</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_const_smul</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">R</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"c1\">-- Some version of this has to work</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">schwartz</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span> <span class=\"c1\">-- in this sorry I need a definition of ∥c∥</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">schwartz</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">schwartz</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">schwartz</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fun_like.coe_injective.add_comm_monoid</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">schwartz</span>\n</code></pre></div>",
        "id": 292034164,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659631442
    },
    {
        "content": "<p>I think you might be out of luck</p>",
        "id": 292036521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659632520
    },
    {
        "content": "<p>Presumably you need not only a definition of <code>∥c∥</code>, but you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_smul\">docs#norm_smul</a> to be true?</p>",
        "id": 292036590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659632542
    },
    {
        "content": "<p>Ah, I think you can get away with <code>is_scalar_tower R ℝ F</code></p>",
        "id": 292039875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659632615
    },
    {
        "content": "<p>Because then you can turn the action by <code>R</code> into an action by <code>ℝ</code></p>",
        "id": 292039896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659632626
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_one_smul\">docs#smul_one_smul</a></p>",
        "id": 292039913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659632636
    },
    {
        "content": "<p>Do you have examples in mind other than <code>R = ℝ</code>? (or maybe <code>R = complex numbers</code>, in which case <code>is_R_or_C R</code> would be enough?)</p>",
        "id": 292041154,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1659633241
    },
    {
        "content": "<p>The important examples would be <code>R = ℤ</code> and <code>R = ℕ</code>.</p>",
        "id": 292050702,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659637655
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 292051387,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659638023
    },
    {
        "content": "<p>I think this is the same reason why some lemmas about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a> are stated with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_R_or_C\">docs#is_R_or_C</a> although the correct condition would be \"the norm of a natural number is itself (as a real)\"</p>",
        "id": 292051729,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659638202
    },
    {
        "content": "<p>e.g <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_series_radius_eq_top\">docs#exp_series_radius_eq_top</a></p>",
        "id": 292051827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659638267
    },
    {
        "content": "<p>It seems that I might get away with <code>is_scalar_tower R ℝ F</code> and using <code>∥r • (1 : ℝ)∥</code>, which feels rather dirty</p>",
        "id": 292053407,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659639081
    },
    {
        "content": "<p>For <code>ℤ</code> and  <code>ℕ</code>, you don't need anything more because an additive group always has these actions for free.</p>",
        "id": 292116942,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1659684153
    },
    {
        "content": "<p>Yes but that doesn’t give you anything about the norm right ?</p>",
        "id": 292220060,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659743772
    }
]