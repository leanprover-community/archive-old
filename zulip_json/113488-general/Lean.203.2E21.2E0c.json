[
    {
        "content": "<p>It's been another month, so here's <a href=\"https://github.com/leanprover-community/lean/releases/tag/v3.21.0\">Lean 3.21.0c</a>! Thanks to <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> for their contributions (and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  for reviewing and merging their PRs)!</p>\n<p>Features:</p>\n<ul>\n<li>Simplify definition of <code>band</code> and <code>bor</code> (<a href=\"https://github.com/leanprover-community/lean/issues/466\">lean#466</a>)</li>\n<li>More advice in docstrings for <code>Exists</code>, <code>not</code>, <code>and</code>, and <code>or</code> (<a href=\"https://github.com/leanprover-community/lean/issues/296\">lean#296</a>)</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Fix typo in docstring for <code>tactic.exact</code> (<a href=\"https://github.com/leanprover-community/lean/issues/472\">lean#472</a>)</li>\n<li>Fix missing code block in <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/widget_server.md\">widget server docs</a> (<a href=\"https://github.com/leanprover-community/lean/issues/473\">lean#473</a>)</li>\n</ul>\n<p>Changes:</p>\n<ul>\n<li>Remove global notation for <code>vector.cons</code> (<a href=\"https://github.com/leanprover-community/lean/issues/471\">lean#471</a>)</li>\n</ul>\n<p>Mathlib PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/4578\">#4578</a></p>",
        "id": 212991272,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602468103
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4578\">#4578</a>, I'm slowly tearing out all the instances of <code>::</code> notation applied to vectors. Did we want to replace it with some (other) localized notation or are we happy with having a bunch of <code>vector.cons</code> everywhere?</p>",
        "id": 212995636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602474917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think most of the files I've been fixing were written by you, so let me know what your preference is.</p>",
        "id": 212995697,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602474972
    },
    {
        "content": "<p>How about a global notation <code>::ᵥ</code> or <code>:ᵥ</code>?</p>",
        "id": 212997789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602478433
    },
    {
        "content": "<p><code>vector</code> is defined in core. Where would be a good place to add <code>::ᵥ</code>?</p>",
        "id": 212998679,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602479694
    },
    {
        "content": "<p>How about <code>has_cons</code>?</p>",
        "id": 212999057,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602480276
    },
    {
        "content": "<p>No, this will break many uses of <code>list.cons</code></p>",
        "id": 213000608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> We have a <code>data.vector2</code> file for additional foundational material supplementing core's <code>data.vector</code></p>",
        "id": 213000640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482642
    },
    {
        "content": "<p>maybe it's been renamed to <code>data.vector.basic</code></p>",
        "id": 213000662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602482652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/4578\">#4578</a> passes CI. A couple of files have changed, with <code>::</code> replaced by <code>vector.cons</code>.</p>",
        "id": 213014580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602494105
    },
    {
        "content": "<p>Personally, I would be happy to kick it on the queue like this.</p>",
        "id": 213014600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602494119
    },
    {
        "content": "<p>Do you think reinstating the <code>localized</code> notation is worth it?</p>",
        "id": 213014625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602494138
    },
    {
        "content": "<p>localized isn't going to work here, because it clobbers list.cons when open</p>",
        "id": 213014790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602494252
    },
    {
        "content": "<p>Ok, then I would be a big fan of just merging the PR as is</p>",
        "id": 213014881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602494299
    },
    {
        "content": "<p>it's not uncommon to be working with <code>list.cons</code> and <code>vector.cons</code> simultaneously, they aren't that separate in their definition</p>",
        "id": 213014885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602494302
    },
    {
        "content": "<p>Instead, I suggest using a global but disambiguated notation such as <code>::ᵥ</code> (see above)</p>",
        "id": 213014935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602494341
    },
    {
        "content": "<p>Yes, I read that suggestion. But is it worth it? <code>vector.cons</code> isn't used that much at all.</p>",
        "id": 213015163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602494479
    },
    {
        "content": "<p>I think a cons like operation for a vector like type is important, although perhaps the vector like type would be better suited as <code>fin n -&gt; A</code></p>",
        "id": 213015410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602494636
    },
    {
        "content": "<p>but looking at the files that were changed, I certainly would not have wanted to deal with the lack of notation while writing them</p>",
        "id": 213015532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602494689
    },
    {
        "content": "<p>I pushed a patch using the notation</p>",
        "id": 213018605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602496500
    },
    {
        "content": "<p>I think this is now ready for review</p>",
        "id": 213020366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602497793
    },
    {
        "content": "<p>Do we want to make <code>::ᵥ</code> localized notation, so that we can also use it for <code>finvec</code> and potentially other vector-like structures?</p>",
        "id": 213076991,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602530576
    },
    {
        "content": "<p>Hmm, that might make sense</p>",
        "id": 213077935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602531181
    },
    {
        "content": "<blockquote>\n<p>Yury G. Kudryashov: How about has_cons?<br>\nMario Carneiro: No, this will break many uses of list.cons</p>\n</blockquote>\n<p>Maybe we can nevertheless have a <code>has_consv</code>?</p>",
        "id": 213078009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602531237
    },
    {
        "content": "<p>I was hoping that with a disambiguated notation there wouldn't be name contention</p>",
        "id": 213110559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602562594
    },
    {
        "content": "<p>can't finvec use a different letter?</p>",
        "id": 213110566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602562609
    },
    {
        "content": "<p>NOOOOOOOOOOOOOO!!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">linarith</span><span class=\"bp\">/</span><span class=\"n\">verification.lean</span><span class=\"o\">:</span><span class=\"mi\">162</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">hz</span> <span class=\"o\">::</span> <span class=\"bp\">↑</span><span class=\"n\">l'</span>\n  <span class=\"n\">hz</span> <span class=\"o\">::</span> <span class=\"n\">l'</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">linarith</span><span class=\"bp\">/</span><span class=\"n\">verification.lean</span><span class=\"o\">:</span><span class=\"mi\">162</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">basic</span> <span class=\"n\">overload</span> <span class=\"n\">resolution</span> <span class=\"n\">where</span> <span class=\"n\">arguments</span> <span class=\"n\">are</span> <span class=\"n\">elaborated</span> <span class=\"n\">without</span> <span class=\"n\">any</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">disambiguate</span> <span class=\"n\">overload</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">overloaded</span> <span class=\"n\">terms</span> <span class=\"n\">were</span> <span class=\"n\">applicable</span>\n  <span class=\"n\">multiset.cons</span>\n  <span class=\"n\">list.cons</span>\n</code></pre></div>",
        "id": 213115802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602570214
    },
    {
        "content": "<p>We went through all this trouble to get rid of <code>vector.cons</code> notation, and voila, there is the next conflict.</p>",
        "id": 213115809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602570240
    },
    {
        "content": "<p>Fresh from <a href=\"https://github.com/leanprover-community/mathlib/issues/4593\">#4593</a></p>",
        "id": 213115853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602570268
    },
    {
        "content": "<p>Hmm... I was wondering about the focus on <code>vector</code> because of that.  I guess I should get rid of the <code>::</code> notation in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/sym.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/sym.lean</a> as well?</p>",
        "id": 213116367,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602570951
    },
    {
        "content": "<p>yep, IIRC it was a three-way conflict with <code>list.cons</code>, <code>vector.cons</code> and <code>multiset.cons</code>, although apparently <code>sym</code> has joined the party</p>",
        "id": 213118291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602572882
    },
    {
        "content": "<p>However the other occurrences are in mathlib so it's less hard to fix those</p>",
        "id": 213118334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602572906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So, what do you suggest?</p>",
        "id": 213118398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602572983
    },
    {
        "content": "<p><code>::m</code> ?</p>",
        "id": 213118411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602572992
    },
    {
        "content": "<p>sure, why not</p>",
        "id": 213118420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602573000
    },
    {
        "content": "<p>I mean it's either that or reserve a unicode block like category theory is doing with arrows</p>",
        "id": 213118503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602573070
    },
    {
        "content": "<p>Hmpfz... I'll try to summon the courage for the refactor</p>",
        "id": 213118582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602573136
    },
    {
        "content": "<p><code>᠅</code> MONGOLIAN FOUR DOTS</p>",
        "id": 213118614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602573178
    },
    {
        "content": "<p>For multisets we could also standardize on <code>insert</code>.</p>",
        "id": 213120224,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602574676
    },
    {
        "content": "<p>(I don't know if a notation for <code>insert</code> would conflict with the set notation or not.)</p>",
        "id": 213120289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602574708
    },
    {
        "content": "<p>Is the reason there's no <code>has_cons</code> because there's no way to then make <code>::</code> a pattern? Or would overloading still be a problem somehow?</p>",
        "id": 213120318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602574734
    },
    {
        "content": "<p><code>::</code> can be a pattern, no problem.  (Even <code>x + 1</code> is a pattern, even though both <code>+</code> and <code>1</code> are type classes.)</p>",
        "id": 213125932,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602578533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you be more specific about why <code>has_cons</code> would break uses of <code>list.cons</code>?</p>",
        "id": 213129135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602580556
    },
    {
        "content": "<p>Just a hunch, because <code>list.cons</code> is so fundamental, it's bound to be syntax matched in several places</p>",
        "id": 213129238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602580596
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4600\">#4600</a> introduces notation for <code>multiset.const</code></p>",
        "id": 213129969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602581068
    },
    {
        "content": "<p>I'd be more worried about type inference breaking in more places, e.g. <code>(x::xs).length</code> might no longer work, etc.</p>",
        "id": 213129992,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602581085
    },
    {
        "content": "<p>On the other hand, this could also open some wonderful new possibilities.  If we additionally make a type class for <code>nil</code>, then the following could work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finvec</span> <span class=\"n\">ℕ</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213130396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602581344
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">,</span> <span class=\"sc\">'c'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">buffer</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213130799,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602581607
    },
    {
        "content": "<p>I am not qualified to weigh the pros and cons</p>",
        "id": 213130811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602581616
    },
    {
        "content": "<p>Another con (that we already have for <code>ℕ</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢list.cons x_hd x_tl ++ [] = list.cons x_hd x_tl</span>\n  <span class=\"c1\">-- :-(</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213131090,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602581770
    },
    {
        "content": "<p>I guess reverting the <code>::\\_m</code> notation for multiset will be rather easy. You can just global search replace. So, does it make sense to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/4600\">#4600</a> for now, and maybe revert it when the experimens with <code>has_cons</code> are positive?</p>",
        "id": 213132293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602582576
    },
    {
        "content": "<p>I like <a href=\"https://github.com/leanprover-community/mathlib/issues/4600\">#4600</a>.  The cons/nil type classes are more risky and definitely more work, it doesn't make sense to block <a href=\"https://github.com/leanprover-community/mathlib/issues/4600\">#4600</a> on it.</p>",
        "id": 213132559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602582734
    },
    {
        "content": "<p>I've fixed the whitespace around the notation</p>",
        "id": 213146869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602592563
    }
]