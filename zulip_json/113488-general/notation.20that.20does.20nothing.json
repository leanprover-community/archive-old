[
    {
        "content": "<p>I want something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">simplex_category</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span><span class=\"o\">)</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">simplex_category</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"err\">$</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>In other words, it should take whatever is between <code>[</code> and <code>]</code>, interpret that as a <code>ℕ</code>, but interpret <code>[_]</code> as an element of <code>simplex_category</code>.<br>\nIn this way, I can talk about <code>[n+1]</code> without defining addition or one for <code>simplex_category</code>. In this way I can also coerce <code>[n]</code> to <code>fin (n+1)</code> without defining that coercion for all naturals.<br>\nIn other words, I would like to make sure that <code>i : [n+1]</code> typechecks.</p>",
        "id": 148107367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542804154
    },
    {
        "content": "<p>Your snippet doesn't work?</p>",
        "id": 148135059,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542831718
    },
    {
        "content": "<p>Isn't this overloaded from <code>list</code></p>",
        "id": 148135146,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542831809
    },
    {
        "content": "<p>Use a different type of brackets?</p>",
        "id": 148135157,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542831829
    },
    {
        "content": "<p>Instead of using <code>id</code>, try using:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_brackets</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">my_brackets</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 148135163,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542831837
    },
    {
        "content": "<p>Yes, that's also true</p>",
        "id": 148135203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542831846
    },
    {
        "content": "<p>A lot of brackets are already taken</p>",
        "id": 148135220,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542831880
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">simplex_category</span>\n<span class=\"bp\">|</span> <span class=\"n\">from_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">simplex_category</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simplex_category</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">from_nat</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">simplex_category</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simplex_category</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"err\">$</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"err\">Δ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"err\">Δ</span><span class=\"bp\">;</span> <span class=\"n\">unfold_coes</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">simplex_category</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"err\">Δ</span> <span class=\"err\">Δ&#39;</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"bp\">→</span> <span class=\"err\">Δ&#39;</span> <span class=\"bp\">//</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">monotone_id</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>It seems to work as intended. It seems like a bit of a trick to define and inductive type that is equivalent to <code>nat</code>, but whatever.</p>",
        "id": 148135866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542832653
    },
    {
        "content": "<p>And I definitely want <code>[n]</code> notation. It's just silly that the notation for lists isn't local.</p>",
        "id": 148135918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542832683
    },
    {
        "content": "<p>Making copies of inductive types is not uncommon. If you want to do congruence mod n on the integers, you run into problems because equivalence relations are a class but you want more than one equivalence relation on the integers. You can fix it by making these fake copies.</p>",
        "id": 148136538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542833416
    }
]