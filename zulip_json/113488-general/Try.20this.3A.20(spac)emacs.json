[
    {
        "content": "<p>Is there an easy way to get a key combo in (spac)emacs that will replace <code>tidy?</code> or <code>squeeze_simp</code> or <code>library_search</code> by the output of <code>Try this:</code>?</p>",
        "id": 224056218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611675408
    },
    {
        "content": "<p>my hack is to just record an ad-hoc keyboard macro</p>",
        "id": 224057609,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611675950
    },
    {
        "content": "<p>It would be nice to push something to the spacemacs layer for lean. But I've only been using spacemacs for ~6 days... so I'm not really an expert yet.</p>",
        "id": 224058912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611676395
    },
    {
        "content": "<p>pinging our guru <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, who has definitely thought about this at some point</p>",
        "id": 224062801,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611677781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Are you moving over to the dark side?</p>",
        "id": 224064526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611678456
    },
    {
        "content": "<p>I have a script that does that in my init file. I can move it to the <code>lean-mode</code> community contributions.</p>",
        "id": 224064747,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611678546
    },
    {
        "content": "<p>Other things I need to figure out: currently I need to leave insert mode and push 3 buttons to get an autocomplete popup. I would like to just have it show up automatically and filter results as I type. Like in VScode</p>",
        "id": 224069007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611680316
    },
    {
        "content": "<p>That definitely worked for me in Lean 3 without leaving insert mode using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">global</span><span class=\"bp\">-</span><span class=\"n\">set</span><span class=\"bp\">-</span><span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">kbd</span> <span class=\"s2\">\"C-SPC\"</span><span class=\"o\">)</span> <span class=\"bp\">#'</span><span class=\"n\">company</span><span class=\"bp\">-</span><span class=\"n\">complete</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224070190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611680720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this.3A.20(spac)emacs/near/224069007\">said</a>:</p>\n<blockquote>\n<p>Other things I need to figure out: currently I need to leave insert mode and push 3 buttons to get an autocomplete popup. I would like to just have it show up automatically and filter results as I type. Like in VScode</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I was using vanilla emacs with company-complete, etc. for a while. I recently switched to <code>doom-emacs</code> and my life has been much easier. I've never seriously used spacemacs, but as far as I understand, doom-emacs is more minimal than spacemacs, hence much faster in many respects.</p>",
        "id": 224070713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611680951
    },
    {
        "content": "<p>In particular the automatic lean setup in doom emacs has an automatic popup that you're looking for.</p>",
        "id": 224070752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611680978
    },
    {
        "content": "<p>I guess I can dig a bit and try to find what package doom emacs uses for this, but if you don't actually care about spacemacs you might want to check out doom emacs as well.</p>",
        "id": 224070989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611681066
    },
    {
        "content": "<p>Hmmm... looks like it's company lean with some nonstandard configuration. See e.g.<br>\n<a href=\"https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/lean/config.el\">https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/lean/config.el</a><br>\n<a href=\"https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/config.el\">https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/config.el</a></p>",
        "id": 224071703,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611681364
    },
    {
        "content": "<p>Thanks, I'll try to look into this asap</p>",
        "id": 224081939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611685694
    },
    {
        "content": "<p>Is doom emacs also vim-like? I kind of like spacemacs so far.</p>",
        "id": 224081977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611685712
    },
    {
        "content": "<p>Yes, the default in doom emacs is evil-mode</p>",
        "id": 224083367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611686327
    },
    {
        "content": "<p>As it should be.</p>",
        "id": 224083376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611686332
    },
    {
        "content": "<p>I just hacked together something for the Lean Next Error window that turns \"Try this:\" into a link that you can click/press enter on to copy the suggestion into the buffer.  (Disclaimer: very lightly tested.)</p>\n<p>This replaces a function in <code>lean-flycheck.el</code> and gives a couple extra definitions:</p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">define-button-type</span> <span class=\"ss\">'lean-suggestion-button</span>\n  <span class=\"ss\">'follow-link</span> <span class=\"no\">t</span>\n  <span class=\"ss\">'action</span> <span class=\"ss\">'lean-copy-try-this</span>\n  <span class=\"ss\">'help-echo</span> <span class=\"s\">\"mouse-1: copy suggestion into buffer\"</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-copy-try-this</span> <span class=\"p\">(</span><span class=\"nv\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">interactive</span> <span class=\"s\">\"e\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">window</span> <span class=\"p\">(</span><span class=\"nv\">posn-window</span> <span class=\"p\">(</span><span class=\"nv\">event-end</span> <span class=\"nv\">event</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nv\">pos</span> <span class=\"p\">(</span><span class=\"nv\">posn-point</span> <span class=\"p\">(</span><span class=\"nv\">event-end</span> <span class=\"nv\">event</span><span class=\"p\">))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">with-current-buffer</span> <span class=\"p\">(</span><span class=\"nf\">window-buffer</span> <span class=\"nv\">window</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">sugg</span> <span class=\"p\">(</span><span class=\"k\">or</span> <span class=\"p\">(</span><span class=\"nf\">get-pos-property</span> <span class=\"nv\">pos</span> <span class=\"ss\">'lean-suggestion</span><span class=\"p\">)</span>\n                      <span class=\"c1\">; don't understand why this is needed:</span>\n                      <span class=\"p\">(</span><span class=\"nf\">get-pos-property</span> <span class=\"p\">(</span><span class=\"nf\">1+</span> <span class=\"nv\">pos</span><span class=\"p\">)</span> <span class=\"ss\">'lean-suggestion</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">buff</span> <span class=\"p\">(</span><span class=\"nf\">get-file-buffer</span> <span class=\"p\">(</span><span class=\"nv\">alist-get</span> <span class=\"ss\">'filename</span> <span class=\"nv\">sugg</span><span class=\"p\">))))</span>\n          <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">buff</span>\n            <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"p\">(</span><span class=\"nf\">buffer-name</span> <span class=\"nv\">buff</span><span class=\"p\">))</span>\n            <span class=\"p\">(</span><span class=\"nb\">with-current-buffer</span> <span class=\"nv\">buff</span>\n              <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nv\">alist-get</span> <span class=\"ss\">'pos</span> <span class=\"nv\">sugg</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"nf\">princ</span> <span class=\"p\">(</span><span class=\"nv\">alist-get</span> <span class=\"ss\">'suggest</span> <span class=\"nv\">sugg</span><span class=\"p\">)</span> <span class=\"nv\">buff</span><span class=\"p\">)</span>\n              <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">\",\"</span><span class=\"p\">))))))))</span>\n\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-next-error--handler</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">lean-info-buffer-active</span> <span class=\"nv\">lean-next-error-buffer-name</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">deactivate-mark</span><span class=\"p\">)</span> <span class=\"c1\">; keep transient mark</span>\n          <span class=\"p\">(</span><span class=\"nv\">errors</span> <span class=\"p\">(</span><span class=\"k\">or</span>\n                   <span class=\"c1\">;; prefer error of current position, if any</span>\n                   <span class=\"p\">(</span><span class=\"nv\">flycheck-overlay-errors-at</span> <span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">))</span>\n                   <span class=\"c1\">;; try errors in current line next</span>\n                   <span class=\"p\">(</span><span class=\"nf\">sort</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-overlay-errors-in</span> <span class=\"p\">(</span><span class=\"nf\">line-beginning-position</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">line-end-position</span><span class=\"p\">))</span>\n                         <span class=\"nf\">#'</span><span class=\"nv\">flycheck-error-&lt;</span><span class=\"p\">)</span>\n                   <span class=\"c1\">;; fall back to next error position</span>\n                   <span class=\"p\">(</span><span class=\"nv\">-if-let*</span> <span class=\"p\">((</span><span class=\"nv\">pos</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-next-error-pos</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n                       <span class=\"p\">(</span><span class=\"nv\">flycheck-overlay-errors-at</span> <span class=\"nv\">pos</span><span class=\"p\">)))))</span>\n      <span class=\"p\">(</span><span class=\"nv\">lean-with-info-output-to-buffer</span> <span class=\"nv\">lean-next-error-buffer-name</span>\n       <span class=\"p\">(</span><span class=\"nb\">dolist</span> <span class=\"p\">(</span><span class=\"nv\">e</span> <span class=\"nv\">errors</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"nf\">princ</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">\"%d:%d: \"</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-line</span> <span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-column</span> <span class=\"nv\">e</span><span class=\"p\">)))</span>\n         <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nf\">princ</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-message</span> <span class=\"nv\">e</span><span class=\"p\">))</span>\n           <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nv\">string-prefix-p</span> <span class=\"s\">\"Try this:\"</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-message</span> <span class=\"nv\">e</span><span class=\"p\">))</span>\n             <span class=\"p\">(</span><span class=\"nv\">make-button</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nf\">+</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nf\">length</span> <span class=\"s\">\"Try this:\"</span><span class=\"p\">))</span>\n                          <span class=\"nb\">:type</span> <span class=\"ss\">'lean-suggestion-button</span>\n                          <span class=\"ss\">'lean-suggestion</span>\n                          <span class=\"p\">(</span><span class=\"nf\">list</span> <span class=\"p\">(</span><span class=\"nf\">cons</span> <span class=\"ss\">'filename</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-filename</span> <span class=\"nv\">e</span><span class=\"p\">))</span>\n                                <span class=\"p\">(</span><span class=\"nf\">cons</span> <span class=\"ss\">'pos</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-pos</span> <span class=\"nv\">e</span><span class=\"p\">))</span>\n                                <span class=\"p\">(</span><span class=\"nf\">cons</span> <span class=\"ss\">'suggest</span>\n                                      <span class=\"p\">(</span><span class=\"nv\">string-trim</span>\n                                       <span class=\"p\">(</span><span class=\"nf\">substring</span> <span class=\"p\">(</span><span class=\"nv\">flycheck-error-message</span> <span class=\"nv\">e</span><span class=\"p\">)</span>\n                                                  <span class=\"p\">(</span><span class=\"nf\">length</span> <span class=\"s\">\"Try this: \"</span><span class=\"p\">))))))))</span>\n         <span class=\"p\">(</span><span class=\"nf\">princ</span> <span class=\"s\">\"\\n\\n\"</span><span class=\"p\">))</span>\n       <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"nv\">flycheck-current-errors</span>\n         <span class=\"p\">(</span><span class=\"nf\">princ</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">\"(%d more messages above...)\"</span> <span class=\"p\">(</span><span class=\"nf\">length</span> <span class=\"nv\">flycheck-current-errors</span><span class=\"p\">))))))))</span>\n</code></pre></div>",
        "id": 224095374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611691697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this.3A.20(spac)emacs/near/224083376\">said</a>:</p>\n<blockquote>\n<p>As it should be.</p>\n</blockquote>\n<p>Are you using a constructive modal logic here? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 224095489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611691747
    },
    {
        "content": "<p>The code just inserts the suggestion (with comma) right before the tactic that generated the suggestion, and it doesn't try to remove that tactic -- I wasn't sure of a reliable way to do this.</p>",
        "id": 224097199,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611692492
    },
    {
        "content": "<p>Ooh, another problem with spacemacs is that I have no idea where I should paste such blobs of code into my config file...</p>",
        "id": 224099033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611693356
    },
    {
        "content": "<p>Same for the 1-liner that Sebastian share upstairs...</p>",
        "id": 224099093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611693370
    },
    {
        "content": "<p>But once Kyle's code is tested <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> more, I wouldn't mind if such stuff were added to the default lean packages</p>",
        "id": 224099161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611693416
    },
    {
        "content": "<p>You can test things out by creating a new .el file anywhere and then <code>C-x C-e</code> at the ends of expressions to evaluate them (or <code>C-M-x</code> to evaluate a whole <code>defun</code> when your cursor is somewhere within it).</p>",
        "id": 224099712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611693708
    },
    {
        "content": "<p>But for the config file, I think this suggestion code would just need to be after <code>(require 'lean-mode)</code> and <code>(require 'flycheck)</code>, but I'm not completely sure.  Sebastian's code probably can go anywhere.</p>",
        "id": 224100285,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611693953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nI don't really know how spacemacs configs work. In doom-emacs, I put configuration for packages in a <code>(use-package foo ...)</code> declaration similar to the examples in the readme here: <a href=\"https://github.com/jwiegley/use-package\">https://github.com/jwiegley/use-package</a> <br>\n(This all takes place in a <code>config.el</code> file in a specific folder)</p>\n<p>This might be how spacemacs does things too... not sure.</p>",
        "id": 224102066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611694747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this.3A.20(spac)emacs/near/224097199\">said</a>:</p>\n<blockquote>\n<p>The code just inserts the suggestion (with comma) right before the tactic that generated the suggestion, and it doesn't try to remove that tactic -- I wasn't sure of a reliable way to do this.</p>\n</blockquote>\n<p>I just implemented my own hacky version of this a few weeks ago and what I did was just go with delete the word under the cursor and nothing fancier</p>",
        "id": 224126314,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611708565
    },
    {
        "content": "<p>The vscode implementation has some slightly lengthy heuristic it uses</p>",
        "id": 224126326,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611708578
    },
    {
        "content": "<p>I considered that, but I frequently do <code>squeeze_simp [foo1, foo2]</code> and it wouldn't be good to have it automatically introduce a syntax error</p>",
        "id": 224128491,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611710228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Configuration usually goes into your <code>.spacemacs</code>, specifically into the body of the function <code>dotspacemacs/user-config</code> there. This function is executed after Spacemacs has done its thing and loaded everything it wants to load.</p>",
        "id": 224213092,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1611767221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> would you mind pushing your functions to the lean mode repo?</p>",
        "id": 224442969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611909663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this.3A.20(spac)emacs/near/224071703\">said</a>:</p>\n<blockquote>\n<p>Hmmm... looks like it's company lean with some nonstandard configuration. See e.g.<br>\n<a href=\"https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/lean/config.el\">https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/lean/config.el</a><br>\n<a href=\"https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/config.el\">https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/config.el</a></p>\n</blockquote>\n<p>Also, whoever effectively maintains the spacemaces layer... <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> seems like cool-to-have.</p>",
        "id": 224443042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611909719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">dotspacemacs/user-config</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Configuration for user code:</span>\n<span class=\"s\">This function is called at the very end of Spacemacs startup, after layer</span>\n<span class=\"s\">configuration.</span>\n<span class=\"s\">Put your configuration code here, except for variables that should be set</span>\n<span class=\"s\">before packages are loaded.\"</span>\n  <span class=\"c1\">;; make treemacs hide .gitignore files</span>\n  <span class=\"p\">(</span><span class=\"nb\">with-eval-after-load</span> <span class=\"ss\">'treemacs</span>\n    <span class=\"p\">(</span><span class=\"nv\">add-to-list</span> <span class=\"ss\">'treemacs-pre-file-insert-predicates</span> <span class=\"nf\">#'</span><span class=\"nv\">treemacs-is-file-git-ignored?</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"c1\">;; easy access to completion</span>\n  <span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-return\"</span><span class=\"p\">)</span> <span class=\"nf\">#'</span><span class=\"nv\">company-complete</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n</code></pre></div>\n<p>The treemacs blob has the intended effect, but <code>&lt;C-return&gt; is undefined</code></p>",
        "id": 224444690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611910952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Try.20this.3A.20(spac)emacs/near/224442969\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> would you mind pushing your functions to the lean mode repo?</p>\n</blockquote>\n<p>I'll make a PR sometime soon, but in the meantime here's my branch: <a href=\"https://github.com/kmill/lean-mode/tree/try-this\">https://github.com/kmill/lean-mode/tree/try-this</a></p>",
        "id": 224452513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611915924
    }
]