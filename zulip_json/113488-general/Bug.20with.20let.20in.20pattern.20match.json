[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> came across some strange behavior, which we shortened to the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"k\">in</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">--| (k+1) := if k = k then tt else ff -- fails</span>\n<span class=\"c1\">--| (k+1) := if h : k = k then tt else ff -- succeeds</span>\n</pre></div>\n\n\n<p>The <code>let</code> in the first case seems to prevent type class resolution from finding <code>decidable (k = k)</code> in the second. Weirdly, if you use a dependent if and name the <code>k = k</code> hypothesis, it succeeds. Does anyone recognize this as a known bug? Or is it something new?</p>",
        "id": 169863205,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562588284
    },
    {
        "content": "<p>That <code>let</code> is very weird though, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">hello_world</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"k\">in</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 169863525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562588570
    },
    {
        "content": "<p>It's not so weird, and the failure also happens with <code>let (a, b) := (tt, tt)</code>. Does <code>let _ := ...</code> destruct the rhs? Maybe it has to be a pattern matching <code>let</code>.</p>",
        "id": 169863868,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562588940
    },
    {
        "content": "<p>(Yes, it seems like <code>let _ := ...</code> does destruct the rhs.)</p>",
        "id": 169864021,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562589103
    },
    {
        "content": "<p>hm, this looks hard to diagnose without jumping into the C++</p>",
        "id": 169864208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562589278
    },
    {
        "content": "<p>Also <code>to_bool (k = k)</code> works, even though it's the same thing as <code>k = k</code>, so the error must happen before the lean magic that triggers this</p>",
        "id": 169864407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562589456
    },
    {
        "content": "<p>It's not exactly high priority. I just thought I knew all the big Lean 3 bugs, but this one doesn't look familiar.</p>",
        "id": 169864408,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562589456
    },
    {
        "content": "<p>I agree, I haven't seen this one</p>",
        "id": 169864420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562589474
    },
    {
        "content": "<p>I'll open an issue at community Lean. Not expecting anyone to fix it, just to keep track of it.</p>",
        "id": 169864786,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562589765
    },
    {
        "content": "<p>Maybe we should ping Sebastian so that it also goes into his private list, in case it's still Lean 4 relevant?</p>",
        "id": 169864910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562589852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> FYI, if you think this is relevant!</p>",
        "id": 169865235,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562590175
    }
]