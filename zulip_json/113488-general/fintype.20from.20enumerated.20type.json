[
    {
        "content": "<p>Is there a canonical idiom for making a <code>fintype</code> from an enumerated type? This is what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">c</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">of_fin</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>     <span class=\"o\">:=</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_surjective</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">of_fin</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I actually want to do something a little more general, namely an inductive type with nonrecursive constructors with arguments from other fintypes. It would be an interesting metaprogramming exercise to build the instance automatically, but not hard to build a surjection by hand in the instance I need.</p>",
        "id": 166572362,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1558872481
    },
    {
        "content": "<p>I don't think there is any general solution better than your example</p>",
        "id": 166574883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558876834
    },
    {
        "content": "<p>The general technique would be to build an equiv to a sum of products of unit or other fintypes</p>",
        "id": 166574903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558876895
    }
]