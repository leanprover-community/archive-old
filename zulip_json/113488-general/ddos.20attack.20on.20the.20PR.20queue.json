[
    {
        "content": "<p>Help! Someone seems to be generating a new PR about every 3 minutes... what's going on!</p>",
        "id": 237309022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620128856
    },
    {
        "content": "<p>(Answer: <a href=\"#narrow/stream/144837-PR-reviews/topic/homology.20redesign.20and.20derived.20functors\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/homology.20redesign.20and.20derived.20functors</a>)</p>",
        "id": 237319628,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620133464
    },
    {
        "content": "<p>By the way, due to the massive <a href=\"https://github.com/leanprover-community/mathlib/actions.html?page=1&amp;query=is%3Aqueued&amp;workflow_file_name=build.yml\">GitHub Actions queue</a> (distinct from <a href=\"https://app.bors.tech/repositories/24316\">the bors queue</a>), the <code>staging</code> job for <a href=\"https://github.com/leanprover-community/mathlib/issues/7268\">#7268</a> timed out, so I put it back on the queue.</p>\n<p>I suspect the same thing may happen a few more times, so if anyone wants to be a good citizen, please cancel any \"redundant\" workflows and possibly consider waiting to push your commits until the number of queued builds is 0.</p>",
        "id": 237319693,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620133493
    },
    {
        "content": "<p>Keep an eye on <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/810108842\">this <code>staging</code> job</a>; if it remains queued for longer than about 1.5 hours there's a high chance that it will time out, even if it would otherwise build successfully.</p>",
        "id": 237320297,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620133728
    },
    {
        "content": "<p>(I've just gone through and canceled a bunch of workflows on outdated commits.)</p>",
        "id": 237320562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620133828
    },
    {
        "content": "<p>Can we switch to a more aggressive canceling by default?</p>",
        "id": 237320662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620133872
    },
    {
        "content": "<p>I don't know what \"cancelling redundant workflows\" even means. Does this just mean \"don't push to any mathlib branches for a while if you can help it\"?</p>",
        "id": 237320775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620133917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/ddos.20attack.20on.20the.20PR.20queue/near/237320662\">said</a>:</p>\n<blockquote>\n<p>Can we switch to a more aggressive canceling by default?</p>\n</blockquote>\n<p>There might be some GitHub actions which do it; I don't know of any built-in options that let us control this.</p>",
        "id": 237320926,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620133966
    },
    {
        "content": "<p>Something like: if CI has run &lt; 30 minutes, and a new commit is pushed, just cancel it.</p>",
        "id": 237321014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134011
    },
    {
        "content": "<p>In particular, if someone pushed 5 times in a row, the first 4 pushes will not really use up CI.</p>",
        "id": 237321069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/ddos.20attack.20on.20the.20PR.20queue/near/237320775\">said</a>:</p>\n<blockquote>\n<p>I don't know what \"cancelling redundant workflows\" even means. Does this just mean \"don't push to any mathlib branches for a while if you can help it\"?</p>\n</blockquote>\n<p>Basically I went through the list of queued and running CI jobs and if I saw multiple \"continuous integration\" jobs from the same branch, I canceled all the older ones.</p>\n<p>Not pushing to mathlib branches for a while will help; like I said, keep an eye on <a href=\"https://github.com/leanprover-community/mathlib/actions.html?page=1&amp;query=is%3Aqueued&amp;workflow_file_name=build.yml\">this page</a>.</p>",
        "id": 237321154,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620134059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> experimented with something like this before; in particular, there are a few jobs under <a href=\"https://github.com/leanprover-community/mathlib/actions/workflows/cancel.yml?query=\">\"cancel CI for obsolete pushes\"</a>. I don't remember the details though.</p>",
        "id": 237321369,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620134161
    },
    {
        "content": "<p>Looks like the PR was <a href=\"https://github.com/leanprover-community/mathlib/issues/2235\">#2235</a>. Maybe time to revive it?</p>",
        "id": 237321512,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620134210
    },
    {
        "content": "<p>I thought it was a good idea at the time: I'm definitely a culprit when it comes to making pushes on a single branch in quick succession.</p>",
        "id": 237321748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620134285
    },
    {
        "content": "<p>Right, but doing multiple pushes in a row should be supported.</p>",
        "id": 237321955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134370
    },
    {
        "content": "<p>At the moment we are relying on the elves to silently and smoothly keep the queue clean and CI running. (Thanks soooo much Bryan! You're doing an amazing invisible job!) If we can make this job a bit easier using more automation that would be great.</p>",
        "id": 237322167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134439
    },
    {
        "content": "<p>I have been creating a lot of PRs touching files low in the import hierarchy, sorry for any delays caused by the long recompilation times! I'll wait for a bit before continuing.</p>",
        "id": 237323241,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620134820
    },
    {
        "content": "<p>Kan academy hosts an action that runs in javascript and hence should be very lightweight: <a href=\"https://github.com/marketplace/actions/pull-request-workflow-cancel\">https://github.com/marketplace/actions/pull-request-workflow-cancel</a></p>",
        "id": 237323259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134826
    },
    {
        "content": "<p>I don't know if it is flexible enough for what we want.</p>",
        "id": 237323314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134852
    },
    {
        "content": "<p>This one is very popular: <a href=\"https://github.com/marketplace/actions/cancel-workflow-action\">https://github.com/marketplace/actions/cancel-workflow-action</a></p>",
        "id": 237324534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620135318
    },
    {
        "content": "<p>Increasing the bors timeout somehow (or getting it to count only actual running time) would also keep a long queue from disrupting bors. I'm not sure if I can make a good case for this in the bors repo issues though, as the waiting time needed could be very, very long (especially if the queue keeps growing), and allowing for super-long build times is probably not a good idea for the public bors instance that we're using.</p>",
        "id": 237325298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620135605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> do you think that the new workflows that add <code>delegated</code> and such are eating up precious time?</p>",
        "id": 237325753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620135763
    },
    {
        "content": "<p>Or are those not a problem at all?</p>",
        "id": 237325764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620135769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/ddos.20attack.20on.20the.20PR.20queue/near/237325753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> do you think that the new workflows that add <code>delegated</code> and such are eating up precious time?</p>\n</blockquote>\n<p>No, those only run for a few seconds, so I don't think they're a big deal. Our limit is <a href=\"https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits\">20 concurrent jobs</a> (though it sometimes looks like we're allowed more than that?), so the queue starts to grow once we have more than about 20 long-running jobs (e.g. build, lint, or test).</p>",
        "id": 237326614,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620135985
    },
    {
        "content": "<p>And bors is using the same budget of 20 jobs, right?</p>",
        "id": 237326845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620136029
    },
    {
        "content": "<p>Well, the <code>staging</code> job does. (The processes that actually control bors and pushes commits, posts comments, closes PRs, etc. runs outside of our budget)</p>",
        "id": 237327197,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620136143
    },
    {
        "content": "<p>If we ran <code>staging</code> on a self-hosted runner (or in a different repo, but that seems awkward) that would let some steam off, right?</p>",
        "id": 237327473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620136221
    },
    {
        "content": "<p>Yes, that would also solve the problem of bors timing out.</p>",
        "id": 237327736,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620136313
    },
    {
        "content": "<p>But is it easy to isolate <code>staging</code> from the rest of CI?</p>",
        "id": 237327848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620136342
    },
    {
        "content": "<p>Alternatively, if github would allow us to schedule certain workflow / branches to have higher prio, that would also be helpful</p>",
        "id": 237328270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620136483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/ddos.20attack.20on.20the.20PR.20queue/near/237327848\">said</a>:</p>\n<blockquote>\n<p>But is it easy to isolate <code>staging</code> from the rest of CI?</p>\n</blockquote>\n<p>From a casual glance at <a href=\"https://docs.github.com/en/actions/hosting-your-own-runners/using-self-hosted-runners-in-a-workflow\">the docs</a> it looks like we might have to have 2 copies of the workflow file, one that only runs on <code>staging</code> and which calls the self-hosted runner and one for everything else.</p>",
        "id": 237329540,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620136892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> can we save some time by somehow caching the elan and python installation steps? Especially because this python install is done several jobs per workflow</p>",
        "id": 237330890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620137379
    },
    {
        "content": "<p>I have no idea how much time this \"overhead\" is taking</p>",
        "id": 237331112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620137466
    },
    {
        "content": "<p>Those don't take much time at all (probably less than 10 seconds total per workflow).</p>",
        "id": 237331212,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620137518
    },
    {
        "content": "<p>Hmm yes, I see. That isn't worth looking into.</p>",
        "id": 237331482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620137625
    },
    {
        "content": "<p>It's really annoying that we can't give some hints to the Github Actions scheduler.</p>",
        "id": 237333289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620138349
    },
    {
        "content": "<p>I have a branch for which I don't actually need or want CI to run. Can I disable CI on that branch?</p>",
        "id": 237334817,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620138859
    },
    {
        "content": "<p>If you don't need CI on the branch, you may as well develop it in a fork rather than in mathlib itself</p>",
        "id": 237334924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620138907
    },
    {
        "content": "<p>The only reason that everyone does their development in mathlib rather than forks (which is quite unusual for github) is because of how the CI caching is set up</p>",
        "id": 237334998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620138934
    },
    {
        "content": "<p>Yeah I thought so too. Let me do that.</p>",
        "id": 237335130,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620138974
    },
    {
        "content": "<p>bors seems stuck in a timeout loop. It's able to build and lint just fine, but then <code>leanchecker</code> pushes it over the edge</p>",
        "id": 237473473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620211091
    },
    {
        "content": "<p>What happened with out plans to switch to another checker?</p>",
        "id": 237474878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620211893
    },
    {
        "content": "<p>Update: as of <a href=\"https://github.com/leanprover-community/mathlib/issues/7532\">#7532</a>, <code>master</code> now uses <code>trepplein</code> instead of <code>leanchecker</code>. So if you have any older PRs, merging <code>master</code> into them will make the <code>test</code> job run about 40 minutes faster!</p>",
        "id": 237837474,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620399882
    }
]