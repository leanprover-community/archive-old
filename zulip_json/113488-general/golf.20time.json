[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 126431532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526069375
    },
    {
        "content": "<p>Not very pleased with my effort. I certainly lose points for stability</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">le_iff_eq_or_lt</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm_iff</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126433149,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526071666
    },
    {
        "content": "<p>More stable version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">singleton_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_gt</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126433411,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526071977
    },
    {
        "content": "<p>It's this sort of question that gives Lean a bad name amongst mathematicians.</p>",
        "id": 126435105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526074410
    },
    {
        "content": "<p>\"it's obvious\"? ;-)</p>",
        "id": 126435106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526074418
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {n : ℕ} : range (n+1) \\ range n = {n} :=\next.2 $ by simp [-range_succ, nat.lt_succ_iff, le_antisymm_iff]\n</pre></div>",
        "id": 126440450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526082941
    },
    {
        "content": "<p>i.e. \"it's obvious\"</p>",
        "id": 126440496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526082967
    },
    {
        "content": "<p>:-)</p>",
        "id": 126455763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526117660
    },
    {
        "content": "<p>I'm not so sure that one of my first year undergraduates would find that proof obvious to spot :-)</p>",
        "id": 126455765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526117684
    },
    {
        "content": "<p>When do we get <code>omega</code> or a Presburger arithmetic solver?</p>",
        "id": 126465086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526139282
    },
    {
        "content": "<blockquote>\n<p>When do we get <code>omega</code> or a Presburger arithmetic solver?</p>\n</blockquote>\n<p>You're not the first person to ask this in the chat, hah. The answer is: whenever a motivated contributer decides to port the Coq implementation to Lean. Leo and the other developers are not interested in doing this work as it is non-trivial and not academically interesting, so it can't lead to something publishable.</p>",
        "id": 126521067,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526271465
    },
    {
        "content": "<p>I think it also has dubious merit, I'm not sure that we actually have goals that fit the pattern very often to begin with</p>",
        "id": 126521751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526273029
    },
    {
        "content": "<p>That said, I know that Seul Baek (my fellow CMU PhD) has implemented Cooper's algorithm for linear arithmetic over integers, and maybe he will pop in here someday to show it off</p>",
        "id": 126521812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526273116
    },
    {
        "content": "<p>Well, in defense of the people who really want omega, it's not so much that many goals may need a Presburger arith solver. However, when you do have a problem of that type, a tactic that solves them in one tactic invocation is convenient. It has a well-defined scope and application, and is not heuristics-based, so it will always succeed if the problem is appropriate.</p>",
        "id": 126523011,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526275913
    },
    {
        "content": "<p>In Software Foundations Vol 3, which discusses verified data structures, the author uses omega quite frequently</p>",
        "id": 126523100,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526276047
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> points out, this question (porting omega) does come up again from time to time. Can someone give me an idea of how much work this would actually be? Obviously I am in no position to do it because I only know epsilon about tactics and have no time anyway, and perhaps one should at least wait until Lean 4 before embarking on such a project, but in the long term is it the sort of thing one can get a Masters student to do for a project, for example? I just have no  idea.</p>",
        "id": 126534010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526298479
    },
    {
        "content": "<p>Well, looking at the Coq source, it seems omega is around ~3500 lines of mixed ML and Ltac. For new work, you can probably estimate ~30 lines of finished, complete code / day, leading to a time estimate of ~120 days of full-time work. However, this isn't a completely new rewrite, but a translation of existing code, so maybe handwave and cut the time required in half... so about two months of work.</p>",
        "id": 126546657,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526316686
    },
    {
        "content": "<p>I would be interested in feedback on the definition of <code>\\sigma</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">less_than_or_equal</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">σ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">raise_fin</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">raise_fin</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">apos</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">apos</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred_le_pred</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126582480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526374847
    },
    {
        "content": "<p>You could skip the whole <code>linear_order</code> business by writing the if condition as <code>a.1 &lt;= i.1</code></p>",
        "id": 126582865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526375504
    },
    {
        "content": "<p>Yes, that is true... but I want to prove stuff about monotone functions <code>fin n \\to fin m</code></p>",
        "id": 126582980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526375671
    },
    {
        "content": "<p>So I need it when I start using <code>\\sigma</code></p>",
        "id": 126582982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526375685
    },
    {
        "content": "<p>golfed:</p>\n<div class=\"codehilite\"><pre><span></span>def σ {n : ℕ} (i : fin n) (a : fin (n+1)) : fin n :=\n⟨if a.1 ≤ i.1 then a else nat.pred a,\n  begin\n    by_cases a.1 ≤ i.1; simp [h],\n    { exact lt_of_le_of_lt h i.2 },\n    { exact (nat.sub_lt_right_iff_lt_add\n        (lt_of_le_of_lt (nat.zero_le i.1) (not_le.1 h))).2 a.2 },\n  end⟩\n</pre></div>\n\n\n<p>what's with the mysterious name?</p>",
        "id": 126583130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526375999
    },
    {
        "content": "<p>Well, <a href=\"https://en.wikipedia.org/wiki/Simplicial_set#Face_and_degeneracy_maps\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Simplicial_set#Face_and_degeneracy_maps\">https://en.wikipedia.org/wiki/Simplicial_set#Face_and_degeneracy_maps</a></p>",
        "id": 126583282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526376180
    },
    {
        "content": "<p>And thanks for golfing!!</p>",
        "id": 126583289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526376194
    },
    {
        "content": "<p>Nice idea to do simplicial sets!</p>",
        "id": 126584504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526378349
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 126586836,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526382984
    },
    {
        "content": "<p>Oh, never mind.</p>",
        "id": 126586921,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526383199
    },
    {
        "content": "<p>Here's my adaptation of Mario's version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">σ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"k\">then</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"bp\">⟩</span>\n<span class=\"k\">else</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_right_iff_lt_add</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"o\">(</span><span class=\"n\">not_le</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126587382,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384036
    },
    {
        "content": "<p>That doesn't parse, right? The <code>h</code> in the <code>then</code>-part is undefined.</p>",
        "id": 126587558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526384343
    },
    {
        "content": "<p>1. I find using the structure field names (<code>val</code>, <code>is_lt</code>) and <code>mpr</code> to be better documentation than <code>.1</code> and <code>.2</code>; I usually reserve the latter for “obvious” uses such as <code>and</code>,  <code>sigma</code>, etc.<br>\n2. The use of tactics in a definition momentarily confused me into thinking it was a theorem.<br>\n3. The duplicate casing with both <code>if</code> and <code>by_cases</code> seems redundant to me.</p>",
        "id": 126587563,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384357
    },
    {
        "content": "<blockquote>\n<p>That doesn't parse, right? The <code>h</code> in the <code>then</code>-part is undefined.</p>\n</blockquote>\n<p>It does parse in my Lean. I don't think it's been changed.</p>",
        "id": 126587572,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384390
    },
    {
        "content": "<p>Aah, sorry, I didn't copy your <code>h</code> from the line above...</p>",
        "id": 126587617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526384421
    },
    {
        "content": "<p><code>if then else</code> is notation for <code>ite</code> and <code>if h : p then else</code> is notation for <code>dite</code>.</p>",
        "id": 126587624,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384447
    },
    {
        "content": "<p>Also, I could be wrong, but I think you might find it easier to work with the definition without tactics in it. At the very least, you know more clearly what you have to prove if you unfold it.</p>",
        "id": 126587806,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384793
    },
    {
        "content": "<p>Along the same lines, having just <code>if</code> instead of <code>if</code> and <code>by_cases</code> should make it easier to work with.</p>",
        "id": 126587819,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526384866
    },
    {
        "content": "<p>Well... until you try to prove anything about the composition of two such maps...</p>",
        "id": 126587929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385086
    },
    {
        "content": "<p>Like I am trying now</p>",
        "id": 126587930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385090
    },
    {
        "content": "<p>If you unfold, you suddenly have a page-filling goal (-;</p>",
        "id": 126587934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385105
    },
    {
        "content": "<blockquote>\n<p>Also, I could be wrong, but I think you might find it easier to work with the definition without tactics in it. At the very least, you know more clearly what you have to prove if you unfold it.</p>\n</blockquote>\n<p>It's only the proof part of the def that involves tactics, so maybe this is OK?</p>",
        "id": 126587975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385132
    },
    {
        "content": "<p>That may be true.</p>",
        "id": 126587984,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526385229
    },
    {
        "content": "<p>OTOH I am a bit wary of Johan's unfolding comment above...</p>",
        "id": 126588029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385253
    },
    {
        "content": "<blockquote>\n<p>If you unfold, you suddenly have a page-filling goal (-;</p>\n</blockquote>\n<p>Is there a difference between the goals using the different definitions of <code>σ</code>?</p>",
        "id": 126588087,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526385369
    },
    {
        "content": "<p>Not too much</p>",
        "id": 126588091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385393
    },
    {
        "content": "<p>But you get stuff of the form <code>(\\lambda h, ...)</code> where you first didn't have the <code>\\lambda</code>. I think this has to do with <code>ite</code> vs <code>dite</code></p>",
        "id": 126588102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385452
    },
    {
        "content": "<p>Johan, let me echo other people's comments that it's a great idea to do whatever it is that you're doing, which might be simplicial homology of a topological space as far as I can see. I definitely learnt the most about how Lean works at times when I was engaged in actually writing non-trivial amounts of non-trivial code, and even if I look back at my schemes work and perhaps regret some earlier design decisions (e.g. a cheap definition of the structure presheaf on an affine scheme which now has to be seriously reworked) I still learnt masses of stuff. You might well end up with a canonical \"bad lecture\" -- some definition of cohomology, plus not one single example worked out :-)</p>",
        "id": 126588107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385469
    },
    {
        "content": "<p>Hehe</p>",
        "id": 126588149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385497
    },
    {
        "content": "<p>But this raises the question of whether lean code is supposed to be used to teach people mathematics, and I have pretty much decided that the answer should be \"no, at least for the code I write\".</p>",
        "id": 126588151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385513
    },
    {
        "content": "<p>I'm going to see Larry Paulson on Tuesday who I think has very different ideas about this.</p>",
        "id": 126588153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385527
    },
    {
        "content": "<p>At some point in the future we need readable code, I think</p>",
        "id": 126588160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385544
    },
    {
        "content": "<p>Why?</p>",
        "id": 126588166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385552
    },
    {
        "content": "<p>Why can't we have unreadable code with readable documentation and comments instead?</p>",
        "id": 126588170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385566
    },
    {
        "content": "<p>Ok, sure</p>",
        "id": 126588173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385577
    },
    {
        "content": "<p>\"This is what is going on here\"</p>",
        "id": 126588174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385579
    },
    {
        "content": "<p>But so far I haven't seen much comments in Lean code</p>",
        "id": 126588177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385589
    },
    {
        "content": "<p><code>simp;cc;finish</code></p>",
        "id": 126588181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385593
    },
    {
        "content": "<p>I know you have some comments,...</p>",
        "id": 126588183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385598
    },
    {
        "content": "<p>but the ratio of comments/code in mathlib is pretty low</p>",
        "id": 126588233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385614
    },
    {
        "content": "<p>But that's because most code you've seen has probably been written by Mario, and he's not a big commenter</p>",
        "id": 126588234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385616
    },
    {
        "content": "<p>That's what you get when you speak Lean faster then anyone else (-;</p>",
        "id": 126588243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385665
    },
    {
        "content": "<p>OTOH one might argue that much of the mathlib code is \"elementary\" in the sense that it is proving lemmas which are trivial to a mathematician</p>",
        "id": 126588247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385675
    },
    {
        "content": "<p>so one might argue that this code does not need comments.</p>",
        "id": 126588250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385684
    },
    {
        "content": "<p>\"I am proving this by induction\"</p>",
        "id": 126588253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385689
    },
    {
        "content": "<p>\"as any mathematician would\"</p>",
        "id": 126588254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385695
    },
    {
        "content": "<p>Well, I often have quite a hard time figuring out <em>which</em> lemma is being proven</p>",
        "id": 126588258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385702
    },
    {
        "content": "<p>\"it's just that mathematicians can't read the argument without training\"</p>",
        "id": 126588259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385707
    },
    {
        "content": "<p>Because the type signatures can be pretty unreadable as well</p>",
        "id": 126588262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385715
    },
    {
        "content": "<p>And I think that we should at least make sure that type signatures are readable</p>",
        "id": 126588306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385745
    },
    {
        "content": "<p>That's why I really loved Reid's improvement of my statement of the five lemma... He just put everything into a diagram!</p>",
        "id": 126588315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526385771
    },
    {
        "content": "<p>Yeah that was great :-)</p>",
        "id": 126588320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526385781
    },
    {
        "content": "<p>At some point Mario added a lot of comments on top of unreadable definitions and statements</p>",
        "id": 126588394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526385922
    },
    {
        "content": "<p>But I don't know if this was continued with new stuff in mathlib</p>",
        "id": 126588398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526385941
    },
    {
        "content": "<p>More precisely, I added comments on every <code>def</code> and <code>class</code> and <code>structure</code> and <code>inductive</code>. I think that is still mostly the case, I can do another pass to make sure</p>",
        "id": 126609677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526414784
    }
]