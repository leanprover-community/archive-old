[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The type class search here takes ~2 seconds on my laptop. It's definitely the <code>algebra</code> search that's slow, elaborating the type is fine. What's strange is the search succeeds in two steps. It fails to unify the target with <code>algebra R A</code>, and then finds the corect instance <code>mv_polynomial.algebra</code>. These respectively fail and succeed instantly when I try them outside of the type class search.</p>",
        "id": 204424088,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595252951
    },
    {
        "content": "<p>This seems to be fallout from <a href=\"https://github.com/leanprover-community/mathlib/commit/ce48b6ba77a02430c098f26f3fcc3c11e516179b\">https://github.com/leanprover-community/mathlib/commit/ce48b6ba77a02430c098f26f3fcc3c11e516179b</a> . The search is instant before that.</p>",
        "id": 204424130,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595252978
    },
    {
        "content": "<p>But I can't tell why it's slow now. Any ideas?</p>",
        "id": 204424148,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595252985
    },
    {
        "content": "<p>This one is instant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204427324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595254616
    },
    {
        "content": "<p>The diff: <code>comm_semiring R</code> instead of <code>comm_ring R</code></p>",
        "id": 204427368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595254633
    },
    {
        "content": "<p>It's really strange, because the instance search output is pretty short in any case, and for the same question <code>apply_instance</code> works instantaneously.</p>\n<p>I have no clue about what's going on.</p>",
        "id": 204427607,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595254745
    },
    {
        "content": "<p>It's  not the comm_semiring -&gt; semiring search that's at fault. This def is instant and doesn't affect the bad search.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1000000</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">csr</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 204428491,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595255124
    },
    {
        "content": "<p>Which makes me suspect that some instance is taking a long time to unify or fail to unify.</p>",
        "id": 204428515,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595255139
    },
    {
        "content": "<p>But I'm not sure how to debug this.</p>",
        "id": 204428546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595255156
    },
    {
        "content": "<p>How do you explain that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"n\">infer_instance</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is also instant?</p>",
        "id": 204429495,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595255614
    },
    {
        "content": "<p>My guess is a caching thing. The type class cache should be frozen after the <code>:=</code>.</p>",
        "id": 204429887,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595255803
    },
    {
        "content": "<p>Yes, it's a cache thing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is also slow.</p>",
        "id": 204430413,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595256074
    },
    {
        "content": "<p>Now I have a headache...</p>",
        "id": 204430837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595256254
    },
    {
        "content": "<p>And the profiler is totally unhelpful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>gives the output</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">25</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">35</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">117</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"k\">let</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">focus1</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreezing</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n <span class=\"mi\">4249</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span>\n</code></pre></div>",
        "id": 204431232,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595256408
    },
    {
        "content": "<p>So this is as minimal as I have it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">cr</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span> <span class=\"bp\">_</span> <span class=\"n\">cr</span><span class=\"o\">))</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span> <span class=\"bp\">_</span> <span class=\"n\">cr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">p</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">cr</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>There's exactly one type class search in the <code>#check</code>. It tries to apply exactly one instance.</p>",
        "id": 204433899,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595257541
    },
    {
        "content": "<p>Uhm. And using <code>by apply_instance</code> instead of <code>infer_instance</code> makes it instant.Maybe because this freezes the instance cache?</p>",
        "id": 204434210,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595257670
    },
    {
        "content": "<p>Yes, getting into tactic mode should freeze the cache.</p>\n<p>Should we invoke <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 204434931,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595258032
    },
    {
        "content": "<p>Poor Gabriel is too popular for his own health, hah.</p>",
        "id": 204435222,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595258168
    },
    {
        "content": "<p>I should walk over and remind him that all this research business is interfering with his Lean maintenance duties. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 204436680,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595258814
    },
    {
        "content": "<p>Isn't he on holidays? We should definitely not interfere with the holidays!</p>",
        "id": 204436882,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595258901
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover-community/lean/issues/397\">lean#397</a>?  If not, please file an issue.  I'm back from holidays but occupied by another project for the next two days.</p>",
        "id": 204441673,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595261081
    },
    {
        "content": "<p>It's not directly the same but could be related. I'll file it separately for when you have time. Thanks as always!</p>",
        "id": 204442322,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595261408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/type.20class.20slowdown.3A.20mv_polynomial.20algebras/near/204434210\">said</a>:</p>\n<blockquote>\n<p>Uhm. And using <code>by apply_instance</code> instead of <code>infer_instance</code> makes it instant.Maybe because this freezes the instance cache?</p>\n</blockquote>\n<p>I've noticed <code>infer_instance</code> being worse than <code>by apply_instance</code> in multiple cases. I think in those cases usually <code>infer_instance</code> fails and <code>by apply_instance</code> succeeds. My personal workaround is just to <em>never</em> use <code>infer_instance</code> anymore.</p>",
        "id": 204449414,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595265322
    },
    {
        "content": "<p>But this is a MWE extracted from a situation where we use neither, I think</p>",
        "id": 204449485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595265358
    },
    {
        "content": "<p>This is biting me again <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 204658237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595420618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you think that <a href=\"https://github.com/leanprover-community/lean/issues/403\">lean#403</a> also fixes this issue?</p>",
        "id": 204690416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595435870
    },
    {
        "content": "<p>I think so.</p>",
        "id": 204776609,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595496640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Cool! Any idea about when you want to release a new Lean? (-;</p>",
        "id": 204776733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595496738
    }
]