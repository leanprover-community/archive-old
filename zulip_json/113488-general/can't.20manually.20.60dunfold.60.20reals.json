[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- from data.real.basic</span>\n<span class=\"c1\">-- def real := @cau_seq.completion.Cauchy ℚ _ _ _ abs _</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">Cauchy</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">abs</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">equations</span> <span class=\"c1\">-- equations lemmas for real numbers</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n\n<span class=\"c1\">-- real.equations._eqn_1 : ℝ = cau_seq.completion.Cauchy</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">@[_refl_lemma]</span>\n<span class=\"cm\">theorem real.equations._eqn_1 : ℝ = cau_seq.completion.Cauchy :=</span>\n<span class=\"cm\">eq.refl ℝ</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- this fails too</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">Cauchy</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">rat</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">rat</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">abs</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">rat</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_group</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">abs_is_absolute_value</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">rat</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">ℝ</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ⊢ real</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this works, and changes goal to</span>\n  <span class=\"c1\">-- ⊢ @cau_seq.completion.Cauchy.{0 0} rat rat.discrete_linear_ordered_field rat rat.comm_ring</span>\n  <span class=\"c1\">--  (@abs.{0} rat rat.decidable_linear_ordered_comm_group)</span>\n  <span class=\"c1\">--  (@abs_is_absolute_value.{0} rat rat.discrete_linear_ordered_field)</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Are the reals not definitionally equal to their definition? Have I done something silly? I can't reconstruct the proof of the equation lemma.</p>",
        "id": 148102409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542798064
    },
    {
        "content": "<p>Does it have anything to do with <code>real</code> being marked <code>irreducible</code> here?: <a href=\"https://github.com/leanprover/mathlib/blob/9f5099ec2cd933822ba3d422e74189d3508e5d0e/data/real/basic.lean#L198\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/9f5099ec2cd933822ba3d422e74189d3508e5d0e/data/real/basic.lean#L198\">https://github.com/leanprover/mathlib/blob/9f5099ec2cd933822ba3d422e74189d3508e5d0e/data/real/basic.lean#L198</a></p>",
        "id": 148102574,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542798268
    },
    {
        "content": "<p>It does. It will work if you add <code>local attribute [semireducible] real</code>.</p>",
        "id": 148102599,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542798304
    },
    {
        "content": "<p>So irreducibility even stops <code>rfl</code> working?</p>",
        "id": 148102968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542798580
    },
    {
        "content": "<p>It seems like a <em>really</em> good idea from the point of mathematics to have <code>real</code> treated as a constant. There is more than one way to implement it (Dedekind cuts, Cauchy sequences) and hence mathematicians should not care about the implementation. I noticed that even <code>set_option pp.all true</code> would not unfold it. This seems like \"correct\" behaviour. I understand that <code>rat</code> is treated as a constant -- from Lean's point of view it <em>is</em> a constant, right? It's an inductive type. <code>real</code> is the only odd one out, I think -- all the rest are inductive types I guess.</p>",
        "id": 148103274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542798844
    },
    {
        "content": "<p>So what does <code>set_option pp.all true</code> unfold? I see I can change its output changing with <code>dunfold</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ⊢ real</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ @cau_seq.completion.Cauchy.{0 0} rat rat.discrete.blah...</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">Cauchy</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ @quotient.{1} (@cau_seq.{0 0} rat...</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">quotient</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ @quot.{1} (@cau_seq.{0 0} rat...</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148103486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542799145
    },
    {
        "content": "<p>I thought <code>pp.all</code> unfolded as much as it could. But these definitions like <code>cau_seq.completion.Cauchy</code> don't seem to be tagged with anything in particular.</p>",
        "id": 148103518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542799202
    },
    {
        "content": "<p><code>pp.all</code> doesn't unfold anything. It just shows information that is usually omitted, but always there in the term</p>",
        "id": 148103809,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542799558
    },
    {
        "content": "<p>Aah! So when one gets huge expansion in term length after switching <code>pp.all</code> on -- as often happens to me -- this is perhaps often due to type class inference, which is always there in the term because it \"works via <code>@</code>\" rather than working by unfolding definitions.</p>",
        "id": 148104280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542800242
    },
    {
        "content": "<p>So what's going on here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">hard</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"c1\">-- 13 lines of output; excerpts below.</span>\n\n  <span class=\"c1\">-- ⊢ ... @has_add.add.{0} real ...</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ... @distrib.add.{0} real ...</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">distrib</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ... @ring.add.{0} real real.ring ...</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ... @comm_ring.add.{0} real real.comm_ring ...</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ... @comm_ring.add.{0} real real.comm_ring_aux ...</span>\n  <span class=\"c1\">-- next line fails</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"c1\">-- simplify tactic failed to simplify</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148104837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542800887
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L198\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L198\">https://github.com/leanprover/mathlib/blob/master/data/real/basic.lean#L198</a></p>",
        "id": 148104929,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542801031
    },
    {
        "content": "<p>but I can presumably keep going somehow? Is there an equation lemma I can use?</p>",
        "id": 148104956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801096
    },
    {
        "content": "<p>got it</p>",
        "id": 148105101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801252
    },
    {
        "content": "<p>You can <code>rw real.comm_ring_aux</code>. Or, in general, you can use <code>#print prefix</code> to look for specific equation lemmas. <code>#print prefix real.comm_ring_aux</code></p>",
        "id": 148105102,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542801253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_aux</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>So again irreducibility stopped me from proceeding.</p>",
        "id": 148105109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801282
    },
    {
        "content": "<p>But it was difficult for me to guess that the problem was with <code>real.comm_ring_aux</code> -- I just thought <code>comm_ring.add</code> was being silly.</p>",
        "id": 148105127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542801344
    },
    {
        "content": "<p>if you really really want to unfold <code>real</code>, you can use <code>delta</code></p>",
        "id": 148106480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542803108
    },
    {
        "content": "<p>I am confused about whether one should regard <code>real</code> and <code>@cau_seq.completion.Cauchy ℚ _ _ _ abs _</code> as definitionally equal. They are equal by definition, but <code>rfl</code> will not prove it.</p>",
        "id": 148107368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542804154
    },
    {
        "content": "<p>Kevin, could you explain what you are trying to do? I didn't manage to guess from messages in this thread.</p>",
        "id": 148107369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542804156
    },
    {
        "content": "<p>This is not mathematics.</p>",
        "id": 148107378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542804173
    },
    {
        "content": "<p>What would be a realistic lemma you'd want to prove?</p>",
        "id": 148107379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542804177
    },
    {
        "content": "<p>I am trying to understand equality better; I was thinking of making a blog post about it.</p>",
        "id": 148107386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542804195
    },
    {
        "content": "<p>Every time I think about it, I understand it a little more.</p>",
        "id": 148107395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542804210
    },
    {
        "content": "<p>Sometimes when I was just completely stuck at Lean in the early days, it was because I didn't understand equality well enough. As you know Patrick, computer science equality is far harder than mathematics equality. I was trying to write some post where I explain this to mathematicians, but then I realised I didn't really understand it well enough to explain it myself.</p>",
        "id": 148107469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542804287
    },
    {
        "content": "<p>The short answer is: the kernel says they are defeq, but the elaborator says they are not. Because the elaborator respects reducibility hints for efficiency reasons.</p>",
        "id": 148107546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1542804379
    },
    {
        "content": "<p>Sebastian many thanks for your succinct but extremely helpful contributions to this thread.</p>",
        "id": 148108095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542805121
    }
]