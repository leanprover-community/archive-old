[
    {
        "content": "<p>Which tactic do I use to unfold a defintion. For example, say I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The context has <code>h : foo</code>. I would like it to read <code>h : 1 = 0</code> after some tactic magic.</p>",
        "id": 265873819,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640222366
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a></p>",
        "id": 265875019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640223696
    },
    {
        "content": "<p>I tried <code>unfold at h</code>. It doesn't do anything.</p>",
        "id": 265875160,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640223860
    },
    {
        "content": "<p><code>unfold foo at h</code></p>",
        "id": 265875164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640223879
    },
    {
        "content": "<p>If that doesn't work, try <code>dsimp [foo] at h</code></p>",
        "id": 265875176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640223903
    },
    {
        "content": "<p>Ah. Yes, that works.</p>",
        "id": 265875184,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640223917
    },
    {
        "content": "<p>If <code>foo</code> takes parameters, I still write <code>unfold foo</code> right?</p>",
        "id": 265875257,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640224038
    },
    {
        "content": "<p>Yeah, that's right</p>",
        "id": 265875268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640224060
    },
    {
        "content": "<p>Nice. Thanks.</p>",
        "id": 265875308,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640224083
    },
    {
        "content": "<p>Often, one is able to say \"rw foo at ...\" depending on how complex your definition is.</p>",
        "id": 265877007,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640226293
    },
    {
        "content": "<p>Apparently you can't unfold complex definitions. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"k\">in</span>\n  <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The context shows me <code>h : foo._match_1 p</code>.</p>",
        "id": 265948227,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640289216
    },
    {
        "content": "<p>Right, because that is how foo is defined, you're doing the equivalent of a match statement when you deconstruct in your let statement. You might make some progress with \"cases p\". A helper rfl lemma like \"foo (m, n) &lt;-&gt; m = n := iff.rfl\" is very helpful fight after you make a definition.</p>",
        "id": 265948383,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640289362
    },
    {
        "content": "<p>Then you make another lemma, \"foo p &lt;-&gt; p.1 = p.2 := by cases p; refl\"</p>",
        "id": 265948439,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640289410
    },
    {
        "content": "<p>The reason is that let statements aren't reduced instantly, I forget which Greek letter they correspond to, beta reduction/expansion? And there's also the eta reduction here, which in lean3 isn't definitionally true. Is \"p = (p.1, p.2)\" true by refl? My recollection is that, no, it's not.</p>",
        "id": 265948601,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640289536
    },
    {
        "content": "<p>OK. It's not show-stopper. I can always look at the definition in the code.</p>",
        "id": 265948792,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640289653
    },
    {
        "content": "<p>I'm trying the following, but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"k\">in</span>\n  <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"bp\">&lt;</span><span class=\"c1\">-- COMPLAINS HERE</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265951219,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640291727
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 265951496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640291925
    },
    {
        "content": "<p>You have to indicate what you're deconstructing in the <code>cases</code> tactic. Also,<code>rfl</code> is a term, <code>refl</code> is a tactic.</p>",
        "id": 265951524,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640291955
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 265951547,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640291978
    },
    {
        "content": "<p>So I have this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lem2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">some_injective</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm trying to get rid of the <code>some</code> but it's not working.</p>",
        "id": 265951778,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640292179
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/some_injective\">docs#some_injective</a></p>",
        "id": 265951928,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640292315
    },
    {
        "content": "<p>What are your imports? This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"k\">in</span>\n  <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lem2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">option.some_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265951958,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640292343
    },
    {
        "content": "<p>This is why I have now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"k\">in</span>\n  <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">some</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lem2</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">some_injective</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265952042,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640292406
    },
    {
        "content": "<p>It seems there is a difference between <code>option.some_inj</code> and <code>some_injective</code>.</p>",
        "id": 265952135,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640292489
    },
    {
        "content": "<p><code>some_injective</code> is not something you can rewrite with. Do you mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">some_injective</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 265952147,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640292510
    },
    {
        "content": "<p>OK, then I am confused about the purpose of <code>some_injective</code>.</p>",
        "id": 265952678,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640292977
    },
    {
        "content": "<p>I'll stick to <code>some_inj</code> for now. Thanks.</p>",
        "id": 265952719,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640293027
    },
    {
        "content": "<p><code>some_injective</code> is <code>function.injective some</code>, for some type <code>T</code> sending to <code>option T</code>. <code>function.injective</code> is not an \"iff\", it is only the implication that \"f x = f y -&gt; x = y`.<br>\nConsider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">some_injective</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">some_injective : ∀ (α : Type u_1), function.injective some</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"n\">function.injective</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def function.injective : Π {α : Sort u₁} {β : Sort u₂}, (α → β) → Prop :=</span>\n<span class=\"cm\">λ {α : Sort u₁} {β : Sort u₂} (f : α → β), ∀ ⦃a₁ a₂ : α⦄, f a₁ = f a₂ → a₁ = a₂</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">function.injective.eq_iff</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function.injective.eq_iff :</span>\n<span class=\"cm\">  ∀ {α : Sort u_1} {β : Sort u_2} {f : α → β}, function.injective f → ∀ {a b : α}, f a = f b ↔ a = b</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 265953103,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640293285
    },
    {
        "content": "<p>Usually we avoid pattern matching in definitions (as opposed to proofs) for this reason, even though it looks nicer--you had to write the non-pattern matching definition in the statement of <code>lem2</code> anyways, so just use that.</p>",
        "id": 265953219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640293392
    },
    {
        "content": "<p>Yeah, it's a trade-off it seems.</p>",
        "id": 265953506,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640293654
    },
    {
        "content": "<p>Another question about unfolding: How do you unfold something like <code>b ≈ a</code> all the way. I had to do <code>unfold has_equiv.equiv</code> and then <code>unfold setoid.r</code>. Is there a quicker way?</p>",
        "id": 268611961,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642630772
    },
    {
        "content": "<p>Can you explain what you hope to do by unfolding?</p>",
        "id": 268612371,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642630989
    },
    {
        "content": "<p>By the way, in the widget view, one can click on any term, including a <code>=</code> or <code>\\~-</code> or anything like that and see how it's defined and what implicit arguments it uses. I know that you don't use an editor with widget view, just declaring for posterity.</p>",
        "id": 268612457,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642631038
    },
    {
        "content": "<p>What type are <code>a</code> and <code>b</code>? Either you made a wrong turn when you introduced <code>b ≈ a</code> into your goal, or there's a lemma missing</p>",
        "id": 268612763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642631179
    },
    {
        "content": "<p><code>a</code> and <code>b</code> are just examples. I'm interested in unfolding what <code>≈</code> means.</p>",
        "id": 268613271,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642631488
    },
    {
        "content": "<p>Here's my proof where I had to do multiple unfoldings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">act_congr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁y₁</span> <span class=\"n\">h₂y₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">h₁y₁</span> <span class=\"bp\">≈</span> <span class=\"n\">h₂y₂</span><span class=\"o\">),</span> <span class=\"n\">envelope.act</span> <span class=\"n\">g</span> <span class=\"n\">h₁y₁</span> <span class=\"bp\">=</span> <span class=\"n\">envelope.act</span> <span class=\"n\">g</span> <span class=\"n\">h₂y₂</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">y₁</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">y₂</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">act</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">quotient.eq</span><span class=\"o\">],</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_equiv.equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">setoid.r</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">envelope</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268613349,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642631524
    },
    {
        "content": "<p><del>I assume you're working with something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.lift\">docs#quotient.lift</a>?</del></p>",
        "id": 268613368,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642631539
    },
    {
        "content": "<p>I agree with Eric, there should be a lemma along the lines of <code>quotient.eq</code> expressed in terms of <code>envelope.act</code>.</p>",
        "id": 268613678,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642631752
    },
    {
        "content": "<p>So you're saying I should abstract the three <code>unfolds</code> into a lemma?</p>",
        "id": 268613784,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642631806
    },
    {
        "content": "<p>Or even the whole thing between <code>unfold act</code> and <code>unfold envelope</code>. <code>unfold</code> in a finished proof is a bit of a code smell, suggesting you need to abstract a lemma.</p>",
        "id": 268613926,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642631888
    },
    {
        "content": "<p>(During development <code>unfold</code> can be useful to get a sense of what's going on. Or clicking on the relevant widgets.)</p>",
        "id": 268613964,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642631922
    },
    {
        "content": "<p>Oh really? I didn't know that.</p>",
        "id": 268613989,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642631942
    },
    {
        "content": "<p>At least, that is my vision on the idiomatic style in the parts of mathlib I run into. It may be very different if there are many small definitions.</p>",
        "id": 268614184,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642632086
    },
    {
        "content": "<p>Alright. Thanks for the input.</p>",
        "id": 268614732,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642632400
    },
    {
        "content": "<p>I think the API around quotients is a bit messy at the moment - <code>has_equiv.equiv</code>vs <code>setoid.r</code> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.rel\">docs#setoid.rel</a> vs <code>the_actual_relation_name</code>, <code>quot.mk</code> vs <code>quotient.mk</code> vs <code>quotient.mk'</code> vs <code>submodule.quotient.mk</code> vs ...</p>",
        "id": 268615156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642632646
    },
    {
        "content": "<p>Don't forget <code>submodule.quotient.mk</code> versus <code>submodule.mkq</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268615252,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642632716
    }
]