[
    {
        "content": "<p>This showed up in a branch following some work by <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> . I'm not sure how to minimize it, since it doesn't happen on master and the changes don't seem relevant, and I have no guess about what's going on. See <a href=\"https://github.com/leanprover-community/mathlib/tree/semilinear_new2_inv_pair_tc_issue\">branch#semilinear_new2_inv_pair_tc_issue</a>, <code>algebra/category/Module/basic.lean</code>.</p>\n<p>In line 84, the context is <code>ring R</code>. The lemma <code>tensor_product.mk_compr₂_inj</code> assumes <code>comm_semiring R</code>. Applying this lemma takes 6 seconds to fail. The instance search trace seems to show that it does the same search for <code>comm_semiring R</code> many thousands of times. </p>\n<p>Any guesses what's happening?</p>",
        "id": 249169559,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628716170
    },
    {
        "content": "<p>To add some context (because the changes must be relevant somehow!), the changes in this branch involve redefining <code>linear_map</code> to be semilinear maps, along the lines discussed in <a href=\"#narrow/stream/116395-maths/topic/Conjugate-linear\">this thread</a>.</p>",
        "id": 249170312,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1628716478
    },
    {
        "content": "<p>It's relevant in that the lemma in question says something about linear maps. But I'm not sure how any change like that causes <code>apply</code> to shoot off the same type class search 5000+ times...</p>",
        "id": 249170772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628716737
    },
    {
        "content": "<p>For reference: <a href=\"https://github.com/leanprover-community/mathlib/blob/00cc062acb1491efb5a12cb65fcbd69a86751c40/src/algebra/category/Module/basic.lean#L85\">https://github.com/leanprover-community/mathlib/blob/00cc062acb1491efb5a12cb65fcbd69a86751c40/src/algebra/category/Module/basic.lean#L85</a></p>",
        "id": 249172282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628717600
    },
    {
        "content": "<p>Here it is somewhat minimized. Try this on that same branch.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad2</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try_for</span> <span class=\"mi\">10000</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">bad2</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Same behavior in term mode, with <code>exact</code>, with <code>refine</code>.</p>",
        "id": 249246713,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628780634
    },
    {
        "content": "<p>Here we go: reproducible on master, so independent of <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> 's changes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad5</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">bad5</span>\n</code></pre></div>\n<p>This performs 4306 searches for <code>comm_semiring R</code>. If you use <code>by apply bad5 R</code> instead, it fails instantly.</p>",
        "id": 249251082,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628782468
    },
    {
        "content": "<p>A little less extreme (only 154 repeated searches):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad6</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">bad6</span>\n</code></pre></div>",
        "id": 249251761,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628782830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search/near/249251082\">said</a>:</p>\n<blockquote>\n<p>If you use <code>by apply bad5 R</code> instead, it fails instantly.</p>\n</blockquote>\n<p>It seems like it this only works with <code>apply</code>; <code>exact</code>, <code>refine</code> and term mode are all still very slow even when specifying <code>R</code> explicitly.</p>",
        "id": 249266188,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1628789473
    },
    {
        "content": "<p>I'm not really sure where to go debugging this. My guess is it's buried somewhere in the elaborator. Does anyone (<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?) have an idea where to look next?</p>",
        "id": 249274214,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628793046
    },
    {
        "content": "<p>I don't know much about typeclass caching, this probably requires looking at it in the debugger</p>",
        "id": 249274426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628793135
    },
    {
        "content": "<p>It doesn't necessarily scream caching issue. Even without caching I think it shouldn't start this many searches.</p>",
        "id": 249274520,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628793190
    },
    {
        "content": "<p>I believe this is the culprit:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"c1\">// HACK(gabriel): do not reuse type-class cache for nested resolution problems</span>\n<span class=\"c1\">// For one example that easily breaks, see the default field values in `init/control/lawful.lean`</span>\n<span class=\"n\">context_cache</span> <span class=\"nf\">tmp_cache</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">m_cache</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n<span class=\"n\">type_context_old</span> <span class=\"nf\">tmp_ctx</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">(),</span> <span class=\"n\">m_mctx</span><span class=\"p\">,</span> <span class=\"n\">mdecl</span><span class=\"o\">-&gt;</span><span class=\"n\">get_context</span><span class=\"p\">(),</span> <span class=\"n\">tmp_cache</span><span class=\"p\">,</span> <span class=\"n\">m_transparency_mode</span><span class=\"p\">);</span>\n<span class=\"n\">inst</span> <span class=\"o\">=</span> <span class=\"n\">tmp_ctx</span><span class=\"p\">.</span><span class=\"n\">mk_class_instance</span><span class=\"p\">(</span><span class=\"n\">m_type</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span> <span class=\"n\">m_mctx</span> <span class=\"o\">=</span> <span class=\"n\">tmp_ctx</span><span class=\"p\">.</span><span class=\"n\">mctx</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 249275517,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628793730
    },
    {
        "content": "<p>If you enable <code>set_option pp.all true set_option trace.type_context.is_def_eq_detail true</code>, then you see which unification problems cause these type class searches.</p>",
        "id": 249275869,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628793934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search/near/249275517\">said</a>:</p>\n<blockquote>\n<p>I believe this is the culprit:</p>\n<p><div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"c1\">// HACK(gabriel): do not reuse type-class cache for nested resolution problems</span>\n<span class=\"c1\">// For one example that easily breaks, see the default field values in `init/control/lawful.lean`</span>\n<span class=\"n\">context_cache</span> <span class=\"nf\">tmp_cache</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">m_cache</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n<span class=\"n\">type_context_old</span> <span class=\"nf\">tmp_ctx</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">(),</span> <span class=\"n\">m_mctx</span><span class=\"p\">,</span> <span class=\"n\">mdecl</span><span class=\"o\">-&gt;</span><span class=\"n\">get_context</span><span class=\"p\">(),</span> <span class=\"n\">tmp_cache</span><span class=\"p\">,</span> <span class=\"n\">m_transparency_mode</span><span class=\"p\">);</span>\n<span class=\"n\">inst</span> <span class=\"o\">=</span> <span class=\"n\">tmp_ctx</span><span class=\"p\">.</span><span class=\"n\">mk_class_instance</span><span class=\"p\">(</span><span class=\"n\">m_type</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span> <span class=\"n\">m_mctx</span> <span class=\"o\">=</span> <span class=\"n\">tmp_ctx</span><span class=\"p\">.</span><span class=\"n\">mctx</span><span class=\"p\">();</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Aha. I'm not entirely sure what's going on here but I understand the comment</p>",
        "id": 249276646,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628794323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> just to check, I'm guessing there's no easy change to use the cache in this nested case, right? I'm still trying to sort out why the changes in Frederic's branch trigger this. But I'm worried there's not a good workaround</p>",
        "id": 249377495,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628869812
    },
    {
        "content": "<p>If it was easy, I would have done it already.  But it breaks some code in nontrivial ways (see comment).</p>",
        "id": 249379304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628870699
    },
    {
        "content": "<p>Just for context, the quoted lines are <a href=\"https://github.com/leanprover-community/lean/blob/91905440982bf28d2f1da4da534d5b126a595a54/src/library/type_context.cpp#L2397-L2402\">here</a> and <a href=\"https://github.com/leanprover-community/lean/blob/333783350cd3fe38f25fed1da7d6a433d8f85b77/library/init/control/lawful.lean#L51-L56\">these</a> are presumably the default field values causing issues</p>",
        "id": 249381421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628871884
    },
    {
        "content": "<p>If the problem only appears in default field values, can we make the hack hackier by only having it enabled during structure construction?</p>",
        "id": 249381479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628871925
    },
    {
        "content": "<p>I don't really remember what was going on precisely.  If it's just the default values in that file, then it could also be an option to turn them into separate lemmas.</p>",
        "id": 249381900,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628872173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search/near/249381479\">said</a>:</p>\n<blockquote>\n<p>If the problem only appears in default field values, can we make the hack hackier by only having it enabled during structure construction?</p>\n</blockquote>\n<p>The problem on Frederic's branch appears in a structure construction (buried a few layers deep: in an instance declaration, <code>tidy</code> called <code>ext</code> which tried to apply a lemma which triggered one of these nested resolution problems).</p>",
        "id": 249383805,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1628873273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/odd.20repeated.20type.20class.20search/near/249383805\">said</a>:</p>\n<blockquote>\n<p>The problem on Frederic's branch appears in a structure construction (buried a few layers deep: in an instance declaration, <code>tidy</code> called <code>ext</code> which tried to apply a lemma which triggered one of these nested resolution problems).</p>\n</blockquote>\n<p>In fact the problem seems to appear whenever <code>ext</code> is invoked on a linear map. For example in <code>representation_theory/maschke.lean</code>, line 171.</p>",
        "id": 249385857,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1628874356
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8868\">#8868</a> pins the blame on the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.mk_compr₂_inj\">docs#tensor_product.mk_compr₂_inj</a> <code>ext</code> lemma - do we know why this lemma makes things so slow?</p>",
        "id": 251389082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630418291
    },
    {
        "content": "<p>Can we avoid typeclass searches by replacing <code>[]</code> arguments with <code>{}</code>, and will that have unwanted consequences?</p>",
        "id": 251389188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630418335
    }
]