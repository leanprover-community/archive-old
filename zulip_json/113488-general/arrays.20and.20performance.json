[
    {
        "content": "<p>I've never worried about performance of Lean code, and I have no intuition for it at all.<br>\nKeeley wrote the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">map_copy_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n             <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"k\">let</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"n\">map_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n           <span class=\"k\">else</span> <span class=\"n\">y</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">map_copy</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">map_copy_aux</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>and I massaged it into</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">hn</span> <span class=\"n\">hm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">map_copy_aux</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map_copy</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">map_copy_aux</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">)</span>\n  <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>The benefit is that the <code>meta</code> is gone. But did my rewrite damage the performance?</p>",
        "id": 193513206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586468627
    },
    {
        "content": "<p>Normally this would be bad but I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> said the Lean 3 VM doesn't implement tail recursion, so maybe it doesn't matter.</p>",
        "id": 193513851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586469033
    },
    {
        "content": "<p>But I have the same type of recursion as Keeley's code, right?</p>",
        "id": 193513987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586469130
    },
    {
        "content": "<p>Keeley's looks tail recursive to me, yours isn't because the last thing you do is a write, not a recursive call.</p>",
        "id": 193514054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586469184
    },
    {
        "content": "<p>Ooh, you are right</p>",
        "id": 193514158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586469254
    },
    {
        "content": "<p>You can make the first one not <code>meta</code> quite easily by saying <code>m - r</code> is decreasing.</p>",
        "id": 193514226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586469302
    },
    {
        "content": "<p>Hmm, but I don't know which <code>wf.*</code> I need to invoke for that. The error message said that it couldn't figure out how to prove <code>r + 1 &lt; r</code>... which is clearly not the thing it should be trying.</p>",
        "id": 193514353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586469370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map_copy_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n             <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"k\">let</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"k\">have</span> <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n               <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_sub_left_iff</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n             <span class=\"n\">map_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n           <span class=\"k\">else</span> <span class=\"n\">y</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</pre></div>",
        "id": 193516137,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586470364
    },
    {
        "content": "<p>import free version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map_copy_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n             <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"k\">let</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n             <span class=\"k\">have</span> <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n               <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_le</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">],</span>\n             <span class=\"n\">map_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">fm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n           <span class=\"k\">else</span> <span class=\"n\">y</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</pre></div>",
        "id": 193516481,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586470566
    },
    {
        "content": "<p>Using well founded recursion like this is the best option for VM performance because the VM bytecode compiler ignores the messy wf induction produced for the benefit of lean by the equation compiler, and just blindly uses the equation as it would with the <code>meta def</code></p>",
        "id": 193517312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586471168
    },
    {
        "content": "<p>that is, Chris's version should produce exactly the same code as Keeley's</p>",
        "id": 193517393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586471226
    },
    {
        "content": "<p>Thanks, that was going to be my next question.</p>",
        "id": 193518351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586471866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Thanks a lot!</p>",
        "id": 193539391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586496502
    },
    {
        "content": "<p>The monadic version is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mmap_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                <span class=\"k\">let</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">fm</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">fn</span><span class=\"o\">),</span>\n                <span class=\"k\">have</span> <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n                  <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_le</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">],</span>\n                <span class=\"n\">mmap_copy_aux</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n              <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">y</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</pre></div>\n\n\n<p>Can I deduce the \"regular\" version by just applying the monadic version with <code>k = id</code>? Or would that still take a (minor) performance hit? I would hope that the compiler is smart enough to get rid of the <code>id</code>s...</p>",
        "id": 193539656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586496976
    },
    {
        "content": "<p>A real compiler should be able to do that but I don't think Lean 3 has a real compiler.<br>\nActually, without that inlining, your function is no longer tail recursive so it might be more than a minor performance hit (though that depends on the relative costs of things, especially <code>f</code>)</p>",
        "id": 193568947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586525540
    }
]