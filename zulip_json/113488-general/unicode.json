[
    {
        "content": "<p>Does every symbol have a non-unicode equivalent?</p>",
        "id": 124443168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522472741
    },
    {
        "content": "<p>No. Most do, but the strict policy on this was dropped a while ago and new features have crept in with no non-unicode equivalents. Basically no one uses lean without unicode anymore (if they ever did), so it wasn't felt necessary to continue to support.</p>",
        "id": 124443263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522472999
    },
    {
        "content": "<p>Here's one:</p>\n<div class=\"codehilite\"><pre><span></span>theorem «a strange-identifier!» : true := trivial\n</pre></div>\n\n\n<p>the double french quotes escape everything, and have no non-unicode equivalent</p>",
        "id": 124443307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522473089
    },
    {
        "content": "<p>I thought it might be a good idea to use <code>p̌</code> (p breve) as a variable. But Lean says \"unexpected token\". I thought Lean has full unicode support. What is going on?</p>",
        "id": 168191956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560575127
    },
    {
        "content": "<p>From some brief googling it looks like the accent mark is created by <a href=\"https://en.wikipedia.org/wiki/Caron#Unicode\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Caron#Unicode\">a \"modifier\" unicode character</a> acting on p and so I guess that modifier character isn't allowed by Lean. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> has <a href=\"https://github.com/EdAyers/mathlib/blob/fb5c2ffe917049959597b0a93b872e91f4004922/docs/unicode.md\" target=\"_blank\" title=\"https://github.com/EdAyers/mathlib/blob/fb5c2ffe917049959597b0a93b872e91f4004922/docs/unicode.md\">a page on Unicode in Lean</a> and in the section on accents he warns \"It's an absolute minefield.\" <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 168192871,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560576730
    },
    {
        "content": "<p>Ok, thanks for the info!</p>",
        "id": 168192970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560576961
    },
    {
        "content": "<p>They cannot be used in identifiers, but they can be used as notation. For example in Flypitch: <a href=\"https://github.com/flypitch/flypitch/blob/64d2bc25e033fb294c7e8d1c3dfba3d26f60b4a8/src/bvm.lean#L1281\" target=\"_blank\" title=\"https://github.com/flypitch/flypitch/blob/64d2bc25e033fb294c7e8d1c3dfba3d26f60b4a8/src/bvm.lean#L1281\">https://github.com/flypitch/flypitch/blob/64d2bc25e033fb294c7e8d1c3dfba3d26f60b4a8/src/bvm.lean#L1281</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">postfix</span> <span class=\"bp\">`</span><span class=\"err\">̌</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"kn\">check</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">check_type</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pSet</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bSet</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">((</span><span class=\"n\">pSet</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"err\">̌</span>  <span class=\"o\">:</span> <span class=\"n\">bSet</span> <span class=\"err\">𝔹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">check_type&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">bSet</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">̌</span> <span class=\"o\">:</span> <span class=\"n\">bSet</span> <span class=\"err\">𝔹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n</pre></div>\n\n\n<p>Note that the <code>x̌</code> is not a variable, but the check-operation applied to <code>x</code>.</p>",
        "id": 168198851,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560587449
    },
    {
        "content": "<p>I'm not sure why Zulip is displaying <code>x̌</code> once as two separate characters, and once as a <code>x</code> with a check on top of it...</p>",
        "id": 168198866,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560587509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> here is some more supercripts/subscripts (not all of which i have tried in lean)<br>\ngreek, caps, and some more latin letters scattered about<br>\n<a href=\"https://github.com/ratmice/lumpy-leandoc/blob/master/src/tex_gen.rs#L366-L373\" target=\"_blank\" title=\"https://github.com/ratmice/lumpy-leandoc/blob/master/src/tex_gen.rs#L366-L373\">https://github.com/ratmice/lumpy-leandoc/blob/master/src/tex_gen.rs#L366-L373</a></p>",
        "id": 168215873,
        "sender_full_name": "matt rice",
        "timestamp": 1560619017
    },
    {
        "content": "<p>if you're looking for the corresponding lean vscode shortcuts for some of these symbols, here's a list: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a></p>",
        "id": 168215996,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560619284
    },
    {
        "content": "<p>Lean (quite sensibly, imo) doesn't let you use arbitrary unicode characters in identifiers. The rules for what characters Lean allows are in <code>src/util/name.cpp</code>. Which is:<br>\n - Any alphanumeric letter (no starting with numbers though)<br>\n - lowercase greek except lambda  <code>α β γ δ ε ζ η θ ι κ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω</code><br>\n - uppercase greek except Pi and Sigma <code>Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Ρ Τ Υ Φ Χ Ψ Ω</code><br>\n - coptic <code>ϊϋόύώϏβθΥϓϔφπϗϘϙϚϛϜϝϞϟϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯκρςϳΘε϶ϷϸϺϻ</code><br>\n- Polytonic greek extended character set  <a href=\"https://www.unicode.org/charts/PDF/U1F00.pdf\" target=\"_blank\" title=\"https://www.unicode.org/charts/PDF/U1F00.pdf\">https://www.unicode.org/charts/PDF/U1F00.pdf</a><br>\n- Letter like symbols <a href=\"https://www.unicode.org/charts/PDF/U2100.pdf\" target=\"_blank\" title=\"https://www.unicode.org/charts/PDF/U2100.pdf\">https://www.unicode.org/charts/PDF/U2100.pdf</a>  <code>ℂ°C℄Ɛ℈°Fℊℋℌℍℎℏℐℑℒℓ℔ℕNo℗℘ℙℚℛℜℝ℞℟℠TEL™℣ℤ℥Ω℧ℨ℩KÅℬℭ℮ℯℰℱℲℳℴאבגדℹ℺FAXℼℽℾℿ⅀⅁⅂⅃⅄ⅅⅆⅇⅈⅉ⅊⅋⅌⅍ⅎ⅏</code><br>\n- Some of the mathematical letters in <a href=\"https://www.unicode.org/charts/PDF/U1D400.pdf\" target=\"_blank\" title=\"https://www.unicode.org/charts/PDF/U1D400.pdf\">https://www.unicode.org/charts/PDF/U1D400.pdf</a></p>\n<p><code>𝒜𝒞𝒟𝒢𝒥𝒦𝒩𝒪𝒫𝒬𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵𝒶𝒷𝒸𝒹𝒻𝒽𝒾𝒿𝓀𝓁𝓂𝓃𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃𝔄𝔅𝔇𝔈𝔉𝔊𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔𝔖𝔗𝔘𝔙𝔚𝔛𝔜𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷𝔸𝔹𝔻𝔼𝔽𝔾𝕀𝕁𝕂𝕃𝕄𝕆𝕊𝕋𝕌𝕍𝕎𝕏𝕐𝕒𝕓𝕔𝕕𝕖𝕗𝕘𝕙𝕚𝕛𝕜𝕝𝕞𝕟𝕠𝕡𝕢𝕣𝕤𝕥𝕦𝕧𝕨𝕩𝕪𝕫𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻𝕼𝕽𝕾𝕿𝖀𝖁𝖂𝖃𝖄𝖅𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟</code></p>\n<p>AFAIK you can use any unicode character in the notation parser.</p>",
        "id": 168267829,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1560719181
    },
    {
        "content": "<p>In addition, if it's not at the head of the identifier you can use numbers and <code>ⁿ₀₁₂₃₄₅₆₇₈₉ₐₑₒₓₔₕₖₗₘₙₚₛₜᵢᵣᵤᵥᵦᵧᵨᵩᵪ</code>.</p>",
        "id": 168268169,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1560719798
    },
    {
        "content": "<p>The basic problems with unicode accents are: <br>\n  - they are rendered inconsistently depending on font and platform (eg sometimes the accent is hidden behind the character). Often they will be rendered in the wrong place (as evidenced by zulip).<br>\n  - there are multiple sequences of unicode characters which look the same or very similar on the screen but which Lean will read differently.<br>\n - It can be finicky to get the editor to input diacritical marks correctly, for example vscode treats <code>č</code> as two characters so you have to click right twice to go to the other side of it which is jarring, especially if you don't know how it was made. Also I notice in zulip editor that you can enter  wierd states where the diacritical mark is bound to a space and so is rendered slightly before the character even though it looked fine in vscode ... etc</p>",
        "id": 168268429,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1560720337
    }
]