[
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.preimage_comp</span><span class=\"o\">],</span> <span class=\"c1\">-- (λ (x : α), x) ⁻¹' (f ⁻¹' (g ⁻¹' A)) = g ∘ f ⁻¹' A</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here is a simplified vesion of a problem I have: I want to split the function composition on the right using <code>set.preimage_comp</code>, but <code>rw</code> and <code>simp</code> seem to match an invisible <code>∘ id</code> on the left hand side of the equation. In this simplified scenario, I can of just use <code>symmetry</code> or <code>conv</code>, of course, but that's less beautiful for larger terms.<br>\nI believe this has to do with the fact that <code>∘</code> is marked as <code>reducible</code>. Is there a better way to do such rewrites that match on <code>∘</code>? Or is <code>set.preimage_comp</code> only expected to be used in rewrites in the opposite direction?<br>\n(I'm posting in <code>general</code> because I assume that the answers will be more about Lean itself than mathlib)<br>\nEdit: In this simple example, I might as well just use <code>exact set.preimage_comp.symm</code>, but this phenomenon happened for a more complicated term and I'm trying to understand if there's a way to do such rewrites conveniently in general.</p>",
        "id": 296894362,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662152238
    },
    {
        "content": "<p>In a situation similar to this I've fixed the problem by giving the rewrite lemma some explicit inputs.</p>",
        "id": 296900272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662155233
    },
    {
        "content": "<p>For example <code>rw [@set.preimage_comp α β],</code> closes the goal.</p>",
        "id": 296900526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662155389
    }
]