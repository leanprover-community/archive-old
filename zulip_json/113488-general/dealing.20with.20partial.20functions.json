[
    {
        "content": "<p>So I read <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/</a> and inspired by this I decided to try it out on some of my research. In particular, I'm formalizing some results in partial actions. I defined a partial action as something that has an instance of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Typeclass for partial scalar actions. `smul_defined a x` means that `a • x` is defined. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_partial_scalar</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_defined</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>After working out some of the theory, I introduced a bug in one of the proofs where I showed a filter converging to a • x and I had forgotten to check that a • x is defined. So it seems that this approach is liable to introduce bugs in proofs, which is what I wanted to avoid.</p>\n<p>At this point I'm thinking of defining partial actions as functions of type <code>M → α →. α</code> again. I had tried this approach before, but it introduces a lot of inconveniences, especially when dealing with filters mapped by such actions.</p>\n<p>I was wondering if there is a way to salvage the first approach to prevent subtle bugs from not checking that a • x is defined.</p>",
        "id": 280916875,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651517547
    },
    {
        "content": "<p>This is an unpopular opinion but I think the totalization approach is bad for situations involving a variable, largely undetermined function (like an action of a monoid on a set). It makes sense for specific functions like <code>x / y</code> or <code>deriv f</code>.</p>",
        "id": 280917756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651517971
    },
    {
        "content": "<p>Ah, I never thought about that.</p>",
        "id": 280918221,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651518148
    }
]