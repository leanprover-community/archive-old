[
    {
        "content": "<p>I'm trying to get the following to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constants</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">heq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">quot.exists_rep</span> <span class=\"n\">q</span> <span class=\"k\">in</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>It complains saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">Exists.dcases_on'</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I'm not sure what to do here. Any tips?</p>",
        "id": 272522440,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645282178
    },
    {
        "content": "<p>You should either use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.out\">docs#quot.out</a> or first define a map to <code>G × α</code> and then show it respects the quotient, so that it lifts to a map to <code>quot r</code>.</p>",
        "id": 272522576,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645282335
    },
    {
        "content": "<p>Let me try <code>quot.out</code>.</p>",
        "id": 272522689,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645282490
    },
    {
        "content": "<p>That works, but now I see another problem since I am trying to use this to make a <code>has_scalar</code> instance.</p>",
        "id": 272522791,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645282635
    },
    {
        "content": "<p>I guess I have to do it the longer way.</p>",
        "id": 272523008,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645282823
    },
    {
        "content": "<p>Yeah, it will be cleaner. I guess you'll have to prove it respects the quotient at some point anyway.</p>",
        "id": 272523059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645282860
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 272523355,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645283168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> the \"mathematician's approach\" of defining a function from a quotient by \"lift arbitrarily to the bigger type and then apply another function\" is not idiomatic Lean. The thing to use is <code>quotient.lift</code> and I just <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_A/section06quotients/quotients.html\">wrote something about this</a> for my course. The reason the <code>quotient.lift</code> approach is better because of the punchline -- the very last line I wrote.</p>",
        "id": 272523678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645283538
    },
    {
        "content": "<p>I see what you mean. In my work, the quotient is so obvious, it seems silly to check that it respects equivalance.</p>",
        "id": 272524929,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645285064
    },
    {
        "content": "<p>In the proof, I have to do a whole bunch of unfoldings (6 to be exact), in order to get back to the <code>def</code> defining the relation and then start simplying. Is there a tactic that will simplify things until it hits the definition of the relation?</p>",
        "id": 272525020,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645285170
    },
    {
        "content": "<p>You can use <code>change</code> to give directly the form of what you need.</p>",
        "id": 272525120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645285266
    },
    {
        "content": "<p>First time using <code>change</code>. Let's see if I can make it work.</p>",
        "id": 272525240,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645285386
    },
    {
        "content": "<p>Ah, it works pretty nicely. Cool. Thanks again.</p>",
        "id": 272525438,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645285604
    },
    {
        "content": "<p>My instinct is that you should be writing API to do this rather than using <code>change</code>. For example in the Lean code which went with the course notes I mentioned earlier I do things like <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/blob/3e050f06fdd0a384dbbcbf5c90c27a3faa60eaba/src/section06quotients/sheet1definitions.lean#L104-L107\">this</a> and <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/blob/3e050f06fdd0a384dbbcbf5c90c27a3faa60eaba/src/section06quotients/sheet2zmod37.lean#L56-L59\">this</a> because rewriting is a lot less hassle than <code>change</code> especially when you don't want to write down terms in full.</p>",
        "id": 272526116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645286393
    },
    {
        "content": "<p>It's good to know that you can put underscores in a <code>change</code> expression.</p>",
        "id": 272526262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645286477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/problem.20using.20quot.2Eexists_rep/near/272523678\">said</a>:</p>\n<blockquote>\n<p>I just <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_A/section06quotients/quotients.html\">wrote something about this</a> for my course. </p>\n</blockquote>\n<p>Typo at the link: octonians</p>",
        "id": 272526324,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645286548
    },
    {
        "content": "<p>Yeah, if I see myself using the same sort of <code>change</code> repeatedly, I'll write a <code>def</code> to make it easier.</p>",
        "id": 272527343,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1645287702
    }
]