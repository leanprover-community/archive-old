[
    {
        "content": "<p>RT? The current empty is at Type 0</p>",
        "id": 129158168,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530817981
    },
    {
        "content": "<p>just don't want to reinvent the wheel.<br>\nAlso wondering why empty is not universe polymorphic</p>",
        "id": 129158198,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530818027
    },
    {
        "content": "<p>What situation would it be an advantage for empty to be polymorphic?</p>",
        "id": 129158379,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530818189
    },
    {
        "content": "<p>oh wait, is lean's universe cumulative?</p>",
        "id": 129158418,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530818254
    },
    {
        "content": "<p>If you need <code>empty</code> in universe <code>u</code>, you can use <code>ulift.up.{u} empty</code>. <code>ulift</code> is a tool to fit objects of different universes together.</p>",
        "id": 129158419,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530818255
    },
    {
        "content": "<p>No, it's not</p>",
        "id": 129158425,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530818263
    },
    {
        "content": "<p>very nice, thank you.</p>",
        "id": 129158429,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530818270
    },
    {
        "content": "<p>we use <code>ulift</code> when we would need cumulativeness</p>",
        "id": 129158469,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530818283
    },
    {
        "content": "<p>In general, you should use universe variables as rarely as possible and use <code>ulift</code>. When you build definitions like <code>list</code>, you have no choice to make it universe polymorphic so that it can be used in various universes: <code>list : Type u -&gt; Type u</code>. That's because if <code>list : Type -&gt; Type</code>, there's no way of using lift on <code>a : Type 3</code> in order to have a <code>list a</code></p>",
        "id": 129158575,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530818433
    },
    {
        "content": "<p>ahh, can't understand the error<br>\nulift Type <br>\nnot match <br>\nType u</p>",
        "id": 129159229,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530819090
    },
    {
        "content": "<p>Can you show the code?</p>",
        "id": 129159286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530819133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def clause : list (Type u) â†’ Type u\n| ([]) := ulift.up.{u+1} empty\n| (x :: xs) := sum x $ clause xs\n</pre></div>",
        "id": 129159295,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530819151
    },
    {
        "content": "<p>Use <code>ulift empty</code> instead of <code>ulift.up empty</code>. <code>ulift.up</code> is something you use on a term. On a type, you use simply <code>ulift</code></p>",
        "id": 129159557,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530819442
    }
]