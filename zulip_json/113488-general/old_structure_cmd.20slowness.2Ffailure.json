[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/8683\">#8683</a>, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> suggested having a general intermediate in the algebra hierarchy of <code>div_inv_monoid</code>s with a lawful inv, such that <code>is_unit x → x * x⁻¹ = 1</code>. Here is my attempt at such a structure... Why is the elaboration slow? It seems like it can't infer the parent <code>monoid</code> structure, and chokes on <code>is_unit</code>. Is this related to <a href=\"#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Not.20finding.20typeclass.20in.20hypotheses</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.units</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[protect_proj, ancestor div_inv_monoid]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">cancel_inv_monoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">div_inv_monoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_inv_cancel'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cancel_inv_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- also not possible because `[monoid G]` isn't inferred, so `is_unit`, `⁻¹`, `*`, `1` all fail</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cancel_inv_monoid.inv_mul_cancel'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cancel_inv_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 253098891,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631543348
    },
    {
        "content": "<p>You missed <code>class</code> and wrote <code>structure</code>?</p>",
        "id": 253102952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631544779
    },
    {
        "content": "<p>Is there any example we care about when we have <code>cancel_inv_monoid</code> but we don't have <code>involutive has_inv.inv</code>?</p>",
        "id": 253163031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568297
    },
    {
        "content": "<p>If not, what do you think about including this as an axiom of <code>cancel_inv_monoid</code>?</p>",
        "id": 253163155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631568350
    },
    {
        "content": "<p>So the inverse that we have for matrices sends nonunit matrices to 0. Which means that inv is involutive on all matrices, but means that some properties are only true for unit matrices. The other possible definition could have been to send nonunit matrices to themselves. That also retains involutive inv, but constraints some other proofs.</p>",
        "id": 253168078,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631570736
    },
    {
        "content": "<p>That is to say, yes that is a good axiom to have. But I don't remember the details right now.</p>",
        "id": 253168144,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631570764
    },
    {
        "content": "<p>(one) good answer for the generalized inverse of a matrix is the Drazin inverse, <a href=\"https://en.wikipedia.org/wiki/Drazin_inverse?wprov=sfla1\">https://en.wikipedia.org/wiki/Drazin_inverse?wprov=sfla1</a>. Iirc this is a concept that makes sense in any semi group and coincides with the usual inverse for groups, the fun fact is that it is unique if it exists in any semigroup.</p>",
        "id": 253169104,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631571296
    },
    {
        "content": "<p>Doesn't this also give us a way to unify <code>map_inv</code> lemmas between <code>field</code> and <code>group</code> too?</p>",
        "id": 253169974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631571843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> No, because we still have to prove it for non-units.</p>",
        "id": 253172737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631573613
    },
    {
        "content": "<p>I need to revise my previous statement. Inv sending nonunits to 0 is not involutive. But inv_inv_inv is equal to inv. I don't remember at the moment why 0 is the preferred way, but when I worked through it, it gave easier proofs iirc.</p>",
        "id": 253184743,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631582535
    }
]