[
    {
        "content": "<p>This example illustrates behavior I am not able to explain. #check gives expected answers for sub-expressions, but not for <code>G.arr A B</code> unless I explicitly decorate <code>G.arr</code> with its type. But the example shows that #check already correctly inferred the type.</p>\n<p>Any ideas why?</p>\n<div class=\"codehilite\"><pre><span></span>class {u} graph (α : Type u) :=\n    (arr : α  → α  → Sort u)\n\nvariable α : Type 1\nvariables A B : α\nvariable G : graph α\n\n\n#check G         -- G : graph α\n#check G.arr     -- graph.arr : α → α → Type\n#check A         -- A : α\n#check G.arr A B -- error &quot;invalid field notation,\n                 -- function &#39;graph.arr&#39; does not have explicit argument\n                 -- with type (graph ...)&quot;\n#check (G.arr : α → α → Type) A B\n                 -- G.arr A B : Type   (as expected)\n</pre></div>",
        "id": 125761013,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1524811035
    },
    {
        "content": "<p>what does <code>#check @graph.arr</code> give?</p>",
        "id": 125761057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span>\n</pre></div>",
        "id": 125761061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811125
    },
    {
        "content": "<p>the <code>graph</code> is not the <strong>first explicit argument</strong> of <code>graph.arr</code>, so projection fails</p>",
        "id": 125761062,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811137
    },
    {
        "content": "<p>If you make it a <code>structure</code>, then you can use projections, as it becomes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">graph</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span>\n</pre></div>",
        "id": 125761070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811181
    },
    {
        "content": "<p><code> Π {α : Type u_1} [c : graph α], α → α → Sort u_1</code></p>",
        "id": 125761080,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1524811202
    },
    {
        "content": "<p>alternative solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">arr_proj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">α</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">arr_proj</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</pre></div>",
        "id": 125761161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811325
    },
    {
        "content": "<p>I think my problem is I don't quite understand how <code>[...]</code> arguments are dealt with. My intuition is that <code>G.arr</code> ought to resolve correctly to the right type. I see why your soln works, but not why mine does not. Anyway, thanks.</p>",
        "id": 125761175,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1524811437
    },
    {
        "content": "<p>I already told you</p>",
        "id": 125761220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811455
    },
    {
        "content": "<blockquote>\n<p>the <code>graph</code> is not the <strong>first explicit argument</strong> of <code>graph.arr</code>, so projection fails</p>\n</blockquote>",
        "id": 125761222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811460
    },
    {
        "content": "<p>Alternative solution, don't mention <code>G</code> at all</p>\n<div class=\"codehilite\"><pre><span></span>class {u} graph (α : Type u) :=\n    (arr : α  → α  → Sort u)\n\nvariable α : Type 1\nvariables A B : α\nvariable G : graph α\ninclude G\n\n#check graph.arr A B\n</pre></div>",
        "id": 125761223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524811461
    },
    {
        "content": "<p>when you use typeclass arguments (by marking <code>graph</code> as <code>class</code>), the idea is that you don't mention the variables of those types at all, they are inferred from context</p>",
        "id": 125761231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524811503
    },
    {
        "content": "<p>you win</p>",
        "id": 125761239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811517
    },
    {
        "content": "<p>Actually the usual way to write <code>G</code> there is <code>variable [graph α]</code> and skip the <code>include</code> line</p>",
        "id": 125761243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524811542
    },
    {
        "content": "<p>right, you don't give names to instances of class</p>",
        "id": 125761291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811594
    },
    {
        "content": "<p>confer how partial orders are defined</p>",
        "id": 125761293,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811606
    },
    {
        "content": "<p>and used</p>",
        "id": 125761294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524811610
    },
    {
        "content": "<p>Thanks both.</p>",
        "id": 125761349,
        "sender_full_name": "M. Andrew Moshier",
        "timestamp": 1524811772
    }
]