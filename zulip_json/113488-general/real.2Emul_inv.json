[
    {
        "content": "<p>I spent some time looking for the lemma <code>(a * b)⁻¹ = a⁻¹ * b⁻¹</code> for reals. I eventually found <code>mul_inv₀</code>, but it seems like this would be hard for someone to guess, or find in the docs. Can we make <code>real.mul_inv</code> an alias for the real version of this lemma?</p>",
        "id": 265869899,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640218685
    },
    {
        "content": "<p>I think this is pretty sensible; <code>mul_inv</code> for groups, <code>mul_inv₀</code> for groups with zero [like (R,*)]. I feel like it's surprising the first time but thenforth fine. Maybe in undergraduate mode...</p>",
        "id": 265869957,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640218759
    },
    {
        "content": "<p>I don't think we should provide aliases of a lemma about a typeclass for every instance of that typeclass.  That's what <code>library_search</code> is for.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 265871062,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640219548
    },
    {
        "content": "<p>More generally, do you know about the automation we have for such things, like <code>ring</code> and <code>field_simp</code>?</p>",
        "id": 265871082,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640219575
    },
    {
        "content": "<p>Yes I know about the automation, but in my case, <code>ring</code> and <code>field_simp</code> failed to resolve or make noticeable progress on the goal.<br>\nI suppose I could have tried <code>library_search</code>. I guess the reason I didn't here is that I decided that if the lemma existed, I would probably be able to find it by searching \"mul inv\" in the docs, but I did that and didn't find it. Then I went to the definition of <code>group_with_zero</code> in <code>algebra/group_with_zero/defs.lean</code> and didn't find it nearby, then later realized that what I needed was in <code>algebra/group_with_zero/basic.lean</code>.</p>",
        "id": 265871897,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640220430
    },
    {
        "content": "<p>I just felt my confusion would have been avoided if this lemma, which is identical to <code>mul_inv</code>, had the same name.</p>",
        "id": 265872004,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640220531
    },
    {
        "content": "<p>Perhaps I don't know as much about the proof automation as I think. Is there a single-tactic or two-tactic proof of the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">equality4</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265872396,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640220967
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equality4</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">real.log_ne_zero_of_pos_of_ne_one</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265872544,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640221146
    }
]