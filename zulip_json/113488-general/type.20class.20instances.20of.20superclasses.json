[
    {
        "content": "<p>Given roughly the following combination of classes and instances:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"n\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>do you also automatically get:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>such that the latter instance is the appropriate component of the former instance?</p>",
        "id": 128414454,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529582887
    },
    {
        "content": "<p>Depends on what you mean by \"automatically get\"</p>",
        "id": 128414483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529582986
    },
    {
        "content": "<p>typeclass inference should find it, but no additional def is made</p>",
        "id": 128414546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529583042
    },
    {
        "content": "<p>Let's assume I don't have a specific meaning and would welcome a precise definition of the phrase. <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 128414547,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529583045
    },
    {
        "content": "<blockquote>\n<p>typeclass inference should find it, but no additional def is made</p>\n</blockquote>\n<p>So, if <code>class A</code> included a def <code>aaa : a -&gt; bool</code> and you used <code>aaa</code> on <code>t : T</code>, this would use the implementation in <code>instance : B T</code>?</p>",
        "id": 128414628,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529583194
    },
    {
        "content": "<p>yes</p>",
        "id": 128414686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529583253
    },
    {
        "content": "<p>Interesting. But I would not be able to explicitly reference any definition of type <code>A T</code>: this is what you mean by “no additional def is made”?</p>",
        "id": 128414708,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529583330
    },
    {
        "content": "<p>typeclass inference would insert a term of the type <code>BtoA BT</code> rather than making an <code>AT</code> def and using that</p>",
        "id": 128414759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529583404
    },
    {
        "content": "<p>Okay. Does that <code>BtoA</code> have a name that you can <code>#print</code>?</p>",
        "id": 128414845,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529583558
    },
    {
        "content": "<p><code>B.to_A</code> I believe</p>",
        "id": 128414928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529583721
    },
    {
        "content": "<p>I just noticed that <code>lattice</code> is defined in the <code>namespace lattice</code>, resulting in <code>lattice.lattice</code> as the qualified name.</p>",
        "id": 128415195,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">instances</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128415218,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584190
    },
    {
        "content": "<p>Lots of <code>lattice.lattice</code>.</p>",
        "id": 128415225,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584201
    },
    {
        "content": "<p>Ah, here are the conversions for <code>lattice</code> to <code>semilattice_inf</code> and <code>semilattice_sup</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">...</span>\n<span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span>\n<span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_sup</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 128415328,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584316
    },
    {
        "content": "<p>Thanks, Mario!</p>",
        "id": 128415413,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584408
    },
    {
        "content": "<p>I suppose the goal of this feature is to reduce the number of instances one writes. However, it does make it more difficult to determine if <code>T</code> is an instance of <code>A</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">instances</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf_bot</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf_bot</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span>\n<span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf_top</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf_top</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span>\n<span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 128415592,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529584577
    },
    {
        "content": "<p>one trick for testing instance problems and getting the result is <code>#check (by apply_instance : T A)</code></p>",
        "id": 128416353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529585751
    },
    {
        "content": "<p>That works only if <code>A</code> is exactly the type of the instance. For example: <code>#check (by apply_instance : lattice.semilattice_inf (finset ℕ))</code> but not <code>#check (by apply_instance : lattice.semilattice_inf (finset α))</code>.</p>",
        "id": 128416816,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529586388
    },
    {
        "content": "<p>Also, that's a tool for diagnosing an issue. It doesn't help discovering all the instances, which I have found to be useful in Haskell (and would find useful in Lean).</p>",
        "id": 128416961,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529586630
    },
    {
        "content": "<p>Do you know about <code>#print instances</code>?</p>",
        "id": 128430586,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529604016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Did you see my uses of it above? <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 128458664,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529649797
    },
    {
        "content": "<p>oops! Sorry!</p>",
        "id": 128476919,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529679620
    }
]