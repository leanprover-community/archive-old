[
    {
        "content": "<p>What's going on here?<br>\n<a href=\"/user_uploads/3121/VVteqALCJqeqOxrJh4_igUWX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VVteqALCJqeqOxrJh4_igUWX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VVteqALCJqeqOxrJh4_igUWX/image.png\"></a></div>",
        "id": 264661943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639368453
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_mul\">docs#pow_mul</a></p>",
        "id": 264662002,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1639368524
    },
    {
        "content": "<p>I'm not seeing anything amiss, do you find something surprising about this lemma?</p>",
        "id": 264662086,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1639368676
    },
    {
        "content": "<p>That the LHS should look like <code>a ^ (m * n)</code>, otherwise it looks like <code>(a ^ m) * n</code>.</p>",
        "id": 264662134,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639368728
    },
    {
        "content": "<p>It seems like the parentheses are there in the code, I guess the doc-gen just removes them?</p>",
        "id": 264662277,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1639368984
    },
    {
        "content": "<p>docgen uses the pretty printer I think. But Lean itself displays the lemma correctly for me (if I just import the file that contains this lemma). Maybe there is some other notation elsewhere that confuses it?</p>",
        "id": 264662426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639369254
    },
    {
        "content": "<p>What if you import <code>all.lean</code>?</p>",
        "id": 264667722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639376213
    },
    {
        "content": "<p>What's the precedence of pow and *?</p>",
        "id": 264676342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639385033
    },
    {
        "content": "<p>Just to remark that pow is right associative and mul left associative</p>",
        "id": 264680131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639387485
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">^</span>  <span class=\"c1\">-- _ `^`:80 _:79 := has_pow.pow #1 #0</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">*</span>  <span class=\"c1\">-- _ `*`:70 _:70 := has_mul.mul #1 #</span>\n</code></pre></div>",
        "id": 264681474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639388301
    },
    {
        "content": "<p>Except, after doc-gen runs <code>open_all_locales</code> to agressively turn on notation, it becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">*</span>  <span class=\"c1\">-- _ `*`:9001 _:70 := has_mul.mul #1 #0</span>\n</code></pre></div>",
        "id": 264683777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639389640
    },
    {
        "content": "<p>Which is the fault of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/localized.lean#L122\">this line</a></p>",
        "id": 264683881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639389701
    },
    {
        "content": "<p>Feel free to submit a PR to ignore this notation (we already have a long list of ignored localized notation).</p>",
        "id": 264688726,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639392486
    },
    {
        "content": "<p>Do we want to ignore that notation though, for files about parsers?</p>",
        "id": 264690949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639393637
    },
    {
        "content": "<p>We can only ignore notations globally in doc-gen, so we don't really have a choice there.</p>",
        "id": 264691511,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639393977
    },
    {
        "content": "<p>Do you mean that in a \"that was the easiest thing to implement\" way, or \"there is no lean core API that would allow us to do anything different\"?</p>",
        "id": 264693145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639394944
    },
    {
        "content": "<p>In both ways, yes.  Right now we generate all documentation in the same tactic call (with the same open locales).  Maybe we can now open locales programmatically (using <code>run_parser</code>), but it would be a bit of refactoring.</p>",
        "id": 264694753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639395952
    }
]