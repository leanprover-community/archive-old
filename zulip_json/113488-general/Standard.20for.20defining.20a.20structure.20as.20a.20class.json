[
    {
        "content": "<p>In what cases should a structure be defined as a class. E.g. it seems that algebraic structures such as group, ring, etc. are always defined as classes while on the other hand a topological space is not defined as a class. Doesn't defining say <code>Group</code> as a class make it so that every type has one (or zero) \"canonical\" group structure(s)? This seems like it is generally ok, but might cause problems/confusion. Do we just declare different types for each group structure on the same \"underlying set\" (in math terms)? E.g. is there a type for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and a different one for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_2 \\times \\mathbb{Z}_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 198669186,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590413543
    },
    {
        "content": "<p>This is a really hard question. Fortunately the number of definitions which you'll make in any exposition of a theory is quite small, so you can just ask individually about each case. This is an implementation issue. The general rule is \"if there will surely only be one such structure on your type, make it a class\". So groups are classes because in general one does not put more than one group structure on a type (=set), and topological spaces are not, at least for some of the exposition, because for some of it people wanted to consider lots of topologies on one set.</p>",
        "id": 198669433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590413713
    },
    {
        "content": "<p>But for some definitions (like group homomorphisms), they have been implemented in more than one way  -- once using classes and once not, and the community has just experimented and found out which was best. If we'd known from the start, this experiment would not have occurred. There is a directory called <code>deprecated</code> where the bad decisions are put, and a lot of these are class related.</p>",
        "id": 198669615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590413817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300684\">Keefer Rowan</span> <a href=\"#narrow/stream/113488-general/topic/Standard.20for.20defining.20a.20structure.20as.20a.20class/near/198669186\">said</a>:</p>\n<blockquote>\n<p>E.g. is there a type for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and a different one for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_2 \\times \\mathbb{Z}_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>\n</blockquote>\n<p>Of course! Why would you want them to be the same?!?</p>",
        "id": 198669982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590414076
    },
    {
        "content": "<p>if you're in ZFC and are a beginner in group theory you might think that they are two group structures on the set {e,a,b,c}</p>",
        "id": 198670114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590414151
    },
    {
        "content": "<p>If you're into ZFC then you might think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as being a group structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1,2,3\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_2^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span> as being a group structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">}</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 198670190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414207
    },
    {
        "content": "<p><code>topological_space</code> is actually made into a class shortly after its definition. This style gives the field accessors more convenient types for when one does want to consider topologies explicitly as objects (mostly indeed because one wants to consider multiple topologies on the same type).</p>",
        "id": 198670194,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590414209
    },
    {
        "content": "<p>Maybe the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_2^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span> example wasn't the best since <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's point holds, I just wanted a simple example of distinct algebraic structures that could be realized on the same underlying set.</p>",
        "id": 198670431,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590414351
    },
    {
        "content": "<p>Did you know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is undecidable in Lean? Your concept of \"the same underlying set\" is surprisingly misleading when it comes to type theory.</p>",
        "id": 198670516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  how does making <code>topological_space</code> into a class help when considering multiple topologies on the type?</p>",
        "id": 198670528,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590414405
    },
    {
        "content": "<p>I'm not aware of any foundational system where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">4</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>×</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2 \\times \\mathbb{Z}/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span> would have the same underlying whatever</p>",
        "id": 198670571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590414438
    },
    {
        "content": "<p>The category of sets up to isomorphism</p>",
        "id": 198670586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414450
    },
    {
        "content": "<p>the discrete and indiscrete topology have the same underlying set</p>",
        "id": 198670603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590414464
    },
    {
        "content": "<p>If <code>t1 t2 : topological_space \\a</code> then you can write, for example <code>\\forall s, t1.is_open s -&gt; t2.is_open s</code>. If <code>topological_space</code> was a class from the start then <code>t1</code> would not be an explicit topology and writing this would require contortions.</p>",
        "id": 198670676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590414499
    },
    {
        "content": "<p>What's this category? What are the homs in the category of sets up to isomorphism?</p>",
        "id": 198670686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590414502
    },
    {
        "content": "<p>I guess group structures on the same torsor can be different</p>",
        "id": 198670695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590414509
    },
    {
        "content": "<p>But this is the point -- mathematicians don't need to think clearly about what it means for two things to be \"the same\", so they assume that lots of things are the same when they're not actually syntactically equal (because this is a good way to think about mathematics).</p>",
        "id": 198670711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414527
    },
    {
        "content": "<p>Kenny, that's why we have predicate classes saying something is discrete</p>",
        "id": 198670717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590414532
    },
    {
        "content": "<p>Given a compact Riemann surface of genus 1 (what a complex geometer might call an elliptic curve) you can choose a point on it and get a group structure (what an algebraic geometer might call an elliptic curve).</p>",
        "id": 198670813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414601
    },
    {
        "content": "<p>is it a torsor?</p>",
        "id": 198670882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590414626
    },
    {
        "content": "<p>It's a torsor for its Jacobian</p>",
        "id": 198670889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414635
    },
    {
        "content": "<p>But this won't cause problems in Lean because one can just make a wrapper type, which is not syntactically equal to the curve, and put a group structure on that instead.</p>",
        "id": 198670945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590414691
    },
    {
        "content": "<p>One more related question: why would you make <code>has_norm</code> or <code>normed_space</code> a class from the start?  In the infinite dimensional cases, it certainly can make sense to put two different norms on the same space.</p>",
        "id": 198671214,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590414852
    },
    {
        "content": "<p>Often the reason is notation, e.g., writing <code>g.mul a b</code> where <code>g : group \\a</code> gets old quickly</p>",
        "id": 198671267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590414892
    },
    {
        "content": "<p>But isn't the main purpose of using different norms that one really has different spaces, or at least different normed spaces?</p>",
        "id": 198671424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590414979
    },
    {
        "content": "<p>Basically we imagine that the type together with its instances form a single thing--but working with them unbundled has some advantages, like we can change our mind about which instances we include at different points.</p>",
        "id": 198671518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590415057
    },
    {
        "content": "<p>There are always ways of doing what you want to do. Whether or not something should be a structure or a class, or more generally the question of how one takes a mathematical concept and turns it into a term in Lean 3's dependent type theory, is not something which can be solved by an algorithm -- this is an experimental science, and as mathlib grows we are learning more and more about it. Lean 4 will be similar, but not the same as, Lean 3, and some answers might change.</p>",
        "id": 198671632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590415122
    },
    {
        "content": "<p>I guess you just mean \"why not do the same thing for <code>normed_space</code> as for <code>topological_space</code>\". I guess the need just doesn't come up. In topology, we use different topologies on the same space <em>a lot</em> (for example to characterize continuous maps, or to define the product topology, or many other things).</p>",
        "id": 198671650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590415140
    },
    {
        "content": "<p>I think I'm getting a good general picture. Thanks all!</p>",
        "id": 198671805,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590415265
    },
    {
        "content": "<p>Maybe this wasn't said above, but it's important to remember that typeclass inference works on a syntactic, rather than definitional level.</p>\n<p>This means that you can define \"type synonyms\" (e.g. just as <code>def Y : Type := X</code>), and give the two different \"names-for-the-same-type\" different instances.</p>",
        "id": 198675553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590417562
    },
    {
        "content": "<p>Basically, we use classes if \"in majority of cases\" we have a canonical structure and want Lean to automatically find it for us. If we have a few structures on the same type, then we use type synonyms (e.g., <code>nat</code> and <code>multiplicative nat</code>).</p>",
        "id": 198685069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424144
    },
    {
        "content": "<p>It doesn't work if we want to deal with the type of structures on a type (e.g., all topological space structures).</p>",
        "id": 198685226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590424254
    }
]