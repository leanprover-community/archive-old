[
    {
        "content": "<p>Sometimes in Lean you sit down to write a definition or a theorem, knowing that it will be really easy and fun. I was just in that situation. I need to write down some maps between localized rings and prove that they have some properties, but now I know that the localization interface is excellent and that pretty much every single one of my proofs will look like <code>name_of_function _ _ _ _ _</code>.</p>",
        "id": 125425455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219103
    },
    {
        "content": "<p>However, I have run into an unexpected annoyance.</p>",
        "id": 125425597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219122
    },
    {
        "content": "<p>Here is my skeleton set-up.</p>",
        "id": 125425716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219137
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">loc_loc_is_loc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Spec</span><span class=\"bp\">.</span><span class=\"n\">D&#39;</span> <span class=\"n\">g</span> <span class=\"err\">⊆</span> <span class=\"n\">Spec</span><span class=\"bp\">.</span><span class=\"n\">D&#39;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">away</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≃ᵣ</span> <span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">away</span> <span class=\"o\">(</span><span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">of_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">powers</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_ring_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 125425811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219151
    },
    {
        "content": "<p>The idea now is that I just fill in all the holes one by one.</p>",
        "id": 125426022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219179
    },
    {
        "content": "<p>But I want the holes to have red squiggles under them!</p>",
        "id": 125426090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219193
    },
    {
        "content": "<p>And for some reason, only the last one does</p>",
        "id": 125426138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219201
    },
    {
        "content": "<p>and the associated complaint is full of metavariables</p>",
        "id": 125426449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219248
    },
    {
        "content": "<p>because it depends on some earlier holes</p>",
        "id": 125426465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219257
    },
    {
        "content": "<p>begin end</p>",
        "id": 125426472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524219259
    },
    {
        "content": "<p>and then remove it later?</p>",
        "id": 125426501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219267
    },
    {
        "content": "<p>because it's a def</p>",
        "id": 125426565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219274
    },
    {
        "content": "<p>i just fill in stuff in front of begin end</p>",
        "id": 125426587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524219278
    },
    {
        "content": "<p>I mean, replace your _ with begin end</p>",
        "id": 125426641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524219284
    },
    {
        "content": "<p>I can show you that in person next week ^^</p>",
        "id": 125426744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524219300
    },
    {
        "content": "<p><code>begin exact _ end</code></p>",
        "id": 125426832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219311
    },
    {
        "content": "<p>:-)</p>",
        "id": 125426834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219314
    },
    {
        "content": "<p>Many thanks Kenny!</p>",
        "id": 125426835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219317
    },
    {
        "content": "<p>I feel like there are so many little tips like this, and it's unclear to me where they should be put.</p>",
        "id": 125427174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524219363
    },
    {
        "content": "<p>you don’t need exact _</p>",
        "id": 125427447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524219413
    }
]