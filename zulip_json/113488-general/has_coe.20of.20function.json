[
    {
        "content": "<p>Are there any problems with a coercion of a function?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β₁</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">β₁</span> <span class=\"n\">β₂</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>where <code>embedding</code> is a structure.</p>",
        "id": 131112779,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533739556
    },
    {
        "content": "<p>does it work?</p>",
        "id": 131112953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533739761
    },
    {
        "content": "<p>I don't see any obvious issues that it would cause, although it might not work</p>",
        "id": 131113020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533739807
    },
    {
        "content": "<p>In one place, <code>↑</code> worked. In another, I had to use <code>: sigma.embedding β₁ β₂</code>.</p>",
        "id": 131113066,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533739902
    },
    {
        "content": "<p>If <code>B1</code> and <code>B2</code> are metavariables, it will have trouble</p>",
        "id": 131113128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533739969
    },
    {
        "content": "<p>I now recall seeing issues like this with the coercion from <code>order_iso</code> to <code>order_embedding</code></p>",
        "id": 131113168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533740032
    },
    {
        "content": "<p>Hmm. If I have to use an annotation, it's not really worth it.</p>",
        "id": 131113221,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533740056
    },
    {
        "content": "<p>Yeah, function coercions only trigger if there are no metavariables at all.  This includes universe metavariables as well.</p>",
        "id": 131114775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533741827
    },
    {
        "content": "<p>It might be worth defining your own up arrow instead (e.g. <code>⟰</code>)</p>",
        "id": 131130618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533759647
    },
    {
        "content": "<p>I'm actually working through a similar issue, but where I want coercions to trigger over. type with. a single parameter.  I have two types <code>reg : type -&gt; Type</code> and <code>lhs : type -&gt; Type</code>, and <code>\\forall tp, has_coe (reg tp) (lhs tp)</code> that I want to trigger even when <code>tp</code> contains metavariables.</p>",
        "id": 131136017,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533767025
    },
    {
        "content": "<p>I wish there was some way to control how defined a term had to be before searching for coercions.</p>",
        "id": 131136165,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533767220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@jhx</span> Yes, that is the biggest issue of using type class inference for coercions. We definitely want to fix this in the future, but we don't have a convincing alternative design yet <a href=\"https://github.com/leanprover/lean/issues/1402\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1402\">https://github.com/leanprover/lean/issues/1402</a></p>",
        "id": 131147896,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1533785823
    },
    {
        "content": "<p>As a workaround, I've introduces a type class <code>has_coe1</code>, and explicitly tell the functions that expect an argument of the given type to use it.</p>\n<div class=\"codehilite\"><pre><span></span>class has_coe1 {α:Sort w} (f : α → Sort u) (g : α → Sort v) := (coe : Π{a : α}, f a → g a)\n\ninstance has_coe1_refl (α:Sort w) (f : α → Sort u) : has_coe1 f f := ⟨λa f, f⟩\ninstance all_reg_is_lhs   : has_coe1 reg lhs := sorry\n\n...\n\nsection\nparameter {f:type → Type}\nparameter [has_coe1 f value]\n\ndef sext {w:ℕ} {f} [has_coe1 f value] (x:f (bv w)) (o:ℕ) : value (bv o) := ...\n</pre></div>\n\n\n<p>This approach might provide a more general solution to the monad special case mentioned in issue 1402, but still feels fairly special case.</p>",
        "id": 131152344,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1533793668
    }
]