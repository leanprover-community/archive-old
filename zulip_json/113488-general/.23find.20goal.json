[
    {
        "content": "<p>I occasionally find myself in the situation where I would like to know if there is a theorem that I can apply to the current goal (in tactic mode). It would be nice if I could run a tactic <code>find_goal</code> that does not change the proof state, but just prints messages of the theorems that I could apply. Is this reasonable?</p>",
        "id": 125929630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525150994
    },
    {
        "content": "<p>Interesting idea. But I bet there would be too many theorems that would always apply, like <code>eq.symm</code> or <code>iff.symm</code>. How to reject the uninteresting ones?</p>",
        "id": 125929697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525151125
    },
    {
        "content": "<p>An idea I have contemplated as a crude relevance filter is measuring the degree to which the target matches the theorem (i.e. how many exact symbol matches before it starts instantiating metavariables). This could be combined with a (harsh?) penalty for the number of new metavariables not in the goal</p>",
        "id": 125929901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525151508
    },
    {
        "content": "<p>But the only obvious way I see to implement this is literally to <code>try{apply T}</code> for all T in the environment, so it will be very slow</p>",
        "id": 125929940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525151547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 125931438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525155014
    }
]