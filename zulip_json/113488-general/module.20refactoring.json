[
    {
        "content": "<p>I'm a bit late for my birthday deadline, but I have enough of the refactoring done that I'm ready to get feedback on it. See <a href=\"https://github.com/leanprover/mathlib/compare/master...leanprover-community:module\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/compare/master...leanprover-community:module\">leanprover-community/module</a>. Remarks:</p>\n<ul>\n<li>The main contributions here are the complete bundling of <code>linear_map</code> and <code>submodule</code>. In fact both of these were already present in mathlib, but making them primary makes everything go so much smoother.</li>\n<li>The structure of <code>submodule</code> and its category-theory-like interactions with <code>linear_map</code> are emphasized heavily. In particular, <code>submodule</code> is a complete lattice, <code>map</code> and <code>comap</code> are galois connections, there are tons of theorems about the map of an inf or the comap of fst and so on.</li>\n<li>The amount of duality here is staggering. I guess someone who is category theory minded will tell me that Mod is its own opposite category or some such thing, but it really shows in the equational theory. Even stuff like <code>inl</code> being dual to <code>fst</code> causes some nice properties, and some stuff plays even nicer than on Set like <code>prod p q ⊔ prod p' q' = prod (p ⊔ p') (q ⊔ q')</code>.</li>\n<li>Injectivity and surjectivity of linear maps is expressed through <code>ker</code> and <code>range</code> (should I call it <code>im</code>?), and even <code>linear_independent</code> and <code>basis</code> can be expressed using properties of the <code>lc.total</code> function.</li>\n</ul>\n<p>On the whole, I'm feeling really good about the results, and the proofs are much cleaner.</p>",
        "id": 134359525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537511489
    },
    {
        "content": "<p>This is really cool! And yes, please call use <code>im</code> <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 134359600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537511623
    },
    {
        "content": "<p>The name <code>range</code> is of course borrowed from terminology on <code>set</code>. I would rather not confuse with <code>image</code> which is <code>map</code> here</p>",
        "id": 134359655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537511669
    },
    {
        "content": "<p><code>map f p</code> is the submodule <code>f[p]</code> where <code>p</code> is a submodule, and <code>range f = map f \\top = f[univ]</code> which was previously called <code>im</code> on linear maps</p>",
        "id": 134359741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537511763
    },
    {
        "content": "<p>What is the common name for the coproduct pairing function? I called it <a href=\"https://github.com/leanprover-community/mathlib/blob/45f72059515083a0ae74567432dfc7853f791235/linear_algebra/basic.lean#L113-L114\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/45f72059515083a0ae74567432dfc7853f791235/linear_algebra/basic.lean#L113-L114\"><code>copair</code></a> since <code>pair</code> is used for the product pairing operation</p>",
        "id": 134359814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537511891
    },
    {
        "content": "<p>but it's the same...</p>",
        "id": 134360028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537512179
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> have the most experience with such decisions</p>",
        "id": 134360049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537512216
    },
    {
        "content": "<p>this is really nice!</p>",
        "id": 134363426,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537516985
    },
    {
        "content": "<p>Mario, could you explain how all this solves the trouble we had with instance loops and multiple possible base rings?</p>",
        "id": 134364133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537518075
    },
    {
        "content": "<p>I got caught up with something else this morning but later on today, when I have Lean time, I will just merge the patch and see how Hilbert basis goes with it. Does it compile sorry-free?</p>",
        "id": 134370222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537527094
    },
    {
        "content": "<p><code>copair</code>/<code>pair</code> seems as good as anything else.<br>\nNormally we just write an arrow <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>⊕</mo><mi>B</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\oplus B \\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">⊕</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span> and let the reader do the boring work of figuring out what map we are actually talking about.</p>",
        "id": 134370418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537527382
    },
    {
        "content": "<p>how about product or coproduct as a bifunctor?</p>",
        "id": 134370446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537527429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  This doesn't address that issue, although it prepares the way a bit. I anticipate that this should be a comparatively simple change, but I didn't want the two refactorings to interact so I'm going to start on it as soon as this is done.</p>",
        "id": 134388143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537546884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's not yet building. I finished the main linear algebra files, but I haven't finished up the cleanup of uses outside linear algebra. (There are no sorries, it just breaks.)</p>",
        "id": 134388211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537546971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> by the way: the introduction of <code>coe</code> rewrites broke some proofs in <code>set_theory/ordinal</code> and <code>cofinality</code>. I fixed this, but you might want to do a different fix</p>",
        "id": 134388442,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537547199
    },
    {
        "content": "<p>yeah, apologies for pushing stuff last night that broke things; my computer was running very slow and I was lacking feedback on whether my fixes worked</p>",
        "id": 134389089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537547969
    },
    {
        "content": "<p>No problem. But I'm not sure if these are the intended changes. I didn't look too deep how these new simp rules are supposed to work.</p>",
        "id": 134389417,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537548306
    },
    {
        "content": "<p>The idea is that <code>coe</code> will infer transitive instances, but since simp rules are only written on single coercions they won't fire on these composite instances. So we unfold them to multiple coe arrows first</p>",
        "id": 134389493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537548377
    },
    {
        "content": "<p>I don't think I realized this until lately, but lean will also infer transitive instances for <code>coe</code> + <code>coe_fn</code> and <code>coe</code> + <code>coe_sort</code>, and since the instances are different there are more simp lemmas associated to these</p>",
        "id": 134389521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537548454
    },
    {
        "content": "<p>I think the breakage is because some simp LHSs were written with composite instances, which now break because simp normal form doesn't have any composite instances. The fix is to make sure simp LHSs have multiple coercion in these cases</p>",
        "id": 134389602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537548549
    },
    {
        "content": "<p>Ok, I'm less confused then (about modules, I'm still 100% confused about topological groups). I couldn't understand how those changes could help with the lost ring issue</p>",
        "id": 134390066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537549084
    },
    {
        "content": "<p>Is it worth bundling ideals and subgroups as well?</p>",
        "id": 134390560,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537549526
    },
    {
        "content": "<p>I think we should replace ideals by submodules, so yes we want to have them bundled. I'm not sure about subgroups. We surely want a bundled version, but maybe still an unbundled one too</p>",
        "id": 134391051,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537549936
    },
    {
        "content": "<p>Johannes -- the idea about ideals was that submodule R M makes sense for varying R and M, but ideal R = submodule R R so only one input is needed.</p>",
        "id": 134392526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537551412
    },
    {
        "content": "<p>But I think you want lattice and semiring on ideals as well, so you need bundles for that.</p>",
        "id": 134392890,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537551809
    },
    {
        "content": "<p>I am of the opinion that <code>subgroup</code> and other such algebraic classes should also be bundled; almost all of the lattice structure theorems done here hold for anything that fits the structure of a universal algebra. <code>ideal R := submodule R R</code> can be defined as reducible so that all the theorems about submodules still apply.</p>",
        "id": 134396604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537555481
    },
    {
        "content": "<p>What are some examples where you think not having <code>is_sub*</code> will cause problems?</p>",
        "id": 134396657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537555553
    },
    {
        "content": "<blockquote>\n<p><code>ideal R := submodule R R</code> can be defined as reducible so that all the theorems about submodules still apply.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I thought you said in Orsay that you couldn't think of any reason why a definition should be reducible. Has that changed? If so, can you explain?</p>",
        "id": 134403252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537562294
    },
    {
        "content": "<p>If I open polynomial.lean (which I need for Hilbert basis) I just get 1000 errors. I think I would be happier to give feedback by trying to write Lean code and then getting stuck or finding things easier than before and reporting back. I find it hard to theorise about changes that I may not fully understand.</p>",
        "id": 134412301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537573251
    },
    {
        "content": "<p>Yeah, sorry about that. Mostly you can just open and read <code>algebra.module</code> and <code>linear_algebra.basic</code> for now. I'll let you know when it's really done (by pushing it to <code>master</code>, unless someone objects)</p>",
        "id": 134414013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537575984
    },
    {
        "content": "<p>I just didn't want to get too far afield with a change this sweeping without some input</p>",
        "id": 134414027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537576046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> That's a fair point. There are three options here: (1) nonreducible def (2) reducible def (3) notation. In Orsay I argued that either (1) or (3) suffices in most cases where you think you want (2).</p>\n<p>In this case, I don't think it matters too much, although (1) will require copying some instances like the <code>complete_lattice</code> instance, and possibly some theorems. Doing this would make the cleanest separation, allowing us to present a solid API for ideals that doesn't talk about modules half the time. (2) and (3) will entail some amount of API leakage here, moreso with (3) since it is <code>submodule R R</code> that will appear in all your statements. </p>\n<p>The downsides of reducible defs (inconsistent handling in rw and simp) don't really apply when the def is a type since you don't usually do rewrites on a type, you just force it to be defeq to something else.</p>",
        "id": 134414217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537576436
    },
    {
        "content": "<p>This is a change I haven't implemented, but I'm considering it and want to get some feedback. Maybe a basis should be an injective function from some type into the module, i.e. the \"basis\" is really the range of this function, and the function gets to pick its indexing type. The reason is because we often tend to use a basis as an index for a sum, or as the domain of the free vector space to which to express isomorphism, or as the set whose cardinality is the dimension of the space - all of these roles are better accommodated by having an algebra of indexing types (which we already have courtesy of DTT) where measuring cardinality and indexing is more natural. (Also, it allows a basis to carry computational content, which isn't super important but indicates that this might be moving in the right direction.)</p>",
        "id": 134781266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538092013
    },
    {
        "content": "<p>From a mathematical perspective this change is very natural. We often write things like \"let {b_1, ..., b_n} be a basis of V\" but usually (whether we are aware of it or not) we really mean we are working with an indexed collection b_i, i.e., a function {1, ..., n} -&gt; V.</p>",
        "id": 134781707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538092792
    },
    {
        "content": "<p>It's easy to say things which are false if taken literally in the \"set style\". For example: {x, y} is a linearly independent set in a vector space if and only if there do not exist nonzero a, b such that ax + by = 0. Well, not if x = y!</p>",
        "id": 134781777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538092831
    },
    {
        "content": "<p>On the other hand there are occasionally times when you genuinely need to work with subsets because you want to use the order structure and/or know that the collection of all possible bases is small, for example when proving that every vector space has a basis</p>",
        "id": 134781792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538092890
    },
    {
        "content": "<p>I think the statement about every vector space has a basis will explicitly use subsets</p>",
        "id": 134781797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538092917
    },
    {
        "content": "<p>I think the function approach is not really restrictive then anyways. You just say \"a subset such that the inclusion is a basis\".</p>",
        "id": 134781842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538092947
    },
    {
        "content": "<p>i.e. every vector space has a basis where the function is the subtype coercion and the indexing set is a subtype of the vector space</p>",
        "id": 134781853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538092958
    },
    {
        "content": "<p>(By the way, injectivity of the function is a consequence of being a basis, not a precondition.)</p>",
        "id": 134781855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538092973
    },
    {
        "content": "<p>I agree, I think under most circumstances you should be able to prove injectivity, except in trivial cases and in those cases you probably don't want to impose it additionally</p>",
        "id": 134781869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538093018
    },
    {
        "content": "<p>(bases over the zero ring are weird)</p>",
        "id": 134781913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538093048
    },
    {
        "content": "<p>Hmm... yes</p>",
        "id": 134781932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538093100
    },
    {
        "content": "<p>speaking of which... <code>unit</code> should be a ring</p>",
        "id": 134781956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538093147
    },
    {
        "content": "<p>it would fit nicely with the ring instance for products and Pis</p>",
        "id": 134781998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538093185
    },
    {
        "content": "<p>The nlab definition of basis is: A basis of a free R-module M (possibly a vector space, see basis of a vector space) is a linear isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mo separator=\"true\">:</mo><mi>M</mi><mo>→</mo><msub><mo>⊕</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">B\\colon M \\to \\oplus_{i\\in I}R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8607em;vertical-align:-0.17737em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">:</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> to a direct sum of copies of the ring R, regarded as a module over itself.</p>",
        "id": 134782068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538093296
    },
    {
        "content": "<p>I think this kind of property is more important than \"for all i /= j, b_i /= b_j\"</p>",
        "id": 134782086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538093343
    },
    {
        "content": "<p>... if you find yourself having to make some decision regarding the zero ring</p>",
        "id": 134782104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538093370
    },
    {
        "content": "<p>Yes okay, now I see you were saying the same thing regarding definition of bases over the zero ring</p>",
        "id": 134782355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538093711
    },
    {
        "content": "<p>so what does this say about linearly independent sets?</p>",
        "id": 134783593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538095676
    },
    {
        "content": "<p>I guess these should also be indexed</p>",
        "id": 134783641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538095725
    },
    {
        "content": "<blockquote>\n<p>speaking of which... <code>unit</code> should be a ring</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</pre></div>",
        "id": 134785061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538098296
    },
    {
        "content": "<p>Good luck golfing that...</p>",
        "id": 134785183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538098496
    },
    {
        "content": "<p>I'm pretty sure that <code>tidy</code> will also prove for you that it is the terminal object in <code>Ring</code> and <code>CRing</code></p>",
        "id": 134785315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538098736
    },
    {
        "content": "<p>I must confess I was surprised when I first saw that in Lean a basis was a subset. Mulling over this, I realised that it was because I was used to teaching students about bases of <em>finite-dimensional</em> vector spaces -- and this is not a conversation about bases, this is also a conversation about the concepts of linear independence and spanning -- and in these cases it seems more convenient when developing the theory to be considering lists of elements rather than subsets (so order matters, and repeats are OK). For a dumb example, consider the zero ring <code>R</code>. Then <code>R^3=R</code> and hence I want <code>[0,0,0]</code> to be a basis for <code>R</code>, which it is. This is the only case where bases can have repeated elements and also the only case where bases can have different cardinalities. A less pathological example is that if a basis of a fdvs is a list then a linear map is a matrix, rather than some weird concept of a matrix where we don't mind permuting the rows and columns which we'd get for sets. My students did a bunch of stuff involving this over the summer -- linear maps = matrices and so on -- and although their code is probably not mathlib-ready it would not surprise me if they had worked out some good useful and correct statements.</p>\n<p>The only situation I know where subsets are better than maps from a type is in the Zorn proof that every vector space has a basis. But this result is in some sense a bit of a novelty, my impression is that working mathematicians very rarely think about infinite-dimensional vector spaces with no extra structure at all, and if there is extra structure (a topology or whatever) then the abstract notion of a basis is usually not what we want anyway (c.f. \"basis\" of a Hilbert space = lin ind subset with dense span).</p>",
        "id": 134807675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538120895
    },
    {
        "content": "<p>If we are refactoring modules... would it make sense to rename <code>span</code> to <code>generate</code>? It would be more in line with all the other forms of <code>generate</code>...</p>",
        "id": 135187101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538661045
    },
    {
        "content": "<p>I was actually thinking about going the other way :)</p>",
        "id": 135193289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538664103
    },
    {
        "content": "<p>specifically as relates to other \"closure\" operations e.g. subgroup closure and normal closure</p>",
        "id": 135193368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538664149
    },
    {
        "content": "<p>For set-of-set operations like <code>filter</code> and <code>topology</code> I prefer <code>generate</code>, but maybe that's not principled enough</p>",
        "id": 135193424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538664199
    },
    {
        "content": "<p>I agree some uniformity of naming would be a good thing</p>",
        "id": 135193452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538664233
    },
    {
        "content": "<p>Ok, I don't really care which one gets chosen <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 135193845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538664564
    },
    {
        "content": "<p>So I've got to working on <code>ideal</code> now, and I have come to realize that ideal theory is not simply a specialization of submodule theory. It's obvious in hindsight, but as a category the homs are different - a ring hom is not a linear map, and a linear map is not a ring hom</p>",
        "id": 135377864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538970344
    },
    {
        "content": "<p>So this means that things like <code>map</code> and <code>comap</code> don't work the same way on rings</p>",
        "id": 135377912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538970369
    },
    {
        "content": "<p>In particular I don't even think there is a notion of <code>ideal.map</code> unless you assume the map is surjective</p>",
        "id": 135377924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538970406
    },
    {
        "content": "<p>Is there a way to make sense of a ring-changing hom from (R,M) to (R',M') modules?</p>",
        "id": 135378146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538970818
    },
    {
        "content": "<p>Perhaps there's a notion of a map (R,M) to (R',M') as a linear map f : M to M', and a ring hom g : R' to R (note this is backwards), satisfying g(r') m = r' f(m).</p>",
        "id": 135378473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971370
    },
    {
        "content": "<p>I'm not sure it's particularly useful.</p>",
        "id": 135378476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971381
    },
    {
        "content": "<p>yeah I was thinking the ring part might end up contravariant</p>",
        "id": 135378488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538971410
    },
    {
        "content": "<p>so I guess this does not generalize ring homs as maps (R,R) -&gt; (R', R')</p>",
        "id": 135378490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538971439
    },
    {
        "content": "<blockquote>\n<p>Is there a way to make sense of a ring-changing hom from (R,M) to (R',M') modules?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What exactly do you mean with this question?</p>",
        "id": 135378925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972261
    },
    {
        "content": "<p>I wonder if there is a common generalization of ring homs, (R,R) -&gt; (R', R') and linear maps (R,M) -&gt; (R, M')</p>",
        "id": 135378968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972309
    },
    {
        "content": "<p>is there a category theory operation for taking a \"total space\" over the categories R-Mod where R is an object in the category Ring?</p>",
        "id": 135378976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972366
    },
    {
        "content": "<p>Sure.</p>",
        "id": 135378980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972379
    },
    {
        "content": "<p>That's a fibered category</p>",
        "id": 135378985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972384
    },
    {
        "content": "<p>And this one is one of the first examples</p>",
        "id": 135378994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972395
    },
    {
        "content": "<p>A map <code>(R,M) → (R',M')</code> is a pair <code>R → R'</code> + <code>R' \\otimes_R M → M'</code>. (Or do I need commutativity for that tensor product?)</p>",
        "id": 135379047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972464
    },
    {
        "content": "<p>Yes, I do.</p>",
        "id": 135379051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972476
    },
    {
        "content": "<p>This doesn't work for arbitrary <code>R → R'</code>.</p>",
        "id": 135379052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Were you planning on doing left- right- and two-sided-ideals?</p>",
        "id": 135379094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972546
    },
    {
        "content": "<p>Or only ideals in comm_rings?</p>",
        "id": 135379097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972553
    },
    {
        "content": "<p>Just comm ring ideals, since that's what's there now</p>",
        "id": 135379102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972581
    },
    {
        "content": "<p>Ok, so for comm_ring modules you get this really nice fibered category <code>Mod</code>.</p>",
        "id": 135379107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972606
    },
    {
        "content": "<p>Is that what you were looking for?</p>",
        "id": 135379109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972614
    },
    {
        "content": "<p>Note that by adjunction you can also just give a map <code>M → M'</code> that is <code>R</code>-linear</p>",
        "id": 135379113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972636
    },
    {
        "content": "<blockquote>\n<p><code>R' \\otimes_R M</code></p>\n</blockquote>\n<p>what is this</p>",
        "id": 135379128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972642
    },
    {
        "content": "<p>Tensor product</p>",
        "id": 135379153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972647
    },
    {
        "content": "<p>turning <code>M</code> into an <code>R'</code>-module</p>",
        "id": 135379154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972666
    },
    {
        "content": "<p>so R' is viewed as a R-module here?</p>",
        "id": 135379155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972667
    },
    {
        "content": "<p>Yes</p>",
        "id": 135379156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972671
    },
    {
        "content": "<p>oh, there's an interesting construction we don't have</p>",
        "id": 135379164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972709
    },
    {
        "content": "<p>Which one?</p>",
        "id": 135379166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972724
    },
    {
        "content": "<p>a ring hom <code>R -&gt; R'</code> yields a R-module structure on <code>R'</code></p>",
        "id": 135379169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972725
    },
    {
        "content": "<p>You mean the forgetful functor?</p>",
        "id": 135379173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972747
    },
    {
        "content": "<p>From <code>R'</code>-mod to <code>R</code>-mod?</p>",
        "id": 135379176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972757
    },
    {
        "content": "<p>It's not forgetful, right?</p>",
        "id": 135379216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972770
    },
    {
        "content": "<p>Not really</p>",
        "id": 135379218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972777
    },
    {
        "content": "<p>The hom could be anything</p>",
        "id": 135379219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972777
    },
    {
        "content": "<p>I still think of it as \"forgetting\"</p>",
        "id": 135379222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972787
    },
    {
        "content": "<p>We have <code>R</code> is an <code>R</code>-mod</p>",
        "id": 135379229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972805
    },
    {
        "content": "<p>So if you chain that to the \"forget\" instance, you have what you want.</p>",
        "id": 135379233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972820
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 135379239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972834
    },
    {
        "content": "<p>I tried adding \"forget\" about 3 months ago, and I ran into trouble.</p>",
        "id": 135379242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972839
    },
    {
        "content": "<p>what forget instance?</p>",
        "id": 135379244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972841
    },
    {
        "content": "<p>But maybe with the refactor, you can now do it.</p>",
        "id": 135379248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972852
    },
    {
        "content": "<p>I mean <code>R'</code> is an <code>R'</code>-mod + every <code>R'</code>-mod is an <code>R</code>-mod.</p>",
        "id": 135379249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972873
    },
    {
        "content": "<p>I want your instance to be broken into 2 steps.</p>",
        "id": 135379273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972882
    },
    {
        "content": "<blockquote>\n<p>what forget instance?</p>\n</blockquote>\n<p>The \"forgetful\" functor instance</p>",
        "id": 135379301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972923
    },
    {
        "content": "<blockquote>\n<p>every R'-mod is an R-mod</p>\n</blockquote>\n<p>This one requires an explicit ring hom input</p>",
        "id": 135379302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972926
    },
    {
        "content": "<p>Hmmm, it does... unless we turn <code>R'</code> into an algebra</p>",
        "id": 135379308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972951
    },
    {
        "content": "<p>over <code>R</code></p>",
        "id": 135379310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538972956
    },
    {
        "content": "<p>ah, we don't have anything like that yet</p>",
        "id": 135379318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972984
    },
    {
        "content": "<p>I needed assoc algebras around this time in metamath, now I forget why</p>",
        "id": 135379369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973012
    },
    {
        "content": "<p>Ah - multivariate polynomials are the free assoc algebra</p>",
        "id": 135379428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973123
    },
    {
        "content": "<p>The ones we have are also commutative</p>",
        "id": 135379457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973233
    },
    {
        "content": "<p>At some point we might want non-commutative polynomials as well</p>",
        "id": 135379496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973252
    },
    {
        "content": "<p>I have never touched noncomm polynomials, but I guess it's not so hard with the group ring construction</p>",
        "id": 135379511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973327
    },
    {
        "content": "<p>... + free monoid construction which we already have</p>",
        "id": 135379514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973346
    },
    {
        "content": "<p>So, could we have <code>f^* M'</code>?</p>",
        "id": 135379515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973348
    },
    {
        "content": "<p>I think so, what does that mean?</p>",
        "id": 135379555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973371
    },
    {
        "content": "<p>where <code>f</code> is a ring hom <code>R → R'</code> and <code>M'</code> is an <code>R'</code>-mod</p>",
        "id": 135379556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973375
    },
    {
        "content": "<p>So <code>f^*</code> is the functor <code>R'-mod → R-mod</code></p>",
        "id": 135379559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973405
    },
    {
        "content": "<p>ah, okay so this is the contravariant thing that scott mentioned</p>",
        "id": 135379565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538973431
    },
    {
        "content": "<p>Right, and it is adjoint to tensoring.</p>",
        "id": 135379567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973454
    },
    {
        "content": "<p>Which is covariant</p>",
        "id": 135379568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973457
    },
    {
        "content": "<p>no, that's bullcrap</p>",
        "id": 135379570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973466
    },
    {
        "content": "<p>I'm brainfarting</p>",
        "id": 135379571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973476
    },
    {
        "content": "<p>tensor is adjoint to hom</p>",
        "id": 135379609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973483
    },
    {
        "content": "<p>Lol. So you get to choose: either you use <code>f^*</code> which is contravariant. Or you use tensor products, and you get something covariant, but \"harder to parse\".</p>",
        "id": 135379614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538973538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How would all this abstract nonsense help with:</p>\n<blockquote>\n<p>So I've got to working on <code>ideal</code> now, and I have come to realize that ideal theory is not simply a specialization of submodule theory. It's obvious in hindsight, but as a category the homs are different - a ring hom is not a linear map, and a linear map is not a ring hom</p>\n</blockquote>",
        "id": 135383276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538980859
    },
    {
        "content": "<p>And nobody here has pointed out that extensions of ideals exist, c.f. Atiyah-Macdonald P.9</p>",
        "id": 135383285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538980890
    },
    {
        "content": "<blockquote>\n<p>In particular I don't even think there is a notion of <code>ideal.map</code> unless you assume the map is surjective</p>\n</blockquote>\n<p>if f:A-&gt;B is a ring hom and L is an ideal in A then L^e is the ideal generated by f(L)</p>",
        "id": 135383328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538980931
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/OAIFV_UuuBZXylsyoLFs_sUK/2018-10-08.png\" target=\"_blank\" title=\"2018-10-08.png\">2018-10-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OAIFV_UuuBZXylsyoLFs_sUK/2018-10-08.png\" target=\"_blank\" title=\"2018-10-08.png\"><img src=\"/user_uploads/3121/OAIFV_UuuBZXylsyoLFs_sUK/2018-10-08.png\"></a></div>",
        "id": 135383339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538980990
    },
    {
        "content": "<p>yeah, okay that's a better idea</p>",
        "id": 135383404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981145
    },
    {
        "content": "<p>just close the resulting set under ideal operations</p>",
        "id": 135383408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have some sort of todo list of what remains for this refactor?</p>",
        "id": 135383456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538981195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> It's just some idle speculation on my part, I don't really have any concrete implementation ideas</p>",
        "id": 135383458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981200
    },
    {
        "content": "<p>I'm currently in \"tying up loose ends\" mode in the refactor, I don't want to introduce new things</p>",
        "id": 135383464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981228
    },
    {
        "content": "<p>Great!</p>",
        "id": 135383467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538981240
    },
    {
        "content": "<p>it's already behind schedule too much</p>",
        "id": 135383470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981254
    },
    {
        "content": "<p>although it has made several other projects come to the fore, which I will probably have to start working on after I'm done</p>",
        "id": 135383513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981287
    },
    {
        "content": "<p>foremost of which is the multiple scalar field thing</p>",
        "id": 135383515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981302
    },
    {
        "content": "<p>After you are done, I think <code>faster</code> should be the first thing on your list. <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 135383519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538981315
    },
    {
        "content": "<p>I'm actually working on that ATM</p>",
        "id": 135383522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538981330
    },
    {
        "content": "<p>Wonderful! Thanks for doing that!</p>",
        "id": 135383525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538981345
    },
    {
        "content": "<p>Here are some thoughts. The fundamental notion in algebraic geometry is an \"f-map\" -- see 6.21.7 in <a href=\"https://stacks.math.columbia.edu/tag/008C\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/008C\">the stacks project</a>. Lemma 6.21.8 shows that this is a natural idea. Although it's dressed up in a geometric language, this is something related to the conversation here. The notion of an f-map shows up in the definition of a morphism of ringed spaces in <a href=\"https://stacks.math.columbia.edu/tag/0090\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/0090\">definition 6.21</a>. In the discussion just below 6.26.3 <a href=\"https://stacks.math.columbia.edu/tag/0094\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/0094\">here</a> we see the notion of an f-map of sheaves of modules. Note in particular in that discussion that the f-maps from G to F are in canonical bijection with two other hom sets, one involving only sheaves on X and one involving only sheaves on Y.</p>\n<p>Now of course all this needs a lot of unravelling, and the way to unravel is to ask how what de Jong writes translates into the case of affine schemes, which are just commutative rings in disguise. If I got it right, then he says to focus on the following idea: if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f:A\\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\">A</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a map of rings and if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-module and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-module, an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">G\\to F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is simply an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-module homomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, and the observation is that such maps naturally biject with the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-module homomorphisms from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><msub><mo>⊗</mo><mi>A</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">G\\otimes_AB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. I think this is different to what Scott suggests -- he went the other way.</p>",
        "id": 135384515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538982906
    },
    {
        "content": "<blockquote>\n<p>I wonder if there is a common generalization of ring homs, (R,R) -&gt; (R', R') and linear maps (R,M) -&gt; (R, M')</p>\n</blockquote>\n<p>I think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-maps give this. An <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>M</mi><mo>)</mo><mo>→</mo><mo>(</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>M</mi><mo mathvariant=\"normal\">′</mo></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R,M)\\to (R',M')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a ring map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>→</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R\\to R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mo>→</mo><msup><mi>M</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M\\to M'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> (note I'm constantly using this trick of, the moment I have a ring map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>→</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R\\to R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, considering all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>-modules as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules). If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>→</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">R\\to R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the identity then this is just an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module homomorphism, and an <em>example</em> of an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>R</mi><mo>)</mo><mo>→</mo><mo>(</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R,R)\\to(R',R')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is given by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(f,f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>, but given <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>R</mi><mo>→</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f:R\\to R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> there are <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-maps <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>R</mi><mo>)</mo><mo>→</mo><mo>(</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R,R)\\to (R',R')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> which are not <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(f,f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 135384772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538983203
    },
    {
        "content": "<p>OK so Johan has isolated exactly the same idea, but somehow it seems that he has come from a completely different viewpoint (I don't know what a fibred category is). Regarding commutative v non-commutative, I think it's a good idea to push commutative here. Someone impressed on me decades ago that one should not think of commutative ring theory as a special case of non-commutative ring theory but regard them as completely different areas. I don't know anything about research into non-commutative ring theory, but commutative ring theory is very much alive and kicking -- e.g. ideas from the theory of perfectoid spaces were used here <a href=\"https://arxiv.org/abs/1608.08882\" target=\"_blank\" title=\"https://arxiv.org/abs/1608.08882\">https://arxiv.org/abs/1608.08882</a> to resolve a the direct summand conjecture. Commutative algebra is the foundation of modern algebraic geometry and I have always been of the opinion (even before I knew anything about formal proof verification software) that books like Atiyah--Macdonald and Matsumura (both standard commutative algebra textbooks) somehow \"operated close to the axioms\" whilst still being of great modern interest. If we want to push Lean as a tool for algebraic geometry, which it one day might become, then there's no harm focussing on commutative algebra. When someone eventually decides to do some basic representation theory of finite groups we might have to plough through basics of semisimple algebras but that is somehow a completely different project.</p>",
        "id": 135385018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538983619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> A fibered category is the thing that underlies a stack.</p>",
        "id": 135385035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538983663
    },
    {
        "content": "<p>Basically it abstracts <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-maps</p>",
        "id": 135385039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538983678
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>every R'-mod is an R-mod</p>\n</blockquote>\n<p>This one requires an explicit ring hom input</p>\n</blockquote>\n<p>Patrick mentioned recently that sometimes it's best to concentrate on the morphisms, not the objects. In alg geom we even see it in the name -- an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span>-map is a construction which depends on a map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span> of rings. In fact Johan is saying all the right things, I need to get up much earlier to get ahead of him. Given <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>R</mi><mo>→</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f:R\\to R'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> there are then adjoint functors <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo>−</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>)</mo><mo>→</mo><mo>(</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>−</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R-mod)\\to(R'-mod)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mbin\">−</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msup><mi>R</mi><mo mathvariant=\"normal\">′</mo></msup><mo>−</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>)</mo><mo>→</mo><mo>(</mo><mi>R</mi><mo>−</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(R'-mod)\\to(R-mod)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mbin\">−</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mclose\">)</span></span></span></span> and hopefully Kenny proved enough about universal property of tensor products to show that these are adjoints. I think that Scott's punt went in the wrong direction. There is a time when you get maps one way and the other way, but that's when you go back to schemes.</p>",
        "id": 135385344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538984006
    },
    {
        "content": "<blockquote>\n<p>In fact Johan is saying all the right things, I need to get up much earlier to get ahead of him. </p>\n</blockquote>\n<p>I've got a 2-year old daughter. You can't win.</p>",
        "id": 135385406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984081
    },
    {
        "content": "<p>Well, what I think that Scott meant that <code>f → f^*</code> is contravariant.</p>",
        "id": 135385439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984151
    },
    {
        "content": "<p>Kenny's construction is something else though. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span></span></span></span> is an ideal of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>L</mi><mi>e</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">e</span></span></span></span></span></span></span></span></span></span></span>, the pushforward ideal, is less well-behaved. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>L</mi><mi>e</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">e</span></span></span></span></span></span></span></span></span></span></span> is the image of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><msub><mo>⊗</mo><mi>A</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">L\\otimes_AB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> (the canonical thing when it comes to modules) under the natural map from this guy to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> corresponding by adjointness to the map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">L\\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. So it might satisfy some universal property for ideals, but probably not for modules.</p>",
        "id": 135385440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538984152
    },
    {
        "content": "<p>OK I think that's all I have to say and I think that most of it had been said already, but at least I caught up.</p>",
        "id": 135385492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538984195
    },
    {
        "content": "<p>For ideals it will probably give you a Galois connection. Here! I said it. Without checking.</p>",
        "id": 135385493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984199
    },
    {
        "content": "<p>But I guess <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>L</mi><mi>e</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">e</span></span></span></span></span></span></span></span></span></span></span> is the best you can do when you have a ring hom A-&gt;B and an ideal L?</p>",
        "id": 135385562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538984311
    },
    {
        "content": "<p>If you want an ideal of <code>B</code>, yes.</p>",
        "id": 135385574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984338
    },
    {
        "content": "<p>Otherwise, you could just tensor, and treat it as a module.</p>",
        "id": 135385584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984352
    },
    {
        "content": "<p>Is this a thing we can currently do?</p>",
        "id": 135385586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538984365
    },
    {
        "content": "<p>What?</p>",
        "id": 135385590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984370
    },
    {
        "content": "<p>tensoring like that</p>",
        "id": 135385592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538984378
    },
    {
        "content": "<p>I guess almost</p>",
        "id": 135385594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Did you include extension of scalars in your work on tensor products?</p>",
        "id": 135385634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Given what we have, it shouldn't be too hard</p>",
        "id": 135385647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538984433
    },
    {
        "content": "<p>I don’t think I did.</p>",
        "id": 135385977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538984962
    },
    {
        "content": "<p>Oh I see. The issue is that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-module and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-algebra (and hence an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-module) then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>A</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">M\\otimes_AB</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not just an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>-module but a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-module.</p>",
        "id": 135386823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538986074
    },
    {
        "content": "<p>Right, we don't have something like that atm</p>",
        "id": 135386914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538986133
    },
    {
        "content": "<p>But it shouldn't be hard to put a <code>B</code>-mod structure on the tensor product.</p>",
        "id": 135386928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538986159
    },
    {
        "content": "<p>I don't know if it should \"extend\" the <code>A</code>-mod structure, in the sense that if you \"restrict\" scalars you get an <code>A</code>-mod that is defeq to what you started with.</p>",
        "id": 135387004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538986215
    },
    {
        "content": "<blockquote>\n<p>foremost of which is the multiple scalar field thing</p>\n</blockquote>\n<p>I'm completely lost: I thought this module refactor was mostly about multiple scalars</p>",
        "id": 135421783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539024905
    },
    {
        "content": "<p>How's it going? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 136304439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540251895
    },
    {
        "content": "<p>waiting on my school work to decrease in intensity</p>",
        "id": 136306139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540254146
    },
    {
        "content": "<p>hopefully I should be able to find some time for it this week</p>",
        "id": 136306145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540254163
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commits/module\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commits/module\">https://github.com/leanprover-community/mathlib/commits/module</a></p>",
        "id": 136911662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541066364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there anything we can help with?</p>",
        "id": 136911664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541066372
    },
    {
        "content": "<p>Possibly... I'm just short on time these days. The main work is done, I think, but a bunch of files still need to be updated</p>",
        "id": 136912060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541066948
    },
    {
        "content": "<p>what can we do?</p>",
        "id": 136912064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541066975
    },
    {
        "content": "<p>should I fix the errors?</p>",
        "id": 136912067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541066989
    },
    {
        "content": "<p>go in there and make the red squiggles go away</p>",
        "id": 136912068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541066993
    },
    {
        "content": "<p>roger that</p>",
        "id": 136912116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541067015
    },
    {
        "content": "<p>Don't get too attached to anything that you write there, I'll probably have a look through all the files anyway, but it will be a lot easier if it's not already broken</p>",
        "id": 136912204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541067153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> there are things that you deleted and things that depend on them, right</p>",
        "id": 136919089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076279
    },
    {
        "content": "<p>I'll just leave those untouched</p>",
        "id": 136919093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076290
    },
    {
        "content": "<p>like what? I think all deleted files have equivalents</p>",
        "id": 136919165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541076384
    },
    {
        "content": "<p>like the order embedding of submodules of submodules, and the prime ideal, and the trivial ideal</p>",
        "id": 136919191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076447
    },
    {
        "content": "<p>and also this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">Union_set_of_directed</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">supr</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 136919263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076502
    },
    {
        "content": "<p>prime ideals are still there</p>",
        "id": 136919265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541076505
    },
    {
        "content": "<p>search for that, it moved somewhere else</p>",
        "id": 136919287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541076545
    },
    {
        "content": "<p>I think it is Union_coe now</p>",
        "id": 136919297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541076583
    },
    {
        "content": "<p><code>prime_ideal</code> doesn't give me anything</p>",
        "id": 136919305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076593
    },
    {
        "content": "<p>and i wouldn't search for <code>prime</code></p>",
        "id": 136919307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076597
    },
    {
        "content": "<p>the trivial ideal is bottom</p>",
        "id": 136919355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541076614
    },
    {
        "content": "<p>ok I searched for <code>prime</code> and I found it</p>",
        "id": 136919360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541076624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what about the embedding “submodules of N” -&gt; “submodules of M” where N is a submodule of M?</p>",
        "id": 136925189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541082741
    },
    {
        "content": "<p>I think that's <code>map N.subtype</code> or <code>map_subtype.order_iso</code></p>",
        "id": 136928650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541085951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I've pushed a partial fix</p>",
        "id": 136942283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541098450
    },
    {
        "content": "<p>I'll see what more I can do</p>",
        "id": 136942285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541098456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for principal ideal domains, the situation is that <code>{x | a ∣ x}</code> is a set not an ideal, so these definitions are a bit troublesome:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_principal_ideal</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n\n<span class=\"n\">class</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">is_principal_ideal</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 136986811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541152449
    },
    {
        "content": "<p>what should I do?</p>",
        "id": 136986813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541152451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/leanprover/mathlib/blob/master/ring_theory/ideals.lean#L140\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/ring_theory/ideals.lean#L140\"><code>ideal.quotient.eq</code></a> is missing</p>",
        "id": 137008240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541161979
    },
    {
        "content": "<p>(and <code>submodule.quotient.eq</code> doesn't count)</p>",
        "id": 137008271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541161987
    },
    {
        "content": "<p>Successfully reduced to 4 errors. Pushed.</p>",
        "id": 137064504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541175464
    },
    {
        "content": "<p>the ideal <code>{x | a ∣ x}</code> is now spelled <code>span {a}</code></p>",
        "id": 137076716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541186571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> by \"now\" do you mean \"I've changed that in my private copy\" or \"I should change that and then push it\"?</p>",
        "id": 137079093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189172
    },
    {
        "content": "<p>I mean in the module branch that's how it is currently used</p>",
        "id": 137079105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189195
    },
    {
        "content": "<p>so if you find it elsewhere you should use that</p>",
        "id": 137079113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189213
    },
    {
        "content": "<p>so it's the latter?</p>",
        "id": 137079114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189214
    },
    {
        "content": "<p>ok</p>",
        "id": 137079118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189217
    },
    {
        "content": "<p>is_principal_ideal should be a property of S : ideal</p>",
        "id": 137079137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189254
    },
    {
        "content": "<p>and what is to become of <code>ideal.quotient.eq</code>? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 137079292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189425
    },
    {
        "content": "<p>what does <code>quotient_ring</code> look like now?</p>",
        "id": 137079358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189517
    },
    {
        "content": "<p>it looks like <code>ideal.quotient</code> now</p>",
        "id": 137079414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189539
    },
    {
        "content": "<p>we have <code>ideal.quotient.mk := submodule.quotient.mk</code> and we have <code>submodule.quotient,eq</code></p>",
        "id": 137079430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189567
    },
    {
        "content": "<p>but not <code>ideal.quotient.eq</code></p>",
        "id": 137079446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189583
    },
    {
        "content": "<p>oh sure, you can state <code>ideal.quotient.eq</code></p>",
        "id": 137079455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189588
    },
    {
        "content": "<p>ok</p>",
        "id": 137079458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189594
    },
    {
        "content": "<p>it's just a defeq copy paste job</p>",
        "id": 137079464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189605
    },
    {
        "content": "<p>I just thought I wouldn't add things without first asking you</p>",
        "id": 137079476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189632
    },
    {
        "content": "<p>I have not added all theorems from submodules to ideals, I intended to add them as needed</p>",
        "id": 137079481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189635
    },
    {
        "content": "<p>you can often just use the submodule version directly, but it is slightly less ergonomic</p>",
        "id": 137079549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541189679
    },
    {
        "content": "<p>I agree (with the latter statement)</p>",
        "id": 137079650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541189779
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mem_span_singleton</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 137084347,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541194694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can I change this to use dvd?</p>",
        "id": 137084351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541194699
    },
    {
        "content": "<p>maybe make another theorem</p>",
        "id": 137084382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541194754
    },
    {
        "content": "<p>but nobody uses that theorem</p>",
        "id": 137084453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541194829
    },
    {
        "content": "<p>you added that theorem yourself</p>",
        "id": 137084455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541194833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_maximal_of_irreducible</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_maximal</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>Should this be an instance?</p>",
        "id": 137085654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541196260
    },
    {
        "content": "<p>oh I see, it's copy pasted from the analogous theorem on submodule, where you can't use dvd</p>",
        "id": 137085959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541196676
    },
    {
        "content": "<p>as for that last one - probably not. Things like <code>irreducible</code> and <code>maximal</code> and <code>nat.prime</code> are forming a new kind of idiom, where the predicate is a <code>class</code> but most of the theorems use it like normal assumptions</p>",
        "id": 137086049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541196828
    },
    {
        "content": "<p>This is primarily intended to support the few cases where you have to use typeclass inference, like in Z/nZ is a field</p>",
        "id": 137086099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541196870
    },
    {
        "content": "<p>I want there to be an \"is_an_integer\" predicate on eg rat to save me from coercions.</p>",
        "id": 137089370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541201259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> wrong thread?</p>",
        "id": 137089440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541201369
    },
    {
        "content": "<p>Isn't that a predicate which is a class?</p>",
        "id": 137089490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541201402
    },
    {
        "content": "<p>oh well this is going off track</p>",
        "id": 137089518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541201422
    },
    {
        "content": "<p>Why is it a class?</p>",
        "id": 137089626,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541201585
    },
    {
        "content": "<p>I don't just mean a predicate that is a class, we have plenty of those like <code>first_countable X</code>. I mean predicates that are classes that we use without instance brackets in most theorems</p>",
        "id": 137089816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541201873
    },
    {
        "content": "<p>I feel like there is not enough transparency with the module refactoring, so I've decided to write something about it.</p>\n<p>Major changes made:</p>\n<ul>\n<li><code>semimodule α β</code> and <code>module α β</code> and <code>vector_space α β</code> now take one more argument, that <code>β</code> is an <code>add_comm_group</code>, i.e. before making an instance of a module, you need to prove that it's an abelian group first.</li>\n<li>vector space is no longer over a field, but a discrete field.</li>\n<li>The idiom for making an instance <code>module α β</code> (after proving that <code>β</code> is an abelian group) is <code>module.of_core { smul := sorry, smul_add  := sorry, add_smul := sorry, mul_smul := sorry, one_smul := sorry }</code>.</li>\n<li><code>is_linear_map</code> and <code>linear_map</code> are now both structures, and they are independent, meaning that <code>linear_map</code> is no longer defined as <code>subtype is_linear_map</code>. The idiom for making <code>linear_map</code> from <code>is_linear_map</code> is <code>is_linear_map.mk' (f : M -&gt; N) (sorry : is_linear_map f)</code>, and the idiom for making <code>is_linear_map</code> from <code>linear_map</code> is <code>f.is_linear</code> (i.e. <code>linear_map.is_linear f</code>).</li>\n<li><code>is_linear_map.add</code> etc no longer exist. instead, you can now add two linear maps together, etc.</li>\n<li>the class<code>is_submodule</code> is gone, replaced by the structure <code>submodule</code> which contains a carrier, i.e. if <code>N : submodule R M</code> then <code>N.carrier</code> is a type. And there is an instance <code>module R N</code> in the same situation.</li>\n<li>similarly, the class <code>is_ideal</code> is gone, replaced by the structure <code>ideal</code>, which also contains a carrier.</li>\n<li>endomorphism ring and general linear group are defined.</li>\n<li>submodules form a complete lattice. the trivial ideal is now idiomatically the bottom element, and the universal ideal the top element.</li>\n<li><code>linear_algebra/quotient_module.lean</code> is deleted, and it's now <code>submodule.quotient</code> (so if <code>N : submodule R M</code> then <code>submodule R N.quotient</code>) Similarly, <code>quotient_ring.quotient</code> is replaced by <code>ideal.quotient</code>. The canonical map from <code>N</code> to <code>N.quotient</code> is <code>submodule.quotient.mk</code>, and the canonical map from the ideal <code>I</code> to <code>I.quotient</code> is <code>ideal.quotient.mk I</code>.</li>\n<li><code>linear_equiv</code> is now based on a linear map and an equiv, and the difference being that now you need to prove that the inverse is also linear, and there is currently no interface to get around that.</li>\n<li>Everything you want to know about linear independence and basis is now in the newly created file <code>linear_algebra/basis.lean</code>.</li>\n<li>Everything you want to know about linear combinations is now in the newly created file <code>linear_algebra/lc.lean</code>.</li>\n<li><code>linear_algebra/linear_map_module.lean</code> and <code>linear_algebra/prod_module.lean</code> and <code>linear_algebra/quotient_module.lean</code> and <code>linear_algebra/submodule.lean</code> and <code>linear_algebra/subtype_module.lean</code> are deleted (with their contents placed elsewhere).</li>\n</ul>",
        "id": 137090743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203388
    },
    {
        "content": "<p>Ha, this was my secret plan all along</p>",
        "id": 137090764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203439
    },
    {
        "content": "<p>I think one would prefer transparency</p>",
        "id": 137090808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203449
    },
    {
        "content": "<p>now that kenny had to read the stuff he knows what changed</p>",
        "id": 137090810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203459
    },
    {
        "content": "<p>and can write a nice summary for us</p>",
        "id": 137090817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203472
    },
    {
        "content": "<p>lol</p>",
        "id": 137090822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203482
    },
    {
        "content": "<p>A remark on <code>module.of_core</code>: it's only intended for use when you aren't proving it's a semimodule first</p>",
        "id": 137090864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203558
    },
    {
        "content": "<p>like if you don't care about semimodules</p>",
        "id": 137090910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203571
    },
    {
        "content": "<p>I'm sure Kevin doesn't</p>",
        "id": 137090954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203661
    },
    {
        "content": "<p>By the way, <code>is_linear_map</code> is a late addition. I'm hoping it will not be needed much at all, but it's useful to have as a mixin occasionally</p>",
        "id": 137090961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203666
    },
    {
        "content": "<p>one would have to refactor <code>tensor_product</code> to get rid of all the dependencies thereto, I believe</p>",
        "id": 137091015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203692
    },
    {
        "content": "<p>I really want <code>linear_map</code> to be the primary one</p>",
        "id": 137091016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203693
    },
    {
        "content": "<p>oh, I may have done that already</p>",
        "id": 137091023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203718
    },
    {
        "content": "<p>not entirely</p>",
        "id": 137091025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203725
    },
    {
        "content": "<p>shoot, I have an unsaved file in vscode</p>",
        "id": 137091026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203732
    },
    {
        "content": "<p>lol</p>",
        "id": 137091030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541203740
    },
    {
        "content": "<p>re: interface for linear_equiv, you don't need to prove the inverse is linear, that's not in the structure</p>",
        "id": 137091130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203892
    },
    {
        "content": "<p>it's just the union (pushout?) of linear_map and equiv</p>",
        "id": 137091149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541203917
    },
    {
        "content": "<p>oh, right</p>",
        "id": 137091304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541204103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you going to push your file?</p>",
        "id": 137091863,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541204867
    },
    {
        "content": "<p>oh wait, looks like I already pushed most of it</p>",
        "id": 137092023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541205066
    },
    {
        "content": "<p>you already had the important stuff</p>",
        "id": 137092026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541205080
    },
    {
        "content": "<p>but tensor product still depends on is_linear_map right?</p>",
        "id": 137092090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541205208
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⊗</span> <span class=\"n\">M</span> <span class=\"err\">≃ₗ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⊗ₜ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n    <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">is_linear</span> <span class=\"err\">$</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">is_linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">bilinear</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">linear_right</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n    <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">is_linear</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">tmul_smul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_tmul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">⟨λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">is_linear</span> <span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">smul_right</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">is_linear</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⊗</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 137092235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541205401
    },
    {
        "content": "<p>I don't think anyone wants to see this</p>",
        "id": 137092236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541205405
    },
    {
        "content": "<p>what is your objection exactly?</p>",
        "id": 137092333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541205547
    },
    {
        "content": "<p>1. the linear map needs to be put after <code>..</code>; 2. lack of <code>is_linear_map.comp</code> and the fact that <code>lift.ext</code> and most of the things in <code>tensor_product</code> depend on <code>is_linear_map</code> make proofs very long and cumbersome</p>",
        "id": 137092419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541205662
    },
    {
        "content": "<p>I've only done the first half of that file, so some things may still need to be hashed out</p>",
        "id": 137093199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541206935
    },
    {
        "content": "<p><code>lift.ext</code> should take linear maps as input</p>",
        "id": 137093203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541206950
    },
    {
        "content": "<p>You shouldn't feel bound to the current way statements of theorems are written, that's what refactoring is about</p>",
        "id": 137093273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541207084
    },
    {
        "content": "<p>Ideally, this construction should be easy, just cobbling together functions we already know are linear</p>",
        "id": 137093296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541207155
    },
    {
        "content": "<p>I think we need another constructor for is_bilinear_map, or is_linear_map, that takes a linear function and asks you to prove equality to the target function</p>",
        "id": 137093354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541207248
    },
    {
        "content": "<p>which corresponds to the alternate definition <code>def is_linear_map (f : β → γ) := ∃ g : β →ₗ γ, ∀ x, f x = g x</code></p>",
        "id": 137093401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541207334
    },
    {
        "content": "<blockquote>\n<p><code>lift.ext</code> should take linear maps as input</p>\n</blockquote>\n<p>I don't think that will work, because there are things that need to be proved to be linear</p>",
        "id": 137096037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541212505
    },
    {
        "content": "<p>do you think I should change <code>is_bilinear_map</code> to <code>bilinear_map</code>?</p>",
        "id": 137096098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541212640
    },
    {
        "content": "<p>Huh? <code>lift.ext</code> takes two functions and proofs that they are linear</p>",
        "id": 137096203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541212818
    },
    {
        "content": "<p>that can always be contracted to a function taking a <code>linear_map</code> arg</p>",
        "id": 137096204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541212831
    },
    {
        "content": "<p>I thought about it, but do the set of all bilinear maps have a nice structure like linear maps? Like can you add them and such</p>",
        "id": 137096254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541212924
    },
    {
        "content": "<p>yes</p>",
        "id": 137096331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541213150
    },
    {
        "content": "<p>they're even a module</p>",
        "id": 137096332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541213154
    },
    {
        "content": "<p>they're as nice as linear maps</p>",
        "id": 137096371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541213167
    },
    {
        "content": "<p>(because of the universal property of tensor product :P)</p>",
        "id": 137096374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541213175
    },
    {
        "content": "<p>well okay then</p>",
        "id": 137096836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214124
    },
    {
        "content": "<p>I think <code>bilinear_map</code> still needs to reference <code>is_linear_map</code> though</p>",
        "id": 137096849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">bilinear_map</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span>\n</pre></div>",
        "id": 137096851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214194
    },
    {
        "content": "<p>how about this</p>",
        "id": 137096852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214195
    },
    {
        "content": "<p>oh! does that work?</p>",
        "id": 137096854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214204
    },
    {
        "content": "<p>I'm experimenting with it now</p>",
        "id": 137096856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214215
    },
    {
        "content": "<p>is Mod(R) a CCC?</p>",
        "id": 137096859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214230
    },
    {
        "content": "<p>CCC?</p>",
        "id": 137096898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214256
    },
    {
        "content": "<p>cartesian closed category</p>",
        "id": 137096899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214263
    },
    {
        "content": "<p>i.e. that thing means what you want it to</p>",
        "id": 137096900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214281
    },
    {
        "content": "<p>yes</p>",
        "id": 137096901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214296
    },
    {
        "content": "<p>actually I don't know</p>",
        "id": 137096910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214307
    },
    {
        "content": "<p>I just know that Hom(M tensor N, P) = Hom(M, Hom(N, P))</p>",
        "id": 137096913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214317
    },
    {
        "content": "<p>so (- tensor N) is right adjoint to Hom(N, -)</p>",
        "id": 137096914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541214328
    },
    {
        "content": "<p>that looks a lot like the universal property of the exponential</p>",
        "id": 137096923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214352
    },
    {
        "content": "<p>Hom(N,P) there is actually an object of the category</p>",
        "id": 137096963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541214376
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">free_abelian_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">squeeze</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">R</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">bilinear_map</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bilinear_map</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">mk</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span>\n  <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">H3</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H4</span> <span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">H1</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">H2</span> <span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">mk_apply</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mk</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">comm_apply</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comm</span> <span class=\"n\">y</span>\n<span class=\"n\">def</span> <span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">left_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">right_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_left</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_right</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_neg</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_neg</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_left</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">smul_left</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">smul_right</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp₁</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">comp₁_apply</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp₁</span> <span class=\"n\">g</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp₂</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">Q</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">f</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">comp₂_apply</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp₂</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp₃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bilinear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span> <span class=\"n\">f</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">comp₃_apply</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">comp₃</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bilinear_map</span>\n</pre></div>",
        "id": 137097797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216247
    },
    {
        "content": "<p>looking good</p>",
        "id": 137097798,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216254
    },
    {
        "content": "<p>maybe I'm spoiled, but I would hope that there was a direct way to get <code>comm</code></p>",
        "id": 137097901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216478
    },
    {
        "content": "<p>maybe it requires the tensor product though</p>",
        "id": 137097902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216506
    },
    {
        "content": "<p>I guess it is equivalent to saying that <code>left</code> is a linear map</p>",
        "id": 137097943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216554
    },
    {
        "content": "<p>If <code>apply : M -&gt; (M -&gt;l N) -&gt;l N</code> was linear we would have it</p>",
        "id": 137098004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216724
    },
    {
        "content": "<p>and if <code>comp</code> was also linear.. :P</p>",
        "id": 137098005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216737
    },
    {
        "content": "<p>yeah, there should be a principled way to do this using CCCs</p>",
        "id": 137098051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216810
    },
    {
        "content": "<p>but that would be too category-theoretical for our purposes</p>",
        "id": 137098052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216822
    },
    {
        "content": "<p>I mean with the categories unfolded away</p>",
        "id": 137098057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216834
    },
    {
        "content": "<p>We know that CCCs interpret lambda calculus, so literally anything you can write down that is type correct will be linear</p>",
        "id": 137098062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216880
    },
    {
        "content": "<p>we just need the right building blocks to get everything else</p>",
        "id": 137098104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216933
    },
    {
        "content": "<p>but we also know that lambda calculus is generated by abstraction and application?</p>",
        "id": 137098106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216941
    },
    {
        "content": "<p>yes</p>",
        "id": 137098113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216952
    },
    {
        "content": "<p>but abstraction isn't a linear map?</p>",
        "id": 137098114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541216964
    },
    {
        "content": "<p>That's <code>apply</code></p>",
        "id": 137098116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541216980
    },
    {
        "content": "<p>so what's the conclusion?</p>",
        "id": 137098159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541217035
    },
    {
        "content": "<p>er, no - abstraction is the UMP of apply</p>",
        "id": 137098162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541217040
    },
    {
        "content": "<p>it works because the families we are considering are themselves linear in their free variables</p>",
        "id": 137098170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541217066
    },
    {
        "content": "<p>so you get a \"lambda\" like operator</p>",
        "id": 137098173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541217091
    },
    {
        "content": "<p>In this context we wouldn't actually be able to write down lambda, because we have \"the wrong lambda\", it isn't linear because we don't have the right notion of family for the category</p>",
        "id": 137098216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541217161
    },
    {
        "content": "<p>but we can run any lambda term through the CCC translation to get a term using only CCC primitives, and we can prove these are all linear</p>",
        "id": 137098221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541217206
    },
    {
        "content": "<p>I really like where this is going! Keep up the good work!</p>",
        "id": 137103669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541229929
    },
    {
        "content": "<p>Yes many thanks Kenny for trying to get the show back on the road. Does this stuff compile yet? Is it worth going back to Hilbert basis theorem yet?</p>",
        "id": 137104926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541232894
    },
    {
        "content": "<p>Fixed</p>",
        "id": 137110271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541245192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's the next step?</p>",
        "id": 137110475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541245603
    },
    {
        "content": "<p>is it compiling now?</p>",
        "id": 137110481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245650
    },
    {
        "content": "<p>yes</p>",
        "id": 137110485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541245665
    },
    {
        "content": "<p>sweet</p>",
        "id": 137110524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245695
    },
    {
        "content": "<p>unfortunately I still need to finish and review it myself, so it's in the queue with the other PRs now</p>",
        "id": 137110532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245752
    },
    {
        "content": "<p>If things go well I will have time this weekend for it</p>",
        "id": 137110546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245778
    },
    {
        "content": "<p>nice</p>",
        "id": 137110590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541245814
    },
    {
        "content": "<p>but if you see any other ways to improve it, add more theorems etc, now's the time</p>",
        "id": 137110591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245832
    },
    {
        "content": "<p>the CCC laws seem like a good place to start</p>",
        "id": 137110605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245885
    },
    {
        "content": "<p>prove that <code>curry : (A X B -&gt; C) -&gt; (A -&gt; B -&gt; C)</code> is a linear map</p>",
        "id": 137110608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245910
    },
    {
        "content": "<p>an equiv, even</p>",
        "id": 137110655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541245979
    },
    {
        "content": "<p>ok</p>",
        "id": 137110661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541246030
    },
    {
        "content": "<p>I don't think that's true</p>",
        "id": 137110702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541246053
    },
    {
        "content": "<p>put <code>l</code> everywhere</p>",
        "id": 137110907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541246472
    },
    {
        "content": "<p>that's homs in the category</p>",
        "id": 137110908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541246482
    },
    {
        "content": "<p>it's <code>(M tensor N) -&gt; P</code> equiv <code>M -&gt; (N -&gt; P)</code></p>",
        "id": 137110950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541246530
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1. (M ⊗ N) ⊗ P -&gt; M ⊗ (N ⊗ P)\n2. (M ⊗ N) -&gt; P -&gt; M ⊗ (N ⊗ P)\n3. P -&gt; (M ⊗ N) -&gt; M ⊗ (N ⊗ P)\n4. P -&gt; M -&gt; N -&gt; M ⊗ (N ⊗ P)\n5. M -&gt; P -&gt; N -&gt; M ⊗ (N ⊗ P)\n6. M -&gt; N -&gt; P -&gt; M ⊗ (N ⊗ P)\n7. M -&gt; N ⊗ P -&gt; M ⊗ (N ⊗ P)\n````\n</pre></div>",
        "id": 137111063,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541246816
    },
    {
        "content": "<p>yes</p>",
        "id": 137111403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247520
    },
    {
        "content": "<p>linear equiv I assume</p>",
        "id": 137111408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247541
    },
    {
        "content": "<p>But I chose that one specifically because it's one of the CCC primitives</p>",
        "id": 137111419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247568
    },
    {
        "content": "<p><em>canonical</em> linear equiv, even... <span class=\"emoji emoji-1f601\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 137111422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541247572
    },
    {
        "content": "<p><code>apply</code> is another: <code>(M -&gt; N) X M -&gt; N</code></p>",
        "id": 137111473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247642
    },
    {
        "content": "<p>it's trivial with that equiv though</p>",
        "id": 137111476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247662
    },
    {
        "content": "<p>I think the hom adjunction is equivalent to a few terms that you can compose</p>",
        "id": 137111486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247706
    },
    {
        "content": "<p>like apply and curry</p>",
        "id": 137111490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247715
    },
    {
        "content": "<p>do we have everything we need for the tensor product to be a product?</p>",
        "id": 137111532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247744
    },
    {
        "content": "<p>Is it also the coproduct?</p>",
        "id": 137111538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541247769
    },
    {
        "content": "<p>Nope</p>",
        "id": 137111546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541247792
    },
    {
        "content": "<p>Coproduct is the direct sum, which is also the product</p>",
        "id": 137111550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541247805
    },
    {
        "content": "<p>Tensor product is in fact the coproduct in the category of commutative rings</p>",
        "id": 137111594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541247843
    },
    {
        "content": "<p>Yes but for modules over a commutative ring it's a different story. You can see something funny is going on because there aren't natural maps from M to M tensor N or from M tensor N to M</p>",
        "id": 137111617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541247946
    },
    {
        "content": "<p>Other than the zero map</p>",
        "id": 137111643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541247962
    },
    {
        "content": "<p>wait what?</p>",
        "id": 137111668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541248018
    },
    {
        "content": "<p>this is a funny product indeed</p>",
        "id": 137111674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541248026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1. (M ⊗ N) ⊗ P -&gt; M ⊗ (N ⊗ P)\n2. (M ⊗ N) -&gt; P -&gt; M ⊗ (N ⊗ P)\n3. M -&gt; N -&gt; P -&gt; M ⊗ (N ⊗ P)\n4. M -&gt; N ⊗ P -&gt; M ⊗ (N ⊗ P)\n</pre></div>",
        "id": 137112176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541248925
    },
    {
        "content": "<p><code>(N ≃ₗ P) -&gt; ((M →ₗ N) ≃ₗ (M →ₗ P))</code></p>",
        "id": 137112714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541250074
    },
    {
        "content": "<p>Are you listing the things that you are currently proving?</p>",
        "id": 137112878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541250435
    },
    {
        "content": "<p>I think he's just enumerating type correct statements and looking for inhabited types?</p>",
        "id": 137113439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541251603
    },
    {
        "content": "<p>Do we have <code>dual</code>?</p>",
        "id": 137113487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541251685
    },
    {
        "content": "<p>Because <code>M.dual \\otimes N = Hom(M,N)</code> might be an interesting statement...</p>",
        "id": 137113493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541251742
    },
    {
        "content": "<p>that's just <code>M -&gt;L R</code></p>",
        "id": 137113504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541251790
    },
    {
        "content": "<p>and what you said is only true for M finitely dimensional vector space</p>",
        "id": 137113549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541251809
    },
    {
        "content": "<p>Of course, but it is a useful concept.</p>",
        "id": 137113551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541251816
    },
    {
        "content": "<p>I'm probably missing some hypotheses...</p>",
        "id": 137113555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541251836
    },
    {
        "content": "<p>don't let truth get in the way of beauty</p>",
        "id": 137113557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541251839
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"err\">⊗</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"err\">⊗</span> <span class=\"n\">P</span> <span class=\"err\">≃ₗ</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"err\">⊗</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">of_linear</span>\n  <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">unlift&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">unlift</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">lift&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">unlift</span> <span class=\"err\">$</span> <span class=\"n\">unlift</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comp₃_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comp_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">mk_apply</span> <span class=\"bp\">&lt;|&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"n\">lift&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comm&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">unlift_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">unlift&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">id_apply</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"n\">comm_inj</span> <span class=\"err\">$</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"n\">bilinear_map</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comp₃_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comp_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comm_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">mk_apply</span> <span class=\"bp\">&lt;|&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"n\">lift&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">comm&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">unlift_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">unlift&#39;_apply</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">id_apply</span> <span class=\"o\">})</span>\n</pre></div>",
        "id": 137114111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How far are we from defining the category of commutative <code>R</code>-algebras?</p>",
        "id": 137114113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253101
    },
    {
        "content": "<p>oh well</p>",
        "id": 137114114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253107
    },
    {
        "content": "<p>what's the concrete version of your question?</p>",
        "id": 137114116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253118
    },
    {
        "content": "<p>Flat ring homs</p>",
        "id": 137114155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253130
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">bilinear_map</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span>\n</pre></div>",
        "id": 137114159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253150
    },
    {
        "content": "<p>should we just remove <code>bilinear_map</code> entirely?</p>",
        "id": 137114160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253158
    },
    {
        "content": "<p>I think we can leave it out till people start complaining.</p>",
        "id": 137114169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253183
    },
    {
        "content": "<p>I would encourage everyone to use linear maps out of the tensor product.</p>",
        "id": 137114173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253200
    },
    {
        "content": "<p>Anyway, I would be really happy if we have flat ring homs. Especially if it is readable, instead of the obfuscated kludge that we sometimes see... I think flat ring homs can be a good test case to see if mathlib is ready for the 25 other properties of ring homs that algebraic geometry depends upon.</p>",
        "id": 137114231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253349
    },
    {
        "content": "<p>what are the 25 other properties?</p>",
        "id": 137114271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253373
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span> <span class=\"err\">⊗</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">comp₁</span> <span class=\"o\">(</span><span class=\"n\">comp₂</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>man my interface is really good</p>",
        "id": 137114278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253480
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/02WE\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/02WE\">https://stacks.math.columbia.edu/tag/02WE</a> most of these have an equivalent for rings</p>",
        "id": 137114317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541253493
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span> <span class=\"err\">⊗</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">comp₁</span> <span class=\"o\">(</span><span class=\"n\">comp₂</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_tmul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">⊗ₜ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"err\">⊗ₜ</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>how on earth is this <code>rfl</code></p>",
        "id": 137114408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253660
    },
    {
        "content": "<p>of course it is, it's a quotient</p>",
        "id": 137114472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541253769
    },
    {
        "content": "<p>well then why isn't this <code>rfl</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊗ₜ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 137114480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253817
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊗ₜ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_add</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 137114580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253963
    },
    {
        "content": "<p>I guess that's why</p>",
        "id": 137114583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541253968
    },
    {
        "content": "<p>where'd that come from?</p>",
        "id": 137114587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254003
    },
    {
        "content": "<p>the free group</p>",
        "id": 137114639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254111
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">tmul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊗ₜ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_add</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n</blockquote>\n<p>I love proofs like this.</p>",
        "id": 137114640,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541254112
    },
    {
        "content": "<p><code>free_abelian_group.lift</code> also isn't <code>rfl</code></p>",
        "id": 137114643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254134
    },
    {
        "content": "<p>right</p>",
        "id": 137114655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254188
    },
    {
        "content": "<p>it's zero_add as well</p>",
        "id": 137114656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254194
    },
    {
        "content": "<p>but why? It's built out of pieces that are rfl</p>",
        "id": 137114700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254214
    },
    {
        "content": "<p>is it <code>free_group.to_group</code>?</p>",
        "id": 137114702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254223
    },
    {
        "content": "<p>ah yes</p>",
        "id": 137114716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def to_group.aux : list (α × bool) → β :=\nλ L, list.prod $ L.map $ λ x, cond x.2 (f x.1) (f x.1)⁻¹\n\ndef to_group : free_group α → β :=\nquot.lift (to_group.aux f) $ λ L₁ L₂ H, red.step.to_group H\n</pre></div>",
        "id": 137114756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254328
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[simp] lemma to_group.of {x} : to_group f (of x) = f x :=\none_mul _\n</pre></div>",
        "id": 137114760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254365
    },
    {
        "content": "<p>so it's all in <code>list.prod</code></p>",
        "id": 137114810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254469
    },
    {
        "content": "<p>under which semantics is <code>by simp; simp only [linear_equiv.apply_symm_apply]</code> supposed to work where <code>by simp [linear_equiv.apply_symm_apply]</code> fails?</p>",
        "id": 137114879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254662
    },
    {
        "content": "<p>lol, now this has got me thinking about rewriting <code>free_group</code> again</p>",
        "id": 137114881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254670
    },
    {
        "content": "<p>one way to get the right defeqs here is to have the actual definition of <code>free_group</code> be the quotient of expressions in the language of groups with the group laws, and then prove that this is isomorphic to lists</p>",
        "id": 137114931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254748
    },
    {
        "content": "<p>and how would one implement \"expressions\"?</p>",
        "id": 137114932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254771
    },
    {
        "content": "<p>expressions in the language of groups means trees</p>",
        "id": 137114933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254775
    },
    {
        "content": "<p>you just have a symbol for one and inv and mul</p>",
        "id": 137114935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254799
    },
    {
        "content": "<p>and the basis elements</p>",
        "id": 137114977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254808
    },
    {
        "content": "<p>and you get trees</p>",
        "id": 137114979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254811
    },
    {
        "content": "<p>and what do you mean by tree?</p>",
        "id": 137114980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive group_expr (A) : Type\n| one : group_expr\n| inv : group_expr -&gt; group_expr\n| mul : group_expr -&gt; group_expr -&gt; group_expr\n</pre></div>",
        "id": 137114987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254844
    },
    {
        "content": "<p>aha</p>",
        "id": 137114999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254874
    },
    {
        "content": "<p>how would that help?</p>",
        "id": 137115007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254913
    },
    {
        "content": "<p>if you define this as  an inductive, and define the relations as a quotient, you will get really nice defeq</p>",
        "id": 137115008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254913
    },
    {
        "content": "<p><code>lift (x * y) = lift x * lift y</code>, <code>lift 1 = 1</code>, <code>lift x = f x</code></p>",
        "id": 137115051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541254954
    },
    {
        "content": "<p>I don't see how this is different from redefining <code>list.prod</code> so that <code>list.prod [f]</code> is definitionally equivalent to <code>f</code>?</p>",
        "id": 137115052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254956
    },
    {
        "content": "<p>oh</p>",
        "id": 137115054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254965
    },
    {
        "content": "<p>fair enough</p>",
        "id": 137115056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541254971
    },
    {
        "content": "<blockquote>\n<p>one way to get the right defeqs here is to have the actual definition of <code>free_group</code> be the quotient of expressions in the language of groups with the group laws, and then prove that this is isomorphic to lists</p>\n</blockquote>\n<p>Wait... in the other thread you said we shouldn't focus on getting all the right defeqs... <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 137115068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541254997
    },
    {
        "content": "<p>lol</p>",
        "id": 137115069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255004
    },
    {
        "content": "<p>sometimes it matters</p>",
        "id": 137115071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255020
    },
    {
        "content": "<p>The reason quotient types exist is because of defeqs</p>",
        "id": 137115081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255042
    },
    {
        "content": "<p>otherwise we would just use sets of sets</p>",
        "id": 137115116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255051
    },
    {
        "content": "<p>/me doesn't follow... noob alert...</p>",
        "id": 137115127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541255115
    },
    {
        "content": "<p>there is no way to build quotient types like lean's without an axiom</p>",
        "id": 137115130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255143
    },
    {
        "content": "<p>we can get something provably isomorphic, but it won't have the defeq on lift</p>",
        "id": 137115169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255164
    },
    {
        "content": "<p>I probably haven't experience the pain of working without lean's quotient types... what is wrong with sets of sets?</p>",
        "id": 137115173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541255182
    },
    {
        "content": "<p>It allows you to define functions that have a certain behavior by definition on the basis elements</p>",
        "id": 137115182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255236
    },
    {
        "content": "<p>You can live without defeq, in set theory they do this</p>",
        "id": 137115224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so, are you going to do it, or do you intend me to do it? :P</p>",
        "id": 137115225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255312
    },
    {
        "content": "<p>but it is nice to have for computational purposes</p>",
        "id": 137115226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255319
    },
    {
        "content": "<p>I think I have enough major projects to do :) Like Johan says, it's not essential</p>",
        "id": 137115235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255360
    },
    {
        "content": "<p>ok</p>",
        "id": 137115237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255366
    },
    {
        "content": "<p>but if it interests you, feel free</p>",
        "id": 137115239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255371
    },
    {
        "content": "<p>I encourage both of you to first get this merged into mathlib before embarking on new projects...</p>",
        "id": 137115242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541255401
    },
    {
        "content": "<p>(or expanding the scope of this refactor)</p>",
        "id": 137115287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541255412
    },
    {
        "content": "<p>ok I pushed the tensor product</p>",
        "id": 137115306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should we PR it now?</p>",
        "id": 137115308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255502
    },
    {
        "content": "<p>sure, that will give it more exposure</p>",
        "id": 137115350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255559
    },
    {
        "content": "<p>more exposure to what?</p>",
        "id": 137115356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255594
    },
    {
        "content": "<p>people with ideas</p>",
        "id": 137115365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255633
    },
    {
        "content": "<p>or who like to read about new things on github</p>",
        "id": 137115406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255650
    },
    {
        "content": "<p>obviously I'm already aware of this PR, and I will merge it when ready</p>",
        "id": 137115409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255672
    },
    {
        "content": "<p>and when is it ready?</p>",
        "id": 137115420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541255721
    },
    {
        "content": "<p>when I am satisfied with all the changes? It was unfinished when I last reviewed it</p>",
        "id": 137115514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255930
    },
    {
        "content": "<p>thank you for fixing the bugs, but some things still take time</p>",
        "id": 137115519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541255974
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> for the documentation effort (and help with actual Lean)! Should we already copy that to <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/theories/linear_algebra.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/theories/linear_algebra.md\">docs/theories/linear_algebra</a> or could it still change?</p>",
        "id": 137120657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541264268
    },
    {
        "content": "<p>It could still change</p>",
        "id": 137120659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541264282
    },
    {
        "content": "<p>Ok. It would be very useful if you could update it when it will stabilize, so that we'll be able to incorporate it to the docs</p>",
        "id": 137120699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541264335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ok I pushed the refactored <code>free_group.lean</code></p>",
        "id": 137130652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541283074
    },
    {
        "content": "<p>(it won't build now; I'll fix the errors if you like the new <code>free_group</code>)</p>",
        "id": 137130654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541283111
    },
    {
        "content": "<p>also, I don't understand why it is ok that <code>linear_map</code> doesn't take the ring as an argument</p>",
        "id": 137131106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541284068
    },
    {
        "content": "<p>ok I put the free group in <a href=\"https://github.com/leanprover-community/mathlib/tree/module-with-free-group\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/module-with-free-group\">a new branch</a> and resetted the PR'ed branch</p>",
        "id": 137131918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541285830
    },
    {
        "content": "<p>So I thought I'd try and get the hang of modules in Lean. Is this construction somewhere in the module branch:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 137166041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541355683
    },
    {
        "content": "<p>Idly trying to prove it myself:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R S : Type,</span>\n<span class=\"cm\">_inst_1 : comm_ring R,</span>\n<span class=\"cm\">_inst_2 : comm_ring S,</span>\n<span class=\"cm\">f : R → S,</span>\n<span class=\"cm\">_inst_3 : is_ring_hom f,</span>\n<span class=\"cm\">M : Type,</span>\n<span class=\"cm\">_inst_4 : add_comm_group M,</span>\n<span class=\"cm\">HM : module S M</span>\n<span class=\"cm\">⊢ has_scalar R M</span>\n\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 137166228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356056
    },
    {
        "content": "<p>It's a new structure. Don't you just have to define a <code>has_scalar</code> instance first?</p>",
        "id": 137166337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541356239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- maximum class-instance resolution depth has been reached</span>\n</pre></div>\n\n\n<p>My question is whether this is already in the module refactoring, which I think was to a certain extent inspired by the fact that this used to be hard to do</p>",
        "id": 137166359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356293
    },
    {
        "content": "<p>I don't think type class inference knows how to infer <code>f</code>. Try making the first things a def, and then giving <code>to_has_scalar</code> or whatever explicitly. Thinking about it, I don't think the second thing can be an instance with the current setup either.</p>",
        "id": 137166407,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541356418
    },
    {
        "content": "<p>Oh this is exactly one of those situations where I don't know how to put something into the type class inference machine because I'm in term mode.</p>",
        "id": 137166579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356751
    },
    {
        "content": "<p><code>by haveI := _; exact _</code></p>",
        "id": 137166582,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541356775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 137166634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356823
    },
    {
        "content": "<p>no errors :D</p>",
        "id": 137166635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356826
    },
    {
        "content": "<p>so I have to go into tactic mode to put something into the type class inference machine?</p>",
        "id": 137166642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541356855
    },
    {
        "content": "<p>I think so.</p>",
        "id": 137166648,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541356895
    },
    {
        "content": "<p>This should also work I think.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_has_scalar</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 137166690,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541356971
    },
    {
        "content": "<p>Now I have problems with two smuls. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Is this done already? I don't want to waste my time if it's already there, but this is exactly what I have always needed for Hilbert basis.</p>",
        "id": 137166812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357204
    },
    {
        "content": "<p>I would wait until after module refactorign</p>",
        "id": 137166821,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541357245
    },
    {
        "content": "<p>the right thing to do is just say smul := sorry, right</p>",
        "id": 137166822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357255
    },
    {
        "content": "<p>no, this hasn’t been done</p>",
        "id": 137166823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357262
    },
    {
        "content": "<p>I thought module refactoring had happened</p>",
        "id": 137166867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357297
    },
    {
        "content": "<p>you should also read my summary of the changes, this is mentioned there</p>",
        "id": 137166871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357314
    },
    {
        "content": "<p>and also you should use module.of_core</p>",
        "id": 137166872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357314
    },
    {
        "content": "<p>and also you should use module.of_core</p>",
        "id": 137166873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357315
    },
    {
        "content": "<p>I thought I had read your summary of the changes :-/</p>",
        "id": 137166874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357333
    },
    {
        "content": "<p>Chris your version is better:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_has_scalar</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">smul_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar_of_ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">M</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 137166884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357362
    },
    {
        "content": "<p>I see. I think Kenny is pointing out that by \"The idiom for making an instance module α β (after proving that β is an abelian group) is module.of_core\" he means the strong statement that end users should actually never make modules directly. Is that right Kenny? I still need an instance of <code>module R M</code> though -- how do I get it?</p>",
        "id": 137167005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357611
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"o\">{</span>\n    <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Maybe I'm on the right lines now</p>",
        "id": 137167057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541357703
    },
    {
        "content": "<p>right</p>",
        "id": 137167070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541357751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"c1\">-- (is_ring_hom.map_add f).symm ▸ (add_smul (f r) (f s) m), -- stupid triangle never works for me</span>\n      <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 137167310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541358148
    },
    {
        "content": "<p>i think you are missing two arguments</p>",
        "id": 137167371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541358250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"o\">{</span>\n    <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"c1\">-- (is_ring_hom.map_add f).symm ▸ (add_smul (f r) (f s) m), -- stupid triangle never works for me</span>\n      <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_smul</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Still haven't lost my touch ;-) [ugh]</p>",
        "id": 137167450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541358393
    },
    {
        "content": "<p>well so far I got 0% of the way through proving Hilbert basis, but at least I learnt not to use <code>module</code></p>",
        "id": 137167457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541358428
    },
    {
        "content": "<p>Does this completely fundamental fact have a name?</p>\n<p>Current version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">module_of_module_of_ring_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"o\">{</span>\n    <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"c1\">-- (@is_ring_hom.map_add _ _ _ _ f _ r s) ▸ (add_smul (f r) (f s) m), -- stupid triangle never works for me</span>\n      <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">one_smul</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 137167736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541358986
    },
    {
        "content": "<p>rw doesn't do unfolding (i.e. if I tell it <code>rw H</code> with <code>H : X = Y</code> and <code>X</code> isn't directly in view, it won't start unfolding things in an attempt to find <code>X</code>, even if something immediately unfolds to give <code>X</code>). Is the same true for the stupid triangle?</p>",
        "id": 137167788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541359100
    },
    {
        "content": "<p>Yes. What about <code>erw</code></p>",
        "id": 137167790,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541359119
    },
    {
        "content": "<p>I still seem to need the <code>show</code> for <code>add_smul</code>.</p>",
        "id": 137167798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541359178
    },
    {
        "content": "<p><code>    add_smul := λ r s m, (((@is_ring_hom.map_add _ _ _ _ f _ r s).symm ▸ (add_smul (f r) (f s) m)) :  f (r + s) • m = f r • m + f s • m),</code></p>",
        "id": 137167925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541359343
    },
    {
        "content": "<p>longer than the tactic proof ;-)</p>",
        "id": 137167926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541359348
    },
    {
        "content": "<p>It ought to be <code>by tidy</code>.</p>",
        "id": 137167940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541359422
    },
    {
        "content": "<p>does <code>tidy</code> know to try a theorem called <code>add_smul</code> when proving something called <code>add_smul</code>?</p>",
        "id": 137167986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541359469
    },
    {
        "content": "<p>Only if it is a simp-lemma</p>",
        "id": 137167991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541359495
    },
    {
        "content": "<p>But maybe, once backwords reasoning is merged, this could realistically done by <code>tidy</code>.</p>",
        "id": 137168005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541359524
    },
    {
        "content": "<p>Will this instance ever trigger?</p>",
        "id": 137168971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541361494
    },
    {
        "content": "<p>I doubt it. It will have to find a ring hom out of nowhere.</p>",
        "id": 137170222,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541363862
    },
    {
        "content": "<p>maybe we should make ring_hom just like linear_map</p>",
        "id": 137170360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541364097
    },
    {
        "content": "<blockquote>\n<p>is Mod(R) a CCC?</p>\n</blockquote>\n<p>No, because the monoidal structure is not cartesian. What you want is <a href=\"https://ncatlab.org/nlab/show/closed+monoidal+category\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/closed+monoidal+category\">https://ncatlab.org/nlab/show/closed+monoidal+category</a></p>",
        "id": 137171588,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1541366210
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 145302840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541398886
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 145302841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541398890
    },
    {
        "content": "<p>okay, my other obligations are done, so I'm working on finishing the refactoring tonight</p>",
        "id": 145303310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541399710
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">leading_term_aux</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hle</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_degree</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hh</span> <span class=\"o\">:</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">leading_coeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">leading_coeff</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf1</span><span class=\"o\">,</span> <span class=\"n\">hf2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg1</span><span class=\"o\">,</span> <span class=\"n\">hg2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"c\">/-</span><span class=\"cm\">begin</span>\n<span class=\"cm\">    by_cases h0 : a + b = 0, rw h0, exact ⟨0, I.zero_mem, rfl⟩,</span>\n<span class=\"cm\">    by_cases hf : f = 0, rw [← hf2, ← hg2, hf, leading_coeff_zero, zero_add], exact ⟨g, hg1, rfl⟩,</span>\n<span class=\"cm\">    by_cases hg : g = 0, rw [← hf2, ← hg2, hg, leading_coeff_zero, add_zero], exact ⟨f, hf1, rfl⟩,</span>\n<span class=\"cm\">    cases le_total (nat_degree f) (nat_degree g) with hd hd, -- can&#39;t get WLOG to work</span>\n<span class=\"cm\">    { refine ⟨f * X ^ (nat_degree g - nat_degree f) + g,</span>\n<span class=\"cm\">        I.add_mem (I.mul_mem_right hf1) hg1, _⟩,</span>\n<span class=\"cm\">      have := leading_term_aux hd hf hg (by rwa [hf2, hg2]),</span>\n<span class=\"cm\">      rwa [hf2, hg2] at this },</span>\n<span class=\"cm\">    { refine ⟨g * X ^ (nat_degree g - nat_degree f) + f,</span>\n<span class=\"cm\">        I.add_mem (I.mul_mem_right hg1) hf1, _⟩,</span>\n<span class=\"cm\">      have := leading_term_aux hd hg hf (by rwa [hf2, hg2, add_comm]),</span>\n<span class=\"cm\">      rwa [hf2, hg2] at this }</span>\n<span class=\"cm\">  end-/</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf1</span><span class=\"o\">,</span> <span class=\"n\">hf2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hcr</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hcr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_left</span> <span class=\"n\">hf1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">leading_coeff</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">leading_coeff_C</span><span class=\"o\">,</span> <span class=\"n\">hf2</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leading_coeff_mul&#39;</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">leading_coeff_C</span><span class=\"o\">,</span> <span class=\"n\">hf2</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 145303430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541399980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why does this time out?</p>",
        "id": 145303431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541399984
    },
    {
        "content": "<p>polynomials have had problems with long elaboration in the past</p>",
        "id": 145303491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541400103
    },
    {
        "content": "<p>check that it isn't doing any crazy typeclass searches?</p>",
        "id": 145303494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541400117
    },
    {
        "content": "<p>it's searching for <code>has_one nat</code> and <code>has_add nat</code> like a billion times</p>",
        "id": 145303620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541400339
    },
    {
        "content": "<p>still profiling (slow business, of course) but it looks like the second block takes much longer than the first</p>",
        "id": 145303719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541400517
    },
    {
        "content": "<p>oh, thanks</p>",
        "id": 145303725,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541400532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> should I push what I have in my kmb_hilbert_basis?</p>",
        "id": 145303733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541400548
    },
    {
        "content": "<p>it takes 3.5 seconds with the sorry in, which is bad but not that bad so I guess you are worried about the commented out bit</p>",
        "id": 145303748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541400579
    },
    {
        "content": "<p>but why does <code>polynomial</code> have long elaboration time?</p>",
        "id": 145303805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541400677
    },
    {
        "content": "<p>If I replace the last <code>rwa</code> in the second block with <code>rw</code>, the final state is:</p>\n<div class=\"codehilite\"><pre><span></span>...\nthis : leading_coeff (g * X ^ (nat_degree f - nat_degree g) + f) = b + a\n⊢ leading_coeff (g * X ^ (nat_degree g - nat_degree f) + f) = a + b\n</pre></div>\n\n\n<p>I'm not sure how assumption is supposed to close that</p>",
        "id": 145304062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541401180
    },
    {
        "content": "<p>ah</p>",
        "id": 145304145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541401251
    },
    {
        "content": "<p>it's probably taking forever unfolding all the things to see if those are actually the same</p>",
        "id": 145304160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541401277
    },
    {
        "content": "<p>should I add two submodules together?</p>",
        "id": 145304269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541401459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">has_add&#39;</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">N₁</span> <span class=\"n\">N₂</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">N₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">N₂</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">},</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">N₁</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">N₂</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">hy₁</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">,</span> <span class=\"n\">hy₂</span><span class=\"o\">,</span> <span class=\"n\">hz₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">N₁</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hx₁</span> <span class=\"n\">hx₂</span><span class=\"o\">,</span> <span class=\"n\">y₁</span> <span class=\"bp\">+</span> <span class=\"n\">y₂</span><span class=\"o\">,</span> <span class=\"n\">N₂</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hy₁</span> <span class=\"n\">hy₂</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hz₂</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">N₁</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">N₂</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"n\">c</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">]</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 145304491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541401909
    },
    {
        "content": "<p>isn't this <code>\\sup</code>?</p>",
        "id": 145304533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541401937
    },
    {
        "content": "<p>oh</p>",
        "id": 145304534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541401943
    },
    {
        "content": "<p>lol</p>",
        "id": 145304535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541401949
    },
    {
        "content": "<p>I realize that ring theorists prefer the notations <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A + B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">+</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\cap B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">∩</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>∨</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\vee B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">∨</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>∧</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\wedge B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">∧</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, but I think we should go for more notational uniformity</p>",
        "id": 145304565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541402032
    },
    {
        "content": "<p>oh, <code>coeff_is_linear</code> uses <code>is_linear_map</code>, should I refactor that? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 146784108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541409175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map_mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩;</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩;</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_left</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I think we can generalize this <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 146784560,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541409923
    },
    {
        "content": "<p>to what?</p>",
        "id": 146784575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541409956
    },
    {
        "content": "<p>yes on <code>coeff</code> btw, you may need a second function though</p>",
        "id": 146784617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541409979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and how far away are we from the refactoring?</p>",
        "id": 146785589,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541411413
    },
    {
        "content": "<p>plan is to finish it today; I am currently rejiggering some stuff with <code>is_unit</code> and <code>nonunits</code> prompted by some of Rob's applications</p>",
        "id": 146785630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541411522
    },
    {
        "content": "<p>are you working on a separate branch or a private repo or something? i.e. should I just push to that branch?</p>",
        "id": 146786349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541412439
    },
    {
        "content": "<p>I'm working locally, feel free to keep committing to the <code>module</code> branch and I'll merge when I push</p>",
        "id": 146786408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541412526
    },
    {
        "content": "<p>do you want to push your work to the community branches?</p>",
        "id": 146786420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541412551
    },
    {
        "content": "<p>Kenny and I are just chatting on Skype</p>",
        "id": 146786436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412596
    },
    {
        "content": "<p>For Hilbert basis</p>",
        "id": 146786437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412601
    },
    {
        "content": "<p>one perhaps needs that there's some inclusion of lattices -- if R -&gt; S is a ring hom and M is an S-module</p>",
        "id": 146786489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412645
    },
    {
        "content": "<p>then there's an order preserving injection from the lattice of sub-S-modules to the lattice of sub-R-modules</p>",
        "id": 146786501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412667
    },
    {
        "content": "<p>okay, it's broken tho</p>",
        "id": 146786568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541412733
    },
    {
        "content": "<p>A sub-R-module is just a sub-f(R)-module where f(R) is the subring of S</p>",
        "id": 146786582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412778
    },
    {
        "content": "<p>If R -&gt; S is an injection with M an S-module then there's an injection from the sub-S-modules to the sub-R-modules</p>",
        "id": 146786605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412833
    },
    {
        "content": "<p>If R -&gt; S is a surjection and M is an R-module then the submodule of M consisting of stuff which is annihiliated by the kernel of R-&gt;S is an S-module</p>",
        "id": 146786657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412878
    },
    {
        "content": "<p>and that way you get an injection from sub-S-modules to sub-R-modules</p>",
        "id": 146786709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541412929
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">of_polynomial</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">of_polynomial&#39;</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)),</span> <span class=\"c1\">-- doesn&#39;t work</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 146787850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541414448
    },
    {
        "content": "<p>it's probably guessing the wrong scalar ring here</p>",
        "id": 146787867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541414506
    },
    {
        "content": "<p>I thought it never had to guess anything nowadays?</p>",
        "id": 146787870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541414521
    },
    {
        "content": "<p>that's the next thing on the list after the module refactor</p>",
        "id": 146787918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541414542
    },
    {
        "content": "<p>There's a _list_??</p>",
        "id": 146787923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541414556
    },
    {
        "content": "<p>I feel there is a need for module refactor 2.0 <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 146787928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541414567
    },
    {
        "content": "<p>I never realised modules were so hard :-)</p>",
        "id": 146787930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541414573
    },
    {
        "content": "<p>yeah that's 'coz you're a mathematician</p>",
        "id": 146787987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541414656
    },
    {
        "content": "<p>the list is my todo list, and it's on the list because people want modules to have multiple scalar rings</p>",
        "id": 146788414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541415248
    },
    {
        "content": "<p>I am just trying to formalise various standard results in undergraduate algebra like Hilbert basis and reporting back on what mathematicians use</p>",
        "id": 146788582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541415540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> The final draft of the module refactor is pushed</p>",
        "id": 146794422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541423904
    },
    {
        "content": "<p>so... coeff is linear?</p>",
        "id": 146794432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541423938
    },
    {
        "content": "<p>it is now</p>",
        "id": 146794653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541424206
    },
    {
        "content": "<p>thanks</p>",
        "id": 146794754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541424316
    },
    {
        "content": "<p>So how do I make an S-module into an R-module if I have a ring hom <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f : R \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span>?</p>",
        "id": 146794766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541424329
    },
    {
        "content": "<p>thanks too</p>",
        "id": 146794771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541424337
    },
    {
        "content": "<p>Maybe there should be a way to put chosen ring homs in the typeclass infrastructure?</p>",
        "id": 146794880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541424481
    },
    {
        "content": "<p>Otherwise you just have to introduce it locally every time</p>",
        "id": 146794939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541424514
    },
    {
        "content": "<p>I assume you aren't asking how to define the R-module structure, that's not difficult at all</p>",
        "id": 146794957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541424547
    },
    {
        "content": "<blockquote>\n<p>Maybe there should be a way to put chosen ring homs in the typeclass infrastructure?</p>\n</blockquote>\n<p>I think we could also try using a structure <code>algebra</code>.</p>",
        "id": 146795078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541424648
    },
    {
        "content": "<blockquote>\n<p>I assume you aren't asking how to define the R-module structure, that's not difficult at all</p>\n</blockquote>\n<p>Right -- I'm asking for the idiomatic way to do it.</p>",
        "id": 146795319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541424856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  why  is it now a mixing, i.e. why is the group structure not part of modules anymore?</p>",
        "id": 146796014,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541425580
    },
    {
        "content": "<p>Because the parent coercion <code>module R M =&gt; add_comm_group M</code> was causing much of the module typeclass issues</p>",
        "id": 146796108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541425711
    },
    {
        "content": "<p>plus if <code>R</code> becomes not an <code>out_param</code> then it won't even work</p>",
        "id": 146796123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541425741
    },
    {
        "content": "<p>the module PR looks very good to me</p>",
        "id": 146802129,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541431025
    },
    {
        "content": "<p>It's merged <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span></p>",
        "id": 146804978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541433579
    },
    {
        "content": "<p>COMMIT 1000</p>",
        "id": 146804983,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541433586
    },
    {
        "content": "<p>Bases should <strong>definitely</strong> be maps or lists.  Some treatments of finite-dimensional linear algebra purport to use subsets, but they are almost always wrong if read literally, and would require fiddly side-conditions to make them right.  Also, to talk about the standard algorithms you need efficient translation between bases and matrices, which becomes very awkward if you use subsets.</p>",
        "id": 157346031,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1549019915
    },
    {
        "content": "<p>It isn't too hard to convert between a subset and a map. But maybe there should be a bit more API for this. Is there something specific that you are missing?</p>",
        "id": 157346162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549020067
    },
    {
        "content": "<p>Matrices are currently indexed by fintypes (not necessarily ordered).</p>",
        "id": 157346171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549020095
    },
    {
        "content": "<p>... is this related to the previous discussion?</p>",
        "id": 157346354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549020360
    },
    {
        "content": "<p>I think not, sorry.  Zulip sometimes gets in a funny state where it shows me very old posts mixed in with new ones, and I was accidentally replying to one of those.  I am not quite sure what is going on with that.</p>",
        "id": 157346582,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1549020657
    }
]