[
    {
        "content": "<p>I've been playing a bit with how to state exercises in Lean. This may also be related to the IMO grand challenge. This is what I've come up with so far.</p>",
        "id": 196974760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">calculate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">bit</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">calculate</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">calculate_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">calculate_one</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">calculate_bit0</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">calculate_bit1</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bit</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">calculate_bit0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">calculate_one</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196974797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002087
    },
    {
        "content": "<p>My question is: can you modify reducibility settings of definitions while you're inside a tactic proof?</p>",
        "id": 196974805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002146
    },
    {
        "content": "<p>Because inside a game / competition / homework setting I guess you can reasonably enforce that participants / students are only allowed to \"hand in\" a <code>begin ... end</code>-block. But if they can make <code>calculate</code> reducible inside that tactic block, of course this is all doomed.</p>",
        "id": 196974868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002303
    },
    {
        "content": "<p>I've also been thinking that one might want to add some typeclass that adds some \"allowed expressions\", for example <code>calculate pi</code> would be an \"axiom\" for the reals, that could be added by the instructor / kata designer</p>",
        "id": 196974914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002428
    },
    {
        "content": "<p>Maybe in codewars you actually hand in more than just a <code>begin ... end</code> block. So then that's not the intended audience <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span> <br>\nBut for homework, you could make it a rule.</p>",
        "id": 196974967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002514
    },
    {
        "content": "<p>This should come with a tactic (or custom <code>begin ... end</code> environment, like <code>calculate_done</code>, that will check that the final expression can be \"calculated\"</p>",
        "id": 196975010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002569
    },
    {
        "content": "<p>You can unfold irreducible in a tactic proof (indeed you can even just remove the attribute)</p>",
        "id": 196975071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589002695
    },
    {
        "content": "<p>So then we would need to do something quite a bit more clever.</p>",
        "id": 196975121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589002864
    },
    {
        "content": "<p>In this case, using only the provided lemmas, you are asking to prove that <code>4 - 2</code> is a natural number, but this doesn't require computing the number</p>",
        "id": 196975122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589002867
    },
    {
        "content": "<p>If you really wanted to lock it down to the provided lemmas, you could just have an inductive predicate to that effect</p>",
        "id": 196975127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589002911
    },
    {
        "content": "<p>But you can't prove <code>calculate n</code> for <code>(n : nat)</code>, right? Unless you remove the irreducibility.</p>",
        "id": 196975212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003061
    },
    {
        "content": "<p>You have to turn it into something sufficiently close to a numeral</p>",
        "id": 196975216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003081
    },
    {
        "content": "<p>(E.g. <code>2 + 2</code> is fine.)</p>",
        "id": 196975219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003091
    },
    {
        "content": "<p>Maybe I should cook up an example involving determinants, to make this slightly less trivial.</p>",
        "id": 196975225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003118
    },
    {
        "content": "<p>Indeed I can, using the Power of Induction:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">binary_rec</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">calculate_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"bp\">_|_</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">calculate_bit0</span><span class=\"o\">,</span> <span class=\"n\">calculate_bit1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196975439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589003579
    },
    {
        "content": "<p>/me clearly doesn't know enough about bits</p>",
        "id": 196975575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003845
    },
    {
        "content": "<p>But this means that whatever definition of <code>calculate</code> you come up with, you can always prove <code>calculate n</code>, I guess.</p>",
        "id": 196975581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003872
    },
    {
        "content": "<p>I mean you could simplify this by saying that you only provide <code>calculate (nat.succ n)</code> when <code>calculate n</code>, and then it would more clearly be an instance of induction</p>",
        "id": 196975621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589003901
    },
    {
        "content": "<p>but if you couldn't do this kind of thing it would defeat the purpose of lean as a proof assistant. We <em>want</em> to be able to prove properties by induction</p>",
        "id": 196975627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589003931
    },
    {
        "content": "<p>Sure</p>",
        "id": 196975632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003951
    },
    {
        "content": "<p>But I thought maybe we can single out certain properties and make them irreducible and yadda yadda...</p>",
        "id": 196975638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589003985
    },
    {
        "content": "<p>Another way to get what you want is to say that you have an infinite number of axioms, <code>calculate 0</code>, <code>calculate 1</code>, <code>calculate 2</code>, ... without using lean quantifiers to get it</p>",
        "id": 196975686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589004019
    },
    {
        "content": "<p>Maybe another option would be to have a tactic <code>check_answer</code> that must be the last line of the tactic block?</p>",
        "id": 196975701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004067
    },
    {
        "content": "<p>And the tactic fails if it doesn't like the <code>(p)expr</code> that has been constructed so far.</p>",
        "id": 196975708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004088
    },
    {
        "content": "<p>Or would you still be able to cheat using induction?</p>",
        "id": 196975752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004139
    },
    {
        "content": "<p>Hmm... I'm afraid this won't be foolproof either...</p>",
        "id": 196975805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004262
    },
    {
        "content": "<p>You can probably do something like</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">tactic1</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic2</span><span class=\"o\">,</span>\n  <span class=\"n\">close_goal_by_induction</span><span class=\"o\">,</span> <span class=\"c1\">-- proof accomplished!</span>\n  <span class=\"k\">show</span> <span class=\"n\">calculate</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">check_answer</span>\n</code></pre></div>",
        "id": 196975817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004326
    },
    {
        "content": "<p>And just fool it into checking a trivial exercise</p>",
        "id": 196975822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589004345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">calculate</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">calculate</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">calculate</span> <span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ax</span> <span class=\"o\">:=</span> <span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"s2\">&quot;calculate_&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">ax</span> <span class=\"n\">ax</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">calculate</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">)))),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">ax</span> <span class=\"o\">[])</span>\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">calculate</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">calculate</span>\n</code></pre></div>",
        "id": 196975939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589004533
    },
    {
        "content": "<p>this achieves an infinite family of axioms by having the <code>calculate</code> tactic produce them on the fly</p>",
        "id": 196975956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589004591
    },
    {
        "content": "<p>you can't do induction on them</p>",
        "id": 196975960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589004600
    },
    {
        "content": "<p>The downsides of this method are that you get new axioms for every use of <code>calculate</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"mi\">5</span> <span class=\"bp\">∧</span> <span class=\"n\">calculate</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">calculate</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">T</span>\n<span class=\"c1\">-- calculate</span>\n<span class=\"c1\">-- calculate_5</span>\n<span class=\"c1\">-- calculate_7</span>\n</code></pre></div>\n\n\n<p>and also that because theorems can't add axioms to the environment, you have to either mark the theorem as a <code>def</code> or prepare the state beforehand:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">calculate</span> <span class=\"c1\">-- fails</span>\n<span class=\"n\">def</span> <span class=\"n\">T&#39;</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">calculate</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">calculate</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">calculate</span> <span class=\"c1\">-- ok because T&#39; already added calculate_5</span>\n</code></pre></div>",
        "id": 196976068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589004841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/calculate/near/196975701\" title=\"#narrow/stream/113488-general/topic/calculate/near/196975701\">said</a>:</p>\n<blockquote>\n<p>Maybe another option would be to have a tactic <code>check_answer</code> that must be the last line of the tactic block?</p>\n</blockquote>\n<p>Rather than the last line, it should be the first line, with a block surrounding the rest of the proof. That way <code>check_answer</code> gets the state, calls the given user tactic, and then checks that the original goal has been solved appropriately. Or, rather than intercepting the expr before the proof is done, you can just examine the proof later with a <code>run_cmd</code> tactic at the end of the file</p>",
        "id": 196976223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589005110
    },
    {
        "content": "<p>Hmm, I like this last idea.</p>",
        "id": 196977111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589006941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would something like this be a start?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">allowed_exprs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">good_exprs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">calculate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">allowed_exprs</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 196977786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008177
    },
    {
        "content": "<p>When I ran into this sort of issue when formalising problem sheets I just told my students that it was their job to formalise the question.</p>",
        "id": 196977831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008231
    },
    {
        "content": "<p>what's in the list?</p>",
        "id": 196977839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008250
    },
    {
        "content": "<p>I realised that actually some questions we ask the students are hugely ambiguous. For example \"for which n is it true that all groups of order n are abelian?\"</p>",
        "id": 196977848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008276
    },
    {
        "content": "<p>Things like <code> [`bit0, `bit1, `has_zero.zero, `has_zero.one] </code></p>",
        "id": 196977849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008278
    },
    {
        "content": "<p>The answer is \"it's the n for which all groups of order n are abelian\"</p>",
        "id": 196977851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008294
    },
    {
        "content": "<p>Unless you get <code>calculate</code> working...</p>",
        "id": 196977853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008313
    },
    {
        "content": "<p>And this is computable</p>",
        "id": 196977854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008321
    },
    {
        "content": "<p>That doesn't matter. My tactic will reject your answer.</p>",
        "id": 196977893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008336
    },
    {
        "content": "<p>If the problem statement includes a list of <code>name</code>s that are allowed to occur in the answer, you can make it precise. At least that's my current hope</p>",
        "id": 196977898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008386
    },
    {
        "content": "<p>But this is part of a more general question -- what does a mathematician even <em>mean</em> when they ask that sort of a question?</p>",
        "id": 196977899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008387
    },
    {
        "content": "<p>It's easy to detect if a numeral is given by tactics, you don't need this</p>",
        "id": 196977903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008429
    },
    {
        "content": "<p>Right. They mean: give me an answer that is an <code>expr</code> that only uses <code>name</code>s from some <code>L : list name</code>. Only <code>L</code> is an implicit variable (-;</p>",
        "id": 196977904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008434
    },
    {
        "content": "<p>\"For which real numbers x!=3 is (x+1)/(x-3) positive?\"</p>",
        "id": 196977905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008435
    },
    {
        "content": "<p>The answer is \"those ones\"</p>",
        "id": 196977942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008446
    },
    {
        "content": "<p>but I think the problem is that numerals don't suffice for many problems</p>",
        "id": 196977943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/calculate/near/196977903\" title=\"#narrow/stream/113488-general/topic/calculate/near/196977903\">said</a>:</p>\n<blockquote>\n<p>It's easy to detect if a numeral is given by tactics, you don't need this</p>\n</blockquote>\n<p>But I want to be able to allow <code>real.pi</code> (sometimes)</p>",
        "id": 196977944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008451
    },
    {
        "content": "<p>you can write a tactic that detects terms of the required form</p>",
        "id": 196977951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008485
    },
    {
        "content": "<p>assuming you can define what the required form is</p>",
        "id": 196977954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008501
    },
    {
        "content": "<p>You mean \"<em>you</em> can write a tactic that detects terms of the required form\"</p>",
        "id": 196977958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008508
    },
    {
        "content": "<p>You still overestimate my skills</p>",
        "id": 196977959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008514
    },
    {
        "content": "<p>But this \"required form\". Do you think I'm on the right path with my <code>list name</code>?</p>",
        "id": 196977962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008533
    },
    {
        "content": "<p><code>expr.of_nat</code> does this for numerals</p>",
        "id": 196977963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008534
    },
    {
        "content": "<p>the list name is probably underconstraining if you want a well formed numeral</p>",
        "id": 196977966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008556
    },
    {
        "content": "<p>There is also a way to do it without tactics, again using an indutive type to define the required form</p>",
        "id": 196978010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008613
    },
    {
        "content": "<p>But wouldn't I be able to prove by induction that every <code>n</code> satisfies the inductive predicate?</p>",
        "id": 196978015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589008649
    },
    {
        "content": "<p><code>def foo : { n : nat_term // (n : nat) = 4 - 2 } := sorry</code></p>",
        "id": 196978018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008677
    },
    {
        "content": "<p>\"oh and make it computable too please\"</p>",
        "id": 196978058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589008685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> But can we turn that into something that has a slick UI?</p>",
        "id": 196978311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009235
    },
    {
        "content": "<p>Or would that still require tactics</p>",
        "id": 196978314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009242
    },
    {
        "content": "<p>I would like to create something that is foolproof and looks good.</p>",
        "id": 196978367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009300
    },
    {
        "content": "<p>looks good probably requires tactics</p>",
        "id": 196978390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009332
    },
    {
        "content": "<p>But that's lean's strength</p>",
        "id": 196978393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009346
    },
    {
        "content": "<p>I'm not opposed to tactics (-;</p>",
        "id": 196978396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009353
    },
    {
        "content": "<p>How would you do my real number question? It's somehow \"clear\" to mathematicians that the answer is expected to be a disjoint union of open/closed/semiopen intervals</p>",
        "id": 196978397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009355
    },
    {
        "content": "<p>then say that</p>",
        "id": 196978401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009368
    },
    {
        "content": "<p>But this seems to be as much a convention as anything else</p>",
        "id": 196978407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You have to formalise the \"language\"</p>",
        "id": 196978409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009379
    },
    {
        "content": "<p>Right</p>",
        "id": 196978411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/calculate/near/196978407\" title=\"#narrow/stream/113488-general/topic/calculate/near/196978407\">said</a>:</p>\n<blockquote>\n<p>But this seems to be as much a convention as anything else</p>\n</blockquote>\n<p>Sure, so hide it in a type class</p>",
        "id": 196978413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009390
    },
    {
        "content": "<p>you can define \"disjoint union of intervals\" easily enough</p>",
        "id": 196978414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009391
    },
    {
        "content": "<p>\"Express as your answer as a disjoint union of intervals\" or something</p>",
        "id": 196978456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009412
    },
    {
        "content": "<p>of course you are stymied to some extent by various general theorems like \"every open set is a disjoint union of intervals\" and such</p>",
        "id": 196978460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/calculate/near/196978456\" title=\"#narrow/stream/113488-general/topic/calculate/near/196978456\">said</a>:</p>\n<blockquote>\n<p>\"Express as your answer as a disjoint union of intervals\" or something</p>\n</blockquote>\n<p>But every set is a disjoint union of intervals!</p>",
        "id": 196978462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009447
    },
    {
        "content": "<p>Rofl</p>",
        "id": 196978465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009452
    },
    {
        "content": "<p>not every set is the finite disjoint union of intervals, but if it's a polynomial then the options are pretty limited</p>",
        "id": 196978471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009479
    },
    {
        "content": "<p>That's great :-) This question is hard!</p>",
        "id": 196978474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009484
    },
    {
        "content": "<p>I think it's pretty clear that we want to inspect the <code>expr</code> that the user provides.</p>",
        "id": 196978478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009507
    },
    {
        "content": "<p>Did you know that you can inspect exprs using typeclass inference?</p>",
        "id": 196978518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009535
    },
    {
        "content": "<p>No?</p>",
        "id": 196978519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009542
    },
    {
        "content": "<p>But it sounds like that is maybe not \"best practice\"</p>",
        "id": 196978522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589009571
    },
    {
        "content": "<p>My daughter is doing maths online nowadays for school and using various web pages which are supposed to inspect her text input and decide whether she got it right.</p>",
        "id": 196978525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009584
    },
    {
        "content": "<p>These systems are by no means perfect</p>",
        "id": 196978527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009592
    },
    {
        "content": "<p>But it never occurred to me to just tell her to type the question in as the answer</p>",
        "id": 196978530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009623
    },
    {
        "content": "<p>She normally has enough trouble with a correct answer not being accepted because of some grammar issue</p>",
        "id": 196978572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589009659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">is_numeral</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">is_numeral</span> <span class=\"o\">:</span> <span class=\"n\">is_numeral</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"n\">is_numeral</span> <span class=\"o\">:</span> <span class=\"n\">is_numeral</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">bit0</span><span class=\"bp\">.</span><span class=\"n\">is_numeral</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_numeral</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_numeral</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">bit1</span><span class=\"bp\">.</span><span class=\"n\">is_numeral</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_numeral</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_numeral</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exists_numeral</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Exists</span> <span class=\"n\">P</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_numeral</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_numeral</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists_numeral</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">exists_numeral</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists_numeral</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">2</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">exists_numeral</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists_numeral</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- not ok</span>\n</code></pre></div>",
        "id": 196978639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009857
    },
    {
        "content": "<p>this might satisfy your \"looks good\" criterion with a bit of notation, and gives helpful error messages, but it is not foolproof against hackers</p>",
        "id": 196978697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009922
    },
    {
        "content": "<p>so you would have to have a tactic as backup if you want more security</p>",
        "id": 196978705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589009975
    },
    {
        "content": "<p>(you should also add <code>attribute [irreducible] exists_numeral</code> so that you can't accidentally circumvent it using <code>split</code> or <code>existsi</code>)</p>",
        "id": 196978785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589010060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/calculate/near/196978697\" title=\"#narrow/stream/113488-general/topic/calculate/near/196978697\">said</a>:</p>\n<blockquote>\n<p>this might satisfy your \"looks good\" criterion with a bit of notation, and gives helpful error messages, but it is not foolproof against hackers</p>\n</blockquote>\n<p>Right, I can still prove <code>exists_numeral</code> for arbitrary nats, right? Because it is almost the same as my first <code>calculate</code>.</p>",
        "id": 196979245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589010910
    },
    {
        "content": "<p>right, the idea here is that a good faith usage not using lots of @ signs will give errors in the right places</p>",
        "id": 196979755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589011670
    },
    {
        "content": "<p>I think this conversation is very interesting, but also that a solution is not important to the project of giving homework in Lean</p>",
        "id": 196994399,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589034840
    },
    {
        "content": "<p>When I graded for a Haskell course in the CS department, checking that the solution compiled was just the first step in grading. If it didn't compile we sent it back to the student and asked them to fix and resubmit.</p>\n<p>Once I have a compiling submission, I read the code and make comments about the parts I think could be cleaner or more understandable or more efficient. This is the same work that I did when grading for theorem-proving classes, just with the added benefit that I didn't have to decide how large of holes I let pass through.</p>",
        "id": 196994479,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589034891
    },
    {
        "content": "<p>Maybe your grading rubric is such that anyone who submits compiling code gets a passing grade, but to get an A on an assignment you have to comment your proof in such a way that the comments on their own would pass for a proof in a normal math class</p>",
        "id": 196994680,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589035197
    },
    {
        "content": "<p>and then you've still reduced the burden on the grader, they \"only\" have to check that </p>\n<ol>\n<li>the writing sounds like good math prose,</li>\n<li>the comments mean the same thing as the nearby bits of Lean,</li>\n<li>the path to the proof was reasonably direct / didn't rely on machinery that's \"out of scope\" for the class</li>\n</ol>",
        "id": 196994754,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589035267
    },
    {
        "content": "<p>Why not simply correlate the grade to the number of symbols in the proof script?<br>\nGolfing FTW!</p>",
        "id": 196994817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589035335
    },
    {
        "content": "<p>where in a normal math class 2 is replaced by the significantly harder \"verify that the ideas required to formalize this proof are 'out of scope' in the direction of being 'trivial'\", or maybe \"verify that the ideas required to formalize this proof are probably known to the author\". I did the last one a lot and it leads to an awful bias against non-native english speakers.</p>",
        "id": 196994840,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589035387
    }
]