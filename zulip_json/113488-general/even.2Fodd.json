[
    {
        "content": "<p>Dear All,</p>\n<p>currently, <code>even</code> and <code>odd</code> are defined as follow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- An element `a` of a semiring is even if there exists `k` such `a = 2*k`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n\n<span class=\"sd\">/-- An element `a` of a semiring is odd if there exists `k` such `a = 2*k + 1`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>What would everyone think of redefining them in terms of <code>bit0</code> and <code>bit1</code>?  (Recall that <code>bit0 a  = a + a</code> and <code>bit1 a = a + a + 1</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--  new version</span>\n<span class=\"sd\">/-- An element `a` of a type with addition is even if there exists `k` such `a = k + k`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"n\">k</span>\n\n<span class=\"sd\">/-- An element `a` of a semiring is odd if there exists `k` such `a = k + k + 1`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">bit1</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>This means that some of the lemmas in <code>data.nat/int.parity</code> can be proven more generally and only once, e.g. <code>even.add_even, even.add_odd</code>...</p>",
        "id": 275412495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647367406
    },
    {
        "content": "<p>Note that bit0/bit1 are gone in Lean 4.</p>",
        "id": 275413270,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647367725
    },
    {
        "content": "<p>Ok, so maybe I am changing to using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An element `a` of a type with addition is even if there exists `k` such `a = k + k`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span>\n\n<span class=\"sd\">/-- An element `a` of a semiring is odd if there exists `k` such `a = k + k + 1`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 275413486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647367811
    },
    {
        "content": "<p>You only need <code>[has_add α] [has_one]</code> for <code>odd</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 275416468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647369003
    },
    {
        "content": "<p>That's what I had, I'm not sure how I could have gone so much overboard with the assumptions!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 275416593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647369070
    },
    {
        "content": "<p>As an experiment, I created a new file and proved the four lemmas about adding two elements of a semiring, with all combinations of even odd assumptions.</p>\n<p>I then removed the duplicates in <code>data.nat/int.parity</code> and realized that these lemmas were not actually used!</p>",
        "id": 275444581,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647383599
    },
    {
        "content": "<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/12718\">#12718</a>.  The definition of even/has not changed.</p>",
        "id": 275444667,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647383660
    },
    {
        "content": "<p>... which broke some of my code upon updating mathlib; it was using some <code>nat.even.</code> stuff.</p>",
        "id": 275910086,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647695572
    },
    {
        "content": "<p>Oh, what is it?  Probably, removing a <code>nat.</code> or <code>int.</code> prefix might fix the issue?</p>",
        "id": 275910216,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647695785
    },
    {
        "content": "<p>I'm not at a computer, though, so I will have limited possibilities of fixing this soon...</p>",
        "id": 275910221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647695814
    },
    {
        "content": "<p>(Also, hi Michael!)</p>",
        "id": 275910225,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647695823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  Hi! Yes, I just had to remove the <code>nat.</code> prefix.</p>",
        "id": 275911053,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647697141
    },
    {
        "content": "<p>I have tried being careful to only generalize statements, and not removing anything that was there, even if unused in master.</p>\n<p>Glad that this was easy!</p>",
        "id": 275911130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647697229
    },
    {
        "content": "<p>In fact, in one of the lemmas, the order of arguments had to be switched, but it was no big deal.</p>",
        "id": 275912057,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647698578
    },
    {
        "content": "<p>Ok.  I would have probably picked up on this, if the even/odd side of the library was more used.  As is, very few files use even/odd, so it is difficult to know if I made some \"big\" changes.  The most visible for me was the change in namespace.</p>",
        "id": 275912282,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647698903
    },
    {
        "content": "<p>Actually, why weren't <code>even</code> and <code>odd</code> using <code>2 •</code> instead of <code>2 *</code>?</p>",
        "id": 276037963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647863024
    },
    {
        "content": "<p>I'm guessing that would mean inserting smul_eq_mul rewrites in a lot of places</p>",
        "id": 276039355,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647863974
    },
    {
        "content": "<p>What would the motivation be to use smul instead of mul?</p>",
        "id": 276039983,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647864325
    },
    {
        "content": "<p>... to not assume <code>has_mul</code></p>",
        "id": 276042137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647865544
    },
    {
        "content": "<p>If you want the reason, it's that a little over a year ago Patrick Massot defined them so that they can replace <code>nat.even</code>/<code>nat.odd</code> and <code>int.even</code>/<code>int.odd</code>.</p>\n<p>Curious if there are any situations where you'd have <code>has_add</code> and <code>has_one</code>, have no <code>has_mul</code>, and want to know which elements are even or odd.</p>",
        "id": 276044128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647866638
    },
    {
        "content": "<p>For abelian groups aka <code>ℤ</code>-modules it seems a reasonable concept.</p>",
        "id": 276044526,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647866800
    },
    {
        "content": "<p>Those have <code>has_add</code> and <code>has_zero</code>, but no <code>has_one</code>, right?</p>",
        "id": 276045113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647867024
    },
    {
        "content": "<p>Yes, so you can still talk about <code>even</code></p>",
        "id": 276045149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647867043
    },
    {
        "content": "<p>Ah sure, I was only thinking about <code>has_smul</code></p>",
        "id": 276045223,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647867087
    },
    {
        "content": "<p>I was thinking of doing the change with \\smul.  However, it seems a little bit of work, which eventually is almost entirely used in <code>nat, int, zmod 2</code>.</p>\n<p>If you think that having <code>even</code> for abelian add_monoids, then I can go ahead and refactor.</p>",
        "id": 276053920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647871043
    },
    {
        "content": "<p>I have a proposal about this.</p>\n<p>First a little bit of motivation.<br>\nI feel that <code>even</code> is <em>much</em> more useful for a general type than <code>odd</code>.  The usefulness of <code>odd</code> is mostly for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and, a little artificially, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>\n<p>Moreover, <code>even</code> is the additive version of <code>square</code>.  Btw, I did not find <code>square</code> or <code>is_square</code> in mathlib.</p>\n<p>What do people think of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.to_additive</span>\n\n<span class=\"sd\">/--  An element `a` of a type `α` with multiplication satisfies `square a` if `a = r * r`,</span>\n<span class=\"sd\">for some `r : α`. -/</span>\n<span class=\"kd\">@[to_additive even</span>\n<span class=\"kd\">\"An element `a` of a type `α` with addition satisfies `even a` if `a = r + r`,</span>\n<span class=\"kd\">for some `r : α`.\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 276150486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647933286
    },
    {
        "content": "<p>Then, the \"general theory\" would use <code>\\not even</code>, rather than <code>odd</code>.</p>",
        "id": 276150519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647933329
    },
    {
        "content": "<p>I think square is generally rendered in mathlib as <code>sq</code>, did you try searching for that?</p>",
        "id": 276150858,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647933702
    },
    {
        "content": "<p>In any case, making <code>even</code> the <code>to_additive</code> of a new <code>is_sq</code> seems clever and a good idea.</p>",
        "id": 276150947,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647933783
    },
    {
        "content": "<p>I just tried with <code>sq</code> and <code>is_sq</code>: with the former, there are several hits, but they all seem to be referring to lemmas describing a <code>^ 2</code> appearing in the type.</p>\n<p>I could still not find a definition of a square.  It may very well be that it is not there.</p>",
        "id": 276151875,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647934732
    },
    {
        "content": "<p>I also tried the more general <code>is_pow</code> and again I could not find it.</p>",
        "id": 276151885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647934747
    },
    {
        "content": "<p>I personally think that all this is abstraction for abstraction's sake. Where is the application? Of course we use it for \\N and \\Z. Do we ever use the concept of oddness elsewhere?</p>",
        "id": 276153381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647936054
    },
    {
        "content": "<p>I agree with you on <code>odd</code>: I do not think that <code>odd</code> is used except for <code>nat</code> and <code>int</code>.</p>\n<p>However, <code>square/even</code> seem much more ubiquitous and that is the definition that I am proposing.</p>",
        "id": 276153934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647936400
    },
    {
        "content": "<p>Do you then want to define <code>odd a</code> as <code>¬ even a</code>?</p>",
        "id": 276155769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647937681
    },
    {
        "content": "<p>I am not even sure that I would define <code>odd</code> generally.  I would delay defining <code>odd</code> for as long as possible.  I think that<code>¬ even a</code> is good in general.  For <code>nat, int</code> it is possible that <code>+ 1</code> is a good choice.</p>",
        "id": 276155927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647937769
    },
    {
        "content": "<p>Okay sure. I quite like this idea.</p>",
        "id": 276156076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647937884
    },
    {
        "content": "<p>Let me clarify: I am proposing to change the definition of <code>even</code> so that it is the <code>to_additive</code> version of <code>square</code>.</p>\n<p>With respect to <code>odd</code> I am currently proposing no change: whatever is already in mathlib, stays as is.</p>\n<p>Possibly, <code>odd</code> will be revamped later on, but for the moment I was concerning myself only with <code>even</code>.</p>",
        "id": 276156224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647937959
    },
    {
        "content": "<p>The main point we have to remember is that <code>even</code>/<code>square</code> really is a very basic property that we use to simplify very elementary arguments.</p>",
        "id": 276156268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647938009
    },
    {
        "content": "<p>In the code I have written so far to deal with the Hilbert symbol (over ℚ), I use <code>even</code> and <code>odd</code> a lot (of naturals), since it is very relevant if the p-adic valuation of something is even or odd. So I would hope that my squeezed <code>simp</code>s will continue to work...</p>",
        "id": 276163011,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647942397
    },
    {
        "content": "<p>I hope so too!  In any case, I have not started this yet.  Once there is a PR, you can \"test it out\" by merging it into your branch and seeing if something breaks.</p>\n<p>If/when it does, simply let me know and I will try to see what is going on.  I will attempt to only change the definition and replace it with an equivalent one, so that all \"old\" lemmas still hold.  What happened earlier was that some lemmas changed namespace, since they were no longer specific to <code>nat/int</code> but applied more generally.  This is, I hope, the largest change to be expected for the existing lemmas!</p>",
        "id": 276163392,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647942634
    },
    {
        "content": "<p>Even the reordering of assumptions with which you had problems should <em>not</em> have happened.</p>",
        "id": 276163418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647942657
    },
    {
        "content": "<p>By the way, if you PR your lemmas and they make it to mathlib <em>before</em> the revamping of <code>even</code> takes place, then it is not your responsibility to make sure that it still compiles, but mine! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 276163860,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647942917
    },
    {
        "content": "<p>In fact, what you are describing is a great testing ground for the change in <code>even/square</code>.  Knowing that something has <code>even</code> valuation is not equivalent to it being a <code>square</code> and it would be kind of cool to see the interaction between these two \"identical concepts in additive/multiplicative groups\" playing out in Lean!</p>",
        "id": 276164064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647943066
    },
    {
        "content": "<p>It will take a while until my stuff will get into mathlib, so don't hold your breath.</p>",
        "id": 276164334,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647943184
    },
    {
        "content": "<p>Anyway, here is a teaser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Hsymbol_product_formula_finprod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏ᶠ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">v</span><span class=\"o\">]</span><span class=\"n\">_H</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 276164535,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647943231
    },
    {
        "content": "<p>I'll open a thread on this and the questions I have related to getting it into mathlib at some later point...</p>",
        "id": 276164627,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647943289
    },
    {
        "content": "<p>Ok, in any case, once this gets going, I may ask you if I can merge your branch into mine, as a test.  At the moment, even/odd is not so used in mathlib and squares do not appear to even exist!</p>",
        "id": 276164949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647943483
    },
    {
        "content": "<p>Pretty sure they do, but the condition is written out.</p>",
        "id": 276165174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647943601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Is that <code>Hsymbol_product_formula_finprod</code> sorry-free?</p>",
        "id": 276167594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647944963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes!</p>",
        "id": 276167635,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647944990
    },
    {
        "content": "<p>Wow! That's really nice!</p>",
        "id": 276167714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647945011
    },
    {
        "content": "<p>As it stands, it is ~3000 lines of code.</p>",
        "id": 276167763,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647945044
    },
    {
        "content": "<p>And some stuff is still missing, like the characterization via solvability of ternary quadratic forms...</p>",
        "id": 276167799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647945071
    },
    {
        "content": "<p>When I embarked on that project, I did not anticipate that it would grow so large.</p>",
        "id": 276168442,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647945412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/even.2Fodd/near/276168442\">said</a>:</p>\n<blockquote>\n<p>When I embarked on that project, I did not anticipate that it would grow so large.</p>\n</blockquote>\n<p>I feel that! :)</p>",
        "id": 276168531,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647945460
    },
    {
        "content": "<p>If you are interested, I started preparing the refactor of even.  The relevant PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/12882\">#12882</a>.</p>\n<p>This PR is only moving (many) lemmas involving even/odd to a single file.  The change in definition will happen in a separate PR.</p>",
        "id": 276230301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647972102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, if you've got 3000 lines of code, you think some things are still missing, but substantial results are already sorry-free, I'd really encourage you to start PRing material. It's going to require many PRs to get your work into mathlib, and starting early is good for everyone. (mathlib gets the early content even if the content you still want to work on takes much longer, you get feedback that may require changes to the later work as early as possible, and reviewers get more time!)</p>",
        "id": 276265299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647989530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You are probably right, but I'm a bit afraid that doing all this will develop into an enormous time sink... (And first I have to learn how this all works.) So I'm planning to do it slowly.</p>",
        "id": 276387832,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1648063788
    },
    {
        "content": "<p>There is no doubt it will be an enormous time sink. But you'll learn a lot.</p>",
        "id": 276395527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648067395
    },
    {
        "content": "<p>And this way your code will not rot (especially after migration to Lean 4).</p>",
        "id": 276400082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648069360
    },
    {
        "content": "<p>Dear All,</p>\n<p>PR <a href=\"https://github.com/leanprover-community/mathlib/pull/13037\">#13037</a> now has <code>olean</code>s!  Any comment would be greatly appreciated!</p>\n<p>Thanks!</p>",
        "id": 277100450,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648623031
    }
]