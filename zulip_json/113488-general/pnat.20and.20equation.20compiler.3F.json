[
    {
        "content": "<p>Can I somehow make the equation compiler work on pnat as well as it works on nat? Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ+</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>How does the equation compiler work? It is presumably bound to the inbuilt constructors? Would this basically just entail writing a new pnat with <code>one</code> and <code>succ</code> and then defining stuff like <code>*</code> on the new structure?</p>",
        "id": 147850385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542406996
    },
    {
        "content": "<p>is it possible to build a custom equation compiler?</p>",
        "id": 147850569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542407212
    },
    {
        "content": "<p>right. Lean 3 doesn't have the necessary customizability for this</p>",
        "id": 147850900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542407552
    },
    {
        "content": "<p>Although we could write our own equation compiler if we write our own version of <code>def</code></p>",
        "id": 147850924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542407597
    }
]