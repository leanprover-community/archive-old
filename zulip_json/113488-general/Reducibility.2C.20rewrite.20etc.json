[
    {
        "content": "<p>I am proving some lemmas about commuting elements.  I define <code>commute a b := a * b = b * a</code>, then prove things like <code>commute a b → commute a c → commute a (b * c)</code>; this seems like a very natural idiom to use.  However, with this framework, if I have <code>h : commute a b</code> then <code>rw [h]</code> fails with <code>rewrite tactic failed, lemma is not an equality nor a iff</code>.  It does not help to mark the definition of <code>commute</code> with <code>@[reducible]</code>.  You can do <code>change _ = _ at h, rw [h]</code> but that is awkward.  Is there a standard approach to this kind of thing?</p>",
        "id": 166632699,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558960027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"o\">,</span> <span class=\"n\">class</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span> <span class=\"n\">is_commutative</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">is_commutative</span><span class=\"bp\">.</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 166633095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558960369
    },
    {
        "content": "<p>it's already in core</p>",
        "id": 166633097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558960374
    },
    {
        "content": "<p>I would just unfold <code>commute</code></p>",
        "id": 166633135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558960423
    },
    {
        "content": "<p><code>rw (show _ = _, from h)</code> is what I would do.</p>",
        "id": 166633506,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558960717
    },
    {
        "content": "<p><code>is_commutative</code> is universally quantified:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"o\">]</span> <span class=\"n\">class</span> <span class=\"n\">is_commutative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am looking at particular pairs of elements that commute even though they live in a noncommutative structure.  I don't think that that is in  core or mathlib at the moment.</p>",
        "id": 166633822,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558961019
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">commute</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commute</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">eq</span>\n</pre></div>",
        "id": 166638646,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558964923
    },
    {
        "content": "<p>That's promising. I will try that.</p>",
        "id": 166640257,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558966098
    },
    {
        "content": "<p>maybe make it a structure once and for all</p>",
        "id": 166644545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558969710
    }
]