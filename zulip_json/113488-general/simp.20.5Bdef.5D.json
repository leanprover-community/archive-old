[
    {
        "content": "<p>I have really got into the habit recently, when making new definitions for teaching (e.g. <code>foo</code>), to instantly make <code>lemma foo_def : foo = &lt;definition&gt; := rfl</code> so that my students can <code>rw foo_def</code> instead of having to fire up <code>simp [foo]</code> or whatever. But occasionally I am lazy and don't do it. Earlier today I saw someone here encouraging someone else to use this <code>simp [def]</code> as the way to unfold a definition. But I've just found to my surprise that <code>simp [def]</code> might not be idempotent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ foo (a, b) = 37</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ ↑((a, b).fst) - ↑((a, b).snd) = 37</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ ↑a - ↑b = 37</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I was surprised! If I make a simp lemma then the issue seems to go away.</p>",
        "id": 228751475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614855361
    },
    {
        "content": "<p>Actually a <code>foo_def</code> doesn't fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_def</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ foo (a, b) = 37</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo_def</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ ↑((a, b).fst) - ↑((a, b).snd) = 37</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228751816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614855546
    },
    {
        "content": "<p>The real issue is the fact that the definitional lemma is unapplied, like the replacement that I wrote manually, because you wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span>\n</code></pre></div>",
        "id": 228751957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614855620
    },
    {
        "content": "<p>Oh yeah! I have a non-idempotent simp example!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo_def</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ foo (a, b) = 37</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ↑((a, b).fst) - ↑((a, b).snd) = 37</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ↑a - ↑b = 37</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The reason I thought the <code>simp</code> lemma fixed it was that I instinctively moved stuff to the left of the colon when writing the lemma :-)</p>",
        "id": 228751958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614855621
    },
    {
        "content": "<blockquote>\n<p>instead of having to fire up simp [foo] or whatever</p>\n</blockquote>\n<p>Can someone explain the rationale slightly more? I've also been told before to create <code>foo_def</code> lemmas, and then I also noticed that <code>simp [def]</code> worked and wondered why <code>rw foo_def</code> was any better than <code>simp [def]</code> -- is the point a performance optimization somehow? Or is it that <code>rw</code> is easier to apply selectively in a long expression? Or other?</p>",
        "id": 228773955,
        "sender_full_name": "Julian Berman",
        "timestamp": 1614865542
    },
    {
        "content": "<p>Generally, the definitional equations aren't stated <em>exactly</em> the way you want. If they are then rewriting with the definition is fine</p>",
        "id": 228776102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614866336
    },
    {
        "content": "<p>like in kevin's example, the definition might be stated as <code>def foo : ℕ × ℕ → ℤ := λ ab, (ab.1 : ℤ) - ab.2</code> but the actual \"definitional lemma\" that should be used in simps is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 228776308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614866412
    },
    {
        "content": "<p>In this case you can get an equivalent effect by using the equation compiler to write the definition, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>but this definition is not defeq to the original one, and there are reasons to prefer the definition the way kevin wrote it</p>",
        "id": 228776569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614866514
    }
]