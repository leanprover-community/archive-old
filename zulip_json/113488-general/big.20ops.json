[
    {
        "content": "<p>What do people think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, fintype.sum f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, fintype.prod f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I know that this is a very meagre substitute for the big ops library in coq. But I think it's better to wait for Lean 4 before we start a big refactor. In the mean time, this notation seems like a cheap way to improve readability.</p>",
        "id": 195813899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588237639
    },
    {
        "content": "<p>Does this actually work? I mean both the fintype and finset version at the same time.</p>",
        "id": 195815811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239028
    },
    {
        "content": "<p>Oh I see, the notation is subtly different</p>",
        "id": 195815858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239063
    },
    {
        "content": "<p>The question still stands, but I'm more optimistic</p>",
        "id": 195815872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> See <a href=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\" title=\"https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230\">https://github.com/leanprover-community/mathlib/pull/1564/files/88a5f988abd92ea699824d72dd8c0fcdd5cd4ac0..60f01102933198521d31c2d58ad07651a23dccec#diff-c5bb8de7cb26ae773e9bcb3fa594be6fL57-R230</a> for a short proof of concept</p>",
        "id": 195816376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588239390
    },
    {
        "content": "<p>Yes, I saw, that's wonderful. My question is specifically about coexistence of the two variations. Do you use both in that file?</p>",
        "id": 195816798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588239715
    },
    {
        "content": "<p>Yes, I do.</p>",
        "id": 195817437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The first <code>calc</code> in the proof mixes them, for example.</p>",
        "id": 195817583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588240173
    },
    {
        "content": "<p>amazing</p>",
        "id": 195817681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588240234
    },
    {
        "content": "<p>Would that conflict with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∑</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>in <code>topology/algebra/infinite_sum</code>? (If necessary, we could also localize this one).</p>",
        "id": 195819686,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588241547
    },
    {
        "content": "<p>People will probably want to use both when discussing partial sums.</p>",
        "id": 195820160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588241895
    },
    {
        "content": "<p>I would be ok with <code>∑'</code> for the infinite sum, and the other notations introduced by Johan.</p>",
        "id": 195821357,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588242790
    },
    {
        "content": "<p>Yes, I also thought about that, and I think the <code>'</code> version would be best.</p>",
        "id": 195821855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243155
    },
    {
        "content": "<p>To what extent could this refactor be done with a regex? Because I fear it will be a lot of work if everything has to be done manually...</p>",
        "id": 195821974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243214
    },
    {
        "content": "<p>One thing I noticed with my experiment is that <code>rw [finset.sum_lemma]</code> doesn't play very well with <code>abbreviation fintype.sum f := finset.sum univ f</code></p>",
        "id": 195822103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243316
    },
    {
        "content": "<p>Just using search and replace in all files in vscode, replacing <code>∑</code> with <code>∑'</code>, should do it, hopefully.</p>",
        "id": 195822165,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243343
    },
    {
        "content": "<p>But I wouldn't like restating a whole bunch of lemmas to <code>fintype.sum</code>. At the same time, I think <code>∑ x in univ, f x</code> is ugly.</p>",
        "id": 195822179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/big.20ops/near/195822165\" title=\"#narrow/stream/113488-general/topic/big.20ops/near/195822165\">said</a>:</p>\n<blockquote>\n<p>Just using search and replace in all files in vscode, replacing <code>∑</code> with <code>∑'</code>, should do it, hopefully.</p>\n</blockquote>\n<p>No, I meant the other refactor.</p>",
        "id": 195822191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243365
    },
    {
        "content": "<p>Replacing all <code>finset.sum s f</code> with <code>∑ x in s, f x</code></p>",
        "id": 195822213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243386
    },
    {
        "content": "<p>You don't even need to introduce the abbreviation, just the notation <code>∑</code> should be enough.</p>",
        "id": 195822215,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243387
    },
    {
        "content": "<p>Ah, yes, the other refactor. Time for regexps, yes.</p>",
        "id": 195822247,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588243420
    },
    {
        "content": "<p>Or do we just introduce the notation, but not use it in the file...</p>",
        "id": 195822261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243437
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2571\" title=\"https://github.com/leanprover-community/mathlib/issues/2571\">#2571</a></p>",
        "id": 195824749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588245172
    },
    {
        "content": "<p>If I change the notation to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, finset.univ.sum f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, finset.univ.prod f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p>then the second set of notation is not used in the tactic state. That's unfortunate. Is there some incantation that can move Lean to do a better job?</p>",
        "id": 195825145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588245498
    },
    {
        "content": "<p>I've never really understood how priorities work for notation. Can that be used here?</p>",
        "id": 195827375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588247038
    },
    {
        "content": "<p>Now that the <code>tsum</code> notation has been changed to <code>∑'</code>, I'm ready to start building a PR that introduces the notation above. Except that this notation doesn't really work yet. So what should I do? Introduce <code>fintype.sum</code> and <code>fintype.prod</code>?</p>",
        "id": 195869512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265837
    },
    {
        "content": "<p>From looking at the source code, the reverse lookups for notation <code>head_map&lt;notation_entry&gt; notation_state::m_inv_map</code> are stored without priority, since <code>head_map&lt;V&gt;</code> derives from <code>head_map_prio&lt;V, constant_priority_fn&lt;V&gt;&gt;</code></p>",
        "id": 195939011,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588319383
    },
    {
        "content": "<p>In fact, according to the debugger the only notation returned for <code>finset.sum</code> is <code>Σ _ in _, _</code></p>",
        "id": 195939873,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588320407
    },
    {
        "content": "<p>Hmm, but the other does seem to work <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 195940127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588320780
    },
    {
        "content": "<p>Aha: <code>Σ := finset.univ.sum</code> gets added as notation for the symbol <code>(const lean::head_index &amp;) @0x7ffff49083b8: {m_kind = lean::expr_kind::Macro, m_name = }</code>, and <code>Σ := finset.sum</code> for <code>(const lean::head_index &amp;) @0x7fffdfffd3b8: {m_kind = lean::expr_kind::Constant, m_name = 'finset'.'sum'}</code> (and the second thing is what we probably want)</p>",
        "id": 195940609,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588321392
    },
    {
        "content": "<p>Hmm... I have a hard time parsing this</p>",
        "id": 195940759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588321566
    },
    {
        "content": "<p>I think Anne tells you to avoid the dot notation.</p>",
        "id": 195940969,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588321805
    },
    {
        "content": "<p>Aha.. you mean in the definition of the notation?</p>",
        "id": 195940982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588321836
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195941080,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588321933
    },
    {
        "content": "<p>Let me try that.</p>",
        "id": 195941092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588321952
    },
    {
        "content": "<p>I think you want to change <code>finset.univ.sum</code> to <code>finset.sum finset.univ</code> and put the line defining <code>finset.sum finset.univ</code> first</p>",
        "id": 195941201,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588322066
    },
    {
        "content": "<p>Awesome</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders `, ` r:(scoped f, finset.sum finset.univ f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders `, ` r:(scoped f, finset.prod finset.univ f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∑` binders ` in ` s `, ` r:(scoped f, finset.sum s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` s `, ` r:(scoped f, finset.prod s f) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p>works. And the order <em>is</em> important.</p>",
        "id": 195941232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322152
    },
    {
        "content": "<p>This is great! I just fixed this in the <code>chev-warn</code> branch. Now I have some work to do to explain all of this to mathlib (-;</p>",
        "id": 195941615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322603
    },
    {
        "content": "<p>The explanation, as far as I understand it: when deciding how to pretty-print an expression, Lean looks up the notations associated to the head of the expression (e.g. <code>finset.sum</code>). It tries them one by one, until it finds a notation that matches the expression, then uses that to pretty-print. The order in which they are tried is the order in which they are stored in the environment structure, which in this case is the order in which they are defined. Apparently the priority information is thrown away (typically it would be highest-priority first, then by order of definition). This is why the order matters.</p>\n<p>A notation definition is associated to the head of the expression it expands to, so <code>notation </code>∑<code> binders </code>, <code> r:(scoped f, finset.sum finset.univ f) := r</code> is associated to the head of the expansion of <code>r</code>, which is the head of <code>finset.sum finset.univ f</code>, which is <code>finset.sum</code>. But <code>finset.univ.sum</code> doesn't get expanded to <code>finset.sum finset.univ</code> at that point (maybe because it won't know if there is also a namespace <code>finset.univ</code> floating around somewhere?), so you have to write <code>finset.sum finset.univ</code> instead of <code>finset.univ.sum</code>.</p>",
        "id": 195941698,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588322709
    },
    {
        "content": "<p>Thanks a lot for explaining this!</p>",
        "id": 195941766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322767
    },
    {
        "content": "<p>Homework for Johan: write that long overdue <code>docs/extras/notations.md</code></p>",
        "id": 195941773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588322782
    },
    {
        "content": "<p>notations don't go through name resolution until they are used, I think</p>",
        "id": 195941819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588322860
    },
    {
        "content": "<p>/me has lots of homework</p>",
        "id": 195941833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322878
    },
    {
        "content": "<p>But we could start by just dumping Anne's explanation in that file. At least that would be a canonical place to find it again.</p>",
        "id": 195941888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322908
    },
    {
        "content": "<p>And then we can slowly improve that file.</p>",
        "id": 195941895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322921
    },
    {
        "content": "<p>Your sum notations also make great examples.</p>",
        "id": 195941910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588322948
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2581\" title=\"https://github.com/leanprover-community/mathlib/issues/2581\">#2581</a></p>",
        "id": 195942154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588323171
    },
    {
        "content": "<p>This is not ready for merging. And I welcome everyone to contribute.</p>",
        "id": 195942165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588323186
    },
    {
        "content": "<p>I think there is some lookup of names going on at the point of definition though, if you define a notation before a name:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">☹</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">munge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">munge</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">☺</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">munge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar1</span> <span class=\"o\">:=</span> <span class=\"err\">☹</span> <span class=\"c1\">-- unknown identifier `foo.munge`</span>\n<span class=\"n\">def</span> <span class=\"n\">bar2</span> <span class=\"o\">:=</span> <span class=\"err\">☺</span>\n</code></pre></div>",
        "id": 195942522,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588323556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/big.20ops/near/195941698\" title=\"#narrow/stream/113488-general/topic/big.20ops/near/195941698\">said</a>:</p>\n<blockquote>\n<p>The explanation, as far as I understand it: when deciding how to pretty-print an expression, Lean looks up the notations associated to the head of the expression (e.g. <code>finset.sum</code>). It tries them one by one, until it finds a notation that matches the expression, then uses that to pretty-print. The order in which they are tried is the order in which they are stored in the environment structure, which in this case is the order in which they are defined. Apparently the priority information is thrown away (typically it would be highest-priority first, then by order of definition). This is why the order matters.</p>\n</blockquote>\n<p>This is very helpful, thanks. It explains why what I suggested at <a href=\"#narrow/stream/113488-general/topic/Show.20the.20objects.20for.20an.20equality.20of.20morphisms/near/194957595\" title=\"#narrow/stream/113488-general/topic/Show.20the.20objects.20for.20an.20equality.20of.20morphisms/near/194957595\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Show.20the.20objects.20for.20an.20equality.20of.20morphisms/near/194957595</a> did not work.</p>",
        "id": 195942635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588323633
    },
    {
        "content": "<p>I guess I was mixing up the method for resolving an overloaded notation (two different meanings for <code>a # b</code>) with the method for choosing a notation for the pretty-printer to display (two different notations for <code>nat.add a b</code>).</p>",
        "id": 195942696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588323720
    },
    {
        "content": "<p>We still need <code>tikzcd</code> integration into the Lean tactic state</p>",
        "id": 195942880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588323867
    },
    {
        "content": "<p>How hard do you think it would be to use priority or at least prefer local notation over global notation in the pretty printer?</p>",
        "id": 195942947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588323946
    },
    {
        "content": "<p>I think it shouldn't be too hard, since we already have a priority and a priority map</p>",
        "id": 195943105,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588324076
    },
    {
        "content": "<p>Looks like the code was written before priorities were available, so it seems like not a deliberate decision to leave out priorities here</p>",
        "id": 195943285,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588324220
    },
    {
        "content": "<p>Small complication: looks like priority for <code>notation_entry</code> is always set to a <code>#define</code>d value of 1000</p>",
        "id": 195945519,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588326373
    },
    {
        "content": "<p>It turns out that <code>@[priority]</code> and <code>set_option default_priority</code> don't interact with <code>notation</code>, but <code>notation [priority 1]</code> works as expected. PR made: <a href=\"https://github.com/leanprover-community/lean/pull/207\" title=\"https://github.com/leanprover-community/lean/pull/207\">https://github.com/leanprover-community/lean/pull/207</a></p>",
        "id": 195949192,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588329703
    },
    {
        "content": "<p>Cool. Thanks!</p>",
        "id": 195950458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588330723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Does this also fix the problem that I currently need to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>because otherwise it gets parsed as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195950565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588330830
    },
    {
        "content": "<p>This use of <code>in</code> in notation hurts my brain. I noticed it in some filter stuff too.</p>",
        "id": 195950635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588330918
    },
    {
        "content": "<p>I always expect <code>in</code> to be a keyword...</p>",
        "id": 195950697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588330956
    },
    {
        "content": "<p>Maybe I can use <code>\\mem</code>. Let me try.</p>",
        "id": 195950760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588331029
    },
    {
        "content": "<p>Nope... that doesn't work.</p>",
        "id": 195950840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588331088
    },
    {
        "content": "<p>I guess <code>binders</code> has special support for <code>\\in</code> and doesn't want you to mess around with it.</p>",
        "id": 195950856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588331110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you have another suggestion?</p>",
        "id": 195950878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588331142
    },
    {
        "content": "<p>I don't think <code>binders</code> has <em>special</em> support for <code>\\in</code> per se</p>",
        "id": 195950887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331147
    },
    {
        "content": "<p>Maybe I can just get used to <code>in</code>.</p>",
        "id": 195950948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331173
    },
    {
        "content": "<p>The change shouldn't affect the parser, (un)fortunately.</p>",
        "id": 195950983,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1588331214
    },
    {
        "content": "<p>Oh maybe it wasn't filters actually. There is <code>in</code> in the snippet from the perfectoid space project in Kevin's paper and I can't parse it.</p>",
        "id": 195951126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331393
    },
    {
        "content": "<p>They are also in filters</p>",
        "id": 195951250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588331508
    },
    {
        "content": "<p>In the eventually and frequently notations</p>",
        "id": 195951262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588331519
    },
    {
        "content": "<p>BTW I think I saw <code>let ... in</code> is no longer the syntax in Lean 4 anyways</p>",
        "id": 195951322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588331549
    },
    {
        "content": "<p>I wonder why in lean-homotopy-theory I get nice <code>∘</code> notation for my morphism composition...</p>",
        "id": 195955802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588335949
    },
    {
        "content": "<p>I have <code>local notation f ` ∘ `:80 g:80 := g ≫ f</code>, and that is enough to make it work fine</p>",
        "id": 195955852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588335966
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2582\" title=\"https://github.com/leanprover-community/mathlib/issues/2582\">#2582</a> introduces the notation and uses it everywhere in <code>algebra/big_operators</code>.</p>",
        "id": 195957687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588337525
    },
    {
        "content": "<p>I haven't gone through all of mathlib. But I hope we can transition organically.</p>",
        "id": 195957703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588337546
    },
    {
        "content": "<p>But let's first see whether CI likes this</p>",
        "id": 195958010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588337845
    },
    {
        "content": "<p>We need to decide what the precendence of big ops should be. I've found some discussion over here: <a href=\"https://math.stackexchange.com/q/185538/30839\" title=\"https://math.stackexchange.com/q/185538/30839\">https://math.stackexchange.com/q/185538/30839</a><br>\nAlso see <a href=\"https://github.com/leanprover-community/mathlib/pull/2582#discussion_r418569631\" title=\"https://github.com/leanprover-community/mathlib/pull/2582#discussion_r418569631\">https://github.com/leanprover-community/mathlib/pull/2582#discussion_r418569631</a> for the discussion that has been going on at github.<br>\nDoes anyone have strong opinions on how formulas should be parsed?</p>",
        "id": 195986970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588354510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> suggests: <em>I think we need to use 64 and 69 instead, then the following works as expected:</em></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span>  <span class=\"err\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"err\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span>  <span class=\"err\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"err\">∏</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span>  <span class=\"err\">∏</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"err\">∏</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>What do others think? Personally I dislike the last example.</p>",
        "id": 195987925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588354961
    },
    {
        "content": "<p>I think the question is not \"how would a mathematician interpret these\" (for which the answer is known to be \"different mathematicians will interpret them in different ways\") but \"what is the convention we should use in order to minimise the number of brackets in mathlib\", so that those who want to golf can golf.</p>",
        "id": 195988174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588355094
    },
    {
        "content": "<p>The <a href=\"http://math.sx\" title=\"http://math.sx\">math.sx</a> page linked to above gives the following example</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><mrow><mo fence=\"true\">(</mo><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><msub><mi>b</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>b</mi><mi>k</mi></msub><mo>⟷</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><msub><mi>b</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence=\"true\">(</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>b</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{k\\in K}\\left(a_k+b_k\\right) = \\sum_{k\\in K}a_k+\\sum_{k\\in K}b_k\n\\longleftrightarrow\n  \\prod_{k\\in K}a_kb_k = \\left(\\prod_{k\\in K}a_k\\right)\\left(\\prod_{k\\in K}b_k\\right).</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟷</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0794829999999997em;vertical-align:-1.329483em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>which is quoted from Knuth's <em>Concrete mathematics</em>.</p>",
        "id": 195988181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588355097
    },
    {
        "content": "<p>That examples shows a lot of \"assymetry\".</p>",
        "id": 195988224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588355123
    },
    {
        "content": "<p>The Lean conventions for \\forall being super-greedy don't correspond with the way I use it in my undergraduate lectures, but I am happy to put extra brackets in. I don't even know which binds more out of \\or and \\and, I am just happy to put the brackets in to make my intentions clear. In short I'm arguing that this is not a question about the \"correct\" mathematical convention, it's about which convention will minimise the total number of brackets in mathlib.</p>",
        "id": 195988491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588355261
    },
    {
        "content": "<p>It reminds me very much of the question whether <code>∀ x, p x → q</code> should be <code>(∀ x, p x) → q</code> or <code>∀ x, (p x → q)</code>.  I agree with Kevin, there are probably many right answers to this question.</p>",
        "id": 195988498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588355265
    },
    {
        "content": "<p>Ok, I've reverted to 64/69</p>",
        "id": 195989314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588355723
    },
    {
        "content": "<p>The example you showed seems to suggest they should both be 69.</p>",
        "id": 195992215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588357217
    },
    {
        "content": "<p>More importantly, do they bind tighter than <code>=</code>?</p>",
        "id": 195992236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588357227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/big.20ops/near/195992236\" title=\"#narrow/stream/113488-general/topic/big.20ops/near/195992236\">said</a>:</p>\n<blockquote>\n<p>More importantly, do they bind tighter than <code>=</code>?</p>\n</blockquote>\n<p>Yup. That's fixed (-;<br>\nInitially they didn't, which was really annoying.</p>",
        "id": 195992362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588357318
    },
    {
        "content": "<p>All example usages I can find suggest that both ∑ and ∏ bind more loosely than * but tighter than +, although I didn't find many relevant examples of products.</p>",
        "id": 195993376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588357895
    },
    {
        "content": "<p>Well... we can still change it (-;<br>\nI'm fine with giving both <code>67</code> or <code>68</code>.</p>",
        "id": 195993759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588358106
    },
    {
        "content": "<p>What do people think of making both operators have level <code>67</code>? If you like that idea, vote on this message with <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nIf you want to keep it the way it is (which means <code>64</code>/<code>69</code>), vote with <span aria-label=\"stop\" class=\"emoji emoji-1f91a\" role=\"img\" title=\"stop\">:stop:</span></p>",
        "id": 195998851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588360885
    },
    {
        "content": "<p>Can you try both, count the total number of necessary brackets in mathlib for each choice, and report back?</p>",
        "id": 195999477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588361248
    },
    {
        "content": "<p>Hint: write a bracket linter first</p>",
        "id": 195999514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588361274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/big.20ops/near/195999477\" title=\"#narrow/stream/113488-general/topic/big.20ops/near/195999477\">said</a>:</p>\n<blockquote>\n<p>Can you try both, count the total number of necessary brackets in mathlib for each choice, and report back?</p>\n</blockquote>\n<p>Lol... I would rather not do that. It's already time consuming enough (-;</p>",
        "id": 195999916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588361480
    },
    {
        "content": "<p>You posted what 64,69 did -- what does 67,67 do?</p>",
        "id": 196000738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588361906
    },
    {
        "content": "<p>It should accomplish something like</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><mrow><mo fence=\"true\">(</mo><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><msub><mi>b</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><mo>+</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>b</mi><mi>k</mi></msub><mo>⟷</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><msub><mi>b</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence=\"true\">(</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>a</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">(</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow></munder><msub><mi>b</mi><mi>k</mi></msub><mo fence=\"true\">)</mo></mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{k\\in K}\\left(a_k+b_k\\right) = \\sum_{k\\in K}a_k+\\sum_{k\\in K}b_k\n\\longleftrightarrow\n  \\prod_{k\\in K}a_kb_k = \\left(\\prod_{k\\in K}a_k\\right)\\left(\\prod_{k\\in K}b_k\\right).</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟷</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3794880000000003em;vertical-align:-1.329483em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0794829999999997em;vertical-align:-1.329483em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.329483em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>which is quoted from Knuth's <em>Concrete mathematics</em>.</p>",
        "id": 196000817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588361949
    },
    {
        "content": "<p>Well the mathematician in me votes for this one, but the computer scientist is abstaining</p>",
        "id": 196001191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362123
    },
    {
        "content": "<p>I voted for 67,67 but I don't actually know what the numbers mean.</p>",
        "id": 196006127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588364976
    },
    {
        "content": "<p>Oh, now I see the end of the stackexchange post you linked to says the same thing I said, I think.</p>",
        "id": 196006289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365075
    },
    {
        "content": "<p><code>+ : 65</code>, <code>* : 70</code>. And you wanted something in between... Unfortunately, <code>rat</code> is not defined in core, so we can't go for the actual <code>(65 + 70)/2 : rat</code> as precedence. Hence I suggested the <code>nat</code> version of that fraction <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 196006621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588365253
    },
    {
        "content": "<p>and <code>-</code>, <code>/</code> are the same as <code>+</code>, <code>*</code> respectively?</p>",
        "id": 196006770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365354
    },
    {
        "content": "<p>As far as I know, yes</p>",
        "id": 196006861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588365400
    },
    {
        "content": "<p>I think they have to be actually.</p>",
        "id": 196006887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">reserve</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">65</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">-</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">65</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">/</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"err\">%</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`-`</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">^</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span>\n</code></pre></div>",
        "id": 196012044,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588368437
    },
    {
        "content": "<p>Sorry for offtopic: what is the precedence of <code>notation f</code>^[<code>n</code>]<code> := iterate f n</code>? It eats <code>=</code> on the left.</p>",
        "id": 196012199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588368554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> It probably defaults to <code>0</code>. Seems like we need to change core to fix that...</p>",
        "id": 196034347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588396469
    },
    {
        "content": "<p>I have now changed to <code>67/67</code> and added a bit of explanation about it (plus an example of how to parenthesise...)</p>",
        "id": 196041777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588410031
    },
    {
        "content": "<p>And... the linter is happy.</p>",
        "id": 196052583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588427460
    }
]