[
    {
        "content": "<p>I've got</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">cases</span> <span class=\"n\">is_valuation</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">v₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">Hle</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">Hle</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>Is there a tactic that allows to golf this? The only difference is the <code>left</code> and <code>right</code> tactic...</p>",
        "id": 158016176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549875676
    },
    {
        "content": "<p>You can do slightly better with</p>\n<div class=\"codehilite\"><pre><span></span>    cases is_valuation.map_add v₂ r s;\n    [{left},{right}];\n    { rw with_zero.map_le Hle,\n      rwa [←H12, ←H12] at h }\n</pre></div>\n\n\n<p>but it's not by much</p>",
        "id": 158017864,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549877678
    },
    {
        "content": "<p>Cool, that is more or less what I was looking for!<br>\nCan you explain the magic on line 2?</p>",
        "id": 158017900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549877715
    },
    {
        "content": "<p>How about </p>\n<div class=\"codehilite\"><pre><span></span>  apply (is_valuation.map_add v₂ r s).imp;\n  { intro Hle,\n    rw with_zero.map_le Hle,\n    rwa [←H12, ←H12] at h }\n</pre></div>",
        "id": 158017922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549877758
    },
    {
        "content": "<p>The magic on line 2 is the <code>tac; [tac1, tac2]</code> combinator. It applies <code>tac1</code> to the first goal and <code>tac2</code> to the second. If you put another <code>; tac</code> at the end, it will be applied to all subgoals generated by the first combination of tactics</p>",
        "id": 158018066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549877888
    },
    {
        "content": "<p>Ok, nice.</p>",
        "id": 158018101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549877964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Your suggestion isn't working. <code>is_valuation.map_add _ _ _</code> returns an <code>_ ∨ _</code>. And I do <code>cases</code> on that.</p>",
        "id": 158018263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549878130
    },
    {
        "content": "<p>does <code>refine (is_valuation.map_add v₂ r s).imp (\\lam Hle, _) (\\lam Hle, _);</code> work?</p>",
        "id": 158018276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549878161
    },
    {
        "content": "<p>or <code>refine (is_valuation.map_add v₂ r s).imp _ _</code> with the intro line</p>",
        "id": 158018291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549878185
    },
    {
        "content": "<p>You are casing on <code>or</code>, and then reconstructing an <code>or</code> where the left goes left and the right goes right. That's <code>or.imp</code></p>",
        "id": 158018353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549878248
    },
    {
        "content": "<p>In general the syntax <code>tac_0; [tac_1, ..., tac_n]</code> will apply <code>tac_i</code> to the <code>i</code>th subgoal generated by <code>tac_0</code>, with the restriction that the number of tactics <code>n</code> matches the number of subgoals generated</p>",
        "id": 158018360,
        "sender_full_name": "Seul Baek",
        "timestamp": 1549878259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This works. Thanks!</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">is_valuation</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">v₂</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">_</span> <span class=\"bp\">_;</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">map_le</span> <span class=\"n\">Hle</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">H12</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 158018586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549878514
    }
]