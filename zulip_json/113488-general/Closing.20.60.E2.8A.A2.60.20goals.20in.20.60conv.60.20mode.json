[
    {
        "content": "<p>After running <code>rw</code> in  conv mode with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum_map_domain_index\">docs#finsupp.sum_map_domain_index</a> (which requires two assumptions), I end up with one <code>|</code> goal and two <code>⊢</code> goals.</p>\n<p>I already know how to handle the <code>|</code> goal, and can discard it with <code>skip</code>. I'm then left with two <code>⊢</code> goals, but:</p>\n<ul>\n<li>I'm still in <code>conv</code> mode, so don't have any tactics to help me</li>\n<li>If I leave conv mode, the <code>|</code> goal does not take effect</li>\n</ul>\n<p>Is there a way to drop back into tactic mode in conv mode?</p>",
        "id": 212181256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746047
    },
    {
        "content": "<p>Good question! Does <code>conv</code> mode have an <code>exact</code> tactic?</p>",
        "id": 212181315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601746130
    },
    {
        "content": "<p>No!</p>",
        "id": 212181321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746141
    },
    {
        "content": "<p>If not, I guess it should get it for situations like these.</p>",
        "id": 212181328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601746150
    },
    {
        "content": "<p>But indeed, then I could use <code>exact by { }</code> which would hopefully do the trick</p>",
        "id": 212181333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746164
    },
    {
        "content": "<p>Furthermore, if I attempt a term-mode proof as an argument to <code>sum_map_domain_index</code>, if I get it wrong the error is silenced and the <code>conv</code> does nothing</p>",
        "id": 212181346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746201
    },
    {
        "content": "<p>almost- <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (needs some variables from monoid_algebra.lean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- in master shortly</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_add_equiv</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">multiplicative.to_add</span><span class=\"o\">,</span> <span class=\"n\">multiplicative.of_add</span><span class=\"o\">,</span> <span class=\"n\">of_add_to_add</span><span class=\"o\">,</span> <span class=\"n\">to_add_of_add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_monoid_algebra.to_multiplicative</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">≃+*</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">finsupp.dom_congr</span> <span class=\"n\">to_add_equiv</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">map_domain_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">map_domain_single</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">finsupp.sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">finsupp.sum_map_domain_index</span><span class=\"o\">,</span>\n        <span class=\"n\">skip</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.dom_congr</span><span class=\"o\">,</span> <span class=\"n\">map_domain_add</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">finsupp.dom_congr</span> <span class=\"n\">to_add_equiv</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 212181403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601746256
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">conv.interactive.exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"n\">interactive.types.texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.exact</span> <span class=\"n\">q</span>\n</code></pre></div>\n\n<p>seems to do the job, although I wonder if it warrants some special casing to only allow its use on <code>⊢</code> goals</p>",
        "id": 212184838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601750901
    },
    {
        "content": "<p>In fact even this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">conv.interactive.exact</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.exact</span>\n</code></pre></div>",
        "id": 212184876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601750998
    },
    {
        "content": "<p>Should I PR the above?</p>\n<p>Or should we change <code>conv</code> so that unsolved goals remain outside of the <code>conv</code> block?</p>",
        "id": 212311026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601909850
    },
    {
        "content": "<p>And If I did use the above definition of exact, is there anything to stop the user closing a <code>|</code> goal with it nonsensically?</p>",
        "id": 212311145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601909884
    },
    {
        "content": "<p>Here's a contrived <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing when <code>exact</code> can be needed in <code>conv</code> mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">conv.interactive.tactic_exact</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.exact</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">obvious</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">obvious</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- goal is `| c`, which is nonsense</span>\n    <span class=\"n\">tactic_exact</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"c1\">-- goal is `⊢ c = 1`</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>It seems that <code>conv</code> gets confused about the goal state after the <code>rw</code>.</p>",
        "id": 212679442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602159138
    },
    {
        "content": "<p>In this case you could also use <code>rw hc, skip</code> instead of the tactic_exact.</p>",
        "id": 212682617,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602160815
    },
    {
        "content": "<p><code>conv</code> doesn't really get confused here.  Remember that <code>conv</code> is just a light wrapper around the standard tactic state that prints subgoals <code>a = b</code> as <code>| a</code>, and where the tactics operate on the left-hand side (a) of the equation.</p>",
        "id": 212682731,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602160877
    },
    {
        "content": "<p>Right, hence this example being contrived. The one earlier in this thread I can't work out any way to solve without <code>tactic_exact</code>.</p>",
        "id": 212682944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602160989
    },
    {
        "content": "<p>I was not aware that was how conv works</p>",
        "id": 212683068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161048
    },
    {
        "content": "<p>But I feel like new goals introduced by <code>rw</code> should never be treated as <code>|</code> goals</p>",
        "id": 212683152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602161097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Closing.20.60.E2.8A.A2.60.20goals.20in.20.60conv.60.20mode/near/212682731\">said</a>:</p>\n<blockquote>\n<p>that prints subgoals <code>a = b</code> as <code>| a</code></p>\n</blockquote>\n<p>Where does this actually happen? <code>tactic.interactive_expr</code> has some code to print <code>⊢ g</code> as HTML, but I can't see where the rules for printing <code>conv</code> mode are.</p>",
        "id": 212692439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602165165
    },
    {
        "content": "<p>It's implemented in <code>conv.save_info</code> (by passing a boolean flag to the C++ code..).  This is a magic name.  When Lean sees <code>begin[conv] ... end</code>, it looks for <code>conv.save_info</code>, <code>conv.istep</code>, etc.</p>",
        "id": 212696433,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602166742
    },
    {
        "content": "<p>I've never seen the syntax <code>begin[...]</code> before</p>",
        "id": 212698772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602167724
    },
    {
        "content": "<p>It's not documented anywhere but that's how you enter a custom tactic mode.</p>",
        "id": 212698956,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602167799
    },
    {
        "content": "<p>There was some discussion on custom tactic modes <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/tactic.20modes%28.3F%29/near/210552702\">in this thread</a>.</p>",
        "id": 212699188,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602167887
    },
    {
        "content": "<p>Does that mean I can use <code>begin[tactic]</code> to switch back to tactic mode from conv mode?</p>",
        "id": 212699371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602167964
    },
    {
        "content": "<p>Oh, I guess I need to be in an expression context</p>",
        "id": 212699421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602167982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Closing.20.60.E2.8A.A2.60.20goals.20in.20.60conv.60.20mode/near/212696433\">said</a>:</p>\n<blockquote>\n<p>It's implemented in <code>conv.save_info</code> (by passing a boolean flag to the C++ code..).  This is a magic name.  When Lean sees <code>begin[conv] ... end</code>, it looks for <code>conv.save_info</code>, <code>conv.istep</code>, etc.</p>\n</blockquote>\n<p>I don't see where that boolean flag is, <code>conv.save_info</code> looks like it just calls regular tactic code.</p>",
        "id": 212699847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602168132
    },
    {
        "content": "<p>The boolean flag is in <code>tactic_state.to_format</code>.</p>",
        "id": 212700082,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602168240
    },
    {
        "content": "<p>I thought this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>  <span class=\"kd\">begin</span><span class=\"o\">[</span><span class=\"n\">smt</span><span class=\"o\">]</span>  <span class=\"kd\">end</span> <span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Maybe this works as well?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"kd\">begin</span><span class=\"o\">[</span><span class=\"n\">tactic</span><span class=\"o\">]</span> <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 212700210,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602168282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the natural number game uses this <code>begin [natnumgame]</code> trick and that's how I stopped <code>rw</code> from closing refl goals</p>",
        "id": 212700553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602168428
    },
    {
        "content": "<p><code>save_info</code> is run automatically between conv tactics I assume?</p>",
        "id": 212702027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602168988
    },
    {
        "content": "<p>I think what I'd like to happen, is that after <code>rw</code> runs, any new goals are marked with some kind of \"not conv\" flag</p>",
        "id": 212702071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169007
    },
    {
        "content": "<p>Which both:</p>\n<ul>\n<li>Adjusts tactic state rendering</li>\n<li>Allows <code>exact</code> to be used to close those goals (and those goals only)</li>\n</ul>",
        "id": 212702157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169036
    },
    {
        "content": "<p>But perhaps the simpler alternative is to make <code>rw</code> in conv mode take an extra argument, a tactic block</p>",
        "id": 212702486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169145
    },
    {
        "content": "<p>And have it use that tactic block to close any goals it creates.</p>",
        "id": 212702514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602169154
    },
    {
        "content": "<p>Alright, I almost have this - but I'm stuck writing the tactic parser - I can't work out how to combine <code>parse (tk ...)</code> with <code>itactic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rw2</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"with\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">itactic</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span>\n</code></pre></div>\n\n<p>fails with a type error, and I can't find any examples to follow</p>",
        "id": 212707044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602170866
    },
    {
        "content": "<p>I've pushed the parts I can do to <a href=\"https://github.com/leanprover-community/lean/pull/475\">https://github.com/leanprover-community/lean/pull/475</a> - I'd appreciate help ironing out the details</p>",
        "id": 212710254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602172217
    }
]