[
    {
        "content": "<p>The following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ext</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">TestStruct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with the following error message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">injection</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">argument</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"n\">proof</span> <span class=\"n\">where</span> <span class=\"n\">lhs</span> <span class=\"n\">and</span> <span class=\"n\">rhs</span> <span class=\"n\">are</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">...</span><span class=\"o\">),</span> <span class=\"n\">where</span> <span class=\"n\">c</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>The example works if <code>parameter</code> is changed to <code>variable</code>. Why does this happen, and are there any workarounds?</p>",
        "id": 290146515,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1658257756
    },
    {
        "content": "<p>The usual workaround is to not ever use <code>parameter</code>; we pretty much avoid it everywhere in mathlib</p>",
        "id": 290154902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658261895
    }
]