[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.equiv group_theory.coset\n\nuniverse u\n\nnamespace quotient\n\nvariables {α : Type u} [s : setoid α]\n\ndef fibre : quotient s → set α :=\nλ Q, {x | ⟦x⟧ = Q}\n\nend quotient\n\nnamespace equiv\n\nvariables {α : Type u} [s : setoid α]\n\ndef equiv_fibre : α ≃ Σ Q : quotient s, quotient.fibre Q :=\n⟨λ x, ⟨⟦x⟧, x, rfl⟩, λ x, x.2.1, λ x, rfl,\n λ ⟨Q, x, (hx : ⟦x⟧ = Q)⟩, sigma.eq hx $ by subst hx⟩\n\nend equiv\n\nvariables {G : Type u} [group G] (S : set G) [is_subgroup S]\n\ninstance left_rel : setoid G :=\n⟨λ x y, x⁻¹ * y ∈ S,\n λ x, by simp [is_submonoid.one_mem],\n λ x y hxy, have _ := is_subgroup.inv_mem hxy, by simpa using this,\n λ x y z hxy hyz, have _ := is_submonoid.mul_mem hxy hyz, by simpa [mul_assoc] using this⟩\n\ndef left_cosets&#39; : Type u := quotient (left_rel S)\n\nnamespace is_subgroup\n\ntheorem fibre_equiv (L : left_cosets&#39; S) : nonempty (quotient.fibre L ≃ S) :=\n⟨⟨λ x, ⟨(quotient.out L)⁻¹ * x.1, quotient.exact ((quotient.out_eq L).trans x.2.symm)⟩,\n  λ x, ⟨quotient.out L * x.1, eq.trans (eq.symm $ quotient.sound $ by simpa [(≈), setoid.r] using x.2) (quotient.out_eq L)⟩,\n  λ ⟨x, hx⟩, subtype.eq $ by simp,\n  λ ⟨x, hx⟩, subtype.eq $ by simp⟩⟩\n\ntheorem group_equiv_left_cosets_times_subgroup&#39; : nonempty (G ≃ (left_cosets&#39; S × S)) :=\n⟨calc G\n    ≃ Σ L : left_cosets&#39; S, quotient.fibre L :\n  equiv.equiv_fibre\n... ≃ Σ L : left_cosets&#39; S, S :\n  equiv.sigma_congr_right (λ L, classical.choice $ fibre_equiv _ _)\n... ≃ (left_cosets&#39; S × S) :\n  equiv.sigma_equiv_prod _ _ ⟩\n\nend is_subgroup\n</pre></div>",
        "id": 125140026,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> do you think this is better than the one in mathlib?</p>",
        "id": 125140057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866462
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean\">https://github.com/leanprover/mathlib/blob/master/group_theory/coset.lean</a></p>",
        "id": 125140116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866618
    },
    {
        "content": "<p>I suggest skipping the <code>nonempty</code> here, there's not much point to it</p>",
        "id": 125140219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523866820
    },
    {
        "content": "<p>it is uncomputable</p>",
        "id": 125140222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866834
    },
    {
        "content": "<p>ok</p>",
        "id": 125140223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523866837
    },
    {
        "content": "<p>but I'm making verseion 2 where that is computable</p>",
        "id": 125140224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866840
    },
    {
        "content": "<p>just use <code>noncomputable def</code> instead</p>",
        "id": 125140231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523866872
    },
    {
        "content": "<p>oh?</p>",
        "id": 125140234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what do you think</p>",
        "id": 125140235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866883
    },
    {
        "content": "<p>it's definitely a classical theorem, but wrapping in <code>nonempty</code> just means using <code>choice</code> later</p>",
        "id": 125140237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523866920
    },
    {
        "content": "<p>I agree with Mario, using nonempty was a bad idea on my side.</p>",
        "id": 125140276,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523866935
    },
    {
        "content": "<p>ok</p>",
        "id": 125140277,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523866941
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.equiv group_theory.coset\n\nuniverse u\n\nnamespace quotient\n\nvariables {α : Type u} [s : setoid α]\n\ndef fibre : quotient s → set α :=\nλ Q, {x | ⟦x⟧ = Q}\n\nend quotient\n\nnamespace equiv\n\nvariables {α : Type u} [s : setoid α]\n\ndef equiv_fibre : α ≃ Σ Q : quotient s, quotient.fibre Q :=\n⟨λ x, ⟨⟦x⟧, x, rfl⟩, λ x, x.2.1, λ x, rfl,\n λ ⟨Q, x, (hx : ⟦x⟧ = Q)⟩, sigma.eq hx $ by subst hx⟩\n\nend equiv\n\nvariables {G : Type u} [group G] (S : set G) [is_subgroup S]\n\ninstance left_rel : setoid G :=\n⟨λ x y, x⁻¹ * y ∈ S,\n λ x, by simp [is_submonoid.one_mem],\n λ x y hxy, have _ := is_subgroup.inv_mem hxy, by simpa using this,\n λ x y z hxy hyz, have _ := is_submonoid.mul_mem hxy hyz, by simpa [mul_assoc] using this⟩\n\ndef left_cosets&#39; : Type u := quotient (left_rel S)\n\nnamespace is_subgroup\n\ndef fibre_equiv (g : G) : quotient.fibre ⟦g⟧ ≃ S :=\n⟨λ x, ⟨x.1⁻¹ * g, quotient.exact x.2⟩,\n λ x, ⟨g * x⁻¹, quotient.sound $ by simpa [(≈), setoid.r] using x.2⟩,\n λ ⟨x, hx⟩, subtype.eq $ by simp,\n λ ⟨g, hg⟩, subtype.eq $ by simp⟩\n\nnoncomputable def group_equiv_left_cosets_times_subgroup&#39; :\n  G ≃ (left_cosets&#39; S × S) :=\ncalc G ≃ Σ L : left_cosets&#39; S, quotient.fibre L :\n  equiv.equiv_fibre\n    ... ≃ Σ L : left_cosets&#39; S, quotient.fibre ⟦quotient.out L⟧ :\n  equiv.sigma_congr_right (λ L, by simp)\n    ... ≃ Σ L : left_cosets&#39; S, S :\n  equiv.sigma_congr_right (λ L, fibre_equiv _ _)\n    ... ≃ (left_cosets&#39; S × S) :\n  equiv.sigma_equiv_prod _ _\n\nend is_subgroup\n</pre></div>",
        "id": 125140433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867301
    },
    {
        "content": "<p>version 2</p>",
        "id": 125140434,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867303
    },
    {
        "content": "<p>who is Mitchell Rowett?</p>",
        "id": 125140441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867369
    },
    {
        "content": "<p>Student of Scott?</p>",
        "id": 125140442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523867383
    },
    {
        "content": "<p>UG I think</p>",
        "id": 125140443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523867393
    },
    {
        "content": "<p>would he/she mind if, you know, I basically refactor the whole thing</p>",
        "id": 125140486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867409
    },
    {
        "content": "<p>Isn't the logic of doing the non-empty version that you can go from that to the noncomputable version but you can't go back?</p>",
        "id": 125140487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523867451
    },
    {
        "content": "<p>I don't get you</p>",
        "id": 125140495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867467
    },
    {
        "content": "<p>full file refactorings are permitted in mathlib, you don't need permission from the original author (and conversely, be prepared for your work to be refactored to unrecognizability in the future)</p>",
        "id": 125140498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523867516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should I refactor coset?</p>",
        "id": 125140537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867532
    },
    {
        "content": "<p>Mitchel did the coset theory, the things your changing were mine. I think we can add a more general version of <code>equiv_fibre</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_fibre</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">equiv</span>\n</pre></div>",
        "id": 125140538,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523867543
    },
    {
        "content": "<p>how do you make those red rectangles?</p>",
        "id": 125140540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867560
    },
    {
        "content": "<p><code> ```lean ... ``` </code></p>",
        "id": 125140543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523867583
    },
    {
        "content": "<p>I don't know were they come from. I just copied stuff from vs code.</p>",
        "id": 125140548,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523867595
    },
    {
        "content": "<p>I mean red rectangles</p>",
        "id": 125140550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867596
    },
    {
        "content": "<p>oh, lean</p>",
        "id": 125140551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867602
    },
    {
        "content": "<p>the red rectangles are what happens when the syntax highlighter gets confused</p>",
        "id": 125140553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523867619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> did I tell you how much I hate <code>{b}</code>?</p>",
        "id": 125140556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867637
    },
    {
        "content": "<p>On further review, I'm not sure it can be changed, the definition <code>singleton a = insert a empty</code> is in core.lean</p>",
        "id": 125140601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523867707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  you shouldn't depend too much on definitional equality. It breaks modularity of the library.</p>",
        "id": 125140650,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523867859
    },
    {
        "content": "<p>don't you like it when every theorem is just <code>rfl</code>?</p>",
        "id": 125140692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867900
    },
    {
        "content": "<p>Of course I like it, but I also hate it to not be able to change a definition because it would break 1000 places in mathlib.</p>",
        "id": 125140694,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523867924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">coset</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibre</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_fibre</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">fibre</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hx</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">equiv</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">left_rel</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">],</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">left_rel</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_subgroup</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibre_equiv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fibre</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">⟦</span><span class=\"n\">g</span><span class=\"err\">⟧</span> <span class=\"err\">≃</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"bp\">≈</span><span class=\"o\">),</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">group_equiv_left_cosets_times_subgroup&#39;</span> <span class=\"o\">:</span>\n  <span class=\"n\">G</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">G</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">fibre</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">L</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">equiv_fibre</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">fibre</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"err\">⟦</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"n\">L</span><span class=\"err\">⟧</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">fibre_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_equiv_prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_subgroup</span>\n</pre></div>",
        "id": 125140699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867957
    },
    {
        "content": "<p>In Isabelle one can always change a definition, make it more general. And then just prove that it is the same.</p>",
        "id": 125140701,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523867961
    },
    {
        "content": "<p>Isabelle is crap</p>",
        "id": 125140703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523867972
    },
    {
        "content": "<p>be sure to have good reasons to make invective statements</p>",
        "id": 125140750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523868037
    },
    {
        "content": "<p>it's nonconstructive</p>",
        "id": 125140751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868049
    },
    {
        "content": "<p>Well, your claim is also nonconstructive</p>",
        "id": 125140757,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523868086
    },
    {
        "content": "<p>so how is version 3?</p>",
        "id": 125140758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868089
    },
    {
        "content": "<p>I think we should stay with <code>f ⁻¹' {b}</code>.</p>",
        "id": 125140802,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523868158
    },
    {
        "content": "<p>the other advantage of not giving the definition a name is we don't need to debate if it should be <code>fibre</code> or <code>fiber</code> <span class=\"emoji emoji-1f643\" title=\"upside down face\">:upside_down_face:</span></p>",
        "id": 125140854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523868272
    },
    {
        "content": "<p>who cares about cosets of sub-not-groups?</p>",
        "id": 125140857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868294
    },
    {
        "content": "<p>I guess Patrick might, that is the same as the translate of a set</p>",
        "id": 125140863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523868335
    },
    {
        "content": "<p>why would he care?</p>",
        "id": 125140905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868377
    },
    {
        "content": "<p>it relates to affine spaces and the group conjugation action. It also comes up with \"neighborhoods of zero\" in a topological group</p>",
        "id": 125140998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523868625
    },
    {
        "content": "<p>singleton is really unusable</p>",
        "id": 125141009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868648
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">coset</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_fib</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hx</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">equiv</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">left_rel</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span><span class=\"o\">],</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">left_rel</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_subgroup</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_equiv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"err\">⟦</span><span class=\"n\">g</span><span class=\"err\">⟧</span><span class=\"o\">}</span> <span class=\"err\">≃</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"bp\">≈</span><span class=\"o\">),</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">group_equiv_left_cosets_times_subgroup&#39;</span> <span class=\"o\">:</span>\n  <span class=\"n\">G</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">G</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">equiv_fib</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"err\">⟦</span><span class=\"n\">x</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"err\">⟦</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"n\">L</span><span class=\"err\">⟧</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_congr_right</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">fib_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">left_cosets&#39;</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_equiv_prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_subgroup</span>\n</pre></div>",
        "id": 125141102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868894
    },
    {
        "content": "<p>conflict between <code>fibre</code> and <code>fiber</code> resolved :P</p>",
        "id": 125141108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523868909
    },
    {
        "content": "<p>Slightly shortened.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv_fib</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"err\">Σ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125141154,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523869020
    },
    {
        "content": "<p>you win</p>",
        "id": 125141160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523869037
    },
    {
        "content": "<p>it's a bit weird to write <code> ⟨hx⟩</code> in the last bit there, since it's refl. Use <code>λ ⟨_, x, rfl⟩, rfl</code> instead</p>",
        "id": 125141203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523869098
    },
    {
        "content": "<p>wait, how does that also work :o</p>",
        "id": 125141322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523869403
    },
    {
        "content": "<p>oh, automatic casing</p>",
        "id": 125141327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523869420
    }
]