[
    {
        "content": "<p>Unfortunately it's hard to strip this down to a MWE -- <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%20linear_algebra.basis%20data.finset%20data.fintype%20ring_theory.algebra_operations%0Aopen%20classical%0Aopen%20finset%20%0A%0Alocal%20attribute%20%5Binstance%2C%20priority%200%5D%20prop_decidable%0A%0Astructure%20is_sum%20%28S%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%29%20%3A%20Prop%20%3A%3D%0A%28wd%20%3A%20%E2%88%80%20%7Ba%20s%20t%7D%2C%20S%20a%20s%20%E2%86%92%20S%20a%20t%20%E2%86%92%20s%20%3D%20t%29%0A%28sum_add%20%3A%20%E2%88%80%20%7Ba%20b%20s%20t%7D%2C%20S%20a%20s%20%E2%86%92%20S%20b%20t%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20a%20n%20%2B%20b%20n%29%20%28s%20%2B%20t%29%29%0A%28sum_smul%20%3A%20%E2%88%80%20%7Ba%20s%7D%20c%2C%20S%20a%20s%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20c%20*%20a%20n%29%20%28c%20*%20s%29%29%0A%28sum_shift%20%3A%20%E2%88%80%20%7Ba%20s%7D%2C%20S%20a%20s%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20a%20%28n%20%2B%201%29%29%20%28s%20-%20a%200%29%29%0A%0Adef%20has_sum%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20%3A%20%E2%84%9D%29%20%3A%3D%20%E2%88%80%20S%2C%20is_sum%20S%20%E2%86%92%20%E2%88%80%20t%2C%20S%20a%20t%20%E2%86%92%20t%20%3D%20s%0A%0Atheorem%20sum_of_has_sum%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20%3A%20%E2%84%9D%29%20%28H%20%3A%20has_sum%20a%20s%29%20%0A%20%20%28S%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%29%20%28HS%20%3A%20is_sum%20S%29%20%28t%20%3A%20%E2%84%9D%29%20%28Ht%20%3A%20S%20a%20t%29%20%3A%20%0A%20%20S%20a%20s%20%3A%3D%20%0Aby%20rwa%20%28H%20S%20HS%20t%20Ht%29.symm%20%0A%0Atheorem%20has_sum_alt%20%3A%20has_sum%20%28%CE%BB%20n%2C%20%28-1%29%20%5E%20n%29%20%281%2F2%29%20%3A%3D%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H2%20%3A%3D%20HS.sum_smul%20%28-1%29%20Ht%2C%0A%20%20have%20H0%20%3A%3D%20HS.wd%20H2%20H3%2C%0A%20%20change%20_%20%3D%20t%20-%201%20at%20H0%2C%0A%20%20linarith%2C%0Aend%0A%0Atheorem%20has_sum_alt_id%20%3A%20has_sum%20%28%CE%BB%20n%2C%20%28-1%29%20%5E%20n%20*%20n%29%20%28-1%2F4%29%20%3A%3D%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20HC%20%3A%20%E2%88%80%20n%20%3A%20%E2%84%95%2C%20%28-1%20%3A%20%E2%84%9D%29%20%5E%20%28n%20%2B%201%29%20*%20%28n%20%2B%201%20%3A%20%E2%84%95%29%20%2B%20%28-1%29%20%5E%20n%20*%20n%20%3D%20%28-1%29%20*%20%28-1%29%20%5E%20n%20%3A%3D%20%0A%20%20%20%20%CE%BB%20n%2C%20by%20rw%20%5Bpow_succ%2C%20nat.cast_add%2C%20mul_add%2C%20nat.cast_one%2C%20mul_one%2C%20add_comm%2C%20%E2%86%90add_assoc%2C%20neg_one_mul%2C%0A%20%20%20%20neg_mul_eq_neg_mul_symm%2C%20add_neg_self%2C%20zero_add%5D%2C%20%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H1%20%3A%3D%20HS.sum_add%20H3%20Ht%2C%0A%20%20have%20H2%20%3A%3D%20HS.sum_smul%20%28-1%29%20H1%2C%0A%20%20simp%20only%20%5Bnat.cast_zero%2C%20mul_zero%2C%20sub_zero%2C%20HC%2C%20neg_one_mul%2C%20neg_neg%5D%20at%20H2%2C%0A%20%20have%20H4%20%3A%3D%20has_sum_alt%20S%20HS%20_%20H2%2C%0A%20%20linarith%2C%0Aend%0A%0Adef%20fib%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%0A%7C%200%20%3A%3D%200%0A%7C%201%20%3A%3D%201%0A%7C%20%28n%20%2B%202%29%20%3A%3D%20fib%20n%20%2B%20fib%20%28n%20%2B%201%29%0A%0Atheorem%20has_sum_fib%20%3A%20has_sum%20fib%20%28-1%29%20%3A%3D%0Ahave%20HC%20%3A%20%E2%88%80%20n%2C%20fib%20n%20%2B%20fib%20%28n%20%2B%201%29%20%3D%20fib%20%28n%20%2B%202%29%20%3A%3D%20%CE%BB%20n%2C%20rfl%2C%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H33%20%3A%3D%20HS.sum_shift%20H3%2C%0A%20%20have%20H1%20%3A%3D%20HS.sum_add%20Ht%20H3%2C%0A%20%20have%20H0%20%3A%3D%20HS.wd%20H1%20H33%2C%20--%20can%20use%20linearity%20instead%20of%20wd%0A%20%20simp%20only%20%5Bfib%2C%20sub_zero%5D%20at%20H0%2C%0A%20%20linarith%2C%0Aend%0A%0A--%20if%20a%20sequence%20has%20two%20has_sums%2C%20everything%20is%20its%20sum%20%0A--%20%28this%20is%20the%20case%20of%20not%20being%20summable%2C%20e.g.%201%2B1%2B1%2B...%29%0Atheorem%20has_sum_test_un%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20t%20%3A%20%E2%84%9D%29%20%28hst%20%3A%20s%20%E2%89%A0%20t%29%20%3A%20%0A%20%20has_sum%20a%20s%20%E2%86%92%20has_sum%20a%20t%20%E2%86%92%20%E2%88%80%20s%2C%20has_sum%20a%20s%20%3A%3D%0A%CE%BB%20hs%20ht%20u%20S%20HS%20v%20Hv%2C%20false.elim%20%28hst%20%28ht%20S%20HS%20s%20%28sum_of_has_sum%20a%20s%20hs%20S%20HS%20v%20Hv%29%29%29%0A%0Aopen%20submodule%0A%0A--%20a%20sum%20operator%20that%20is%20%22forced%22%20to%20give%20a%20the%20sum%20s%0A--%20a%20valid%20sum%20operator%20iff%20the%20shifts%20of%20a%20are%20linearly%20independent%0A--%20in%20which%20case%20a%20can%20have%20any%20sum%2C%20and%20thus%20has_sum%20nothing%0Adef%20forced_sum%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%20%3A%3D%0A%CE%BB%20t%20T%2C%0Aif%20Ht%20%3A%20t%20%E2%88%88%20span%20%E2%84%9D%20%28set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20then%0A%20%20if%20T%20%3D%20finsupp.sum%20%28linear_independent.repr%20H%20%E2%9F%A8t%2C%20Ht%E2%9F%A9%29%20%28%CE%BB%20n%20r%2C%20r%20*%20%28S%20-%20finset.sum%20%28%40finset.univ%20%28fin%20n%29%20_%29%20%28%CE%BB%20k%2C%20s%20k.val%29%29%29%20%0A%20%20%20%20then%20true%20%0A%20%20else%20false%0Aelse%20false%0A%0A--%20linear%20algebra%20lemma%0Alemma%20spanning_set_subset_span%20%7BR%20M%20%3A%20Type%7D%20%5Bring%20R%5D%20%5Badd_comm_group%20M%5D%20%5Bmodule%20R%20M%5D%20%7Bs%20%3A%20set%20M%7D%20%3A%0A%20%20s%20%E2%8A%86%20span%20R%20s%20%3A%3D%20span_le.mp%20%28le_refl%20_%29%0A%0A--%20should%20be%20easy%3A%20use%20some%20basic%20theorems%20like%20mem_span%20or%20something%0Alemma%20forced_sum_val%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%20%0A%20%20forced_sum%20s%20H%20S%20s%20S%20%3A%3D%0Abegin%0A%20%20have%20Hs%E2%82%81%20%3A%20s%20%E2%88%88%20set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%20%3A%3D%20set.mem_range.mpr%20%E2%9F%A80%2C%20rfl%E2%9F%A9%2C%0A%20%20have%20Hs%E2%82%82%20%3A%20s%20%E2%88%88%20span%20%E2%84%9D%20%28set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%3A%3D%20spanning_set_subset_span%20Hs%E2%82%81%2C%0A%20%20have%20Hs%E2%82%83%20%3A%20_%20%3A%3D%20linear_independent.repr_eq_single%20H%200%20%E2%9F%A8s%2C%20Hs%E2%82%82%E2%9F%A9%20rfl%2C%20%0A%20%20unfold%20forced_sum%2C%0A%20%20split_ifs%2C%0A%20%20%7B%20exact%20trivial%20%7D%2C%0A%20%20%7B%20apply%20h%2C%0A%20%20%20%20rw%20Hs%E2%82%83%2C%20%0A%20%20%20%20%7D%0Aend%0A%0A--%20i%20guess%20this%20is%20the%20hard%20part%0Alemma%20is_sum_forced_sum%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%0A%20%20is_sum%20%28forced_sum%20s%20H%20S%29%20%3A%3D%0A%E2%9F%A8begin%20end%2C%0A%20begin%20end%2C%0A%20begin%20end%2C%0A%20begin%20end%E2%9F%A9%0A%0Atheorem%20no_sum_of_lin_ind_shifts%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%3A%20%0A%20%20%E2%88%80%20S%20%3A%20%E2%84%9D%2C%20%C2%AC%20has_sum%20s%20S%20%3A%3D%0A%CE%BB%20S%20HS%2C%20%0Ahave%20X%20%3A%20_%20%3A%3D%20HS%20%28forced_sum%20s%20H%20%28S%20%2B%201%29%29%20%28is_sum_forced_sum%20s%20H%20%28S%20%2B%201%29%29%20%28S%20%2B%201%29%20%28forced_sum_val%20s%20H%20%28S%20%2B%201%29%29%2C%0Aby%20linarith%0A%0A--%20CHALLENGE%3A%20formalise%20the%20proof%20here%3A%0A--%20https%3A%2F%2Fleanprover.zulipchat.com%2F%23narrow%2Fstream%2F116395-maths%2Ftopic%2FAxiomatised.20summations%2Fnear%2F178884724%0A--%20REQUIRES%20GENERATING%20FUNCTIONS%2C%20TAYLOR%20SERIES%20--%20not%20currently%20in%20Lean!%0Atheorem%20inv_shifts_lin_ind%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%201%20%2F%20%28n%20%2B%20m%20%2B%201%29%29%20%3A%3D%0Abegin%0A%0Aend\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%20linear_algebra.basis%20data.finset%20data.fintype%20ring_theory.algebra_operations%0Aopen%20classical%0Aopen%20finset%20%0A%0Alocal%20attribute%20%5Binstance%2C%20priority%200%5D%20prop_decidable%0A%0Astructure%20is_sum%20%28S%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%29%20%3A%20Prop%20%3A%3D%0A%28wd%20%3A%20%E2%88%80%20%7Ba%20s%20t%7D%2C%20S%20a%20s%20%E2%86%92%20S%20a%20t%20%E2%86%92%20s%20%3D%20t%29%0A%28sum_add%20%3A%20%E2%88%80%20%7Ba%20b%20s%20t%7D%2C%20S%20a%20s%20%E2%86%92%20S%20b%20t%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20a%20n%20%2B%20b%20n%29%20%28s%20%2B%20t%29%29%0A%28sum_smul%20%3A%20%E2%88%80%20%7Ba%20s%7D%20c%2C%20S%20a%20s%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20c%20*%20a%20n%29%20%28c%20*%20s%29%29%0A%28sum_shift%20%3A%20%E2%88%80%20%7Ba%20s%7D%2C%20S%20a%20s%20%E2%86%92%20S%20%28%CE%BB%20n%2C%20a%20%28n%20%2B%201%29%29%20%28s%20-%20a%200%29%29%0A%0Adef%20has_sum%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20%3A%20%E2%84%9D%29%20%3A%3D%20%E2%88%80%20S%2C%20is_sum%20S%20%E2%86%92%20%E2%88%80%20t%2C%20S%20a%20t%20%E2%86%92%20t%20%3D%20s%0A%0Atheorem%20sum_of_has_sum%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20%3A%20%E2%84%9D%29%20%28H%20%3A%20has_sum%20a%20s%29%20%0A%20%20%28S%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%29%20%28HS%20%3A%20is_sum%20S%29%20%28t%20%3A%20%E2%84%9D%29%20%28Ht%20%3A%20S%20a%20t%29%20%3A%20%0A%20%20S%20a%20s%20%3A%3D%20%0Aby%20rwa%20%28H%20S%20HS%20t%20Ht%29.symm%20%0A%0Atheorem%20has_sum_alt%20%3A%20has_sum%20%28%CE%BB%20n%2C%20%28-1%29%20%5E%20n%29%20%281%2F2%29%20%3A%3D%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H2%20%3A%3D%20HS.sum_smul%20%28-1%29%20Ht%2C%0A%20%20have%20H0%20%3A%3D%20HS.wd%20H2%20H3%2C%0A%20%20change%20_%20%3D%20t%20-%201%20at%20H0%2C%0A%20%20linarith%2C%0Aend%0A%0Atheorem%20has_sum_alt_id%20%3A%20has_sum%20%28%CE%BB%20n%2C%20%28-1%29%20%5E%20n%20*%20n%29%20%28-1%2F4%29%20%3A%3D%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20HC%20%3A%20%E2%88%80%20n%20%3A%20%E2%84%95%2C%20%28-1%20%3A%20%E2%84%9D%29%20%5E%20%28n%20%2B%201%29%20*%20%28n%20%2B%201%20%3A%20%E2%84%95%29%20%2B%20%28-1%29%20%5E%20n%20*%20n%20%3D%20%28-1%29%20*%20%28-1%29%20%5E%20n%20%3A%3D%20%0A%20%20%20%20%CE%BB%20n%2C%20by%20rw%20%5Bpow_succ%2C%20nat.cast_add%2C%20mul_add%2C%20nat.cast_one%2C%20mul_one%2C%20add_comm%2C%20%E2%86%90add_assoc%2C%20neg_one_mul%2C%0A%20%20%20%20neg_mul_eq_neg_mul_symm%2C%20add_neg_self%2C%20zero_add%5D%2C%20%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H1%20%3A%3D%20HS.sum_add%20H3%20Ht%2C%0A%20%20have%20H2%20%3A%3D%20HS.sum_smul%20%28-1%29%20H1%2C%0A%20%20simp%20only%20%5Bnat.cast_zero%2C%20mul_zero%2C%20sub_zero%2C%20HC%2C%20neg_one_mul%2C%20neg_neg%5D%20at%20H2%2C%0A%20%20have%20H4%20%3A%3D%20has_sum_alt%20S%20HS%20_%20H2%2C%0A%20%20linarith%2C%0Aend%0A%0Adef%20fib%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%0A%7C%200%20%3A%3D%200%0A%7C%201%20%3A%3D%201%0A%7C%20%28n%20%2B%202%29%20%3A%3D%20fib%20n%20%2B%20fib%20%28n%20%2B%201%29%0A%0Atheorem%20has_sum_fib%20%3A%20has_sum%20fib%20%28-1%29%20%3A%3D%0Ahave%20HC%20%3A%20%E2%88%80%20n%2C%20fib%20n%20%2B%20fib%20%28n%20%2B%201%29%20%3D%20fib%20%28n%20%2B%202%29%20%3A%3D%20%CE%BB%20n%2C%20rfl%2C%0Abegin%0A%20%20intros%20S%20HS%20t%20Ht%2C%0A%20%20have%20H3%20%3A%3D%20HS.sum_shift%20Ht%2C%0A%20%20have%20H33%20%3A%3D%20HS.sum_shift%20H3%2C%0A%20%20have%20H1%20%3A%3D%20HS.sum_add%20Ht%20H3%2C%0A%20%20have%20H0%20%3A%3D%20HS.wd%20H1%20H33%2C%20--%20can%20use%20linearity%20instead%20of%20wd%0A%20%20simp%20only%20%5Bfib%2C%20sub_zero%5D%20at%20H0%2C%0A%20%20linarith%2C%0Aend%0A%0A--%20if%20a%20sequence%20has%20two%20has_sums%2C%20everything%20is%20its%20sum%20%0A--%20%28this%20is%20the%20case%20of%20not%20being%20summable%2C%20e.g.%201%2B1%2B1%2B...%29%0Atheorem%20has_sum_test_un%20%28a%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28s%20t%20%3A%20%E2%84%9D%29%20%28hst%20%3A%20s%20%E2%89%A0%20t%29%20%3A%20%0A%20%20has_sum%20a%20s%20%E2%86%92%20has_sum%20a%20t%20%E2%86%92%20%E2%88%80%20s%2C%20has_sum%20a%20s%20%3A%3D%0A%CE%BB%20hs%20ht%20u%20S%20HS%20v%20Hv%2C%20false.elim%20%28hst%20%28ht%20S%20HS%20s%20%28sum_of_has_sum%20a%20s%20hs%20S%20HS%20v%20Hv%29%29%29%0A%0Aopen%20submodule%0A%0A--%20a%20sum%20operator%20that%20is%20%22forced%22%20to%20give%20a%20the%20sum%20s%0A--%20a%20valid%20sum%20operator%20iff%20the%20shifts%20of%20a%20are%20linearly%20independent%0A--%20in%20which%20case%20a%20can%20have%20any%20sum%2C%20and%20thus%20has_sum%20nothing%0Adef%20forced_sum%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%20%28%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%E2%86%92%20%E2%84%9D%20%E2%86%92%20Prop%20%3A%3D%0A%CE%BB%20t%20T%2C%0Aif%20Ht%20%3A%20t%20%E2%88%88%20span%20%E2%84%9D%20%28set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20then%0A%20%20if%20T%20%3D%20finsupp.sum%20%28linear_independent.repr%20H%20%E2%9F%A8t%2C%20Ht%E2%9F%A9%29%20%28%CE%BB%20n%20r%2C%20r%20*%20%28S%20-%20finset.sum%20%28%40finset.univ%20%28fin%20n%29%20_%29%20%28%CE%BB%20k%2C%20s%20k.val%29%29%29%20%0A%20%20%20%20then%20true%20%0A%20%20else%20false%0Aelse%20false%0A%0A--%20linear%20algebra%20lemma%0Alemma%20spanning_set_subset_span%20%7BR%20M%20%3A%20Type%7D%20%5Bring%20R%5D%20%5Badd_comm_group%20M%5D%20%5Bmodule%20R%20M%5D%20%7Bs%20%3A%20set%20M%7D%20%3A%0A%20%20s%20%E2%8A%86%20span%20R%20s%20%3A%3D%20span_le.mp%20%28le_refl%20_%29%0A%0A--%20should%20be%20easy%3A%20use%20some%20basic%20theorems%20like%20mem_span%20or%20something%0Alemma%20forced_sum_val%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%20%0A%20%20forced_sum%20s%20H%20S%20s%20S%20%3A%3D%0Abegin%0A%20%20have%20Hs%E2%82%81%20%3A%20s%20%E2%88%88%20set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%20%3A%3D%20set.mem_range.mpr%20%E2%9F%A80%2C%20rfl%E2%9F%A9%2C%0A%20%20have%20Hs%E2%82%82%20%3A%20s%20%E2%88%88%20span%20%E2%84%9D%20%28set.range%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%3A%3D%20spanning_set_subset_span%20Hs%E2%82%81%2C%0A%20%20have%20Hs%E2%82%83%20%3A%20_%20%3A%3D%20linear_independent.repr_eq_single%20H%200%20%E2%9F%A8s%2C%20Hs%E2%82%82%E2%9F%A9%20rfl%2C%20%0A%20%20unfold%20forced_sum%2C%0A%20%20split_ifs%2C%0A%20%20%7B%20exact%20trivial%20%7D%2C%0A%20%20%7B%20apply%20h%2C%0A%20%20%20%20rw%20Hs%E2%82%83%2C%20%0A%20%20%20%20%7D%0Aend%0A%0A--%20i%20guess%20this%20is%20the%20hard%20part%0Alemma%20is_sum_forced_sum%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%28S%20%3A%20%E2%84%9D%29%20%3A%0A%20%20is_sum%20%28forced_sum%20s%20H%20S%29%20%3A%3D%0A%E2%9F%A8begin%20end%2C%0A%20begin%20end%2C%0A%20begin%20end%2C%0A%20begin%20end%E2%9F%A9%0A%0Atheorem%20no_sum_of_lin_ind_shifts%20%28s%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%9D%29%20%28H%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%20s%20%28n%20%2B%20m%29%29%29%20%3A%20%0A%20%20%E2%88%80%20S%20%3A%20%E2%84%9D%2C%20%C2%AC%20has_sum%20s%20S%20%3A%3D%0A%CE%BB%20S%20HS%2C%20%0Ahave%20X%20%3A%20_%20%3A%3D%20HS%20%28forced_sum%20s%20H%20%28S%20%2B%201%29%29%20%28is_sum_forced_sum%20s%20H%20%28S%20%2B%201%29%29%20%28S%20%2B%201%29%20%28forced_sum_val%20s%20H%20%28S%20%2B%201%29%29%2C%0Aby%20linarith%0A%0A--%20CHALLENGE%3A%20formalise%20the%20proof%20here%3A%0A--%20https%3A%2F%2Fleanprover.zulipchat.com%2F%23narrow%2Fstream%2F116395-maths%2Ftopic%2FAxiomatised.20summations%2Fnear%2F178884724%0A--%20REQUIRES%20GENERATING%20FUNCTIONS%2C%20TAYLOR%20SERIES%20--%20not%20currently%20in%20Lean!%0Atheorem%20inv_shifts_lin_ind%20%3A%20linear_independent%20%E2%84%9D%20%28%CE%BB%20m%20n%20%3A%20%E2%84%95%2C%201%20%2F%20%28n%20%2B%20m%20%2B%201%29%29%20%3A%3D%0Abegin%0A%0Aend\">this</a> is the code.</p>\n<p>The error is in <code>forced_sum_val</code>. Apparently <code>Hs₃ : ⇑(linear_independent.repr H) ⟨s, Hs₂⟩ = finsupp.single 0 1,</code> is not an equality or iff. Am I making an obvious mistake?</p>",
        "id": 181689891,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574468062
    },
    {
        "content": "<p>On modern mathlib I get time-outs in <code>forced_sum</code> :-/</p>",
        "id": 181690109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574468386
    },
    {
        "content": "<p>So I can only reproduce this in the lean web editor. I would recommend that that you try this in VS Code Abhi. I know you said that VS Code was slow but the Lean Web Editor is necessarily slower because it's running the same underlying code in a more inefficient way (a javascript translation of the C++ instead of the C++). The error message is completely bonkers. If you write <code>set_option pp.all true</code> in front of <code>forced_sum_val</code> and then wait forever you might be able to find out why the rewrite fails -- perhaps the terms look equal but are not precisely equal.</p>",
        "id": 181706293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574497646
    },
    {
        "content": "<p>With VS Code you get problems earlier in the file which might indicate where things are actually going wrong.</p>",
        "id": 181706299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574497671
    },
    {
        "content": "<p>I'm looking at the actual terms and superficially it looks like they should match, but they are <em>really huge</em>. You might need some expert advice about how to make the terms more compact. This might be the actual problem -- the code you're writing is producing mega-large terms for some reason.</p>",
        "id": 181706529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574498060
    },
    {
        "content": "<p>You shouldn't be using if-then in <code>forced_sum</code>, it's a Prop and it's not decidable</p>",
        "id": 181708780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574502410
    },
    {
        "content": "<p>But for me the problem seems to be that <code>linear_independent ℝ (λ m n : ℕ, s (n + m))</code> takes forever to elaborate, because <code>module ℝ (ℕ → ℝ)</code> takes forever to synthesize, because of some instances in <code>ring_theory.algebra_operations</code>. I think we need to take another look at these instances, this isn't the first time they have caused trouble</p>",
        "id": 181709038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574502850
    },
    {
        "content": "<p>setting priorities helped, so probably this is fixed with <a href=\"https://github.com/leanprover-community/mathlib/issues/1724\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1724\">#1724</a></p>",
        "id": 181709505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574503581
    },
    {
        "content": "<p>In any case, the right definition of <code>forced_sum</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">forced_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">Ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))),</span>\n<span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">linear_independent</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">H</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Ht</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 181709521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574503661
    },
    {
        "content": "<p>The sum over <code>fin n</code> isn't necessary, you can sum a finset of nats instead, and this makes <code>forced_sum_val</code> easier:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">forced_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">Ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))),</span>\n<span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">linear_independent</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">H</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Ht</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">forced_sum_val</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">forced_sum</span> <span class=\"n\">s</span> <span class=\"n\">H</span> <span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hs₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hs₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">spanning_set_subset_span</span> <span class=\"n\">Hs₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hs₃</span> <span class=\"o\">:=</span> <span class=\"n\">linear_independent</span><span class=\"bp\">.</span><span class=\"n\">repr_eq_single</span> <span class=\"n\">H</span> <span class=\"mi\">0</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Hs₂</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">Hs₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hs₃</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181709750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574504117
    },
    {
        "content": "<p>Thanks -- it turns out i don't need <code>ring_theory.algebra_operations</code> -- it's much faster now without it.</p>\n<p>I'm surprised it doesn't accidentally get imported through <code>data.real.basic</code> or something though.</p>",
        "id": 181714029,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574512313
    },
    {
        "content": "<p>Wait a minute -- the rewrite/simp still doesn't work though.</p>",
        "id": 181714086,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574512420
    },
    {
        "content": "<p>I think it genuinely thinks <code>Hs₃</code> is not an equality.</p>",
        "id": 181714275,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574512712
    },
    {
        "content": "<p>OK, It works if I specify the type of Hs3.</p>",
        "id": 181714425,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574513015
    },
    {
        "content": "<p>Weird error though.</p>",
        "id": 181714467,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574513045
    },
    {
        "content": "<p>I've seen this once before, quite recently. Can you minimise? Or at least show me an example of it failing and not taking a long time to fail?</p>",
        "id": 181714946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574513953
    },
    {
        "content": "<p>Ideally something I can reproduce in VS Code</p>",
        "id": 181714952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574513975
    },
    {
        "content": "<p>If you remove the import <code>ring_theory.algebra_operations</code>, it happens quickly.</p>",
        "id": 181715004,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574514032
    },
    {
        "content": "<p>It's probably because you have an assigned metavariable caused by the tactic that created the hypothesis</p>",
        "id": 181717189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574518034
    },
    {
        "content": "<p>I don't think <code>have h : _ := ...</code> will cause this, but you will notice that my code used <code>have h := ...</code> instead</p>",
        "id": 181717240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574518089
    },
    {
        "content": "<p>yep, this is the cause</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- no problem</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, lemma is not an equality nor a iff</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, lemma lhs is a metavariable</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- no problem</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181717316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574518292
    },
    {
        "content": "<p>Huh. I don't think I'd ever seen this happen before.</p>",
        "id": 181718314,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574520180
    },
    {
        "content": "<p>I'm still not sure I understand. Why does Lean care how I defined the have statement? The statement introduced to the environment is still the same -- no metavariables. Right?</p>",
        "id": 181718323,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1574520225
    },
    {
        "content": "<p>Is this one of those things where the end user can't see what's going on?</p>",
        "id": 181718437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574520438
    },
    {
        "content": "<p>yes, at least not without some hackery</p>",
        "id": 181719545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574522389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"err\">∘</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- (app (app (app (const eq [1]) ... (fully elaborated)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"err\">∘</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- (mvar ...)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"err\">∘</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- (app (app (app (const eq [?_mlocal._fresh.1485.2073]) (mvar) (mvar)) (mvar))</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"err\">∘</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- (app (app (app (const eq [?_mlocal._fresh.1599.1006+1]) (mvar))</span>\n    <span class=\"c1\">-- (app (app (app (app (const has_add.add) (mvar)) (mvar)) (mvar)) (mvar))) (mvar))</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This shows the actual type of the <code>this</code> variable after each call. The <code>mvar</code>s normally appear as <code>?m_1</code> when printed, but these are <code>mvar</code>s that have already been assigned, so the pretty printer goes ahead and shows the assignment. But several uncarefully written tactics match directly on this type rather than unfolding metavariables first, and <code>rw</code>'s equality check is one of these. It just says \"is this expr an <code>eq</code> application? If not, fail\" and so it fails because it is actually an <code>mvar</code> which is an <code>eq</code> application if lean were to check the metavariable assignment.</p>",
        "id": 181719873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574522928
    },
    {
        "content": "<p>Basically, the type of the first <code>this</code> is <code>2 + 3 = 3 + 2</code>, and the type of the second is <code>?m_1</code> where <code>?m_1 := 2 + 3 = 3 + 2</code></p>",
        "id": 181719934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574523040
    }
]