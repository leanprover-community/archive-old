[
    {
        "content": "<p>I'm surprised that the lemma <a href=\"https://github.com/leanprover/lean/blob/master/tests/lean/run/term_app2.lean#L27\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/tests/lean/run/term_app2.lean#L27\">https://github.com/leanprover/lean/blob/master/tests/lean/run/term_app2.lean#L27</a> has never made it into mathlib (though <code>list.attach</code> has). Do people just avoid nested inductives in general in Lean 3? Is it ultimately easier to replace a nested occurrence <code>list t -&gt;</code> with <code>(n : nat) -&gt; (fin n -&gt; t) -&gt;</code>?</p>",
        "id": 168305372,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560774516
    },
    {
        "content": "<p>nested inductives don't give the best recursor right now, so I think people tend to avoid them. Also, I tend to use <code>list.length</code> instead of <code>sizeof</code> if I have to induct on a list in that way. I view <code>sizeof</code> as an internal thing. I don't actually know what the <code>sizeof</code> a list is defined to be, though I imagine it's the length.</p>",
        "id": 168307467,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560776171
    },
    {
        "content": "<p>No, it's the sum of element sizes. You couldn't prove such recursions terminating otherwise.</p>",
        "id": 168307668,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560776366
    },
    {
        "content": "<p>Does everything have a size? Can we ask what the size of the real numbers are? Or a perfectoid space?</p>",
        "id": 168307955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560776549
    },
    {
        "content": "<p>Like Chris, I have always regarded <code>sizeof</code> as some internal thing which we mortals shouldn't be fiddling with.</p>",
        "id": 168307990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560776582
    },
    {
        "content": "<p>I think inductive types have a <code>sizeof</code></p>",
        "id": 168308030,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560776611
    },
    {
        "content": "<p>I would have used <code>list.sum</code> for that sort of induction.</p>",
        "id": 168308224,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560776725
    },
    {
        "content": "<p>Great, we could ask what the size of <code>[real]</code> is</p>",
        "id": 168308227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560776730
    },
    {
        "content": "<p>It's <code>2</code></p>",
        "id": 168308399,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560776863
    },
    {
        "content": "<p>obviously</p>",
        "id": 168308466,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560776895
    },
    {
        "content": "<p>Turns out <code>Type</code> has sizeof as well.</p>",
        "id": 168308554,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560776982
    },
    {
        "content": "<p>is it interesting?</p>",
        "id": 168308645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560777038
    },
    {
        "content": "<p>Non inductive types also have <code>sizeof</code>, but it's just always zero.</p>",
        "id": 168308699,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560777092
    },
    {
        "content": "<p>Every type that may be used in a mutual or nested inductive should have a <code>has_sizeof</code> instance. As Chris said, the value only really matters for actually inductive types, on which you may want to use well-founded induction.</p>",
        "id": 168308810,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560777147
    },
    {
        "content": "<p><code>Type</code> is not an inductive type, is it? So I would have thought it would also have <code>sizeof</code> always zero</p>",
        "id": 168308898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560777174
    },
    {
        "content": "<p>Is 2 counting the two things <code>list</code> and <code>real</code> in <code>list real</code>?</p>",
        "id": 168308932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560777187
    },
    {
        "content": "<p>For some reason <code>sizeof []</code> is <code>1</code> not <code>0</code></p>",
        "id": 168309230,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560777423
    },
    {
        "content": "<p>I wouldn't say <code>sizeof</code> is an implementation detail. If you want to do induction over a mutual or nested inductive, you'll want to use it as the measure, and you'll need to do proofs about it. You could define your own measure, but it would not be drastically different from the synthesized one.</p>",
        "id": 168309263,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560777453
    },
    {
        "content": "<p>If you never do that, you don't have to care about <code>sizeof</code>, of course.</p>",
        "id": 168309275,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560777467
    },
    {
        "content": "<p>But usually I already have theorems about things like <code>list.sum</code> or <code>list.length</code>, but nothing about <code>list.sizeof</code>. These are also nicer definitions to prove things about since they're standard maths definitions, starting at <code>1</code> for <code>[]</code> is a bit odd. Also I guess the general definition of <code>sizeof</code> isn't published anywhere, so people aren't going to use it.</p>",
        "id": 168309664,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560777750
    },
    {
        "content": "<p>Oh I got fooled by Haskell. <code>[real]</code> is not <code>list real</code></p>",
        "id": 168309833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560777891
    },
    {
        "content": "<p><code>sizeof</code> only works for well orders that have ordinal height &lt;= omega, so it doesn't work for things like lex order on nat x nat</p>",
        "id": 168342714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560801766
    },
    {
        "content": "<p>The advice I give is to avoid it in any manual proof. If lean can use it to completely automate your wf recursion then that's great, but it's basically never the best wf relation for the job</p>",
        "id": 168342795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560801838
    },
    {
        "content": "<p>I guess that's not <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's advice</p>",
        "id": 168343337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560802249
    },
    {
        "content": "<p>I still don't see what other measure you would use on a rose tree-like data type, or why</p>",
        "id": 168346572,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560804866
    },
    {
        "content": "<p>you probably don't want to get the structure of the elements involved in a rose tree</p>",
        "id": 168347247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560805390
    },
    {
        "content": "<p>something like total size would work pretty well</p>",
        "id": 168347266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560805414
    },
    {
        "content": "<p>I don't think I want to consider [162] bigger than [0, [1, 1], 0]</p>",
        "id": 168347358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560805477
    },
    {
        "content": "<p>For the purpose of proving well-foundedness of recursions over the tree, the size of a leaf does not matter. Daniel(?) could have chosen to ignore them when synthesizing <code>sizeof</code>, but I assume it was easier to just sum up all parameters, without no apparent downside.</p>",
        "id": 168376536,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560843301
    },
    {
        "content": "<p>I think it is important to have them in the instances for sizeof so that the size passes through nested inductives (i.e. you wouldn't get the right answer with nested inductives like <code>list (list T) -&gt; T</code> unless the size of the inner list was represented in the size of the outer list), but it is otherwise undesirable to have parameters be counted in the size. I have had examples where this actually prevents some constructions; for example if you map a rose tree then the \"size\" should not change, but that's not true if the size of elements matter</p>",
        "id": 168377421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560844316
    },
    {
        "content": "<p>Ah, you want do a structure-preserving map over the children before recursing into them... in that case <code>sizeof</code> may not work and one should define their own measure, yes. But if this is not the case, I would still default to <code>sizeof</code>, personally.</p>",
        "id": 168381401,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1560848075
    }
]