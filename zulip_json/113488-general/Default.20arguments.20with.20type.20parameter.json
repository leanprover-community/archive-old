[
    {
        "content": "<p>I've got a (honest, in-a-program) function</p>\n<div class=\"codehilite\"><pre><span></span>def do_some_stuff {α : Type} (cfg : config α) := xxx\n</pre></div>\n\n\n<p>In an ideal world, I'd like to be able to have a default <code>config</code>, with a fixed parameter <code>α</code> (obviously), so I could write <code>do_some_stuff</code> and everything would work great. I guess I want to be able to write (and compile)</p>\n<div class=\"codehilite\"><pre><span></span>def default_config : config string := xxx\ndef do_some_stuff {α : Type} (cfg : config α := default_config) := xxx\n</pre></div>\n\n\n<p>with that having the meaning that if <code>cfg</code> is omitted, the type <code>α</code> is forced to be <code>string</code>.</p>\n<p>I see that I might be \"fighting the system\". What do you think is the best way to emulate this kind of option-passing interface?</p>",
        "id": 132355082,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1534588962
    },
    {
        "content": "<p>This comes up in core lean in some of the structures, where you have to give <code>A</code> such that <code>A = B</code>, and the proof of <code>A = B</code> is <code>rfl</code> but this only works if <code>A</code> is <code>B</code>. You can set this up using auto params instead of opt params:</p>\n<div class=\"codehilite\"><pre><span></span>def config : Type → Type := sorry\ndef default_config : config string := sorry\nmeta def default_config_tac : tactic unit := `[exact default_config]\ndef do_some_stuff {α : Type} (cfg : config α . default_config_tac) : α := sorry\n\nexample : string := do_some_stuff -- ok\nexample : nat := do_some_stuff (sorry : config ℕ) -- ok\nexample : nat := do_some_stuff -- error\n</pre></div>",
        "id": 132357334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534593052
    },
    {
        "content": "<p>Thanks so much Mario. Do you know where I could read about the auto params \".\" period syntax?</p>",
        "id": 132357505,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1534593371
    },
    {
        "content": "<p>It might be in the reference manual? It's very simple. You can only put a name of a def of a <code>tactic unit</code> there, and it gets called when the argument is not supplied</p>",
        "id": 132357514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534593432
    },
    {
        "content": "<p>I wish it would accept an expression so you could write a tactic inline there, but alas</p>",
        "id": 132357522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534593466
    },
    {
        "content": "<p>ok sweet! cheers!</p>",
        "id": 132357563,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1534593487
    },
    {
        "content": "<p>(actually there is a good reason you can't write a tactic inline, since that would be <code>meta</code>)</p>",
        "id": 132357567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534593506
    }
]