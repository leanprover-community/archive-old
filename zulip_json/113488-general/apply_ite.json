[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- How is this not in mathlib?!</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_ite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>\n\n\n<p>Is this already somewhere in mathlib? If not, can I put it in <code>logic/basic.lean</code>?</p>",
        "id": 202052459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593146687
    },
    {
        "content": "<p>Surely there is some existing colloquial way to push a function inside an <code>if</code>...?</p>",
        "id": 202052467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593146730
    },
    {
        "content": "<p>Sounds like a good idea!</p>",
        "id": 202053785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593148731
    },
    {
        "content": "<p>Naive naming question: is this really \"apply\"? In the \"applicative functor\" sense, \"apply\" has the signature <code>F (A -&gt; B) -&gt; F A -&gt; F B</code>, which is the first thing I think of. My guess would have been something like \"interchange\".</p>",
        "id": 202054143,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593149316
    },
    {
        "content": "<p>in mathlib apply means applying a function to an input</p>",
        "id": 202054816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593150269
    },
    {
        "content": "<p>We probably also wants its friend:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ite_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 202057662,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593154357
    },
    {
        "content": "<p>all in mathlib now, part of <a href=\"https://github.com/leanprover-community/mathlib/issues/3177\">#3177</a></p>",
        "id": 202082198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593173814
    },
    {
        "content": "<p>I don't think it will behave well with <code>simp</code> and <code>rw</code> because the outer function on the lhs is a variable</p>",
        "id": 202207327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593295951
    },
    {
        "content": "<p>Yes. To use it you need to write <code>simp [ite_apply _ f]</code>, etc. Maybe I should add a doc-string to that effect.</p>",
        "id": 202211247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593303110
    },
    {
        "content": "<p>Could it be worth having a specialized version of <code>rw</code> to make it more usable?</p>",
        "id": 202211291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593303178
    },
    {
        "content": "<p>Sounds interesting!</p>",
        "id": 202211497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593303564
    },
    {
        "content": "<p>I'd start it with <code>generalize h : ite _ _ _ = x</code></p>",
        "id": 202211504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1593303593
    },
    {
        "content": "<p>Could we possibly do something much more general? That is not <code>ite</code> specific in any way, but just tries to do rewriting even without being able to key on the head symbol (because it could be a metavariable).</p>",
        "id": 202211700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593303928
    }
]