[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">F</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">xyzzy</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">xyzzy</span>\n<span class=\"c1\">-- xyzzy : ∀ (n : ℕ), fin n = fin n</span>\n</code></pre></div>",
        "id": 210626345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600537408
    },
    {
        "content": "<p>I am more surprised when this works than when it fails</p>",
        "id": 210626514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537682
    },
    {
        "content": "<p>like what are you expecting to happen here?</p>",
        "id": 210626556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537699
    },
    {
        "content": "<p>somehow you have to take an arbitrary expression and notice all the ways it could be interpreted as an instantiation of a local notation expression</p>",
        "id": 210626576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537748
    },
    {
        "content": "<p>it seems like a pretty expensive prospect</p>",
        "id": 210626580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537760
    },
    {
        "content": "<p>I think the question is why <code>n</code> is explicit in <code>xyzzy</code>.</p>",
        "id": 210626591,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600537789
    },
    {
        "content": "<p>aha, that opens up so many more questions</p>",
        "id": 210626641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537844
    },
    {
        "content": "<p>like what does the <code>n</code> in the local notation refer to?</p>",
        "id": 210626644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537857
    },
    {
        "content": "<p>local notations don't have a context</p>",
        "id": 210626650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600537870
    },
    {
        "content": "<p>Shouldn't it just unfold the notation, and then do what it usually does?</p>",
        "id": 210627733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600539406
    },
    {
        "content": "<p>We've been using this a lot in the Witt vector project. <code>\\bbW R</code> is notation for <code>witt_vector p R</code>. You've fixed <code>p</code> once and forall, so you really don't want to be typing it all the time.</p>",
        "id": 210627838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600539544
    },
    {
        "content": "<p>But then, for some lemmas, it is clear that you might want to vary the binding on <code>p</code>.</p>",
        "id": 210627865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600539583
    },
    {
        "content": "<p>You can't use parameters to do the p thing?</p>",
        "id": 210628575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540384
    },
    {
        "content": "<p>parameters are a lean 3.4.2 thing right? As in, lean 3.5.* should help us move towards lean 4 which doesn't have parameters.</p>",
        "id": 210628645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600540448
    },
    {
        "content": "<p>Have you talked to Sebastian about whether this will still be an issue in Lean 4?</p>",
        "id": 210629007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540907
    },
    {
        "content": "<p>Nope</p>",
        "id": 210629067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600540948
    },
    {
        "content": "<p>I think you shouldn't avoid using parameters if this is the only reason</p>",
        "id": 210646833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600571840
    },
    {
        "content": "<p>We will have the flexibility to work something out in lean 4</p>",
        "id": 210646839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600571860
    },
    {
        "content": "<p>if parameters continue to fill a useful role we should find a way to emulate them or get their principal benefits by other means</p>",
        "id": 210646893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600571916
    }
]