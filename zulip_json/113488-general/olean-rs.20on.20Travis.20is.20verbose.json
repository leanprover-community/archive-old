[
    {
        "content": "<p>Currently the Travis log is very verbose when it starts checking that dependencies are minimal: <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527147591\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527147591\">https://travis-ci.org/leanprover-community/mathlib/jobs/527147591</a><br>\nDo we want this, or should we instruct the Makefile to be a bit more silent?</p>",
        "id": 164688779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556784817
    },
    {
        "content": "<p>Does it matter?</p>",
        "id": 164702772,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556799809
    },
    {
        "content": "<p>Well... it means you have to scroll down a long time before you see the error. But I guess that's why there is an <code>End</code> key on my keyboard <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 164703026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556799976
    },
    {
        "content": "<p>Same topic, different question: <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can we make the output more helpful? <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527258584\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527258584\">https://travis-ci.org/leanprover-community/mathlib/jobs/527258584</a></p>",
        "id": 164703155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556800121
    },
    {
        "content": "<p>Travis is complaining that the import is unused. But it is the only import, so I surely can't just remove it. Can the script explain what is the \"correct\" set of imports?</p>",
        "id": 164703185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556800157
    },
    {
        "content": "<p>I feel like a lot of PRs are going to stumble over this new check, unless we provide people with the tools to quickly fix their imports to the required minimum.</p>",
        "id": 164703215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556800201
    },
    {
        "content": "<p>I have that feature, it's not released yet but I can release it</p>",
        "id": 164703315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556800241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Does releasing it mean that Travis automatically picks it up?</p>",
        "id": 164704636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556801359
    },
    {
        "content": "<p>It does but I haven't tested it yet so I have to do that first</p>",
        "id": 164704734,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556801411
    },
    {
        "content": "<p>Check out <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527258584\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527258584\">https://travis-ci.org/leanprover-community/mathlib/jobs/527258584</a></p>",
        "id": 164728340,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556818787
    },
    {
        "content": "<p>If you install <code>olean-rs</code> locally, you can run the test before committing. I set it up to make it easier to check and recheck if you fix anything</p>",
        "id": 164728448,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556818856
    },
    {
        "content": "<p>I can confirm this works nicely now!</p>",
        "id": 164782708,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556878526
    },
    {
        "content": "<p>Actually, sometimes it suggests too much. e.g. <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527683532\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527683532\">https://travis-ci.org/leanprover-community/mathlib/jobs/527683532</a> told me</p>\n<div class=\"codehilite\"><pre><span></span>* unused imports for algebraic_geometry.presheaf\ncategory_theory.natural_isomorphism\n  - replace with\n       import category_theory.functor_category\n              category_theory.isomorphism\n              tactic.simpa\n</pre></div>\n\n\n<p>but in fact none of those three was necessary (presumably because they are already implied by other existing imports)</p>",
        "id": 164784907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556881201
    },
    {
        "content": "<p>I think overall I <em>don't</em> like this as a travis test.</p>",
        "id": 164785066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556881330
    },
    {
        "content": "<p>The PR process is already soul-crushing, and having yet another potential hiccup in the hours long process of waiting until travis is happy is just unbearable.</p>",
        "id": 164785074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556881365
    },
    {
        "content": "<p>I would prefer that we just run <code>olean-rs</code> every couple of months and make a single PR with lots of import fixing.</p>",
        "id": 164785095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556881402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think this one at least needs more testing. Can we disable it?</p>",
        "id": 164785100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556881417
    },
    {
        "content": "<blockquote>\n<p>I would prefer that we just run <code>olean-rs</code> every couple of months and make a single PR with lots of import fixing.</p>\n</blockquote>\n<p>This PR could potentially even be scriptable, right? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 164785155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556881455
    },
    {
        "content": "<p>Yeah... I've just sat through a 45 minute build in order to see a second error message from olean-rs. This step in the PR process basically makes it compulsory for all PR authors to install a local copy of olean-rs, which is not okay.</p>",
        "id": 164786058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556882576
    },
    {
        "content": "<p>import optimization on every commit is silly</p>",
        "id": 164786444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883108
    },
    {
        "content": "<p>I wouldn't write \"silly\", but it certainly sounds like an unconvenient overkill</p>",
        "id": 164786514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883156
    },
    {
        "content": "<p>Maybe it would be okay if it was an automatic cleanup, but travis just saying \"you weren't optimal, so you lose\" is a recipe for stress</p>",
        "id": 164786529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know how to disable the test?</p>",
        "id": 164786622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883279
    },
    {
        "content": "<p>just restore the travis.yml to what it was before Simon added the test?</p>",
        "id": 164786658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883322
    },
    {
        "content": "<p>Should I try to do that?</p>",
        "id": 164786668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883344
    },
    {
        "content": "<p>There are other linter warnings we might want to run, but the import test is the only one that's implemented so far</p>",
        "id": 164786671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883360
    },
    {
        "content": "<p>and it's not worth interrupting someone's workflow for that</p>",
        "id": 164786729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883395
    },
    {
        "content": "<p>stuff like indentation would be a better test</p>",
        "id": 164786735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883411
    },
    {
        "content": "<p>I guess we need to remove these 4 lines <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L57-L60\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L57-L60\">https://github.com/leanprover-community/mathlib/blob/master/.travis.yml#L57-L60</a></p>",
        "id": 164786747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/973\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/973\">#973</a></p>",
        "id": 164786839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should we just merge this? Or should this go through Travis + Mergify?</p>",
        "id": 164786848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883532
    },
    {
        "content": "<p>you should usually test travis changes first, let it run</p>",
        "id": 164786876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883581
    },
    {
        "content": "<p>I would even had instructed Travis to keep away from this commit (using <code>[ci skip]</code> in the commit message)</p>",
        "id": 164786880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883591
    },
    {
        "content": "<p>Travis could feel we are rebelling, and reject the commit</p>",
        "id": 164786931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883616
    },
    {
        "content": "<p>isn't it <code>[ci-skip]</code>?</p>",
        "id": 164786932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556883618
    },
    {
        "content": "<p>Next time I'll add both (-;</p>",
        "id": 164786947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556883648
    },
    {
        "content": "<p><a href=\"https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build\" target=\"_blank\" title=\"https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build\">https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build</a></p>",
        "id": 164786966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883679
    },
    {
        "content": "<p>no dash</p>",
        "id": 164786967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883681
    },
    {
        "content": "<p>Maybe you are confused because <code>[travis-ci skip]</code> is a thing</p>",
        "id": 164787032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556883741
    },
    {
        "content": "<p>I also just got an error message that <code>make unused</code> took longer than 10 minutes: <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527719987\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/527719987\">https://travis-ci.org/leanprover-community/mathlib/jobs/527719987</a></p>",
        "id": 164787323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1556884054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does Travis use the <code>.travis.yml</code> of the branch or of master?</p>",
        "id": 164788845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556885714
    },
    {
        "content": "<p>It would be quite unsafe to use the config from the PR branch...</p>",
        "id": 164788963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556885863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Your life should now be a bit easier again. I've disabled those checks on Travis.</p>",
        "id": 164793358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556889906
    },
    {
        "content": "<p>I'm not happy about disabling this check</p>",
        "id": 164808270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556900966
    },
    {
        "content": "<p>If you run <code>olean-rs</code> on your machine, you can catch those problems. If you don't run it, the back and forth with Travis should catch those issues.</p>",
        "id": 164808377,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556901036
    },
    {
        "content": "<p>Otherwise, it becomes someone's job to fix your messes</p>",
        "id": 164808393,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556901052
    },
    {
        "content": "<p>It's easy to fix the timeout issue. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Would it make things better if the problem was reported as soon as the file was built? That's easy to do.</p>",
        "id": 164810253,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556902382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> We will need better instructions for PR authors. Most of them haven't even heard of <code>olean-rs</code>. Also... Scott reported false positives by <code>olean-rs</code>. I think that justifies disabling the checks for now. Moreover, if <code>olean-rs</code> could output a <code>sed</code>-script that will automatically fix all my imports, than it's really easy to use. The manual-iterative process is not a good thing.</p>",
        "id": 164811442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556903192
    },
    {
        "content": "<p>The back-and-forth with Travis takes &gt;40 minutes per cycle. That isn't realistically workable.</p>",
        "id": 164811491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556903235
    },
    {
        "content": "<p>I could get <code>script/setup-dev-scripts.py</code> to install <code>olean-rs</code> (and maybe we could rename it to <code>leant</code>)</p>",
        "id": 164812543,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556904030
    },
    {
        "content": "<p>As for automatically applying the changes, we're not there yet. It would be an improvement but it is not necessary</p>",
        "id": 164812570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556904057
    },
    {
        "content": "<p>What we can do is get the errors to reported earlier in the build. With travis caching the build, the first file it compiles should be one you changed and we should check it right away so that the build fails quickly if you messed up</p>",
        "id": 164812719,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556904147
    },
    {
        "content": "<p>If you don't want to wait for travis to do it, you can do it on your own machine and we can make it easy to install</p>",
        "id": 164812774,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556904207
    },
    {
        "content": "<p>We first need to make it easy to install and use. And we need Travis to fail fast. After that, we can enable the check. Currently the community wasn't ready for this check yet.</p>",
        "id": 164813059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556904422
    },
    {
        "content": "<p>Ok, I'll work on that</p>",
        "id": 164813444,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556904674
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 164813475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556904701
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164814021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556905114
    },
    {
        "content": "<p>How do you guys feel about having <code>olean-rs</code> identify unused lemmas? I'm thinking of having options to declare that some theorems or lemmas are necessary or even whole files</p>",
        "id": 164831426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556918457
    },
    {
        "content": "<p>what about endpoint theorems? What is necessary by fiat?</p>",
        "id": 164831741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556918763
    },
    {
        "content": "<p>mathlib has a lot of endpoint theorems because it's a library</p>",
        "id": 164831798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556918807
    },
    {
        "content": "<p>For sure. And there may be a concise way of specifying them</p>",
        "id": 164832544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556919599
    },
    {
        "content": "<p>that sounds like a lot of labeling. Almost all theorems in mathlib are endpoint theorems, to the extent that you will end up transferring the work to management of the annotations</p>",
        "id": 164832839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556919873
    },
    {
        "content": "<p>Are you sure? When you set off to prove a theorem, do you mostly use the other big theorems that you or other people proved before or the tiny lemmas that surround the definitions that you're using? I feel like the latter is the case</p>",
        "id": 164833076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920147
    },
    {
        "content": "<p>right, that's my point</p>",
        "id": 164833145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920204
    },
    {
        "content": "<p>the tiny lemmas are just as important if not moreso than the big theorems</p>",
        "id": 164833163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920224
    },
    {
        "content": "<p>It might be good to have a list of theorems that are never referenced, but I don't think we will need to do anything about most of them</p>",
        "id": 164833281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920331
    },
    {
        "content": "<p>What information would you get from that list?</p>",
        "id": 164833305,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920373
    },
    {
        "content": "<p>you could look at the list and find things that really are internal lemmas, but they don't stick out in any particular way</p>",
        "id": 164833357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920422
    },
    {
        "content": "<p>Way back at the start of mathlib I tried to institute the convention that all theorems are called theorems, but then all the mathematicians got involved and want to call these tiny theorems lemmas instead</p>",
        "id": 164833453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920493
    },
    {
        "content": "<p>What difference did it make?</p>",
        "id": 164833494,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920556
    },
    {
        "content": "<p>Huh? No difference, lean doesn't care</p>",
        "id": 164833546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920575
    },
    {
        "content": "<p>but I don't like meaningless distinctions and there is a bit of information there that is going to waste</p>",
        "id": 164833563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920601
    },
    {
        "content": "<p>But presumably, you had a reason to want to adopt that convention</p>",
        "id": 164833564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920602
    },
    {
        "content": "<p>The rule was that everything is a theorem, unless it is private then it is a lemma</p>",
        "id": 164833573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920621
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 164833586,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920630
    },
    {
        "content": "<p>It was my attempt at labeling endpoint theorems, like I said, everything is an endpoint theorem in mathlib</p>",
        "id": 164833604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920662
    },
    {
        "content": "<p>we could pick that convention up again</p>",
        "id": 164833658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920686
    },
    {
        "content": "<p>Would you go so far as to say that there's no such thing as dead code in mathlib?</p>",
        "id": 164833679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556920722
    },
    {
        "content": "<p>Since lean does not provide any facilities to hide stuff, anything in mathlib is observable</p>",
        "id": 164833776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920767
    },
    {
        "content": "<p>But mathlib changes often and some things are more stable than others</p>",
        "id": 164833790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920785
    },
    {
        "content": "<p>I try to reliably name my actual lemmas <code>*_aux</code></p>",
        "id": 164833916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920871
    },
    {
        "content": "<p>In principle I should mark them <code>private</code> too but because lean kernel has no built in support for privacy lean elaborator has to do tricks with namespaces that sometimes leak</p>",
        "id": 164834010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556920967
    },
    {
        "content": "<p>I don't suppose finding unused <code>_aux</code> definitions / lemmas is that useful for code review</p>",
        "id": 164834106,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921048
    },
    {
        "content": "<p>However, marking a theorem or def <code>private</code> is a drastic measure, and many times I have found that I want to access that private thing later, so I tend to err on the side of making everything public these days</p>",
        "id": 164834123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921077
    },
    {
        "content": "<p>I'm in the same boat.</p>",
        "id": 164834149,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921109
    },
    {
        "content": "<p>I never find that something should be private and often find that they shouldn't be</p>",
        "id": 164834156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921125
    },
    {
        "content": "<p>Actually, I'd be perfectly fine if Lean didn't have a <code>private</code> mechanism</p>",
        "id": 164834236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921217
    },
    {
        "content": "<p>I don't think it really does</p>",
        "id": 164834258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921253
    },
    {
        "content": "<p>It does not hide things completely but it does end up that we don't use private stuff from other modules.</p>",
        "id": 164834317,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921301
    },
    {
        "content": "<p>How about this: marking something as <code>lemma</code> means it is eligible for cleanup if nothing references it</p>",
        "id": 164834339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921342
    },
    {
        "content": "<p>forget <code>private</code></p>",
        "id": 164834355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921361
    },
    {
        "content": "<p>That's reasonable</p>",
        "id": 164834358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921365
    },
    {
        "content": "<p>The problem for automation is that lemma vs theorem does not make it to <code>olean</code> files. I think I have to start looking at the <code>lean</code> files to find issues with PRs</p>",
        "id": 164834431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921415
    },
    {
        "content": "<p><code>olean-rs</code> should be able to do this much</p>",
        "id": 164834448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921439
    },
    {
        "content": "<p>Actually, maybe I can use the <code>olean</code> files to enforce naming policies</p>",
        "id": 164834450,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921444
    },
    {
        "content": "<p>To do how much?</p>",
        "id": 164834463,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921465
    },
    {
        "content": "<p>the experimental lean parser doesn't know that much but it knows command keywords so it can tell what the lemmas are</p>",
        "id": 164834474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921485
    },
    {
        "content": "<p>But this also has to be paired with some community norm changes re: random use of <code>lemma</code> vs <code>theorem</code></p>",
        "id": 164834545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921536
    },
    {
        "content": "<p>That makes sense. We can also couple this kind of check with looking for definitions that are not referenced by other definitions or theorems / lemmas</p>",
        "id": 164834593,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921600
    },
    {
        "content": "<p>Definitions are harder to clean up. Again, almost every <code>def</code> is expected to be used possibly outside mathlib</p>",
        "id": 164834710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921729
    },
    {
        "content": "<p>I don't think there is a better option than checking for use of <code>*_aux</code></p>",
        "id": 164834719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556921755
    },
    {
        "content": "<p>How does that make things better?</p>",
        "id": 164834800,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556921856
    },
    {
        "content": "<p>We could consider definitions to be end-points and report errors if they don't have specifications</p>",
        "id": 164835173,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556922214
    }
]