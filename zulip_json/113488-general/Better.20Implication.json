[
    {
        "content": "<p>I can write <code>if h:cnd then aa else bb</code>.<br>\nInside each breach, I have access to <code>h</code>.<br>\nSuppose I only want to write something like <code>h:cnd → aa</code> (<code>else</code> branch is <code>true</code>).<br>\nIs there anyway to do this without writing <code>if h:cnd then aa else true</code>?<br>\nThe similar question is for <code>h:cnd ∧ aa</code>.<br>\nI rather not use <code>∀h:cnd, aa</code>, since if I have <code>cnd</code> or its complement in local hypotheses, <code>simp</code> does not simplify.</p>",
        "id": 125287484,
        "sender_full_name": "Nima",
        "timestamp": 1524111624
    },
    {
        "content": "<p>just write <code>cnd -&gt; aa</code>?</p>",
        "id": 125287490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524111651
    },
    {
        "content": "<p>I want to use <code>h</code> in RHS</p>",
        "id": 125287549,
        "sender_full_name": "Nima",
        "timestamp": 1524111771
    },
    {
        "content": "<p>Here is an example (please ignore the actual definitions, just the usage),</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- some function that takes an input and requires something to be true about that input</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"c1\">-- for any `a` in the domain of `exp`, we have some property</span>\n</pre></div>",
        "id": 125287801,
        "sender_full_name": "Nima",
        "timestamp": 1524112225
    },
    {
        "content": "<p>the \"standard\" approach in mathlib is to define the function without assuming the condition, and prove the theorems assuming the condition</p>",
        "id": 125287816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524112303
    },
    {
        "content": "<p>i.e. don't make the condition one of the arguments to the function</p>",
        "id": 125287820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524112311
    },
    {
        "content": "<p>Not sure that is what I wanted. For example, I can always use <code>if then else</code>, but then one branch is always useless. I was looking for a solution to this problem, not erasing it. ;)</p>",
        "id": 125287938,
        "sender_full_name": "Nima",
        "timestamp": 1524112465
    },
    {
        "content": "<p>I don't recommend using <code>if then else</code> at all</p>",
        "id": 125287961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524112517
    },
    {
        "content": "<p>You should use <code>∀h:cnd, aa</code> in this case</p>",
        "id": 125288045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524112669
    },
    {
        "content": "<p>Well, <code>simp</code> does not handle <code>∀h:cnd, aa</code> when I have <code>h:cnd</code> in local hypotheses. Right? Any other way, to automatically simplify <code>∀h:cnd, aa</code> (this will be more serious when the quantification is part of a bigger condition)</p>",
        "id": 125288152,
        "sender_full_name": "Nima",
        "timestamp": 1524112860
    },
    {
        "content": "<p><code>specialize</code></p>",
        "id": 125288268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524113156
    },
    {
        "content": "<p>I see. Tell me whether these simp lemmas work in your use-case:</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] theorem forall_prop_of_true {p : Prop} {q : p → Prop} (h : p) : (∀ h&#39; : p, q h&#39;) ↔ q h :=\n@forall_const (q h) p ⟨h⟩\n\n@[simp] theorem exists_prop_of_true {p : Prop} {q : p → Prop} (h : p) : (∃ h&#39; : p, q h&#39;) ↔ q h :=\n@exists_const (q h) p ⟨h⟩\n\n@[simp] theorem forall_prop_of_false {p : Prop} {q : p → Prop} (hn : ¬ p) : (∀ h&#39; : p, q h&#39;) ↔ true :=\niff_true_intro $ λ h, hn.elim h\n\n@[simp] theorem exists_prop_of_false {p : Prop} {q : p → Prop} : ¬ p → ¬ (∃ h&#39; : p, q h&#39;) :=\nmt Exists.fst\n</pre></div>",
        "id": 125288534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524113646
    },
    {
        "content": "<p>But I will remark that this situation is rather rare in mathlib, because we try to avoid partial functions, which tend to make rewriting difficult. From the code you've shown here before, you seem to prefer partial functions</p>",
        "id": 125288622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524113831
    },
    {
        "content": "<p>Thank you, they help.<br>\nDid you just wrote them?<br>\nAlso, the last one does not type check.</p>",
        "id": 125288748,
        "sender_full_name": "Nima",
        "timestamp": 1524114072
    },
    {
        "content": "<p>Yes I did. For the last one you should have <code>logic.basic</code> imported</p>",
        "id": 125289030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524114530
    },
    {
        "content": "<p>I haven't done anything about code generation. But what I have in mind is a type that take parameters and has different fields based on values of those parameters. In C++, I can easily use template to have those fields defined based on the input template arguments. In Lean, I am trying to have the same effect, by making sure that every time I am reading a field, it is defined.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">constraint</span>\n          <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">trvk</span> <span class=\"o\">:</span> <span class=\"n\">triviality_kind</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">dirk</span> <span class=\"o\">:</span> <span class=\"n\">direction_kind</span> <span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">strk</span> <span class=\"o\">:</span> <span class=\"n\">strictness_kind</span><span class=\"o\">)</span>\n          <span class=\"o\">:=</span>\n<span class=\"n\">cnstr</span> <span class=\"bp\">::</span>\n  <span class=\"o\">(</span><span class=\"n\">tri</span> <span class=\"o\">:</span> <span class=\"n\">trvk</span> <span class=\"bp\">=</span> <span class=\"n\">triviality_kind</span><span class=\"bp\">.</span><span class=\"n\">kdyn</span> <span class=\"bp\">→</span> <span class=\"n\">triviality</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">strk</span> <span class=\"bp\">=</span> <span class=\"n\">strictness_kind</span><span class=\"bp\">.</span><span class=\"n\">kdyn</span> <span class=\"bp\">→</span> <span class=\"n\">strictness</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bnd</span> <span class=\"o\">:</span> <span class=\"n\">trvk</span> <span class=\"bp\">≠</span> <span class=\"n\">triviality_kind</span><span class=\"bp\">.</span><span class=\"n\">ktrv</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>         <span class=\"o\">)</span>\n</pre></div>",
        "id": 125289044,
        "sender_full_name": "Nima",
        "timestamp": 1524114577
    },
    {
        "content": "<p>(I'm assuming the reason it doesn't typecheck is because it says <code>Exists.fst</code> can't be found; that's a hint.)</p>",
        "id": 125289117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524114699
    },
    {
        "content": "<p>I would suggest using an inductive type to encode these constraints</p>",
        "id": 125289180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524114809
    },
    {
        "content": "<p>I think it will be easier for you to return a default value when you can, and an option when there is no reasonable default, to totalize your functions. If you are going for efficiency, this won't achieve it anyway due to thunk generation</p>",
        "id": 125289239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524114924
    },
    {
        "content": "<p>Could you link to your files where you define these <code>triviality_kind</code> etc? Let me make a mockup</p>",
        "id": 125289284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524114998
    },
    {
        "content": "<p>I used that first, but it has its own problem.<br>\nFor example, suppose I have two constraints and I want to add them.<br>\nBut not only I want to define addition for constraints with the same type parameters, but also in case the result cannot be represented by a constraint, I want to return a smallest representable constraint that is of the right type. If I push everything inside one inductive type, then I have to put extra condition on the signature of addition (or I don't know how else I can do it).<br>\n<a href=\"https://github.com/nima-roohi/lets-learn-some-lean\" target=\"_blank\" title=\"https://github.com/nima-roohi/lets-learn-some-lean\">https://github.com/nima-roohi/lets-learn-some-lean</a></p>",
        "id": 125289353,
        "sender_full_name": "Nima",
        "timestamp": 1524115198
    },
    {
        "content": "<p>What does adding constraints mean here? If I understand your model correctly, you want to be able to represent the sets <code>true</code>, <code>{x | x R a}</code>, and <code>{x | a R x}</code> where <code>R</code> is <code>&lt;=</code> or <code>&lt;</code>. Does adding the sets mean all pointwise additions, i.e. <code>{x + y | x \\in c1, y \\in c2}</code>, or the intersection / union of constraints or something else?</p>",
        "id": 125289504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524115474
    },
    {
        "content": "<p><code>addition</code> is just an example. You can assume pointwise addition as you defined.<br>\nIf <code>α</code> is, for example, <code>float</code> then even addition of two constraints cannot always be represented by a constraint.</p>",
        "id": 125289557,
        "sender_full_name": "Nima",
        "timestamp": 1524115610
    },
    {
        "content": "<p>Is there anyway I can change this <code>notation</code> so the example will work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span>  <span class=\"n\">c</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`→`</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">h</span> <span class=\"k\">then</span> <span class=\"n\">hh</span> <span class=\"k\">else</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">&gt;</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span><span class=\"bp\">&gt;</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125289665,
        "sender_full_name": "Nima",
        "timestamp": 1524115895
    },
    {
        "content": "<p>Here's more or less what I'm thinking:</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.ordered_group\n\ninductive constraint (α : Type*)\n| triv {} : constraint\n| le : α → constraint\n| lt : α → constraint\n| ge : α → constraint\n| gt : α → constraint\n\nnamespace constraint\n\ndef is_trivial {α} : constraint α → bool\n| constraint.triv := tt\n| _ := ff\n\ndef get_bound {α} : constraint α → option α\n| constraint.triv := none\n| (constraint.le a) := some a\n| (constraint.lt a) := some a\n| (constraint.ge a) := some a\n| (constraint.gt a) := some a\n--add others to taste, but you shouldn&#39;t need them\n\nprotected def mem {α} [preorder α] (x : α) : constraint α → Prop\n| constraint.triv := true\n| (constraint.le a) := a ≤ x\n| (constraint.lt a) := a &lt; x\n| (constraint.ge a) := x ≤ a\n| (constraint.gt a) := x &lt; a\n\ninstance {α} [preorder α] : has_mem α (constraint α) := ⟨constraint.mem⟩\n\nprotected def add {α} [ordered_comm_group α] : constraint α → constraint α → constraint α\n| constraint.triv c2 := c2\n| c1 constraint.triv := c1\n| (constraint.le a) (constraint.le b) := constraint.le (a + b)\n| (constraint.le a) (constraint.lt b) := constraint.lt (a + b)\n| (constraint.lt a) (constraint.le b) := constraint.lt (a + b)\n| (constraint.lt a) (constraint.lt b) := constraint.lt (a + b)\n| (constraint.ge a) (constraint.ge b) := constraint.ge (a + b)\n| (constraint.ge a) (constraint.gt b) := constraint.gt (a + b)\n| (constraint.gt a) (constraint.ge b) := constraint.gt (a + b)\n| (constraint.gt a) (constraint.gt b) := constraint.gt (a + b)\n| _ _ := constraint.triv\n\ninstance {α} [ordered_comm_group α] : has_add (constraint α) := ⟨constraint.add⟩\n\nend constraint\n</pre></div>",
        "id": 125289768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116147
    },
    {
        "content": "<p>You can't define the arrow and colon as notations; they are reserved for function types</p>",
        "id": 125289820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116255
    },
    {
        "content": "<p>I see what you mean by making a function total.<br>\nMay be that makes things easier.<br>\nBut I am not sure about performance of the result code.<br>\nAlso, in your definition you only have one <code>le</code>, but I have two of them (dynamic vs static). So if every time I have to write all the cases, that might be a problem itself.</p>",
        "id": 125290011,
        "sender_full_name": "Nima",
        "timestamp": 1524116635
    },
    {
        "content": "<p>Okay, version 2:</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.ordered_group\n\ninductive direction | lower | upper\n\ninductive constraint (α : Type*)\n| triv {} : constraint\n| mk (dir : direction) (strict : bool) (dynamic : bool) (bound : α) : constraint\n\nnamespace constraint\nopen direction\n\ndef is_trivial {α} : constraint α → bool\n| triv := tt\n| _ := ff\n\ndef get_bound {α} : constraint α → option α\n| triv := none\n| (mk a s d b) := some b\n\nprotected def mem {α} [preorder α] (x : α) : constraint α → Prop\n| triv := true\n| (mk lower ff d a) := a ≤ x\n| (mk lower tt d a) := a &lt; x\n| (mk upper ff d a) := x ≤ a\n| (mk upper tt d a) := x &lt; a\n\ninstance {α} [preorder α] : has_mem α (constraint α) := ⟨constraint.mem⟩\n\nprotected def add {α} [ordered_comm_group α] : constraint α → constraint α → constraint α\n| (mk lower s1 d1 a) (mk lower s2 d2 b) := mk lower (s1 || s2) (d1 || d2) (a + b)\n| (mk upper s1 d1 a) (mk upper s2 d2 b) := mk upper (s1 || s2) (d1 || d2) (a + b)\n| _ _ := constraint.triv\n\ninstance {α} [ordered_comm_group α] : has_add (constraint α) := ⟨constraint.add⟩\n\nend constraint\n</pre></div>",
        "id": 125290452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524117510
    },
    {
        "content": "<p>Thank you.<br>\nI guess the biggest difference between what you wrote and what I have is that, assuming we are defining the same concept, in my definition when <code>dynamic</code> is <code>ff</code> then there is no field named <code>strict</code> (at least intuitively). If I preserve that restriction throughout my definition, (I hope) that transforming these into a code would be easier, at least when I do it manually!!</p>",
        "id": 125290742,
        "sender_full_name": "Nima",
        "timestamp": 1524118193
    },
    {
        "content": "<p>I'm making up stuff as I go along re: the actual semantics, but I assume it looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.ordered_group\n\ninductive direction | lower | upper\ninductive strictness | stt | nst | dyn\n\nnamespace strictness\n\ndef is_strict : strictness → bool\n| stt := tt\n| _ := ff\n\ndef join : strictness → strictness → strictness\n| dyn _ := dyn\n| _ dyn := dyn\n| stt _ := stt\n| _ stt := stt\n| _ _ := nst\n\nend strictness\n\ninductive constraint (α : Type*)\n| triv {} : constraint\n| mk (dir : direction) (strict : strictness) (bound : α) : constraint\n\nnamespace constraint\nopen direction\n\ndef is_trivial {α} : constraint α → bool\n| triv := tt\n| _ := ff\n\ndef get_bound {α} : constraint α → option α\n| triv := none\n| (mk a s b) := some b\n\nprotected def mem {α} [preorder α] (x : α) : constraint α → Prop\n| triv := true\n| (mk lower s a) := if s.is_strict then a &lt; x else a ≤ x\n| (mk upper s a) := if s.is_strict then x &lt; a else x ≤ a\n\ninstance {α} [preorder α] : has_mem α (constraint α) := ⟨constraint.mem⟩\n\nprotected def add {α} [ordered_comm_group α] : constraint α → constraint α → constraint α\n| (mk lower s1 a) (mk lower s2 b) := mk lower (s1.join s2) (a + b)\n| (mk upper s1 a) (mk upper s2 b) := mk upper (s1.join s2) (a + b)\n| _ _ := constraint.triv\n\ninstance {α} [ordered_comm_group α] : has_add (constraint α) := ⟨constraint.add⟩\n\nend constraint\n</pre></div>",
        "id": 125291309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119167
    }
]