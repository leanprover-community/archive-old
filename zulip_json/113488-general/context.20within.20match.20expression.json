[
    {
        "content": "<p>Hi! I have a basic question about match expressions. It seems that part of the context is missing. Let me demonstrate by example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">admit</span> <span class=\"kn\">end</span> <span class=\"k\">in</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here, before the <code>admit</code> tactic, we see as context:</p>\n<div class=\"codehilite\"><pre><span></span>t : bool,\n_match : bool → bool\n⊢ t = tt\n</pre></div>\n\n\n<p>But the point is that within this case, we <em>know</em> that <code>t = tt</code>, otherwise it would not be matched. How do I gain back this information? Do I need to use the recursor of bool, <code>bool.rec</code>?</p>",
        "id": 158535334,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550156577
    },
    {
        "content": "<p>I have written this program now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ff</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>And printed the result. It appears that printing <code>#print test._match_1</code> and <code>#print test2</code> reveals their difference. The match clause apparently hides this fact. By using <code>bool.cases_on</code> I can directly access the needed information.</p>",
        "id": 158536100,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550156969
    },
    {
        "content": "<p>Somehow, I expected a similar functionality for the match clause as is provided by the cases tactic. Something like <code>match (H : t) with</code>, but that is not syntactically valid, nor documented. Am I missing something?</p>",
        "id": 158536248,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550157058
    },
    {
        "content": "<p>Another option:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">admit</span> <span class=\"kn\">end</span> <span class=\"k\">in</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 158536288,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1550157083
    },
    {
        "content": "<p>Thanks! That is much neater than going into proof mode!</p>",
        "id": 158536791,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550157409
    }
]