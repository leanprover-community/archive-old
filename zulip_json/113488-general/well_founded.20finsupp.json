[
    {
        "content": "<p>Can someone explain to me how to prove that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">Hfg</span> <span class=\"n\">Hgh</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">Hfg</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hgh</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(see <a href=\"https://github.com/leanprover-community/mathlib/pull/1216/files#diff-af9f424915b54a36301c2cba4d92a12cR1447\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1216/files#diff-af9f424915b54a36301c2cba4d92a12cR1447\">https://github.com/leanprover-community/mathlib/pull/1216/files#diff-af9f424915b54a36301c2cba4d92a12cR1447</a>)<br>\nis well founded in the case <code>α := ℕ</code></p>",
        "id": 170701513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562917072
    },
    {
        "content": "<p><code>measure_wf</code></p>",
        "id": 170701561,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562917111
    },
    {
        "content": "<p>But you have to show that <code>lt = λ f g, ∀ s, f s &lt; g s</code></p>",
        "id": 170701580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562917147
    },
    {
        "content": "<p>And that isn't your definition, but maybe it should be.</p>",
        "id": 170701586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562917162
    },
    {
        "content": "<p>but it isn't</p>",
        "id": 170701742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562917331
    },
    {
        "content": "<p>No, that's not the definition I want</p>",
        "id": 170701760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562917354
    },
    {
        "content": "<p>Ah, it's actually much harder than I thought.</p>",
        "id": 170701859,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562917470
    },
    {
        "content": "<p>show that the downset is finite</p>",
        "id": 170701885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562917527
    },
    {
        "content": "<p>Right, you did that.</p>",
        "id": 170701897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562917544
    },
    {
        "content": "<p>How do I turn that into a proof of <code>wf</code>?</p>",
        "id": 170701908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562917555
    },
    {
        "content": "<p>I don't know</p>",
        "id": 170701967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562917596
    },
    {
        "content": "<p>but that seems like an important lemma</p>",
        "id": 170701973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562917602
    },
    {
        "content": "<p>I only ask you to prove important lemmas <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 170701994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562917625
    },
    {
        "content": "<p>This is provable right.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 170702124,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562917765
    },
    {
        "content": "<p>I think it is</p>",
        "id": 170702211,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562917883
    },
    {
        "content": "<p>I now have an order embedding into multiset. How do I pullback the wellfoundedness?</p>",
        "id": 170702969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562918710
    },
    {
        "content": "<p>subrel of wf is wf; inv_image of wf is wf</p>",
        "id": 170703001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562918743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_multiset_strict_mono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_multiset</span> <span class=\"n\">σ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_and_ne</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_iff_count</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">count_to_multiset</span><span class=\"o\">,</span> <span class=\"n\">count_to_multiset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170703004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562918754
    },
    {
        "content": "<p><code>inv_image.wf</code></p>",
        "id": 170703067,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562918807
    },
    {
        "content": "<p>Aah, but the well founded relation on multiset is not the subset relation, is it?</p>",
        "id": 170703812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562919676
    },
    {
        "content": "<p>It's strict subset.</p>",
        "id": 170703923,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562919777
    },
    {
        "content": "<p>Both ssubset and <code>lt</code> are well founded.</p>",
        "id": 170703946,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562919810
    },
    {
        "content": "<p>Is there a proof that <code>lt</code> is well founded?</p>",
        "id": 170703954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562919823
    },
    {
        "content": "<p>Because that is the one I want to pull back</p>",
        "id": 170703958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562919831
    },
    {
        "content": "<p>But typeclass inference finds the other one</p>",
        "id": 170703965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562919839
    },
    {
        "content": "<p>There's probably a proof it implies card &lt; card</p>",
        "id": 170704014,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562919854
    },
    {
        "content": "<p>I love the way that we mathematicians still don't properly understand induction.</p>",
        "id": 170705862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562921756
    },
    {
        "content": "<p>Does someone see something that is obviously wrong with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">inv_of_unit</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"k\">else</span>\n  <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">diagonal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">inv_of_unit</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">φ</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I get 6 deterministic timeouts, and no other useful error messages...</p>",
        "id": 170713091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562929416
    },
    {
        "content": "<p>For the record:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_multiset_strict_mono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_multiset</span> <span class=\"n\">σ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_and_ne</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_iff_count</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">count_to_multiset</span><span class=\"o\">,</span> <span class=\"n\">count_to_multiset</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_lt_of_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">card_to_multiset</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">card_to_multiset</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">card_lt_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">to_multiset_strict_mono</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lt_wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subrelation</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"o\">(</span><span class=\"n\">sum_lt_of_lt</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">inv_image</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"bp\">_</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span>\n</pre></div>",
        "id": 170713167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562929491
    },
    {
        "content": "<p>Full code is available at <a href=\"https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L666-L670\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L666-L670\">https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L666-L670</a></p>",
        "id": 170713255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562929583
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">inv_of_unit</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"k\">else</span>\n  <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">diagonal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">inv_of_unit</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">φ</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n</blockquote>\n<p>In this code I call <code>inv_of_unit x.1</code>. Do I recall correctly that I should not put the \"default\" arguments in recursive calls? That is, I should not replace this with <code>inv_of_unit φ u h x.1</code>. Or should I?<br>\nI get timeouts with both of these, so Lean doesn't tell me which one is correct.</p>",
        "id": 170713950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562930522
    },
    {
        "content": "<p>You should only put the stuff right of the colon into a recursive call.</p>",
        "id": 170715263,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562932159
    },
    {
        "content": "<p>Right, so I did it correctly.</p>",
        "id": 170715729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562932684
    },
    {
        "content": "<p>Any idea why Lean is unhappy?</p>",
        "id": 170715742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562932717
    },
    {
        "content": "<p>Because there are no arguments right of the colon?</p>",
        "id": 170716001,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562932965
    },
    {
        "content": "<p><code>mv_power_series σ α := (σ →₀ ℕ) → α</code></p>",
        "id": 170716026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933005
    },
    {
        "content": "<p>Is that good enough?</p>",
        "id": 170716027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933010
    },
    {
        "content": "<p>If I replace the summand <code>if h : x.1 &lt; n then inv_of_unit x.1 * coeff x.2 φ else 0</code> with <code>0</code> then Lean is perfectly happy.</p>",
        "id": 170716092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933067
    },
    {
        "content": "<p>There's no closed curly bracket on the last line?</p>",
        "id": 170716103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562933090
    },
    {
        "content": "<p>There is in my local copy <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 170716130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933114
    },
    {
        "content": "<p>So that's also not the issue</p>",
        "id": 170716134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933121
    },
    {
        "content": "<p>MWE</p>",
        "id": 170716138,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562933127
    },
    {
        "content": "<p>Is it some decidability thing?</p>",
        "id": 170716610,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562933653
    },
    {
        "content": "<p>Voila: <a href=\"https://gist.github.com/jcommelin/a521437d3886968db4a54154da503f3e\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/a521437d3886968db4a54154da503f3e\">https://gist.github.com/jcommelin/a521437d3886968db4a54154da503f3e</a></p>",
        "id": 170716657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933730
    },
    {
        "content": "<p>The MWE is a bit long... I included the ring structure on power series.</p>",
        "id": 170716669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933752
    },
    {
        "content": "<p>The problem is all the way at the bottom. The rest of the file is mostly uninteresting.</p>",
        "id": 170716716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933769
    },
    {
        "content": "<p>I have <code>[decidable_eq σ]</code>... so that shouldn't be the issue, I think.</p>",
        "id": 170716753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933829
    },
    {
        "content": "<p>Hmmm.... but <code>#check (by apply_instance : decidable_rel (@has_lt.lt (σ →₀ ℕ) _))</code> times out.</p>",
        "id": 170716842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933928
    },
    {
        "content": "<p>Is that bad?</p>",
        "id": 170716846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933934
    },
    {
        "content": "<p>Does the <code>wf</code> relation have to be decidable?</p>",
        "id": 170716852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562933944
    },
    {
        "content": "<p>Defining that instance using <code>sorry</code> the <code>inv_of_unit</code> suddenly no longer times out, but gives an error message:</p>\n<div class=\"codehilite\"><pre><span></span>failed to prove recursive application is decreasing, well founded relation\n  @has_well_founded.r (σ →₀ ℕ)\n    (@has_well_founded.mk (σ →₀ ℕ)\n       (@has_lt.lt (σ →₀ ℕ)\n          (@preorder.to_has_lt (σ →₀ ℕ)\n             (@finsupp.preorder σ ℕ (λ (a b : σ), _inst_1 a b)\n                (@partial_order.to_preorder ℕ\n                   (@ordered_comm_monoid.to_partial_order ℕ\n                      (@ordered_cancel_comm_monoid.to_ordered_comm_monoid ℕ\n                         (@ordered_semiring.to_ordered_cancel_comm_monoid ℕ nat.ordered_semiring))))\n                nat.has_zero)))\n       _)\n</pre></div>",
        "id": 170716931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934025
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">inv_of_unit</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"mi\">0</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"k\">else</span>\n<span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">diagonal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span>\n   <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">inv_of_unit</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">φ</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 170716972,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562934097
    },
    {
        "content": "<p>You need decidable lt on finsupp because of the <code>if</code></p>",
        "id": 170717026,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562934137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Thanks a lot!</p>",
        "id": 170717179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934332
    },
    {
        "content": "<p>Any hints on how I could prove that <code>&lt;</code> is decidable?</p>",
        "id": 170717249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934371
    },
    {
        "content": "<p>What's the definition?</p>",
        "id": 170717255,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562934385
    },
    {
        "content": "<p>It might be <code>unfold lt; apply_instance</code></p>",
        "id": 170717268,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562934408
    },
    {
        "content": "<p>The definition of <code>le</code> is <code>\\for s, f s ≤ g s</code>.</p>",
        "id": 170717539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934631
    },
    {
        "content": "<p>So <code>&lt;</code> is <code>\\exists s, f + single s 1 ≤ g</code>.</p>",
        "id": 170717565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934667
    },
    {
        "content": "<p>Show it's equivalent to forall s in the support.</p>",
        "id": 170717570,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562934672
    },
    {
        "content": "<p>Exactly</p>",
        "id": 170717584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934704
    },
    {
        "content": "<p>Ok, this seems to work, but I don't know why <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">decidable_lt</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_and_ne</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">decidable</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170717733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562934873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should we also have <code>nat.diagonal</code>?</p>",
        "id": 170952546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563249915
    },
    {
        "content": "<p>Isomorphic to the special case <code>finsupp unit nat</code>...</p>",
        "id": 170952551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563249938
    },
    {
        "content": "<p>Or is it better to use <code>range n</code> and subtraction?</p>",
        "id": 170952555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563249950
    },
    {
        "content": "<p>Compare <code>coeff_mul</code> for <code>polynomial</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/polynomial.lean#L169-L170\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/polynomial.lean#L169-L170\">https://github.com/leanprover-community/mathlib/blob/master/src/data/polynomial.lean#L169-L170</a></p>",
        "id": 170952616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563250002
    },
    {
        "content": "<p>sure. I guess it's not hard to prove that <code>(list.range (n+1)).map (\\lam i, (i, n - i))</code>has the requisite property</p>",
        "id": 170952617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563250007
    },
    {
        "content": "<p>Also... shouldn't these things be called <code>antidiagonal</code>?</p>",
        "id": 170952650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563250066
    },
    {
        "content": "<p>I've been thinking about that</p>",
        "id": 170952655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563250077
    },
    {
        "content": "<p><code>simplex</code> might also work in the finsupp generalization</p>",
        "id": 170952708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563250113
    },
    {
        "content": "<p>Hmm, I would say <code>finsupp.simplex (a : \\a)</code> is the set of <code>finsupp X \\a</code> that sum up to <code>a</code>.</p>",
        "id": 170952813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563250301
    },
    {
        "content": "<p>Or something like that.</p>",
        "id": 170952820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563250314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would you approve of a PR that changes all <code>diagonal</code>s to <code>antidiagonal</code>s?</p>",
        "id": 170953757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563251771
    },
    {
        "content": "<p>sure</p>",
        "id": 170953767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563251780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should something like <code>nat.antidiagonal</code> go into <code>data/nat/basic</code>? Or is it not basic enough?</p>",
        "id": 170959800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563260443
    },
    {
        "content": "<p>It should go in <code>data.list.basic</code>, <code>data.multiset.basic</code>, or <code>data.finset.basic</code> depending on which version you are talking about</p>",
        "id": 170959840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563260487
    }
]