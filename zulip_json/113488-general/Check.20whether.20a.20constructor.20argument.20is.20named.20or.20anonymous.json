[
    {
        "content": "<p>For a tactic I'm writing, I need to know whether each argument of a given constructor is named or not. However, it seems that leaving an argument unnamed and naming it <code>a</code> produce the same result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">I</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"kn\">check</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span>  <span class=\"n\">b</span>  <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n&#39;</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">),</span>\n<span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"kn\">check</span>\n</pre></div>\n\n\n<p>It seems like the elaborator makes up a name for the unnamed argument of <code>I.intro</code>. Any suggestions for how I could deal with this?</p>",
        "id": 193842700,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1586828239
    },
    {
        "content": "<p>In kernel terms, named / unnamed is not a meaningful distinction. You can however distinguish between dependent and non-dependent. In <code>(expr.pi n _ d b) ← infer_type </code>(I.intro),<code>, you can check </code>b.has_var<code>to see if the variable named by </code>n<code> is referenced in </code>b`. If it is, you have a dependent product, otherwise, it's a simple function arrow / implication.</p>",
        "id": 193849078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586837929
    },
    {
        "content": "<p>I feared that would be the answer. Dependent/non-dependent is unfortunately not fine enough for my application. Might have to hack around this. Thanks for the explanation though!</p>",
        "id": 193893999,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1586869917
    }
]