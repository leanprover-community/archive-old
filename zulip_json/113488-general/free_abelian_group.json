[
    {
        "content": "<p>Does anyone know what's going on in <a href=\"https://tqft.net/mathlib/group_theory/free_abelian_group\">file#group_theory/free_abelian_group</a>? I've broke something there by accident and just spent several hours trying to fix it.</p>",
        "id": 282024037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652301087
    },
    {
        "content": "<p>Really weird stuff is going on there. For example, why does <code>dsimp</code> unfold <code>0 : free_abelian_group α</code> to <code>add_comm_group.zero</code>?</p>",
        "id": 282024147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652301129
    },
    {
        "content": "<p>You will have to be more specific if you want anyone to help you.<br>\nI agree <code>dsimp</code> shouldn't do that. Does <code>simp</code> also do it? Does <code>squeeze_simp</code> suggest a culprit causing it?</p>",
        "id": 282024544,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652301340
    },
    {
        "content": "<p>No, <code>squeeze_simp</code> returns <code>simp only</code>, <code>dsimp</code> returns <code>dsimp only</code>, I went looking for lemmas tagged <code>simp</code> around and could not find anything suspicious...</p>",
        "id": 282024733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652301441
    },
    {
        "content": "<p>Is this breakage on a branch? Does the dsimp thing happen on master?</p>",
        "id": 282025281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652301727
    },
    {
        "content": "<p>It's on <a href=\"https://github.com/leanprover-community/mathlib/tree/stronger_div_inv_monoid\">branch#stronger_div_inv_monoid</a>. I have yet to try on master but I expect it is the same, because my changes do not concern this.</p>",
        "id": 282025366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652301790
    },
    {
        "content": "<p>When working on this file, there's an overall feeling that the API is not stratified. Everything leaks through. There's a bunch of <code>unfold</code>s, lemmas which visually should not rewrite do, lemmas which should do not...</p>",
        "id": 282025406,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652301822
    },
    {
        "content": "<p>To be clear, the change from my branch that broke the file is that I generalized the second argument of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_inv\">docs#map_inv</a> from <code>group</code> to <code>division_monoid</code>, and this breaks a bunch of instance synthesis with dot notation, some of which is used in API barrier-breaking proofs in <code>group_theory.free_abelian_group</code>.</p>",
        "id": 282025975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652302125
    },
    {
        "content": "<p>I am trying to confine the API barrier breakage to the API setup now, but this is a real pain due to this (possibly unrelated?) issue of overtransparency.</p>",
        "id": 282026282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652302297
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive.add_comm_monoid\">docs#additive.add_comm_monoid</a> the issue somehow?</p>",
        "id": 282027391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652302867
    },
    {
        "content": "<p>Oh! I was just thinking the same!</p>",
        "id": 282027432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652302892
    },
    {
        "content": "<p>It looks fine</p>",
        "id": 282027457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652302908
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/abelianization.comm_group\">docs#abelianization.comm_group</a> would be the next place to look</p>",
        "id": 282027599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652302975
    },
    {
        "content": "<p>That looks possible</p>",
        "id": 282027685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652303033
    },
    {
        "content": "<p>Does adding <code>one := 1</code> there help?</p>",
        "id": 282027746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652303045
    },
    {
        "content": "<p>Oh, problem partly solved. The latter instances all use <code>free_abelian_group.add_comm_group</code>, but they did not have <code>add := (+),</code>, so <code>dsimp</code> was happily turning <code>x + y</code> into <code>add_comm_group.add x y</code>.</p>",
        "id": 282027760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652303054
    },
    {
        "content": "<p>You really have to learn slow-typing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 282027785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652303066
    },
    {
        "content": "<p>This is the same <code>..</code> issue that blew up my bimodule PR</p>",
        "id": 282027913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652303135
    },
    {
        "content": "<p>Is there even any way to fix it? Can <code>..</code> detect ancestors?</p>",
        "id": 282028286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652303315
    },
    {
        "content": "<p>I think I was experiencing something like this recently (although not in the context of <code>free_abelian_group</code>) with turning <code>lp _ \\infty</code> into a ring, under appropriate hypotheses on the hole <code>_</code>.</p>",
        "id": 282029953,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1652304219
    },
    {
        "content": "<p>And now I'm hitting a timeout.</p>",
        "id": 282030108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652304300
    },
    {
        "content": "<p>Lean's telling you that it's time to revise for your forthcoming exams ;-)</p>",
        "id": 282031433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652305036
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14089\">#14089</a>. I would greatly appreciate help to kill off the timeout.</p>",
        "id": 282034841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652307053
    },
    {
        "content": "<p>Oh it's one of those beasts -- the one where if you put <code>sorry</code> at the end it complains there are no goals to solve, but if you remove the <code>sorry</code> then the kernel doesn't buy it and you get a timeout. <code>noncomputable!</code> doesn't fix it either, and neither does <code>recover</code>. Yeah those are ugly :-( Johan solved one in LTE recently by just taking out some sublemma.</p>",
        "id": 282036014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652307890
    },
    {
        "content": "<p>Arf! DId you ever manage to get rid of one of those?</p>",
        "id": 282036041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652307924
    },
    {
        "content": "<p>Even this times out on the branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group.induction_on</span> <span class=\"n\">z</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L3</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282036531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308310
    },
    {
        "content": "<p>Does replacing the <code>rfl</code> by <code>(by simp)</code> have a chance to fix it?</p>",
        "id": 282036648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652308371
    },
    {
        "content": "<p>Yaël, does my comment above about abelianization help?</p>",
        "id": 282036775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652308444
    },
    {
        "content": "<p>Your PR seems not to include that change</p>",
        "id": 282036799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652308462
    },
    {
        "content": "<p>Adding <code>one := 1</code>? We're proving <code>semigroup</code>.</p>",
        "id": 282036818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652308479
    },
    {
        "content": "<p>Replacing <code>rfl</code> by <code>sorry</code> fixes it. So maybe it's some kind of abuse of defeq which tactic mode accepts but the kernel doesn't for some reason?</p>",
        "id": 282036852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308509
    },
    {
        "content": "<p>Hmm... Those goals are of the form <code>x * y * 0 = x * (y * 0)</code>. If we could prove <code>mul_zero_class (free_abelian_group α)</code> beforehand, that would solve it.</p>",
        "id": 282037017,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652308641
    },
    {
        "content": "<p>assuming that it doesn't time out :-)</p>",
        "id": 282037125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> never liked this definition from the start. He was always adamant that the definition should be completely rewritten in terms of <code>finsupp</code>. I never properly understood his objections to the definition, but then again I know a lot less about implementation than him.</p>",
        "id": 282037235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308815
    },
    {
        "content": "<p>Maybe I'm beginning to understand them now :-/</p>",
        "id": 282037248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308828
    },
    {
        "content": "<p>Adding explicit data fields to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abelianization.comm_group/src\">src#abelianization.comm_group</a></p>",
        "id": 282037668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652309159
    },
    {
        "content": "<p>Oh I see. Let's try.</p>",
        "id": 282037760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652309214
    },
    {
        "content": "<p>Kenny Lau basically wrote that file to practice monads; you can certainly tell by the API!</p>",
        "id": 282037796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652309246
    },
    {
        "content": "<p>This works (i.e. doesn't time out):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mul_zero_class</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_mul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">free_abelian_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group.induction_on</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L3</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group.induction_on</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L2</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">free_abelian_group.induction_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L1</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_mul_of</span><span class=\"o\">,</span> <span class=\"n\">of_mul_of</span><span class=\"o\">,</span> <span class=\"n\">of_mul_of</span><span class=\"o\">,</span> <span class=\"n\">of_mul_of</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">recover</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Change the dodgy <code>rfl</code>s to <code>simp</code>s</p>",
        "id": 282038152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652309483
    },
    {
        "content": "<p>Note that the proof of <code>mul_zero</code> is a dodgy <code>rfl</code> but Lean doesn't seem to care this time.</p>",
        "id": 282038171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652309506
    },
    {
        "content": "<p>You just saved me enough time for a past paper <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 282038303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652309577
    },
    {
        "content": "<p>Looks to me like <code>zero_mul</code> might not even be <code>rfl</code>, so your proposed proof really somehow shouldn't work, and yet tactic mode accepts it?</p>",
        "id": 282039325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652310286
    },
    {
        "content": "<p>Yeah, something fishy going on there.</p>",
        "id": 282039371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652310334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/free_abelian_group/near/282037235\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> never liked this definition from the start. He was always adamant that the definition should be completely rewritten in terms of <code>finsupp</code>. I never properly understood his objections to the definition, but then again I know a lot less about implementation than him.</p>\n</blockquote>\n<p>It's basically because I think that the universal property on its own is kind of useless if you want to prove any remotely nontrivial theorem about a free abelian group. The universal property is there to transfer what we know about free abelian groups to other objects, but we need more than the universal property to understand anything about free abelian groups in the first place.</p>",
        "id": 282104129,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1652361470
    }
]