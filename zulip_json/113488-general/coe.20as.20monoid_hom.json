[
    {
        "content": "<p>I needed <code>small_lemma</code> below in a proof. I finally got it done, but it doesn't feel right. Is there a better way than:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.cast</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_N_Z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→*</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int.coe_nat_mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">small_lemma</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monoid_hom.map_prod</span> <span class=\"n\">coe_N_Z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218171731,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606582508
    },
    {
        "content": "<p>:= coe_N_Z.map_prod _?</p>",
        "id": 218171946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606582846
    },
    {
        "content": "<p>Possibly more underscores</p>",
        "id": 218171975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606582887
    },
    {
        "content": "<p>One note: it's usually bad practice to make definitions in tactic mode. I usually put an underscore after := and use a hole command to generate a skeleton for the structure, and go from there</p>",
        "id": 218172039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606582949
    },
    {
        "content": "<p>Also I'm sure the definition of coe_N_Z exists in mathlib, but we probably have a semiring hom which you can restrict to a monoid hom</p>",
        "id": 218172073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606583024
    },
    {
        "content": "<p>To go from <code>ℕ</code> to <code>ℤ</code> we have <code>nat.cast_ring_hom ℤ</code>.</p>",
        "id": 218172208,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606583203
    },
    {
        "content": "<p>If you want directly the monoid hom there is <code>nat.cast_add_monoid_hom</code>.</p>",
        "id": 218172212,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606583215
    },
    {
        "content": "<p>I think he wants the multiplicative monoid hom</p>",
        "id": 218172218,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606583237
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_monoid_hom\">docs#nat.cast_monoid_hom</a> ?</p>",
        "id": 218172228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606583261
    },
    {
        "content": "<p><del>You can use <code>nat.cast_ring_hom.to_monoid_hom</code> I guess...</del> see the message below</p>",
        "id": 218172308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606583380
    },
    {
        "content": "<p><code>(nat.cast_ring_hom ℤ).to_monoid_hom</code> should work</p>",
        "id": 218172358,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606583416
    },
    {
        "content": "<p>Ops, I didn't see you answer</p>",
        "id": 218172366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606583434
    },
    {
        "content": "<p>Thanks, <code>nat.cast_ring_hom</code> and <code>to_monoid_hom</code> was what I was looking for!<br>\nSo this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">small_lemma</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">monoid_hom.map_prod</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_hom</span> <span class=\"n\">t</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>should work, right? But it gives an error message involving <code>⇑</code>...</p>",
        "id": 218173444,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606585309
    },
    {
        "content": "<p>Can you tell us more than one character of that error message?</p>",
        "id": 218173647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606585640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218173934,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606586094
    },
    {
        "content": "<p>I think lean can't unify the evaluation of this with coe. (I'm on mobile, so I can't check unfortunately.)</p>",
        "id": 218174027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606586227
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"lemma\"><pre><span></span><code>begin\n  convert monoid_hom.map_prod (nat.cast_ring_hom ℤ).to_monoid_hom t finset.univ,\n  swap, simp,\nend\n</code></pre></div>\n<p>leaves me with <code>⊢ coe_base = nat.cast_coe</code></p>",
        "id": 218174028,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606586228
    },
    {
        "content": "<p>You should give a  minimal working example, as in <a href=\"https://leanprover-community.github.io/mwe.html\">https://leanprover-community.github.io/mwe.html</a></p>",
        "id": 218174112,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606586394
    },
    {
        "content": "<p>Meaning that people can just copy/paste your code (in what you wrote some imports are missing)</p>",
        "id": 218174174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606586435
    },
    {
        "content": "<p>Ah sorry, it was at beginning of the conversation</p>",
        "id": 218174413,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606586791
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">small_lemma3</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">monoid_hom.map_prod</span>\n    <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_one</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_mul</span><span class=\"o\">}</span>\n    <span class=\"n\">t</span> <span class=\"n\">finset.univ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works...</p>",
        "id": 218174476,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606586891
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">small_lemma</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.map_prod</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_one</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_mul</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">finset.univ</span>\n</code></pre></div>\n<p>is (nearly) a one-liner <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 218174562,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606587077
    },
    {
        "content": "<p>But surely somehow using <code>(nat.cast_ring_hom ℤ).to_monoid_hom</code> would be nicer, right?</p>",
        "id": 218174668,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606587259
    },
    {
        "content": "<p>If what you want is that a monoids homomorphism commutes with finite products this is already in mathlib, <code>finset.prod_hom</code></p>",
        "id": 218174813,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606587509
    },
    {
        "content": "<p>But if you just want t practice your proof works :)</p>",
        "id": 218174828,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606587539
    },
    {
        "content": "<p>Wow, <code>finset.prod</code> and <code>monoid_hom.map_prod</code> are almost identical. The difference seems to be <code>(g : β → γ) [is_monoid_hom g]</code> vs. <code>(g : β →* γ)</code>.</p>",
        "id": 218175676,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606589059
    },
    {
        "content": "<p>What happens if you drop the <code>to_monoid_hom</code>? I think ring_hom.map_prod exists too</p>",
        "id": 218175749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606589224
    },
    {
        "content": "<p>Presumably one is deprecated, that's another difference</p>",
        "id": 218175921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606589505
    },
    {
        "content": "<p><code>ring_hom.map_prod</code> does indeed exist! Unfortunately it leads the exact same goal: <code>⊢ coe_base = nat.cast_coe</code></p>",
        "id": 218176027,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1606589648
    },
    {
        "content": "<p>what are the types?</p>",
        "id": 218176509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606590434
    },
    {
        "content": "<p>Looks like <code>nat.cast_ring_hom \\Z n</code> is not defeq to the coercion of <code>n</code> from nat to the ring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 218179004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606594139
    },
    {
        "content": "<p>The coercion from nat to int is \"special\" :-/ It's one of the constructors, for some sort of computer science reason.</p>",
        "id": 218179629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606595333
    },
    {
        "content": "<p>Here's a nice way to do it: I'm a bit surprised I couldn't find this stuff in mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.add_monoid_hom_unique</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.map_one</span><span class=\"o\">,</span> <span class=\"n\">g.map_one</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.add_monoid_hom_unique'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_monoid_hom_unique</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.of_nat'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">int.of_nat</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">int.of_nat'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.add_monoid_hom_unique'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218180100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606596170
    },
    {
        "content": "<p>The <code>ext</code> in the first theorem applies <code>add_monoid_hom.ext_nat : ∀ {A : Type} [_inst_1 : add_monoid A] {f g : ℕ →+ A}, ⇑f 1 = ⇑g 1 → f = g</code>. It would be cool if <code>nat.add_monoid_hom_unique</code> were tagged <code>ext</code> :D</p>",
        "id": 218180169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606596288
    },
    {
        "content": "<p>mathlib has a subsingleton instance for semiring morphisms out of nat, so <code>nat.add_monoid_hom_unique</code> can be solved with <code>by simp</code>.</p>",
        "id": 218180391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606596703
    },
    {
        "content": "<p>(I think)</p>",
        "id": 218180394,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606596721
    },
    {
        "content": "<p>And it looks like the example itself can be solved with <code>by simp</code> as well :)</p>",
        "id": 218180448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606596799
    }
]