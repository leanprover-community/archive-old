[
    {
        "content": "<p>I'm working on completing <code>example: (∃ x, r → p x) ↔ (r → ∃ x, p x) := sorry</code>, from Chapter 4, section 4, in the Theorem Proving in Lean book. So far what I have is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n          <span class=\"k\">assume</span> <span class=\"n\">hinner</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hinner</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n          <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hpy</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_cases</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n          <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n            <span class=\"k\">assume</span> <span class=\"n\">hinner</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">hcom</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hcom</span>\n          <span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But I cannot figure out what to put in place of the first sorry (I haven't even looked at how to prove this with a proof of <code>not r</code>, which worries me a bit). Thoughts/suggested direction?</p>",
        "id": 161558707,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553401967
    },
    {
        "content": "<p>there is a <code>(a : \\alpha)</code> assumption in the book</p>",
        "id": 161559411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553403400
    },
    {
        "content": "<p>you have to know that the quantification domain is nonempty to prove this one</p>",
        "id": 161559414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553403423
    },
    {
        "content": "<p>for the first sorry, you can assume <code>r</code>, ignore the assumption and then use <code>hinner</code></p>",
        "id": 161559466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553403491
    },
    {
        "content": "<p>Thanks for taking a look. Ok, your advice worked for the first sorry. It kind of confuses me why I have to re-assume <code>r</code>, since I have already assumed it in the form of <code>hc</code>, and I believe I have not \"used\" it at the the first sorry is evaluated.</p>\n<p>For the second sorry, my intuition tells me that I can get <code>r</code> from <code>not r</code>, by somehow using the fact that the quantification domain is non-empty, and then just basically repeating the exists.elim (...)</p>",
        "id": 161559695,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553403950
    },
    {
        "content": "<p>that is proving difficult though..</p>",
        "id": 161559940,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553404343
    },
    {
        "content": "<p>we have to assume <code>r</code> because that's how you prove an implication</p>",
        "id": 161559998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553404444
    },
    {
        "content": "<p>Oh, duh, thanks</p>",
        "id": 161560009,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553404472
    },
    {
        "content": "<p>for the second sorry, you are trying to prove <code>∃ x, r → p x</code> assuming <code>not r</code>, and so any <code>x</code> will do, since <code>not r</code> and <code>r</code> imply <code>p x</code></p>",
        "id": 161560023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553404531
    },
    {
        "content": "<p>so you use that the quantification domain is nonempty to take some <code>x</code> and use that</p>",
        "id": 161560072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553404573
    },
    {
        "content": "<p>Wow, I got it :) My assume block ended up like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n            <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 161560336,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553405136
    },
    {
        "content": "<p>(minus the weird spacing that didn't translate well). Still a little funny to me why it works, I feel like we're assuming that <code>r</code> somehow \"for free\", but the overall bit makes sense to me</p>",
        "id": 161560384,
        "sender_full_name": "Dominic Farolino",
        "timestamp": 1553405187
    },
    {
        "content": "<p>it's a bit of a weird theorem. It says that there is an element such that either r is false or p x holds</p>",
        "id": 161561336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553407045
    },
    {
        "content": "<p>when r is false that's easy to prove</p>",
        "id": 161561340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553407057
    }
]