[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">abel</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- abel failed to simplify</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 158605755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550227693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know what I'm doing wrong here?</p>",
        "id": 158608310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550231018
    },
    {
        "content": "<p>I think <code>abel</code> was never implemented on multiplicative groups</p>",
        "id": 158608503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550231241
    },
    {
        "content": "<p>aren't they the same as additive groups? [insert mathematician's rant]</p>",
        "id": 158608583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550231364
    },
    {
        "content": "<p><code>transfer to_additive; abel</code></p>",
        "id": 158608659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550231407
    },
    {
        "content": "<p>I think the intent was to use <code>additive</code> to do the translation, and I never got around to it</p>",
        "id": 158608663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550231418
    },
    {
        "content": "<p>But that better not actually be inverse in a field or I will be annoyed</p>",
        "id": 158608697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550231505
    },
    {
        "content": "<p>Any idea why <code>abel</code> fails for the second example here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">add_monoid</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"err\">•</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"err\">•</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 175236602,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568032197
    },
    {
        "content": "<p>Note that changing the second <code>abel</code> to <code>repeat { abel }</code> (i.e <code>{ abel, abel }</code>) does work</p>",
        "id": 175238029,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568033450
    },
    {
        "content": "<p>Interesting. How about this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">•</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"err\">•</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 175238875,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1568034235
    }
]