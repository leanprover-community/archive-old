[
    {
        "content": "<p>Hi in coq you can in proofs do the following in proofs:<br>\n<a href=\"/user_uploads/3121/ZXrg6_IgAvxJYoR79cGNWqD-/Capture.PNG\">Capture.PNG</a> <br>\nWhich says if \"NearlyRB (if ?k ...)\" is the goal then use the tactic \"destruct k\"<br>\nand if there is a hypothesis \"H\" for \"RB ?t Red ?n\" and the goal is \"RB ?t Black ?n\" then do \"...\" tactic.<br>\nDo you know if there are anything equivalent in lean?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZXrg6_IgAvxJYoR79cGNWqD-/Capture.PNG\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/ZXrg6_IgAvxJYoR79cGNWqD-/Capture.PNG\"></a></div>",
        "id": 279927101,
        "sender_full_name": "Mathias Schack Rabing",
        "timestamp": 1650721277
    },
    {
        "content": "<p>do you maybe mean the <code>cases</code> tactic? if you can give a Lean example it'd be nice</p>",
        "id": 279927197,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650721467
    },
    {
        "content": "<p>There is no real Ltac equivalent in Lean. Lean tactic metaprogramming is much more low-level and explicit than in Coq.</p>",
        "id": 279927381,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650721744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Pattern.20matching.20in.20proof/near/279927197\">said</a>:</p>\n<blockquote>\n<p>do you maybe mean the <code>cases</code> tactic? if you can give a Lean example it'd be nice</p>\n</blockquote>\n<p>No he means something different, what this block does is allow you to inspect your assumptions and proof goal and based on those make a choice for the next tactic you want to apply. This allows you to e.g. write a repeat block with a tactic inside that dynamically changes behaviour depending on how the proof goal looks. But as Sebastian said what Mathias is asking for is rather far away from what's possible right now. Someone would basically have to implement a match statement compiler for tactic mode</p>",
        "id": 279935479,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650733100
    },
    {
        "content": "<p>Isn't this basically pattern matching on <code>expr</code>, which we do have?</p>",
        "id": 279936941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650735233
    },
    {
        "content": "<p>It's a bit more elaborate than that:</p>\n<ul>\n<li>it can be just used inline in tactic mode</li>\n<li>match on the high level syntax, for example in the image you can see him doing an if but it can do any sort of syntax</li>\n<li>search for hypothesis like in the second arm, the second arm says if there is a hypothesis <code>H</code> of the desired typed and (after the <code>|-</code>) we have the desired goal then apply...</li>\n</ul>",
        "id": 279937685,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650736300
    },
    {
        "content": "<p>and probably a ton of other things I dont know, I just know this syntax from reading and translating CPDT  to Lean</p>",
        "id": 279937692,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650736321
    },
    {
        "content": "<p>It's sort of an inline tactic macro declaration and in addition integrated to tactic mode with the search for hypothesis stuff etc.</p>",
        "id": 279937757,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650736378
    },
    {
        "content": "<p>But yes in the end it does boil down to matching on <code>expr</code>'s etc. But as Sebastian said that's much more low level, the difference is mostly in the convenience of usage, not that we cannot do it.</p>",
        "id": 279937928,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650736607
    }
]