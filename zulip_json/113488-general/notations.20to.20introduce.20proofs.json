[
    {
        "content": "<p>In the following snippet,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>        <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span><span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>          <span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>you can see that a proof after <code>have</code> is introduced by <code>:=</code>, after <code>calc</code> by <code>:</code> and after <code>show</code> by <code>,</code>. And they can essentially not be used one for the other (the only allowed change is to use <code>,</code> instead of <code>:=</code> on the first line). I am plainly used to it, but I would like to understand the rationale behind it. Is it to ease parsing? Or just for historical reasons? Would it make sense to use, say, <code>:=</code> everywhere, to avoid confusing newcomers for no reason?</p>",
        "id": 135815299,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539591474
    },
    {
        "content": "<p>Certainly <code>calc</code> would make sense with <code>:=</code></p>",
        "id": 135815435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591661
    },
    {
        "content": "<p>the commas in <code>show</code> and <code>have</code> are likely due to influence from Isar</p>",
        "id": 135815449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591685
    },
    {
        "content": "<p>Of course you should be looking at term proofs not tactic proofs, which are at best an approximation of the term equivalents</p>",
        "id": 135815458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591722
    },
    {
        "content": "<p>I'm not sure what notation Isar uses for <code>let</code>. Do you?</p>",
        "id": 135815503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539591755
    },
    {
        "content": "<p>There are no commas in Isar. The formula to be proved is enclosed in quotes, and then you give the proof. Either it is a direct proof, and then you just write something like <code>using foo by auto</code>. Or it is a complex proof, and it is enclosed in <code>proof ... qed</code>. The <code>let</code> equivalent is called <code>define</code>, and used like <code>define foo where \"foo = 0\"</code>.</p>",
        "id": 135815645,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539592021
    },
    {
        "content": "<p>interesting. That's more different than I expected. Has it changed significantly in the past 10 years?</p>",
        "id": 135815713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592143
    },
    {
        "content": "<p>the base Isar syntax, I mean</p>",
        "id": 135815726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592159
    },
    {
        "content": "<p>Maybe it is Mizar influence then?</p>",
        "id": 135815737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592194
    },
    {
        "content": "<p>The <code>define</code>syntax is a recent change, it used to be <code>def \"foo  = 0\"</code>.</p>",
        "id": 135815838,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539592316
    },
    {
        "content": "<p>I was under the impression that the original term mode syntax of lean was basically lifted directly from the syntax of another language, probably Isar</p>",
        "id": 135815881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592334
    },
    {
        "content": "<p>and it has since been simplified a bit but is otherwise unchanged</p>",
        "id": 135815886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592365
    },
    {
        "content": "<p>like I think <code>and have</code> and <code>hence</code> used to exist and don't anymore</p>",
        "id": 135815898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592402
    },
    {
        "content": "<p>Since formulas to be proved are enclosed in quotes in Isar, you don't a separator as in Lean. The comma makes sense, as would <code>:=</code>, but having two or three different separators depending on the context might be misleading to newcomers. Will it be uniformized in Lean 4, or is the syntax expected not to change?</p>",
        "id": 135815958,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539592484
    },
    {
        "content": "<p>I think syntax changes like that are on the table</p>",
        "id": 135816033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592583
    },
    {
        "content": "<p>I would be in support of using more <code>:=</code></p>",
        "id": 135816039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592608
    },
    {
        "content": "<p>I agree.</p>",
        "id": 135816055,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539592650
    },
    {
        "content": "<p>and drop the <code>from</code></p>",
        "id": 135816057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592656
    },
    {
        "content": "<p>i.e. <code>have A := proof in B</code> or <code>have A := by tac in B</code></p>",
        "id": 135816116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592702
    },
    {
        "content": "<p><code>show A := proof</code></p>",
        "id": 135816119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592719
    },
    {
        "content": "<p><code>calc A = B := proof ... = C := proof</code></p>",
        "id": 135816182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592810
    },
    {
        "content": "<p>although I guess <code>have in</code> has the problem that it won't look like the tactic version which is <code>have A := proof, tac</code></p>",
        "id": 135816239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539592897
    },
    {
        "content": "<p>I would prefer to get rid of the <code>in</code> in <code>let</code> and just write <code>let a := x, ...</code></p>",
        "id": 135816298,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539592947
    },
    {
        "content": "<p>I don't mind the <code>from</code> so much, it makes things read slightly more naturally. Although I'm sure I wouldn't miss it for long if it disappeared. I get more annoyed with the difference between term and tactic <code>have</code>.</p>",
        "id": 135816310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1539592984
    },
    {
        "content": "<p>and <code>have h : A, by tac, ...</code> or <code>have h : A := ..., ...</code></p>",
        "id": 135816311,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539592984
    },
    {
        "content": "<p>I think that <code>have h : A := by tac, ...</code> is more uniform. Putting a comma in there doesn't seem to win much</p>",
        "id": 135816388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593070
    },
    {
        "content": "<p>it would also be nice to have parameters for <code>have</code> and <code>show</code>:<br>\n<code>have h (a : A) (b : B) : T := ..., ...</code></p>",
        "id": 135816389,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539593071
    },
    {
        "content": "<p>short story: <code>let</code> and <code>have</code> should have the same parser</p>",
        "id": 135816412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593097
    },
    {
        "content": "<blockquote>\n<p>and <code>have h : A, by tac, ...</code> or <code>have h : A := ..., ...</code></p>\n</blockquote>\n<p>So you would still use <code>,</code> to introduce a proof, and to separate a statement from the next. I think I would favor <code>:=</code> to introduce proofs, and <code>,</code> to go to the next statement (removing <code>in</code>, as you say).</p>",
        "id": 135816422,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1539593107
    },
    {
        "content": "<p>the comma would be just short form for tactic proofs.</p>",
        "id": 135816434,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539593142
    },
    {
        "content": "<p>right, but I don't think that needs to be a thing</p>",
        "id": 135816502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593193
    },
    {
        "content": "<p>like <code>have h : A := by tac, ...</code> and <code>have h : A := begin end, ...</code> are plenty short</p>",
        "id": 135816509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593220
    },
    {
        "content": "<p>hm, yes its short enough. and nicely uniform</p>",
        "id": 135816534,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539593254
    },
    {
        "content": "<p>what about <code>have h : A := { ... },</code>?</p>",
        "id": 135816538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539593269
    },
    {
        "content": "<p>preposterous</p>",
        "id": 135816542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593278
    },
    {
        "content": "<p>I guess it classes with set syntax</p>",
        "id": 135816584,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539593287
    },
    {
        "content": "<p>Then we would still have inconsistency with the goal focussing {...}</p>",
        "id": 135816602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539593344
    },
    {
        "content": "<p>just think of <code>begin end</code> as goal focussing brackets that work outside tactic mode</p>",
        "id": 135816617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593382
    },
    {
        "content": "<p>another dream: not only unify <code>let</code> and <code>have</code> but unify it also with <code>def</code>, i.e. allow to use the equation compiler in proofs, ala</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">\\/</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</pre></div>",
        "id": 135816618,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539593384
    },
    {
        "content": "<p><code>mutual have ... with ... </code>?</p>",
        "id": 135816700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593502
    },
    {
        "content": "<p>yeah this makes a lot more sense than named <code>match</code></p>",
        "id": 135816754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539593569
    },
    {
        "content": "<p>Is there a general notation wishlist thread?</p>",
        "id": 135819726,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539597022
    },
    {
        "content": "<p>there is now</p>",
        "id": 135851934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539631034
    },
    {
        "content": "<p>I would really like all of the bells and whistles you get with <code>{!...!}</code> to work with <code>_</code> when it fails to fill in the proof. But I guess that's more of an editor feature.</p>",
        "id": 135852289,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1539631376
    },
    {
        "content": "<p>Lean 4 will most likely replace the hole syntax with <code>_</code>. Input to hole commands should be handled by the editor (which would've been basically impossible in Lean 3's infrastructure).</p>",
        "id": 135960094,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1539768166
    },
    {
        "content": "<blockquote>\n<p>Is there a general notation wishlist thread?</p>\n</blockquote>\n<p>Another notation wish: as for <code>rw</code> I would like <code>simp [←foo]</code> to add reversed <code>foo</code> to the simpset. And possibly to remove <code>foo</code> if it is in the simpset. Currently, if <code>foo</code> has say two variables, I achieve this with <code>simp[-foo, (foo _ _).symm]</code>.</p>",
        "id": 150872739,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543952293
    },
    {
        "content": "<p>New notation wishlist item: be able to replace, say in a parameter list, <code>(n : { n : ℕ // 0 &lt; n })</code> by <code>(n : ℕ // 0 &lt; n)</code> (or, even better,  <code>(n : ℕ | 0 &lt; n)</code>)</p>",
        "id": 152435172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545585346
    },
    {
        "content": "<p>is there a reason you aren't uskng two arguments?</p>",
        "id": 152444089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545604543
    },
    {
        "content": "<p>Also <code>(n &gt; 0)</code> already does almost exactly what you are saying</p>",
        "id": 152445176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545606831
    },
    {
        "content": "<p>It's not exactly the same. I can indeed modify my example to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">euclid</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n_pos</span><span class=\"o\">,</span>\n         <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n           <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*⟩</span>\n         <span class=\"k\">else</span>\n           <span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n           <span class=\"k\">let</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">euclid</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">n_pos</span> <span class=\"k\">in</span>\n             <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n              <span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n                <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n               <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"bp\">⟩⟩</span>\n</pre></div>\n\n\n<p>but I still think the notation <code>(n : nat | n &gt; 0)</code> in a parameter list would be good to have (and they have it in Coq).</p>",
        "id": 152465051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545648780
    },
    {
        "content": "<p>By the way, the context is given by <a href=\"https://www.college-de-france.fr/site/xavier-leroy/seminar-2018-12-12-11h30.htm\" target=\"_blank\" title=\"https://www.college-de-france.fr/site/xavier-leroy/seminar-2018-12-12-11h30.htm\">https://www.college-de-france.fr/site/xavier-leroy/seminar-2018-12-12-11h30.htm</a> which shows programming with recursion and dependent pattern matching in Coq. They have all sorts of cool tricks in this area, including deferring proof obligations after writing the program, you can have a look at minute 51 to see their version of the above function. And of course they also have <code>(q, r) : ℕ × ℕ</code> instead of our <code>p : ℕ × ℕ</code>, and a linear arithmetic tactic doing everything <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 152465176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545649067
    },
    {
        "content": "<p>You can defer proof obligations using <code>refine</code></p>",
        "id": 152465235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545649189
    },
    {
        "content": "<p>Isn't this just the definition of <code>div</code>?</p>",
        "id": 152465353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545649406
    },
    {
        "content": "<p>you can have a look at how it's defined in core</p>",
        "id": 152465356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545649419
    },
    {
        "content": "<p>You can also write something with explicit binding for <code>q,r</code> but we try not to use it because it doesn't unfold as much</p>",
        "id": 152465432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545649529
    },
    {
        "content": "<p>you can do something like this (the notation isn't there, but you get the idea)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">euclid</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Unfortunately I think lean has a bug with generating names for the auxiliary match and it clashes with the <code>let</code> statement in the body</p>",
        "id": 152465552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545649727
    },
    {
        "content": "<blockquote>\n<p>You can defer proof obligations using <code>refine</code></p>\n</blockquote>\n<p>It only defers a tiny bit. You need to close the goal before leaving the tactic block. DId you look at what <code>Program</code> does in this video? (you only have to look at the time I mentioned).</p>",
        "id": 152483363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545682846
    },
    {
        "content": "<blockquote>\n<p>you can have a look at how it's defined in core</p>\n</blockquote>\n<p>In core the output type does not assert correction. I'm not saying it should, I was doing an exercise.</p>",
        "id": 152483383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545682886
    },
    {
        "content": "<blockquote>\n<p>you can do something like this (the notation isn't there, but you get the idea)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">euclid</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Unfortunately I think lean has a bug with generating names for the auxiliary match and it clashes with the <code>let</code> statement in the body</p>\n</blockquote>\n<p>Can you use well founded recursion if m and n are left of colon?</p>",
        "id": 152483401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545682911
    }
]