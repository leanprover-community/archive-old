[
    {
        "content": "<p>How do you create and work with a Monoid Ring?</p>",
        "id": 183379520,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1576257135
    },
    {
        "content": "<p>You need to use <code>finsupp</code></p>",
        "id": 183381189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576258464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> The best thing is probably to look for <code>instance : semiring</code> in <code>data/finsupp.lean</code></p>",
        "id": 183381221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576258500
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/finsupp.lean#L1196\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/finsupp.lean#L1196\">https://github.com/leanprover-community/mathlib/blob/master/src/data/finsupp.lean#L1196</a></p>",
        "id": 183387523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576262985
    },
    {
        "content": "<p>It wants an additive monoid though</p>",
        "id": 183387533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576262995
    },
    {
        "content": "<p>If in your context the monoid is multiplicative, you can switch to additive notation by using <code>(additive M)</code></p>",
        "id": 183387627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576263029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you give me an example useage?</p>",
        "id": 183397073,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1576268760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">monoid_ring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">monoid_ring</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">monoid_ring</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 183397783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576269234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">monoid_ring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">monoid_ring</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">monoid_ring</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_monoid</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monoid_ring</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of_monoid</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">of_monoid</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">of_monoid</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183398349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576269637
    },
    {
        "content": "<p>Maybe bundled is better:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">monoid_ring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">monoid_ring</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">monoid_ring</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">monoid_ring</span><span class=\"bp\">.</span><span class=\"n\">of_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid_hom</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">monoid_ring</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">m</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 183399196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576270231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> See Kevin's examples. If you want more, you should provide more context of the things you want to do...</p>",
        "id": 183425166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576301141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  what is that \"o\" next to the \"\\to\" arrow?</p>",
        "id": 183586133,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1576527389
    },
    {
        "content": "<p>Finitely supported map</p>",
        "id": 183586183,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576527434
    },
    {
        "content": "<p>You can copy-paste Kevin's code and use \"Go to definition\" (F12 in VScode)</p>",
        "id": 183586269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576527490
    }
]