[
    {
        "content": "<p>Hello everyone. Me and my friend have formalized the divergence of prime reciprocal series, theorem 81 from the 100 theorems list. However, the code is really messy, as it was almost the first thing we ever did with Lean. What is the best way to make the proof available?</p>",
        "id": 249857700,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629296954
    },
    {
        "content": "<p>Also, how are Lean proofs typically licensed, and how should this license be indicated?</p>",
        "id": 249857731,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629296967
    },
    {
        "content": "<p>Looks like there's also a PR open: <a href=\"https://github.com/leanprover-community/mathlib/pull/7274\">https://github.com/leanprover-community/mathlib/pull/7274</a></p>",
        "id": 249858114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629297107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> Welcome. Note that <a href=\"https://github.com/leanprover-community/mathlib/issues/7274\">#7274</a> is another PR that deals with nr 81 of the 100 thm list.</p>\n<p>Concerning sharing your code: is it 1 file, or multiple files? If it is 1 file, you can post it in a github gist. If it's more files, just post a link to the main file (assuming it's somewhere on github).</p>",
        "id": 249858132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629297115
    },
    {
        "content": "<p>Concerning license, see any file in mathlib <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/abel_ruffini.lean#L1L5\">https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/abel_ruffini.lean#L1L5</a></p>",
        "id": 249858285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629297164
    },
    {
        "content": "<p>Thank you. But why then does it say that 81 is not yet formalised in Lean <a href=\"https://leanprover-community.github.io/100-missing.html\">https://leanprover-community.github.io/100-missing.html</a> ?</p>",
        "id": 249858716,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629297335
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7274\">#7274</a> is a dead PR as I see it, the author has been MIA for ever</p>",
        "id": 249859173,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629297496
    },
    {
        "content": "<p>and I don't think they wanted to refactor / add more comments</p>",
        "id": 249859226,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629297523
    },
    {
        "content": "<p>what proof do you follow Vladimir?</p>",
        "id": 249859268,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629297539
    },
    {
        "content": "<p>The proof by Erdos.</p>",
        "id": 249859372,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629297587
    },
    {
        "content": "<p>same as the other pr then :) that's cool, can you share your code?</p>",
        "id": 249859530,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629297639
    },
    {
        "content": "<p>Well, I am not proficient with github yet, but I'll try : )<br>\n<a href=\"https://gist.github.com/SymmetryUnbroken/d2bee9459764681b8efbed9b3a6dd16f\">https://gist.github.com/SymmetryUnbroken/d2bee9459764681b8efbed9b3a6dd16f</a></p>",
        "id": 249860815,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629298142
    },
    {
        "content": "<p>Does it work?</p>",
        "id": 249860830,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629298152
    },
    {
        "content": "<p>yes, that works. If you change the extension to <code>.lean</code> then you also get syntax highlighting</p>",
        "id": 249862764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629298908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409003\">@Vladimir Goryachev</span> are you interested in contributing to mathlib? If so, can you identify a small chunk of code that you think can be reused outside of this proof?</p>",
        "id": 249863011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629298990
    },
    {
        "content": "<p>If you want to contribute to mathlib, a good first step would be to take such a small piece, and PR it to mathlib first.</p>",
        "id": 249863091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629299024
    },
    {
        "content": "<p>Yes, I am interested in contributing to mathlib.</p>",
        "id": 249864453,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629299575
    },
    {
        "content": "<p>As for a chunk of code - I have recursively defined the prime-counting function (a function giving the n-th prime number),  its inverse (number of primes smaller than a given number), proved that they are inverses, that they are monotone, and that the prime-counting function of n is greater than n. Is this in mathlib yet?</p>",
        "id": 249866707,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629300435
    },
    {
        "content": "<p>We've got a page with some tips for contributing to mathlib here: <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a></p>\n<p>I don't think we have the prime-counting function yet.</p>",
        "id": 249870249,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1629301852
    },
    {
        "content": "<p>Thank you! I'll try to edit the prime-counting part according to the styleguide and make a PR.</p>",
        "id": 249872278,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629302698
    },
    {
        "content": "<p>Actually, I've thought about it, and I don't use any properties of primes there (except that there are infinitely many primes), and I should probably make a general counting function (count (f : N -&gt; Prop) (n : N) : N), which, given a property and an index n, returns the n-th natural number having this property. And then define the inverse of this function, and prove their properties. Is it true that those things aren't implemented yet?</p>",
        "id": 249876142,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629304472
    },
    {
        "content": "<p>I very much suspect that already exists hidden somewhere, with extra carefulness around computability issues. Maybe Mario knows where that is?</p>",
        "id": 249876395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629304588
    },
    {
        "content": "<p>Another great thing you can do is use <code>encodable</code>. This will allow you to set up an explicit bijection between the naturals and the primes.</p>",
        "id": 249876505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629304646
    },
    {
        "content": "<p>But that would mean using types rather than predicates, right? For example, I would need to use the type of prime numbers, rather than a predicate of being prime.</p>",
        "id": 249877407,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629305033
    },
    {
        "content": "<p>Yes. This type is already defined as <code>nat.primes</code>. I don't know whether switching to types is a good idea, but you can definitely try.</p>",
        "id": 249877654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629305141
    },
    {
        "content": "<p>OK. But this still leaves the question if there is a counting function for predicates - I have briefly browsed the mathlib, and haven't found it yet.</p>",
        "id": 249879306,
        "sender_full_name": "Vladimir Goryachev",
        "timestamp": 1629305841
    },
    {
        "content": "<p>There is <code>nat.find</code>, but no <code>nat.nth_find</code>. Do you want it to take as arguments (1) the predicate, and (2) a proof that there are infinitely many nats that satisfy the predicate?</p>",
        "id": 249885248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629308323
    },
    {
        "content": "<p>I looked through the library, and it doesn't seem to exist yet...</p>",
        "id": 249885287,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629308345
    },
    {
        "content": "<p>All you need is a proof that there are at least <code>n</code> nats which satisfy the predicate</p>",
        "id": 249888364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629309690
    }
]