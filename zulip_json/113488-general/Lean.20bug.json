[
    {
        "content": "<p>While doing the <code>gsmul</code> refactor, I encountered a completely mysterious behavior in one file (may I say bug here?). I worked around it, but now that everything is merged people may have a look for fun. On current master, open the file <code>measure_theory/arithmetic.lean</code>, and go to line 311. Replace this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">has_measurable_gpow_aux</span> <span class=\"n\">G</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>with its proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">gpow_neg_succ_of_nat</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">measurable_id.pow_const</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It fails. The line <code>simp_rw</code> is not doing its job: it doesn't change anything. You can repeat this line as many times as you want, they don't fail, but they don't change the goal. Whatever I tried, I wasn't able to close this goal without using an auxiliary lemma. I guess something is messed up with the tactic state at this point, but I can't tell what (nothing looks suspicious even with <code>pp.all</code>).</p>",
        "id": 236813805,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1619778166
    }
]