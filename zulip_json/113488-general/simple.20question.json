[
    {
        "content": "<p>Can you tell me what is the different when we type: <br>\n\"<br>\nuniverse u<br>\n\\alpha : Type u<br>\n\"</p>\n<p>and <br>\n\"<br>\n\\alpha: Type*<br>\n\"</p>",
        "id": 163809914,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555777826
    },
    {
        "content": "<p>By the way,<br>\nI don't know how other people can create alpha symbol in chat message, it appears similarly VS code editor.</p>\n<p>Can you tell me the way to write the code that appear as in VS code editor?</p>",
        "id": 163810069,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555778153
    },
    {
        "content": "<p>use backtick <code> `A` </code> becomes <code>A</code></p>",
        "id": 163810260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555778510
    },
    {
        "content": "<p>for code snippets use</p>\n<div class=\"codehilite\"><pre><span></span>  ```lean\n  bla\n  ```\n</pre></div>",
        "id": 163810306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555778558
    },
    {
        "content": "<p>There is almost no difference between</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n</pre></div>\n\n\n<p>In the first case you give a name to the universe variable so you can refer to it, in the second it is anonymous</p>",
        "id": 163810371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555778683
    },
    {
        "content": "<p>there is no magic sauce for producing a <code>α</code> on chat, I copy paste from vscode</p>",
        "id": 163810388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555778752
    },
    {
        "content": "<p>Can we have this magic sauce please? I am getting sick of copy pasting from vscode</p>",
        "id": 163810841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555779377
    },
    {
        "content": "<p>``` \\alpha : Type</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 163881709,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">\\</span><span class=\"n\">alpha</span>\n</pre></div>",
        "id": 163881720,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905677
    },
    {
        "content": "<p><code>lean \\alpha</code></p>",
        "id": 163881725,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905706
    },
    {
        "content": "<p><code> \\alpha </code></p>",
        "id": 163881776,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905758
    },
    {
        "content": "<p>Hi, every one,<br>\nI am trying to type Greek letter in the message, but I did not manage it.</p>",
        "id": 163881788,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905816
    },
    {
        "content": "<p>Just copy it from <code>vscode</code></p>",
        "id": 163881832,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555905868
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 163881842,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905904
    },
    {
        "content": "<p><code>\\alpha</code></p>",
        "id": 163881859,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905932
    },
    {
        "content": "<p><code>\\forall</code></p>",
        "id": 163881865,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1555905950
    },
    {
        "content": "<p>Do people generally use VSCode for Lean? I do, since it was recommended by my professor, and I like the extension. But sometimes it takes a while to import documents and resolve proof tactics when my file is pretty long. Is this a common issue?</p>",
        "id": 163898264,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555932755
    },
    {
        "content": "<p>Greg, you should pre-compile your project with <code>leanpkg build</code> at the command line while in the directory of your project---that way the whole thing won't have to recompile every time you start a new session. If you use mathlib, you can also from the root directory of your project do <code>lean --make _target/mathlib</code> to pre-compile the whole of mathilib, which will take ages, but will be worth it if you use it often (the previous command only compiles the pieces of mathlib which your project currently uses)</p>",
        "id": 163898555,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555933243
    },
    {
        "content": "<p>Ah, I see. I do use mathlib, so this is very useful.</p>",
        "id": 163898637,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555933342
    },
    {
        "content": "<p>Everything should be really speedy after-the-fact!</p>",
        "id": 163898725,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555933478
    },
    {
        "content": "<p>I got the error \"failed to start child process.\" I assume that has to do with how I've set up my folders? I'm not familiar with Windows, as before I started needing Windows-exclusive software I was only using Linux. How would I go about fixing this?</p>",
        "id": 163898853,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555933682
    },
    {
        "content": "<p>Ah, I think this is due to how you are invoking your copy of<code>lean</code>---there is not very good support currently for <code>leanpkg</code> on windows. Instead, you have to be inside a unix-emulated shell, e.g. git for windows, or msys2. My suggestion regarding the direct <code>lean --make</code> should still work though I think</p>",
        "id": 163899329,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555934347
    },
    {
        "content": "<p>okay, great. That's really annoying, but at least --make is still usable. Thank you so much.</p>",
        "id": 163899407,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555934437
    },
    {
        "content": "<p>I never compile mathlib -- I download precompiled versions</p>",
        "id": 163904573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555940537
    },
    {
        "content": "<blockquote>\n<p>I am getting sick of copy pasting from vscode</p>\n</blockquote>\n<p>Some browser add-ons let you use an external text editor to type in text fields on web pages.</p>\n<ul>\n<li>GhostText: <a href=\"https://github.com/GhostText/GhostText\" target=\"_blank\" title=\"https://github.com/GhostText/GhostText\">https://github.com/GhostText/GhostText</a></li>\n</ul>",
        "id": 163966505,
        "sender_full_name": "Samuel Lelièvre",
        "timestamp": 1556001967
    },
    {
        "content": "<p>what is an emetric space?</p>",
        "id": 164064374,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556096154
    },
    {
        "content": "<p>so let me say that I don't know, but I can guess</p>",
        "id": 164064433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096219
    },
    {
        "content": "<p>because \"e\" usually stands for \"extended\"</p>",
        "id": 164064446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096235
    },
    {
        "content": "<p>and in the context of the real numbers this usually means \"add +infinity or +-infinity\"</p>",
        "id": 164064449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096253
    },
    {
        "content": "<p>for example <code>ennreal</code> means \"extended non-negative reals\"</p>",
        "id": 164064457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096266
    },
    {
        "content": "<p>ok thx</p>",
        "id": 164064460,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556096270
    },
    {
        "content": "<p>which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">∞</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 164064467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096277
    },
    {
        "content": "<p>so my <em>guess</em> is that an emetric space allows <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>)</mo><mo>=</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">d(x,y)=+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">d</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\">+</span><span class=\"mord mathrm\">∞</span></span></span></span></p>",
        "id": 164064514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096295
    },
    {
        "content": "<p>just looking in mathlib, surprised to see gromov hausdorff distance</p>",
        "id": 164064517,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1556096302
    },
    {
        "content": "<p>mathlib is full of surprises</p>",
        "id": 164064543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096368
    },
    {
        "content": "<p>That arrived only a few weeks ago IIRC</p>",
        "id": 164064545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096377
    },
    {
        "content": "<p>Sebastien Gouezel put it there I think</p>",
        "id": 164064549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556096386
    }
]