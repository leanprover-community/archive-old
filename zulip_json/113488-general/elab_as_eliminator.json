[
    {
        "content": "<p>Is there an explanation of what <code>elab_as_eliminator</code> actually does somewhere? I once tried reading the source, but wasn't enlightened.<br>\nI know there is a selection bias at work here, in that I never notice when it does the right thing, but several times I've found that it fails to infer apparently obvious type parameters, where <code>elab_with_expected_type</code> succeeds.</p>",
        "id": 128740170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530135704
    },
    {
        "content": "<p>Here is a toy example where <code>elab_as_eliminator</code> fails but <code>elab_with_expected_type</code> succeeds:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equal_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mod_setoid</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">equal_mod</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Z_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">mod_setoid</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_with_expected_type</span><span class=\"o\">]</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mod_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Z_mod</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128740610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530136364
    },
    {
        "content": "<p><code>elab_as_eliminator</code> is meant for eliminators, where lean has to infer a higher order argument, namely the \"motive\"</p>",
        "id": 128740763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530136650
    },
    {
        "content": "<p>It's not a good fit for nondependent elimination since you can just use the usual first order unification</p>",
        "id": 128740806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530136684
    },
    {
        "content": "<p>OK, that was what I suspected, but wasn't sure. So ideally, methods like <code>lift</code> and <code>lift_on</code> shouldn't have that attribute, since they are nondependent</p>",
        "id": 128740842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530136777
    },
    {
        "content": "<p>something like <code>quot.rec_on</code> would be better</p>",
        "id": 128740909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530136836
    },
    {
        "content": "<p>Even then, this strategy is only appropriate when you want to infer the motive from the types of the arguments, rather than from the return type, right?</p>",
        "id": 128740977,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530136938
    },
    {
        "content": "<p>Assuming the return type is something like <code>β q</code>, for which the higher-order unification problem is trivial</p>",
        "id": 128740984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530136973
    },
    {
        "content": "<p>The motive is inferred from the return type, not the types of the arguments</p>",
        "id": 128741005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137016
    },
    {
        "content": "<p>Oh hmm, I see</p>",
        "id": 128741010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530137031
    },
    {
        "content": "<p>but even then the problem is not necessarily trivial</p>",
        "id": 128741014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530137041
    },
    {
        "content": "<p>it finds instances of the value being inducted on and replaces them with a variable</p>",
        "id": 128741071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137089
    },
    {
        "content": "<p>and that becomes the motive</p>",
        "id": 128741075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137101
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (x y : ℕ) : x + y = y + x :=\nnat.rec_on (x + y)\n  _ -- ⊢ 0 = y + x\n  _ -- ⊢ ∀ (n : ℕ), n = y + x → nat.succ n = y + x\n</pre></div>",
        "id": 128741148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137184
    },
    {
        "content": "<p>So why does it fail on the <code>mod_dvd</code> example? Wouldn't it conclude that <code>quot.mk _ a : Z_mod n</code>?</p>",
        "id": 128741162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530137257
    },
    {
        "content": "<p>vs:</p>\n<div class=\"codehilite\"><pre><span></span>local attribute [elab_with_expected_type] nat.rec_on\nexample (x y : ℕ) : x + y = y + x :=\nnat.rec_on (x + y) _ _\n-- unexpected argument at application\n--   nat.rec_on (x + y)\n-- given argument\n--   x + y\n-- expected argument\n--   y + x\n</pre></div>\n\n\n<p>The reason this error is reported is since the output type is <code>C n</code>, without doing higher order unification it matches against <code>eq (x + y) (y + x)</code> so it expects the major premise to be <code>y+x</code></p>",
        "id": 128741233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137350
    },
    {
        "content": "<p>it seems to figure this out if I give less detail in the last argument, for example replacing it by <code>(λ a a' h, sorry)</code></p>",
        "id": 128741235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530137356
    },
    {
        "content": "<p>You have to put a <code>by exact</code> in the right place, to delay the elaboration of the let match</p>",
        "id": 128741405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def mod_dvd (n k : ℤ) : Z_mod (n * k) → Z_mod n :=\nλ x, quot.lift_on x\n  (λ a, quot.mk _ a)\n  (by exact λ a a&#39; ⟨c, h⟩, quot.sound ⟨k * c, by rw ←mul_assoc; exact h⟩)\n</pre></div>",
        "id": 128741408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137570
    },
    {
        "content": "<p>this works</p>",
        "id": 128741411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530137573
    }
]