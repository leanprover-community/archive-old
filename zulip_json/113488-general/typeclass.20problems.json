[
    {
        "content": "<p>This loop is breaking everything</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">25</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_99</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_97</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_101</span> <span class=\"err\">?</span><span class=\"n\">x_102</span> <span class=\"err\">?</span><span class=\"n\">x_103</span> <span class=\"err\">?</span><span class=\"n\">x_104</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">26</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_104</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_101</span> <span class=\"err\">?</span><span class=\"n\">x_102</span> <span class=\"err\">?</span><span class=\"n\">x_103</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_105</span> <span class=\"err\">?</span><span class=\"n\">x_106</span> <span class=\"err\">?</span><span class=\"n\">x_107</span> <span class=\"err\">?</span><span class=\"n\">x_108</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">27</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_108</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_105</span> <span class=\"err\">?</span><span class=\"n\">x_106</span> <span class=\"err\">?</span><span class=\"n\">x_107</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_closure</span><span class=\"bp\">.</span><span class=\"n\">to_algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_109</span> <span class=\"err\">?</span><span class=\"n\">x_110</span> <span class=\"err\">?</span><span class=\"n\">x_111</span> <span class=\"err\">?</span><span class=\"n\">x_112</span>\n</pre></div>",
        "id": 128143681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529100305
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">alg_closed_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">alg_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">deg</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">field_extension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">field</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">algebraic_field_extension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">algebraic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">algebraic_closure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">alg_closed_field</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">algebraic_field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 128143694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529100332
    },
    {
        "content": "<p>I'm not very good at dealing with typeclasses</p>",
        "id": 128143821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529100517
    },
    {
        "content": "<p>somehow the same setting with <code>ring</code> instead of <code>field</code> doesn't cause this problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>This doesn't cause any loops</p>",
        "id": 128144488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101406
    },
    {
        "content": "<p>solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_alg_closed_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">alg_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">deg</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">field_extension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">field</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_algebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_algebraic_field_extension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">algebraic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_algebraic_closure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">is_alg_closed_field</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">is_algebraic_field_extension</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 128144728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101725
    },
    {
        "content": "<p>TLDR: change <code>algebraic_field_extension</code> (not <code>Prop</code>) to <code>is_algebraic_field_extension</code> (<code>Prop</code>) etc</p>",
        "id": 128144742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101744
    },
    {
        "content": "<p>update: it is not true that the <code>algebra</code> causes no problem</p>",
        "id": 128144825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101832
    },
    {
        "content": "<blockquote>\n<p><code>out_param (field ?x_97)</code></p>\n</blockquote>\n<p>not the first time I've seen this today</p>",
        "id": 128144857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529101895
    },
    {
        "content": "<p>but <code>module</code> seems to be doing fine</p>",
        "id": 128144919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101937
    },
    {
        "content": "<p>What caused this typeclass search? You never want to find arbitrary fields</p>",
        "id": 128144929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529101960
    },
    {
        "content": "<p>what stops <code>ring.to_module</code> and <code>class module ... [ring _]</code> from forming a loop?</p>",
        "id": 128144937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529101970
    },
    {
        "content": "<blockquote>\n<p>What caused this typeclass search? You never want to find arbitrary fields</p>\n</blockquote>\n<p>I have something involving rings and no fields at all. The searcher wants to know that it has addition. Somehow it got to fields, and then it started the loop</p>",
        "id": 128145013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102058
    },
    {
        "content": "<p>I don't mean just <code>field ?</code>, but also <code>ring ?</code> and other such things</p>",
        "id": 128145033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529102097
    },
    {
        "content": "<p>the bad sign is a class on a metavar</p>",
        "id": 128145047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529102116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"n\">class</span><span class=\"bp\">-</span><span class=\"kn\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"err\">?</span><span class=\"n\">x_1</span> <span class=\"err\">?</span><span class=\"n\">x_2</span> <span class=\"err\">?</span><span class=\"n\">x_3</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"err\">?</span><span class=\"n\">x_4</span> <span class=\"err\">?</span><span class=\"n\">x_5</span> <span class=\"err\">?</span><span class=\"n\">x_6</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"err\">?</span><span class=\"n\">x_7</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsigned</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"err\">?</span><span class=\"n\">x_8</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">no_zero_divisors</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"err\">?</span><span class=\"n\">x_9</span> <span class=\"err\">?</span><span class=\"n\">x_10</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">no_zero_divisors</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_no_zero_divisors</span> <span class=\"err\">?</span><span class=\"n\">x_11</span> <span class=\"err\">?</span><span class=\"n\">x_12</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_nonneg_ring</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"err\">?</span><span class=\"n\">x_13</span> <span class=\"err\">?</span><span class=\"n\">x_14</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_domain</span> <span class=\"err\">?</span><span class=\"n\">x_13</span> <span class=\"err\">?</span><span class=\"n\">x_14</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_nonneg_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"err\">?</span><span class=\"n\">x_15</span> <span class=\"err\">?</span><span class=\"n\">x_16</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"err\">?</span><span class=\"n\">x_15</span> <span class=\"err\">?</span><span class=\"n\">x_16</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_field</span> <span class=\"err\">?</span><span class=\"n\">x_17</span> <span class=\"err\">?</span><span class=\"n\">x_18</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_ring</span> <span class=\"err\">?</span><span class=\"n\">x_15</span> <span class=\"err\">?</span><span class=\"n\">x_16</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_comm_ring</span> <span class=\"err\">?</span><span class=\"n\">x_17</span> <span class=\"err\">?</span><span class=\"n\">x_18</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_18</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_ordered_comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_nonneg_ring</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_ordered_comm_ring</span> <span class=\"err\">?</span><span class=\"n\">x_19</span> <span class=\"err\">?</span><span class=\"n\">x_20</span> <span class=\"err\">?</span><span class=\"n\">x_21</span> <span class=\"err\">?</span><span class=\"n\">x_22</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_18</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_ordered_comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_comm_ring</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_18</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_ordered_comm_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_decidable_linear_ordered_comm_ring</span> <span class=\"err\">?</span><span class=\"n\">x_19</span> <span class=\"err\">?</span><span class=\"n\">x_20</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"err\">?</span><span class=\"n\">x_13</span> <span class=\"err\">?</span><span class=\"n\">x_14</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">division_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">to_division_ring</span> <span class=\"err\">?</span><span class=\"n\">x_15</span> <span class=\"err\">?</span><span class=\"n\">x_16</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_17</span> <span class=\"err\">?</span><span class=\"n\">x_18</span> <span class=\"err\">?</span><span class=\"n\">x_19</span> <span class=\"err\">?</span><span class=\"n\">x_20</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_20</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_17</span> <span class=\"n\">α</span> <span class=\"err\">?</span><span class=\"n\">x_19</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_21</span> <span class=\"err\">?</span><span class=\"n\">x_22</span> <span class=\"err\">?</span><span class=\"n\">x_23</span> <span class=\"err\">?</span><span class=\"n\">x_24</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_24</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_21</span> <span class=\"n\">α</span> <span class=\"err\">?</span><span class=\"n\">x_23</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_closure</span><span class=\"bp\">.</span><span class=\"n\">to_algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_25</span> <span class=\"err\">?</span><span class=\"n\">x_26</span> <span class=\"err\">?</span><span class=\"n\">x_27</span> <span class=\"err\">?</span><span class=\"n\">x_28</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_27</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_25</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_29</span> <span class=\"err\">?</span><span class=\"n\">x_30</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"err\">?</span><span class=\"n\">x_32</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_32</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_29</span> <span class=\"err\">?</span><span class=\"n\">x_30</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_33</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"err\">?</span><span class=\"n\">x_36</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_33</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">algebraic_closure</span><span class=\"bp\">.</span><span class=\"n\">to_algebraic_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"err\">?</span><span class=\"n\">x_40</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_41</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"err\">?</span><span class=\"n\">x_44</span>\n</pre></div>",
        "id": 128145075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102161
    },
    {
        "content": "<p>loop the last 3 lines</p>",
        "id": 128145120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102172
    },
    {
        "content": "<p><code>field_extension.to_field</code></p>",
        "id": 128145133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529102207
    },
    {
        "content": "<p>kill it</p>",
        "id": 128145134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529102216
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">field_extension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">field</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 128145145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102231
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 128145161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102263
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128145162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102265
    },
    {
        "content": "<p>(not that <code>algebra</code> is not causing problem)</p>",
        "id": 128145165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102274
    },
    {
        "content": "<p>why does <code>module</code> have no problem</p>",
        "id": 128145204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what should I replace it with?</p>",
        "id": 128145313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102500
    },
    {
        "content": "<p>I see</p>",
        "id": 128145315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529102510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">neg_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subring</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subring</span> <span class=\"n\">α</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span>            <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">add_mem</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span>      <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">add_assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span>           <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">add_neg_self</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"err\">$</span> <span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">neg_mem</span> <span class=\"err\">$</span> <span class=\"n\">one_mem</span> <span class=\"n\">S</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">zero_add</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">add_zero</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span>            <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">neg_mem</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">add_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span>            <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mul_mem</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span>      <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span>            <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">one_mem</span> <span class=\"n\">S</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span>        <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">one_mul</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span>        <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">left_distrib</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">right_distrib</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"err\">$</span> <span class=\"n\">mul_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 128147101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529105386
    },
    {
        "content": "<p>will this <code>instance</code> cause problems?</p>",
        "id": 128147109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529105396
    },
    {
        "content": "<p>if so, what should I replace it with?</p>",
        "id": 128147157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529105406
    },
    {
        "content": "<p>adding <code>by letI := subring.to_comm_ring _ S</code> to every definition and theorem is not very feasible</p>",
        "id": 128150369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529112003
    },
    {
        "content": "<p>and is wasting me a lot of time</p>",
        "id": 128150378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529112006
    },
    {
        "content": "<p>but as soon as I make it an instance, everything crashes</p>",
        "id": 128150382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529112018
    },
    {
        "content": "<p>what is this</p>",
        "id": 128162502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529140304
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Hausdorff_abelianization</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">left_cosets</span> <span class=\"o\">(</span><span class=\"n\">abelianization</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128162503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529140307
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_60</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</pre></div>",
        "id": 128162544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529140329
    },
    {
        "content": "<p>Lean, they <em>are</em> the same</p>",
        "id": 128162755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529140903
    },
    {
        "content": "<p>if <code>subring.to_comm_ring</code> causes problems then why doesn't <code>subtype.group</code> cause problems?</p>",
        "id": 128165992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529148415
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it can be avoided by using universes instead of <code>Type*</code></p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/subject/unfolding.20notation.20in.20theorem.20vs.20def.2Finstance/near/128167978\" title=\"#narrow/stream/113488-general/subject/unfolding.20notation.20in.20theorem.20vs.20def.2Finstance/near/128167978\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/unfolding.20notation.20in.20theorem.20vs.20def.2Finstance/near/128167978</a></p>",
        "id": 128168992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155748
    },
    {
        "content": "<p>oh and of <strong><em>course</em></strong> the same trick applies to this case</p>",
        "id": 128168993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155756
    },
    {
        "content": "<p>there's no loop any more</p>",
        "id": 128168994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155763
    },
    {
        "content": "<p>once I use <code>Type u</code> instead of <code>Type*</code></p>",
        "id": 128168995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155770
    },
    {
        "content": "<blockquote>\n<p>Lean, they <em>are</em> the same</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/subject/typeclass.20problems/near/128162755\" title=\"#narrow/stream/113488-general/subject/typeclass.20problems/near/128162755\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/typeclass.20problems/near/128162755</a></p>",
        "id": 128169044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155868
    },
    {
        "content": "<p>ditto</p>",
        "id": 128169046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529155869
    },
    {
        "content": "<p>Is this a good instance?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Hausdorff_abelianization</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">left_rel</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">commutator_subgroup</span> <span class=\"n\">G</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 128174540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529168622
    },
    {
        "content": "<p>A local instance maybe</p>",
        "id": 128174678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529168894
    },
    {
        "content": "<p>it looks a bit domain specific</p>",
        "id": 128174679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529168903
    },
    {
        "content": "<p>domain specific?</p>",
        "id": 128174680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529168911
    },
    {
        "content": "<p>is there a reason that should be the canonical equivalence on any top group?</p>",
        "id": 128174681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529168930
    },
    {
        "content": "<p>it's the functor from TopGrp to AbelianHasudorffTopGrp</p>",
        "id": 128174686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529168949
    },
    {
        "content": "<p>Kenny, for every topological group G, there should be at most 1 instance of <code>setoid G</code>.</p>",
        "id": 128174688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529168979
    },
    {
        "content": "<p>I see</p>",
        "id": 128174689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529168986
    },
    {
        "content": "<p>ok this isn't canonical then</p>",
        "id": 128174690,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529168991
    },
    {
        "content": "<p>So you should probably not make this an instance. But possibly define AbHausTopGrp, and make it an instance of that...</p>",
        "id": 128174737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529169029
    },
    {
        "content": "<p>I'm glad I didn't switch the first two words of the name of the category... :D</p>",
        "id": 128174743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529169088
    },
    {
        "content": "<p>I don't get what would be wrong with that? ... Am I overly naive, and missing a joke?</p>",
        "id": 128174782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529169170
    },
    {
        "content": "<p>it sounds similar to a rude word in german</p>",
        "id": 128174789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529169192
    },
    {
        "content": "<p>Ach so, ich muss noch viel Deutsch üben. Und ich kenn kein unhöfliche Worten.</p>",
        "id": 128174830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529169298
    },
    {
        "content": "<p>\"Hau ab\" means \"piss off\"</p>",
        "id": 128174838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529169337
    },
    {
        "content": "<p>Wunderbar</p>",
        "id": 128174879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529169381
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/THVijpQP7DblIbSyWC9G2hGx/2018-06-17-2.png\" target=\"_blank\" title=\"2018-06-17-2.png\">2018-06-17-2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/THVijpQP7DblIbSyWC9G2hGx/2018-06-17-2.png\" target=\"_blank\" title=\"2018-06-17-2.png\"><img src=\"/user_uploads/3121/THVijpQP7DblIbSyWC9G2hGx/2018-06-17-2.png\"></a></div>",
        "id": 128218541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529273549
    },
    {
        "content": "<p>when I turn <code>trace.class_instances</code> on, there's nothing peculiar, except the <code>has_sizeof</code> thing getting pretty long</p>",
        "id": 128218546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529273584
    },
    {
        "content": "<p>that option is not really helpful in my experience</p>",
        "id": 128218550,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529273617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 128218552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529273621
    },
    {
        "content": "<p>oh and the depth of the class instance search never went to 6</p>",
        "id": 128219542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529275690
    },
    {
        "content": "<p>and I don't think <code>cogroup.base_change_left</code> is the problem, after looking at the trace</p>",
        "id": 128219604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529275904
    },
    {
        "content": "<p>it's here: <a href=\"https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L136\" target=\"_blank\" title=\"https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L136\">https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L136</a></p>",
        "id": 128219700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276110
    },
    {
        "content": "<p>Why does it need an instance of <code>has_sizeof</code>?</p>",
        "id": 128219741,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276203
    },
    {
        "content": "<p>no idea</p>",
        "id": 128219742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276212
    },
    {
        "content": "<p>to build a structure, I think?</p>",
        "id": 128219743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276221
    },
    {
        "content": "<p>Please help me, my deadline is in like 12 hours</p>",
        "id": 128219748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276236
    },
    {
        "content": "<p>Your screenshot is not telling me much. If you comment one field declaration at a time, when does it stop failing?</p>",
        "id": 128219751,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276255
    },
    {
        "content": "<p>as soon as I remove the last field</p>",
        "id": 128219752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> is there other information I can provide?</p>",
        "id": 128219907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276606
    },
    {
        "content": "<p>I think your project needs mathlib</p>",
        "id": 128219909,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276610
    },
    {
        "content": "<p>I'm building it on my machine to have a closer look</p>",
        "id": 128219910,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276626
    },
    {
        "content": "<p>thank you very much</p>",
        "id": 128219911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276633
    },
    {
        "content": "<p>yes, it does require mathlib</p>",
        "id": 128219912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276636
    },
    {
        "content": "<p>Is it possible you did not commit the latest version of <code>leanpkg.toml</code>? (I don't need it, I can fix it but in general, that makes things smoother for people trying your project)</p>",
        "id": 128219951,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276694
    },
    {
        "content": "<p>oh I didn't really set it up</p>",
        "id": 128219960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276714
    },
    {
        "content": "<p>Ah ok. Just to be sure, do you use Lean 3.4.1 and the latest mathlib?</p>",
        "id": 128219961,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529276753
    },
    {
        "content": "<p>yes</p>",
        "id": 128219999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276764
    },
    {
        "content": "<p>ok not exactly the latest</p>",
        "id": 128220051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276922
    },
    {
        "content": "<p>i'm on mathlib commit fe590ca272a41bb321a13be505964e78cad1e731</p>",
        "id": 128220052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276938
    },
    {
        "content": "<p>third from latest</p>",
        "id": 128220055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529276942
    },
    {
        "content": "<p>In this expression <code>(tensor_a F split.S T)</code> you get into trouble because <code>split.S</code> is a set but a type is expected. If you replace it with <code>subtype split.S</code>, type is required to have a <code>comm_ring</code> instance which you only have for <code>T</code></p>",
        "id": 128220966,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279016
    },
    {
        "content": "<p>:o</p>",
        "id": 128220967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279030
    },
    {
        "content": "<p>thanks</p>",
        "id": 128220968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279032
    },
    {
        "content": "<p>do you have a fix?</p>",
        "id": 128220970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279039
    },
    {
        "content": "<p>No, it really depends on what you're trying to do. If you actually want <code>subtype split.S</code>, you'd need to add <code>[comm_ring (subtype split.S)]</code> to the local instances which would get hairy because <code>split</code> is a field. Maybe replacing <code>split.S</code> with <code>T</code> would suit your purpose, in which case, the fit is perfect because you already have a <code>comm_ring T</code> instance</p>",
        "id": 128221062,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279168
    },
    {
        "content": "<p>I can't just change my deifnition like that?</p>",
        "id": 128221064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279205
    },
    {
        "content": "<p>Which one?</p>",
        "id": 128221065,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279219
    },
    {
        "content": "<p>replacing <code>split.S</code> with <code>T</code>?</p>",
        "id": 128221070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279227
    },
    {
        "content": "<p>That might work. I haven't tried it but that would fix that particular problem</p>",
        "id": 128221072,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279247
    },
    {
        "content": "<p>I mean, it would be a wrong definition</p>",
        "id": 128221074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279267
    },
    {
        "content": "<p>What would be the right definition?</p>",
        "id": 128221116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279286
    },
    {
        "content": "<p><code>split.S</code> as it is</p>",
        "id": 128221117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279294
    },
    {
        "content": "<p>That would be nonsense: that's not type correct.</p>",
        "id": 128221121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279321
    },
    {
        "content": "<p>Unless your <code>tensor_a</code> definition is wrong and it should take a set there, not a type</p>",
        "id": 128221129,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279356
    },
    {
        "content": "<p>I'm coercing a set to a type</p>",
        "id": 128221130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279364
    },
    {
        "content": "<p>it's done automatically</p>",
        "id": 128221134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279382
    },
    {
        "content": "<p>I do it every time</p>",
        "id": 128221135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279385
    },
    {
        "content": "<p>Right but that type is then expected to be a commutative ring. I'm not sure how that can be proved automatically</p>",
        "id": 128221186,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279487
    },
    {
        "content": "<p>I have a working version above it, one can trace class instance</p>",
        "id": 128221190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279515
    },
    {
        "content": "<p>I think it will go through subfield -&gt; field -&gt; comm_ring</p>",
        "id": 128221228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279523
    },
    {
        "content": "<p>How do you prove that it's a subfield?</p>",
        "id": 128221235,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">finite_Galois_intermediate_extension</span><span class=\"bp\">.</span><span class=\"n\">to_subfield</span>\n</pre></div>",
        "id": 128221237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279565
    },
    {
        "content": "<p>L132 of field_extensions.lean</p>",
        "id": 128221239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279576
    },
    {
        "content": "<p>right, I just realized, there should be no problem, because there's a working version right above it!</p>",
        "id": 128221248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279597
    },
    {
        "content": "<p>Which line?</p>",
        "id": 128221291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279681
    },
    {
        "content": "<p>The <code>#check</code> one</p>",
        "id": 128221292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279691
    },
    {
        "content": "<p>L139</p>",
        "id": 128221293,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279698
    },
    {
        "content": "<p>oops</p>",
        "id": 128221301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279715
    },
    {
        "content": "<p>L123</p>",
        "id": 128221302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279717
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L123\" target=\"_blank\" title=\"https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L123\">https://github.com/kckennylau/local-langlands-abelian/blob/master/src/torus.lean#L123</a></p>",
        "id": 128221303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279720
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">AC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_algebraic_closure</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cogroup</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">finite_Galois_intermediate_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rank</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"bp\">@</span><span class=\"n\">cogroup_iso</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">tensor_a</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_a</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">rank</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">cogroup</span><span class=\"bp\">.</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span><span class=\"bp\">.</span><span class=\"n\">cogroup</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128221304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279725
    },
    {
        "content": "<p>If I change that <code>check</code> into a <code>def</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">AC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_algebraic_closure</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cogroup</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">finite_Galois_intermediate_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rank</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"bp\">@</span><span class=\"n\">cogroup_iso</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">tensor_a</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_a</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">rank</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">cogroup</span><span class=\"bp\">.</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span><span class=\"bp\">.</span><span class=\"n\">cogroup</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128221344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279794
    },
    {
        "content": "<p>I get I lot of errors</p>",
        "id": 128221345,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279801
    },
    {
        "content": "<p>curious</p>",
        "id": 128221352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279830
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/K4n0zheF40urE2YaifViOPKA/Screen-Shot-2018-06-17-at-7.57.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-06-17-at-7.57.01-PM.png\">Screen-Shot-2018-06-17-at-7.57.01-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K4n0zheF40urE2YaifViOPKA/Screen-Shot-2018-06-17-at-7.57.01-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-06-17-at-7.57.01-PM.png\"><img src=\"/user_uploads/3121/K4n0zheF40urE2YaifViOPKA/Screen-Shot-2018-06-17-at-7.57.01-PM.png\"></a></div>",
        "id": 128221354,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279848
    },
    {
        "content": "<p>I think you're asking a lot of type class inference</p>",
        "id": 128221356,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279868
    },
    {
        "content": "<p>heh...</p>",
        "id": 128221395,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279886
    },
    {
        "content": "<p>how about I move them before the colon</p>",
        "id": 128221397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">AC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_algebraic_closure</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cogroup</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">finite_Galois_intermediate_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rank</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">cogroup_iso</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">tensor_a</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tensor_a</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">rank</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">cogroup</span><span class=\"bp\">.</span><span class=\"n\">base_change_left</span> <span class=\"n\">F</span> <span class=\"n\">split</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">GL₁ⁿ</span><span class=\"bp\">.</span><span class=\"n\">cogroup</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128221398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279923
    },
    {
        "content": "<p>no errors!</p>",
        "id": 128221399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279925
    },
    {
        "content": "<p>also I looked at the trace as I said before</p>",
        "id": 128221404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279943
    },
    {
        "content": "<p>You're right, I didn't do it well</p>",
        "id": 128221407,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529279947
    },
    {
        "content": "<p>there is no issue with the typeclass inferences</p>",
        "id": 128221408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279950
    },
    {
        "content": "<p>and the max depth is 5</p>",
        "id": 128221409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279956
    },
    {
        "content": "<p>there should not be any error</p>",
        "id": 128221412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529279972
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">torus</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">AC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_algebraic_closure</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cogroup</span> <span class=\"n\">F</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">finite_Galois_intermediate_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">rank</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">splits</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">F</span> <span class=\"n\">AC</span> <span class=\"n\">T</span> <span class=\"n\">split</span> <span class=\"n\">rank</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128221463,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529280040
    },
    {
        "content": "<p>what the actual</p>",
        "id": 128221471,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you need to see this</p>",
        "id": 128221475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what do you think</p>",
        "id": 128221518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280152
    },
    {
        "content": "<p>I'm not actually sure why the other one wouldn't work. In general, there's nothing wrong with breaking down your definitions into smaller pieces though</p>",
        "id": 128221525,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529280219
    },
    {
        "content": "<p>I see</p>",
        "id": 128221567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> how should I break this loop?</p>",
        "id": 128221763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280766
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_6</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subfield</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"err\">?</span><span class=\"n\">x_37</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">topological_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"err\">?</span><span class=\"n\">x_39</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_linear_ordered_field</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"err\">?</span><span class=\"n\">x_37</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"o\">:</span> <span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">discrete_linear_ordered_field</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_31</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">field_rat</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">discrete_linear_ordered_field</span><span class=\"bp\">.</span><span class=\"n\">to_discrete_field</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"err\">?</span><span class=\"n\">x_37</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"o\">:</span> <span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">discrete_linear_ordered_field</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_30</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_28</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subfield</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"err\">?</span><span class=\"n\">x_37</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subfield</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finite_Galois_intermediate_extension</span><span class=\"bp\">.</span><span class=\"n\">to_subfield</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"err\">?</span><span class=\"n\">x_40</span> <span class=\"err\">?</span><span class=\"n\">x_41</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"err\">?</span><span class=\"n\">x_44</span> <span class=\"err\">?</span><span class=\"n\">x_45</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_41</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_8</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_9</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_intermediate_field</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension&#39;</span> <span class=\"err\">?</span><span class=\"n\">x_46</span> <span class=\"err\">?</span><span class=\"n\">x_47</span> <span class=\"err\">?</span><span class=\"n\">x_48</span> <span class=\"err\">?</span><span class=\"n\">x_49</span> <span class=\"err\">?</span><span class=\"n\">x_50</span> <span class=\"err\">?</span><span class=\"n\">x_51</span> <span class=\"err\">?</span><span class=\"n\">x_52</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_intermediate_field</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_53</span> <span class=\"err\">?</span><span class=\"n\">x_54</span> <span class=\"err\">?</span><span class=\"n\">x_55</span> <span class=\"err\">?</span><span class=\"n\">x_56</span> <span class=\"err\">?</span><span class=\"n\">x_57</span> <span class=\"err\">?</span><span class=\"n\">x_58</span> <span class=\"err\">?</span><span class=\"n\">x_59</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_algebraic_closure</span><span class=\"bp\">.</span><span class=\"n\">to_is_alg_closed_field</span> <span class=\"err\">?</span><span class=\"n\">x_46</span> <span class=\"err\">?</span><span class=\"n\">x_47</span> <span class=\"err\">?</span><span class=\"n\">x_48</span> <span class=\"err\">?</span><span class=\"n\">x_49</span> <span class=\"err\">?</span><span class=\"n\">x_50</span> <span class=\"err\">?</span><span class=\"n\">x_51</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_48</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_46</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_49</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_50</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_9</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_50</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_intermediate_field</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension&#39;</span> <span class=\"err\">?</span><span class=\"n\">x_52</span> <span class=\"err\">?</span><span class=\"n\">x_53</span> <span class=\"err\">?</span><span class=\"n\">x_54</span> <span class=\"err\">?</span><span class=\"n\">x_55</span> <span class=\"err\">?</span><span class=\"n\">x_56</span> <span class=\"err\">?</span><span class=\"n\">x_57</span> <span class=\"err\">?</span><span class=\"n\">x_58</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_50</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">field_extension</span> <span class=\"n\">AC</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_intermediate_field</span><span class=\"bp\">.</span><span class=\"n\">to_field_extension</span> <span class=\"err\">?</span><span class=\"n\">x_59</span> <span class=\"err\">?</span><span class=\"n\">x_60</span> <span class=\"err\">?</span><span class=\"n\">x_61</span> <span class=\"err\">?</span><span class=\"n\">x_62</span> <span class=\"err\">?</span><span class=\"n\">x_63</span> <span class=\"err\">?</span><span class=\"n\">x_64</span> <span class=\"err\">?</span><span class=\"n\">x_65</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</pre></div>",
        "id": 128221764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280768
    },
    {
        "content": "<p>There seems to be a circular dependency between your instances. You should try to guarantee that something decreases (syntactically) whenever you apply an instance. For example, <code>instance [decidable_eq a] : decidable_eq (list a) := ... </code> is such an instance. It is about <code>list a</code> and all the instances it relies on involve simpler expressions.</p>",
        "id": 128221823,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529280951
    },
    {
        "content": "<p>sorry but could you explain what you mean by decreasing?</p>",
        "id": 128221863,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529280996
    },
    {
        "content": "<p>If you compare <code>a</code> and <code>list a</code> (one is a type in an assumed instance, the other, in the head of the instance) <code>list a</code> is a more complex expression than <code>a</code>. That means that if I look for an instance of <code>decidable_eq (list a)</code> and I apply the above instance, I'm decreasing the size of my problem so I'm getting closer to a solution. If every instance decreases the size of the problem, you can't search forever. (just like with structural recursion)</p>",
        "id": 128221918,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281181
    },
    {
        "content": "<p>hmm... but there are times at which I would need to infer simpler instances from complex instances?</p>",
        "id": 128221973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281224
    },
    {
        "content": "<p>like <code>field</code> from <code>discrete_linear_ordered_field</code>?</p>",
        "id": 128221980,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281272
    },
    {
        "content": "<p>sure</p>",
        "id": 128221981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281283
    },
    {
        "content": "<p>or sometimes I need to infer a single instance from like 10 instances</p>",
        "id": 128221982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281294
    },
    {
        "content": "<p>do you have general workarounds?</p>",
        "id": 128221984,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281304
    },
    {
        "content": "<p>A single instance from 10 instances is not a problem as long as each instance is smaller than the initial one</p>",
        "id": 128222030,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281384
    },
    {
        "content": "<p>hmm I still don't know how to judge whether two instances are smaller</p>",
        "id": 128222031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281411
    },
    {
        "content": "<p>In the case of <code>discrete_linear_ordered_field</code>, does it not <code>extend</code> <code>field</code>?</p>",
        "id": 128222032,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281413
    },
    {
        "content": "<p>I mean, your examples are quite obvious</p>",
        "id": 128222034,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281419
    },
    {
        "content": "<p>yes it does</p>",
        "id": 128222036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281440
    },
    {
        "content": "<p>I think</p>",
        "id": 128222077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281448
    },
    {
        "content": "<p>That should be enough, no? You don't need an instance on top of that</p>",
        "id": 128222081,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281463
    },
    {
        "content": "<p>this is a bad instance then?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subring</span> <span class=\"n\">α</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 128222082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281475
    },
    {
        "content": "<p>You can compare by counting the number of symbols and operators in each types.</p>",
        "id": 128222085,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281490
    },
    {
        "content": "<p>that instance doesn't seem to be causing much problem though</p>",
        "id": 128222096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281521
    },
    {
        "content": "<p>I guess it's because it requires <code>subring</code></p>",
        "id": 128222098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281526
    },
    {
        "content": "<p>This seems to be the problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">finite_Galois_intermediate_extension</span><span class=\"bp\">.</span><span class=\"n\">to_subfield</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">AC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_algebraic_closure</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finite_Galois_intermediate_extension</span> <span class=\"n\">F</span> <span class=\"n\">AC</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subfield</span> <span class=\"bp\">_</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 128222143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281612
    },
    {
        "content": "<p><code>subring</code> is actually what I find problematic in it</p>",
        "id": 128222144,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281619
    },
    {
        "content": "<p>because I have an instance from subfield to field</p>",
        "id": 128222148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281623
    },
    {
        "content": "<blockquote>\n<p><code>subring</code> is actually what I find problematic in it</p>\n</blockquote>\n<p>how so?</p>",
        "id": 128222151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281637
    },
    {
        "content": "<p>there are invisible operators: <code>comm_ring S</code> is actually <code>comm_ring (subtype S)</code> which is more complex than <code>comm_ring a</code>. However <code>subring a (subtype S)</code> is more complex than <code>comm_ring (subtype S)</code></p>",
        "id": 128222192,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281692
    },
    {
        "content": "<p>nah it's <code>subring a S</code></p>",
        "id": 128222193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281709
    },
    {
        "content": "<p>there is no coercion there</p>",
        "id": 128222194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281713
    },
    {
        "content": "<p>It might actually fly then</p>",
        "id": 128222199,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281749
    },
    {
        "content": "<p>Lean is actually more tolerant than what I'm used to and I'm not sure if that's a good thing or if it's just handing you enough rope to hang yourself with</p>",
        "id": 128222201,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281791
    },
    {
        "content": "<p>this should be the problem</p>",
        "id": 128222258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281910
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_30</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_28</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subfield</span><span class=\"bp\">.</span><span class=\"n\">to_field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"err\">?</span><span class=\"n\">x_37</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_35</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_37</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subfield</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"err\">?</span><span class=\"n\">x_36</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finite_Galois_intermediate_extension</span><span class=\"bp\">.</span><span class=\"n\">to_subfield</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"err\">?</span><span class=\"n\">x_40</span> <span class=\"err\">?</span><span class=\"n\">x_41</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"err\">?</span><span class=\"n\">x_43</span> <span class=\"err\">?</span><span class=\"n\">x_44</span> <span class=\"err\">?</span><span class=\"n\">x_45</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_39</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"err\">?</span><span class=\"n\">x_38</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_41</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">AC</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_42</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_alg_closed_field</span> <span class=\"n\">AC</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_8</span>\n</pre></div>",
        "id": 128222259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281913
    },
    {
        "content": "<p>right, subfield.to_field is the problem</p>",
        "id": 128222298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281933
    },
    {
        "content": "<p>You can try commenting one instance at a time until the problem disappears</p>",
        "id": 128222299,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281940
    },
    {
        "content": "<p>cool</p>",
        "id": 128222302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529281952
    },
    {
        "content": "<p>that isn't how it works</p>",
        "id": 128222303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281953
    },
    {
        "content": "<p>if I comment one instance out, a million lines of code will break</p>",
        "id": 128222306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529281961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> a million things depend on <code>subfield.to_field</code> though...</p>",
        "id": 128222355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282049
    },
    {
        "content": "<p>this is a huge abyss</p>",
        "id": 128222357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282070
    },
    {
        "content": "<p>does <code>subfield</code> extend <code>field</code>?</p>",
        "id": 128222358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529282088
    },
    {
        "content": "<p>no</p>",
        "id": 128222360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282093
    },
    {
        "content": "<p>Why not?</p>",
        "id": 128222361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529282099
    },
    {
        "content": "<p>just as <code>is_subgroup</code> does not extend <code>group</code></p>",
        "id": 128222364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282102
    },
    {
        "content": "<p>and as I say this sentence</p>",
        "id": 128222368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282109
    },
    {
        "content": "<p>why doesn't that cause problems?</p>",
        "id": 128222370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282116
    },
    {
        "content": "<p>I'm not intimate enough with the algebraic hierarchy to know</p>",
        "id": 128222373,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529282156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">subtype.group : Π {α : Type u_1} [_inst_1 : group α] {s : set α} [_inst_2 : is_subgroup s], group ↥s</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 128222415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282166
    },
    {
        "content": "<p>Actually, because there's no coercion, that's not that big of a deal. A different instance must be worse</p>",
        "id": 128222425,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529282247
    },
    {
        "content": "<p>hmm</p>",
        "id": 128222427,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282274
    },
    {
        "content": "<p>this is a huge mess</p>",
        "id": 128222428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282281
    },
    {
        "content": "<p>Yeah, that's a problem with this way of doing type classes. You can't understand each instance in isolation</p>",
        "id": 128222472,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529282343
    },
    {
        "content": "<p>I think depth first search is not very good</p>",
        "id": 128222566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529282526
    },
    {
        "content": "<p>Kenny remember as a last resort you can just override the type class system and give it the instances yourself. I used to do this all the time when I got stuck on (much easier) stuff.</p>",
        "id": 128234704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529308335
    },
    {
        "content": "<p>I just made the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1822\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1822\">#1822</a> where I did something bad and broke multiplication, but I'm not sure how to fix it. I'm not sure how to minify it but you can look at line 154 in <a href=\"https://github.com/leanprover-community/mathlib/blob/6764734114a5e07eddc0409e485eb0bab6aea161/src/ring_theory/dedekind_finite.lean#L154\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/6764734114a5e07eddc0409e485eb0bab6aea161/src/ring_theory/dedekind_finite.lean#L154\">https://github.com/leanprover-community/mathlib/blob/6764734114a5e07eddc0409e485eb0bab6aea161/src/ring_theory/dedekind_finite.lean#L154</a> compared to 115 where somehow the intervening instance <code>instance dedekind_finite_of_noetherian [is_noetherian_ring R] : dedekind_finite R :=</code> breaks <code>monoid.has_mul</code>.</p>",
        "id": 184070632,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1577050923
    },
    {
        "content": "<p>You should ask permission to make new branches on leanprover-community; that way I could use <code>cache-olean</code> to make checking out your issue less of a hassle.</p>",
        "id": 184072698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577055038
    },
    {
        "content": "<p>I hereby ask for permission!  Sorry, I also just added a new better version, but the question /relevant part is still the same.</p>",
        "id": 184072822,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1577055300
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/aa3de5382b956ab9306dc8ec65f47cba\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/aa3de5382b956ab9306dc8ec65f47cba\">Here's the instance trace</a>. I think you might have created a loop. For example I see</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (17) ?x_59 : field G := real.field\nfailed is_def_eq\n[class_instances] (17) ?x_59 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (17) ?x_59 : field G := real.field\nfailed is_def_eq\n[class_instances] (17) ?x_59 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (20) ?x_124 : field G := real.field\nfailed is_def_eq\n[class_instances] (20) ?x_124 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (18) ?x_65 : field G := real.field\nfailed is_def_eq\n[class_instances] (18) ?x_65 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (19) ?x_67 : field G := real.field\nfailed is_def_eq\n[class_instances] (19) ?x_67 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (19) ?x_67 : field G := real.field\nfailed is_def_eq\n[class_instances] (19) ?x_67 : field G := rat.field\nfailed is_def_eq\n...\n[class_instances] (19) ?x_67 : field G := real.field\nfailed is_def_eq\n[class_instances] (19) ?x_67 : field G := rat.field\nfailed is_def_eq\n...\n</pre></div>\n\n\n<p>but actually that just looks weird (to me), usually the numbers just creep up by one.</p>",
        "id": 184072947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577055505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (3) ?x_11 : ring G := @dedekind_finite.to_ring ?x_12 ?x_13\n[class_instances] (4) ?x_13 : dedekind_finite G := @ @_root_.dedekind_finite_of_noetherian ?x_17 ?x_18 ?x_19\n[class_instances] (5) ?x_18 : ring G := @dedekind_finite.to_ring ?x_20 ?x_21\n[class_instances] (6) ?x_21 : dedekind_finite G := @ @_root_.dedekind_finite_of_noetherian ?x_25 ?x_26 ?x_27\n...\n</pre></div>\n\n\n<p>I think that's your problem.</p>",
        "id": 184073570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577056624
    },
    {
        "content": "<p>To prove G is a ring it suffices to prove it's Dedekind finite, to prove it's Dedekind finite it suffices to prove it's a Noetherian ring and...oh.. also a ring! And to check that it's a ring, it suffices to prove it's Dedekind finite, and off we go again.</p>",
        "id": 184073578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577056675
    },
    {
        "content": "<p>You wrote</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">dedekind_finite</span> <span class=\"kn\">extends</span> <span class=\"n\">ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">inv_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and I am wondering whether this should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">dedekind_finite</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">inv_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but unfortunately I am guessing here. I don't really understand how these things work -- I don't really understand the difference between the two in practice.</p>",
        "id": 184073803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577057068
    },
    {
        "content": "<p>The thing I know for sure is that I am quoting the last (3), the last (4), the last (5)...in the instance trace, which means for sure that things are spiralling out of control.</p>",
        "id": 184073874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577057234
    },
    {
        "content": "<p>OK so I can't guarantee that my fix is what you should be doing, but it does seem to fix the problem. You have to add the extra ring instances</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n</pre></div>\n\n\n<p>on line 27 but then the monoid error goes away. (I also have an error in <code>dedekind_finite_of_noetherian</code> but that was before I started fiddling and it might be because I just cut and pasted the file instead of forking your clone)</p>",
        "id": 184074008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577057474
    },
    {
        "content": "<blockquote>\n<p>I hereby ask for permission!  Sorry, I also just added a new better version, but the question /relevant part is still the same.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> -- who can add people to the \"can push to mathlib non-master branch\" list? Is it you? Alex is <code>alexjbest</code> on github</p>",
        "id": 184074195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577057780
    },
    {
        "content": "<p>The invite is in the mail. <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> let me know if you encounter any issues</p>",
        "id": 184076493,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1577062558
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> for the very helpful comments! It looks like it works well with classes taking ring as a parameter instead of extending (I should have copied the way <code>is_noetherian_ring</code> is set up, rather than <code>integral_domain</code>!) I'll do some more tidy up and push it (unfortunately I can't see a way to change the PR branch but for the next one I should be able to push to mathlib instead (ty <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ))</p>",
        "id": 184116152,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1577119218
    },
    {
        "content": "<p>I've been suffering with some typeclass problems which I've managed to reduce to the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">prio</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">200</span> <span class=\"c1\">-- No problem if priority 199 or lower, evidently because algebra.to_module has priority 200</span>\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">M&#39;</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">prio</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</pre></div>",
        "id": 184185635,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216014
    },
    {
        "content": "<p>The above will report that <code>maximum class-instance resolution depth has been reached</code> when elaborating <code>bar</code> but it will work if we lower the priority of the instances created by the declaration of <code>foo</code>, as indicated in my comment.</p>",
        "id": 184185709,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216102
    },
    {
        "content": "<p>I do not understand the \"Prolog-like search\" that is performed as part of typeclass inference well at all but I am surprised because my fuzzy understanding had lead me to believe that changing priorities like this should merely affect performance, rather than the actual results. Evidently I am in error. Can anyone shed any light?</p>",
        "id": 184185826,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216284
    },
    {
        "content": "<p>Typeclass loops can cause the max class-instance error and changing priorities can avoid the loops because a solution might be found before the loop is found</p>",
        "id": 184185873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577216388
    },
    {
        "content": "<p>Furthermore, in debugging this, I attempted to read my first \"class-instance resolution trace\", and I note that my definition <code>foo</code> appears to introduce a looping behaviour, based on the following output from <code>lean foobar.lean 2&gt;&amp;1 | grep foo.to_module</code>:</p>",
        "id": 184185877,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216397
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_0 : @module R A (@comm_ring.to_ring R _inst_1) (@ring.to_add_comm_group A _inst_2) := @foo.to_module ?x_98 ?x_99 ?x_100 ?x_101 ?x_102 ?x_103 ?x_104 ?x_105\n[class_instances] (1) ?x_104 : @module R (free_abelian_group ?x_122) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_122) := @foo.to_module ?x_222 ?x_223 ?x_224 ?x_225 ?x_226 ?x_227\n[class_instances] (2) ?x_228 : @module R (free_abelian_group ?x_246) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_246) := @foo.to_module ?x_360 ?x_361 ?x_362 ?x_363 ?x_364 ?x_365\n[class_instances] (3) ?x_366 : @module R (free_abelian_group ?x_384) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_384) := @foo.to_module ?x_498 ?x_499 ?x_500 ?x_501 ?x_502 ?x_503\n[class_instances] (4) ?x_504 : @module R (free_abelian_group ?x_522) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_522) := @foo.to_module ?x_636 ?x_637 ?x_638 ?x_639 ?x_640 ?x_641\n[class_instances] (5) ?x_642 : @module R (free_abelian_group ?x_660) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_660) := @foo.to_module ?x_774 ?x_775 ?x_776 ?x_777 ?x_778 ?x_779\n[class_instances] (6) ?x_780 : @module R (free_abelian_group ?x_798) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_798) := @foo.to_module ?x_912 ?x_913 ?x_914 ?x_915 ?x_916 ?x_917\n[class_instances] (7) ?x_918 : @module R (free_abelian_group ?x_936) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_936) := @foo.to_module ?x_1050 ?x_1051 ?x_1052 ?x_1053 ?x_1054 ?\n[class_instances] (8) ?x_1056 : @module R (free_abelian_group ?x_1074) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1074) := @foo.to_module ?x_1188 ?x_1189 ?x_1190 ?x_1191 ?x_119\n[class_instances] (9) ?x_1194 : @module R (free_abelian_group ?x_1212) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1212) := @foo.to_module ?x_1326 ?x_1327 ?x_1328 ?x_1329 ?x_133\n[class_instances] (10) ?x_1332 : @module R (free_abelian_group ?x_1350) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1350) := @foo.to_module ?x_1464 ?x_1465 ?x_1466 ?x_1467 ?x_14\n[class_instances] (11) ?x_1470 : @module R (free_abelian_group ?x_1488) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1488) := @foo.to_module ?x_1602 ?x_1603 ?x_1604 ?x_1605 ?x_16\n[class_instances] (12) ?x_1608 : @module R (free_abelian_group ?x_1626) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1626) := @foo.to_module ?x_1740 ?x_1741 ?x_1742 ?x_1743 ?x_17\n[class_instances] (13) ?x_1746 : @module R (free_abelian_group ?x_1764) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1764) := @foo.to_module ?x_1878 ?x_1879 ?x_1880 ?x_1881 ?x_18\n[class_instances] (14) ?x_1884 : @module R (free_abelian_group ?x_1902) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_1902) := @foo.to_module ?x_2016 ?x_2017 ?x_2018 ?x_2019 ?x_20\n[class_instances] (15) ?x_2022 : @module R (free_abelian_group ?x_2040) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_2040) := @foo.to_module ?x_2154 ?x_2155 ?x_2156 ?x_2157 ?x_21\n[class_instances] (16) ?x_2160 : @module R (free_abelian_group ?x_2178) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_2178) := @foo.to_module ?x_2292 ?x_2293 ?x_2294 ?x_2295 ?x_22\n[class_instances] (17) ?x_2298 : @module R (free_abelian_group ?x_2316) (@comm_ring.to_ring R _inst_1) (free_abelian_group.add_comm_group ?x_2316) := @foo.to_module ?x_2430 ?x_2431 ?x_2432 ?x_2433 ?x_24\n[class_instances] (18) ?x_2436 : @module R (free_abelian_group\n</pre></div>",
        "id": 184185928,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you, that is consistent with my fuzzy understanding.</p>",
        "id": 184185936,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216468
    },
    {
        "content": "<p>So what is the take-home message here? Is it:</p>\n<p>1. I need to be more careful about instance priorities?, or<br>\n  2. Priorities aside, the definition of <code>foo</code> is faulty / unidiomatic in some way?, or<br>\n  3. I should give up on <code>extends</code> and just make <code>module R M'</code> a parameter in the definition of <code>foo</code>?, or<br>\n  4. Something else?</p>",
        "id": 184185984,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216570
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 184186138,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577216841
    },
    {
        "content": "<p>My guess is that there is no unconditional answer to the above, and the best one can say is \"sometimes option 1, sometimes option 3\", depending on the situation.</p>",
        "id": 184186280,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577217064
    },
    {
        "content": "<p>You're not allowed to make instance loops, that's the take home message I think. I'm certainly not an expert at this stuff but we saw the other day how extending a typeclass as opposed to asking for it can cause trouble sometimes</p>",
        "id": 184188570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577221102
    },
    {
        "content": "<p>I think <code>foo.to_module</code> exists because you're extending. I'd love to point you to some docs explaining the basic do's and don'ts in this area but there aren't any and I can't write them</p>",
        "id": 184188668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577221263
    },
    {
        "content": "<p>Thanks. Yes, I believe one of the things that extending does is to create <code>foo.to_module</code>; I too would love to read such docs, but I’ll happily plough ahead for now and wait till they are written (perhaps after Lean 4 arrives).</p>",
        "id": 184191449,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577226204
    },
    {
        "content": "<p>I think I more or less understand the no loops prohibition (a tree-like search can't search a general graph) but I need to sharpen my understanding a little. I still have various questions but I'm unblocked so I think I'll just put them aside for now and see how I go when I pick this up, in a few days. Thanks again.</p>",
        "id": 184191622,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577226535
    },
    {
        "content": "<p>The general rule being violated here is that <code>foo</code> has three explicit (type) args, but it has a parent that has only two</p>",
        "id": 184192445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577228108
    },
    {
        "content": "<p>which means that during instance search <code>M</code> gets invented, leading to the instance loop</p>",
        "id": 184192449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577228132
    },
    {
        "content": "<p>What's a parent? Something it extends?</p>",
        "id": 184194886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577233347
    },
    {
        "content": "<p>This can be avoided by just using <code>[module R M']</code> right?</p>",
        "id": 184194892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577233438
    },
    {
        "content": "<p>yes</p>",
        "id": 184199499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577243059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you, that is extremely helpful!</p>",
        "id": 184205293,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1577255891
    },
    {
        "content": "<p>Can anyone come up with a simple, mathematically-motivated version of the reduced problem <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> introduced in <a href=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/184185635\" title=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/184185635\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/typeclass.20problems/near/184185635</a> ? Specifically, I am looking for any simple example of a \"natural\" collection of \"action-like\" instances that cannot be used in Lean3 because they would induce a cycle. Here by cycle I mean literally a cycle where the same exact subgoal repeats, and not just any infinite loop such as in <a href=\"#narrow/stream/113488-general/topic/Cute.20instance.20loop/near/180140798\" title=\"#narrow/stream/113488-general/topic/Cute.20instance.20loop/near/180140798\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Cute.20instance.20loop/near/180140798</a> . Thanks!</p>",
        "id": 184906091,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578317774
    },
    {
        "content": "<p>Fun fact: <code>tangent_space.topological_space</code> would induce a cycle on its own, if only <code>tangent_space</code> and <code>topological_fiber_bundle_core.fiber</code> were not considered opaque inside typeclass resolution. The following loops in current mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">tangent_space</span> <span class=\"n\">topological_fiber_bundle_core</span><span class=\"bp\">.</span><span class=\"n\">fiber</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 184906233,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578317917
    },
    {
        "content": "<p>Do you mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>Here type-class inference is trying to find <code>ring ?M</code> but doesn't know that <code>?M</code> should be <code>A</code>, and therefore goes in an infinite loop.</p>",
        "id": 184908926,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1578320088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thank you. I apologize that I was not precise enough in my request, and unfortunately this is not quite what I am looking for. First, this problem seems to be dependent on the order in which the instance subgoals are solved. The <code>[ring A]</code> argument of <code>foo</code> appears in the downstream instance, and it is a separate and easily fixable problem to simply postpone the search for such instances, e.g. by searching for the instances from right-to-left instead of left-to-right (which is what we do in Lean4). It would be great to find a small collection of desirable instances that would loop even under the right-to-left policy. Also, by \"mathematically-motivated\" I meant instances with real names and meanings, as opposed to (presumably) artificial instances like <code>foo</code>.</p>",
        "id": 184914884,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578324026
    },
    {
        "content": "<p><code>foo</code> has a real mathematical meaning. An example of <code>foo</code> is the statement that a complex vector space can be considered as a real vector space (of twice the dimension, in this setting).</p>",
        "id": 184938522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578339595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks. What would be a good name for this instance then? Also, I suppose this instance is problematic no matter which direction we solve the subgoals in. If we go right-to-left, we <em>immediately</em> cycle. However, it does seems to work when <code>algebra k A</code> is tried before <code>module A M</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 184952258,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578341989
    },
    {
        "content": "<p>In this particular case a possible solution is to have a tag \"don't try this instance if <code>k = A</code>\".</p>",
        "id": 184952870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578342401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> It could be called <code>restrict_scalars</code></p>",
        "id": 184953437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578342829
    },
    {
        "content": "<p>Is there a reasonable \"sister\" instance that would make it loop even if <code>algebra k A</code> were tried first, before <code>module A M</code>?</p>",
        "id": 184955772,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578344371
    },
    {
        "content": "<p>There is <code>instance algebra.id [comm_ring R] : algebra R R</code>.</p>",
        "id": 184957110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578345176
    },
    {
        "content": "<p>BTW, if we define <code>algebra.trans</code> similarly to <code>restrict_scalars</code>, then <code>algebra.id</code> + <code>algebra.trans</code> will create a loop too.</p>",
        "id": 184958121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578345853
    },
    {
        "content": "<blockquote>\n<p>BTW, if we define <code>algebra.trans</code> similarly to <code>restrict_scalars</code>, then <code>algebra.id</code> + <code>algebra.trans</code> will create a loop too.</p>\n</blockquote>\n<p>Could you please post code for the <code>algebra.trans</code> you envision?</p>",
        "id": 184959085,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578346447
    },
    {
        "content": "<p>Look at <code>algebra.comap</code> in <code>ring_theory/algebra.lean</code>. This is what I meant but it has a type tag to avoid loops.</p>",
        "id": 184960236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578347234
    },
    {
        "content": "<p>I don't know if we would <em>want</em> to have <code>algebra.trans</code> as an instance (without a type tag) if it was possible.</p>",
        "id": 184960328,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578347286
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">algebra_map</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">commutes</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_def&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">smul_def</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 184960572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578347460
    },
    {
        "content": "<p>(untested)</p>",
        "id": 184960580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578347468
    },
    {
        "content": "<p>(tested, works, needs some defs from <code>ring_theory/algebra.lean</code>)</p>",
        "id": 184961591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578348193
    },
    {
        "content": "<p><code>algebra.comap</code> is a nightmare. If you prove a theorem using <code>algebra.comap</code>, you won't be able to apply it easily to three rings where the canonical homomorphisms don't commute by definition. For example the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>-algebra structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>, is not defeq to <code>(coe : ℝ → ℂ) ∘ (coe : ℚ → ℝ)</code>. <code>algebra.trans</code> shouldn't be an instance because of these diamonds, and we also shouldn't prove theorems with <code>algebra.trans</code> in the statement. That does lead to ugly statements however.</p>",
        "id": 184962168,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578348622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Thank you for the explanation.</p>",
        "id": 184962338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578348728
    },
    {
        "content": "<p>I think that Chris raises a very important problem. Without a good way to deal with commutative diagrams, advancing in commutative algebra will be nasty</p>",
        "id": 184993717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578388944
    },
    {
        "content": "<p>Of course we can just add proof obligations. But if it isn't done carefully, it makes everything hard to read and hard to write.</p>",
        "id": 184993748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578388985
    },
    {
        "content": "<p>In an ideal world, you just \"bless\" a diagram as being commutative, and don't need to mention it again. Some system (not type class inference, but maybe similar) should just solve these issues in the background.</p>",
        "id": 184993830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578389043
    },
    {
        "content": "<p>Finding paths through a graph is something that computers are better at than humans. So this part of proving should certainly not be kicked back into the users lap.</p>",
        "id": 184993869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578389080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I am not sure if I understand. Are you saying that even in Lean4, where typeclass resolution will handle cycles and diamonds correctly, <code>algebra.trans</code> would still be a bad instance because the path that typeclass resolution takes through the <code>algebra.trans</code> graph will affect whether some highly desirable definitional equalities hold or not? </p>\n<p>According to the comment in <code>algebra.lean</code>, <code>algebra.comap</code> is a workaround for not being able to use <code>algebra.trans</code>. When you say it is a nightmare, are you saying it is a nightmare for the same reason that <code>algebra.trans</code> would be a nightmare? Can you please give an example of an \"ugly\" statement that avoids both?  </p>\n<p>Thanks very much.</p>",
        "id": 185003381,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578397905
    },
    {
        "content": "<p>As far as I understand, the problem that Chris mentions affects both <code>algebra.comap</code> and <code>algebra.trans</code>. Suppose that <code>A → B → C</code> are ring homs. Then <code>C</code> is an algebra over <code>B</code>, and <code>B</code> over <code>A</code>. By transitivity, <code>C</code> is also an algebra over <code>A</code>. But this fixes a particular (i.e., the transitive one) algebra structure for <code>C</code> over <code>A</code>. In practice, if one wants to apply a lemma, (e.g. to <code>ℚ → ℝ → ℂ</code>) then there is another algebra structure floating around which is not defeq to the transitive one.</p>",
        "id": 185003938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578398463
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 185004895,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578399438
    },
    {
        "content": "<p>I have not been able to get the <code>restrict_scalars</code> example to loop when it could have succeeded, once I controlled the subgoal ordering more carefully. So, I am still looking for a more compelling example of no-cycle-support being annoying in Lean3, or for a new cycle that you will want to introduce in Lean4.</p>",
        "id": 185005203,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578399721
    },
    {
        "content": "<p><a href=\"https://cloud.commelin.net/s/C8PrCLoxe7995Nk\" target=\"_blank\" title=\"https://cloud.commelin.net/s/C8PrCLoxe7995Nk\">https://cloud.commelin.net/s/C8PrCLoxe7995Nk</a> is a picture of a type class graph that algebraic geometers have in their head, and use all the time.</p>",
        "id": 185005809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> We currently cannot state this graph yet, because we haven't built enough algebraic geometry yet.</p>",
        "id": 185005837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400312
    },
    {
        "content": "<p>But all the info in this graph is used <em>implicitly</em> on almost every page of algebraic geometry (after introductory lecture notes)</p>",
        "id": 185005901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400344
    },
    {
        "content": "<p>So, this is not really a Lean 3 example. But being able to support dependencies like those in this graph would be really cool. As far as I understand, Lean 3 wouldn't be able to do that.</p>",
        "id": 185006036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400470
    },
    {
        "content": "<p>Interesting, thank you. What is the difference between the dotted edges, the regular edges, and the dark edges?</p>",
        "id": 185006304,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578400715
    },
    {
        "content": "<p>The bold edges seem to \"merge\" two dependencies</p>",
        "id": 185006332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400749
    },
    {
        "content": "<p>The dotted edges are considered \"trivial\" (either because the definition <code>extends</code> the other) or because, well... it's trivial (i.e., doesn't require proof in Hartshorne – one of the main introductory texts in AG).</p>",
        "id": 185006365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400797
    },
    {
        "content": "<p>I found this graph on the wall of my office, when I arrived here in Freiburg. I think it's from an appendix in a book on AG by Goertz and Wedhorn.</p>",
        "id": 185006441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400835
    },
    {
        "content": "<p>I left it on the wall <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 185006450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1578400850
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 185006545,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1578400930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> One more typeclass related problem, see <a href=\"https://github.com/leanprover-community/mathlib/issues/1875\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1875\">#1875</a> <a href=\"https://github.com/leanprover-community/mathlib/pull/1875#discussion_r366674829\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1875#discussion_r366674829\">https://github.com/leanprover-community/mathlib/pull/1875#discussion_r366674829</a> for a context, or below for a minimal example.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">indicator</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">axiom</span> <span class=\"n\">is_add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">indicator</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">indicator_sum</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">indicator</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">indicator</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">indicator_sum&#39;</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">indicator</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">indicator</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>\n\n\n<p>The <code>begin ... end</code> proof works while the last line fails to unify <code>add_monoid (α → β)</code> from <code>add_comm_monoid.to_add_monoid (pi.add_comm_monoid ...)</code> with <code>pi.add_monoid ...</code>. I have no idea how hard is to improve the situation here.</p>",
        "id": 185663943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579057428
    },
    {
        "content": "<p>I think this is missing MWE stuff</p>",
        "id": 185664356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579058008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you mean?</p>",
        "id": 185664951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579058893
    },
    {
        "content": "<p>what are the imports? I'm pretty sure <code>is_add_monoid_hom</code> is not in core</p>",
        "id": 185664958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579058920
    },
    {
        "content": "<p>ideally this should not have any imports, so it can be a standalone example that ports to lean 4</p>",
        "id": 185664984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579058979
    },
    {
        "content": "<p>I'll try to post a version with no imports.</p>",
        "id": 185665069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579059064
    },
    {
        "content": "<p>When I try to create a version with no imports and most <code>def</code> / <code>lemma</code> replaced by <code>constant</code> / <code>axiom</code>, it works... I'll try again tomorrow.</p>",
        "id": 185666793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579061851
    },
    {
        "content": "<p>Probably this is a bug in pi_instance. It generates strange <code>add_monoid.zero</code> and <code>add_monoid.add</code>. I'll see if I can make it reuse <code>pi.has_zero</code>.</p>",
        "id": 185668544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579064056
    }
]