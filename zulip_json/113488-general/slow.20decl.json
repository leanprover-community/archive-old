[
    {
        "content": "<p>I'm touching <code>topology/connected</code> for unrelated reasons, and noticed that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.is_connected_iff\">docs#sum.is_connected_iff</a> is ridiculously slow compared to the rest of the file. Squeezing the two simps doesn't help. The rest of the proof basically only uses <code>refine</code> so I don't understand why it's so slow.</p>",
        "id": 296829258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662128144
    },
    {
        "content": "<p>It's instantaneous with</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -535,13 +537,13 @@ begin</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    let v : set (α ⊕ β) := range sum.inr,<span class=\"w\"></span>\n<span class=\"w\"> </span>    have hu : is_open u, exact is_open_range_inl,<span class=\"w\"></span>\n<span class=\"w\"> </span>    obtain ⟨x | x, hx⟩ := hs.nonempty,<span class=\"w\"></span>\n<span class=\"gd\">-    { have h := is_preconnected.subset_left_of_subset_union</span><span class=\"w\"></span>\n<span class=\"gi\">+    { have h : s ⊆ range sum.inl := is_preconnected.subset_left_of_subset_union</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        is_open_range_inl is_open_range_inr is_compl_range_inl_range_inr.disjoint<span class=\"w\"></span>\n<span class=\"w\"> </span>        (show s ⊆ range sum.inl ∪ range sum.inr, by simp) ⟨sum.inl x, hx, x, rfl⟩ hs.2,<span class=\"w\"></span>\n<span class=\"w\"> </span>      refine or.inl ⟨sum.inl ⁻¹' s, _, _⟩,<span class=\"w\"></span>\n<span class=\"w\"> </span>      { exact hs.preimage_of_open_map sum.inl_injective open_embedding_inl.is_open_map h },<span class=\"w\"></span>\n<span class=\"w\"> </span>      { exact (set.image_preimage_eq_of_subset h).symm } },<span class=\"w\"></span>\n<span class=\"gd\">-    { have h := is_preconnected.subset_right_of_subset_union</span><span class=\"w\"></span>\n<span class=\"gi\">+    { have h : s ⊆ range sum.inr := is_preconnected.subset_right_of_subset_union</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        is_open_range_inl is_open_range_inr is_compl_range_inl_range_inr.disjoint<span class=\"w\"></span>\n<span class=\"w\"> </span>        (show s ⊆ range sum.inl ∪ range sum.inr, by simp) ⟨sum.inr x, hx, x, rfl⟩ hs.2,<span class=\"w\"></span>\n<span class=\"w\"> </span>      refine or.inr ⟨sum.inr ⁻¹' s, _, _⟩,<span class=\"w\"></span>\n</code></pre></div>",
        "id": 296832184,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662129137
    },
    {
        "content": "<p>Wow! So it was just spending ages on type inference?</p>",
        "id": 296832247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662129173
    },
    {
        "content": "<p>Could you please PR?</p>",
        "id": 296832265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662129179
    },
    {
        "content": "<p>Yeah</p>",
        "id": 296832336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662129207
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16353\">#16353</a></p>",
        "id": 296833331,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662129490
    }
]