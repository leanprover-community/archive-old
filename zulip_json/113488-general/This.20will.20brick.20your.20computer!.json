[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">class_instances</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133943778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536921201
    },
    {
        "content": "<p>This is well known. Lean will time out trying to coerce an int into a nat rather than give up</p>",
        "id": 133945380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536923508
    },
    {
        "content": "<p>remove the first line and it's fine!</p>",
        "id": 133945390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923521
    },
    {
        "content": "<p>Hopefully fixed in Lean 4</p>",
        "id": 133945432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536923532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">p</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">derivative_C_mul_X</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">derivative</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">single_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C_0</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">--timeout</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">derivative_C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">derivative_C_mul_X</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 134082892,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165299
    },
    {
        "content": "<p>there are some nontrivial defeq simplifications there</p>",
        "id": 134082945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165438
    },
    {
        "content": "<p>at least try <code>by simpa using derivative_C_mul_X x 0</code> first</p>",
        "id": 134082985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165459
    },
    {
        "content": "<p>it's intentionally incorrect</p>",
        "id": 134083001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165507
    },
    {
        "content": "<p>then what's the surprise?</p>",
        "id": 134083004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165520
    },
    {
        "content": "<p>well Lean should tell me instead of time out</p>",
        "id": 134083005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165529
    },
    {
        "content": "<p>you just asked it to reduce some big expression to 0</p>",
        "id": 134083008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165547
    },
    {
        "content": "<p>it's got to unfold a bunch of definitions and run the power function, etc</p>",
        "id": 134083048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165574
    },
    {
        "content": "<p>it's not obviously not defeq</p>",
        "id": 134083051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165581
    },
    {
        "content": "<p>I don't actually know if it's defeq</p>",
        "id": 134083053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165586
    },
    {
        "content": "<p>neither does lean...</p>",
        "id": 134083056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537165612
    },
    {
        "content": "<p>oh wow it's already done</p>",
        "id": 134083268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165989
    },
    {
        "content": "<p>i'm lucky i realized so soon</p>",
        "id": 134083271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537165999
    }
]