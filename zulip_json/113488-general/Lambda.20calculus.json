[
    {
        "content": "<p>Hello,<br>\nDoes anyone know of a formalization of the lambda calculus in Lean?<br>\nIn particular termination of beta/eta reduction?</p>",
        "id": 152020148,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545045874
    },
    {
        "content": "<p>I would have a look at <a href=\"https://github.com/leanprover/mathlib/tree/master/computability\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/tree/master/computability\">https://github.com/leanprover/mathlib/tree/master/computability</a> (but maybe this is something else)</p>",
        "id": 152020719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545046488
    },
    {
        "content": "<p>And, if it doesn't exist, maybe having a look at <a href=\"https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/group_theory/free_group.lean#L127\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/group_theory/free_group.lean#L127\">https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/group_theory/free_group.lean#L127</a> and <a href=\"https://github.com/leanprover/mathlib/blob/57194fa57e76721a517d6969ee88a6007f0722b3/logic/relation.lean#L288\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/57194fa57e76721a517d6969ee88a6007f0722b3/logic/relation.lean#L288\">https://github.com/leanprover/mathlib/blob/57194fa57e76721a517d6969ee88a6007f0722b3/logic/relation.lean#L288</a> could be a good idea</p>",
        "id": 152020807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545046571
    },
    {
        "content": "<p>I don't think lambda calculus has been done, although there are several projects in the same space</p>",
        "id": 152021502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047377
    },
    {
        "content": "<p>I assume you are talking about simply typed lambda calculus, since of course the regular kind doesn't terminate</p>",
        "id": 152021571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047417
    },
    {
        "content": "<p>I believe Jeremy has a formalization of lambda calculus, although he intended it for different purposes and I don't think he proved this property</p>",
        "id": 152021611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047476
    },
    {
        "content": "<p>aha, here it is: <a href=\"https://github.com/avigad/embed/blob/master/src/exp.lean\" target=\"_blank\" title=\"https://github.com/avigad/embed/blob/master/src/exp.lean\">https://github.com/avigad/embed/blob/master/src/exp.lean</a></p>",
        "id": 152021724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047605
    },
    {
        "content": "<p>it's not much more than the definition</p>",
        "id": 152021734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047616
    },
    {
        "content": "<p>I guess he never defined typechecking for lambda terms, since he was going for FOL</p>",
        "id": 152021811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545047687
    },
    {
        "content": "<p>Ok, thanks for the pointers. I will think about whether I'd like to work on this then. Actually, I'd like to formalize a unification procedure for lambda-terms, but I will need a formalization of the lambda-calculus for that first :-)</p>",
        "id": 152023395,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545049684
    },
    {
        "content": "<p>I might be missing something obvious here</p>",
        "id": 152023686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545050052
    },
    {
        "content": "<p>but what happened to the Y-combinator?</p>",
        "id": 152023688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545050058
    },
    {
        "content": "<p>oh, that's what \"simply typed\" rules out isn't it</p>",
        "id": 152023697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545050073
    },
    {
        "content": "<p>Yes, I wasn't very precise. I meant simply typed lambda calculus.</p>",
        "id": 152023793,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545050268
    },
    {
        "content": "<p>Hey, I'm actually working on this right now! Is there any particular formulation that you want to use? I'm trying to figure out inherently typed terms at the moment, but I have a formulation in raw terms with a typechecking procedure and a proof of progress, basically following \"Software Foundations\".</p>",
        "id": 152218893,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1545259385
    },
    {
        "content": "<p>Oh, that's great! As I said, I actually would like to formalize a unification procedure for lambda-terms. So if I could build on your library once it's finished, that would be perfect. I find it hard to predict which formulation would be more suitable for this, but I guess it doesn't matter too much.</p>",
        "id": 152262213,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545318573
    },
    {
        "content": "<p>It's not pretty code and definitely not suitable for a library, but I can upload it somewhere like git when I have a bit more time if that helps your project :)</p>",
        "id": 152263621,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1545319794
    },
    {
        "content": "<p>By the way, you mean unification of the entire term assuming some holes on one (or both?) sides, not just types, right?</p>",
        "id": 152263723,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1545319842
    },
    {
        "content": "<p>Yes, with holes on both sides, but the holes are realized as free variables. In addition to that, there are also constant symbols. So for example, one could ask for unifiers of <code>f (X a) b</code> and <code>f c (Y d)</code>, where uppercase letters are variables and lowercase letters are constants. A unifier would be <code>{X ↦ λZ. c; Y ↦ λZ. b}</code>. The procedure is described here: <a href=\"https://www.sciencedirect.com/science/article/pii/0304397576900219\" target=\"_blank\" title=\"https://www.sciencedirect.com/science/article/pii/0304397576900219\">https://www.sciencedirect.com/science/article/pii/0304397576900219</a></p>",
        "id": 152271412,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545326027
    },
    {
        "content": "<p>So it sounds like you don't plan / don't have time to improve your code such that it would be usable as a library?  If I decide to formalize lambda calculus myself, I will ask you again for what you've done. But currently, I tend to using Isabelle/HOL instead for this project (Oh, oh, high treason in this chat I suppose).</p>",
        "id": 152272457,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545326923
    },
    {
        "content": "<p>Oh, I do hope to make it fairly readable, just not the very partial raw-term formulation, which is what I have currently, but rather the inherently-typed one which I only started on. That said, I'm using quantified type theory to support linear typing, which is more general than simply-typed lambda, but can be instantiated (I think..) to simply-typed lambda.</p>",
        "id": 152275053,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1545329256
    },
    {
        "content": "<p>We actually did some stlc in lean in the University of Washington's graduate PL class last fall: <a href=\"https://courses.cs.washington.edu/courses/cse505/17au/lec11/lean/stlc.lean\" target=\"_blank\" title=\"https://courses.cs.washington.edu/courses/cse505/17au/lec11/lean/stlc.lean\">https://courses.cs.washington.edu/courses/cse505/17au/lec11/lean/stlc.lean</a></p>",
        "id": 152293681,
        "sender_full_name": "Josh Pollock",
        "timestamp": 1545346495
    },
    {
        "content": "<p>Thanks! I'll have a closer look next year. Happy holidays :-)</p>",
        "id": 152324240,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1545391637
    },
    {
        "content": "<p>I just started learning lambda calculus. If you don't mind explaining, I was wondering why the condition <code>x2 \\notin FV (e1) \\/ x1 \\notin FV (e)</code> is not a part of the definition for <code>lam_diff</code> in <code>is_subst</code>?</p>",
        "id": 154197485,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546459490
    },
    {
        "content": "<p>are you referring to a particular formalization?</p>",
        "id": 154197511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459532
    },
    {
        "content": "<p>Sorry, yes. The one that Josh Pollock posted a link to earlier in the thread.</p>",
        "id": 154197586,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546459599
    },
    {
        "content": "<p>I think you are right. There are variable capturing substitutions that are admitted by <code>is_subst</code></p>",
        "id": 154197839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546459914
    },
    {
        "content": "<p>If that is the case, would adding that condition be the simplest fix?</p>",
        "id": 154198088,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546460144
    },
    {
        "content": "<p>If I try to add connectives like <code>∧</code> and <code>∨</code> to the inductive definition, I seem to get an error of \"...contains variables that are not parameters\". Are these permitted in inductive definitions?</p>",
        "id": 154201289,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546463205
    },
    {
        "content": "<p>Would this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_subst</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">-- (λ y . P)[ x := N ] = (λ y . P [ x := N ]) if x ≠ y and y ∉ FV (N) or x ∉ FV (P)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam_diff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n    <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">is_free</span> <span class=\"n\">N</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">is_free</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">e</span>\n    <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154202553,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546464493
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">is_free</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">is_subst</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">-- (λ y . P)[ x := N ] = (λ y . P [ x := N ]) if x ≠ y and y ∉ FV (N) or x ∉ FV (P)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam_diff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n    <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">is_free</span> <span class=\"n\">N</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">is_free</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">e</span>\n    <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">y</span> <span class=\"n\">sorry</span> <span class=\"n\">P</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">y</span> <span class=\"n\">sorry</span> <span class=\"n\">e</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154203012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546464943
    },
    {
        "content": "<p>this works for me verbatim</p>",
        "id": 154203014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546464946
    },
    {
        "content": "<p>Thank you. Do you think this would be a good fix for the definition?</p>",
        "id": 154203290,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546465256
    },
    {
        "content": "<p>no because it has <code>sorry</code></p>",
        "id": 154203316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546465281
    },
    {
        "content": "<p>I'm sorry, I didn't mean verbatim, but if the definition was amended in this manner.</p>",
        "id": 154203407,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546465372
    },
    {
        "content": "<p>my point is that I didn't change the part you complained about</p>",
        "id": 154203425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546465393
    },
    {
        "content": "<p>i.e. your diagnosis is not very accurate</p>",
        "id": 154203436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546465407
    },
    {
        "content": "<p>The diagnosis about the error message or about the definition in the link that Josh posted? My post may have been confusing. I don't get error messages for the code I posted, it was changed to avoid them. I was asking if it worked to fix the definition that Josh posted.</p>",
        "id": 154203689,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546465644
    },
    {
        "content": "<p>oh... context...</p>",
        "id": 154203786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546465721
    },
    {
        "content": "<p>Sorry about that.</p>",
        "id": 154203800,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546465737
    }
]