[
    {
        "content": "<p>I just found out you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ι_add_mul_swap</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ι_square_zero</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Which saves you from repeating both the LHS and RHS in the calc proof</p>",
        "id": 218042009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606428972
    },
    {
        "content": "<p>Turns out you can avoid the repetition and even get things in the right order if you ignore the linter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ι_add_mul_swap</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"c1\">-- I am a def so that my type is inferred from my value</span>\n<span class=\"k\">calc</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n                               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ι_square_zero</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 218042062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606429080
    }
]