[
    {
        "content": "<p>What do you all think about introducing infix notations for <code>matrix.mul_vec</code> and <code>matrix.vec_mul</code>?</p>\n<p>I am currently working on this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">schur_complement_eq'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_symm</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">vec_mul</span> <span class=\"o\">(</span><span class=\"n\">sum.elim</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">from_blocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">sum.elim</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">vec_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">A</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">mul_vec</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">vec_mul</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>It is really hard to read without infix notation. I would propose something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"infix ` ⊕ᵥ `:65 := sum.elim\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infix ` ᵛ⬝ `:73 := vec_mul\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infix ` ⬝ᵛ `:74 := mul_vec\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">schur_complement_eq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_symm</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊕ᵥ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">ᵛ⬝</span> <span class=\"n\">from_blocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span> <span class=\"n\">D</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊕ᵥ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span> <span class=\"bp\">⬝ᵛ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">ᵛ⬝</span> <span class=\"n\">A</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span> <span class=\"bp\">⬝ᵛ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">ᵛ⬝</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 285641653,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1654847090
    },
    {
        "content": "<p>I feel like if we go down that route we should change <code>dot_product u v</code> to <code>u ᵛ⬝ᵛ v</code></p>",
        "id": 285642656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654847850
    },
    {
        "content": "<p>The other option would be a <code>has_mat_mul</code> class and use <code>⬝</code> for all four operations</p>",
        "id": 285642753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654847908
    },
    {
        "content": "<p><code>⬝</code> for all of them would be amazing. What would be the best way to approach such a big refactoring?</p>",
        "id": 285644465,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1654849157
    },
    {
        "content": "<p>I don't think the refactor will be all that big, although a danger with this change is that <code>![![1,2],![3,4]] ⬝ ![![1,2],![3,4]] = ![10, 20]</code></p>",
        "id": 285645722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654849981
    },
    {
        "content": "<p>(because <code>![![...]]</code> creates a vector of vectors not a matrix)</p>",
        "id": 285645845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20mul_vec.20and.20vec_mul/near/285645722\">said</a>:</p>\n<blockquote>\n<p>I don't think the refactor will be all that big, although a danger with this change is that <code>![![1,2],![3,4]] ⬝ ![![1,2],![3,4]] = ![10, 20]</code></p>\n</blockquote>\n<p>I believe it would not be a problem since we can require that the entries of the vector are <code>non_unital_non_assoc_semiring</code>, and now we're applying <code>has_mat_mul</code> to the entries</p>",
        "id": 285646151,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1654850273
    },
    {
        "content": "<p>I don't understand that suggestion. The problem is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span>\n  <span class=\"bp\">=</span> <span class=\"n\">dot_product</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">16</span><span class=\"o\">]</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 285646575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850523
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.non_unital_non_assoc_semiring\">docs#pi.non_unital_non_assoc_semiring</a></p>",
        "id": 285646656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850559
    },
    {
        "content": "<p>Arguably the real problem here is that we don't have notation that actually produces a matrix</p>",
        "id": 285646727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850611
    },
    {
        "content": "<p><code>![![1,2],![3,4]] * ![![1,2],![3,4]]</code> already fails to perform matrix multiplication</p>",
        "id": 285646747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850628
    },
    {
        "content": "<p>This has come up before, but I think the lean3 <code>notation</code> command isn't powerful enough to allow a special <code>!![1, 2; 3, 4]</code> notation</p>",
        "id": 285646830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850674
    },
    {
        "content": "<p>We could use a <code>user_notation</code>, but then it would print as something like <code>to_matrix ![![1,2],![3,4]]</code>.</p>",
        "id": 285646900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850716
    },
    {
        "content": "<p>Maybe thats ok though</p>",
        "id": 285646907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654850721
    },
    {
        "content": "<p>Indeed, we can't put the notation on <code>matrix</code> currently, or the instance isn't picked up.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_mat_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⬝`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">has_mat_mul.mat_mul</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-- Notation not found</span>\n<span class=\"cm\">instance matrix.has_mat_mul [non_unital_non_assoc_semiring α] [fintype n] :</span>\n<span class=\"cm\">  has_mat_mul (matrix m n α) (matrix n o α) (matrix m o α) :=</span>\n<span class=\"cm\">⟨matrix.mul⟩</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">matrix.has_mat_mul</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mat_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">matrix.mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[priority 100]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">matrix.has_dot_product</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mat_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">matrix.dot_product</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">matrix.has_mat_mul_right</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mat_mul</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">matrix.mul_vec</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">matrix.has_mat_mul_left</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mat_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">matrix.vec_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]))</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 285647363,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1654851019
    },
    {
        "content": "<p><code>(x : A) * (x : A)</code> where <code>x : X</code> is not enough to tell lean to use the multiplication on <code>A</code></p>",
        "id": 285649709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852416
    },
    {
        "content": "<p>Ok, but what's the problem with the instance on <code>m → n → α</code> as in Anne's code above?</p>",
        "id": 285649771,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1654852443
    },
    {
        "content": "<p>I think it's a bad idea to ever spell <code>matrix m n a</code> in that way</p>",
        "id": 285649933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852526
    },
    {
        "content": "<p>It feels as bad as spelling <code>opposite a</code> as <code>a</code> or <code>multiplicative a</code> as <code>a</code></p>",
        "id": 285649979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852554
    },
    {
        "content": "<p>This does the right thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]])</span>\n    <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]])</span>\n</code></pre></div>",
        "id": 285650173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852650
    },
    {
        "content": "<p><code>foo (x : A)</code> where <code>x : X</code> and <code>def A := X</code> means \"parse <code>x</code> as an <code>A</code>, but then call <code>foo</code> with <code>x</code> as an <code>X</code>\"</p>",
        "id": 285650266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852693
    },
    {
        "content": "<p>Here's a nicer spelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_matrix</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_matrix_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_matrix</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_matrix_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_matrix.symm</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`!ₘ</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">matrix.vec_empty</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_matrix</span> <span class=\"n\">l</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">!ₘ</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!ₘ</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]]</span>  <span class=\"c1\">-- does the right thing</span>\n</code></pre></div>",
        "id": 285650558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654852851
    },
    {
        "content": "<p>I implemented the <code>user_notation</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/14665\">#14665</a></p>",
        "id": 285653561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654854662
    },
    {
        "content": "<p>Now that <code>!![1, 2; 3, 4]</code> notation is merged, we could consider revisiting <code>class has_mat_mul </code></p>",
        "id": 289450600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657715162
    },
    {
        "content": "<p>What are the operations it would apply to (and what is that symbol - is it different from the smul symbol?)</p>",
        "id": 289477359,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657726628
    },
    {
        "content": "<p>The symbol is <code>\\cdot</code>. It's different from the smul symbol. The dot is a bit smaller.</p>",
        "id": 289567628,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657789683
    },
    {
        "content": "<p>We could use it for <code>matrix.mul</code>, where it is used already, for <code>matrix.mul_vec</code>, <code>matrix.vec_mul</code>, and <code>matrix.dot_product</code>.</p>",
        "id": 289567696,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657789734
    },
    {
        "content": "<p>And possibly <code>matrix.vec_mul_vec</code>?</p>",
        "id": 289707748,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657879318
    },
    {
        "content": "<p>Though that may not work with <code>matrix.dot_product</code>.</p>",
        "id": 289707814,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657879346
    },
    {
        "content": "<p>We don't need notation for that, you can spell it <code>col v ⬝ row w</code></p>",
        "id": 289717662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657886581
    },
    {
        "content": "<p>You don't have that option for the others, because the result type ends up a matrix not a vector</p>",
        "id": 289717689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657886599
    },
    {
        "content": "<p>Ah, so you can.</p>",
        "id": 289724057,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657890531
    },
    {
        "content": "<p>I tried this in <a href=\"https://github.com/leanprover-community/mathlib/pull/15585\">#15585</a>, but it doesn't work as well as I'd hoped because lean's overloaded notations:</p>\n<ul>\n<li>Doesn't seem to work with <code>local</code> or <code>open_locale</code></li>\n<li>Unfolds type synonyms</li>\n</ul>",
        "id": 290360249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658400992
    },
    {
        "content": "<p>I thought you planned to create a type class <code>has_mat_mul </code>. Why do you use overloaded notations now?</p>",
        "id": 290369449,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1658406941
    },
    {
        "content": "<p>The typeclass had its own problems:</p>\n<ul>\n<li>The <code>out_param</code> stuff doesn't always help, you still can't write things like <code>v ⬝ 0</code></li>\n<li>You now have to change everything to be stated about <code>has_mat_mul.mul</code> instead of <code>dot_product</code> etc. This is a lot more unwieldy if the notation is not enabled;</li>\n</ul>",
        "id": 290370445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658407481
    },
    {
        "content": "<p>I see. But I feel that the type class approach works quite well for <code>+</code>, <code>*</code>, <code>•</code>, etc. The fact that we can't write <code>v ⋅ 0</code> doesn't shock me. Somehow we need to tell Lean what <code>0</code> we mean. You probably can't write <code>a • 0</code> either, right?</p>",
        "id": 290372989,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1658408930
    },
    {
        "content": "<p><code>a • 0</code> isn't quite as bad because lean knows the result type is the same type as the 0</p>",
        "id": 290374797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658409957
    },
    {
        "content": "<p>Ah, ok, right. <code>⋅</code> would be extremely ambiguous about what comes in and what comes out...</p>",
        "id": 290375965,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1658410554
    },
    {
        "content": "<p>How about this: we add a typeclass <code>has_mat_mul </code> using <code>⋅</code> and in addition localized notations <code>ᵥ⋅ₘ</code>, <code>ᵥ⋅ₘ</code>, <code>ₘ⋅ₘ</code>, <code>ᵥ⋅ᵥ</code> that abbreviate <code>has_mat_mul</code> with the appropriate type class instance specified. So in most cases, you'll be able to use <code>⋅</code>. Whenever Lean doesn't understand what's going on because it's not clear what types the arguments have, you can use the more specific notation.</p>\n<p>It would be nice if the output window would show <code>⋅</code> whenever possible, though.</p>",
        "id": 290377664,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1658411379
    }
]