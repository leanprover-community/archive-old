[
    {
        "content": "<p>Say I have the following setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">struct</span> <span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">struct</span> <span class=\"n\">color_point</span> <span class=\"kd\">extends</span> <span class=\"n\">point</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">color_point</span>\n</code></pre></div>\n<p>Now I want to do <code>f p</code>, but this doesn't work because the types don't match and subtyping is not a thing a lean. What do you do in this case? Do I have to make a <code>point</code> from <code>p</code>? What's the idiomatic way to do this?</p>",
        "id": 263935377,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830544
    },
    {
        "content": "<p>You could make a coercion from <code>color_point</code> to <code>point</code>, or you can use <code>p.point</code>.</p>",
        "id": 263935446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638830604
    },
    {
        "content": "<p>I tried <code>coe p</code>, but that didn't work. I just tried <code>p.point</code> and it gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">point'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">color_point.point'</span>\n</code></pre></div>",
        "id": 263935605,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830707
    },
    {
        "content": "<p>Can you turn your example above into code that actually compiles? Is this lean3 or lean4?</p>",
        "id": 263935707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830768
    },
    {
        "content": "<p>It's lean 3.</p>",
        "id": 263935729,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830791
    },
    {
        "content": "<p>Probably you want <code>p.to_point</code></p>",
        "id": 263935735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830794
    },
    {
        "content": "<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"bp\">|</span> <span class=\"n\">green</span> <span class=\"bp\">|</span> <span class=\"n\">blue</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">color_point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">point</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">color_point</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">color.red</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">p.x</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p.point</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263935753,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830810
    },
    {
        "content": "<p>Ah, <code>to_point</code> works nicely. Thank you.</p>",
        "id": 263935796,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830842
    },
    {
        "content": "<p>If you don't like <code>.to_point</code> as the name, you can change it with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">color_point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">to_not_colored_point</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 263935809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830853
    },
    {
        "content": "<p>(I think)</p>",
        "id": 263935818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830859
    },
    {
        "content": "<p>That works to. Cool.</p>",
        "id": 263935883,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830890
    },
    {
        "content": "<p>A good trick here is <code>#print prefix color_point</code>, which shows you all the generated names that <code>structure</code> gave you</p>",
        "id": 263935901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830902
    },
    {
        "content": "<p>Which would have told you to use <code>to_point</code></p>",
        "id": 263935911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638830913
    },
    {
        "content": "<p>Aha. I didn't know about <code>prefix</code>. Good to know.</p>",
        "id": 263935941,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830932
    },
    {
        "content": "<p>Wow, that's a lot generated functions.</p>",
        "id": 263935995,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638830970
    },
    {
        "content": "<p>If you a group <code>g</code> and you want to get at the semigroup, is it just <code>g.to_semigroup</code> or do you have to use <code>to_monoid</code> first?</p>",
        "id": 263936223,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831094
    },
    {
        "content": "<p>Here's how the coercion would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">color_point</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">color_point.to_point</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"c1\">-- foo ↑p : ℕ</span>\n</code></pre></div>\n<p>The up-arrow is notation for <code>has_coe.coe</code>, which in this case is <code>color_point.to_point</code>. You could also write <code>instance (α) : has_coe (color_point α) (point α) := { coe := color_point.to_point }</code> -- it's the same thing.</p>",
        "id": 263936642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831358
    },
    {
        "content": "<p>Re the group question: are you rolling your own groups, are you bundling the type into the group etc etc? Can you post code? I'm not clear what <code>g</code> is. In Lean we do <code>(G : Type) [group G]</code> and then type class inference knows G has a semigroup structure.</p>",
        "id": 263936760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/subtyping/near/263936223\">said</a>:</p>\n<blockquote>\n<p>If you a group <code>g</code> and you want to get at the semigroup, is it just <code>g.to_semigroup</code> or do you have to use <code>to_monoid</code> first?</p>\n</blockquote>\n<p>Looks like <code>g.to_semigroup</code> works.</p>",
        "id": 263936777,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831439
    },
    {
        "content": "<p>At least, that's what I infer after extending the <code>color_point</code> struct one-level higher.</p>",
        "id": 263936834,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831477
    },
    {
        "content": "<p>Didn't realize there was a <code>has_coe</code> class. Good to know.</p>",
        "id": 263936939,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831545
    },
    {
        "content": "<p>In mathlib, groups are not done in the same way as <code>color_point</code>s. They are classes, and the questions you're asking are handled by type class inference. I still don't know what <code>g</code> is but if it's the group structure on the type as opposed to the type itself then in Lean it would be called <code>_inst_1</code> (an auto-generated name) and humans would not have to worry about your question at all.</p>",
        "id": 263936988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831580
    },
    {
        "content": "<p>But classes are just structs with a class attribute, so I think the same mechanism will work for classes.</p>",
        "id": 263937181,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831658
    },
    {
        "content": "<p>Yes but humans don't name instances of classes so you can't write <code>g.to_semigroup</code>. Can you post some code?</p>",
        "id": 263937267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831722
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">semigroup.mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>It happened by itself, no <code>g.to_semigroup</code>.</p>",
        "id": 263937377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831778
    },
    {
        "content": "<p>You can if you're making a function where instead of [group a], you write (g : group a). I just used groups as an example. My actual working code involves convergence systems.</p>",
        "id": 263937422,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638831804
    },
    {
        "content": "<p>Oh sure you can override the system, I have no idea what contortions you'd have to go through then. Did you know that fields are additive monoids? I use this, but I have no idea how many <code>.to_?</code>s I need to add to prove it.</p>",
        "id": 263937535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831866
    },
    {
        "content": "<p>Whyever would you want to override the type class system though?</p>",
        "id": 263937625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638831919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">semigroup.mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : ∀ (G : Type) [_inst_1 : group.{0} G] (a b c : G),</span>\n<span class=\"cm\">  @eq.{1} G</span>\n<span class=\"cm\">    (@has_mul.mul.{0} G</span>\n<span class=\"cm\">       (@has_mul.mk.{0} G</span>\n<span class=\"cm\">          (@semigroup.mul.{0} G</span>\n<span class=\"cm\">             (@monoid.to_semigroup.{0} G (@div_inv_monoid.to_monoid.{0} G (@group.to_div_inv_monoid.{0} G _inst_1)))))</span>\n<span class=\"cm\">       (@has_mul.mul.{0} G</span>\n<span class=\"cm\">          (@has_mul.mk.{0} G</span>\n<span class=\"cm\">             (@semigroup.mul.{0} G</span>\n<span class=\"cm\">                (@monoid.to_semigroup.{0} G</span>\n<span class=\"cm\">                   (@div_inv_monoid.to_monoid.{0} G (@group.to_div_inv_monoid.{0} G _inst_1)))))</span>\n<span class=\"cm\">          a</span>\n<span class=\"cm\">          b)</span>\n<span class=\"cm\">       c)</span>\n<span class=\"cm\">    (@has_mul.mul.{0} G</span>\n<span class=\"cm\">       (@mul_one_class.to_has_mul.{0} G</span>\n<span class=\"cm\">          (@monoid.to_mul_one_class.{0} G (@div_inv_monoid.to_monoid.{0} G (@group.to_div_inv_monoid.{0} G _inst_1))))</span>\n<span class=\"cm\">       a</span>\n<span class=\"cm\">       (@has_mul.mul.{0} G</span>\n<span class=\"cm\">          (@mul_one_class.to_has_mul.{0} G</span>\n<span class=\"cm\">             (@monoid.to_mul_one_class.{0} G</span>\n<span class=\"cm\">                (@div_inv_monoid.to_monoid.{0} G (@group.to_div_inv_monoid.{0} G _inst_1))))</span>\n<span class=\"cm\">          b</span>\n<span class=\"cm\">          c)) :=</span>\n<span class=\"cm\">λ (G : Type) [_inst_1 : group.{0} G] (a b c : G),</span>\n<span class=\"cm\">  @semigroup.mul_assoc.{0} G</span>\n<span class=\"cm\">    (@monoid.to_semigroup.{0} G (@div_inv_monoid.to_monoid.{0} G (@group.to_div_inv_monoid.{0} G _inst_1)))</span>\n<span class=\"cm\">    a</span>\n<span class=\"cm\">    b</span>\n<span class=\"cm\">    c</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Looks like under the hood it goes <code>group.to_div_inv_monoid</code>, <code>div_inv_monoid.to_monoid</code>, <code>monoid.to_semigroup</code>.</p>",
        "id": 263937783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638832021
    },
    {
        "content": "<p>It's not about overriding, but about defining functions that don't use instance arguments but regular arguments. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/order.html#topological_space.induced\">https://leanprover-community.github.io/mathlib_docs/topology/order.html#topological_space.induced</a></p>",
        "id": 263937906,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638832087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/subtyping/near/263937181\">said</a>:</p>\n<blockquote>\n<p>But classes are just structs with a class attribute, so I think the same mechanism will work for classes.</p>\n</blockquote>\n<p>They also have instances for all the things they <code>extend</code>, making it convenient to use lemmas about, say, a semigroup, when what you have is a group.</p>",
        "id": 263938138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638832220
    },
    {
        "content": "<p>Yes. That's true. In my case though, I'm making functions that basically producing values to use as instances, just like the <code>topological_space.induced</code>function I linked above.</p>",
        "id": 263938427,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638832366
    },
    {
        "content": "<p>The tradeoff between classes and structures is that <code>[group a]</code> should mean <code>a</code> has a single group structure ever, but you get to more conveniently use lemmas due to typeclass search, and <code>(g : group a)</code> means you can use multiple group structures on the same type and more easily compare them, but then having a hierarchy of types of structures is more inconvenient.</p>\n<p>Topological spaces have the annoying property that most of the time a class is good, but sometimes you <em>do</em> want to deal with multiple topologies on the same type (there's a lattice of topologies after all), which can get difficult to manipulate.</p>",
        "id": 263938593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638832527
    },
    {
        "content": "<p>The reason that <code>induced</code> is a <code>def</code> and not an <code>instance</code> is that type class inference will never be able to find the <code>f</code> so it were an instance it would never fire.</p>",
        "id": 263938603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638832537
    },
    {
        "content": "<p>Since convergence spaces are like topological spaces, I'm going to run into all the sames issues I guess.</p>",
        "id": 263938919,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638832800
    },
    {
        "content": "<p>I'm going to basically copy/paste the <code>topology</code> code in mathlib, but using convergence spaces.</p>",
        "id": 263938989,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638832834
    }
]