[
    {
        "content": "<p>Can anyone find where <code>add_comm</code> acquires <code>simp</code>?</p>",
        "id": 176357776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569236111
    },
    {
        "content": "<p>I do find</p>\n<div class=\"codehilite\"><pre><span></span>git grep <span class=\"s2\">&quot;attri.*simp.*add_comm&quot;</span>\nsrc/set_theory/lists.lean:local attribute <span class=\"o\">[</span>-simp<span class=\"o\">]</span> add_comm add_assoc\n</pre></div>",
        "id": 176358088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569236460
    },
    {
        "content": "<p>Maybe it's in core?</p>",
        "id": 176358108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569236476
    },
    {
        "content": "<p><code>mul_comm</code> is locally <code>simp</code> when the <code>run_cmd transport_multiplicative_to_additive</code> defining <code>add_comm</code> is defined, so I guess that's where it gets the attribute.</p>",
        "id": 176358111,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569236478
    },
    {
        "content": "<p>in <code>init.algebra.group</code></p>",
        "id": 176358130,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569236500
    },
    {
        "content": "<p>Maybe that line from <code>set_theory.lists</code> should move to <code>logic.basic</code> and become global?</p>",
        "id": 176358198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569236551
    },
    {
        "content": "<p>I quite like having it as a simp lemma.</p>",
        "id": 176362826,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569241211
    },
    {
        "content": "<p>It frustrates me to no end. I get everything all lined up so <code>simp</code> will work, but then <code>simp</code> uses <code>add_comm</code> and arbitrarily jumbles up terms.</p>",
        "id": 176362910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569241320
    },
    {
        "content": "<p>I think you can't globally remove an attribute anyway.</p>",
        "id": 176362958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569241333
    },
    {
        "content": "<p>To me it sounds like automatic invocations of <code>add_comm</code> should be done by <code>ring</code>, <code>abel</code>Â and similar tactics.</p>",
        "id": 176365218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569243263
    },
    {
        "content": "<p>I think <code>add_comm</code> is the declaration that I most often have to remove from a simp set (<code>simp [-add_comm]</code>). I would also have preferred it to not have <code>simp</code> by default.</p>",
        "id": 176377075,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569251165
    },
    {
        "content": "<p>We should remove it from core. I don't know where the attribute is added. I'm wondering if it's through meta programming</p>",
        "id": 176377377,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569251366
    },
    {
        "content": "<p>Chris proposed a diagnosis several posts upstairs</p>",
        "id": 176377976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569251751
    },
    {
        "content": "<p>A theory: I think it's in <code>group.lean</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">mul_comm</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">mul_left_comm</span>\n<span class=\"c1\">-- ... later</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">transport_with_dict</span> <span class=\"o\">(</span><span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"n\">name_map</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">copy_decl_using</span> <span class=\"n\">dict</span> <span class=\"n\">src</span> <span class=\"n\">tgt</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">copy_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">reducible</span> <span class=\"n\">src</span> <span class=\"n\">tt</span> <span class=\"n\">tgt</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">copy_attribute</span> <span class=\"bp\">`</span><span class=\"n\">simp</span> <span class=\"n\">src</span> <span class=\"n\">tt</span> <span class=\"n\">tgt</span>\n<span class=\"bp\">&gt;&gt;</span> <span class=\"n\">copy_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">src</span> <span class=\"n\">tt</span> <span class=\"n\">tgt</span>\n</pre></div>\n\n\n<p>The <code>local</code> on <code>local attribute</code> means that the attribute is only present inside the section right? But maybe this localness gets clobbered when it does the <code>copy_attribute</code>.</p>",
        "id": 176379098,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569252407
    },
    {
        "content": "<p>I have <code>simp [-sub_eq_add_neg]</code> much more often than <code>simp [-add_comm]</code></p>",
        "id": 176379106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569252415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  Isn't that what Chris also said?</p>",
        "id": 176379266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569252515
    },
    {
        "content": "<p>yep</p>",
        "id": 176379315,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569252549
    },
    {
        "content": "<p>But mul_comm isn't a simp lemma I think. So this is a bug in <code>transport_with_dict</code>?</p>",
        "id": 176379522,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569252689
    },
    {
        "content": "<p>I'm wondering if setting that <code>tt</code> flag on <code>copy_attribute</code> will cause it to be local</p>",
        "id": 176380470,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569253227
    },
    {
        "content": "<p>Ok so <code>copy_attribute `simp src ff tgt</code> will set it as a local attribute. But I can't see a tactic that tells you whether an attribute is local or not so I think the best fix is to just unset the attribute in the <code>group.lean</code> file.</p>",
        "id": 176381182,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569253702
    },
    {
        "content": "<blockquote>\n<p>I think you can't globally remove an attribute anyway.</p>\n</blockquote>\n<p>Aw damn.</p>",
        "id": 176381857,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569254187
    },
    {
        "content": "<p>You can actually remove <code>mul_comm</code> as a local simp attr and the<code>group.lean</code> file still checks, so that might be the best way to fix it.</p>",
        "id": 176383481,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569255191
    },
    {
        "content": "<p>PRed a change to remove add_comm and add_left_comm from simp lemmas. <a href=\"https://github.com/leanprover-community/lean/pull/65\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/65\">https://github.com/leanprover-community/lean/pull/65</a></p>",
        "id": 176414536,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1569276934
    },
    {
        "content": "<p>I suspect this might be a change that makes it hard to keep mathlib in sync with both 3.4.2 and 3.5c?</p>",
        "id": 176419746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1569282407
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 176420165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569282904
    },
    {
        "content": "<p><code>ne.def</code> is another simp lemma that i frequently remove from my simp only set</p>",
        "id": 176891069,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569796763
    }
]