[
    {
        "content": "<p>I'm pretty sure we don't have the following lemma (or smth similar) and I am not too sure where to start.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.monotone</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_perm_comp_monotone_on</span>  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">σ</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">monotone_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My first thought was to use <code>finset.sort</code> in some way but I can't currently see how. Thanks for the help!</p>",
        "id": 277060876,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1648585803
    },
    {
        "content": "<p>Just noting that there is a more general version using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monovary\">docs#monovary</a> and that the proof of the above should translate directly to a proof of the <code>monovary</code> version.</p>",
        "id": 277061015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648585854
    },
    {
        "content": "<p>I don't think you should use <code>finset.sort</code>. I would do an induction on <code>s</code></p>",
        "id": 277061216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648585943
    },
    {
        "content": "<p>I mean starting with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">s.induction_on</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 277061273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648585998
    },
    {
        "content": "<p>I think there is probably a short and constructive way to get what you want here using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sort\">docs#finset.sort</a></p>",
        "id": 277064867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648587992
    },
    {
        "content": "<p>Not to say that it's easier than induction!</p>",
        "id": 277064935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648588046
    },
    {
        "content": "<p>Here's a similar result proved using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mono_equiv_of_fin\">docs#mono_equiv_of_fin</a>: <a href=\"https://github.com/leanprover-community/mathlib/blob/deuber/src/combinatorics/to_mathlib.lean#L15-L40\">https://github.com/leanprover-community/mathlib/blob/deuber/src/combinatorics/to_mathlib.lean#L15-L40</a>. I'm still not sure about the best way to phrase the lemma</p>",
        "id": 277101034,
        "sender_full_name": "David Wärn",
        "timestamp": 1648623506
    },
    {
        "content": "<p>David, if you have other statements in mind, do you think we should change the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monovary_on.sum_smul_comp_perm_le_sum_smul\">docs#monovary_on.sum_smul_comp_perm_le_sum_smul</a>?</p>",
        "id": 277108315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648627960
    }
]