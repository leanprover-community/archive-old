[
    {
        "content": "<p>Is this hard coded? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton.elim\">docs#subsingleton.elim</a> doesn't have any any attributes attached, so I'm not sure how to investigate further into what <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a> is doing<br>\n.</p>",
        "id": 221639210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609848660
    },
    {
        "content": "<p>The example in question is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">add_comm_monoid.nat_semimodule.to_distrib_mul_action.to_mul_action.to_has_scalar</span>\n    <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">tensor_product.has_scalar'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">tensor_product.semimodule'.to_distrib_mul_action.to_mul_action.to_has_scalar</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221639988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609849267
    },
    {
        "content": "<p>And I was hoping that I could train <code>congr</code> to solve it more easily. I can't see how to tag this with <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#congr\">attr#congr</a> either.</p>",
        "id": 221640079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609849332
    },
    {
        "content": "<p>subsingleton is hard-coded into the code that creates the congruence lemmas.</p>",
        "id": 221643131,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609851698
    }
]