[
    {
        "content": "<p>It is rather easy to write recursive parser like this (example from <code>data.buffer.parser</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">fix_core</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fix_core</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fix</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"n\">fix_core</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">input.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">input</span>\n</code></pre></div>\n<p>But what if I want a lot of mutual recursive parsers?</p>\n<p>My current solution is:</p>\n<ol>\n<li>hlist</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">hprod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">hprod</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">αs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">hprod</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">αs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟦`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">nil</span> <span class=\"bp\">`⟧`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>fixN by hprod</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">fixN_core</span> <span class=\"o\">{</span><span class=\"n\">αs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hprod.pure</span> <span class=\"bp\">@</span><span class=\"n\">parser.failure</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fixN_core</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fixN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">αs</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span> <span class=\"n\">αs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hprod.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hprod.cons</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">input</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fixN_core</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">input.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fixN</span> <span class=\"o\">(</span><span class=\"n\">hprod.tail</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">hprod.cons</span> <span class=\"n\">failure</span><span class=\"o\">))</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>example</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">parsers</span> <span class=\"o\">:</span> <span class=\"n\">hprod</span> <span class=\"n\">parser</span>\n    <span class=\"o\">[</span> <span class=\"n\">value</span> <span class=\"c1\">-- element</span>\n    <span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">value</span> <span class=\"c1\">-- elements</span>\n    <span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"c1\">-- value</span>\n    <span class=\"o\">,</span> <span class=\"bp\">...</span>\n    <span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fixN</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⟦</span><span class=\"n\">element</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"n\">valueP</span><span class=\"o\">,</span> <span class=\"bp\">...⟧</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⟦</span> <span class=\"c1\">-- element</span>\n      <span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span>\n    <span class=\"o\">,</span> <span class=\"c1\">-- elements</span>\n      <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"n\">element</span>\n    <span class=\"o\">,</span> <span class=\"c1\">--value</span>\n      <span class=\"n\">value.object</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">object</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"o\">,</span> <span class=\"bp\">...</span>\n    <span class=\"bp\">⟧</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there some better way to do this?</p>",
        "id": 226723077,
        "sender_full_name": "Kana",
        "timestamp": 1613594952
    },
    {
        "content": "<p>I think I should try higher kinded structures like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">parsers</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">elements</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">))</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 226724015,
        "sender_full_name": "Kana",
        "timestamp": 1613595361
    },
    {
        "content": "<p>The usual workaround is to pass later parsers as arguments to earlier parsers</p>",
        "id": 226724253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613595471
    },
    {
        "content": "<p>I don't think generalizing the monad is necessary here in any case</p>",
        "id": 226724394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613595514
    },
    {
        "content": "<p>In your case, you can probably get away with just one main parser that you pass to all the others, namely <code>valueP</code></p>",
        "id": 226724577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613595599
    },
    {
        "content": "<p>do you have a MWE?</p>",
        "id": 226724763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613595657
    },
    {
        "content": "<p>here I made one for you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">string</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">array</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">value</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">null</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n<span class=\"kd\">def</span> <span class=\"n\">ws</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">ch'</span> <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">value.object</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">object</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">value.array</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">arrayP</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">elements</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"n\">element</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">arrayP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ch'</span> <span class=\"sc\">'['</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">elements</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch'</span> <span class=\"sc\">'['</span>\n</code></pre></div>\n<p>Note that there isn't any order we can write the declarations since they are in a cyclic dependency</p>",
        "id": 226725680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613596038
    },
    {
        "content": "<p>However they aren't too far from being acyclic; if we break the dependence on <code>valueP</code> then everything becomes acyclic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">object</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">element</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">elements</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">element</span> <span class=\"n\">valueP</span><span class=\"o\">)</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">arrayP</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ch'</span> <span class=\"sc\">'['</span> <span class=\"bp\">*&gt;</span> <span class=\"o\">(</span><span class=\"n\">elements</span> <span class=\"n\">valueP</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch'</span> <span class=\"sc\">'['</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">value.object</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">object</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">value.array</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">arrayP</span> <span class=\"n\">valueP</span>\n</code></pre></div>\n<p>The trick here is that <code>valueP</code> is allowed to pass itself as an argument to all the other definitions</p>",
        "id": 226726029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613596193
    },
    {
        "content": "<p>Lean 4 has the notion of a mutual block that makes these kinds of recursions a lot easier. Lean 3 has mutual definitions too but they are not compiled very well</p>",
        "id": 226726348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613596314
    },
    {
        "content": "<p>Here's what it looks like with a lean 3 mutual def:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">object</span><span class=\"o\">,</span> <span class=\"n\">element</span><span class=\"o\">,</span> <span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"n\">arrayP</span><span class=\"o\">,</span> <span class=\"n\">valueP</span>\n<span class=\"k\">with</span> <span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">with</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span> <span class=\"n\">elements</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"n\">element</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span> <span class=\"n\">arrayP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">'['</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">elements</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch'</span> <span class=\"sc\">'['</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span> <span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value.object</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">object</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">value.array</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">arrayP</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The <code>| x :=</code> nuisance parameter is because we can only use this to define values of function type, which <code>parser</code> happens to be</p>",
        "id": 226726730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613596477
    },
    {
        "content": "<p>My not so minimal WE (in MWE namespace)<br>\n<a href=\"https://gist.github.com/kana-sama/a4e2e7ca66f0bcefba9b5c15d3fe85a6\">https://gist.github.com/kana-sama/a4e2e7ca66f0bcefba9b5c15d3fe85a6</a></p>",
        "id": 226726962,
        "sender_full_name": "Kana",
        "timestamp": 1613596566
    },
    {
        "content": "<p>Thanks again, I am looking at  your example</p>",
        "id": 226727063,
        "sender_full_name": "Kana",
        "timestamp": 1613596639
    },
    {
        "content": "<p>Here's a version of your MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MWE</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parser_a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(::)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">ch</span> <span class=\"sc\">'a'</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">eof</span> <span class=\"bp\">$&gt;</span> <span class=\"o\">[])</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parser_b</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(::)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">ch</span> <span class=\"sc\">'b'</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">parser_a</span> <span class=\"n\">parser_b</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">eof</span> <span class=\"bp\">$&gt;</span> <span class=\"o\">[])</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">abab</span> <span class=\"o\">:=</span> <span class=\"n\">list.as_string</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">parser_a</span> <span class=\"n\">parser_b</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">parser_b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">abab.run</span> <span class=\"s2\">\"abab\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MWE</span>\n</code></pre></div>",
        "id": 226727308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613596750
    },
    {
        "content": "<p>Oh thanks. So does <code>meta</code> have an effect like  \"disable totality checker and mark function as possible partial\"? It is what I want.</p>",
        "id": 226727736,
        "sender_full_name": "Kana",
        "timestamp": 1613596931
    },
    {
        "content": "<p>And here's your longer example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">element</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">elements</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">element</span> <span class=\"n\">valueP</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">member</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"n\">key</span> <span class=\"bp\">←</span> <span class=\"n\">ws</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">stringP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ws</span><span class=\"o\">,</span>\n    <span class=\"n\">ch</span> <span class=\"sc\">':'</span><span class=\"o\">,</span>\n    <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">element</span> <span class=\"n\">valueP</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">members</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sep_by1</span> <span class=\"o\">(</span><span class=\"n\">ch'</span> <span class=\"sc\">','</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">member</span> <span class=\"n\">valueP</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">object</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">value</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">&lt;$</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"sc\">'{'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ws</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">'}'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"sc\">'{'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">members</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">'}'</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">array</span> <span class=\"o\">(</span><span class=\"n\">valueP</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">&lt;$</span> <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"sc\">'['</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ws</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">']'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">ch</span> <span class=\"sc\">'['</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">elements</span> <span class=\"n\">valueP</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"sc\">']'</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">json_parser</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">value</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">value.object</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">object</span> <span class=\"n\">json_parser</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.array</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">array</span> <span class=\"n\">json_parser</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.string</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">stringP</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.number</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.bool</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">str</span> <span class=\"s2\">\"true\"</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.bool</span> <span class=\"n\">false</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">str</span> <span class=\"s2\">\"false\"</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">value.null</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">str</span> <span class=\"s2\">\"null\"</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n  <span class=\"k\">#eval</span> <span class=\"n\">json_parser.run</span> <span class=\"s2\">\"[{</span><span class=\"se\">\\\"</span><span class=\"s2\">1</span><span class=\"se\">\\\\</span><span class=\"s2\">n</span><span class=\"se\">\\\\</span><span class=\"s2\">u0030</span><span class=\"se\">\\\"</span><span class=\"s2\">: 1}, 2]\"</span>\n</code></pre></div>",
        "id": 226728338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613597217
    },
    {
        "content": "<p>It doesn't disable totality checking, i.e. matches still have to be exhaustive, but it does disable termination checking. In fact, in the first version of the code I just posted, I left off the <code>| x :=</code> part in <code>json_parser</code>, and doing this will cause the <code>#eval</code> line to stack overflow because it tries to eagerly evaluate all the closures before it even starts giving it the input</p>",
        "id": 226728560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613597322
    },
    {
        "content": "<p>the <code>| x :=</code> says that we should leave <code>json_parser</code> unevaluated (for example when this term appears in the other parsers) until we have an input to give it</p>",
        "id": 226728642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613597361
    },
    {
        "content": "<p>In lean 4 there is a <code>partial</code> keyword for enabling this particular functionality without also opting in to the unsafe parts of the language</p>",
        "id": 226728926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613597463
    }
]