[
    {
        "content": "<p>What is the best way to prove <code>(m * n) % n = 0</code> on <code>nat</code>? IIRC, the library used to have rules like these for calculating with <code>mod</code>, but now I can't find them. Am I missing something?</p>",
        "id": 161256631,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1553094873
    },
    {
        "content": "<p><code>nat.mul_mod_left</code></p>",
        "id": 161257340,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553095301
    },
    {
        "content": "<p>In general, the files, <code>data.nat.modeq</code> and <code>data.zmod.basic</code> might help with this stuff.</p>",
        "id": 161257529,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553095438
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 161257689,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1553095542
    },
    {
        "content": "<p><code>by library_search</code> agrees: <code>mul_mod_left m n</code> :-) </p>\n<p>I've actually run into some robustness problems (works on lots of examples, mysteriously fails in some cases, in every fix I try breaks something else...) but hopefully coming soon.</p>",
        "id": 161293514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553117673
    },
    {
        "content": "<p>You are great at writing teasers!</p>",
        "id": 161294078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553118146
    },
    {
        "content": "<p>Sorry.. life keeps intervening. :-)</p>",
        "id": 161295787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553119414
    },
    {
        "content": "<p>It occurred to me on the bike ride in that I should split <code>library_search</code> into a few PRs. I should be able to do one that covers 95% of cases that is nice and simple. Then I can later add the full on \"let's do backwards reasoning with clever choices of the search pattern\", if I ever get that to be robust. :-)</p>",
        "id": 161295875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553119465
    }
]