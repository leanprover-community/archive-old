[
    {
        "content": "<p>Why does <a href=\"https://github.com/leanprover-community/mathlib/pull/12949\">this PR</a> cause so many \"(deterministic) timeout\"s? Did I break something?</p>",
        "id": 276721217,
        "sender_full_name": "FR",
        "timestamp": 1648294230
    },
    {
        "content": "<p>That PR is huge! Can you summarize what you did so we can try and understand what broke?</p>",
        "id": 276721330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648294423
    },
    {
        "content": "<p>Your diff is 4k lines. I honestly can't debug this!</p>",
        "id": 276721333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648294428
    },
    {
        "content": "<p>Did you try running the linters locally on your machine, this would highlight some common issues. Perhaps adding <code>#lint</code> near the start of one of the files that times out on CI would help</p>",
        "id": 276721410,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648294506
    },
    {
        "content": "<p>Most of the differences are in <code>algebra/order/ring.lean</code>. And almost all differences in the other files are name substitution. However, It causes many \"(deterministic) timeout\"s in unrelated files.</p>",
        "id": 276721572,
        "sender_full_name": "FR",
        "timestamp": 1648294717
    },
    {
        "content": "<p>A PR should be atomic, ie do one thing. Yours does at least two things: changing the algebraic order hierarchy and renaming existing classes. Further, it is humongous.</p>",
        "id": 276722213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648295652
    },
    {
        "content": "<p>I hope you will learn from this that a PR should be either be deep and focused on one file or wide and do a single thing in many files.</p>",
        "id": 276722250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648295754
    },
    {
        "content": "<p>Or neither of those. We love small PRs!</p>",
        "id": 276722289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648295774
    },
    {
        "content": "<p>OK, I will try to split it.</p>",
        "id": 276722550,
        "sender_full_name": "FR",
        "timestamp": 1648296046
    },
    {
        "content": "<p>Before you do that, please share your plans with us.</p>",
        "id": 276722573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648296070
    },
    {
        "content": "<p>It seems that you're introducing many many typeclasses. This goes against the conclusion we came about with <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, namely to give up on an extension algebraic order hierarchy.</p>",
        "id": 276723313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648297122
    },
    {
        "content": "<p>Instead, we want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/covariant\">docs#covariant</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/contravariant\">docs#contravariant</a>.</p>",
        "id": 276723319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648297139
    },
    {
        "content": "<p>You're attacking one of the most critical and technical bits of mathlib on your fourth PR! I would advise you to tackle easier problems first.</p>",
        "id": 276723387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648297205
    },
    {
        "content": "<p>I agree with Yaël.  This has also recently appeared in <a href=\"#narrow/stream/113488-general/topic/Trying.20to.20refactor.20.60algebra.2Forder.2Fring.60\">this thread</a>.</p>",
        "id": 276723403,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648297227
    },
    {
        "content": "<p>There might be some consensus on changing the name <code>ordered_semiring</code> to <code>ordered_cancel_semiring</code> or something like that.  Though the main effect of this would be to increase the number of characters to type.  I suspect that introducing many more typeclasses will need to be carefully re-examined.</p>\n<p>It might be the way to go in Lean 4, though...</p>",
        "id": 276723514,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648297337
    },
    {
        "content": "<p>Several must-reads if you're still interested despite all my warnings (sorry, can't find the links right now):</p>\n<ul>\n<li>This blogpost explaining why mixins lead to exponential instance terms</li>\n<li>Leonardo's note on the new structure command</li>\n<li><a href=\"https://arxiv.org/abs/2202.01629\">Anne's hom typeclass paper</a></li>\n</ul>",
        "id": 276723700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648297632
    },
    {
        "content": "<p>As we discussed in the other thread, the assumptions of <code>ordered_ring</code> are too strict. In most of the definitions I could find, <code>ordered_ring</code> only requires monotonicity of multiplication by a non-negative number, and does not require additively cancellative. So I handled each case, keeping the original and adding the classes with weaker assumptions. This resulted in 2×2×2×3=24 type classes. I asked in the other thread if there was a way to separate the assumptions from the algebraic and order structures, but it doesn't seem easy to do now. If it is possible in the future, maybe it can be reduced to fewer type classes. And the combinations of assumptions for all possible lemmas still have 24 cases, corresponding to the current 24 type classes.</p>",
        "id": 276724517,
        "sender_full_name": "FR",
        "timestamp": 1648298892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/.28deterministic.29.20timeout.20in.20PR.20.2312949/near/276723319\">said</a>:</p>\n<blockquote>\n<p>Instead, we want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/covariant\">docs#covariant</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/contravariant\">docs#contravariant</a>.</p>\n</blockquote>\n<p>Read this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 276724594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648299026
    },
    {
        "content": "<p>Does it mean the <code>ordered_[...]</code> hierarchy will be deprecated in the future?</p>",
        "id": 276724888,
        "sender_full_name": "FR",
        "timestamp": 1648299538
    },
    {
        "content": "<p>How should we use the new way to represent the lemmas for the ordered rings? It looks like this part is still working in progress.</p>",
        "id": 276725750,
        "sender_full_name": "FR",
        "timestamp": 1648300686
    },
    {
        "content": "<p>If you want to help with the refactor, you can port more of the lemmas that are currently in <code>algebra.order.monoid_lemmas</code> to the file <code>algebra.order.monoid_lemmas_zero_lt</code>.  This entails replacing the assumption that multiplication by <em>all</em> elements is monotone, to only requiring that multiplication by all <em>positive</em> elements is monotone.  This means using the typeclasses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">monotone</span> <span class=\"n\">left</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">pos_mul_mono</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">is</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">pos_mul_strict_mono</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">is</span> <span class=\"n\">strictly</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"n\">monotone</span> <span class=\"n\">right</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">mul_pos_mono</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">is</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">mul_pos_strict_mono</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">is</span> <span class=\"n\">strictly</span> <span class=\"n\">monotone.</span>\n<span class=\"bp\">*</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone</span> <span class=\"n\">left</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">contravariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">pos_mul_mono_rev</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">is</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">contravariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">pos_mul_reflect_lt</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">is</span> <span class=\"n\">strictly</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"n\">reverse</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone</span> <span class=\"n\">right</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">contravariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">mul_pos_mono_rev</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">is</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone</span><span class=\"bp\">;</span>\n<span class=\"bp\">*</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">contravariant_class</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">abbreviated</span> <span class=\"bp\">`</span><span class=\"n\">mul_pos_reflect_lt</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n    <span class=\"n\">expressing</span> <span class=\"n\">that</span> <span class=\"n\">multiplication</span> <span class=\"kd\">by</span> <span class=\"n\">positive</span> <span class=\"n\">elements</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">is</span> <span class=\"n\">strictly</span> <span class=\"n\">reverse</span> <span class=\"n\">monotone.</span>\n</code></pre></div>\n<p>mentioned in the file <code>algebra.order.monoid_lemmas_zero_lt</code>.</p>",
        "id": 276726636,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648301957
    },
    {
        "content": "<p>Alternatively, if you want to test this out, you can import the file <code>algebra.order.monoid_lemmas_zero_lt</code> in your project and start using the lemmas that are there (although there are not so many at the moment and I have not placed any of the relevant instances).</p>",
        "id": 276726686,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302005
    },
    {
        "content": "<p>My approach so far has been to port about 10 new lemmas for each PR, while keeping the file as a leaf of the import tree, so as to make builds quick.</p>\n<p>Once the instances will start going in, this file will suddenly move much further inside the import tree and then it might be a good idea to add the instances one at a time, to make sure that everything still works (or, rather, that everything that breaks, breaks for a very precise reason that can be fixed!).</p>",
        "id": 276726774,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648302163
    }
]