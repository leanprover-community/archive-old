[
    {
        "content": "<p>Hi, I'm a total newb to Lean and to proof assistants generally. I'm working through Chapter 4 of TPIL, and in particular the <a href=\"https://leanprover.github.io/live/3.4.1/#code=open%20classical%0A%0Avariables%20(%CE%B1%20:%20Type)%20(p%20q%20:%20%CE%B1%20%E2%86%92%20Prop)%0Avariable%20a%20:%20%CE%B1%0Avariable%20r%20:%20Prop%0A%0Aexample%20:%20(%E2%88%83%20x%20:%20%CE%B1,%20r)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20r%20%E2%86%92%20(%E2%88%83%20x%20:%20%CE%B1,%20r)%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%88%A7%20r)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%88%A7%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%88%A8%20q%20x)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%88%A8%20(%E2%88%83%20x,%20q%20x)%20:=%20sorry%0A%0Aexample%20:%20(%E2%88%80%20x,%20p%20x)%20%E2%86%94%20%C2%AC%20(%E2%88%83%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x)%20%E2%86%94%20%C2%AC%20(%E2%88%80%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%C2%AC%20%E2%88%83%20x,%20p%20x)%20%E2%86%94%20(%E2%88%80%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%C2%AC%20%E2%88%80%20x,%20p%20x)%20%E2%86%94%20(%E2%88%83%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0A%0Aexample%20:%20(%E2%88%80%20x,%20p%20x%20%E2%86%92%20r)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%86%92%20r)%20%E2%86%94%20(%E2%88%80%20x,%20p%20x)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20r%20%E2%86%92%20p%20x)%20%E2%86%94%20(r%20%E2%86%92%20%E2%88%83%20x,%20p%20x)%20:=%20sorry\" target=\"_blank\" title=\"https://leanprover.github.io/live/3.4.1/#code=open%20classical%0A%0Avariables%20(%CE%B1%20:%20Type)%20(p%20q%20:%20%CE%B1%20%E2%86%92%20Prop)%0Avariable%20a%20:%20%CE%B1%0Avariable%20r%20:%20Prop%0A%0Aexample%20:%20(%E2%88%83%20x%20:%20%CE%B1,%20r)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20r%20%E2%86%92%20(%E2%88%83%20x%20:%20%CE%B1,%20r)%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%88%A7%20r)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%88%A7%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%88%A8%20q%20x)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%88%A8%20(%E2%88%83%20x,%20q%20x)%20:=%20sorry%0A%0Aexample%20:%20(%E2%88%80%20x,%20p%20x)%20%E2%86%94%20%C2%AC%20(%E2%88%83%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x)%20%E2%86%94%20%C2%AC%20(%E2%88%80%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%C2%AC%20%E2%88%83%20x,%20p%20x)%20%E2%86%94%20(%E2%88%80%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0Aexample%20:%20(%C2%AC%20%E2%88%80%20x,%20p%20x)%20%E2%86%94%20(%E2%88%83%20x,%20%C2%AC%20p%20x)%20:=%20sorry%0A%0Aexample%20:%20(%E2%88%80%20x,%20p%20x%20%E2%86%92%20r)%20%E2%86%94%20(%E2%88%83%20x,%20p%20x)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20p%20x%20%E2%86%92%20r)%20%E2%86%94%20(%E2%88%80%20x,%20p%20x)%20%E2%86%92%20r%20:=%20sorry%0Aexample%20:%20(%E2%88%83%20x,%20r%20%E2%86%92%20p%20x)%20%E2%86%94%20(r%20%E2%86%92%20%E2%88%83%20x,%20p%20x)%20:=%20sorry\">example statements in 4.4</a>. I haven't been able to prove the last two of them, and I'm beginning to suspect that the last one, at least, is actually false.</p>\n<p><code>example : (∃ x : α, r → p x) ↔ (r → ∃ x : α, p x) := sorry</code>.</p>\n<p>If r is false and α is uninhabited, the left side of this equivalence is false while the right side is true, no?</p>",
        "id": 127526038,
        "sender_full_name": "Ben Weinstein-Raun",
        "timestamp": 1528082847
    },
    {
        "content": "<p>(sorry if there's a better place to ask this)</p>",
        "id": 127526088,
        "sender_full_name": "Ben Weinstein-Raun",
        "timestamp": 1528082940
    },
    {
        "content": "<p>that's the right place to come</p>",
        "id": 127526096,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528082956
    },
    {
        "content": "<p>I think you may be right</p>",
        "id": 127526148,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528083063
    },
    {
        "content": "<p>As you say, if <code>r</code> is false, the statement reduces to <code>(∃ x, true) ↔ true</code> which is another way of saying that <code>α</code> is inhabited, which does not seem to be an assumption</p>",
        "id": 127526221,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528083212
    },
    {
        "content": "<p>Sorry, I take it back: I just saw <code>variable a : α</code> which means that <code>α</code> is inhabited</p>",
        "id": 127526270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528083315
    },
    {
        "content": "<p>oh, wait, there is a line<br>\n<code>variable a : α</code><br>\nfurther up; I hadn't noticed this. Is that equivalent to an assumption that α is inhabited?</p>",
        "id": 127526272,
        "sender_full_name": "Ben Weinstein-Raun",
        "timestamp": 1528083319
    },
    {
        "content": "<p>ah, yeah, sorry about that</p>",
        "id": 127526273,
        "sender_full_name": "Ben Weinstein-Raun",
        "timestamp": 1528083331
    },
    {
        "content": "<p>No worries</p>",
        "id": 127526274,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528083350
    },
    {
        "content": "<p>(also, thanks!)</p>",
        "id": 127526369,
        "sender_full_name": "Ben Weinstein-Raun",
        "timestamp": 1528083551
    },
    {
        "content": "<p><span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span>  <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127526373,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1528083572
    }
]