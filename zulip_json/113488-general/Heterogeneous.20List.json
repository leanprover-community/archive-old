[
    {
        "content": "<p>Are there any attempts at heterogeneous lists in mathlib? These would be lists which admit elements of varying types, presumably with some constraint on the element types, otherwise you couldn't do much with such a thing. The use case I envision is to make using type classes more ergonomic, e.g. when I want to map a typeclass function over values of different types, all of which are in the class. For example, for pretty-printing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Typeclass-requiring, heterogeneous list. -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">thlist</span> <span class=\"o\">(</span><span class=\"n\">cl</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">):</span> <span class=\"n\">Sort</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">thlist</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cl</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">thlist</span> <span class=\"bp\">→</span> <span class=\"n\">thlist</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">thlist</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">thlist</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"kn\">open</span> <span class=\"n\">thlist</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">cl</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cl</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">thlist</span> <span class=\"n\">cl</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">map</span> <span class=\"n\">t</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fmt_all</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">thlist</span> <span class=\"n\">has_to_format</span><span class=\"o\">):</span> <span class=\"n\">list</span> <span class=\"n\">format</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">@</span><span class=\"n\">has_to_format</span><span class=\"bp\">.</span><span class=\"n\">to_format</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"n\">fmt_all</span> <span class=\"n\">h</span><span class=\"o\">[</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)]],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> hlist.lean:24:2: information trace output</span>\n<span class=\"cm\">  [abc, 2, (tt, ff)] -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168704562,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561141765
    },
    {
        "content": "<p>For this you could just use a <code>list</code> whose element type is a sigma type, right?</p>",
        "id": 168706919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561143494
    },
    {
        "content": "<p>Hm, that might also work, thanks! Some universe errors appear when I try it with the same definition of <code>cl</code>, but it's probably possible.</p>",
        "id": 168708573,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561144660
    },
    {
        "content": "<p>Maybe <code>d_array</code> is useful? It is a sequence of a fixed length where you can specify the type of the <code>i</code>-th element.</p>",
        "id": 168743283,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1561193800
    },
    {
        "content": "<p>I once tried to write heterogeneous lists but they didn't make anything easier. I found the problem was I didn't have an application</p>",
        "id": 168743673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561194654
    },
    {
        "content": "<p>The example can be done more simply:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fmt_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_to_format</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">format</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">format</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">has_to_format</span><span class=\"bp\">.</span><span class=\"n\">to_format</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">fmt_all</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">fmt_cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">fmt_all</span><span class=\"o\">[</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">trivial</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 168743678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561194673
    },
    {
        "content": "<p>not really heterogeneus list i imagine, but over here I was playing with a qpf datatype like list of sigma,<br>\n<a href=\"#narrow/stream/113488-general/topic/qpf.20and.20type.20class.20instances\" title=\"#narrow/stream/113488-general/topic/qpf.20and.20type.20class.20instances\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/qpf.20and.20type.20class.20instances</a></p>\n<p>if we change that last line from eval to check:<br>\n<code>#check list.map (alt.elim (λ l, alt.l (string.length l)) (λ r, alt.r(r + 1))) x</code></p>\n<p>which in my original implicit formulation gives: <code>list alt</code>, and with Simon's recommendation of explicit type variables (and appropriate modifications) gives <code>list (alt ℕ ℕ)</code></p>",
        "id": 168752300,
        "sender_full_name": "matt rice",
        "timestamp": 1561212048
    },
    {
        "content": "<p>This can kind of be annoying if you want a list of a bunch of types because you end up with list (alt ℕ (alt bool string)) etc...</p>",
        "id": 168752500,
        "sender_full_name": "matt rice",
        "timestamp": 1561212481
    }
]