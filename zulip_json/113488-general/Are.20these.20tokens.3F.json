[
    {
        "content": "<p>In VS Code, if I type <code>#check nat.</code>and then, with the cursor just to the right of the <code>.</code> I type Esc then ctrl-space (possibly more than once) then I get, I think, to see a list of things which the Lean VS Code plugin thinks might come next. In this particular case,  the list seems to naturally split into two types of things.</p>",
        "id": 124499064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611857
    },
    {
        "content": "<p>The first type of thing is the \"purple cube\" type of thing, which are all the possibilities which are prefixed by a little drawing of a purple hexagon/cube thing.</p>",
        "id": 124499067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611885
    },
    {
        "content": "<p>In this particular case they seem to be every single theorem / definition / constructor etc (perhaps every single <code>name</code>?) which starts <code>nat.X</code> where <code>X</code> begins with a, b, c or d.</p>",
        "id": 124499078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611928
    },
    {
        "content": "<p>The fact that it stops at d might be a bug in the VS Code Lean plugin.</p>",
        "id": 124499082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611953
    },
    {
        "content": "<p>But, from <code>nat.add</code> to <code>nat.discriminate</code> they're all \"purple cube\" choices.</p>",
        "id": 124499123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611995
    },
    {
        "content": "<p>And then after the purple cube choices, we have the \"about 7 straight lines\" choices</p>",
        "id": 124499126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612023
    },
    {
        "content": "<blockquote>\n<p>The fact that it stops at d might be a bug in the VS Code Lean plugin.</p>\n</blockquote>\n<p>or maybe because there are too many possibilities?</p>",
        "id": 124499131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522612029
    },
    {
        "content": "<p>The \"7 straight lines\" possibilities start <code>#check #compile #eval #exit #help #print #reduce #unify</code></p>",
        "id": 124499184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612151
    },
    {
        "content": "<p>and then there's a whole bunch more, <code>add_key_equivalence assume at attribute axiom axioms begin by calc class coinductive...</code></p>",
        "id": 124499232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612229
    },
    {
        "content": "<p>there is <code>def</code> but no <code>definition</code></p>",
        "id": 124499238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612252
    },
    {
        "content": "<p>wait, coinductive?</p>",
        "id": 124499240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522612262
    },
    {
        "content": "<p>there is <code>theorem</code> though.</p>",
        "id": 124499245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612270
    },
    {
        "content": "<p>wait, I thought we don't have coinductive!</p>",
        "id": 124499247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522612280
    },
    {
        "content": "<p>VS Code says it's there</p>",
        "id": 124499250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612307
    },
    {
        "content": "<p>but then again I thought we had definitions</p>",
        "id": 124499252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612315
    },
    {
        "content": "<p>and VS Code says no</p>",
        "id": 124499253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612319
    },
    {
        "content": "<p>nah, coinductive hasn't been implemented</p>",
        "id": 124499294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522612342
    },
    {
        "content": "<p>These are strange choices for completions because nat.theorem makes no sense</p>",
        "id": 124499296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612344
    },
    {
        "content": "<p><code> vm check failed: is_closure(o) (possibly due to incorrect axioms, or sorry) </code></p>",
        "id": 124499297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612364
    },
    {
        "content": "<p>I think you get an achievement for that error</p>",
        "id": 124499298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612372
    },
    {
        "content": "<p>I'll give you an octopus</p>",
        "id": 124499303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612388
    },
    {
        "content": "<p>thanks</p>",
        "id": 124499306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522612410
    },
    {
        "content": "<p>So are these \"7 straight lines\" almost the complete list of symbols and commands?</p>",
        "id": 124499348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612459
    },
    {
        "content": "<p>except that they do mention coinductive and don't mention definition...</p>",
        "id": 124499349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612473
    },
    {
        "content": "<p>As well as \"purple cube\" and \"7 lines\" I can get \"abc in a box\"</p>",
        "id": 124499400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612603
    },
    {
        "content": "<p>which might mean \"string\"</p>",
        "id": 124499401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612607
    },
    {
        "content": "<p>although ctrl-space after <code>#check \"abc\"</code>gives me that <code>#check</code> is an abc-in-a-box</p>",
        "id": 124499461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612717
    },
    {
        "content": "<p>Maybe purple cube means \"identifier\"</p>",
        "id": 124499474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522612799
    },
    {
        "content": "<p>Reading through the docs of Lean VS Code extension doesn't seem to mention these purple hexagons. It does say \" *   By default, vscode will complete <code>then</code> to <code>has_bind.and_then</code> when you press enter. To disable this behavior, set <code>\"editor.acceptSuggestionOnEnter\": false</code> \" though, which I think is not true: it should be the string \"off\" rather than the bool <code>false</code></p>",
        "id": 124499732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522613282
    },
    {
        "content": "<p><code>coinductive</code> is a lean command, but it only supports coinductive predicates. It is defined as a user command in <code>init/meta/coinductive_predicates.lean</code></p>",
        "id": 124499792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522613460
    }
]