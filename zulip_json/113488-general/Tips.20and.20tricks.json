[
    {
        "content": "<p>Should we add a doc page with various tips and tricks? E.g.,</p>\n<ul>\n<li>use <code>--old</code> if you're going to edit low-level files (should we make it default?);</li>\n<li>temporarily hide a part of a long proof behind <code>sorry;</code>  to speed-up recompilation (saw recently somewhere on Zulip);</li>\n<li>if <code>refine</code> times out, try <code>convert</code> instead and see which terms Lean fails to unify;</li>\n<li>use <code>library_search</code> etc;</li>\n<li>what else?</li>\n</ul>",
        "id": 265408881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639820494
    },
    {
        "content": "<p>If there’s a complex-looking theorem or lemma that you think will be useful, bring it into context with ‘have := lemma_name‘ (or, if you want to see all the implicit arguments, ‘have := @lemma_name’). Feed it whatever arguments it needs, or use ‘_’ as a placeholder, to narrow in on the bit that you need. This can make it easier to see how to apply the theorem in your specific case.</p>",
        "id": 265410441,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639822570
    },
    {
        "content": "<p>I find this to be a useful approach, but it’s not something you’ll learn from reading finished code.</p>",
        "id": 265410472,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639822658
    },
    {
        "content": "<p>Can't-learn-it-from-finished-code sort of tricks are exactly what semi- beginners like me need, I think</p>",
        "id": 265414810,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1639829023
    },
    {
        "content": "<p>I think <code>#lint</code> should be mentioned as well.</p>",
        "id": 265415000,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639829313
    },
    {
        "content": "<p><code>rintro rfl</code> probably deserves mention, and maybe a bit of explanation. I know I had a lot of trouble telling what this does in proofs at first.</p>",
        "id": 265419970,
        "sender_full_name": "Scott Howard",
        "timestamp": 1639836023
    },
    {
        "content": "<p>That should be taught in the docstring for <code>rintro</code>. Tactic docstrings should have examples. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> am I right about this? I am about to embark on writing down a bunch of examples of tactic usage as part of preparation for my class; should I be PR'ing them to mathlib?</p>",
        "id": 265420284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639836453
    },
    {
        "content": "<p>I think we could do both. The docstring and the tips and tricks file.</p>",
        "id": 265420478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639836700
    },
    {
        "content": "<p>Rob gave some thoughts on making tactic docs / docstrings more helpful in <a href=\"https://github.com/leanprover-community/mathlib/pull/3088\">#3088</a>.</p>",
        "id": 265420532,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1639836731
    },
    {
        "content": "<p>Ah, I missed it completely---it's in the docstring for <code>rcases</code>, which is referred to by <code>rintro</code>'s docstring.</p>",
        "id": 265421089,
        "sender_full_name": "Scott Howard",
        "timestamp": 1639837419
    },
    {
        "content": "<p>Right, but the fact that you missed it means that things can be better</p>",
        "id": 265422151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639838839
    },
    {
        "content": "<p>I'm glad Brian beat me to the punch, I was going to link that same issue! Yes, if I had my way every tactic doc would have a standard structure with an <code>## Example usage</code> section that exhaustively showed all the features. Definitely PR anything you write</p>",
        "id": 265423314,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639840098
    },
    {
        "content": "<p>Excellent. I'd not seen this issue before!</p>",
        "id": 265423701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639840649
    },
    {
        "content": "<p>I don't remember who taught me this, but <code>#exit</code> is super useful when working in the beginning of a large file that you don't want to be recompiled everytime you change a letter</p>",
        "id": 265423765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639840778
    },
    {
        "content": "<p>Another tip I tell my students is how to restart the Lean server if things go haywire, and to bind a hotkey to do it if they find it happening a lot</p>",
        "id": 265423870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639840918
    },
    {
        "content": "<p>I've found it useful to set a keyboard shortcut in VS Code (I'm using Shift-Alt-N) to switch to <code>checking nothing</code> so I can quickly interrupt Lean if it starts sweating</p>",
        "id": 265424825,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639842271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/265423765\">said</a>:</p>\n<blockquote>\n<p>I don't remember who taught me this, but <code>#exit</code> is super useful when working in the beginning of a large file that you don't want to be recompiled everytime you change a letter</p>\n</blockquote>\n<p>And <code>.</code> for the similar but <em>before</em> the place you're touching.</p>",
        "id": 265427020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639845097
    },
    {
        "content": "<p>There is an option \"Check visible lines\"</p>",
        "id": 265436749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639854702
    },
    {
        "content": "<p>Another workflow tip: if you work on some large contribution, then it might be a good idea to start creating PRs with supporting lemmas before the main feature is ready (create new branch, cherry-pick parts of the diff, push, PR). In Emacs I use <code>magit</code>'s <code>d r main-feature-branch-name</code>, then press <code>v</code> on the hunks I want to see in the new branch. Probably, VS code has similar functionality (built-in or in a plug-in).</p>",
        "id": 265436895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639854909
    },
    {
        "content": "<p>Use <code>library_search</code>, as Yury mentioned, but also <code>simp?</code> and <code>tidy?</code> to suggest lemmas that can make progress.</p>",
        "id": 265480568,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639920928
    },
    {
        "content": "<p>And also: if at first <code>library_search</code> can't find a solution, do as much as you can to help it.  For example, if you have <code>x = y</code> somewhere in your goal but you have <code>h : y = x</code> in context, try rewriting <code>h</code> to make it better match your goal.  Similarly, if you have <code>P ∧ Q</code> in context and you think one of <code>P</code> or <code>Q</code> will be useful, make sure to break apart the conjunction.  In general, <code>library_search</code> is good at searching the library but don't expect it to be clever beyond that one job.</p>",
        "id": 265480833,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639921351
    },
    {
        "content": "<p>I made a start on this and PR'd at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/240\">https://github.com/leanprover-community/leanprover-community.github.io/pull/240</a>, please suggest things to add, there or here.<br>\nSo far I tried to stick to things that aren't mentioned in too many other places. So I avoided specific tactic syntax, those certainly are useful and some of those are hard to find, but I wanted to avoid overlap with the tactic doc and duplicate info, maybe we could add some links to \"most useful development tactics you won't see in finished code\" ?</p>",
        "id": 267111509,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641501705
    },
    {
        "content": "<p>I have a trick, but I don't know whether it qualifies. If you have a lemma involving multiplication which doesn't dualize (in the order sense, most likely because you need <code>ordered_semiring</code> or stronger), it very often means you're missing a more general statement which does.</p>\n<p>The way to get to that new statement is to replace multiplication by scalar multiplication. The idea is that your original statement had too many order assumptions which prevented it from dualizing, and scalar multiplication decouples them in the right way.</p>",
        "id": 267162829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641544122
    },
    {
        "content": "<p>Signs that a theorem is eligible for such generalization:</p>\n<ul>\n<li>You never use commutativity of multiplication (very strong sign!)</li>\n<li>You only consider binary products, or at worse a bounded number of them.</li>\n<li>It has a \"summing part\" and a \"multiplication part\"</li>\n<li>The ordered type you're using also has another role in the statement</li>\n<li>The ordered type you're using is concrete</li>\n</ul>",
        "id": 267163053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641544322
    },
    {
        "content": "<p>I applied this reasoning to</p>\n<ul>\n<li>The rearrangement inequality (<a href=\"https://github.com/leanprover-community/mathlib/pull/10861\">#10861</a>)</li>\n<li>Incidence algebras (<a href=\"https://github.com/leanprover-community/mathlib/tree/incidence_algebra\">branch#incidence_algebra</a>)</li>\n<li>Convex functions (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_on.convex_le\">docs#convex_on.convex_le</a> for example)</li>\n<li>Scalar multiplication of sets of reals (<a href=\"https://tqft.net/mathlib/data/real/pointwise\">file#data/real/pointwise</a>)</li>\n</ul>",
        "id": 267163114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641544387
    },
    {
        "content": "<p>Sometimes you can also generalize from, e.g., <code>λ x, x + a</code> to \"any monotone function\".</p>",
        "id": 267185175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559950
    },
    {
        "content": "<p>Some proofs about translation numbers generalize from \"a monotone map such that <code>f (x + 1) = f x + 1</code>\" to \"two monotone maps that commute\".</p>",
        "id": 267185223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641559991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/265423765\">said</a>:</p>\n<blockquote>\n<p>I don't remember who taught me this, but <code>#exit</code> is super useful when working in the beginning of a large file that you don't want to be recompiled everytime you change a letter</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> : can you explain exactly how this works?</p>",
        "id": 267224873,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641580492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/265424825\">said</a>:</p>\n<blockquote>\n<p>I've found it useful to set a keyboard shortcut in VS Code (I'm using Shift-Alt-N) to switch to <code>checking nothing</code> so I can quickly interrupt Lean if it starts sweating</p>\n</blockquote>\n<p>Seems useful, can you expand a bit on how to do this?</p>",
        "id": 267225249,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641580664
    },
    {
        "content": "<p>Every time you change a file, everything in that file below what you wrote (by default lean3 extension to VSCode) is recompiled. By writing <code>#exit</code>, you are telling Lean that \"ignore the rest of this file\". So you don't have to spend CPU on recompiling things below. You can delete that <code>#exit</code> once you're done.</p>",
        "id": 267225326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Suppose you're working on a 1000 lines long file, but you're tweaking a lemma that's declared in the 30th line. if you place <code>#exit</code> right after that lemma, you can play with it without demanding lean to compile everything else</p>",
        "id": 267225415,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641580730
    },
    {
        "content": "<p>So writing <code>#exit</code> is equivalent to commenting out the remainder of the file.</p>",
        "id": 267225433,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641580739
    },
    {
        "content": "<p>Not exactly.</p>",
        "id": 267225626,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- nothing</span>\n</code></pre></div>",
        "id": 267225634,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580822
    },
    {
        "content": "<p>That has an error</p>",
        "id": 267225645,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580827
    },
    {
        "content": "<p>Great, thanks -- I did not know! And is there a way to tell Lean not to restart the whole library from scratch? It sometimes happen to me to open a very deep file and to try a <code>#where</code> to see the local variables. Although I don't save it, Lean starts recompiling everything, and it takes forever...</p>",
        "id": 267225661,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641580839
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>That doesn't</p>",
        "id": 267225668,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580842
    },
    {
        "content": "<p>And what about the <code>checking nothing</code>? Where is it (in VSCode)?</p>",
        "id": 267225857,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641580926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/267225661\">said</a>:</p>\n<blockquote>\n<p>Great, thanks -- I did not know! And is there a way to tell Lean not to restart the whole library from scratch? It sometimes happen to me to open a very deep file and to try a <code>#where</code> to see the local variables. Although I don't save it, Lean starts recompiling everything, and it takes forever...</p>\n</blockquote>\n<p>Once I mentioned that even adding an empty line will trigger that. I don't remember where that thread is, but some people argued that it's a hard thing to avoid</p>\n<p>Edit: <a href=\"#narrow/stream/270676-lean4/topic/optimized.20re-compilations/near/260260625\">found it!</a></p>",
        "id": 267225883,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641580937
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YYertoEl-9UQA6ip0lAlEmkd/image.png\">image.png</a> <br>\nAt the bottom of the window. You can also press Ctrl-Shift-P and type \"Checking\" to see the options.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YYertoEl-9UQA6ip0lAlEmkd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YYertoEl-9UQA6ip0lAlEmkd/image.png\"></a></div>",
        "id": 267225935,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641580974
    },
    {
        "content": "<p>With <code>--old</code>, Lean doesn't recompile unchanged files. If you've modified <code>data.set.basic</code>, then rolled back, you might need to restart Lean server.</p>",
        "id": 267226814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641581335
    },
    {
        "content": "<p>I see, thanks; but where do you put <code>--old</code>?</p>",
        "id": 267227104,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641581449
    },
    {
        "content": "<p>Fillippo, check out the PR I linked to above! It tries to answer all these questions</p>",
        "id": 267227202,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641581486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/267225661\">said</a>:</p>\n<blockquote>\n<p>Great, thanks -- I did not know! And is there a way to tell Lean not to restart the whole library from scratch? It sometimes happen to me to open a very deep file and to try a <code>#where</code> to see the local variables. Although I don't save it, Lean starts recompiling everything, and it takes forever...</p>\n</blockquote>\n<p>I still find that closing the file without saving and restarting lean works best in this situation</p>",
        "id": 267227492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641581627
    },
    {
        "content": "<p>Thanks - and thanks also for starting the PR. I don't know if it counts here, but I often find it useful to temporarily use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span>  <span class=\"o\">:=</span>  <span class=\"n\">lemma_foo</span>\n</code></pre></div>\n<p>to see in the infoview what the lemma <code>lemma_foo</code> needs as a variable (be it a thing, like a number, or an assumption) and to gradually construct the matching objects. Then I revert everything to an <code>exact</code>, or even term mode.</p>",
        "id": 267228161,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641581896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113488-general/topic/Tips.20and.20tricks/near/267225857\">said</a>:</p>\n<blockquote>\n<p>And what about the <code>checking nothing</code>? Where is it (in VSCode)?</p>\n</blockquote>\n<p>In VS Code on MacOS, <code>Code &gt; Preferences &gt; Keyboard Shortcuts</code> opens a window listing all the possible keyboard shortcuts, and then searching in this page for <code>check</code> lets you set a keybinding for <code>Lean: Check Nothing</code>.</p>",
        "id": 267228504,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641582020
    },
    {
        "content": "<p>Found, thanks!</p>",
        "id": 267228853,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641582134
    },
    {
        "content": "<p>Yes, I mentioned introducing lemmas with <code>have := ...</code> earlier in the thread.  I use it so often that I'm now unable to type <code>have :</code> without automatically following it with <code>=</code>, which leads me to confusion quite frequently!</p>",
        "id": 267229133,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641582271
    },
    {
        "content": "<p>Same here!</p>",
        "id": 267229993,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641582658
    },
    {
        "content": "<p>I would certainly insert a small section containing an explication of the use of <code>$</code> to \"avoir parenthesis\" (I confess I am still unable to fully grasp how it works - I use it as a DIY tool but I would like to have nice instructions)</p>",
        "id": 267230521,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641582933
    },
    {
        "content": "<p>I added a bit about the $ sign to that PR, if you have any feedback on it that would be very helpful <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 267300610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641655061
    },
    {
        "content": "<p>Thanks Alex! I have a couple of comments:<br>\n1) The first sentence sounds odd to me : starting with \"As Lean...\" , I would expect a comma and then to see a conclusion, but that is missing;<br>\n2) Also, between the two codes, the bit \"can lead to annoying to find errors\" sounds weird to me.<br>\n3) Towards the end, you write \"as this function is in the or namespace.\" but I would put <code>or</code> in code-style, or something like that.</p>\n<p>The whole text is very neat, thanks! I just have one question about your example with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some_function</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">$..</span><span class=\"n\">applications</span><span class=\"o\">)</span> <span class=\"n\">another_argument</span>\n</code></pre></div>\n<p>would it work as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some_function</span> <span class=\"bp\">$</span> <span class=\"n\">a</span> <span class=\"bp\">$..</span><span class=\"n\">applications</span> <span class=\"n\">another_argument</span>\n</code></pre></div>\n<p>?</p>\n<p>The final bit concerning the dot notation is very nice; I would also add that many things can fall under this pattern; for instance, the fact that a lemma whose statement is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>can be <em>inserted</em> in another lemma called <code>continuous.bleah</code> in the form of <code>foo.bleah</code>: ideally, finding a true example in the library (I can have a look if you want) would be even more useful, since this <code>foo-bleah</code> idiom sounds a bit strange to mathematicians who are not used to CS-jargon (I think, or at least this was my experience). What might be worth writing out explicitly is that a name like <code>continuous.add</code> is not like <code>cotinuous_add</code>; the \"dot-notation\" is \"interactive\", and if one has always done Math on books this looks like crazy/magic!</p>",
        "id": 267301224,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641655941
    },
    {
        "content": "<p><code>a $ b $ c $ d</code> parses as <code>a (b (c d))</code></p>",
        "id": 267301853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641656771
    },
    {
        "content": "<p>I've added a continuous example!</p>",
        "id": 267314077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641674014
    },
    {
        "content": "<p>And clarified that <code>some_function $ a $..applications another_argument</code> wouldn't work, as <code>applications</code> eats <code>another_argument</code> then. And I fixed all the comments, thanks!</p>",
        "id": 267314168,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641674154
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 267314385,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641674482
    },
    {
        "content": "<p>Is it worth mentioning \"learn the naming convention for lemmas\" as a tip and linking to that page?</p>",
        "id": 267314704,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641674918
    },
    {
        "content": "<p><del><code>a $ (b $ c d) e</code></del> <code>a (b $ c d) e</code> parses as <code>a (b (c d)) e</code><br>\n<code>a $ (b $ c d) e</code> parses as <code>a (b (c d) e)</code></p>",
        "id": 267324360,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641687159
    },
    {
        "content": "<p>What do you mean?<br>\nThe first check here fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constant</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"kd\">constant</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"kd\">constant</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"kd\">constant</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"kd\">constant</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">$</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 267324680,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641687677
    },
    {
        "content": "<p>Fixed (I hope, not tested)</p>",
        "id": 267325024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641688257
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span>  does anyone with push access to leanprover-community/leanprover-community.github.io want to review <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/240\">leanprover-community/leanprover-community.github.io#240</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>?</p>",
        "id": 269408722,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643203195
    },
    {
        "content": "<p>Does using <code>variables ...</code> count as a tip/trick?<br>\n(as opposed to repeating such parameters over and over)</p>",
        "id": 269418503,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643206903
    },
    {
        "content": "<p>LGTM!</p>",
        "id": 269422697,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643208499
    },
    {
        "content": "<p>I was thinking of this more as a place to put tips that are hard to find/explain elsewhere so as to not make it too long and overload the reader. My (personal) feeling is that the use of variables is covered in other more introductory material linked to on the site, though maybe could be emphasised more in the style guide perhaps.<br>\nI don't mind being out-voted on this though if others feel this list should be more comprehensive. I haven't added everything we talked about in this thread for basically this reason, not wanting to duplicate the tactic list, glossary etc</p>",
        "id": 269422750,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643208517
    },
    {
        "content": "<p>No, I agree with you <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 269423053,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643208656
    },
    {
        "content": "<p>Two things that might be added are the use of <code># where</code> if one is willing to use a result in some <code>namespace</code> but it is not clear where the result is. The second I am thinking of is the way <code>import</code> works (in relation with the first point): in particular, the fact that even if a file has been imported but the relevant namespace has not been opened, there will be problems.</p>",
        "id": 269427712,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1643210371
    },
    {
        "content": "<p>hello! I'm new to lean and to computer assisted proofs. if I'm interested in the theorem proving+verifying more than in programming with lean, which version should I play with? from the little reading I've done, it looks like lean{2,3,4} are mutually incompatible (though correct me if I'm wrong)</p>",
        "id": 278881456,
        "sender_full_name": "Alex Ellis",
        "timestamp": 1649879679
    },
    {
        "content": "<p>What is your background? What do you want to prove/verify?</p>",
        "id": 278881560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649879742
    },
    {
        "content": "<p>my background: used to me a mathematician (rep theory, higher categories, and applications to low dim topology). now I work in tech, mostly ML. there's nothing in particular I want to prove! just exploring curiously. once I learn more, I'd be interested in contributing to formalization projects, but I don't know much about what's going on in the lean community</p>",
        "id": 278881768,
        "sender_full_name": "Alex Ellis",
        "timestamp": 1649879857
    },
    {
        "content": "<p>Lean 3 currently has a developed pure mathematics library - <code>mathlib</code>.</p>",
        "id": 278881906,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649879908
    },
    {
        "content": "<p>Until mathlib has been ported over to Lean 4 (which should hopefully happen within the next year or so), I'd recommend starting with Lean 3. The community website has a bunch of learning resources here: <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 278881963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649879937
    },
    {
        "content": "<p>Unless you want to roll your own \"basic\" theorems and proofs, then I would suggest starting there</p>",
        "id": 278881975,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649879943
    },
    {
        "content": "<p>thanks! yes, <code>matlib</code> is what I've been playing with so far. good to know there are plans to port it to lean4. I'm curious—what's the reason lean is choosing to have non-backwards-compatible releases?</p>",
        "id": 278882128,
        "sender_full_name": "Alex Ellis",
        "timestamp": 1649880005
    },
    {
        "content": "<p>Greater functionality</p>",
        "id": 278882182,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880019
    },
    {
        "content": "<p>Unlike most programming languages where the terrain is pretty well-trodden, a lot is learned here with trial and error.</p>",
        "id": 278882557,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880161
    },
    {
        "content": "<p>As the <a href=\"https://leanprover.github.io/lean4/doc/faq.html#should-i-use-lean\">Lean 4 FAQ</a> puts it \"Lean is under heavy development, and we are constantly trying new ideas and tweaking the system. It is a research project and not a product.\"</p>",
        "id": 278883006,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649880371
    },
    {
        "content": "<p>It also has more a <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">section on significant changes from Lean 3 to Lean 4</a>.</p>",
        "id": 278883415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880600
    },
    {
        "content": "<p>The best time to make a backwards incompatible release is when your userbase is small, and your core users (here mathlib contributors) are willing to put up with the incompatibility. Lean has the luxury of being in that position unlike many other languages.</p>",
        "id": 278883535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649880653
    },
    {
        "content": "<p>Personally, I think the benefits derived from the breaking changes will significantly outweigh the hassles. For example, program extraction + proofs is <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> for me.</p>",
        "id": 278883766,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880769
    },
    {
        "content": "<p>I think the majority of the current user base feels similarly generally.</p>",
        "id": 278883824,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880802
    },
    {
        "content": "<p>15 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Which.20version.20of.20Lean.3F\">#new members &gt; Which version of Lean?</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span>.</p>",
        "id": 278884575,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649881159
    }
]