[
    {
        "content": "<p>I have just stumbled on a situation where I am not happy with typeclass inference. Maybe I am misusing it. I have been able to minimize the example, so maybe <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> you will be interested in this. Some motivation. Assume that some types can have a model type, whatever that means, and that this model type when it exists is unique. Then I want to register it as an outparam, to avoid writing it explicitly in all the formulas. This works pretty well most of the time, but not when I have products where it fails to find the relevant instance. MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">model_prod</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_fun</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_model_prod</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">my_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">has_model</span><span class=\"bp\">.</span><span class=\"n\">my_fun</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">has_model</span><span class=\"bp\">.</span><span class=\"n\">my_fun</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">come_on_lean</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">doesnt_work</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>In <code>come_on_lean</code> (which is exactly the same statement as the instance just before), <code>apply_instance</code> fails to find the relevant instance. And the instance search starts with <code>@has_model ?x_0 ?x_1 (γ × δ)</code>, which looks crazy to me because I have said right away that the model type should be <code>α × β</code>, so why start the search with <code>?x_0</code>? Then <code>doesnt_work</code> also fails, not surprisingly, because Lean fails to find the same model space instance on the product.</p>\n<p>Is there a proper way to formulate my instances (while keeping the out_param)?</p>",
        "id": 177980386,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570873385
    },
    {
        "content": "<p>I'm not surprised that the search starts with <code>@has_model ?x_0 ?x_1 (γ × δ)</code>; you said the first two args are out_params so it doesn't use them in the search</p>",
        "id": 177981016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570874468
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">has_model_prod</span> <span class=\"o\">{</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">my_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">has_model</span><span class=\"bp\">.</span><span class=\"n\">my_fun</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">has_model</span><span class=\"bp\">.</span><span class=\"n\">my_fun</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">works</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">model</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_model</span> <span class=\"n\">β</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_model</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 177981136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570874655
    },
    {
        "content": "<p>Thanks a lot, this is black magic to me! And it also works in my more complicated real use case, by replacing randomly some typeclass arguments in several of my definitions by implicit arguments. A little bit like with the recent changes to implicit arguments in coercions, I don't really understand what is going on. Is there a rule of thumb like the following: If we have <code>lemma foo [first_class A B] [second_class A B] ...</code> and <code>second_class</code> in its definition has a typeclass argument <code>[first_class A B]</code>, then one could (and should?) change the definition of <code>foo</code> to <code>lemma foo {_ : first_class A B} [second_class A B]</code>?</p>",
        "id": 177982239,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570876506
    },
    {
        "content": "<p>What happens is that in your instance, with <code>[model α] [model β] [has_model α γ] [has_model β δ]</code>, it will search for all four of these instances, from left to right. Since the target is <code>@has_model ?x_0 ?x_1 (γ × δ)</code> which unifies with the instance conclusion, you end up searching for <code>model ?m_2</code> where ?x_0 := (?m_2 × ?m_3)`, which is not good</p>",
        "id": 177982440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570876844
    },
    {
        "content": "<p>By setting the <code>model α</code> arguments to implicit, we are saying to not attempt to typeclass search for them, and instead search only for <code>has_model α γ</code> (which gives us <code>model α</code> by unification), and since this has an out_param on <code>α</code> this works</p>",
        "id": 177982507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570876933
    },
    {
        "content": "<p>Whether to use <code> [first_class A B] [second_class A B]</code> or <code> {_ : first_class A B} [second_class A B]</code> depends on whether the typeclass search <code>@second_class A ? B</code> is supposed to be able to succeed</p>",
        "id": 177982538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570877035
    },
    {
        "content": "<p>If there is an out_param on that argument, then this search will work, otherwise it's probably not a good idea</p>",
        "id": 177982583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570877068
    }
]