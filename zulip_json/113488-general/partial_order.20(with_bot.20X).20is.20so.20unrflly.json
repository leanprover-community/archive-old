[
    {
        "content": "<p>From <code>order.bounded_lattice</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span>          <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>This definition of <code>le</code> on <code>with_bot alpha</code> means that stuff like <code>a &lt;= b iff some a &lt;= some b</code> is not proved by iff.rfl. If this proof had been done with pattern matching would this not have made life easier? Oh -- can one not pattern match in a structure field? Lean is complaining that my <code>set_of</code> is broken -- it thinks <code>{ ... | ...</code> is a set.</p>",
        "id": 161572349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553425234
    },
    {
        "content": "<p>it is defined that way so that you don't have to deal with pattern matching on option all the time</p>",
        "id": 161572424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553425332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">meh</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">o₂</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n         <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"c1\">--:= λ o₁ o₂ : option α, ∀ a ∈ o₁, ∃ b ∈ o₂, a ≤ b,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n</pre></div>",
        "id": 161572504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553425491
    },
    {
        "content": "<p>But instead I'm having to deal with other things.</p>",
        "id": 161572526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553425532
    },
    {
        "content": "<p>like having to use <code>change</code> then <code>rw</code> a lot</p>",
        "id": 161572585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553425592
    }
]