[
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"simon.hudon@gmail.com\" data-user-id=\"110026\">@Simon Hudon</span>, the new solve_by_elim is really nice, and now I’d like it to do even more. I know that there is a mechanism to pass arbitrary assumptions, rather than using local context, and perhaps I should just use that.</p>",
        "id": 123468417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520553251
    },
    {
        "content": "<p>But a particular thing I find myself using frequently now is applying eq.symm to various things in the context, before solve_by_elim can do its thing.</p>",
        "id": 123468426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520553291
    },
    {
        "content": "<p>That's interesting. Maybe I could add <code>cc</code> to <code>solve_by_elim</code>. In terms of performance, I don't know what kind of slow down that would be but maybe this could be enabled by <code>solve_by_elim!</code></p>",
        "id": 123468582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520553557
    },
    {
        "content": "<p>The other thing I'm finding I have to do is replace a hypothesis <code>h : f = g</code> with <code>funext</code> applied to it, to get <code>h' : \\forall x : X, f x = g x</code>.</p>",
        "id": 123468654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520553635
    },
    {
        "content": "<p>Can you try something for me? Write:</p>\n<div class=\"codehilite\"><pre><span></span>meta def my_solve_by_elim (asms : option (list expr) := none)  : opt_param ℕ 3 → tactic unit\n| 0 := done\n| (succ n) :=\napply_assumption asms $ cc &lt;|&gt; my_solve_by_elim n\n</pre></div>\n\n\n<p>and tell me if that does the job</p>",
        "id": 123468659,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520553647
    },
    {
        "content": "<p>Again, it would be nice to automate a bit.</p>",
        "id": 123468660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520553649
    },
    {
        "content": "<p>I'll investigate, thanks.</p>",
        "id": 123468663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520553663
    },
    {
        "content": "<p>For the second bit, maybe adding <code>simp [function.funext_iff] at *</code> before <code>solve_by_elim</code> would help.</p>",
        "id": 123468795,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520553886
    },
    {
        "content": "<p>(<code>function.funext_iff</code> is a new theorem in <code>mathlib</code>)</p>",
        "id": 123468807,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520553907
    },
    {
        "content": "<p>(ha, I'd actually just written <code>funext_iff</code> myself)</p>",
        "id": 123468920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520554095
    },
    {
        "content": "<p>No, <code>cc</code> doesn't seem to help here.</p>",
        "id": 123469450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555086
    },
    {
        "content": "<p>Can you should me a situation where the issue arises?</p>",
        "id": 123469466,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555147
    },
    {
        "content": "<p>Oh -- a bug in solve_by_elim: the recursive call doesn't pass the arguments asms.</p>",
        "id": 123469512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555175
    },
    {
        "content": "<p>Well, maybe this is too trivial ... :-)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">my_solve_by_elim</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 123469531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555266
    },
    {
        "content": "<p>It doesn't need to because it's declared on the left of <code>:</code></p>",
        "id": 123469532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555266
    },
    {
        "content": "<p>ah, great, sorry.</p>",
        "id": 123469535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555278
    },
    {
        "content": "<p>This example could be handled by <code>cc</code> on its own</p>",
        "id": 123469596,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555365
    },
    {
        "content": "<p>I guess it's obviously not going to help here...</p>",
        "id": 123469598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555366
    },
    {
        "content": "<p>what does <code>solve_by_elim</code> do?</p>",
        "id": 123469736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1520555576
    },
    {
        "content": "<p>repeatedly tries to apply hypotheses, discharging new goals created by <code>apply</code> by calling itself</p>",
        "id": 123469744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555621
    },
    {
        "content": "<p>(i.e. discharging them by matching against other hypotheses)</p>",
        "id": 123469746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"scott@tqft.net\" data-user-id=\"110087\">@Scott Morrison</span> Can you show me something that <code>cc</code> doesn't solve?</p>",
        "id": 123469801,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555737
    },
    {
        "content": "<p>I'll have to look further. I'll try to see how much <code>cc</code> and <code>solve_by_elim</code> together let me automate, and get back to you if I find such an example.</p>",
        "id": 123469857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555841
    },
    {
        "content": "<p>cool :)</p>",
        "id": 123469863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555871
    },
    {
        "content": "<p>btw, have you tried <code>tauto</code>? Does it help?</p>",
        "id": 123469907,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520555890
    },
    {
        "content": "<p>no, I haven't looked much at tauto yet. I already have tactics that do a lot of automatic <code>cases</code>, so I'm guessing it won't help much?</p>",
        "id": 123469930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520555986
    },
    {
        "content": "<p>The other pattern I have all the time is: a hypothesis <code>p : x = y</code>, where <code>x</code> and <code>y</code> are terms of some structure type <code>S</code>, then I go: <code>have p' := congr_arg S.f p, solve_by_elim</code>.</p>",
        "id": 123469990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520556072
    },
    {
        "content": "<p>It would be lovely to handle that automatically... that is, not just apply hypotheses, but apply structure fields <code>congr_arg</code>d over hypotheses.</p>",
        "id": 123470004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520556116
    },
    {
        "content": "<p>That's an interesting case. It's a bit like funext_iff which we talked about earlier in that we infer the equality of the parts from the equality of the whole. I feel like there's probably a greek-letter-reduction for that</p>",
        "id": 123470117,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520556283
    },
    {
        "content": "<p>I'm wondering if <code>congr_arg</code> / <code>funext_iff</code> / <code>cc</code> might be the best combination</p>",
        "id": 123470312,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520556562
    },
    {
        "content": "<p>I'm not sure what you mean. I guess what I'm hoping for it some automation for finding the correct applications of <code>congr_arg</code>.</p>",
        "id": 123470376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520556693
    },
    {
        "content": "<p>(i.e. work out for itself what the field <code>S.f</code> should be in my example above: <code>have p' := congr_arg S.f p</code>.)</p>",
        "id": 123470431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520556776
    },
    {
        "content": "<p>If I see <code>x = y</code> where <code>x</code> and <code>y</code> are functions, I'd specialize <code>∀ i, x i = y i</code> for every <code>i</code> such that <code>x i</code> appears in the context. Same thing <code>y</code>. I'd do the same with the fields of structure types</p>",
        "id": 123470446,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520556824
    },
    {
        "content": "<p>I'll write something, make a PR to mathlib and send you a link. How about that?</p>",
        "id": 123470504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520556897
    },
    {
        "content": "<p>sounds amazing :-)</p>",
        "id": 123470518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520556934
    },
    {
        "content": "<p>Do you have an example where that would be useful? All the examples I can think of can be handled directly by <code>cc</code></p>",
        "id": 123471150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520558041
    },
    {
        "content": "<p><code>cc</code> successfully solves</p>\n<div class=\"codehilite\"><pre><span></span>example {α β : Type} (f g : α → β) (w : g = f) (y : α) : f y = g y := by cc\n</pre></div>\n\n\n<p>but not</p>\n<div class=\"codehilite\"><pre><span></span>example {α β : Type} (f g : α → β) (w : (λ x, g x) = (λ x, f x)) (y : α) : f y = g y := by cc\n</pre></div>\n\n\n<p>Does anyone see some slight generalisation of <code>cc</code> (and/or possibly <code>solve_by_elim</code>) that can handle the second case?</p>",
        "id": 125017118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523591081
    },
    {
        "content": "<p>This example is unnecessarily complicated, sorry: even this pair:</p>\n<div class=\"codehilite\"><pre><span></span>example {α β : Type} (f g : α → β) (w : f = g) (y : α) : f y = g y := by cc -- success\nexample {α β : Type} (f g : α → β) (w : (λ x, f x) = (λ x, g x)) (y : α) : f y = g y := by cc -- FAIL\n</pre></div>",
        "id": 125017465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523591772
    },
    {
        "content": "<p>shows what's going on</p>",
        "id": 125017472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523591804
    },
    {
        "content": "<p>What happens if you call <code>simp</code> on <code>w</code> before <code>cc</code>? If it does eta reduction, then <code>cc</code> should succeed</p>",
        "id": 125017524,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523591906
    },
    {
        "content": "<p>That does work, but only because my MWE is too M!</p>",
        "id": 125017540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523591973
    },
    {
        "content": "<p>Maybe </p>\n<div class=\"codehilite\"><pre><span></span>example {α : Type} (f g : α → α) (w : (λ x, f (f x)) = (λ x, g (g x))) (y : α) : f (f y) = g (g y) :=\n</pre></div>\n\n\n<p>shows more of what I want.</p>",
        "id": 125017603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523592071
    },
    {
        "content": "<p>That sounds like my conversations with my advisor: \"- what are you looking at now? - Large scale software. - Cool, do you have a small example to illustrate your idea? - ...\"</p>",
        "id": 125017605,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523592087
    },
    {
        "content": "<p>scott, you are talking higher order matching here. It's very unlikely you will get something as powerful as what you are envisioning. Your best bet is to apply (reverse) funext on your hypotheses to turn it into a first order problem</p>",
        "id": 125017708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523592261
    },
    {
        "content": "<p>By reverse funext, do you mean <code>congr_fun</code>?</p>",
        "id": 125017711,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523592299
    },
    {
        "content": "<p>yes, with some beta postprocessing</p>",
        "id": 125017722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523592315
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> would be satisfied with converting <code>f (f x)</code> to <code>(f o f) x</code>. Then <code>simp, cc</code> would be good enough.</p>",
        "id": 125017788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523592463
    },
    {
        "content": "<p>My point is that if <code>\\forall x, f (f x) = g (g x)</code> was in the context instead of the lambda equality, I think cc would get it... maybe. (Honestly I don't understand how cc works, and I never trust it for anything significant.)</p>",
        "id": 125018251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523593558
    },
    {
        "content": "<p>It seems to work a bit like the ematching feature of smt solvers, doesn't it? I wouldn't count on it to do any specialization</p>",
        "id": 125018302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523593667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, thanks, this had been my past solution, but I'd been a bit worried by it. I'll leave it in place for now.</p>",
        "id": 125018404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523593883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Can you elaborate on why you prefer the equality between lambda terms?</p>",
        "id": 125018449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523593985
    },
    {
        "content": "<p>It’s just that the earlier steps of my automation are giving my equalities<br>\nbetween lambdas as hypotheses, and I’m having trouble automatically always<br>\ngetting these into a form that cc / solve_by_elim / rewrite_search can deal<br>\nwith. I think just replacing hypotheses which are equations between<br>\nfunctions types with foralls will do the job, and doesn’t seem to cause<br>\nproblems elsewhere.</p>",
        "id": 125020210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1523597807
    },
    {
        "content": "<p>Congruence closure (<code>cc</code>) performs purely equational reasoning via congruences.  It can prove <code>a=b, c=b |- f a = f c</code>, but that's essentially it.  One nice feature is that since it uses the congruence lemmas, it effectively ignores subsingleton arguments.</p>",
        "id": 125022906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523603907
    },
    {
        "content": "<p>It definitely won't solve <code> forall x, f x = g x |- f a = g a</code> or <code>fun x, f x = g x |- f a = g a</code>.  (They're clearly equivalent via funext, as you've observed.)  If you solve such problems, then you have a first-order prover---and this is out of scope for <code>cc</code>.  Congruence closure is supposed to be fast, predictable, and well, do congruence closure (and not general first-order proving).</p>",
        "id": 125022965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523604057
    },
    {
        "content": "<p>Re: E-matching.  Yes, you can solve the example with <code>forall x, f x = g x</code> using it (I think <code>by[smt] eblast</code> should do it).  What E-matching does is that it heuristically generates instances of universally quantified formulas (I think the <code>ematch</code> tactic uses the local context and lemmas tagged <code>[ematch]</code>).   In the example it would generate the instance <code>f y = g y</code>, and with this instance <code>cc</code> can solve the goal.  The instance <code>f y = g y</code> is generated because the <em>trigger</em> <code>f ?m_1</code> (in this example the lhs of the lemma)  E-<em>matches</em> a currently known subterm, namely <code>f y</code> (the lhs of the target in the example).</p>",
        "id": 125023122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1523604466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, how would you feel about generalising the definition of <code>solve_by_elim</code> to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">asms</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">discharger</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">done</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">done</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">discharger</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">apply_assumption</span> <span class=\"n\">asms</span> <span class=\"err\">$</span> <span class=\"n\">solve_by_elim</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I find myself using this as <code>solve_by_elim none cc</code> frequently and it's very helpful.</p>",
        "id": 125222682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524007676
    },
    {
        "content": "<p>Won't you have to write this as <code>tactic.cc</code> in an interactive tactic script?</p>",
        "id": 125223029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008183
    },
    {
        "content": "<p>I like it. Let's switch the order of <code>asms</code> and <code>discharger</code> though.</p>",
        "id": 125223045,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why? <code>cc</code> is also in <code>tactic.interactive</code>, no?</p>",
        "id": 125223109,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008304
    },
    {
        "content": "<p>but if it's not being parsed in interactive mode, you have to use the right namespace</p>",
        "id": 125223202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008491
    },
    {
        "content": "<p>one option is to have an <code>itactic</code> for the discharger, then you can write <code>{cc}</code> or some other tactic block</p>",
        "id": 125223249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008553
    },
    {
        "content": "<p>Right. Alternatively, we can provide a variant such as <code>solve_by_elim_with { cc }</code> with a <code>itactic</code> argument (and a better name)</p>",
        "id": 125223254,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008562
    },
    {
        "content": "<p>I think you can still make it optional</p>",
        "id": 125223261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008581
    },
    {
        "content": "<p>No because <code>itactic</code> doesn't use the same parsing framework as everything else</p>",
        "id": 125223279,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008617
    },
    {
        "content": "<p>Have you used <code>asms</code>? I think it needs a parser</p>",
        "id": 125223288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008639
    },
    {
        "content": "<p>If we don't want multiple tactic names, we'd have to live with <code>solve_by_elim { }</code> when we don't use that feature.</p>",
        "id": 125223349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008694
    },
    {
        "content": "<p>or stick with just passing a regular tactic and live with <code>solve_by_elim `[cc]</code></p>",
        "id": 125223360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524008726
    },
    {
        "content": "<blockquote>\n<p>Have you used <code>asms</code>? I think it needs a parser</p>\n</blockquote>\n<p>I haven't used it in interactive mode. I think similarly to the options that you can feed <code>simp</code> (e.g. <code>{ single_pass := tt }</code>) you can give it a literal as an expression</p>",
        "id": 125223417,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524008787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> just checking -- should I PR this, or would you prefer to do it? I'm happy either way.</p>",
        "id": 125335574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524189184
    },
    {
        "content": "<p>Hi @SimonHudon, I'm finding often <code>solve_by_elim</code> would succeed, except for the fact that an applicable equation needs to be wrapped in <code>eq.symm</code> first. In this case, <code>{discharger := cc}</code> works, but this tends to be very expensive and I'd really like to avoid it.</p>",
        "id": 128504293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720568
    },
    {
        "content": "<p>It's certainly possible to pass a more limited discharger, that just tries to apply hypotheses backwards, but I'm wondering what you think about building this behaviour in?</p>",
        "id": 128504299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720603
    },
    {
        "content": "<p>(e.g. by writing a version of <code>apply</code> that knows about symmetric relations, and then using that --- I'd be happy to implement if you thought this was reasonable behaviour)</p>",
        "id": 128504331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720642
    },
    {
        "content": "<p>I think that's feasible. We could probably define it as <code>sym_apply (r) := apply r &lt;|&gt; (symmetry &gt;&gt; apply r)</code></p>",
        "id": 128504349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529720742
    },
    {
        "content": "<p>oh, that's much sneakier than what I had in mind</p>",
        "id": 128504366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720763
    },
    {
        "content": "<p>Currently in <code>apply_assumption</code> you do an initial filtering step by <code>find_matching_head</code>, and I guess this wouldn't be viable.</p>",
        "id": 128504392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720796
    },
    {
        "content": "<p>Do you know if this actually saves much time? I'd hope that <code>apply</code> returns very quickly on anything <code>find_matching_head</code> had discarded.</p>",
        "id": 128504400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529720829
    },
    {
        "content": "<p>You're right. I have a feeling we could get rid of the filtering. I'm not sure that testing the assumptions is any faster than just applying them</p>",
        "id": 128504510,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721100
    },
    {
        "content": "<p>It might actually be slower because we might be doing the same work twice</p>",
        "id": 128504515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721118
    },
    {
        "content": "<p>I naively copied the behavior of <code>assumption</code> when I wrote that tactic. I didn't spend too much time thinking of the performances. It might be interesting to remove the filtering and measure the performances before adding the symmetry</p>",
        "id": 128504570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721239
    },
    {
        "content": "<p>The other thing I'm wondering is if we should try every assumption directly first and only then try symmetry or try symmetry as we go. The upside of the first approach is that when you don't need symmetry, you get better performances. The downside is that you can't say that the tactic applies \"the first assumption that matches\" anymore. If assumption 11 matches directly and assumption 2 matches modulo symmetry, which one do we want the tactic to pick?</p>",
        "id": 128504777,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721709
    },
    {
        "content": "<p>Hmm... my preference is to just make the change. :-) We do need some better tools for measuring performance. I know I neglect doing it, and then suffer for it later. (e.g. just now realising that letting solve_by_elim call <code>cc</code> can be very expensive)</p>",
        "id": 128504778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529721714
    },
    {
        "content": "<p>I would prefer just making the change too. I guess the rest is for extra credits :D</p>",
        "id": 128504831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721800
    },
    {
        "content": "<p>interesting... my inclination is to try symmetry as we go. When we're using <code>apply</code>, the semantic difference between <code>a=b</code> and <code>b=a</code> has pretty much disappeared.</p>",
        "id": 128504832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529721802
    },
    {
        "content": "<p>In that case, <a href=\"https://github.com/leanprover/mathlib/pull/164\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/164\">https://github.com/leanprover/mathlib/pull/164</a></p>",
        "id": 128504837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529721825
    },
    {
        "content": "<p>I prefer that too. And my intuition is that the difference in performances will be unnoticeable</p>",
        "id": 128504879,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721843
    },
    {
        "content": "<p>That was fast!</p>",
        "id": 128504886,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721868
    },
    {
        "content": "<p>The added benefit is the code gets shorter and neater :)</p>",
        "id": 128504899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721908
    },
    {
        "content": "<p>Would you care to add a test case?</p>",
        "id": 128504904,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529721927
    },
    {
        "content": "<p>Sure!</p>",
        "id": 128504957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1529722018
    },
    {
        "content": "<p>Can I somehow tag certain lemmas with some attribute so that <code>solve_by_elim</code> picks them up?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attibute</span> <span class=\"o\">[</span><span class=\"n\">use_for_solving</span><span class=\"o\">]</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">xyzzy</span>\n</pre></div>",
        "id": 158444869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550068696
    },
    {
        "content": "<p>Sorry... I better get on with 'back'.</p>",
        "id": 158490379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550104719
    },
    {
        "content": "<p>This is one of the main features.</p>",
        "id": 158490382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550104731
    },
    {
        "content": "<p>Well, my talk is next week, on Tuesday <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> …</p>",
        "id": 158504781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550123716
    }
]