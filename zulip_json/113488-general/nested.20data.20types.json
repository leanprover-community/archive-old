[
    {
        "content": "<p>Hi! I am trying to define a nested data type, but encounter some confusing error messages. I have reduced the problem to the following small case:</p>\n<div class=\"codehilite\"><pre><span></span>inductive tree (α : Type) (current : {x : α // true})\n| ite: α → list tree → list tree → tree\n</pre></div>\n\n\n<p>It gives the error: <code>nested occurrence 'list.{0} (tree α current)' contains variables that are not parameters</code>.<br>\nRemoving the parameter <code>current</code> gets rid of the error.<br>\nCan someone explain what is going on?<br>\nHow can I still make use of such a parameter?</p>",
        "id": 158519486,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550140889
    },
    {
        "content": "<p>what is it doing there? You aren't using it</p>",
        "id": 158519555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140931
    },
    {
        "content": "<p>True, but in the definition with the same error, I do use it.</p>",
        "id": 158519572,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550140951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">stmt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">signature</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">tenv</span> <span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span><span class=\"o\">:</span> <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">boolean</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n<span class=\"bp\">|</span> <span class=\"n\">while</span><span class=\"o\">:</span> <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">boolean</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">stmt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n<span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">svar</span> <span class=\"n\">e</span> <span class=\"n\">ty</span><span class=\"o\">):</span>\n    <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span>\n<span class=\"bp\">|</span> <span class=\"n\">async</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">method_name</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">constructor</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">rvar</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">arglist</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">stmt</span>\n<span class=\"bp\">|</span> <span class=\"n\">alloc</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">svar</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">arglist</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">constructor</span> <span class=\"n\">c</span><span class=\"o\">)):</span> <span class=\"n\">stmt</span>\n</pre></div>",
        "id": 158519585,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550140968
    },
    {
        "content": "<p>Also this is a nested inductive, those aren't handled well</p>",
        "id": 158519599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140986
    },
    {
        "content": "<p>If you can avoid <code>list stmt</code> it will be better</p>",
        "id": 158519606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140997
    },
    {
        "content": "<p>for example adding a <code>seq</code> constructor</p>",
        "id": 158519610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141009
    },
    {
        "content": "<p>and <code>nop</code> I guess</p>",
        "id": 158519620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141029
    },
    {
        "content": "<p>Yes, that was my previous approach. However, I was trying to find out whether working with nested lists of stmt would work too.</p>",
        "id": 158519679,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550141082
    },
    {
        "content": "<p>Why the type 1?</p>",
        "id": 158519690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141103
    },
    {
        "content": "<p>That's because <code>ty : type \\alpha</code> consists of all inhabited <code>Type</code>s with decidable equality.</p>",
        "id": 158519720,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550141153
    },
    {
        "content": "<p>I think this is just an issue with nested inductive compilation. It's pretty buggy, we're working on a replacement</p>",
        "id": 158519818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141241
    },
    {
        "content": "<p>You can also do the nested inductives yourself if you really want it like this</p>",
        "id": 158519826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141261
    },
    {
        "content": "<p>OK, that seems reasonable. Thanks, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>",
        "id": 158519902,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550141314
    },
    {
        "content": "<p>This is what it looks like as a plain inductive:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">stmt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">signature</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">tenv</span> <span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span><span class=\"o\">:</span> <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">boolean</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">stmt</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">while</span><span class=\"o\">:</span> <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">boolean</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">stmt</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">svar</span> <span class=\"n\">e</span> <span class=\"n\">ty</span><span class=\"o\">):</span>\n    <span class=\"n\">pexp</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">stmt</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">async</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">method_name</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">constructor</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">rvar</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">arglist</span> <span class=\"n\">e</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">stmt</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">alloc</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">svar</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">arglist</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">constructor</span> <span class=\"n\">c</span><span class=\"o\">)):</span> <span class=\"o\">(</span><span class=\"n\">stmt</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">stmt</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">stmt</span> <span class=\"n\">tt</span>\n</pre></div>",
        "id": 158519912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141329
    },
    {
        "content": "<p>the actual <code>stmt</code> is <code>stmt ff</code> here, and <code>stmt tt</code> is isomorphic to <code>list (stmt ff)</code></p>",
        "id": 158519986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550141396
    },
    {
        "content": "<p>Wow, that seems to be what I was looking for! So, if I understand correctly, the bool argument determines what constructors are applicable.</p>",
        "id": 158520169,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550141557
    },
    {
        "content": "<p>right. This is actually what the nested inductive type you wrote (is supposed to) compile to</p>",
        "id": 158520779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142247
    },
    {
        "content": "<p>Mutual inductives also compile down to something like this right?</p>",
        "id": 158520903,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550142428
    },
    {
        "content": "<p>yes, technically it's two-step, the nested inductive translates to a mutual inductive of <code>stmt</code> and <code>list_stmt</code>, and that gets compiled to an indexed inductive like the above</p>",
        "id": 158521002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142499
    },
    {
        "content": "<p>So if I may highjack the converstation; am I right in remembering there were talks to put mutual inductives in the kernel? Why bother if you can get them to compile down?</p>",
        "id": 158521042,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550142581
    },
    {
        "content": "<p>because they are slow</p>",
        "id": 158521046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142596
    },
    {
        "content": "<p>the kernel \"sees\" the entire compilation process when trying to reduce the computation rule</p>",
        "id": 158521116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142633
    },
    {
        "content": "<p>Also they are slow to compile the initial definitions; if you watch how long it takes to compile a nested inductive vs a plain inductive it's way slower</p>",
        "id": 158521142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142687
    },
    {
        "content": "<p>And mutual defs have to be done by well founded recursion, which is hit or miss</p>",
        "id": 158521199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550142750
    },
    {
        "content": "<blockquote>\n<p>You can also do the nested inductives yourself if you really want it like this</p>\n</blockquote>\n<p>Similarly, I can solve the mutual inductive definition by doing it myself:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">pexp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">tenv</span> <span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">constant_name</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">result_type</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">function_name</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">pexp</span> <span class=\"o\">(</span><span class=\"n\">args_type</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">result_type</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">lookup</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">rvar</span> <span class=\"n\">e</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">requal</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">class_name</span> <span class=\"n\">α</span><span class=\"o\">}:</span>\n    <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">ref</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">boolean</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">pexp</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">α</span><span class=\"o\">)}:</span>\n    <span class=\"n\">pexp</span> <span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">pexp</span> <span class=\"o\">(</span><span class=\"n\">ty</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is accepted without error.</p>",
        "id": 158876980,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550579022
    }
]