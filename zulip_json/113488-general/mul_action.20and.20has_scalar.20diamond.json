[
    {
        "content": "<p>Consider the following lemma. At the end, I have a diamond on two smul instances. What's the right way to avoid these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_eq_elem_of_subsingleton'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjugate_subsingleton'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">adjugate</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjugate_adjugate'</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.adjugate.adjugate</span> <span class=\"bp\">=</span> <span class=\"n\">h.unit</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">adjugate_subsingleton'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fintype.card_eq_one_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">h.unit</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.unit_spec</span><span class=\"o\">,</span> <span class=\"n\">det_eq_elem_of_subsingleton'</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">h.unit</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">h.unit</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">gpow_sub</span><span class=\"o\">,</span> <span class=\"n\">gpow_bit0</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">units.coe_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_comm_assoc</span><span class=\"o\">,</span> <span class=\"n\">gpow_one</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_succ</span><span class=\"o\">,</span>\n              <span class=\"n\">one_apply_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">units.ext_iff.mp</span> <span class=\"n\">hc.symm</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- diamond here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246400399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644390
    },
    {
        "content": "<p>In particular, I made the <code>hc</code> hypothesis because <code>smul_eq_mul</code> wouldn't work.</p>",
        "id": 246400468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644478
    },
    {
        "content": "<p>One way, of course, is to avoid using <code>h.unit</code> in the lemma statement, and have only nat powers.</p>",
        "id": 246400613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626644752
    },
    {
        "content": "<p>Can you reduce this any further?</p>",
        "id": 246402663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647749
    },
    {
        "content": "<p>This diamond is weird - if I do <code>local attribute [ext] has_scalar</code>, then I can close your goal with <code>ext, refl</code></p>",
        "id": 246402703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647773
    },
    {
        "content": "<p>Which suggests that the two smul actions are defeq</p>",
        "id": 246402708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626647787
    },
    {
        "content": "<p>Ah, here's the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.units</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">mul_action</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>  <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 246402813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626648004
    },
    {
        "content": "<p>Ah, and this reveals what's going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">units.mul_action'</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">has_mul.mul</span> <span class=\"n\">mul_one_class.mul</span> <span class=\"n\">monoid.mul</span> <span class=\"n\">div_inv_monoid.mul</span> <span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">group.mul</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">units.smul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">has_inv.inv</span> <span class=\"n\">div_inv_monoid.inv</span> <span class=\"n\">group.inv</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- {val := x.val * x_1.val, inv := x.inv * x_1.inv, val_inv := _, inv_val := _} =</span>\n    <span class=\"c1\">-- {val := x.val * x_1.val, inv := x_1.inv * x.inv, val_inv := _, inv_val := _}</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The actions agree on <code>val</code>, but disagree on <code>inv</code></p>",
        "id": 246403302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626648865
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.mul_action'/src\">src#units.mul_action'</a> is at fault here</p>",
        "id": 246403654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649419
    },
    {
        "content": "<p>What would the inv be then for that definition?</p>",
        "id": 246403697,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626649460
    },
    {
        "content": "<p>I think it should be using a right action, <code>opposite.op r⁻¹ • m⁻¹</code></p>",
        "id": 246403711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649504
    },
    {
        "content": "<p>I can investigate tomorrow</p>",
        "id": 246403719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626649524
    },
    {
        "content": "<p>I've almost fixed this, but I think the typeclass I need doesn't exist. What additional assumptions does the sorry below need?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"c1\">-- turn off the bad instance we're tring to fix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">units.mul_action'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Right actions on units - I can't think if a good way to inherit these from anything we already</span>\n<span class=\"cm\">have -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_has_scalar</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_mul_action</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">un</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">un.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)),</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Notation just to make the intent behind the sorried lemma clear. -/</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">g</span><span class=\"bp\">`</span> <span class=\"bp\">•&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n<span class=\"kd\">notation</span> <span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"bp\">&lt;•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">opposite.op</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">opposite.op_injective</span> <span class=\"bp\">$</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">units.op_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A fixed version of `units.mul_action'`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">better_mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- note: now only needs monoid not comm_monoid!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.better_mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- ok, no diamond any more</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">units</span>\n</code></pre></div>",
        "id": 246433891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626687167
    },
    {
        "content": "<p>I think the <code>sorry</code> can be expanded as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- we need `is_scalar_tower` for right actions</span>\n    <span class=\"o\">}</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">units.mul_inv</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- `smul_comm_class` is too strong here</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246435053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626688044
    },
    {
        "content": "<p>Does &lt;-units.coe_mul help here?</p>",
        "id": 246446778,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626696861
    },
    {
        "content": "<p>I doubt it, that step is folded into the <code>by rw units.mul_inv</code></p>",
        "id": 246449455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698662
    },
    {
        "content": "<p>I think the statement at the first <code>sorry</code> is a general statement of <code>m1 * (m2 &lt;• g2) = (m1 * m2) &lt;• g2</code> <del>which may or may not be something that can be expressed with existing typeclasses.</del></p>",
        "id": 246449559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698738
    },
    {
        "content": "<p>It follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_mul_assoc\">docs#smul_mul_assoc</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_smul_comm\">docs#mul_smul_comm</a>, but the requirements for those lemmas are stricter than we need as they go through the intermediate state <code>m1 * (m2 &lt;• g2)  = (m1 &lt;• g2) * m2</code> which isn't true when <code>M</code> and <code>G</code> are the same non-commutative monoid (and therefore  <code>(&lt;•) = (*)</code>).</p>",
        "id": 246449758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626698844
    },
    {
        "content": "<p>Here is another related clash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.monic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">matrix</span> <span class=\"n\">finset</span> <span class=\"n\">equiv.perm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_finset_prod_zero</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">l.prod</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">l.prod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">g.map_prod</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_finset_sum_zero</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">l.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">l.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">g.map_sum</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_det_X_add_C_zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">C.map_matrix</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C.map_matrix</span> <span class=\"n\">B</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n    <span class=\"n\">det</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_apply</span><span class=\"o\">,</span> <span class=\"n\">coeff_finset_sum_zero</span><span class=\"o\">,</span> <span class=\"n\">det_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_matrix_apply</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span>\n             <span class=\"n\">map_apply</span><span class=\"o\">,</span> <span class=\"n\">dmatrix.add_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">coeff_smul</span> <span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- really this should be a rewrite</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>                       <span class=\"c1\">-- if not for this diamond</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">coeff_finset_prod_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">finset.prod_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246800881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626918204
    },
    {
        "content": "<p>(just to check: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff_smul\">docs#polynomial.coeff_smul</a>)</p>",
        "id": 246812291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626934200
    },
    {
        "content": "<p>What's the type of the term in the strings m diamond?</p>",
        "id": 246812382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626934281
    },
    {
        "content": "<p>Ah, discord clarifies the diamond is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.has_scalar\">docs#units.has_scalar</a> (introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/7438\">#7438</a>) vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.has_scalar\">docs#polynomial.has_scalar</a></p>",
        "id": 246813533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626935794
    }
]