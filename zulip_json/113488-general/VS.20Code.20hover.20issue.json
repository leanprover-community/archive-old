[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zzz</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If I try this in VS Code (on Ubuntu) and hover over the two <code>zzz</code>s in the <code>apply</code> tactic line, the first one doesn't give me a little transient window saying <code>zzz : A \\to C</code> but the second one does. Can someone else reproduce? Should I expect the window to pop up for the first <code>zzz</code> as well?</p>",
        "id": 154997129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547322447
    },
    {
        "content": "<p>I get the corresponding behavior in emacs too, so I guess it is an issue with Lean itself</p>",
        "id": 154997252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547322667
    },
    {
        "content": "<p>reproduced (Windows, VS Code)</p>",
        "id": 154997256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547322691
    },
    {
        "content": "<p><code>by exact g (zzz a) (zzz a)</code> has the issue, but just giving the term mode proof makes things work again.</p>",
        "id": 154997258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547322700
    },
    {
        "content": "<p>reproduced all three behaviours</p>",
        "id": 154997300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547322732
    },
    {
        "content": "<p>This is actually quite annoying whenever I do a <code>by haveI := _; exact _</code> proof</p>",
        "id": 154997657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547323421
    },
    {
        "content": "<p>So it's the Lean server which ships these little windows out?</p>",
        "id": 154997702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547323479
    },
    {
        "content": "<p>can we have the complicated diagram again?</p>",
        "id": 154997714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547323507
    },
    {
        "content": "<p>Line 240 of <code>ring_theory.integral_closure</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fg_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fg_adjoin_singleton_of_integral</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fg_adjoin_singleton_of_integral</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>and I'm surprised to note that in VS Code if I hover over the first <code>fg_adjoin_singleton_of_integral</code> then nothing happens, but if I hover over the second one I see the type as expected. Is this a bug?</p>",
        "id": 216238267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605026577
    },
    {
        "content": "<p>This looks more like a problem with Lean rather than with VS Code or the extension. It might be good to collect examples like this in an issue here: <a href=\"https://github.com/leanprover-community/lean/issues\">https://github.com/leanprover-community/lean/issues</a></p>",
        "id": 216242214,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605028223
    },
    {
        "content": "<p>I'll try to minimise before I open an issue.</p>",
        "id": 216246435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605030121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is it intentional that you extended an older thread?</p>",
        "id": 216649310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605290753
    },
    {
        "content": "<p>No, it was a coincidence that the older thread had the same name.</p>",
        "id": 216649424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605290795
    },
    {
        "content": "<p>I guess you haven't changed in 1 year and 10 months</p>",
        "id": 216649656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605290915
    },
    {
        "content": "<p>In fact I hadn't even noticed that I was extending an older thread of my own until you just pointed it out.</p>",
        "id": 216649908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605291037
    },
    {
        "content": "<p>I have a distantly related issue. VS Code seems to highlight incorrectly in the following case:</p>\n<p><a href=\"/user_uploads/3121/jsIVEgWWbGO4vZnPhmu-b8PM/Screen-Shot-2020-11-14-at-16.26.38.png\">Screen-Shot-2020-11-14-at-16.26.38.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jsIVEgWWbGO4vZnPhmu-b8PM/Screen-Shot-2020-11-14-at-16.26.38.png\" title=\"Screen-Shot-2020-11-14-at-16.26.38.png\"><img src=\"/user_uploads/3121/jsIVEgWWbGO4vZnPhmu-b8PM/Screen-Shot-2020-11-14-at-16.26.38.png\"></a></div><p><a href=\"/user_uploads/3121/jdVvc3ggIVv03eSen738vk4R/Screen-Shot-2020-11-14-at-16.26.48.png\">Screen-Shot-2020-11-14-at-16.26.48.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jdVvc3ggIVv03eSen738vk4R/Screen-Shot-2020-11-14-at-16.26.48.png\" title=\"Screen-Shot-2020-11-14-at-16.26.48.png\"><img src=\"/user_uploads/3121/jdVvc3ggIVv03eSen738vk4R/Screen-Shot-2020-11-14-at-16.26.48.png\"></a></div><p>Is this a Lean issue or VS Code?</p>",
        "id": 216759017,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605400164
    },
    {
        "content": "<p>This is probably an issue with the widget. Where did you put your mouse cursor in the two cases?</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 216761775,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605403891
    },
    {
        "content": "<p>\\forall and \\wedge.</p>",
        "id": 216780896,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1605431591
    },
    {
        "content": "<p>Yeah this is caused by the linebreaking</p>",
        "id": 216809003,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1605468216
    },
    {
        "content": "<p>I think that the second screenshot is correct behaviour</p>",
        "id": 216809057,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1605468254
    },
    {
        "content": "<p>the first screenshot is an issue caused by the way the CSS linebreaking currently works. It's a tricky one to fix because it's caused by some wacky CSS behaviour. :'(</p>",
        "id": 216809145,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1605468444
    }
]