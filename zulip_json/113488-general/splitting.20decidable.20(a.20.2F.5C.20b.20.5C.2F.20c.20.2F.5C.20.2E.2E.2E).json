[
    {
        "content": "<p>If my goal is something like <code>decidable (a /\\ (b \\/ c) /\\ ...)</code>,  how can I quickly split that into separate goals for <code>decidable a</code> and <code>decidable b \\/ c</code>, etc?</p>",
        "id": 212175432,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601736270
    },
    {
        "content": "<p>Try <code>decidable_and</code>? No idea if it's there but that's what I'd call it</p>",
        "id": 212175444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601736322
    },
    {
        "content": "<p>Because <code>decidable</code> is a type class, we can find many definitions with that type using <code>#print instances</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">instances</span> <span class=\"n\">decidable</span>\n<span class=\"c1\">-- xor.decidable : Π {p q : Prop} [_inst_1 : decidable p] [_inst_2 : decidable q], decidable (xor p q)</span>\n<span class=\"c1\">-- iff.decidable : Π {p q : Prop} [_inst_1 : decidable p] [_inst_2 : decidable q], decidable (p ↔ q)</span>\n<span class=\"c1\">-- implies.decidable : Π {p q : Prop} [_inst_1 : decidable p] [_inst_2 : decidable q], decidable (p → q)</span>\n<span class=\"c1\">-- not.decidable : Π {p : Prop} [_inst_1 : decidable p], decidable (¬p)</span>\n<span class=\"c1\">-- or.decidable : Π {p q : Prop} [_inst_1 : decidable p] [_inst_2 : decidable q], decidable (p ∨ q)</span>\n<span class=\"c1\">-- and.decidable : Π {p q : Prop} [_inst_1 : decidable p] [_inst_2 : decidable q], decidable (p ∧ q)</span>\n<span class=\"c1\">-- decidable.false : decidable false</span>\n<span class=\"c1\">-- decidable.true : decidable true</span>\n</code></pre></div>\n\n<p>This tells us that <code>and.decidable</code> is what you're looking for</p>",
        "id": 212176099,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601737375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I would have thought that, but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">and.decidable</span><span class=\"o\">,</span> <span class=\"c1\">-- \"failed to synthesize type class instance\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212182854,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601748221
    },
    {
        "content": "<p><a href=\"https://groups.google.com/g/lean-user/c/M1iWWt4kqUQ/m/f5GVSb1DAQAJ\">This post from 2017</a> seems to indicate that you can't use <code>decidable</code> like that because it's a type class, not a normal predicate? But that may be outdated and/or incorrect</p>",
        "id": 212183315,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601748741
    },
    {
        "content": "<p>You can use it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Clean\"><pre><span></span><code><span class=\"n\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">Π</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Prop</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">decidable</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"n\">begin</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">intros</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">h₀</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">decidable</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sorry</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">decidable</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sorry</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">resetI</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">apply_instance</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212183504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601748976
    },
    {
        "content": "<p><code>resetI</code> will add <code>h₀</code> and <code>h₁</code> to the instance cache</p>",
        "id": 212183525,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1601749004
    },
    {
        "content": "<p><code>decidable</code> is a type class and meant to be used in type class-y ways. What are you really trying to do?</p>",
        "id": 212183646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749177
    },
    {
        "content": "<p>Normally you shouldn't end up with <code>decidable</code> goals at all</p>",
        "id": 212183693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749212
    },
    {
        "content": "<p>Either use <code>classical</code> or write the instances you need</p>",
        "id": 212183698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749222
    },
    {
        "content": "<p>One trick I sometimes use when I want lean to not infer a typeclass is <code>refine @and.decidable _ _ (id _) (id _)</code></p>",
        "id": 212183702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749233
    },
    {
        "content": "<p>It seems like a mistake that lean will infer instances even if you write <code>@foo ... _</code>, but I can see that many things will break if this changes. It would be nice if there was a mode that allowed this to be \"no really\" explicit</p>",
        "id": 212183783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749347
    },
    {
        "content": "<p>Lean 4 has a distinction between <code>_</code> and <code>?</code> (I think that's the syntax), which maybe would apply here too</p>",
        "id": 212183804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749392
    },
    {
        "content": "<p>with one meaning \"infer\" and the other meaning \"make a new goal\"</p>",
        "id": 212183812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm trying to show a predicate is decidable... What should the goal be, if not \"decidable\"?</p>",
        "id": 212183967,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601749625
    },
    {
        "content": "<p>If so you are writing a program and probably shouldn't be using tactics until you get to the proof part</p>",
        "id": 212183990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749680
    },
    {
        "content": "<p>then normally the proof would be some variant of <code>by { dunfold [...], apply_instance }</code> or use <code>decidable_of_iff</code></p>",
        "id": 212184035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601749704
    },
    {
        "content": "<p>But if your predicate has lots of ands and ors in it you should probably be doing what Simon showed. Assuming <code>by apply_instance</code> alone doesn't work, add the necessary instances to the context with <code>haveI</code> and then use <code>apply_instance</code></p>",
        "id": 212184054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749748
    },
    {
        "content": "<p>this mostly only comes up for recursive predicates. For nonrecursive predicates Reid's suggestion is the best</p>",
        "id": 212184116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749813
    },
    {
        "content": "<p>Here's what I'm working with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">fn2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">car</span>  <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">cdr</span>  <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">car</span> <span class=\"n\">cdr</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n<span class=\"bp\">|</span> <span class=\"n\">prec</span> <span class=\"o\">(</span><span class=\"n\">z_case</span> <span class=\"n\">s_case</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">typed</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">val</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.zero</span> <span class=\"n\">val.nil</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.succ</span> <span class=\"n\">val.nat</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">car</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.car</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcar</span>\n<span class=\"bp\">|</span> <span class=\"n\">cdr</span> <span class=\"o\">{</span><span class=\"n\">tcar</span> <span class=\"n\">tcdr</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.cdr</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"n\">tcdr</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">fn2.nil</span> <span class=\"n\">t</span> <span class=\"n\">val.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">car</span> <span class=\"n\">cdr</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">tcar_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">car</span> <span class=\"n\">tin</span> <span class=\"n\">tcar</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">tcdr_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">cdr</span> <span class=\"n\">tin</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">typed</span> <span class=\"o\">(</span><span class=\"n\">fn2.cons</span> <span class=\"n\">car</span> <span class=\"n\">cdr</span><span class=\"o\">)</span> <span class=\"n\">tin</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">f</span> <span class=\"n\">tint</span> <span class=\"n\">tout</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">g</span> <span class=\"n\">tin</span> <span class=\"n\">tint</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">typed</span> <span class=\"o\">(</span><span class=\"n\">fn2.comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span>\n<span class=\"bp\">|</span> <span class=\"n\">prec</span> <span class=\"o\">{</span><span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z_case</span> <span class=\"n\">s_case</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">z_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">z_case</span> <span class=\"n\">trest</span> <span class=\"n\">tout</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s_t</span> <span class=\"o\">:</span> <span class=\"n\">typed</span> <span class=\"n\">s_case</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tout</span> <span class=\"n\">trest</span><span class=\"o\">))</span> <span class=\"n\">tout</span><span class=\"o\">):</span>\n    <span class=\"n\">typed</span> <span class=\"o\">(</span><span class=\"n\">fn2.prec</span> <span class=\"n\">z_case</span> <span class=\"n\">s_case</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"n\">trest</span><span class=\"o\">)</span> <span class=\"n\">tout</span>\n\n<span class=\"n\">mk_iff_of_inductive_prop</span> <span class=\"n\">typed</span> <span class=\"n\">typed_iff</span>\n\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">def</span> <span class=\"n\">typed.decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">typed</span> <span class=\"n\">f</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n</code></pre></div>",
        "id": 212184124,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601749833
    },
    {
        "content": "<p>Trying to show that whether a type assignment is correct or not is decidable.</p>",
        "id": 212184131,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601749855
    },
    {
        "content": "<p>The top level should be a recursion using the equation compiler</p>",
        "id": 212184201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601749929
    },
    {
        "content": "<p>writing it out in a forward way will work, but it's so duplicative of the definition of <code>typed</code> that it seems like metaprogramming should surely be better, right? I guess not if you say so</p>",
        "id": 212184305,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601750144
    },
    {
        "content": "<p>Eh, actually some of this is a bit annoying, metaprogramming is better</p>",
        "id": 212184616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601750589
    },
    {
        "content": "<p>I don't actually know how to prove <code>false</code> in the cases that don't match any constructor.</p>",
        "id": 212184625,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1601750615
    },
    {
        "content": "<p>actually it is better to phrase this as a function from fn to its type</p>",
        "id": 212184626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601750616
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fn2.typecheck</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span> <span class=\"bp\">→</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn2.zero</span> <span class=\"n\">val.nil</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn2.succ</span> <span class=\"n\">val.nat</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">val.nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn2.car</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">tcar</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn2.cdr</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">tcdr</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn2.nil</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">val.nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fn2.cons</span> <span class=\"n\">car</span> <span class=\"n\">cdr</span><span class=\"o\">)</span> <span class=\"n\">tin</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tcar</span> <span class=\"bp\">←</span> <span class=\"n\">car.typecheck</span> <span class=\"n\">tin</span><span class=\"o\">,</span>\n  <span class=\"n\">tcdr</span> <span class=\"bp\">←</span> <span class=\"n\">cdr.typecheck</span> <span class=\"n\">tin</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tcar</span> <span class=\"n\">tcdr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fn2.comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">tin</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tint</span> <span class=\"bp\">←</span> <span class=\"n\">g.typecheck</span> <span class=\"n\">tin</span><span class=\"o\">,</span>\n  <span class=\"n\">f.typecheck</span> <span class=\"n\">tint</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fn2.prec</span> <span class=\"n\">z_case</span> <span class=\"n\">s_case</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"n\">trest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">tout</span> <span class=\"bp\">←</span> <span class=\"n\">z_case.typecheck</span> <span class=\"n\">trest</span><span class=\"o\">,</span>\n  <span class=\"n\">tout'</span> <span class=\"bp\">←</span> <span class=\"n\">s_case.typecheck</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">val.nat</span> <span class=\"o\">(</span><span class=\"n\">val.cons</span> <span class=\"n\">tout</span> <span class=\"n\">trest</span><span class=\"o\">)),</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">tout'</span> <span class=\"bp\">=</span> <span class=\"n\">tout</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"n\">tout</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fn2.typecheck_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">typed</span> <span class=\"n\">f</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"bp\">↔</span> <span class=\"n\">f.typecheck</span> <span class=\"n\">tin</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">tout</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">typed.decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">typed</span> <span class=\"n\">f</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"n\">fn2.typecheck_iff</span>\n</code></pre></div>",
        "id": 212185023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601751223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fn2.typecheck_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fn2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">typed</span> <span class=\"n\">f</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span> <span class=\"bp\">↔</span> <span class=\"n\">f.typecheck</span> <span class=\"n\">tin</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">tout</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">return</span><span class=\"o\">,</span> <span class=\"n\">pure</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">f</span> <span class=\"n\">generalizing</span> <span class=\"n\">tin</span> <span class=\"n\">tout</span><span class=\"o\">,</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">5</span> <span class=\"o\">{{</span> <span class=\"n\">cases</span> <span class=\"n\">tin</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">typed_iff</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">],</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">h1</span> <span class=\"n\">b</span> <span class=\"n\">h2</span> <span class=\"o\">⟨⟩,</span>\n      <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">],</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">tin</span> <span class=\"k\">with</span> <span class=\"n\">car</span> <span class=\"n\">trest</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">cases</span> <span class=\"n\">car</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fn2.typecheck</span><span class=\"o\">],</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">h1</span> <span class=\"n\">b</span> <span class=\"n\">h2</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩,</span>\n      <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212185826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601752491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344960\">@Hunter Freyer</span></p>",
        "id": 212185844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601752538
    }
]