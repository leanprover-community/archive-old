[
    {
        "content": "<p>I'm currently stuck at <a href=\"https://github.com/leanprover-community/mathlib/blob/a579f8d2b446dbde34420fa79d4e7991404a66ab/src/data/nat/basic.lean#L989\">this sorry</a> about <code>nat.lxor</code> and I'd like to ask whether anyone has an idea how to tackle it. The pen-and-paper proof is as follows. By our hypothesis, <code>v</code> is not zero. Let <code>i</code> be the position of the most significant 1-bit of <code>v</code>. Then at least one of <code>a</code>, <code>b</code> or <code>c</code> has a 1 at position <code>i</code>. Wlog, assume this is <code>a</code>. Then <code>a xor v</code> does not have a 1 at position <code>i</code>, but for every <code>j &gt; i</code>, <code>a xor v</code> has a 1 at position <code>j</code> iff <code>a</code> does, so <code>a xor v &lt; a</code>.</p>\n<p>Does anyone have an idea how to approach these bitwise arguments? I tried both <code>nat.digits</code> and <code>nat.test_bit</code> and friends, but both seem very painful for this purpose.</p>",
        "id": 208271213,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598559859
    },
    {
        "content": "<p>Is this useful for diagram chasing?!</p>",
        "id": 208271390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598559955
    },
    {
        "content": "<p>It's useful for <a href=\"https://github.com/leanprover-community/mathlib/blob/a579f8d2b446dbde34420fa79d4e7991404a66ab/src/set_theory/game/nim.lean#L331\">addition of Grundy numbers</a>.</p>",
        "id": 208271479,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598559980
    },
    {
        "content": "<p>And what is a grungy number?</p>",
        "id": 208271509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598559996
    },
    {
        "content": "<p>See <a href=\"https://en.wikipedia.org/wiki/Nimber\">here</a> for example.</p>",
        "id": 208271547,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598560022
    },
    {
        "content": "<p>Is it true if <code>a = 0</code>, <code>b = 0</code> and <code>c = 0</code>? Then there is no most significant 1-bit for any of the values</p>",
        "id": 208274248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598561374
    },
    {
        "content": "<p>Ah! The assumption makes that impossible, my mistake</p>",
        "id": 208274353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598561412
    },
    {
        "content": "<p>I was thinking, maybe you can use a decomposition: <code>0 &lt; a -&gt; exists p k, a = 2^k + p /\\ p &lt; 2^k</code>. Then, <code>k</code> gives you a handle on the most significant 1-bit</p>",
        "id": 208274516,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598561497
    },
    {
        "content": "<p>If you have <code>a = 2^ka + pa</code> and <code>b = 2^kb + pb</code>, you have three cases to consider when decomposing the <code>xor</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">xor</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">xor</span> <span class=\"n\">pa</span> <span class=\"n\">pb</span> <span class=\"k\">if</span> <span class=\"n\">ka</span> <span class=\"bp\">=</span> <span class=\"n\">kb</span>\n          <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">kb</span> <span class=\"bp\">+</span> <span class=\"n\">xor</span> <span class=\"n\">a</span> <span class=\"n\">pb</span> <span class=\"k\">if</span> <span class=\"n\">ka</span> <span class=\"bp\">&lt;</span> <span class=\"n\">kb</span>\n          <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">ka</span> <span class=\"bp\">+</span> <span class=\"n\">xor</span> <span class=\"n\">pa</span> <span class=\"n\">b</span> <span class=\"k\">if</span> <span class=\"n\">ka</span> <span class=\"bp\">&gt;</span> <span class=\"n\">kb</span>\n</code></pre></div>",
        "id": 208275609,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598562062
    },
    {
        "content": "<p>I don't like theorems that have <code>let</code> in their statements. In this case I think it would be best to just inline the let and introduce it in the body if you need it</p>",
        "id": 208279755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564224
    },
    {
        "content": "<p>Also, the first disjunct is impossible - once you expand it you get <code>lxor a (lxor a (lxor b c)) = lxor b c</code>, which is greater than <code>a</code> by hypothesis</p>",
        "id": 208279919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564326
    },
    {
        "content": "<p>in fact the other two disjuncts also simplify once you expand the let</p>",
        "id": 208279957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564364
    },
    {
        "content": "<p>you should prove associativity of <code>lxor</code> for any <code>bitwise</code> so that you can conclude associativity of <code>band</code> and <code>bor</code> too</p>",
        "id": 208280012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564396
    },
    {
        "content": "<p>In general, a good strategy for all sorts of bitwise properties is to apply <code>test_bit</code> extensionality, simp with <code>test_bit</code>, then conclude using a boolean theorem</p>",
        "id": 208280190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564500
    },
    {
        "content": "<p>I don't know if this is helpful but it might suggest alternative approaches: I developed properties of the colex ordering <a href=\"https://github.com/leanprover-community/mathlib/pull/2770/files#diff-0e3f030c8979e8f440f1352f14f14ebe\">here</a> - if you view naturals as the finite set of positions where the bit is on (ie under the map taking a <code>A : finset ℕ</code> to <code>A.sum (pow 2)</code>) then the ordering on naturals is the same as colex ordering, and lxor corresponds to symmetric difference of sets, so it could be helpful to use some of the ordering properties I put there</p>",
        "id": 208280704,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598564827
    },
    {
        "content": "<p>I would suggest this version of the statement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tri&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">lxor</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">lxor</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lxor</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 208280711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598564832
    },
    {
        "content": "<p>Your wlog in the proof sketch doesn't make any sense because a,b,c are not symmetric in the statement, only b and c</p>",
        "id": 208281539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598565322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Reasoning.20about.20bitwise.20xor/near/208281539\">said</a>:</p>\n<blockquote>\n<p>Your wlog in the proof sketch doesn't make any sense because a,b,c are not symmetric in the statement, only b and c</p>\n</blockquote>\n<p>The proof sketch only uses the more general assumption <code>nat.lxor a (nat.lxor b c) ≠ 0</code>, which is symmetric.</p>",
        "id": 208307970,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598593903
    },
    {
        "content": "<p>It is possible to formalize your argument directly, but there are some lemmas to prove about bitwise stuff</p>",
        "id": 208308715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598594762
    },
    {
        "content": "<p>I think it might be easier though to make use of the fact that <code>(\\forall i, test_bit i a -&gt; test_bit i b) -&gt; a &lt;= b</code></p>",
        "id": 208308793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598594843
    },
    {
        "content": "<p>In this case, I think you want to construct the number <code>x</code> which matches <code>a</code> up to position <code>i</code>, and is 1 at position <code>i</code> and 0 at all lower bits. Then <code>a xor v \\sub x-1</code> and <code>x &lt;= a</code>, which does the latter part of your proof sketch</p>",
        "id": 208308980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598595069
    },
    {
        "content": "<p>The lemma for the first part of your sketch is that if <code>v != 0</code> then there exists <code>i</code> such that <code>2^i &lt;= v &lt; 2^(i+1)</code>, which may already exist, plus the proof that <code>test_bit i v = 1</code> for such a number, which should not be hard to prove if you unfold the definition in terms of right shift (which is the same as integer division by 2^i)</p>",
        "id": 208309172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598595286
    },
    {
        "content": "<p>Thanks, I was able to work it out using your ideas. I PRed the resulting lemmas about <code>test_bit</code>, <code>lxor</code> and friends in <a href=\"https://github.com/leanprover-community/mathlib/issues/3964\">#3964</a>.</p>",
        "id": 208332234,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1598615276
    }
]