[
    {
        "content": "<p>Hi guys do you know how types can somehow be theorems? E.g. strong_indefinite_description in classical.</p>",
        "id": 130894817,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1533396740
    },
    {
        "content": "<p>There is nothing preventing you from marking a type as a theorem, or a prop as a def</p>",
        "id": 130894929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533397058
    },
    {
        "content": "<p>Usually we stick to <code>theorem</code> or <code>lemma</code> for things in <code>Prop</code> and <code>def</code> for things in <code>Sort</code> or <code>Type</code>, though, for a few reasons. The VM will not generate code for <code>theorem</code>s, and this will affect downstream definitions as well, so that is one reason; it is not a problem with <code>strong_indefinite_description</code> because this theorem is not computable anyway. Also a <code>theorem</code> is never unfolded, which is almost never necessary for a <code>Prop</code> because of proof irrelevance but is often important for <code>def</code>s since we may want to prove theorems about the def later. Here it is not a problem in <code>strong_indefinite_description</code> because the definition is supposed to be arbitrary in its type, so unfolding should never be necessary.</p>",
        "id": 130895079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533397337
    },
    {
        "content": "<p>Ok that makes sense, thanks a lot!</p>",
        "id": 130936748,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1533486631
    }
]