[
    {
        "content": "<p>Hi, the following code works with <code>mathlib</code> before <a href=\"https://github.com/leanprover-community/mathlib/commit/c6c7eaf34\">c6c7eaf</a> and fails starting with c6c7eaf34:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.multilinear</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">wE</span> <span class=\"n\">wE₁</span> <span class=\"n\">wG</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">wE</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E₁</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">wE₁</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">wG</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1001</span><span class=\"o\">]</span>\n<span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"n\">normed_space.to_semimodule</span> <span class=\"n\">smul_comm_class_self</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"c1\">-- \"failed to synthesize type class instance for (...) `Π (i : ι), semimodule 𝕜 (E i →L[𝕜] E₁ i)`</span>\n  <span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I make it compile without using <code>@continuous_multilinear_map</code>?</p>",
        "id": 225688941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612877397
    },
    {
        "content": "<p>I assume the relevant change from that PR is around here? <a href=\"https://github.com/leanprover-community/mathlib/commit/c6c7eaf34#diff-29a16c03884a7a902d4ae9eaed0b63eaf7cb329734950ecc58618a155fe80bc4R753\">https://github.com/leanprover-community/mathlib/commit/c6c7eaf34#diff-29a16c03884a7a902d4ae9eaed0b63eaf7cb329734950ecc58618a155fe80bc4R753</a></p>",
        "id": 225689900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612877836
    },
    {
        "content": "<p>Some more hints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">e1</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I've seen this problem before, where type-class inference can't find pi-instances</p>",
        "id": 225690990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612878288
    },
    {
        "content": "<p>Indeed, your <code>works</code> example is misleading, and what you actually wanted to check is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>which fails</p>",
        "id": 225691729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612878620
    },
    {
        "content": "<p>Another relevant part of the commit: <a href=\"https://github.com/leanprover-community/mathlib/commit/c6c7eaf34#diff-6eb2551e17f95d2b8d8985018d5587c8604357697034aba70a50128c08ff4545L375\">https://github.com/leanprover-community/mathlib/commit/c6c7eaf34#diff-6eb2551e17f95d2b8d8985018d5587c8604357697034aba70a50128c08ff4545L375</a></p>",
        "id": 225692042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612878785
    },
    {
        "content": "<p>I PR'd <a href=\"https://github.com/leanprover-community/mathlib/pull/14601\">#14601</a>, which adds an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subsingleton.is_well_order</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">is_irrefl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_well_order</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This single addition seems to lead to class instance resolution failing on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.lex.is_strict_total_order\">docs#list.lex.is_strict_total_order</a>. I have no idea why.</p>",
        "id": 285312625,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654635399
    },
    {
        "content": "<p>Couldn't this loop with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_well_order.is_irrefl\">docs#is_well_order.is_irrefl</a>? Maybe that is the cause</p>",
        "id": 285315148,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654636708
    },
    {
        "content": "<p>What does <code>#lint</code> have to say here?</p>",
        "id": 285315898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654637016
    },
    {
        "content": "<p>Oh yeah, that makes sense!</p>",
        "id": 285322551,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654641071
    },
    {
        "content": "<p>I'll make this into a <code>theorem</code> instead then</p>",
        "id": 285322559,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654641078
    }
]