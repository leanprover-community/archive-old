[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> could we get two variants of F12, one creating a new tab if a new file needs to be opened, and one replacing the content of the current tab, as it currently does? Also, could we get key bindings for \"Go back\" and \"Restart Lean\"? And maybe one for \"Create a comment below the current line, containing what is currently in the Lean messages view\"? About Lean messages, each time I press Ctrl+Shift+Enter to open this tab, it also opens a copy of the file I'm currently editing. It's annoying and I think it wasn't like this before.</p>",
        "id": 130267754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532515319
    },
    {
        "content": "<p>alt-left should be a key binding for \"go back\"</p>",
        "id": 130267806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515379
    },
    {
        "content": "<p>Not here</p>",
        "id": 130267825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532515415
    },
    {
        "content": "<p>I also noticed the bug with ctrl-shift-enter opening a copy over the message view</p>",
        "id": 130267829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515431
    },
    {
        "content": "<p>You can set your key bindings yourself btw</p>",
        "id": 130267870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515472
    },
    {
        "content": "<p>It makes me think I would really love to know a way to ask VScode to trigger translation immediately rather than waiting for a blank space of movement. It would really help to type words containing several special unicode characters.</p>",
        "id": 130267890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532515543
    },
    {
        "content": "<p>How do you setup keybindings?</p>",
        "id": 130267893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532515550
    },
    {
        "content": "<p>file &gt; prefs &gt; key shortcuts</p>",
        "id": 130267947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515617
    },
    {
        "content": "<blockquote>\n<p>It makes me think I would really love to know a way to ask VScode to trigger translation immediately rather than waiting for a blank space of movement. It would really help to type words containing several special unicode characters.</p>\n</blockquote>\n<p>But how would you deal with prefixes? Such as <code>\\t</code> vs <code>\\to</code>?</p>",
        "id": 130267956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532515649
    },
    {
        "content": "<p>this is what emacs does</p>",
        "id": 130267959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515659
    },
    {
        "content": "<p>I think if you type <code>\\t</code> you get the triangle but underlined, and typing <code>o</code> changes it to an arrow</p>",
        "id": 130268004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515687
    },
    {
        "content": "<p>I don't need it to be automatic, I want to be able to <em>ask</em> for it before VScode decides it should do it anyway</p>",
        "id": 130268013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532515721
    },
    {
        "content": "<p>Sweet. So if I would type <code>\\Zp</code> would that give me â„¤p?</p>",
        "id": 130268026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532515744
    },
    {
        "content": "<p>I believe so</p>",
        "id": 130268033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515756
    },
    {
        "content": "<p>Nice</p>",
        "id": 130268035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532515762
    },
    {
        "content": "<p>I think vscode does the same in that case</p>",
        "id": 130268039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515776
    },
    {
        "content": "<p>Hmm, maybe it does.</p>",
        "id": 130268041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532515786
    },
    {
        "content": "<blockquote>\n<p>could we get two variants of F12,</p>\n</blockquote>\n<p><del>ctrl+k f12</del> the default keybinding does not work here</p>\n<p>But you can assign \"open definition to the side\" to whatever keybinding you like.</p>",
        "id": 130268044,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532515798
    },
    {
        "content": "<blockquote>\n<p>I think vscode does the same in that case</p>\n</blockquote>\n<p>You are right.</p>",
        "id": 130268089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532515811
    },
    {
        "content": "<blockquote>\n<p>could we get two variants of F12, one creating a new tab if a new file needs to be opened, and one replacing the content of the current tab, as it currently does? </p>\n</blockquote>\n<p>Currently F12 and other navigation commands only replace the content of the current tab if you are viewing a file in temporary mode, indicated with italics in the tab title</p>",
        "id": 130268170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532515975
    },
    {
        "content": "<p>you can clear temporary mode by clicking on the title or editing anywhere</p>",
        "id": 130268182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532516002
    },
    {
        "content": "<blockquote>\n<p>\"Go back\"</p>\n</blockquote>\n<p>ctrl+alt+- is the default keybinding.  I usually use the vim keybindings, where it is ctrl+t as expected.</p>",
        "id": 130268183,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532516007
    },
    {
        "content": "<p>Thanks for pointing out \"open definition to the side\". But it opens in the area containing Lean messages :(</p>",
        "id": 130268234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532516050
    },
    {
        "content": "<blockquote>\n<p>Ctrl+Shift+Enter to open this tab, it also opens a copy of the file I'm currently editing</p>\n</blockquote>\n<p>Oh, that seems to be a new bug with vscode 1.25.  <a href=\"https://github.com/leanprover/vscode-lean/issues/77\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/issues/77\">https://github.com/leanprover/vscode-lean/issues/77</a></p>",
        "id": 130268256,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532516100
    },
    {
        "content": "<blockquote>\n<p>Thanks for pointing out \"open definition to the side\". But it opens in the area containing Lean messages :(</p>\n</blockquote>\n<p>You can split the editor first with ctrl+\\</p>",
        "id": 130268312,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532516167
    },
    {
        "content": "<p>Thanks, but this creates a whole new zone, not a new tab in the current group</p>",
        "id": 130268376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532516307
    },
    {
        "content": "<p>Oh, that italic filename is a really subtle clue. I never noticed it</p>",
        "id": 130268378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532516322
    },
    {
        "content": "<p>It's lunchtime, but I'm happy I've learned a lot of VScode tricks</p>",
        "id": 130268385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532516351
    },
    {
        "content": "<blockquote>\n<p>Create a comment below the current line, containing what is currently in the Lean messages view</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/vscode-lean/commit/d3ae4b1a1108cb0eb1cefc645b6602a307b4d4be\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/commit/d3ae4b1a1108cb0eb1cefc645b6602a307b4d4be\">https://github.com/leanprover/vscode-lean/commit/d3ae4b1a1108cb0eb1cefc645b6602a307b4d4be</a></p>\n<p>I'm currently having a bit of trouble publishing the vscode extension, so you'll have to wait a bit for the update.</p>",
        "id": 130272111,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532521552
    },
    {
        "content": "<p>Thanks! Hopefully this example could serve as a pattern for other stuff like that (I have nothing specific in mind).</p>",
        "id": 130278254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532528858
    },
    {
        "content": "<p>I just pushed the update.  Please tell me if I broke anything.</p>",
        "id": 130433110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532722323
    },
    {
        "content": "<p>afk hornet in the room</p>",
        "id": 130433115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532722329
    },
    {
        "content": "<p>I managed to escape.  The only new feature is \"ctrl+shift+p copy contents to comment\", which copies the current content of the info view to a comment below the current line, as requested by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>.</p>",
        "id": 130435463,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532725137
    },
    {
        "content": "<p>One slightly annoying new feature of VSCode, is that when I click \"Display Goal\", it opens the file I have open in the right pane. Is there a way to do anything about that?</p>",
        "id": 130435618,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532725274
    },
    {
        "content": "<p>I've added a feature in emacs (taken from <code>company-coq</code>) to use <code>diff</code> to compare the actual / expected types in error messages. Any chance I might convince you to add it to VS code or help me implement it for VS code?</p>",
        "id": 130435636,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532725306
    },
    {
        "content": "<blockquote>\n<p>it opens the file I have open in the right pane</p>\n</blockquote>\n<p>This bug should be fixed with yesterday's update.</p>",
        "id": 130455350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532763323
    },
    {
        "content": "<blockquote>\n<p>[..] use <code>diff</code> to compare the actual / expected types in error messages. Any chance I might convince you to add it to VS code or help me implement it for VS code?</p>\n</blockquote>\n<p>Sure, I am happy about new features.  How did you extract the expected/actual type from the error message?  Regex?</p>\n<p>If you want to implement it yourself, look at how <code>_lean.revealPosition</code> is implemented in the info view (this handles the click on the message title and scrolls to the corresponding position in the file): <a href=\"https://github.com/leanprover/vscode-lean/blob/b872639347221a0146bf4e98234ee55e3d634b30/src/infoview.ts#L375\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/b872639347221a0146bf4e98234ee55e3d634b30/src/infoview.ts#L375\">https://github.com/leanprover/vscode-lean/blob/b872639347221a0146bf4e98234ee55e3d634b30/src/infoview.ts#L375</a><br>\nI think we can add a link to the diff right next to it.  You can show the diff with <code>workspace.openTextDocument</code> and <code>window.showTextDocument</code>.  Feel free to add a diff library to the dependencies.</p>",
        "id": 130455926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532764668
    },
    {
        "content": "<p>I tried installing the lean VScode update, and now opening VScode instantly freezes my computer. Anyone else experiencing this problem?</p>",
        "id": 130459741,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532772649
    },
    {
        "content": "<p>If I find the extension in VS code I am only offered \"disable\" and \"uninstall\". I seem to be on version 0.11.11 (and on Ubuntu)</p>",
        "id": 130459799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532772825
    },
    {
        "content": "<p>I have extension auto-update on. Which version of the extension are you having problems with? You're talking about a Windows machine right?</p>",
        "id": 130460257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532773428
    },
    {
        "content": "<p>More to the point -- the bug is fixed for me and I have no problems with the extension. So I guess I upgraded safely. Anyone on Windows having the same problems with...Chris? Are you on 0.11.11? Oh -- you can't even tell?</p>",
        "id": 130460304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532773484
    },
    {
        "content": "<p>I'm using the latest version of the extension and 20th April nightly for lean.</p>",
        "id": 130460321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532773546
    },
    {
        "content": "<p>Maybe I should update lean?</p>",
        "id": 130460364,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532773601
    },
    {
        "content": "<p>I reloaded lean, and now mine is crashing too. Thanks  a lot Chris</p>",
        "id": 130460365,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532773619
    },
    {
        "content": "<p>It doesn't hang provided I don't open a lean file. I am on 0.11.11</p>",
        "id": 130460535,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532773946
    },
    {
        "content": "<p>how did you close your lean files?</p>",
        "id": 130460606,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532774064
    },
    {
        "content": "<p>Reinstall VSCode, and delete the folders containing the information about which lean files I had open</p>",
        "id": 130460631,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532774116
    },
    {
        "content": "<p>As a temporary measure you can uninstall the lean extension and then try and figure out how to install an older version. I can't reproduce here on linux; things are working fine for me. Can you switch logging on somehow? This might happen to every Windows user who has auto-update on.</p>",
        "id": 130461066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532774839
    },
    {
        "content": "<p>I just tried to reproduce on windows, but everything works for me.  (elan is completely broken for me though)</p>",
        "id": 130461142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532774922
    },
    {
        "content": "<p>Chris can you switch on some debugging output, have the current extension loaded, and then open a Lean file? What happens exactly after you open a lean file? You said your computer freezes? What OS are you using? Win7 or Win10?</p>",
        "id": 130461168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532774996
    },
    {
        "content": "<p>Win10. My computer totally freezes, I can't even move my mouse.</p>",
        "id": 130461228,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532775064
    },
    {
        "content": "<p>What do you mean by \"switch on some debugging output\"?</p>",
        "id": 130461376,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532775310
    },
    {
        "content": "<p>If everything else fails, can you try to reinstall vscode and lean completely.  I am really at a loss here, there are almost no changes between vscode-lean 0.11.9 and 0.11.11, and none that look in any way dangerous.  I am running the lean 3.4.1 release on windows 10 and vscode 1.25.1 here.</p>",
        "id": 130462163,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532776500
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  <br>\nIf you want to implement it yourself, look at how _lean.revealPosition is implemented in the info view </p>\n</blockquote>\n<p>Thanks! I'll have a look.</p>\n<blockquote>\n<p>Sure, I am happy about new features. How did you extract the expected/actual type from the error message? Regex?</p>\n</blockquote>\n<p>What I did is split the error message into lines and find the line that says <code>\"has type:\"</code> and I take everything until I find the line announcing the expected type.</p>",
        "id": 130464752,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532779983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> I managed to revert my version of the VScode extension. This is how.</p>",
        "id": 130471379,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532790823
    },
    {
        "content": "<p>1. Go into windows command line and type <code>code --disable-extensions</code></p>",
        "id": 130471421,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532790850
    },
    {
        "content": "<p>2. Open VScode, save everything and uninstall the lean extension. Also disable automatic updates of extensions using <code>...</code> in the top right of the extensions pane.</p>",
        "id": 130471431,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532790908
    },
    {
        "content": "<p>3. Download the version <code>0.11.9</code> os the VScode extension from <a href=\"https://jroesch.gallery.vsassets.io/_apis/public/gallery/publisher/jroesch/extension/lean/0.11.9/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage\" target=\"_blank\" title=\"https://jroesch.gallery.vsassets.io/_apis/public/gallery/publisher/jroesch/extension/lean/0.11.9/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage\">https://jroesch.gallery.vsassets.io/_apis/public/gallery/publisher/jroesch/extension/lean/0.11.9/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage</a></p>",
        "id": 130472297,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532791330
    },
    {
        "content": "<p>4. Change the file extension of the downloaded file to .VSIX</p>",
        "id": 130472301,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532791351
    },
    {
        "content": "<p>Go into VScode extension click ... in the top right of the extensions pane and install from VSIX usingthe file you downloaded.</p>",
        "id": 130472326,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532791404
    },
    {
        "content": "<p>Thanks Chris, awesome as always</p>",
        "id": 130472911,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532792461
    },
    {
        "content": "<p>So I just tried upgrading on a Win10 machine and I've got it working. It did crash VS code -- but a restart of VS code (twice) got it working in the end. It didn't take down the OS.</p>",
        "id": 130476732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532797710
    },
    {
        "content": "<p>by restart do you mean literally close the program and reopen it?</p>",
        "id": 130476989,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532798156
    },
    {
        "content": "<p>I couldn't do that because my computer was frozen.</p>",
        "id": 130477034,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532798177
    },
    {
        "content": "<p>The program (but not the OS) hung -- it became unresponsive. I restarted the program twice and got it working. I don't use Windows usually so I don't know if this is normal after an upgrade.</p>",
        "id": 130477037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532798204
    },
    {
        "content": "<p>My pc doesnt freeze, but only the toolbar at the top of VS code works</p>",
        "id": 130477041,
        "sender_full_name": "Ali Sever",
        "timestamp": 1532798217
    },
    {
        "content": "<p>So I opened task manager and discovered that VSCode is quick to take up all of the CPU and memory</p>",
        "id": 130506182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532835410
    },
    {
        "content": "<p>I've been playing around with this and I can do <code>#eval</code>, <code>#check</code> just fine, but the second I type <code>lemma</code> or <code>theorem</code>, Lean eats all my memory and hits disc to the point the system can't recover. Surprisingly enough <code>example</code> doesn't crash it.</p>",
        "id": 130513179,
        "sender_full_name": "Moses SchÃ¶nfinkel",
        "timestamp": 1532847916
    },
    {
        "content": "<p>Actually it's VS Code that does that (unsurprisingly), because when I close the lean subprocess of VS-code parent, it doesn't fix anything.</p>",
        "id": 130513560,
        "sender_full_name": "Moses SchÃ¶nfinkel",
        "timestamp": 1532848537
    },
    {
        "content": "<p>Do you also get the high memory usage with the info view closed (the tab \"Lean Messages\")?</p>",
        "id": 130513763,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532848812
    },
    {
        "content": "<p>Yes, it doesn't matter whether the info window is open or not. Just to clarify I'm on win 10.</p>",
        "id": 130513774,
        "sender_full_name": "Moses SchÃ¶nfinkel",
        "timestamp": 1532848856
    },
    {
        "content": "<p>I run this off of an HDD, if that helps it completely thrashes the hard drive as well, but this may very well be just a side-effect of memory om-nom.</p>",
        "id": 130513906,
        "sender_full_name": "Moses SchÃ¶nfinkel",
        "timestamp": 1532849073
    },
    {
        "content": "<p>Yes, that's just swapping and it's because of the high memory usage.  The operating system just moves some stuff from RAM to HDD in order to make space.</p>",
        "id": 130513975,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532849195
    },
    {
        "content": "<p>Just to make sure: in the task manager, how much memory does the lean subprocess use compared to the rest of vscode?</p>",
        "id": 130513984,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532849245
    },
    {
        "content": "<p>Negligable if I can even get it to update. The thing is, when I type <code>lemma</code> and I close VS within a second, it recovers. When I type <code>lemma</code> and I close just the <code>lean</code> subprocess of the tree, it doesn't recover. It's gigabytes of memory instantly for VSCode and some dozens of megabytes for lean.</p>",
        "id": 130514038,
        "sender_full_name": "Moses SchÃ¶nfinkel",
        "timestamp": 1532849353
    },
    {
        "content": "<blockquote>\n<p>I managed to escape.  The only new feature is \"ctrl+shift+p copy contents to comment\", which copies the current content of the info view to a comment below the current line, as requested by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>.</p>\n</blockquote>\n<p>Sorry I'm slow since my family returned from vacations. It works great! Next wish: do you think you could get VScode to offer to fold namespaces and sections like it folds statements and proofs?</p>",
        "id": 130541475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532900604
    },
    {
        "content": "<p>If VS code is capable of knowing which namespace we're in then I would find it super-helpful if this could be displayed in some way -- I sometimes find my cursor in the middle of a large file really wanting to know what namespace I'm in.</p>",
        "id": 130541586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532900859
    },
    {
        "content": "<p>This would be really really helpful</p>",
        "id": 130541623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532900884
    },
    {
        "content": "<p>What I'm asking for is easier, but having a substitute to what you're asking for is part of the motivation</p>",
        "id": 130541627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532900906
    },
    {
        "content": "<p><em>Call for testers</em>: if you are on windows and experience hangs, could you please try this build of vscode-lean: <a href=\"https://1drv.ms/u/s!Au1u53SHpLowhTXMzMxSQI2Jy20o\" target=\"_blank\" title=\"https://1drv.ms/u/s!Au1u53SHpLowhTXMzMxSQI2Jy20o\">https://1drv.ms/u/s!Au1u53SHpLowhTXMzMxSQI2Jy20o</a><br>\nTo install, go to the extension tab, click the three dots, and select \"Install from VSIX\"</p>",
        "id": 130603708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532983827
    },
    {
        "content": "<p>I went through the commits one at a time and the problem is <a href=\"https://github.com/leanprover/vscode-lean/commit/3dc37df\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/commit/3dc37df\">https://github.com/leanprover/vscode-lean/commit/3dc37df</a> of all things</p>",
        "id": 130604392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532984590
    },
    {
        "content": "<p>the commit does a bit more than just adding <code>abbreviation</code> as a keyword as it claims; some additional stuff is added to the keyword recognition stuff at the end and I suspect it is triggering a memory leak in the regex parser</p>",
        "id": 130604463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532984689
    },
    {
        "content": "<p>More specifically, the regex <code>([^ \\t\\n\\r{(\\[,:]*(,\\s*)?)*</code> at the end has the form <code>(a*b?)*</code> which can loop</p>",
        "id": 130604647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532984939
    },
    {
        "content": "<p>Thanks so much for finding this commit!!!  I reverted it and published a new version.</p>",
        "id": 130604816,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532985128
    },
    {
        "content": "<p>The regex was actually supposed to highlight the <code>bar</code> in <code>mutual def foo, bar</code>.  I did not expect a platform-dependent bug in the regex engine here..</p>",
        "id": 130604854,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1532985230
    },
    {
        "content": "<p>I don't think you have to completely revert it; there is nothing wrong with adding <code>abbreviation</code> to the list, only the regex needs to be tweaked so that it doesn't match an infinite number of empty strings</p>",
        "id": 130605004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532985443
    },
    {
        "content": "<p>I think  this should work for matching <code>a, b</code> in <code>def a, b</code> (the final capturing group): <code>([^ \\t\\n\\r{(\\[,:]+(,\\s*[^ \\t\\n\\r{(\\[,:]+)*)</code></p>",
        "id": 130605237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532985755
    },
    {
        "content": "<p>Thanks Mario! This caused my users a certain amount of grief today</p>",
        "id": 130606974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532987897
    },
    {
        "content": "<p>Gabriel, here is another thing that might be useful. If I have snippet like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- cursor is here</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 130823107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533280871
    },
    {
        "content": "<p>Then the window displaying the goals knows exactly what is wrong: I need to supply <code>zero</code> and <code>mul</code> and stuff like that.</p>",
        "id": 130823154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533280937
    },
    {
        "content": "<p>So it would be nice if the autocomplete would show exactly those options. Now I often find myself clicking on the <code>{</code> to see in the Goal Window which stuff I still need to supply.</p>",
        "id": 130823165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533280991
    },
    {
        "content": "<p>Alternatively, maybe some snippet on steroids could just fill them all in (with <code>sorry</code>'s). But my snippet-fu is non-existent.</p>",
        "id": 130823171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533281022
    },
    {
        "content": "<p>ctrl+alt+shift+enter</p>",
        "id": 130825053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533284358
    },
    {
        "content": "<p>What the hack is that supposed to do?</p>",
        "id": 130825062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533284400
    },
    {
        "content": "<p>Is there a way to ask VScode \"Hey, what does the shortcut do?\"?</p>",
        "id": 130825113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533284421
    },
    {
        "content": "<p>it lets you view all the messages</p>",
        "id": 130825138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533284437
    },
    {
        "content": "<p>instead of just the one on your line</p>",
        "id": 130825143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533284442
    },
    {
        "content": "<p>The window on the bottom which displays the errors and warnings is the place to look for this. Sometimes you have to pull it into existence</p>",
        "id": 130827024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533287350
    },
    {
        "content": "<p>Cool! I didn't know I could pull something up there!</p>",
        "id": 130827173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533287536
    },
    {
        "content": "<p>In VScode, if I select some text that is to be replaced, and I start typing a string the expected behaviour occurs. Except... Except when I start the replacement string with a <code>\\</code>, then it is not expanded into a unicode character. So if I select \"foobar\" and then type <code>\\lam x y</code>, I don't get a cool lambda.</p>",
        "id": 131221794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533886211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span></p>",
        "id": 131221810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533886248
    },
    {
        "content": "<p>I deal with this by writing what I want beforehand and copying it with ctrl-x into the whatever-that-thing-is-called buffer so I can use ctrl-v to paste when I'm replacing</p>",
        "id": 131229457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533897027
    },
    {
        "content": "<p>I deal with this by selecting \"foobar\", deleting the text, and then type <code>\\</code>.</p>",
        "id": 131229490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533897086
    },
    {
        "content": "<p>Right, I use both those way to deal with it. Still, I thought I would mention it, because maybe there is an easy fix. And sometimes I forget to deal with, and then <span class=\"emoji emoji-1f622\" title=\"cry\">:cry:</span></p>",
        "id": 131229622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897250
    },
    {
        "content": "<p>I'm not sure I understand this correctly.  You write <code>foobar</code> and then want <code>Î» x, f</code> instead.  So instead of deleting <code>foobar</code>, you select it and then start typing <code>\\lam x, f</code>?</p>",
        "id": 131229745,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533897481
    },
    {
        "content": "<p>Right</p>",
        "id": 131229798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897526
    },
    {
        "content": "<p>This shouldn't be too hard to add.  I just never used an editor like that.</p>",
        "id": 131229807,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533897548
    },
    {
        "content": "<p>For me it would usually be <code>ciw\\lam x ,y</code>... still need to look at <code>lean.vim</code> and all those other plugins for the LSP.</p>",
        "id": 131229879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897633
    },
    {
        "content": "<p>I'm a vim addict as well.  There is a pretty good vim plugin for vscode that I'm using: <a href=\"https://github.com/VSCodeVim/Vim\" target=\"_blank\" title=\"https://github.com/VSCodeVim/Vim\">https://github.com/VSCodeVim/Vim</a> .<br>\nAnd <code>ciw\\lam x ,y</code> works as expected!</p>",
        "id": 131229906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533897706
    },
    {
        "content": "<p>Ok, I should try that out.</p>",
        "id": 131229948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897730
    },
    {
        "content": "<p>Otoh, if I get actual vim working, then I could run <code>lean</code> on a server, and connect via <code>mosh</code>. Then my crappy laptop would have superfast Lean!</p>",
        "id": 131229967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897788
    },
    {
        "content": "<p>And it should work in the latest version of the vscode extension.</p>",
        "id": 131230148,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1533898081
    },
    {
        "content": "<p>You could just do this with emacs, right? </p>\n<p>I should prod William about CoCalc. I am writing an introductory worksheet for beginning UGs teaching basic logic, using Sphinx and \"try it!\". I realised that no undergraduate would even be able to do my first maths example sheet unless they know how to construct and destruct or/and etc.</p>",
        "id": 131234613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533904633
    },
    {
        "content": "<blockquote>\n<p>I should prod William about CoCalc. </p>\n</blockquote>\n<p>Yes! I would love to hear more updates from CoCalc.</p>",
        "id": 131244404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533914683
    },
    {
        "content": "<blockquote>\n<p>Gabriel, here is another thing that might be useful. If I have snippet like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- cursor is here</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Then the window displaying the goals knows exactly what is wrong: I need to supply zero and mul and stuff like that.<br>\nSo it would be nice if the autocomplete would show exactly those options.</p>\n</blockquote>\n<p>This will probably not happen in Lean 3.</p>",
        "id": 132058162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1534178506
    },
    {
        "content": "<p>Ctrl+A is not working for me (I'm on Windows 10)</p>",
        "id": 132376683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534627593
    },
    {
        "content": "<p>wait it works now</p>",
        "id": 132376850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534627907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> While in Orsay we had some dreams and fantasies... they're recorded over here: <a href=\"https://github.com/leanprover-community/mathlib/wiki/VScode-wishlist\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki/VScode-wishlist\">https://github.com/leanprover-community/mathlib/wiki/VScode-wishlist</a> <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 133076051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535652504
    },
    {
        "content": "<p>some of them would probably need a more detailed description for people who didn't attend the dicussion</p>",
        "id": 133076648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535653022
    },
    {
        "content": "<p>I think I can make sense of most of them.  It reads like a wishlist for Lean 4.<br>\nWhat is \"help with naming conventions\"?</p>",
        "id": 133076769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535653146
    },
    {
        "content": "<p>\"Help with naming conventions\": Given a statement, figure out the name.</p>",
        "id": 133076853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535653239
    },
    {
        "content": "<p>I don't know much about Lean 4. But we also decided that we were to often saying: \"That might be easier in Lean 4\" etc...</p>",
        "id": 133076906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535653310
    },
    {
        "content": "<p>[kidding] Oooh, and we want MS Word's Clippy for Lean: \"It looks like you are trying to prove something by induction. Would you like me to write the skeleton of the proof for you?\" [/kidding]</p>",
        "id": 133076989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535653422
    },
    {
        "content": "<p>Can I add pp option to display types of proofs in your goal or local context as well. Maybe target types of coercions as well.</p>",
        "id": 133076994,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535653424
    },
    {
        "content": "<p>I'm just saying that most points on the list are either infeasible right now, or shouldn't go into the vscode extension.<br>\nIf you want to start experimenting right now, I think the naming convention automation is the lowest hanging fruit.  You can implement <code>#how_do_you_call âˆ€ x y, x &lt; y â†’ x - y = 0</code> as a user command for example.</p>",
        "id": 133078301,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535654733
    },
    {
        "content": "<p>The next best is maybe \"turn current goal into lemma\".  You can do this as a tactic that outputs the text for the lemma as an error message.  The user can then copy&amp;paste it where they want.  Last time I talked with Rob and Johannes there was the suggestion to parse tags like <code>&lt;insert-above&gt;lemma foo : a â†’ b := sorry&lt;/insert-above&gt;</code> in the error messages, but imho that's a bit too hacky unless there is a significant need for it.</p>",
        "id": 133078602,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535655073
    },
    {
        "content": "<p>For the other \"clippy\" and refactoring stuff, I'd really wait.</p>",
        "id": 133078667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535655144
    },
    {
        "content": "<p>Clippy was not really serious...</p>",
        "id": 133078880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535655397
    },
    {
        "content": "<p>The turn goal into lemma tactic would be really cool I think.</p>",
        "id": 133078893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535655415
    },
    {
        "content": "<p>And I might even be able to write it with a bit of help.</p>",
        "id": 133078902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535655429
    },
    {
        "content": "<p><code>#how_do_you_call</code> would be awesome, and I have no clue whatsoever how to write it.</p>",
        "id": 133078912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535655455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Currently <code>\\func</code> points to an arrow that is frozen by core. We thought that it might be useful to point it to <code>â¥¤</code> instead, so that we can use that arrow for functors in the category lib.</p>",
        "id": 133122224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535720109
    },
    {
        "content": "<p>Ah I see, <code>â‡’</code> is already used for the relators.  Another unused option is <code>âŸ¹</code>, written <code>\\==&gt;</code>.</p>",
        "id": 133122657,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535720635
    },
    {
        "content": "<p>I think that this is used for natural transformations</p>",
        "id": 133122712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535720674
    },
    {
        "content": "<p>Yes, that would've been my next question.  What about morphisms and natural transformations?</p>",
        "id": 133122756,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535720728
    },
    {
        "content": "<p><code>\\hom</code> and <code>\\==&gt;</code></p>",
        "id": 133122769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535720756
    },
    {
        "content": "<p>It is really <code>\\func</code> that's been messed up. For the rest we have nice solutions.</p>",
        "id": 133122815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535720783
    },
    {
        "content": "<p>Really the thing for relators should have been local notation. Then <em>you</em> wouldn't have to do anything.</p>",
        "id": 133122838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535720832
    },
    {
        "content": "<p>Now we are kindly asking you to point <code>\\func</code> to this goofy arrow that looks enough like what we want.</p>",
        "id": 133122850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535720851
    },
    {
        "content": "<p>I definitely agree on the local notation part.  I'd just like to avoid changing existing abbreviations if possible.</p>",
        "id": 133123049,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721041
    },
    {
        "content": "<p>You can easily add the arrow yourself: just add a new line with <code>\"func\": \"âŸ¹\",</code> to this json file <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json#L1290\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json#L1290\">https://github.com/leanprover/vscode-lean/blob/master/translations.json#L1290</a> and make a PR.</p>",
        "id": 133123074,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721098
    },
    {
        "content": "<p>Right... I'm currently doing something slightly related... writing a Python script that turns that file into Compose-key sequences.</p>",
        "id": 133123137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721143
    },
    {
        "content": "<p>So I should not overwrite <code>\\functor</code>? But adding <code>\\func</code> is ok?</p>",
        "id": 133123226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721262
    },
    {
        "content": "<p>I feel like we need a separate repository for this file and all associated scripts soon.  I have also written a converter: <a href=\"https://github.com/gebner/m17n-lean\" target=\"_blank\" title=\"https://github.com/gebner/m17n-lean\">https://github.com/gebner/m17n-lean</a></p>",
        "id": 133123230,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721267
    },
    {
        "content": "<p>As I said, I'd rather avoid overwriting.  But I'm happy either way.</p>",
        "id": 133123245,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721300
    },
    {
        "content": "<p>I guess no-one is using that abbreviation at the moment. So I'dd rather overwrite. Chances are way higher that someone will write <code>\\functor</code> when doing categories.</p>",
        "id": 133123319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721365
    },
    {
        "content": "<p><a href=\"https://github.com/jcommelin/vscode-lean/pull/1\" target=\"_blank\" title=\"https://github.com/jcommelin/vscode-lean/pull/1\">https://github.com/jcommelin/vscode-lean/pull/1</a></p>",
        "id": 133123351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721411
    },
    {
        "content": "<blockquote>\n<p>I feel like we need a separate repository for this file and all associated scripts soon.  I have also written a converter: <a href=\"https://github.com/gebner/m17n-lean\" target=\"_blank\" title=\"https://github.com/gebner/m17n-lean\">https://github.com/gebner/m17n-lean</a></p>\n</blockquote>\n<p>I've thought something similar, in particular for providing a single source for VS Code, Emacs, and Vim keybindings.</p>",
        "id": 133123352,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535721413
    },
    {
        "content": "<p>Ok, then.  You can still get the old arrow with <code>\\r=</code> etc.</p>",
        "id": 133123354,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721417
    },
    {
        "content": "<p>Exactly</p>",
        "id": 133123366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> You made a PR to your own fork.</p>",
        "id": 133123377,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721465
    },
    {
        "content": "<p>Oops, that is silly</p>",
        "id": 133123384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721478
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/pull/85\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/85\">https://github.com/leanprover/vscode-lean/pull/85</a></p>",
        "id": 133123528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721605
    },
    {
        "content": "<p>And deployed.</p>",
        "id": 133123710,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535721794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Voila! You can update the arrow for functors in your lib!</p>",
        "id": 133123835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535721924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">fileinput</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">pat</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;(.*)&quot;:&quot;(.*)&quot;&#39;</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">MULTILINE</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fileinput</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">():</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">suf</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">hooked_pre</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;&lt;&#39;</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&gt;&#39;</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;Multi_key&gt; &#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">hooked_pre</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; : &quot;&#39;</span> <span class=\"o\">+</span> <span class=\"n\">suf</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&quot;    # &#39;</span> <span class=\"o\">+</span> <span class=\"n\">pre</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 133123932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535722011
    },
    {
        "content": "<p>That's the silly thing that I'm trying</p>",
        "id": 133123942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535722022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> By the way, if the original arrow becomes unfrozen in Lean 4, then we might want to switch back...</p>",
        "id": 133124968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535723110
    },
    {
        "content": "<p>are <em>you</em> going to claim it as a global notation?</p>",
        "id": 133125220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535723405
    },
    {
        "content": "<p>Of course! We are evil!</p>",
        "id": 133125512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535723753
    },
    {
        "content": "<p>I'm only allowing the notations in category theory now because the arrows are bizarre</p>",
        "id": 133125588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535723812
    },
    {
        "content": "<p>Any arrow that is not bizarre can be local. That's fine with me. We'll be locally evil.</p>",
        "id": 133125750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535723993
    },
    {
        "content": "<p>Gabriel, why do you hardcode the leader key?</p>",
        "id": 133127381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535725707
    },
    {
        "content": "<p>Leader = backslash? It used to be backslash in emacs, and I just copied that.  There is no fundamental reason why it has to be a backslash.  What do you have in mind, <code>Â§</code>?  We can easily support that with a configuration option.  I don't know whether we could support \"right-control\" as a leader key at all.</p>",
        "id": 133128408,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535726943
    },
    {
        "content": "<p>Yes, I mean leader as in vim terminology. The point is that \\  is very inconvenient on a French keyboard. In vim I always use comma for that</p>",
        "id": 133128462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727003
    },
    {
        "content": "<p>wouldn't comma give you a lot of false positives?</p>",
        "id": 133128489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535727030
    },
    {
        "content": "<p>only if the abbreviation starts with a space</p>",
        "id": 133128498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727048
    },
    {
        "content": "<p>comma is always followed by space (at least in France)</p>",
        "id": 133128511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727068
    },
    {
        "content": "<p>it's usually followed by a space in mathlib, but there are a significant fraction with no space</p>",
        "id": 133128524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535727097
    },
    {
        "content": "<p>under what kind of circumstances?</p>",
        "id": 133128577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727127
    },
    {
        "content": "<p><code>Î»âŸ¨a,bâŸ©, </code> and such</p>",
        "id": 133128608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535727182
    },
    {
        "content": "<p>this is wrong</p>",
        "id": 133128616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727204
    },
    {
        "content": "<p>should be a, b</p>",
        "id": 133128617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727212
    },
    {
        "content": "<p>also between rewrite rules and simp rules sometimes</p>",
        "id": 133128621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535727217
    },
    {
        "content": "<p>I agree, I try to keep a space after a comma but not everyone does</p>",
        "id": 133128629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535727239
    },
    {
        "content": "<p>So switching to comma would improve typography in mathlib!</p>",
        "id": 133128630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727240
    },
    {
        "content": "<p>You could map your CAPS LOCK key to Â§, and then use that as a leader.</p>",
        "id": 133128686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727273
    },
    {
        "content": "<p>Or just map your caps lock to <code>\\</code></p>",
        "id": 133128691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727283
    },
    {
        "content": "<p>I thought French keyboards have a key for Â§?</p>",
        "id": 133128705,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535727302
    },
    {
        "content": "<p>no</p>",
        "id": 133128729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727333
    },
    {
        "content": "<p><a href=\"https://fr.wikipedia.org/wiki/Fichier:Clavier-Azerty-France.svg\" target=\"_blank\" title=\"https://fr.wikipedia.org/wiki/Fichier:Clavier-Azerty-France.svg\">https://fr.wikipedia.org/wiki/Fichier:Clavier-Azerty-France.svg</a></p>",
        "id": 133128813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727383
    },
    {
        "content": "<p>Oh, so wikipedia has been lying to me.  I thought it is right next to shift.  <a href=\"https://en.wikipedia.org/wiki/AZERTY#/media/File:Azerty_fr.svg\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/AZERTY#/media/File:Azerty_fr.svg\">https://en.wikipedia.org/wiki/AZERTY#/media/File:Azerty_fr.svg</a></p>",
        "id": 133128815,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535727389
    },
    {
        "content": "<p>It seems to be <code>Shift + !</code></p>",
        "id": 133128844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727428
    },
    {
        "content": "<p>That picture also shows Â§ right next to the right shift key?</p>",
        "id": 133128845,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535727429
    },
    {
        "content": "<p>it's there, but not on direct access</p>",
        "id": 133128849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727431
    },
    {
        "content": "<p>it's better than \\ which is really hard to type, but comma is direct access</p>",
        "id": 133128862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727461
    },
    {
        "content": "<p>Make <code>Ã¹</code> the leader (-;</p>",
        "id": 133128913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727488
    },
    {
        "content": "<p>indeed this would also probably be fine (this character is used in only one word)</p>",
        "id": 133129047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727641
    },
    {
        "content": "<p>On a different subject: are there any plans to add a code formatter to vscode extension?</p>",
        "id": 133129165,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535727777
    },
    {
        "content": "<p>I think there are plans to add a code formatter to Lean 4.</p>",
        "id": 133129198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535727834
    },
    {
        "content": "<p>what is a code formatter?</p>",
        "id": 133129243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727848
    },
    {
        "content": "<blockquote>\n<p>what is a code formatter?</p>\n</blockquote>\n<p>You slam a button and it adds spaces in the proper places and enforces some style guide things.</p>",
        "id": 133129312,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535727908
    },
    {
        "content": "<p>Basically it adds and removes spaces until the code looks nice</p>",
        "id": 133129332,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535727930
    },
    {
        "content": "<p>that would be really nice</p>",
        "id": 133129448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535728054
    },
    {
        "content": "<p>Presumably it only works for code which can be made to look nice by addition and removal of spaces</p>",
        "id": 133130026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535728619
    },
    {
        "content": "<p>I think that you can in theory perform arbitrary textual transformations</p>",
        "id": 133130061,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535728669
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PIoL-GV9fsWWF6LSXn8cb1Cx/vscode-lean-leader.png\" target=\"_blank\" title=\"vscode-lean-leader.png\">Coming soon to a vscode near you.</a> I'm on vacation now, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  can publish updates to the vscode extension if there's anything urgent.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PIoL-GV9fsWWF6LSXn8cb1Cx/vscode-lean-leader.png\" target=\"_blank\" title=\"Coming soon to a vscode near you.\"><img src=\"/user_uploads/3121/PIoL-GV9fsWWF6LSXn8cb1Cx/vscode-lean-leader.png\"></a></div>",
        "id": 133131128,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535729933
    },
    {
        "content": "<blockquote>\n<p>On a different subject: are there any plans to add a code formatter to vscode extension?</p>\n</blockquote>\n<p>There's also an open issue on the lean repository related to this <a href=\"https://github.com/leanprover/lean/issues/1970\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1970\">here</a>.</p>",
        "id": 133131260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535730096
    },
    {
        "content": "<p>Thank you very much Gabriel! Together with the TAB thing it really makes Leaning more comfortable</p>",
        "id": 133131691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535730625
    },
    {
        "content": "<p>My windows updated and now vscode says lean doesn't work. I tried using lean --version and I got \"segmentation fault\". Even if I use PATH ***, I can't get lean --version to work. Any suggestions?</p>",
        "id": 133208406,
        "sender_full_name": "Ali Sever",
        "timestamp": 1535878374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Hi Mario, I recently had an issue with a windows insider update which completely prevented me from using lean. Kevin told me that I should warn you about this, since there's a chance that whatever caused this might be in the next windows update (which google says is on October 10th). I'm afraid I can't help you much about the error, but I've put everything I know here <a href=\"https://github.com/leanprover/lean/issues/1972\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1972\">https://github.com/leanprover/lean/issues/1972</a>.</p>",
        "id": 133271161,
        "sender_full_name": "Ali Sever",
        "timestamp": 1535995436
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Jt5Tckc7s01asToD4wpB1VRy/2018-09-04.png\" target=\"_blank\" title=\"2018-09-04.png\">2018-09-04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Jt5Tckc7s01asToD4wpB1VRy/2018-09-04.png\" target=\"_blank\" title=\"2018-09-04.png\"><img src=\"/user_uploads/3121/Jt5Tckc7s01asToD4wpB1VRy/2018-09-04.png\"></a></div>",
        "id": 133300183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536052357
    },
    {
        "content": "<p>Do you know about <code> ``` </code>? It makes your code easier to cut and paste ;-)</p>",
        "id": 133300973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536053517
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">MWE</span> <span class=\"kn\">extends</span> <span class=\"n\">has_zero</span> <span class=\"n\">A</span>\n</pre></div>",
        "id": 133301089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536053642
    },
    {
        "content": "<p>Also, why did you put that in this thread?</p>",
        "id": 133301106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536053677
    },
    {
        "content": "<p>because it's about VScode</p>",
        "id": 133301134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536053728
    },
    {
        "content": "<p>I guess Kenny wants to complain about syntax highlighting</p>",
        "id": 133301273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536053959
    },
    {
        "content": "<p>Oh I see. He's as cryptic as ever :-)</p>",
        "id": 133302054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536055216
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">5</span>\n</pre></div>\n\n\n<p>This one looks weird too (with <code>class</code> colored differently from <code>.instance_max_depth</code></p>",
        "id": 133309635,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536066493
    },
    {
        "content": "<p>I've submitted <a href=\"https://github.com/leanprover/vscode-lean/pull/87\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/87\">a PR</a> for Kenny and my examples.</p>",
        "id": 133311084,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536068329
    },
    {
        "content": "<p>I just discovered that you can indent a bunch of lines by highlighting them and then pressing <code>ctrl+]</code>, and de-indent by <code>ctrl+[</code></p>",
        "id": 133393460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536171958
    },
    {
        "content": "<p>Alternative: Tab or Shift-Tab</p>",
        "id": 133393516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536171985
    },
    {
        "content": "<p>also works with Tab and Shift-Tab</p>",
        "id": 133393518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536171988
    },
    {
        "content": "<p>oh right</p>",
        "id": 133393536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536172009
    },
    {
        "content": "<p>Also, you should learn Vim, so that you can be disgusted by <code>Ctrl-[</code> being a shortcut for something silly like that (-;</p>",
        "id": 133393703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536172190
    },
    {
        "content": "<p>Did you try <code>\\G</code>?</p>",
        "id": 133393766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536172215
    },
    {
        "content": "<p>that's even more bizarre</p>",
        "id": 133393773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536172225
    },
    {
        "content": "<p>Right, that should clearly expand to <code>Î±</code>.</p>",
        "id": 133393829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536172321
    },
    {
        "content": "<p>Same with \\R (for rings) and \\M (for modules), they should expand to Î±</p>",
        "id": 133394002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536172488
    },
    {
        "content": "<p>I am writing some Noetherian code and of course using Mario's work on Noetherian modules, and you can tell exactly who wrote each line because of this convention :-)</p>",
        "id": 133394461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536173039
    },
    {
        "content": "<blockquote>\n<p>Same with \\R (for rings) and \\M (for modules), they should expand to Î±</p>\n</blockquote>\n<p>or maybe \\beta, depending on...um...a random choice I guess</p>",
        "id": 133395143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536173659
    },
    {
        "content": "<p>Has anyone had any luck with the \"Bracket pair colorizer\" extension that's suggested in <a href=\"https://github.com/leanprover/vscode-lean/blob/master/README.md#other-potentially-helpful-settings\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/README.md#other-potentially-helpful-settings\">the readme</a>? It doesn't seem to work (on lean files) right out of the box (perhaps because lean doesn't appear on <a href=\"https://prismjs.com/#languages-list\" target=\"_blank\" title=\"https://prismjs.com/#languages-list\">the Prism.js list of languages</a>), though I like how it looks on other filetypes.</p>",
        "id": 133409881,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536190283
    },
    {
        "content": "<p>I opened my file called <code>dfinsupp_quotient.lean</code> in VSCode, and then closed it, and then rebuilt Lean, and then rebuilt mathlib, and then opened it again in VSCode, but its content was suddenly gone.</p>",
        "id": 133511543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327706
    },
    {
        "content": "<p>my file is independent from mathlib, it's in my own sandbox</p>",
        "id": 133511668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327778
    },
    {
        "content": "<p>Sounds like you didn't save. Did you open if from a file explorer, or just open VScode, and it was there because it was the last thing you were looking at?</p>",
        "id": 133511721,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536327826
    },
    {
        "content": "<p>I always save my file after I type every word</p>",
        "id": 133511779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327852
    },
    {
        "content": "<p>the latter</p>",
        "id": 133511792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327867
    },
    {
        "content": "<p>also, now, whenever I open VSCode a second tab would magically appear, and the name of the tab would be \"null\", and whenever I click on \"null\" it would disappear</p>",
        "id": 133511866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327938
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/JQPkbB2KJ2oZvqaMMl03_ttK/2018-09-07-2.png\" target=\"_blank\" title=\"2018-09-07-2.png\">2018-09-07-2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JQPkbB2KJ2oZvqaMMl03_ttK/2018-09-07-2.png\" target=\"_blank\" title=\"2018-09-07-2.png\"><img src=\"/user_uploads/3121/JQPkbB2KJ2oZvqaMMl03_ttK/2018-09-07-2.png\"></a></div>",
        "id": 133511941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327975
    },
    {
        "content": "<p>whenever I click on the tab \"null\", the tab \"null\" itself would disappear</p>",
        "id": 133511963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536327994
    },
    {
        "content": "<p>I don't really mind spending the next day retyping everything, I just want to make sure that it won't happen again</p>",
        "id": 133512015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536328033
    },
    {
        "content": "<p>What happens if you open from a file explorer?</p>",
        "id": 133512309,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536328271
    },
    {
        "content": "<p>it is also empty</p>",
        "id": 133512331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536328300
    },
    {
        "content": "<p>Ctrl+space does not show the defining fields of a structure/inductive/class, such as filter.univ_sets</p>",
        "id": 133560303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536395853
    },
    {
        "content": "<p>hmm, it does show <code>filter.univ_sets</code>.</p>",
        "id": 133560389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536396006
    },
    {
        "content": "<p>But I do remember there are some things that Ctrl+Space doesn't show</p>",
        "id": 133560392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536396021
    },
    {
        "content": "<p>Sometimes it doesn't show things in a namespace that you have open if you type <code>finset.x</code> instead of <code>x</code></p>",
        "id": 133561694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536398925
    },
    {
        "content": "<p>In my experience sometimes it doesn't show something, and then you hit escape and then ctrl-space again, and then it shows them, although I noted this behaviour months ago and cannot say for sure that it still occurs.</p>",
        "id": 133562956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536401744
    },
    {
        "content": "<p>Is there a quick way to change <code>(lorem ipsum dolor)</code> to <code>{lorem ipsum dolor}</code> etc?</p>",
        "id": 133582528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536442102
    },
    {
        "content": "<p>you can use <code>Select to Bracket</code> (no default key command)</p>",
        "id": 133582636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536442422
    },
    {
        "content": "<p>The vim incantation <a href=\"https://stackoverflow.com/questions/25405072/quickest-way-to-change-a-pair-of-parenthesis-to-brackets-in-vim\" target=\"_blank\" title=\"https://stackoverflow.com/questions/25405072/quickest-way-to-change-a-pair-of-parenthesis-to-brackets-in-vim\"><code>%r}``r{</code></a> would do this, but unfortunately it doesn't work in the VScode vim extension yet (maybe <a href=\"https://github.com/VSCodeVim/Vim/pull/3028\" target=\"_blank\" title=\"https://github.com/VSCodeVim/Vim/pull/3028\">soon</a>?).</p>",
        "id": 133583057,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536443371
    },
    {
        "content": "<p>VSCode's vim extension has a feature from vim-surround enabled by default, so <code>cs)}</code> works</p>",
        "id": 133583174,
        "sender_full_name": "Olli",
        "timestamp": 1536443601
    },
    {
        "content": "<p>Cool, I didn't know that! However, on my macOS system, the \"surround\" commands don't work when the lean extension is enabled. They do work on my windows machine (and when I disable the lean extension, or on non-lean files). Very strange...</p>",
        "id": 133584707,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536446826
    },
    {
        "content": "<p>When I type <code>cs</code> on my mac with the lean extension enabled, it deletes the whole line and puts me in insert mode.</p>",
        "id": 133584754,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536446893
    },
    {
        "content": "<p>Oh wait it's working now. No idea what's going on.</p>",
        "id": 133584862,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536447123
    },
    {
        "content": "<p>Is there a way to see which file is being compiled?</p>",
        "id": 133608201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536497821
    },
    {
        "content": "<p>When an identifier that ends with number has an error message, only the part up to the number is underlined. Moreover, clicking an identifier which ends with a number will not highlight its usages in the rest of the open file, as usually happens</p>",
        "id": 133636317,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536551425
    },
    {
        "content": "<p>The same things happen with dots, though maybe the current highlighting behavior is preferable in that case.</p>",
        "id": 133636542,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536551771
    },
    {
        "content": "<p>Is there a fundamental reason why the partial <code>tactic.trace ...</code> output of a tactic is only displayed in the editor after tactic execution has completed (commonly, failed)?</p>",
        "id": 133812963,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536772466
    },
    {
        "content": "<p>Yeah, the current server protocol doesn't really allow for another (efficient) option. I've thought about this, but it's not clear at all how this could work especially when we move to storing messages in an immutable Lean data structure.</p>",
        "id": 133813596,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536773204
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NkA0T9DQQznkuHgdbNbPKEkN/2018-09-13.png\" target=\"_blank\" title=\"2018-09-13.png\">2018-09-13.png</a> <br>\nmisplaced red underscore</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NkA0T9DQQznkuHgdbNbPKEkN/2018-09-13.png\" target=\"_blank\" title=\"2018-09-13.png\"><img src=\"/user_uploads/3121/NkA0T9DQQznkuHgdbNbPKEkN/2018-09-13.png\"></a></div>",
        "id": 133867290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536823613
    },
    {
        "content": "<p>code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133867293,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536823622
    },
    {
        "content": "<p>line 1 is normal, line 2 is not</p>",
        "id": 133867301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536823638
    },
    {
        "content": "<p>Ned Summers showed me examples of this which were really crazy -- he seemed to be able to move the red line an arbitrary amount to the left :-)</p>",
        "id": 133868544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536825785
    },
    {
        "content": "<p>I guess this has nothing to do with VScode. The problem should be in lean server mode, no?</p>",
        "id": 133868553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536825833
    },
    {
        "content": "<p>\"Moving error messages an <em>arbitrary</em> amount to the left\" is a known bug in the presence of calligraphic characters.  Please just don't write errors when using calligraphic (or fraktur) characters.</p>",
        "id": 133881106,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536842287
    },
    {
        "content": "<p>The problem is that vscode counts the number of utf-16 words (2 bytes), while lean counts the number of Unicode codepoints (can be larger than 2 bytes).</p>",
        "id": 133881171,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536842374
    },
    {
        "content": "<p>Ouch... does it make sense to report this bug to VScode? Or is it not worth it?</p>",
        "id": 133881477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536842666
    },
    {
        "content": "<p>It's by design I think. The language server protocol specifies this behavior explicitly.  There is an issue in the github repo, but I am not sure if they'll ever change it.  Note that JavaScript also uses this utf-16 indexing for strings.</p>",
        "id": 133881661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536842886
    },
    {
        "content": "<p>There is another possible bug.  Vscode and lean also disagree on what line endings are recognized.  Vscode recognizes <code>\\r</code>, but lean doesn't.</p>",
        "id": 133881694,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536842948
    },
    {
        "content": "<p>Lean is pretty sane. <span class=\"emoji emoji-1f604\" title=\"big smile\">:big_smile:</span></p>",
        "id": 133881817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536843081
    },
    {
        "content": "<p>Indeed Ned was doing category theory and there were calligraphic C's everywhere. Rather took me by surprise when I first saw it!</p>",
        "id": 133881836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536843116
    },
    {
        "content": "<p>Could you do a man-in-the-middle on the Lean - VScode communication?</p>",
        "id": 133881855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536843122
    },
    {
        "content": "<p>Somehow VScode is able to deal with Unicode characters, even if they use more then 2 bytes.</p>",
        "id": 133881904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536843161
    },
    {
        "content": "<p>If the Lean extension would be able to detect this behaviour, you could manually adjust the coordinates of the red line.</p>",
        "id": 133881923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536843196
    },
    {
        "content": "<p>Admittedly this is very hacky, and probably not really worth it.</p>",
        "id": 133881936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536843213
    },
    {
        "content": "<p>Yes that's the way to fix it. You need to manually translate all the positions in Vscode.</p>",
        "id": 133882129,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536843387
    },
    {
        "content": "<p>The way you encode calligraphic characters in utf-16 is two use 2 2-byte words.  In utf-8 you need 4 bytes.</p>",
        "id": 133882192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536843476
    },
    {
        "content": "<p>Every time I have to write a newline character in a string I have to do it twice because it always autocorrects into a reverse set inclusion :'(</p>",
        "id": 133882648,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536843878
    },
    {
        "content": "<p>Does \\\\n work?</p>",
        "id": 133884051,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536845161
    },
    {
        "content": "<p>But my example has bo calligraphic characters!</p>",
        "id": 133886939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536847720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can I pay you real money? :D awesome</p>",
        "id": 133887743,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536848327
    },
    {
        "content": "<p>sometimes in the middle of the proof, when I type something (say <code>abcde</code>), then after I finish, I see the state after typing <code>a</code>, and then after typing <code>b</code>, and then after typing <code>c</code>, and then after typing <code>d</code>, and then after typing <code>e</code>, resulting in the situation that I have to wait a while before I can see the result</p>",
        "id": 134914446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538295848
    },
    {
        "content": "<p>Is your cursor unusually slow?</p>",
        "id": 134914451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538295899
    },
    {
        "content": "<p>or typing</p>",
        "id": 134914458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538295914
    },
    {
        "content": "<p>Or is it just lean being behind VSCode</p>",
        "id": 134914459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538295935
    },
    {
        "content": "<p>the cursor is fine, and so is my typing</p>",
        "id": 134914463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538295956
    },
    {
        "content": "<p>oh and sometimes after I type something, suddenly the whole file is starting to compile and I have to wait a while again</p>",
        "id": 134914504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538295983
    },
    {
        "content": "<p>That latter problem has hit me many times</p>",
        "id": 134914511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538296054
    },
    {
        "content": "<p>returning to the previous problem, if I copy and paste <code>abcde</code>, then I see the end result instantaneously, so it isn't lean being behind VSCode either</p>",
        "id": 134914548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538296083
    },
    {
        "content": "<p>I believe sometimes when you mouse over something vscode makes an info request which requires lean to open and compile a new file</p>",
        "id": 134914553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538296091
    },
    {
        "content": "<p>It might be that the cost of error reporting is high?</p>",
        "id": 134914555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538296142
    },
    {
        "content": "<p>so that the partial results take longer to compile</p>",
        "id": 134914560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538296159
    },
    {
        "content": "<p>shouldn't it stop compiling when I enter a new letter?</p>",
        "id": 134914673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538296380
    },
    {
        "content": "<p>it should, but it may also take some time for the interrupt to be accepted</p>",
        "id": 134914679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538296428
    },
    {
        "content": "<blockquote>\n<p>oh and sometimes after I type something, suddenly the whole file is starting to compile and I have to wait a while again</p>\n</blockquote>\n<p>I really hope they can remove this \"feature\"</p>",
        "id": 135042970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538493715
    },
    {
        "content": "<p>Is this a Windows-only feature? I am not sure I have experienced it on linux.</p>",
        "id": 135043039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538493753
    },
    {
        "content": "<p>I think I never saw this (I'm also using Linux)</p>",
        "id": 135044696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538495375
    },
    {
        "content": "<p>If you're referring to the fact that the info view window goes blank for long periods while typing (inconsistently depending on the type of input?), I've also experienced this on both Mac and Windows and I complained about it <a href=\"https://github.com/leanprover/vscode-lean/issues/92\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/issues/92\">here</a>. I wasn't able to figure out how to fix the underlying issue, but as a workaround, <a href=\"https://github.com/leanprover/vscode-lean/pull/93\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/93\">I submitted a PR</a> which allows you to assign a keystroke to toggle pausing the infoview. So now I just hit my keybind for <code>lean.infoview.toggleUpdating</code>before typing, and hit it again when I'm done, which feels somewhat better.</p>",
        "id": 135047051,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538497632
    },
    {
        "content": "<blockquote>\n<p>Has anyone had any luck with the \"Bracket pair colorizer\" extension that's suggested in <a href=\"https://github.com/leanprover/vscode-lean/blob/master/README.md#other-potentially-helpful-settings\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/README.md#other-potentially-helpful-settings\">the readme</a>? It doesn't seem to work (on lean files) right out of the box (perhaps because lean doesn't appear on <a href=\"https://prismjs.com/#languages-list\" target=\"_blank\" title=\"https://prismjs.com/#languages-list\">the Prism.js list of languages</a>), though I like how it looks on other filetypes.</p>\n</blockquote>\n<p>As an update, the new version of that extension, <a href=\"https://github.com/CoenraadS/Bracket-Pair-Colorizer-2\" target=\"_blank\" title=\"https://github.com/CoenraadS/Bracket-Pair-Colorizer-2\">\"Bracket Pair Colorizer 2\"</a> currently works out of the box with Lean, though it's still in alpha.</p>",
        "id": 135047256,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538497850
    },
    {
        "content": "<p>I've definitely seen Kenny's issue on macOS. I think the diagnosis is that your mouse has accidentally hovered over something, VS Code has decided to open a file in the background in order to provide a tooltip, and this has caused a cascade of recompilations.</p>",
        "id": 135066668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538517560
    },
    {
        "content": "<p>I only ever run lean with a complete bunch of .olean files for all of mathlib. Does this behaviour still occur in this situation?</p>",
        "id": 135085823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538550948
    },
    {
        "content": "<p>Probably not.</p>",
        "id": 135089946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538557124
    },
    {
        "content": "<p>Then this might be the reason I don't see this behaviour in my set-up (i.e. nothing to do with the OS)</p>",
        "id": 135092008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538559678
    },
    {
        "content": "<p>It's clearly much easier to work on something else than mathlib, for this reason</p>",
        "id": 135092018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538559707
    },
    {
        "content": "<p>Whenever I type <code>/-</code>, I automatically get <code>-/</code>, which is inconvenient at times. Before yesterday, it is smarter, in the sense that when I don't want <code>-/</code> it really doesn't give me <code>-/</code>.</p>",
        "id": 135500113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539120229
    },
    {
        "content": "<p>sometimes when I'm in <code>(checking visible lines and above mode)</code>, everything suddenly stops updating</p>",
        "id": 135616146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539271536
    },
    {
        "content": "<p>and I need to close and reopen VSCode</p>",
        "id": 135616156,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539271544
    },
    {
        "content": "<p>Known bug in the lean C++ code.  That's why the default changed back to \"visible files\" a few months back.</p>",
        "id": 135620011,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539275524
    },
    {
        "content": "<p>Is this a bug in VS Code? I'm using Ubuntu 18.04. <a href=\"/user_uploads/3121/OxpxEK0jqaMg9fHcbyh2yqu1/vscodebug1.png\" target=\"_blank\" title=\"vscodebug1.png\">vscodebug1.png</a> <a href=\"/user_uploads/3121/upsOq2WPURBmCL_T-T-IWBIf/vscodebug2.png\" target=\"_blank\" title=\"vscodebug2.png\">vscodebug2.png</a> <a href=\"/user_uploads/3121/4JUDEG9mSCNVtYDn8Kn02vOZ/vscodebug3.png\" target=\"_blank\" title=\"vscodebug3.png\">vscodebug3.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OxpxEK0jqaMg9fHcbyh2yqu1/vscodebug1.png\" target=\"_blank\" title=\"vscodebug1.png\"><img src=\"/user_uploads/3121/OxpxEK0jqaMg9fHcbyh2yqu1/vscodebug1.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/upsOq2WPURBmCL_T-T-IWBIf/vscodebug2.png\" target=\"_blank\" title=\"vscodebug2.png\"><img src=\"/user_uploads/3121/upsOq2WPURBmCL_T-T-IWBIf/vscodebug2.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4JUDEG9mSCNVtYDn8Kn02vOZ/vscodebug3.png\" target=\"_blank\" title=\"vscodebug3.png\"><img src=\"/user_uploads/3121/4JUDEG9mSCNVtYDn8Kn02vOZ/vscodebug3.png\"></a></div><p>After I hover over \"U\" in the git stuff, my output when I hover over \"+\" is corrupted. I can get it back by hovering over e.g. \"discard changes\".</p>",
        "id": 135726823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539426410
    },
    {
        "content": "<p>curses, did not capture mouse, sorry. Hover over \"U\" in git pane to open this menu.</p>",
        "id": 135726867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539426504
    },
    {
        "content": "<p>Probably a bug in electron (vscode uses electron (= essentially a distribution of the chrome (well, chromium) web browser) as the gui library).  <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=442111\" target=\"_blank\" title=\"https://bugs.chromium.org/p/chromium/issues/detail?id=442111\">https://bugs.chromium.org/p/chromium/issues/detail?id=442111</a></p>",
        "id": 135726929,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539426715
    },
    {
        "content": "<p>That's a very lisp-y answer</p>",
        "id": 135728564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539430138
    },
    {
        "content": "<p>I tried to open a lean file from explorer (I'm using Windows) and then I discovered that my workspace is gone</p>",
        "id": 146800716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541429844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How hard would it be to implement a toggle that enables/disables whether Lean is interactive. Sometimes I would like to disable the interactivity to paste a chunk of \"almost-Lean\" (for example from the goal window) and massage it into Lean-code. After that, I would reenable interactivity, so that the code would be sent of to the server.<br>\nIn this way, you wouldn't have the server constantly choking on the almost-Lean code, of which you already know that it won't parse...</p>",
        "id": 147731422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542275606
    },
    {
        "content": "<p>This might be a first step towards a \"Turn this goal into a lemma\" functionality in VScode</p>",
        "id": 147731427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542275633
    },
    {
        "content": "<p>Well, the two features are completely independent.<br>\nFor the \"pause\" feature, I think the easiest way would be prevent syncing the file contents here: <a href=\"https://github.com/leanprover/vscode-lean/blob/d70dfa121bc616100c14bc0fd24400b9962922da/src/sync.ts#L36\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/d70dfa121bc616100c14bc0fd24400b9962922da/src/sync.ts#L36\">https://github.com/leanprover/vscode-lean/blob/d70dfa121bc616100c14bc0fd24400b9962922da/src/sync.ts#L36</a>  You'd probably also want to disable autocompletion, hover, go-to-definition, etc. in that mode.<br>\nAdd a command to toggle the pause flag, and when unsetting it, resync all files.  There is theoretically also an option in the roi setting (press on the Lean item in the status bar, and then select \"nothing\"); but the server still recompiles stuff for autocompletion etc.</p>",
        "id": 147731713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1542276034
    },
    {
        "content": "<p>Right, they are completely independent, but they would work together pretty well.</p>",
        "id": 147731857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276269
    },
    {
        "content": "<p>I think stuff like autocompletion could still be useful in the \"pause\" mode.</p>",
        "id": 147731861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276292
    },
    {
        "content": "<p>At least when you are working on \"almost-Lean\" code.</p>",
        "id": 147731873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276309
    },
    {
        "content": "<p>Otherwise I could also just edit inside a comment block. But I would like to have some of the cheaper interaction, like syntax highlighting and autocompletion.</p>",
        "id": 147731936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276385
    },
    {
        "content": "<p>Anyway, I have never worked with typescript before, and I have no idea where to start if I would want to modify the VScode extension. But I would certainly like to learn this. Has someone ever twitched work on the Lean-VScode extension?</p>",
        "id": 147731970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542276454
    },
    {
        "content": "<p>Is anyone else seeing broken pause / continue icons in the tactic state since the latest VS code update (1.31.0)?</p>",
        "id": 157785947,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1549554176
    },
    {
        "content": "<p>This is a very minor feature request: In the tactic state, could we always display the number of goals?<br>\nHere is my very elaborate motivation for this silly request.<br>\nThink of someone who has never seen Lean before. You are demo-ing Lean to them. They are looking closely to the piece of code that you are writing, and suddenly they see in their peripheral vision that the entire tactic state has changed. What happened!!! (Don't worry, nothing happened, we just went from 1 goal to 2 goals, and therefore the entire context of the main goal shifted down one line.)<br>\nIt's really minor, but I think it decreases the mental discomfort by several epsilons...</p>",
        "id": 158436337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550061328
    },
    {
        "content": "<p>Also, feedback from my significant other: she thought that \"no goals\" sounded somewhat depressed. I know we had the <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> emoji at some point. That was maybe a bit unprofessional. But (related to above) if we display the number of goals all the time, it would already say \"0 goals\". And maybe on the line below it could say \"proof completed\". I don't know... better suggestions are welcome. Just trying to make things slightly more intuitive for absolute newbies.</p>",
        "id": 158436777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550061687
    },
    {
        "content": "<p>I think that that is a good suggestion.  However, I would like to modify it for the case where you have finished with the current goal inside a set of curly brackets, but there are more goals waiting outside the curly brackets.  I am not sure what would be a good newbie-comprehensible message for that.</p>",
        "id": 158437293,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550062279
    },
    {
        "content": "<p>\"subproof completed\"?</p>",
        "id": 158437398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550062393
    },
    {
        "content": "<p>Yes, that's probably good.</p>",
        "id": 158437460,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1550062466
    },
    {
        "content": "<p>\"Achievement unlocked\". And a little happy sound.</p>",
        "id": 158437485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550062503
    },
    {
        "content": "<p>what if there are no goals but the result state contains metavariables</p>",
        "id": 158439658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550064581
    },
    {
        "content": "<p>Ooh, those are edge cases (-; Just show some unrelated error message <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 158439979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550064882
    },
    {
        "content": "<p>I had a look in to doing this: the problem is that the code which governs this behavior is in Lean's C++. So to do this (without changing Lean) one would have to intercept the info-view message in vscode and then add back in the goal count message which is a little kludgy.</p>",
        "id": 158452083,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550073439
    },
    {
        "content": "<p>Hmm, too bad... Thanks for looking into it though!</p>",
        "id": 158452199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550073517
    },
    {
        "content": "<p>There will be a way to get the number of goals directly from the language server and then display it somewhere else which might make sense.</p>",
        "id": 158452791,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550073911
    },
    {
        "content": "<p>I'm working on a PR for this... it's just doing the \"kludgy thing\" though.</p>",
        "id": 158453119,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550074126
    },
    {
        "content": "<p>For reference it's line 235 in <code>src/library/tactic/tactic_state.cpp</code>.</p>",
        "id": 158453300,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550074239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks for doing this!</p>",
        "id": 158453600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550074455
    },
    {
        "content": "<blockquote>\n<p>Is anyone else seeing broken pause / continue icons in the tactic state since the latest VS code update (1.31.0)?</p>\n</blockquote>\n<p>I'm seeing this now I've upgraded to vscode 1.31.0 on macOS</p>",
        "id": 158453693,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550074559
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Is anyone else seeing broken pause / continue icons in the tactic state since the latest VS code update (1.31.0)?</p>\n</blockquote>\n<p>I'm seeing this now I've upgraded to vscode 1.31.0 on macOS</p>\n</blockquote>\n<p>This should be fixed in vscode 1.31.1.</p>",
        "id": 158453997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1550074801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/pull/114\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/114\">https://github.com/leanprover/vscode-lean/pull/114</a></p>",
        "id": 158455032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550075629
    },
    {
        "content": "<p>I didn't try to implement Neil's suggestion, so for now it just says \"proof completed\" whenever there are \"0 goals\".</p>",
        "id": 158455280,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550075817
    },
    {
        "content": "<p>I'm not completely against it, but there was a huge community backlash the last time we modified the tactic state output...  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You expressed a strong opinion against <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> the last time.  Is <code>proof completed</code> and <code>1 goal</code> more acceptable?</p>",
        "id": 158456105,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1550076455
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/63LxKjw8IMBE-jZ7yrAacja5/calvin.png\" target=\"_blank\" title=\"calvin.png\">calvin.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/63LxKjw8IMBE-jZ7yrAacja5/calvin.png\" target=\"_blank\" title=\"calvin.png\"><img src=\"/user_uploads/3121/63LxKjw8IMBE-jZ7yrAacja5/calvin.png\"></a></div>",
        "id": 158456208,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1550076531
    },
    {
        "content": "<p>I just noticed something else which is that if I have the infoview window selected in a vscode lean and then reopen vscode, the extension auto-opens a webview in column Three, leaving a blank column in the middle.</p>\n<p>I think this happens because the <code>editor</code> object that's passed to <code>openPreview</code> is undefined if the previously selected window was the infoview and the default column is set to Three <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L143\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L143\">here</a>. Could we fix this by just changing this to Two, or is there a reason it should be Three here? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 158458141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550077791
    },
    {
        "content": "<p>I experienced \"no goals blues\" in office hours yesterday as well. \"Proof completed\" sounds good, although you also get \"no goals\" at the end of subgoal blocks (i.e. before <code>}</code>)</p>",
        "id": 158459806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550079000
    },
    {
        "content": "<p>Yeah, that was basically Neil's point. I thought about having it say \"(sub)proof completed\" instead but then decided that looked ugly and might be more confusing. But I'm open to suggestions.</p>",
        "id": 158460078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550079209
    },
    {
        "content": "<p>We could display \"0 goals: (sub)proof completed\" to avoid confusion, where people think the whole proof is done, but it was only a subproof...</p>",
        "id": 158460081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550079212
    },
    {
        "content": "<p>Lol... (great minds think alike, and all that...)</p>",
        "id": 158460094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550079230
    },
    {
        "content": "<p>I'm just back from a department retreat in the Black Forest where I gave a talk on Lean for my department. Several people were confused about <code>no goals</code>. (\"Soccer matches with 'no goals' are extremely disappointing.\") Anyway, some people suggested <code>goals accomplished</code>. I think that is quite good.</p>",
        "id": 159048585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550736501
    },
    {
        "content": "<p>Sounds good to me, I've updated the PR.</p>",
        "id": 159076430,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550762946
    },
    {
        "content": "<blockquote>\n<p>Anyway, some people suggested <code>goals accomplished</code>. I think that is quite good.</p>\n</blockquote>\n<p>I think this goal might have been accomplished!</p>",
        "id": 161541841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553373704
    },
    {
        "content": "<p>Yes, I noticed that when helping students on Friday.</p>",
        "id": 161542068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553374110
    },
    {
        "content": "<p>It looks like this has landed, and I think I'm not that keen on \"goals accomplished\"... As Keeley pointed out to me, after you write:</p>\n<div class=\"codehilite\"><pre><span></span>example : true := begin\n  tactic.set_goals [],\nend\n</pre></div>\n\n\n<p>\"goals accomplished\" is a bit overenthusiastic, but \"no goals\" is completely accurate.</p>",
        "id": 161624583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553504161
    },
    {
        "content": "<p>Otoh, when \"goals accomplished\" is accurate, then \"no goals\" is a bit underenthousiastic.</p>",
        "id": 161624741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504310
    },
    {
        "content": "<p>There have been several cases of confusion with beginners...</p>",
        "id": 161624747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504335
    },
    {
        "content": "<p>But I understand that what we have now might also cause confusion.</p>",
        "id": 161624760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553504348
    },
    {
        "content": "<p>There are very occasionally times like this when it is a little misleading.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">zero_eq_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">â„•</span> <span class=\"bp\">âŸ¨</span><span class=\"mi\">1</span><span class=\"bp\">âŸ©</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>type mismatch at definition 'zero_eq_one', has type\n  0 = 0\nbut is expected to have type\n  0 = 0</code></p>",
        "id": 161638412,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553517498
    },
    {
        "content": "<p>Even with \"no goals\" I expect a lot of beginners to be very confused by such a situation.</p>",
        "id": 161638717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553517738
    },
    {
        "content": "<p>I'm a fan of the new <code>goals accomplished</code>!</p>\n<p>On the topic of confusing messages: if you are in a tactic proof, you will often see that the tactic failed, while you're still in the process of writing a proof. I know beginners who were confused by the actual error messages, they thought that the tactic proof so far gave an error</p>\n<div class=\"codehilite\"><pre><span></span>example : true := begin end\nexample : true := begin {  } end\n</pre></div>\n\n\n<p>give errors</p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nsolve1 tactic failed, focused goal has not been solved\n</pre></div>\n\n\n<p>Much better would be something like:</p>\n<div class=\"codehilite\"><pre><span></span>There are unsolved goals\nNot all goals have been solved\n</pre></div>",
        "id": 161653217,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1553526827
    },
    {
        "content": "<p>Another feature request:<br>\nIf you hover over a symbol you get a tooltip with the type signature (very helpful!)<br>\nIf your cursor is on a symbol, you can hit Ctrl-Shift-F10 to peek at the definition (very helpful!)<br>\nIn emacs-lean you have a little window/line on which you can always see the type signature of the symbol under the cursor. Can we have a similar feature in VScode?</p>",
        "id": 161738201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553585595
    },
    {
        "content": "<p>How do you find this useful? That is, is it that the emacs window is always immediate or that it doesn't obscure your code?</p>",
        "id": 161894758,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553716444
    },
    {
        "content": "<p>It's just always there. So when I move my cursor (not the mouse) I see exactly what the type signature is of the symbol that I'm on.</p>",
        "id": 161894846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716511
    },
    {
        "content": "<p>Since I use the Vim extension, I move the cursor a lot without the mouse, and so I don't get to see the tooltip.</p>",
        "id": 161894871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716536
    },
    {
        "content": "<p>Ah I see.</p>",
        "id": 161894890,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553716558
    },
    {
        "content": "<p>I wouldn't mind spending 1 or 2 lines of screen space on this feature.</p>",
        "id": 161894935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716565
    },
    {
        "content": "<p>Some duct tape for now is Ctrl-K Ctrl-I</p>",
        "id": 161894976,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553716610
    },
    {
        "content": "<p>How about having the type information appear in the Lean messages screen?</p>",
        "id": 161895013,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553716647
    },
    {
        "content": "<p>Well, the duct tape is also Ctrl-Shift-F10</p>",
        "id": 161895035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716666
    },
    {
        "content": "<p>Hmm, maybe it could go there. Don't know what others think of that....</p>",
        "id": 161895117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716705
    },
    {
        "content": "<p>You can also get VScode to add non-editable text inside the document. So you could see the type information to the right of the current line.</p>",
        "id": 161895311,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553716835
    },
    {
        "content": "<p>I already have GitLens info there...</p>",
        "id": 161895409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716902
    },
    {
        "content": "<p>I don't need an immediate solution. Ctrl-Shift-F10 works fine for now. But if someone wants to hack on a new feature... I'd like to see a small window of 1 or 2 lines high at the bottom of the editor, showing these type signatures.</p>",
        "id": 161895554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716985
    },
    {
        "content": "<p>How about as (yet) another status bar item?</p>",
        "id": 161895589,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1553717027
    },
    {
        "content": "<p>That might work, yes</p>",
        "id": 161895657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717054
    },
    {
        "content": "<blockquote>\n<p>How do you find this useful? That is, is it that the emacs window is always immediate or that it doesn't obscure your code?</p>\n</blockquote>\n<p>the minibuffer occupies exactly one line at the bottom of the window and this is where the type information shows up---this feature is very useful when parsing compressed terms</p>",
        "id": 161900828,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553721066
    },
    {
        "content": "<p>I wrote my PhD thesis using emacs nearly 25 years ago and I have been in love with emacs ever since. I use it for everything. I used it for Lean initially, but when I started trying to teach Lean to other people I reluctantly switched to VS Code. I still occasionally get frustrated that I can't do funky text editing in VS Code, the sort of thing I can do with elaborate shortcuts that 25 years of emacs has taught me, but the fact that everyone else uses VS Code has convinced me to switch. If there are advantages in using emacs over VS Code (like some minibuffer feature) then my opinion now is that someone should come up with a coherent way of porting them to VS Code and then perhaps we should try and persuade Gabriel to implement them in the VS Code Lean extension. Gabriel has done a remarkable job maintaining this extension, he is efficient and open to new ideas and fixes bugs quickly. Ctrl-Shift-F10 opens up a massive window for me. How can this be the same as a one-line window displaying whatever it is we're talking about?</p>",
        "id": 161901376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553721545
    },
    {
        "content": "<p>Oh -- the type signature of what is under the cursor? Could we make it display in the same panel as the \"Problems / Output / Debug Console / Terminal\" panel?</p>",
        "id": 161901677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553721791
    },
    {
        "content": "<p>I don't see a way to add a new panel at the bottom with the extension API (see e.g. <a href=\"https://code.visualstudio.com/api/extension-capabilities/extending-workbench\" target=\"_blank\" title=\"https://code.visualstudio.com/api/extension-capabilities/extending-workbench\">this page</a>) (though I may be missing something). It might be possible to do something like what you want by creating a fake error that follows the cursor around but that feels dirty.</p>",
        "id": 161903058,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1553723027
    },
    {
        "content": "<p>I agree that this minibuffer or similar would be really useful for all programming languages instead of hover. I often get in to tooltip hell with Lean. I want to be able to 'pin' tooltip hovers and output window state.</p>",
        "id": 161942305,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553771750
    },
    {
        "content": "<p>Another possibility might be to dump the information to the output pane.</p>",
        "id": 161942374,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1553771803
    },
    {
        "content": "<p>I think the only way to get a one-line display at the bottom of the screen is to <a href=\"https://github.com/leanprover/vscode-lean/blob/863ca13750869d05c293ec312f9ec4b34a3c635a/src/statusbar.ts#L12\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/863ca13750869d05c293ec312f9ec4b34a3c635a/src/statusbar.ts#L12\">add a status bar item</a>, like the vim extension does:<br>\n<a href=\"/user_uploads/3121/TtNzlH31sGB7IfwwETjsIGe-/vscode_statusbar.png\" target=\"_blank\" title=\"vscode_statusbar.png\">vscode_statusbar.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TtNzlH31sGB7IfwwETjsIGe-/vscode_statusbar.png\" target=\"_blank\" title=\"vscode_statusbar.png\"><img src=\"/user_uploads/3121/TtNzlH31sGB7IfwwETjsIGe-/vscode_statusbar.png\"></a></div>",
        "id": 161943044,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1553772473
    },
    {
        "content": "<p>I'm unsure if this has been proposed before, but it would be wonderful if lean-vscode were to support some more advanced features present in editor plugins like Emacs' <code>agda-mode</code>. For example, Case Split which when executed in a sort-of equation compiler context automatically makes cases for each constructor of the selected value. E.g. <code>def foo (n: nat): nat</code> -&gt; case split on <code>n</code> in vscode -&gt;</p>\n<div class=\"codehilite\"><pre><span></span>def foo (n: nat): nat\n| zero := _\n| (succ n) := _\n</pre></div>\n\n\n<p>Would something like this go in lean-vscode or the Lean server? Or perhaps it already exists and I somehow missed it?</p>",
        "id": 162176036,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554040850
    },
    {
        "content": "<p>Seems in Agda it's handled 99% by the server, the editor extension only forwards commands.</p>",
        "id": 162176364,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554041381
    },
    {
        "content": "<p>Snippets might provide a first approximation to what you want. For example when I type <code>split</code> and then play some ctrl-space dance I get Lean to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">sorry</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 162178264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554044224
    },
    {
        "content": "<p>I think someone would need to write a \"hole command\" tactic (in lean) for this. I'm not sure how to do this exactly, others may know more.</p>",
        "id": 162178667,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1554044880
    },
    {
        "content": "<p>Indeed, but not so much when there's 30 constructors with different arguments each :|</p>",
        "id": 162178713,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554044918
    },
    {
        "content": "<p>I see -- you want one thing to deal with every inductive type.</p>",
        "id": 162178723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554044947
    },
    {
        "content": "<p>There is a hole command to do this, but it appears not to have made it into the hole command doc file. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/basic.lean#L774\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/basic.lean#L774\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/basic.lean#L774</a></p>",
        "id": 162178812,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1554045081
    },
    {
        "content": "<p>Cool! For future reference, one types:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Then with the cursor inside the hole <code>{! ... !}</code>, hit Ctrl+. (or Cmd+. on macOS) to open the \"Quick Fix\" menu (or click on the light bulb that appears). If you select \"Generate a list of equations for a recursive definition.\" then the above is transformed to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"bp\">â„•</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Is there a way to assign a keyboard shortcut to a particular hole command?</p>",
        "id": 162180383,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1554047483
    },
    {
        "content": "<p>This is almost perfect! Now if only there was a way to specify which argument to split on - for example in <code>nat -&gt; nat -&gt; nat</code> it seems to always just split on the first (and I can't always write a nested match statement since it breaks unification)</p>",
        "id": 162180740,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554048108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> apparently these are currently <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/holes.ts#L87\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/holes.ts#L87\">implemented as code actions</a>, where the arguments to the Lean server command are contextual on the position in the file etc. Key-bound commands, on the other hand, seem to be <a href=\"https://github.com/leanprover/vscode-lean/blob/3ad49464b54cc1df06fe24f0ffc213e55a7c4af2/package.json#L162\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/3ad49464b54cc1df06fe24f0ffc213e55a7c4af2/package.json#L162\">unaware of the context</a>. But i'm sure there is some way to pass the context there - <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ? :)</p>",
        "id": 162181135,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554048708
    },
    {
        "content": "<p>Hmm, it might be possible by passing args to <a href=\"https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions\" target=\"_blank\" title=\"https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions\"><code>editor.action.codeAction</code></a> but I haven't figured out what this would look like for the hole commands...</p>",
        "id": 162181435,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1554049147
    },
    {
        "content": "<p>I've just <a href=\"https://github.com/leanprover/vscode-lean/pull/118\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/118\">PR'd</a> a status bar item that displays the type information for the term under the cursor. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 162211597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1554098258
    },
    {
        "content": "<p>Wow! That's a marvelous April Fools day joke!</p>",
        "id": 162211727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554098435
    },
    {
        "content": "<p>Merci!</p>",
        "id": 162211730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554098448
    },
    {
        "content": "<p><a href=\"https://devblogs.microsoft.com/visualstudio/live-share-now-included-with-visual-studio-2019/\" target=\"_blank\" title=\"https://devblogs.microsoft.com/visualstudio/live-share-now-included-with-visual-studio-2019/\">https://devblogs.microsoft.com/visualstudio/live-share-now-included-with-visual-studio-2019/</a><br>\nCollaborative editing in VScode</p>",
        "id": 162367112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554233982
    },
    {
        "content": "<p>Anyone want to try this out?</p>",
        "id": 162378821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554243264
    },
    {
        "content": "<p><a href=\"https://prod.liveshare.vsengsaas.visualstudio.com/join?922C14F0F9FCDAA4DB4629450DEA18E91EA1\" target=\"_blank\" title=\"https://prod.liveshare.vsengsaas.visualstudio.com/join?922C14F0F9FCDAA4DB4629450DEA18E91EA1\">https://prod.liveshare.vsengsaas.visualstudio.com/join?922C14F0F9FCDAA4DB4629450DEA18E91EA1</a></p>",
        "id": 162378862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554243317
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0dtafSW2pAFBnsEeuQONWKB7/vscode.png\" target=\"_blank\" title=\"vscode.png\">vscode.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0dtafSW2pAFBnsEeuQONWKB7/vscode.png\" target=\"_blank\" title=\"vscode.png\"><img src=\"/user_uploads/3121/0dtafSW2pAFBnsEeuQONWKB7/vscode.png\"></a></div>",
        "id": 162379329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554243727
    },
    {
        "content": "<p>Scott and I are \"collaborating\" in the sense that we're both writing comments in the same mathlib file</p>",
        "id": 162379352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554243755
    },
    {
        "content": "<p>Kevin and I have been experimenting a bit. I think the advice is to install the \"Live Share Extension Pack\", as it gives you chat, and (non-working?) audio.</p>",
        "id": 162379935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554244291
    },
    {
        "content": "<p>so we can both edit a Lean file</p>",
        "id": 162380644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554244950
    },
    {
        "content": "<p>and we're using Scott's machine which is fast</p>",
        "id": 162380658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554244962
    },
    {
        "content": "<p>and even though it's on the opposite side of the world from me there seems to be no lag</p>",
        "id": 162380666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554244975
    },
    {
        "content": "<p>Something seems to be wrong with hole commands... If you have <code>{!})</code> then executing a hole command eats the final delimiter. (Doesn't have to be <code>)</code>. It can be anything.)</p>",
        "id": 163989003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025596
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"bp\">!</span><span class=\"o\">})</span>\n</pre></div>\n\n\n<p>Now use <code>library_search</code> or whatever to fill the hole.</p>",
        "id": 163989163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025689
    },
    {
        "content": "<p>I didn't know you could do a hole with only one exclamation mark.  Typically it's <code>{! !}</code>.</p>",
        "id": 163990092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1556026317
    },
    {
        "content": "<p>I noticed that the <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> already appeared after typing <code>{!}</code>.</p>",
        "id": 163990303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026449
    },
    {
        "content": "<p>I see, so with the official <code>{! !}</code> there is no problem.</p>",
        "id": 163990351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026509
    },
    {
        "content": "<p>However, that requires me to type more... )-;</p>",
        "id": 163990364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026528
    },
    {
        "content": "<p>Let me stress that this is a low priority bug report <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 163990376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026549
    },
    {
        "content": "<p>ha ha I only ever use {! } -- I used it from the moment I noticed it worked.</p>",
        "id": 163990460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026611
    },
    {
        "content": "<p>in Emacs I just bound <code>C-c C-SPC</code> to insert a hole template (so that afterwards <code>C-c SPC</code> opens the hole command menu) :^)</p>",
        "id": 163994585,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1556029668
    },
    {
        "content": "<p>my usage of french quotes also skyrocketed after setting those to <code>C-c C-f</code></p>",
        "id": 163994763,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1556029802
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/QYthyuq6LnIzwoTbNDUctjuq/2019-06-10.png\" target=\"_blank\" title=\"2019-06-10.png\">colouration_bug.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QYthyuq6LnIzwoTbNDUctjuq/2019-06-10.png\" target=\"_blank\" title=\"colouration_bug.png\"><img src=\"/user_uploads/3121/QYthyuq6LnIzwoTbNDUctjuq/2019-06-10.png\"></a></div>",
        "id": 167727022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560131992
    },
    {
        "content": "<p>the part in the red rectangle is coloured in yellow</p>",
        "id": 167727074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560132010
    },
    {
        "content": "<p>but it should be just white</p>",
        "id": 167727075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560132013
    },
    {
        "content": "<p>Yeah, the syntax highlighting in the tactic state is not very sophisticated at the moment.</p>\n<p><a href=\"https://github.com/leanprover/vscode-lean/pull/122\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/122\">PR</a> (merged in 0.14.2)</p>",
        "id": 167727249,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560132343
    },
    {
        "content": "<p>Is it just me or did the red underlines become orange? It's an interesting change if so</p>",
        "id": 169624015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562221538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  It might be because of this change in VS Code: <a href=\"https://code.visualstudio.com/updates/v1_36#_updated-warning-colors\" target=\"_blank\" title=\"https://code.visualstudio.com/updates/v1_36#_updated-warning-colors\">https://code.visualstudio.com/updates/v1_36#_updated-warning-colors</a></p>",
        "id": 169628626,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1562227659
    },
    {
        "content": "<p>For me real errors are still red, and sorries are orange</p>",
        "id": 169639833,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1562239189
    },
    {
        "content": "<p>The ctrl+space list doesn't process french quotes, leading to invalid results.</p>",
        "id": 170671565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562878408
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/om0qJlsBMnyF3wU8n7wGEUf1/2019-07-12-3.png\" target=\"_blank\" title=\"2019-07-12-3.png\"></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/om0qJlsBMnyF3wU8n7wGEUf1/2019-07-12-3.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/3121/om0qJlsBMnyF3wU8n7wGEUf1/2019-07-12-3.png\"></a></div>",
        "id": 170671665,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562878470
    },
    {
        "content": "<p>what's invalid about it?</p>",
        "id": 170671772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562878558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>unexpected token</code> and <code>invalid expression, unexpected token</code></p>",
        "id": 170672589,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562879174
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">Â«Ã¤Ã¤Ã¤Ã¤Ã¤Â»</span><span class=\"bp\">.</span><span class=\"n\">bbbbb</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">Ã¤Ã¤Ã¤Ã¤Ã¤</span><span class=\"bp\">.</span><span class=\"n\">bbbbb</span>\n</pre></div>",
        "id": 170672613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562879208
    },
    {
        "content": "<p>The list of completions comes directly from the Lean server, so I think this would have to be addressed by a patch to the C++ code somewhere.</p>",
        "id": 170673684,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1562880005
    },
    {
        "content": "<p>when I press <code>tab</code> it focuses on another window instead of adding 2 spaces; what should I do to fix that?</p>",
        "id": 182623740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575515470
    },
    {
        "content": "<p>there is a line on the status bar that says \"TAB moves focus\", click on it</p>",
        "id": 182623806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575515537
    },
    {
        "content": "<p>oh thanks</p>",
        "id": 182623906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575515707
    },
    {
        "content": "<p>hidden in plain sight</p>",
        "id": 182623907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575515714
    },
    {
        "content": "<p>when I double click on a word to highlight it, the neighbouring angle brackets are also highlighted; how do I tell VSCode that angle brackets are not words?</p>",
        "id": 184294594,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577413498
    },
    {
        "content": "<p><code>editor.wordSeparators</code></p>",
        "id": 184294667,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1577413671
    },
    {
        "content": "<p>thanks</p>",
        "id": 184294973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577414283
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/g-JjhcdPFIA-yv11vEVCi1O4/2019-12-31-3.png\" target=\"_blank\" title=\"/user_uploads/3121/g-JjhcdPFIA-yv11vEVCi1O4/2019-12-31-3.png\"><img src=\"/user_uploads/3121/g-JjhcdPFIA-yv11vEVCi1O4/2019-12-31-3.png\"></a></div>",
        "id": 184536977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577788925
    },
    {
        "content": "<p>the angle brackets strike back</p>",
        "id": 184536984,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577788932
    },
    {
        "content": "<p>is this one governed by a different system?</p>",
        "id": 184536985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577788939
    },
    {
        "content": "<p>(this is the suggestions that come up before you press ctrl+space, which suggests completions solely based on what appeared in the current file)</p>",
        "id": 184536989,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577788956
    },
    {
        "content": "<p>This comes from the vscode language settings for deciding what is a word character</p>",
        "id": 184537051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789059
    },
    {
        "content": "<p><a href=\"https://code.visualstudio.com/api/language-extensions/language-configuration-guide#word-pattern\" target=\"_blank\" title=\"https://code.visualstudio.com/api/language-extensions/language-configuration-guide#word-pattern\">https://code.visualstudio.com/api/language-extensions/language-configuration-guide#word-pattern</a></p>",
        "id": 184537079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789123
    },
    {
        "content": "<p>All the bracketing characters seem to be correctly marked as brackets in <a href=\"https://github.com/leanprover/vscode-lean/blob/master/language-configuration.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/language-configuration.json\">https://github.com/leanprover/vscode-lean/blob/master/language-configuration.json</a> but there is a comment about the <code>wordPattern</code> saying that it is set in code to work around an issue</p>",
        "id": 184537194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789279
    },
    {
        "content": "<p>that has since been fixed</p>",
        "id": 184537244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789304
    },
    {
        "content": "<p>so what should I do?</p>",
        "id": 184537336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789409
    },
    {
        "content": "<p>Here is the relevant regex: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/extension.ts#L88\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/extension.ts#L88\">https://github.com/leanprover/vscode-lean/blob/master/src/extension.ts#L88</a></p>",
        "id": 184537344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789420
    },
    {
        "content": "<p>it's an exclusion list, and it doesn't exclude everything it should</p>",
        "id": 184537359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789442
    },
    {
        "content": "<p>lean has a definition of what constitutes a valid word character and it includes several unicode ranges but I think most things are not word characters</p>",
        "id": 184537381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789483
    },
    {
        "content": "<p>so there's nothing I can do?</p>",
        "id": 184537382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789485
    },
    {
        "content": "<p>you can PR to vscode-lean</p>",
        "id": 184537385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789493
    },
    {
        "content": "<p>it's a bug in the syntax/language definition</p>",
        "id": 184537433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789524
    },
    {
        "content": "<p>done</p>",
        "id": 184537504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789656
    },
    {
        "content": "<p>did you test it?</p>",
        "id": 184537514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789697
    },
    {
        "content": "<p>if you downloaded the repo you should be able to hit f5 to start the extension</p>",
        "id": 184537531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789725
    },
    {
        "content": "<p>I'm not sure how to test it</p>",
        "id": 184537599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789835
    },
    {
        "content": "<p>the word list comes from the words that are present in the file. If you open logic.basic or something you are bound to find a word followed by a close angle bracket</p>",
        "id": 184537659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577789951
    },
    {
        "content": "<p>as in, I don't know how to modify the file locally</p>",
        "id": 184537667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789976
    },
    {
        "content": "<p>because I'm unable to locate the file</p>",
        "id": 184537670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577789981
    },
    {
        "content": "<p>didn't you just modify the file?</p>",
        "id": 184537675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790000
    },
    {
        "content": "<p><code>src/extension.ts</code></p>",
        "id": 184537717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790011
    },
    {
        "content": "<p>but I edited it online and I don't know where is the file that my vscode is using</p>",
        "id": 184537722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577790030
    },
    {
        "content": "<p>if you get the repo and open it in vscode and hit f5, it will compile and run the extension in a new session</p>",
        "id": 184537896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790275
    },
    {
        "content": "<p>it won't affect your current instance</p>",
        "id": 184537908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790295
    },
    {
        "content": "<p>If you want to fix your current instance, you can copy the repo folder (after building it) into <code>~/.vscode/extensions</code></p>",
        "id": 184537937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790353
    },
    {
        "content": "<p>ah, <code>~/.vscode/extensions</code></p>",
        "id": 184537990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577790388
    },
    {
        "content": "<p>that's the info I needed</p>",
        "id": 184537992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577790395
    },
    {
        "content": "<p>but assuming the vscode-lean maintainers are around, if the fix works eventually it will make it into the official version and you can just update the official way</p>",
        "id": 184537999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790411
    },
    {
        "content": "<p>would there be any issue if I modify <code>~/.vscode/extensions</code> directly?</p>",
        "id": 184538014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577790435
    },
    {
        "content": "<p>you know how if I modify mathlib I need to recompile everything</p>",
        "id": 184538020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577790447
    },
    {
        "content": "<p>You may need to uninstall vscode-lean first</p>",
        "id": 184538022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790450
    },
    {
        "content": "<p>but lean and mathlib are unaffected</p>",
        "id": 184538026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790464
    },
    {
        "content": "<p>vscode-lean doesn't handle any of that, it just calls a thing on your machine called \"lean\"</p>",
        "id": 184538072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577790496
    },
    {
        "content": "<p>Does anyone have a good idea how to render the markdown part of a .lean file on the fly in vscode, so that it would be more like editing a math document that has code in it and less like a file with two programming languages? It might have to be rendered into a side pane. Related: I'm assuming the markdown we use either already can or soon could support latex or mathjax or something, depending on the downstream processing we're targeting. I didn't find any latex in mathlib however.</p>",
        "id": 187053960,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580441011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ?</p>",
        "id": 187054014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580441075
    },
    {
        "content": "<p>I'm happy to get on the learning curve of the plugin and pitch in, if I can.</p>",
        "id": 187054070,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580441171
    },
    {
        "content": "<p>I think it's possible, though it would be a big project. You might look into how VS Code's Python extension displays Jupyter notebooks, since that also mixes markdown and code.</p>",
        "id": 187055122,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580443095
    },
    {
        "content": "<blockquote>\n<p>Related: I'm assuming the markdown we use either already can or soon could support latex or mathjax or something, depending on the downstream processing we're targeting. I didn't find any latex in mathlib however.</p>\n</blockquote>\n<p>There was a bit of discussion some time ago about latex in the <a href=\"https://leanprover-community.github.io/mathlib_docs/\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/\">docs</a>. I think the conclusion was that doing something basic with mathjax would be easy enough, but \"real\" support would be a lot harder. Not planning to do it myself soon, but I'd be happy to see it added.</p>",
        "id": 187070930,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580465777
    },
    {
        "content": "<p>Adding latex to declaration doc strings is slightly harder, because those are also displayed in VSCode tooltips, so you'd want to process it there too.</p>",
        "id": 187071029,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580465894
    },
    {
        "content": "<p>How are the docs generated from the mathlib source? From my preliminary investigation there would three customers consuming the markdown comments: the generation of the browsable docs, the fancy pane I'm proposing, and the hover panes. For now I'm assuming 1 and 2 can be brought into alignment by using the same third party support for some subset of LaTeX. But the hover panes look like they use a hardcoded more limited subset of markdown and wouldn't get to participate for now, so they'd show the raw LaTeX.</p>\n<p>VSCode's own built-in markdown support (which kicks in if you edit a file ending with .md) looks like just the experience I'd love to replicate: <a href=\"https://code.visualstudio.com/docs/languages/markdown\" target=\"_blank\" title=\"https://code.visualstudio.com/docs/languages/markdown\">https://code.visualstudio.com/docs/languages/markdown</a>.</p>\n<p>Last remark for now: another tack that probably requires Lean dev time is to imitate literate Agda and have a whole other file extension like .llean with two els, which would in fact <em>be</em> a markdown document, with lean code in triple-backticked lean blocks like we use here on zulip. We'd then create an extention to markdown to render the lean, and we'd extend lean to ignore everything outside the lean blocks: <a href=\"https://agda.readthedocs.io/en/v2.5.3/tools/literate-programming.html\" target=\"_blank\" title=\"https://agda.readthedocs.io/en/v2.5.3/tools/literate-programming.html\">https://agda.readthedocs.io/en/v2.5.3/tools/literate-programming.html</a></p>",
        "id": 187087078,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580480264
    },
    {
        "content": "<blockquote>\n<p>How are the docs generated from the mathlib source?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/doc-gen\" target=\"_blank\" title=\"https://github.com/leanprover-community/doc-gen\">https://github.com/leanprover-community/doc-gen</a><br>\nA metaprogram imports all of mathlib and builds a json file with doc strings, type info, line numbers, module doc strings, etc. Then this gets fed into a Python script that builds the HTML, including processing the markdown.</p>\n<p>I have no idea how much control the VSCode extension gives us over the hover panes.</p>",
        "id": 187090236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580482498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> VSCode's extension API isn't too flexible with regards to the hover panes. Basically we have to implement a <a href=\"https://code.visualstudio.com/api/references/vscode-api#HoverProvider\" target=\"_blank\" title=\"https://code.visualstudio.com/api/references/vscode-api#HoverProvider\">\"HoverProvider\"</a> which returns \"Hover\" objects. These contain <a href=\"https://code.visualstudio.com/api/references/vscode-api#MarkdownString\" target=\"_blank\" title=\"https://code.visualstudio.com/api/references/vscode-api#MarkdownString\">\"MarkdownString\"</a>s which VS Code then processes with its own markdown interpreter. (You can see what vscode-lean currently does <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/hover.ts\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/hover.ts\">here</a>). Nonetheless, it does seem to be possible to put LaTeX inside the hover windows: see <a href=\"https://github.com/James-Yu/LaTeX-Workshop/wiki/Hover#previewing-equations\" target=\"_blank\" title=\"https://github.com/James-Yu/LaTeX-Workshop/wiki/Hover#previewing-equations\">these screenshots</a> from the \"LaTeX-Workshop\" extension wiki. </p>\n<p><span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> It seems like what you want is a kind of \"rich text\" editor, where a single editor window would display both chunks of rendered markdown as well as bits of (interactively interpreted) Lean code. Leaving aside the details of any future \"Literate Lean\" format, let me expand on my comment from last night. I believe you could implement this in a VS Code extension but since VS Code doesn't currently let us customize the editor UI to that extent, you would have to write your own editor in a web view. I haven't dug too deep into vscode-python's Jupyter notebook support, but I am pretty sure that is what they do (probably using <a href=\"https://github.com/microsoft/monaco-editor\" target=\"_blank\" title=\"https://github.com/microsoft/monaco-editor\">monaco</a> in their webview). It looks like VS Code is in the process of adding <a href=\"https://github.com/microsoft/vscode/issues/77131\" target=\"_blank\" title=\"https://github.com/microsoft/vscode/issues/77131\">a custom editor API</a> which would help such custom editors better integrate into VS Code (e.g. saving and undoing); note that this won't help with the \"front-end\" work that would need to be done.</p>\n<p>If you just want to be able to preview the markdown in module / docstring comments in Lean files while editing them in the usual editor, that would be a lot easier. There are two features that seem much easier to me (though I won't have time to tackle them in the near future):</p>\n<ul>\n<li>The hover provider could detect whether the user is hovering over a module / docstring comment and then pop up a hover window with that comment rendered in markdown</li>\n<li>When the cursor is placed inside a comment, the infoview window could render that comment in markdown</li>\n</ul>\n<p>Note that there's also a fourth consumer of the comments here: <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\">https://observablehq.com/@bryangingechen/github-lean-doc-preview</a> (though I'm not sure how widely used this is). Possibly some of the comment parsing code there would be useful for the extension features I just described? Though for performance it would probably make more sense to edit Lean so that the Lean server tells us whether a certain position is inside a comment.</p>",
        "id": 187103261,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580490967
    },
    {
        "content": "<blockquote>\n<p>Note that there's also a fourth consumer of the comments here: <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\">https://observablehq.com/@bryangingechen/github-lean-doc-preview</a> (though I'm not sure how widely used this is).</p>\n</blockquote>\n<p>Just to mention that I use it to check all of my PRs, and that I find it extremely useful. Thanks a lot for this!</p>",
        "id": 187106414,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580493264
    },
    {
        "content": "<blockquote>\n<p>Nonetheless, it does seem to be possible to put LaTeX inside the hover windows</p>\n</blockquote>\n<p>OMG, this is a <a href=\"https://github.com/James-Yu/LaTeX-Workshop/blob/87ff751b22956d3940ad54307c6f153be572ec54/src/providers/preview/mathpreview.ts#L189-L195\" target=\"_blank\" title=\"https://github.com/James-Yu/LaTeX-Workshop/blob/87ff751b22956d3940ad54307c6f153be572ec54/src/providers/preview/mathpreview.ts#L189-L195\">gorgeous hack</a>!  They render latex into an svg image, and then include a link to the generated image (where the url is a data url that includes a base64 encoding of the image).  So, we could of course do exactly the same thing in vscode-lean.</p>",
        "id": 187113104,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1580497553
    },
    {
        "content": "<blockquote>\n<p>It seems like what you want is a kind of \"rich text\" editor, where a single editor window would display both chunks of rendered markdown as well as bits of (interactively interpreted) Lean code.</p>\n</blockquote>\n<p>The pony is to have a perfectly typeset document with interactive code blocks, with all the affordances of the code editor like following definitions and search and whatnot. That's too ambitious and in fact exceeds most LaTeX environments people use. And I wouldn't want to do it with VSCode as it basically supersedes the entire UI paradigm of VSCode so it's a new app.</p>\n<p>And I don't think I want to hover over the docstring and only then see the rendered version in some ephemeral floating window. I think I want it to be the way I do LaTeX. Two panes: left pane is raw source (mix of lean and docstrings) and the right pane is a read-only fully rendered version. I'm not sure, I should go try to make it and see if it's helpful!</p>\n<p>Secondarily, when docstrings do appear in hovers, we could render LaTeX in them, maybe using the trick you showed which <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> likes!</p>",
        "id": 187131293,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580510815
    },
    {
        "content": "<blockquote>\n<p>The pony is to have a perfectly typeset document with interactive code blocks</p>\n</blockquote>\n<p>But ObservableHQ comes really close to this from another direction. It has the rich document, but the lean code blocks are islands and can't be navigated between (I assume). And it's not backed by a single text file on my computer, it's some other document format, so it is probably more like the PDF of this story.</p>",
        "id": 187132098,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580511471
    },
    {
        "content": "<blockquote>\n<p>Two panes: left pane is raw source (mix of lean and docstrings) and the right pane is a read-only fully rendered version.</p>\n</blockquote>\n<p>OK, I think I see. Do you want the Lean code in the right pane to be interactive in some way as well? What do you have in mind for the current \"info view\" panel that displays stuff like tactic state?</p>\n<blockquote>\n<p>[ObservableHQ] has the rich document, but the lean code blocks are islands and can't be navigated between (I assume).</p>\n</blockquote>\n<p>The Observable Lean editor currently does support splitting a Lean file into multiple editor cells, and I think adding something like inter-editor navigation via keyboard shortcuts or clicking on buttons would definitely be doable.</p>\n<blockquote>\n<p>[An ObservableHQ notebook is] not backed by a single text file on my computer, it's some other document format</p>\n</blockquote>\n<p>ObservableHQ documents are backed by (internal, undocumented) JSON source files which are then compiled to Javascript modules that can then be <a href=\"https://github.com/observablehq/runtime\" target=\"_blank\" title=\"https://github.com/observablehq/runtime\">run</a> in an HTML document. These compiled modules can be downloaded from the notebook editor on <a href=\"http://observablehq.com\" target=\"_blank\" title=\"http://observablehq.com\">observablehq.com</a>. It's then not too hard to <a href=\"https://observablehq.com/@observablehq/downloading-and-embedding-notebooks\" target=\"_blank\" title=\"https://observablehq.com/@observablehq/downloading-and-embedding-notebooks\">embed notebooks to run on other webpages</a>; you can even host them in <a href=\"https://bl.ocks.org/bryangingechen/raw/f0965bd04e04e1e7f36d184634446d64/\" target=\"_blank\" title=\"https://bl.ocks.org/bryangingechen/raw/f0965bd04e04e1e7f36d184634446d64/\">github gists</a>. However, running them \"offline\" does require starting a local web server (due to browser security restrictions). [At the moment ObservableHQ.com's compiler is not open source, but there is an \"unofficial\" version <a href=\"https://github.com/asg017/unofficial-observablehq-compiler\" target=\"_blank\" title=\"https://github.com/asg017/unofficial-observablehq-compiler\">here</a> (full disclosure: I have contributed some code to this project, though I am not the primary maintainer).]</p>",
        "id": 187135762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580514924
    },
    {
        "content": "<p>Yeah the observable format looks to be some reasonable fixed format using standard languages, and easy to download out of the system, which is very cool. I will definitely try using it as a delivery vehicle for whatever geometry formalization I come up with. Having a converter between .lean and such a notebook would reduce the friction considerably.</p>\n<p>Speaking of converters I looked more at the VSCode extension APIs and I'm still a little confused on what is the best approach, but all approaches will require a Lean to markdown converter which knows how to parse the comments and docstrings, and wraps the code in triple-backticks. Once we had that, we would either dynamically create a webview in lean and imitate their markdown plugin to populate it and keep its scrolling in sync, OR perhaps we could handoff the markdown directly to that extension somehow like with their virtual document system.</p>",
        "id": 187177683,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580593197
    },
    {
        "content": "<p>Or just use <a href=\"https://github.com/leanprover-community/doc-gen\" target=\"_blank\" title=\"https://github.com/leanprover-community/doc-gen\">https://github.com/leanprover-community/doc-gen</a> to convert to HTML and put it in the webview, and make whatever enhancements we need to that repo so it's all shared in one place, with no markdown intermediary.</p>",
        "id": 187178056,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580593976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Here's a PR for the doc-gen: <a href=\"https://github.com/leanprover-community/doc-gen/pull/9\" target=\"_blank\" title=\"https://github.com/leanprover-community/doc-gen/pull/9\">https://github.com/leanprover-community/doc-gen/pull/9</a>. All it changes is to add the MathJax incantation in the header, plus one change to its settings to allow <code>$..$</code> delimiters since these are off by default. I ran doc-gen locally and confirmed that I could simply add math to a doc string and it was passed through into json_export.txt and then the html.</p>",
        "id": 187230041,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580696744
    },
    {
        "content": "<p>I'm thinking the easiest change to make to the VSCode extension is to add a command that opens your browser to the right URL under <a href=\"https://leanprover-community.github.io/mathlib_docs/\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> if you're looking at a mathlib file. It raises questions like whether that's the same version as the one you have locally which I have not answered yet. But it seems easier than doing an on the fly HTML conversion of the lean, since both doc-gen and format_lean need to talk to lean in some nontrivial way that I'm not yet sure I could replicate from within the plugin.</p>",
        "id": 187230134,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580696969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> thanks for the PR! I'm happy to merge it, with the one concern I just commented on: I think <code>$..$</code> is off by default because it leads to lots of false positives when mixed with regular text. \"Subscriptions cost $10-$15 / mo\" and all that. Pretty sure Zulip uses <code>$$..$$</code> which I'll test here: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> ?</p>",
        "id": 187247855,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580724353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Otoh, everyone is pretty used to <code>$ foo $</code>, and I don't think we'll actually hit many false positives.</p>",
        "id": 187247942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580724422
    },
    {
        "content": "<p>We can always print regular <code>$</code>-signs by escaping them.</p>",
        "id": 187247952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580724437
    },
    {
        "content": "<p>Can we check if there are \"regular text $\" occuring in mathlib right now? I doubt it.</p>",
        "id": 187248053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580724535
    },
    {
        "content": "<p>The only occurrence I can see is <code> `foo $ bar $ baz 10` </code></p>",
        "id": 187248076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1580724558
    },
    {
        "content": "<p><code>$</code> is used in code as well. How well does MathJax avoids code blocks? If it inserts itself in <code>f $ g $ h x</code> it's a non-starter.</p>",
        "id": 187248082,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580724563
    },
    {
        "content": "<p>People are used to <code>$$..$$</code> from Zulip too.</p>",
        "id": 187248171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580724641
    },
    {
        "content": "<blockquote>\n<p><code>$</code> is used in code as well. How well does MathJax avoids code blocks? If it inserts itself in <code>f $ g $ h x</code> it's a non-starter.</p>\n</blockquote>\n<p>I completely agree with that.</p>",
        "id": 187248209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580724718
    },
    {
        "content": "<p>To echo some of the discussion from github: I just updated the PR so that we do indeed process single and double dollar signs, which is good since it's what people will expect. I added some configuration to prevent MathJax from processing a few additional css classes Rob is using to structure the presentation of Lean. And MathJax avoids pre and code tags, so together these should prevent Lean's own dollar signs from interfering.</p>",
        "id": 187268136,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580741262
    },
    {
        "content": "<p>Here are some points to MathJax info for those, like me, who have never heavily used it but who may be, like me, concerned about its differences from real LaTeX:</p>",
        "id": 187268435,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580741436
    },
    {
        "content": "<p>It supports macros, which I didn't know: <a href=\"http://docs.mathjax.org/en/latest/input/tex/macros.html\" target=\"_blank\" title=\"http://docs.mathjax.org/en/latest/input/tex/macros.html\">http://docs.mathjax.org/en/latest/input/tex/macros.html</a><br>\nIt supports the ams package's symbols: <a href=\"http://docs.mathjax.org/en/latest/input/tex/extensions/ams.html\" target=\"_blank\" title=\"http://docs.mathjax.org/en/latest/input/tex/extensions/ams.html\">http://docs.mathjax.org/en/latest/input/tex/extensions/ams.html</a><br>\nIt supports amscd commutative diagrams: <a href=\"http://docs.mathjax.org/en/latest/input/tex/extensions/amsCd.html\" target=\"_blank\" title=\"http://docs.mathjax.org/en/latest/input/tex/extensions/amsCd.html\">http://docs.mathjax.org/en/latest/input/tex/extensions/amsCd.html</a></p>",
        "id": 187268773,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580741665
    },
    {
        "content": "<p>This is merged, so feel free to start using it in your doc strings! Remember it won't show up in VSCode tooltips at the moment, just in the generated docs.</p>",
        "id": 187269360,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580742036
    },
    {
        "content": "<p>Thanks very much <span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> !</p>",
        "id": 187269426,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580742091
    },
    {
        "content": "<blockquote>\n<p>Note that there's also a fourth consumer of the comments here: <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\">https://observablehq.com/@bryangingechen/github-lean-doc-preview</a> (though I'm not sure how widely used this is). </p>\n</blockquote>\n<p>Now that mathjax is activated on mathlib doc, would it also be possible to activate it there to have as close to possible outputs, or is it too complicated in the observable framework?</p>",
        "id": 187345213,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580811243
    },
    {
        "content": "<p>I think it's possible. I will try to find time to add it.</p>",
        "id": 187350200,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580815514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I think I got it working. <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2F79e3130acbc1472cda2eb01ce85e644d27ae7d77%2Fsrc%2Fdata%2Fmv_polynomial.lean%22\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2F79e3130acbc1472cda2eb01ce85e644d27ae7d77%2Fsrc%2Fdata%2Fmv_polynomial.lean%22\">Here's a test</a> that looks at one of the commits from <a href=\"https://github.com/leanprover-community/mathlib/pull/1892\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1892\">Kevin's recent mv_polynomial doc PR</a>. Some of the lists are screwed up since they weren't formatted correctly with markdown bullets originally, but the included LaTeX seems to be rendered OK.</p>",
        "id": 187428922,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580884133
    },
    {
        "content": "<p>I just tried it on <a href=\"https://github.com/leanprover-community/mathlib/issues/1952\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1952\">#1952</a>, and I get a nicely formatted equation, but also a weird docstring.</p>",
        "id": 187429831,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580885407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thanks for the example! I think it's fixed now: <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview?url=%221952%22\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview?url=%221952%22\">https://observablehq.com/@bryangingechen/github-lean-doc-preview?url=%221952%22</a></p>",
        "id": 187431759,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580888136
    },
    {
        "content": "<p>Amazing, thanks a lot!</p>",
        "id": 187431914,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580888379
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/issues/154\" title=\"https://github.com/leanprover/vscode-lean/issues/154\">Issue 154: backslash does not convert when typing the provided closing bracket</a></p>\n<p>To reproduce this issue, type <code>(\\N)</code>.</p>\n<ul>\n<li>After <code>(</code>, a matching closing bracket is provided just after the text cursor.</li>\n<li>After <code>\\</code>, there is an underline denoting that conversion is to take place.</li>\n<li>After <code>N</code>, the underline is on both characters <code>\\N</code>. At this point, moving the cursor anywhere or pressing space or typing another <code>\\</code> will cause the conversion into <code>â„•</code>; however:</li>\n<li>After <code>)</code>, no conversion takes place and the underline disappears, and one is left with <code>(\\N)</code>, instead of the expected <code>(â„•)</code>.</li>\n</ul>",
        "id": 193757461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586770845
    },
    {
        "content": "<p>Press the space bar :-)</p>",
        "id": 193758038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771498
    },
    {
        "content": "<p>If we're already talking about workarounds, you can always press TAB to trigger the conversion.</p>",
        "id": 193758180,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586771650
    },
    {
        "content": "<p>oh wow I never knew that</p>",
        "id": 193758299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586771781
    },
    {
        "content": "<p>I was like, why isn't there any way to trigger the conversion without moving my damn cursor</p>",
        "id": 193758307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586771792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/VScode.20extension/near/157785947\" title=\"#narrow/stream/113488-general/topic/VScode.20extension/near/157785947\">said</a>:</p>\n<blockquote>\n<p>Is anyone else seeing broken pause / continue icons in the tactic state since the latest VS code update (1.31.0)?</p>\n</blockquote>\n<p>And this is now FIXED! This was probably the record number of releases of the VScode extension in one day, isn't it?</p>",
        "id": 196362685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588710539
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/releases\" title=\"https://github.com/leanprover/vscode-lean/releases\">https://github.com/leanprover/vscode-lean/releases</a></p>",
        "id": 196362750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588710579
    },
    {
        "content": "<p>What do people think of add shortcuts <code>\\inf</code> for <code>\\glb</code> and <code>\\sup</code> for <code>\\lub</code>?</p>",
        "id": 197269436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589287559
    },
    {
        "content": "<p>When I was learning lattices I typed <code>\\inf</code> and <code>\\sup</code> so many times!</p>",
        "id": 197269804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287746
    },
    {
        "content": "<p>I'd definitely be in favour.</p>",
        "id": 197269829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287759
    },
    {
        "content": "<p>Would there be a clash with <code>\\infty</code>? (I haven't needed to use it but perhaps those who have wouldn't like this)</p>",
        "id": 197270284,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589288004
    },
    {
        "content": "<p>and apparently <code>\\supseteq</code></p>",
        "id": 197270529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589288120
    },
    {
        "content": "<p>I don't remember the algorithm in vscode.  Would there still be a clash if you type <code>\\sups</code>, or is it that <code>\\sup</code> would no longer be an abbreviation for <code>âŠ‡</code>, or would <code>\\sup</code> simply not work?</p>",
        "id": 197271827,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589288697
    },
    {
        "content": "<p>I get this for writing initial segments of <code>\\supseteq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>\\supseteq\n ÏƒâŠ†âŠ‡âŠƒâŠƒâŠƒâŠ‡âŠ‡\n</code></pre></div>",
        "id": 197272583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589289046
    },
    {
        "content": "<p>I think <code>âŠ‡</code> must be registered as both <code>\\sup</code> and <code>\\supseteq</code> for this behavior to occur</p>",
        "id": 197272672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589289104
    }
]