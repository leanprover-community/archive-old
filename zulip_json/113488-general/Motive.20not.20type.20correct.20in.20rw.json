[
    {
        "content": "<p>I'm writing a proof in which something similar to the following situation happens over and over:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.monoidal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">large_category</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_closed</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw unop_op, --rewrite tactic failed, motive is not type correct</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">--succeeds</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Likewise, <code>simp_rw unop_op</code>, <code>simp only [unop_op]</code> also don't work. I'm not actually proving the above, but rather having many expressions like <code>(ihom (unop (op X))).map</code> or <code>(ihom.ev (unop (op X.V))).app</code> in a more complicated goal. The way I've cheesed it is to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"c1\">-- goal contains (ihom (unop (op X))).map</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"c1\">-- goal now contains (ihom X).map instead</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>This kind of thing is very tedious and inelegant, appearing more than 4 times in the same proof. Is there any way to avoid this?</p>",
        "id": 290557651,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658518955
    },
    {
        "content": "<p>You can do <code>dsimp</code> here (<code>unop_op</code> is already a <code>rfl</code> simp lemma, so <code>dsimp</code> knows about it). The problem seems to be that <code>ihom</code> has an instance argument (<code>closed</code>) that leads to these motive problems when <code>rw</code>/<code>simp</code> tries to rewrite rather than doing a sequences of <code>rfl</code> proofs.</p>",
        "id": 290558184,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658519303
    },
    {
        "content": "<p>The next level of dependent type issues is that \"equalities of functors are evil,\" I think.</p>\n<p>Simp would need to be able to generate a lemma like this to be able to navigate down into the argument to <code>map</code>, but it already has some type errors related to the motive issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">F'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"bp\">=</span> <span class=\"n\">F'.map</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">14:9: type mismatch at application</span>\n<span class=\"cm\">  F.map = F'.map</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  F'.map</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Π {X Y : C}, (X ⟶ Y) → (F'.obj X ⟶ F'.obj Y)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Π {X Y : C}, (X ⟶ Y) → (F.obj X ⟶ F.obj Y)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 290559832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658520288
    },
    {
        "content": "<p>Would <code>heq</code> be the right thing to use here or no?</p>",
        "id": 290564289,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658522384
    },
    {
        "content": "<p><code>dsimp</code> worked in all cases in my proof, thank you!</p>",
        "id": 290564892,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658522729
    },
    {
        "content": "<p>By the way, there's a <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#dsimp,%20simp\">library note</a> about the <code>dsimp, simp</code> pattern</p>",
        "id": 290565073,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658522836
    },
    {
        "content": "<p>I'd say avoid <code>heq</code> here since that's going in the direction of equality of objects. Less philosophically, it also seems like it would be difficult to apply (though not impossible).</p>",
        "id": 290565246,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658522941
    },
    {
        "content": "<p>I had read that before touching the category theory API but now it makes sense</p>",
        "id": 290565268,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658522959
    },
    {
        "content": "<p>We use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_to_hom\">docs#eq_to_hom</a> when we must talk about equality between functors, for example in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_geometry.PresheafedSpace.ext\">docs#algebraic_geometry.PresheafedSpace.ext</a>, because simp lemmas tend to work better with eq_to_hom than with heq. (A morphism between presheafed space consists of a morphism of the underlying topological spaces and a morphism of presheaves whose target depends on the morphism of spaces; a presheaf is a functor, so if the morphisms on the spaces agree then you get a non-defeq equality between functors and you have to use eq_to_hom to go between them.)</p>",
        "id": 290570380,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658526063
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.eq_to_hom\">docs#category_theory.eq_to_hom</a></p>",
        "id": 290570557,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658526187
    },
    {
        "content": "<p>I'm sure there's a better way to write it, but here's a way to use <code>eq_to_hom</code> to sort of rewrite using <code>unop_op X</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.monoidal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">large_category</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_closed</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ihom</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">category_theory.eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">ihom</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop_op</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">naturality</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290571191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658526619
    },
    {
        "content": "<p>Does <code>simpa</code> golf it?</p>",
        "id": 290575041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658529290
    },
    {
        "content": "<p>Yeah, I just didn't want to make it seem like <code>simpa</code> was doing anything to the goal.</p>",
        "id": 290575831,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658529998
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 290584628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658539748
    }
]