[
    {
        "content": "<p>On <code>flt_regular</code>, when I try <code>lean --make src/number_theory/cyclotomic/Unit_lemmas.lean</code>, half the build time is taken up by this step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">flt_regular</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">field.lean</span><span class=\"o\">:</span> <span class=\"n\">saving</span> <span class=\"n\">olean</span>\n</code></pre></div>\n<p>This is very confusing to me - why does Lean have to resave an <code>olean</code> for a file it should already have compiled? (note this is a mathlib file). What does this message mean?</p>",
        "id": 289038417,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657368810
    },
    {
        "content": "<p>Is it possible that we have bad cache? I saw <code>lean --make</code> recompile <code>algebra.order.field</code> after <code>leanproject get-cache</code>. I'm in an airport right now, so can't test.</p>",
        "id": 289039340,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657370166
    },
    {
        "content": "<p>I've seen that behavior a lot recently, I think the cache is somehow invalid for that file</p>",
        "id": 289041935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657373721
    },
    {
        "content": "<p>Maybe we need a third <code>lean --make</code> in our build script, on top of the existing two</p>",
        "id": 289042024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657373791
    },
    {
        "content": "<p>why do we run two?!</p>",
        "id": 289042548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657374404
    },
    {
        "content": "<p>Because the cache isn't always valid after the first run</p>",
        "id": 289051750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657385937
    },
    {
        "content": "<p>Why the cache can be invalid after the first run? Or we don't know the reason, just use a workaround?</p>",
        "id": 289133500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657502280
    },
    {
        "content": "<p>I've just checked: <code>src/algebra/order/field.olean</code> is an empty file.</p>",
        "id": 289141855,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657513294
    },
    {
        "content": "<p>Does CI use the same olean cache?</p>",
        "id": 289143260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657514802
    },
    {
        "content": "<p><code>lean -T100000 --make src/algebra/order/field.lean</code> generates an empty <code>olean</code>, <code>lean --make src/algebra/order/field.lean</code> generates a non-empty <code>olean</code>.</p>",
        "id": 289201435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657550950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Any ideas?</p>",
        "id": 289201479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657550972
    },
    {
        "content": "<p>Is there a <code>-T</code> vaule that succeeds?</p>",
        "id": 289204367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657551989
    },
    {
        "content": "<p><code>-T130000</code> seems to be enough</p>",
        "id": 289208161,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1657553470
    },
    {
        "content": "<p>I guess it hits the timeout somehow partway through serialization?</p>",
        "id": 289214500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657555915
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/algebra/order/field\">file#algebra/order/field</a> for reference</p>",
        "id": 289215465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657556380
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15251\">#15251</a> increases the timeout pending an actual fix</p>",
        "id": 289217374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657557279
    },
    {
        "content": "<p>The issue is with one of the class definitions: you can remove the rest of the file and still hit the timeout.</p>",
        "id": 289217398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657557294
    },
    {
        "content": "<p>Is it the one on line 35?</p>",
        "id": 289218760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657557939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> reported seeing an assertion failure there with a custom build of lean</p>",
        "id": 289218857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657557970
    },
    {
        "content": "<p>This is the full message in case it's helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">com.termux</span><span class=\"bp\">/</span><span class=\"n\">files</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">Development</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">field.lean</span><span class=\"o\">:</span> <span class=\"n\">parsing</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">35</span><span class=\"n\">LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">com.termux</span><span class=\"bp\">/</span><span class=\"n\">files</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">Development</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">local_context_adapter.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">59</span>\n<span class=\"n\">Task</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">com.termux</span><span class=\"bp\">/</span><span class=\"n\">files</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">Development</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">field.lean</span><span class=\"o\">:</span>\n<span class=\"n\">parsing</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">35</span>\n<span class=\"bp\">!</span><span class=\"n\">has_regular_local</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"n\">ontinue</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"n\">bort</span><span class=\"bp\">/</span><span class=\"n\">exit</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"n\">top</span><span class=\"bp\">/</span><span class=\"n\">trap</span>\n</code></pre></div>",
        "id": 289218901,
        "sender_full_name": "Julian Berman",
        "timestamp": 1657557995
    },
    {
        "content": "<p>Is this a debug build of lean?</p>",
        "id": 289221884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657559412
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">linear_ordered_semifield</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">semifield</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">linear_ordered_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p><code>lean --make -T100000 test.lean</code> causes a 0 byte <code>test.olean</code> file to be produced</p>",
        "id": 289230123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657563496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.22saving.20olean.22.3F/near/289221884\">said</a>:</p>\n<blockquote>\n<p>Is this a debug build of lean?</p>\n</blockquote>\n<p>No just a regular one.</p>",
        "id": 289275332,
        "sender_full_name": "Julian Berman",
        "timestamp": 1657596744
    },
    {
        "content": "<p>How does this bug affect people not working on this file?</p>",
        "id": 289278243,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657600687
    },
    {
        "content": "<p>Does CI still work?</p>",
        "id": 289278249,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657600705
    },
    {
        "content": "<p>Whoops, I guess I caused this!</p>",
        "id": 289286215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657609412
    },
    {
        "content": "<p>Can we bump the timeout with a <code>set_option</code> command in this file somehow?</p>",
        "id": 289328538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657634673
    },
    {
        "content": "<p>Because I think right now the lean server reparses this file every time its restarted, which makes the orange bars slower to disappear</p>",
        "id": 289328604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657634708
    },
    {
        "content": "<p>Did you merge master?</p>",
        "id": 289409725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657679871
    },
    {
        "content": "<p>I mean, after <a href=\"https://github.com/leanprover-community/mathlib/pull/15251\">#15251</a></p>",
        "id": 289409777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657679898
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> I've just got an invalid cache again in <a href=\"https://github.com/leanprover-community/mathlib/pull/15490\">#15490</a> (didn't test on <code>master</code> yet). New empty file : <code>algebra.order.complete_field</code> (a leaf in the import tree). It looks like <code>topology.algebra.module.basic</code> is invalid too but it is not empty.</p>",
        "id": 290171657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658271155
    },
    {
        "content": "<p>I'll try to pack <code>npow</code>/<code>zpow</code> into a structures as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggested.</p>",
        "id": 290171703,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658271196
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , will it help if we extend <code>has_*</code> before <code>semigroup</code> etc so that Lean doesn't need to construct ad-hoc instances for axioms?</p>",
        "id": 290171814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658271273
    },
    {
        "content": "<p>Does saving oleans allocate memory? If so, does that count towards the heartbeat limit? If so, should it?</p>",
        "id": 290171858,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658271310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> may know</p>",
        "id": 290171975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658271413
    },
    {
        "content": "<p>I get an empty <code>algebra.order.field</code> olean again.</p>",
        "id": 290237379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1658325149
    },
    {
        "content": "<p>Is it worth splitting out the def to another file temporarily?</p>",
        "id": 290243684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658327798
    },
    {
        "content": "<p>That way there's less non-existent olean</p>",
        "id": 290243708,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658327813
    },
    {
        "content": "<p>This has already been mentioned by <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> above, but I get the following error on your branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">T150000</span> <span class=\"c1\">--make src/algebra/order/field.lean</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">monotone.lean</span><span class=\"o\">:</span> <span class=\"n\">strict_mono.ite'LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">local_context_adapter.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">59</span>\n<span class=\"n\">Task</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">cast</span><span class=\"bp\">/</span><span class=\"n\">defs.lean</span><span class=\"o\">:</span> <span class=\"n\">parsing</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">38</span>\n<span class=\"bp\">!</span><span class=\"n\">has_regular_local</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"n\">ontinue</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"n\">bort</span><span class=\"bp\">/</span><span class=\"n\">exit</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"n\">top</span><span class=\"bp\">/</span><span class=\"n\">trap</span>\n</code></pre></div>",
        "id": 290266584,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658337195
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L59\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L59</a>, for reference</p>",
        "id": 290266800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658337301
    },
    {
        "content": "<p>It is reproducible with <code>~/lean/bin/lean -T150000 --make src/data/int/cast/defs.lean</code> too. Running it under gdb says the call comes from <code>parser::elaborate</code> (<a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/frontends/lean/parser.cpp#L873\">https://github.com/leanprover-community/lean/blob/v3.45.0/src/frontends/lean/parser.cpp#L873</a>), and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">typed_expr</span> <span class=\"kt\">Sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.17</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">has_int_cast.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">add_group.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_with_one.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_zero.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">zero</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_zero.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">zero</span><span class=\"o\">)))</span> <span class=\"n\">a</span><span class=\"o\">))),</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_group.nsmul._default</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.11</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">nsmul_zero'</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">zero</span> <span class=\"n\">add</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nsmul_succ'</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">zero</span> <span class=\"n\">add</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_group.sub._default</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.12</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_zero'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">neg</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_sub.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_neg.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">neg</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">))),</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_group.zsmul._default</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.13</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_zero'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">neg</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">zsmul_zero'</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_zero</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">))))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">zsmul_succ'</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">zsmul_neg'</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">int.neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_neg.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">neg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">int</span> <span class=\"n\">int.has_coe</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">add_left_neg</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span> <span class=\"n\">neg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">zsmul_zero'</span> <span class=\"n\">zsmul_succ'</span> <span class=\"n\">zsmul_neg'</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.to_has_neg.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span> <span class=\"n\">neg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">zsmul_zero'</span> <span class=\"n\">zsmul_succ'</span> <span class=\"n\">zsmul_neg'</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span> <span class=\"n\">neg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">zsmul_zero'</span> <span class=\"n\">zsmul_succ'</span> <span class=\"n\">zsmul_neg'</span><span class=\"o\">)))))))),</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_monoid_with_one.nat_cast._default</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.14</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_assoc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">zero_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">add_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"bp\">#</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_zero'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">«@»</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat_cast_zero</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"control_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">nat_cast_succ</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">auto_param.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_one.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">one</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"control_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">int_cast_of_nat</span> <span class=\"o\">:</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"control_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">int_cast_neg_succ_of_nat</span> <span class=\"o\">:</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">has_neg.neg</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))))))</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"control_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">_ffresh.0</span> <span class=\"o\">:</span> <span class=\"n\">as_is</span> <span class=\"o\">(</span><span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int.cast_def</span> <span class=\"k\">in</span> <span class=\"kt\">Prop</span><span class=\"o\">))))))</span>\n</code></pre></div>",
        "id": 290267532,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658337642
    },
    {
        "content": "<p>Let me check if the same assertion failure happens on master.</p>",
        "id": 290267746,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658337745
    },
    {
        "content": "<p>Yes, it happens on master too. So this might be a red herring, who knows.</p>",
        "id": 290268560,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658338083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>, I assume this is a debug build?</p>",
        "id": 290270657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658338951
    },
    {
        "content": "<p>Which would explain why you get that error but we don't in CI</p>",
        "id": 290270681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658338962
    },
    {
        "content": "<p>how many errors do you get if you just continue all of them?</p>",
        "id": 290273055,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658339967
    },
    {
        "content": "<p>because this is just the first assertion error</p>",
        "id": 290273067,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658339973
    },
    {
        "content": "<p>Lean doesn't like that <a href=\"https://gist.github.com/collares/aff41ec149685438f54f28c9087c8efe\">a particular expression obtained when elaborating <code>add_monoid_with_one</code></a> contains the following non-<code>decl_ref</code> (whatever this is) local after the <code>replace_locals</code> call in <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L58\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L58</a> (in fact, the <code>replace_locals</code> call seems to be a no-op in this case):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Local</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_pp_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat_cast'</span><span class=\"o\">,</span> <span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat_cast'</span><span class=\"o\">,</span> <span class=\"n\">m_bi</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_strict_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_inst_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_rec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">m_type</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Macro</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_definition</span> <span class=\"bp\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">m_ptr</span> <span class=\"bp\">=</span> <span class=\"mi\">0x1841e80</span><span class=\"o\">},</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_binder</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"sc\">'ᾰ'</span><span class=\"o\">,</span> <span class=\"n\">m_type</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Constant</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">,</span> <span class=\"n\">m_levels</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">levels</span><span class=\"o\">},</span> <span class=\"n\">m_info</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_strict_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n          <span class=\"n\">m_inst_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_rec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}},</span> <span class=\"n\">m_body</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Var</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_vidx</span> <span class=\"bp\">=</span> <span class=\"mi\">13</span><span class=\"o\">}}}}</span>\n</code></pre></div>\n<p>This started happening immediately after <a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">#12182</a>.</p>",
        "id": 290275693,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658340968
    },
    {
        "content": "<p>On <code>src/data/nat/cast/defs.lean</code>, the only assertion failures are <code>!has_regular_local(e)</code> and <code>!has_regular_local(r)</code> (from <code>local_context_adapter.cpp</code>. The same errors happen in <code>src/data/int/cast/defs.lean:{40,51}</code> and <code>src/algebra/ring/basic.lean:{754,866}</code> (so basically anything that uses <code>add_monoid_with_one</code>).</p>",
        "id": 290278306,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658342001
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_nat_cast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">add_monoid_with_one</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_nat_cast</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nat_cast_zero</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">nat_cast</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290286516,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658345373
    },
    {
        "content": "<p>Coming back to the original problem: Lean seems to spend a lot of time doing equality checking in <code>expr_eq_fn.cpp</code> (perhaps because the equality cache is too small?) and throws a heartbeat exception (as is expected from the fact that it works without <code>-T150000</code>). However, tasks killed by uncaught exceptions just die silently, as can be verified by blocking the olean creation process by removing write permissions from the file.</p>",
        "id": 290318371,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658363688
    },
    {
        "content": "<p>I must be missing something, but I don't see how <code>eq_cache</code> at <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr_eq_fn.cpp#L70\">https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr_eq_fn.cpp#L70</a> works. It only seems to cache equality of exprs by identity (equal values of <code>raw()</code>), and it does not seem to save the value of the equality check after an expensive comparison. One may think that <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr.cpp#L401\">the <code>expr_cache</code></a> would cause each expr to have few copies in memory, but <code>elaborate</code> <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/frontends/lean/elaborator.cpp#L4043\">calls <code>finalize</code></a>, which <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/frontends/lean/elaborator.cpp#L3982\">flushes the expr cache</a>. </p>\n<p>When running <code>lean --make -T150000 src/algebra/order/field.lean</code>, there are 65 (!) objects with hash <code>0xfe0560ec</code>, and I assume most of them are true copies of each other. Serializing those objects <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/util/object_serializer.h#L26\">involves a lot of comparisons</a> which <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr_eq_fn.cpp#L63\">increment the heartbeat counter</a>.</p>",
        "id": 290622450,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658594728
    },
    {
        "content": "<p>Wait, I read <code>eq_cache</code> wrong before but I am now even more confused. It seems that (up to hash collisions) it caches whether <code>apply()</code> was called for two given inputs. If it does, next calls to <code>apply()</code> always return true?!</p>",
        "id": 290623360,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658595845
    },
    {
        "content": "<p>I just checked and my assumption that most of them are copies of each other was plain wrong. There are 59158 comparisons between two exprs <code>a</code> and <code>b</code> with <code>a.hash() == 0xfe0560ec</code>, <code>b.hash() == 0xfe0560ec</code> and <code>a.raw() != b.raw()</code>, and they all return false.</p>",
        "id": 290624704,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658597480
    },
    {
        "content": "<p>Some pairs of pointers are compared up to 32 times (this might be because the cache is thread-local, or just because <code>expr_eq_fn</code>'s destructor clears the cache).</p>",
        "id": 290624807,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658597605
    },
    {
        "content": "<p>A low effort way to fix this in CI would be to build with a high <code>-T</code> timeout (or no timeout) the second time around, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean --json -T100000 --make src <span class=\"p\">|</span> python3 scripts/detect_errors.py\nlean --json -T400000 --make src <span class=\"p\">|</span> python3 scripts/detect_errors.py\n</code></pre></div>",
        "id": 290624980,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658597807
    },
    {
        "content": "<p>So, to summarize: the problem here that the equality cache is flushed often because it is not meant to speed up the case of hash collisions. It might be worth checking if it's a hashing bug in the presence of <code>old_structure_cmd</code>, but it might just be an unfortunate hash collision, in which case it might be worth just waiting for Lean 4.</p>\n<p>Since this only shows up when saving oleans, I think Ben's suggestion has fantastic cost/benefit. The second command should execute only if the first one succeeds, though; the exit code is 0 even when the generated olean is empty, so the idea still works. This could be done internally by increasing the heartbeat limit during olean generation, but I don't think it's worth it.</p>",
        "id": 290626312,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658599919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> had a similar problem before, maybe it's the same problem after all.</p>",
        "id": 290626356,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658599939
    },
    {
        "content": "<p>Something that seems suspicious is that the hash collisions all happen as a result of calling <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr_eq_fn.cpp#L132\"><code>is_bi_equal</code></a>, but the hash for exprs <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr.cpp#L249\">does not take binder_info into account</a> (there's a special <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/kernel/expr.cpp#L890\"><code>hash_bi</code></a> function for computing a hash which uses this extra information). Maybe this is particularly relevant for <code>old_structure_cmd</code>, or maybe this is particularly relevant for serialization because <a href=\"https://github.com/leanprover-community/lean/blob/v3.45.0/src/library/kernel_serializer.cpp#L135\">the serializer is one of the few things that uses <code>is_bi_equal_proc</code></a>.</p>",
        "id": 290627493,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658601666
    },
    {
        "content": "<p>The obvious fix for the above would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/kernel/expr_eq_fn.cpp b/src/kernel/expr_eq_fn.cpp</span><span class=\"w\"></span>\n<span class=\"gh\">index 50c1420dd..19ec72adc 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/src/kernel/expr_eq_fn.cpp</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/src/kernel/expr_eq_fn.cpp</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -69,6 +69,8 @@ class expr_eq_fn {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        if (is_var(a))             return var_idx(a) == var_idx(b);<span class=\"w\"></span>\n<span class=\"w\"> </span>        if (m_cache.check(a, b))<span class=\"w\"></span>\n<span class=\"w\"> </span>            return true;<span class=\"w\"></span>\n<span class=\"gi\">+        if (CompareBinderInfo &amp;&amp; hash_bi(a) != hash_bi(b))</span><span class=\"w\"></span>\n<span class=\"gi\">+            return false;</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        switch (a.kind()) {<span class=\"w\"></span>\n<span class=\"w\"> </span>        case expr_kind::Var:<span class=\"w\"></span>\n<span class=\"w\"> </span>            lean_unreachable(); // LCOV_EXCL_LINE<span class=\"w\"></span>\n</code></pre></div>\n<p>but this is super slow because <code>hash_bi</code> is not cached. By the way, I noticed that binder_info was simplified in Lean 4's kernel and <code>hash_bi</code> no longer exists.</p>",
        "id": 290628425,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658603027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/.22saving.20olean.22.3F/near/290318371\">said</a>:</p>\n<blockquote>\n<p>However, tasks killed by uncaught exceptions just die silently, as can be verified by blocking the olean creation process by removing write permissions from the file.</p>\n</blockquote>\n<p>This feels like a major bug to me, but I can't track down where this is happening</p>",
        "id": 291311212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659095280
    },
    {
        "content": "<p>A quick glance at the task infrastructure suggests it is capturing and rethrowing exceptions</p>",
        "id": 291311280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659095305
    },
    {
        "content": "<blockquote>\n<p>but it might just be an unfortunate hash collision, in which case it might be worth just waiting for Lean 4.</p>\n</blockquote>\n<p>My undergraduates are getting orange bar hell and I'm not sure they want to wait for Lean 4, their internships finish next month. Can we implement Ben's solution or are there reasons against doing so? In particular are we still bug hunting?</p>",
        "id": 291311449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659095457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>: Do you think a <code>scope_max_heartbeat scope(0);</code> in <code>expr_serializer::write_core</code> would help here?</p>",
        "id": 291312021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659095884
    },
    {
        "content": "<p>With the hope that that would disable deterministic timeouts from ever occurring during writing oleans.</p>",
        "id": 291312043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659095906
    },
    {
        "content": "<p>I think implementing Ben's suggestion would be great!</p>",
        "id": 291312805,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659096458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> That sounds reasonable, but I don't have any experience with this code so it's hard for me to tell.</p>",
        "id": 291313038,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659096626
    },
    {
        "content": "<p>I created an issue to track the assertion failure, <a href=\"https://github.com/leanprover-community/lean/issues/748\">https://github.com/leanprover-community/lean/issues/748</a></p>",
        "id": 291313391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659096866
    },
    {
        "content": "<p>Thank you! I now think that the assertion failure is either unrelated or has the same root cause (BinderInfo-unaware hash being used somewhere that cares about BinderInfo). I will file this other issue so it can be referenced with Ben's workaround.</p>",
        "id": 291313773,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659097136
    },
    {
        "content": "<p>An issue about the silent write permission failure is also worth filing</p>",
        "id": 291313985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659097309
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/leanprover-community/lean/pull/749\">lean#749</a> and <a href=\"https://github.com/leanprover-community/lean/pull/750\">lean#750</a></p>",
        "id": 291316288,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659098882
    },
    {
        "content": "<p>I had a brief go at debugging, but for some reason I can't get gdb (via VScode) to actually use the pretty printers, so it's pretty much impossible</p>",
        "id": 291316668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659099136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113488-general/topic/.22saving.20olean.22.3F/near/290275693\">said</a>:</p>\n<blockquote>\n<p>Lean doesn't like that <a href=\"https://gist.github.com/collares/aff41ec149685438f54f28c9087c8efe\">a particular expression obtained when elaborating <code>add_monoid_with_one</code></a> contains the following non-<code>decl_ref</code> (whatever this is) local after the <code>replace_locals</code> call in <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L58\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/local_context_adapter.cpp#L58</a> (in fact, the <code>replace_locals</code> call seems to be a no-op in this case):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Local</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_pp_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat_cast'</span><span class=\"o\">,</span> <span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat_cast'</span><span class=\"o\">,</span> <span class=\"n\">m_bi</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_strict_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_inst_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_rec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">m_type</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Macro</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_definition</span> <span class=\"bp\">=</span> <span class=\"o\">{</span>\n      <span class=\"n\">m_ptr</span> <span class=\"bp\">=</span> <span class=\"mi\">0x1841f00</span><span class=\"o\">},</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_binder</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"sc\">'ᾰ'</span><span class=\"o\">,</span> <span class=\"n\">m_type</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Constant</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_name</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">,</span> <span class=\"n\">m_levels</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">levels</span><span class=\"o\">},</span> <span class=\"n\">m_info</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_strict_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n          <span class=\"n\">m_inst_implicit</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m_rec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}},</span> <span class=\"n\">m_body</span> <span class=\"bp\">=</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">[</span><span class=\"n\">Var</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m_vidx</span> <span class=\"bp\">=</span> <span class=\"mi\">13</span><span class=\"o\">}}}}</span>\n</code></pre></div>\n<p>This started happening immediately after <a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">#12182</a>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> gdb works here and the above message has some pretty-printed output (it's for <code>data/nat/cast/defs.lean</code>, though). Let me know if I can provide any relevant information!</p>",
        "id": 291347465,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659111537
    },
    {
        "content": "<p>(Is it worth splitting the assertion discussion into another thread?)</p>",
        "id": 291347627,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659111606
    },
    {
        "content": "<p>See my comment on the issue, I worked out a workaround in the end. I think the vscode/gdb integration is to blame.</p>\n<p>The assertion fails due to an occurrence of <code>nat_cast</code> in <code>r</code>, after substituting an empty list of assigned local variables</p>",
        "id": 291347714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659111655
    },
    {
        "content": "<p>I suppose it's possible the assertion is just nonsense</p>",
        "id": 291347806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659111699
    },
    {
        "content": "<p>we seem to be no closer to a fix to this issue, so I propose the following stopgap: <a href=\"https://github.com/leanprover-community/mathlib/pull/15783\">#15783</a>. It moves the definitions away from the rest of the file, so that at least we get a lot less olean to recompile.</p>",
        "id": 291513403,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659302775
    },
    {
        "content": "<p>I can submit a PR with Ben's workaround (increase the timeout on the second lean run to 400000) if no one's opposed. This does not increase the effective timeout because the first time will error out, but due to the \"olean generation errors are not reported\" this should allow oleans to be created.</p>",
        "id": 291516810,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659307714
    },
    {
        "content": "<p>I think it's worth submitting the PR and running with it. Maybe even a no-time-limit second run</p>",
        "id": 291517035,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659308159
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a></p>",
        "id": 291517356,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659308604
    },
    {
        "content": "<p>no-timeout is bad, that will cause silly stuff to ddos our servers</p>",
        "id": 291517429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308739
    },
    {
        "content": "<p>OK, will re-add the longer timeout</p>",
        "id": 291517472,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659308771
    },
    {
        "content": "<p>how could we be DDoSed? shouldn't the first run stop it?</p>",
        "id": 291517548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659308910
    },
    {
        "content": "<p>Silly stuff can already ddos our servers by changing the timeout anyway</p>",
        "id": 291517553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659308924
    },
    {
        "content": "<p>usually people don't change the timeout deliberately though</p>",
        "id": 291517560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308942
    },
    {
        "content": "<p>I guess you mean accidental ddos-ing</p>",
        "id": 291517563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659308948
    },
    {
        "content": "<p>like someone finds a new and interesting way to make the lean kernel compute the ackermann function</p>",
        "id": 291517568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659308975
    },
    {
        "content": "<p>If olean generation starts consuming a lot more heartbeats, I guess it's good to be informed of it</p>",
        "id": 291517569,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659308994
    },
    {
        "content": "<p>Because then we can add fix <a href=\"https://github.com/leanprover-community/lean/pull/749\">lean#749</a> properly by adding a second hash</p>",
        "id": 291517624,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659309020
    },
    {
        "content": "<p>Perhaps we should test going back to the previous 100000 timeout for the first run. Is there any easy way to tell CI to generate everything from scratch, other than touching an important file or switching to a new Lean version?</p>",
        "id": 291517653,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659309114
    },
    {
        "content": "<p>Hmm, the generated olean is still empty, even though running locally with the same timeout generates a valid olean</p>",
        "id": 291517902,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659309501
    },
    {
        "content": "<p>Ah, never mind, I think my post-commit hook cached a bad olean locally. The remote olean is fine.</p>",
        "id": 291518249,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659310179
    },
    {
        "content": "<p>I posted this in <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a>, but perhaps I should have posted it here instead: I compiled eae7a80 from scratch with -T100000 to see if the temporary increase of <a href=\"https://github.com/leanprover-community/mathlib/pull/15251\">#15251</a> can be reverted. Turns out it can't, because src/number_theory/cyclotomic/primitive_roots.lean:134 (<code>embeddings_equiv_primitive_roots</code>) times out.</p>",
        "id": 291638823,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659391059
    },
    {
        "content": "<p>I'll try fix that</p>",
        "id": 291640137,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659391833
    },
    {
        "content": "<p>okay, so the main issue is the <code>simps</code></p>",
        "id": 291651328,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659400543
    },
    {
        "content": "<p>I restated the one useful direction</p>",
        "id": 291651335,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659400551
    },
    {
        "content": "<p>and the other ends is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root.embeddings_equiv_primitive_roots_symm_apply_apply\">docs#is_primitive_root.embeddings_equiv_primitive_roots_symm_apply_apply</a>  which is not a pleasing lemma</p>",
        "id": 291651381,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659400565
    },
    {
        "content": "<p>and I think that if you need something like this you should be unfolding yourself up to <code>power_basis.lift</code> (which can't be done in a nice lemma as it takes some humongous proof term that's basically inlined)</p>",
        "id": 291651395,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659400602
    },
    {
        "content": "<p>so I will  just leave it be</p>",
        "id": 291651411,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659400626
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 291652915,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659402288
    },
    {
        "content": "<p>current status: <a href=\"https://github.com/leanprover-community/mathlib/pull/15783\">#15783</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a> are two different proposals to help with this problem (both fairly small and easy to understand), and <a href=\"https://github.com/leanprover-community/mathlib/pull/15804\">#15804</a> is a speedup that would help with <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a>.</p>",
        "id": 292563239,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660045701
    },
    {
        "content": "<p>I think merging one or both of these and dealing with the further issues later would be prudent</p>",
        "id": 292563255,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660045720
    },
    {
        "content": "<p>this problem has now spread to <a href=\"https://tqft.net/mathlib/algebra/order/complete_field\">file#algebra/order/complete_field</a> <a href=\"/user_uploads/3121/yEjOlFLumvavloEQNgja0rvq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yEjOlFLumvavloEQNgja0rvq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yEjOlFLumvavloEQNgja0rvq/image.png\"></a></div>",
        "id": 294279856,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660919979
    },
    {
        "content": "<p>This happened a while ago right? It's still causing problems for my students.</p>",
        "id": 294407551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660983541
    },
    {
        "content": "<p>Once again, it's a file I touched <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 294407738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660983642
    },
    {
        "content": "<p>Can confirm this is still causing problems for me, on a mathlib from yesterday</p>",
        "id": 296240470,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1661905713
    },
    {
        "content": "<p>I still think <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a> is an acceptable stopgap, but if people disagree I can prototype adding a second hash for exprs</p>",
        "id": 296241042,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1661906244
    },
    {
        "content": "<p>I missed this discussion until now but the issue seems serious and <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a> was simple, so I've put it on the queue. If the caches are being polluted with bad / empty oleans that's definitely something that should be addressed with urgency, IMO.</p>",
        "id": 296247456,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1661911931
    },
    {
        "content": "<p>I tested whether we now can decrease the timeout for the first run back to 100000 (which is fine for oleans, since the second run uses <code>-T400000</code> and takes care of them). Eric fixed a timeout a few weeks ago, but recently <code>category_theory/monad/basic.lean:138</code> started timing out too (<a href=\"https://github.com/leanprover-community/mathlib/runs/8142625879?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/8142625879?check_suite_focus=true</a>). That's this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">monad_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_nat_trans</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_nat_trans</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f.app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">g.app</span> <span class=\"n\">X</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The profiler says that \"elaboration of monad.category took 13.1s\".</p>",
        "id": 296685772,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662060477
    },
    {
        "content": "<p>Feel free to use <a href=\"https://github.com/leanprover-community/mathlib/tree/decrease-timeout\">branch#decrease-timeout</a> to test this, since its olean cache only contains files generated with <code>-T100000</code>. <code>category_theory/limits/cones.lean:713</code> (<code>def cocone_equivalence_op_cone_op : cocone F ≌ (cone F.op)ᵒᵖ</code>) also times out, by the way.</p>",
        "id": 296687385,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662061087
    },
    {
        "content": "<p>Annoyingly, those deterministic timeouts aren't deterministic. Rerunning lean on <code>category_theory/monad/basic.lean</code> succeeds, even with <code>-T100000</code>.</p>",
        "id": 296693801,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662063766
    },
    {
        "content": "<p>By the way, could there be some correlation between the timeout increase (originally done in <a href=\"https://github.com/leanprover-community/mathlib/pull/15251\">#15251</a> to work around the olean issue) and the Freiburg runner failures? Increased memory demands, say.</p>",
        "id": 296694084,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662063889
    },
    {
        "content": "<p>This should be fast enough (3.93s locally):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">monad_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_nat_trans</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_nat_trans</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f.app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">g.app</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">f.1.naturality_assoc</span><span class=\"o\">,</span> <span class=\"n\">g.1.naturality</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">id_comp</span><span class=\"o\">},</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">comp_id</span><span class=\"o\">},</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">assoc</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>However <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cocone_equivalence_op_cone_op/src\">src#category_theory.limits.cocone_equivalence_op_cone_op</a> is now also timing out.</p>",
        "id": 296706103,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662069331
    },
    {
        "content": "<p>Thanks! I created <a href=\"https://github.com/leanprover-community/mathlib/pull/16356\">#16356</a> to track going back to a <code>-T100000</code> timeout.</p>",
        "id": 296861484,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662138570
    },
    {
        "content": "<p>Looks like it builds now! I've merged master, let's see if linting and tests succeed too.</p>",
        "id": 296897833,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662154028
    },
    {
        "content": "<p>The issue comes back: I'm getting empty algebra/order/field/defs.olean and algebra/order/ring/basic.olean at commit bd87106843 in <a href=\"https://github.com/leanprover-community/mathlib/pull/17401\">#17401</a>.</p>",
        "id": 308509350,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667875541
    }
]