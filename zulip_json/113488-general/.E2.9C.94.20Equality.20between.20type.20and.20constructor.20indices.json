[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> has marked this topic as resolved.</p>",
        "id": 270570935,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643903660
    },
    {
        "content": "<p>Another common approach is to reformulate the type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">ys</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">ys</span>\n</code></pre></div>\n<p>This way the unification problems stay within the fragment for which unification is complete (constructors and variables).</p>",
        "id": 270690871,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643968326
    }
]