[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> suggested in the context of refactoring cyclotomic fields (Eric, correct me if I get this wrong) that I use <code>pnat</code> instead of <code>nat</code>in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char.primitive_zmod_char\">docs#add_char.primitive_zmod_char</a> (and by extension also in the definitions and results that precede it). However, a large part of the API for <code>zmod n</code> requires <code>[fact (0 &lt; n)]</code>, and it is a bit of a hassle to always generate this instance manually.</p>\n<p>My proposed solution is to include</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">n.fact_pos</span>\n</code></pre></div>\n<p>at a suitable place (most likely, <code>data.pnat.basic</code>), so that these instances will be generated automatically. With this, changing the <code>n : nat</code> arguments to <code>n : pnat</code> is essentially painless. (With one exception: in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char.primitive_char_finite_field\">docs#add_char.primitive_char_finite_field</a>, I have to turn <code>p</code> (which is known to be a prime number) into a <code>pnat</code> to feed it to the code on characters on <code>zmod n</code>.)</p>\n<p>If there are no objections, then I'll include that in <a href=\"https://github.com/leanprover-community/mathlib/pull/16016\">#16016</a>. Comments are appreciated!</p>",
        "id": 293293368,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660406937
    },
    {
        "content": "<p>I wonder if we should swap these fact instances to <code>ne_zero</code> instead, as fact is slow (there's a library note about it). The correct instance is already there in that case.</p>",
        "id": 293296696,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660408964
    },
    {
        "content": "<p>You could also just make fact_pos an instance in general.</p>",
        "id": 293296741,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660408992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/.60pnat.60.20vs.20.60.5Bfact.20.280.20.3C.20n.29.5D.60/near/293296741\">said</a>:</p>\n<blockquote>\n<p>You could also just make fact_pos an instance in general.</p>\n</blockquote>\n<p>That's probably the simplest way to do it.</p>",
        "id": 293297010,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660409140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/.60pnat.60.20vs.20.60.5Bfact.20.280.20.3C.20n.29.5D.60/near/293296696\">said</a>:</p>\n<blockquote>\n<p>I wonder if we should swap these fact instances to <code>ne_zero</code> instead, as fact is slow (there's a library note about it). The correct instance is already there in that case.</p>\n</blockquote>\n<p>I assume this would require quite some effort, so I don't think I will be able to do that. But it sounds reasonable to me.</p>",
        "id": 293297205,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660409260
    },
    {
        "content": "<p>Simplest is probably <code>local attribute [instance] pnat.fact_pos</code></p>",
        "id": 293299979,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660410843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/.60pnat.60.20vs.20.60.5Bfact.20.280.20.3C.20n.29.5D.60/near/293297205\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/.60pnat.60.20vs.20.60.5Bfact.20.280.20.3C.20n.29.5D.60/near/293296696\">said</a>:</p>\n<blockquote>\n<p>I wonder if we should swap these fact instances to <code>ne_zero</code> instead, as fact is slow (there's a library note about it). The correct instance is already there in that case.</p>\n</blockquote>\n<p>I assume this would require quite some effort, so I don't think I will be able to do that. But it sounds reasonable to me.</p>\n</blockquote>\n<p>I'm away from a computer this weekend; but I'll try to do this on monday/Tues</p>",
        "id": 293300192,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660410978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/.60pnat.60.20vs.20.60.5Bfact.20.280.20.3C.20n.29.5D.60/near/293299979\">said</a>:</p>\n<blockquote>\n<p>Simplest is probably <code>local attribute [instance] pnat.fact_pos</code></p>\n</blockquote>\n<p>Of course, I can do that locally to deal with the need for this instance in <code>add_character.lean</code>. The question is whether it would make sense to have this available globally as well.</p>",
        "id": 293311563,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660416653
    },
    {
        "content": "<p>My point is that there's no need to make a separate declaration like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">n.fact_pos</span>\n</code></pre></div>\n<p>and if <code>fact</code> is slow, we'd only like it to be an instance where we need it, or otherwise go with the <code>ne_zero</code> solution.</p>",
        "id": 293338633,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660446098
    },
    {
        "content": "<p>I've been trying the refactor as I said, and I find that inevitably I'll have to make instances like fact(prime) -&gt; ne_zero, fact(1 &lt; n), and such... will these slow down the TC of ne_zero a lot? I was really hoping it'd be a super-lightweight class...</p>",
        "id": 293455362,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660527945
    }
]