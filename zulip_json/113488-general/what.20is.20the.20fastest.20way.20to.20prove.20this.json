[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">,</span>\n<span class=\"n\">xp</span> <span class=\"n\">xq</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hpqt</span> <span class=\"o\">:</span> <span class=\"n\">xp</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">xq</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">xp</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">xq</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span>\n</pre></div>",
        "id": 125675713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524668947
    },
    {
        "content": "<p>Best I could do. It's not easy to keep it short.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xp</span> <span class=\"n\">xq</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hpqt</span> <span class=\"o\">:</span> <span class=\"n\">xp</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">xq</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xp</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">xq</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hm0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trans_rel_left</span>\n    <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">))),</span>\n<span class=\"k\">have</span> <span class=\"n\">hm&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hn&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"n\">hm0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span> <span class=\"n\">xq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hm&#39;</span><span class=\"o\">,</span> <span class=\"n\">hn&#39;</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hpqt</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">])</span>\n</pre></div>",
        "id": 125680907,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524676188
    },
    {
        "content": "<p>thanks</p>",
        "id": 125680964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524676218
    },
    {
        "content": "<p>What's the fastest way to prove this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">even_sum_four_squares</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125680967,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524676224
    },
    {
        "content": "<p>aha</p>",
        "id": 125680971,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524676237
    },
    {
        "content": "<p>That was horrible</p>",
        "id": 125680977,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524676249
    },
    {
        "content": "<p>I just did a bazillion cases on whether things were odd or even.</p>",
        "id": 125680996,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524676283
    },
    {
        "content": "<p>A mathematician would say that clearly two of a,b,c have the same parity</p>",
        "id": 125684665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680773
    },
    {
        "content": "<p>so let w and x be those two</p>",
        "id": 125684677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680781
    },
    {
        "content": "<p>I would like to prove it in Lean with some kind of WLOG</p>",
        "id": 125684692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680829
    },
    {
        "content": "<p>\"wlog a and b have the same parity\"</p>",
        "id": 125684696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680841
    },
    {
        "content": "<p>because I can switch c with either a or b if necessary</p>",
        "id": 125684699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680856
    },
    {
        "content": "<p>So here the symmetry is three-fold.</p>",
        "id": 125684705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680875
    },
    {
        "content": "<p>The question is invariant under any permutation of the set {a,b,c}</p>",
        "id": 125684749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680887
    },
    {
        "content": "<p>and I know two of those elements must be congruent mod 2</p>",
        "id": 125684753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680897
    },
    {
        "content": "<p>so WLOG they're a and b</p>",
        "id": 125684754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524680902
    },
    {
        "content": "<p>Very difficult to say nicely in lean</p>",
        "id": 125684855,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524681035
    },
    {
        "content": "<p>This was my proof</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">modeq_zero_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">dvd_mul_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">even_add_even</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">even_add_even</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span> <span class=\"n\">even_add_even</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n        <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">even_add_even</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n        <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">odd_add_odd</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">),</span>\n        <span class=\"n\">odd_add_odd</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span> <span class=\"n\">even_add_even</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n        <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">even_add_even</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span> <span class=\"n\">odd_add_odd</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n        <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">odd_add_odd</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span> <span class=\"n\">odd_add_odd</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"n\">modeq_add_cancel_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"k\">from</span> <span class=\"n\">odd_add_odd</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125684879,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524681073
    },
    {
        "content": "<p>It looks a bit like a sonnet</p>",
        "id": 125684938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681130
    },
    {
        "content": "<p>My WLOG observation was that, just as we have a 2-variable WLOG which says that if the question is invariant under switching the two variables and we know that some predicate must be satisfied by some arrangement of the variables (e.g. x &lt;= y), then we may assume that the predicate is satisfied by the default arrangement,</p>",
        "id": 125685035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681255
    },
    {
        "content": "<p>there is a 3-variable generalisation which says that if the question is invariant under all permutations of three variables and you can find some predicate which is true for some arrangement (e.g. \"two of these three variables get sent to the same element under a map to a type with two elements\") then WLOG it's true for the default arrangement</p>",
        "id": 125685084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681329
    },
    {
        "content": "<p>I am very interested in making Lean do things which mathematicians find trivial, painlessly, so I quite like thinking about things such as this.</p>",
        "id": 125685158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681403
    },
    {
        "content": "<p>I regard issues such as the one you brought up as a barrier to getting mathematicians to adopt automated proof checking as part of their routine</p>",
        "id": 125685188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681449
    },
    {
        "content": "<p>If you find yourself needing this kind of WLOG again I'd be interested to hear.</p>",
        "id": 125685241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681490
    },
    {
        "content": "<p>I'd happily spend some time over the summer trying to learn how to write tactics such as this. In this case it feel like it's a generalisation of Simon's WLOG</p>",
        "id": 125685282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681533
    },
    {
        "content": "<p>If you had it then the proof would be Wlog3 a %2 = b % 2, by tactic.ring (showing that permuting the variables doesn't change the assumption)</p>",
        "id": 125685390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681625
    },
    {
        "content": "<p>and then let w be a, x be b etc</p>",
        "id": 125685395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681640
    },
    {
        "content": "<p>So now we need <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> to write an n-variable WLOG tactic... (-;</p>",
        "id": 125685490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524681775
    },
    {
        "content": "<p>I think that the 2-variable WLOG is a powerful tool which genuinely does come up in practice</p>",
        "id": 125685677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682048
    },
    {
        "content": "<p>I am less convinced that the 3-variable WLOG shows up so much</p>",
        "id": 125685686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682058
    },
    {
        "content": "<p>however it sounds like a good exercise for the beginner</p>",
        "id": 125685689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682065
    },
    {
        "content": "<p>or possibly an incredibly difficult one</p>",
        "id": 125685692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682072
    },
    {
        "content": "<p>I think the n-variable one should definitely be left to Hudon ;-)</p>",
        "id": 125685739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682095
    },
    {
        "content": "<p>Interesting! In my previous prover, I had n-variable permutations in wlog but after talking to Assia, I started thinking that it was not the most useful generalization</p>",
        "id": 125685774,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682172
    },
    {
        "content": "<p>n-pairs of swaps seemed more interesting</p>",
        "id": 125685793,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682188
    },
    {
        "content": "<p>If you come up with another example where 3+ variable permutation is useful, I'll implement it</p>",
        "id": 125685855,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682224
    },
    {
        "content": "<p>I agree that one should find out what users actually need in practice before leaping into multi-variable WLOG. I can't believe I just said that phrase.</p>",
        "id": 125686172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682542
    },
    {
        "content": "<p>The reason I suggested 3-variable WLOG is that at some point I suspect that it will do my Lean understanding some good if I were to actually write a tactic, and Chris and I will be spending the summer working on Lean together (with 13 other people)</p>",
        "id": 125686237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682597
    },
    {
        "content": "<p>Are you becoming a ... pragmatist?  <em>gasp</em></p>",
        "id": 125686426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682807
    },
    {
        "content": "<p>no, I just want to learn</p>",
        "id": 125686446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682855
    },
    {
        "content": "<p>But seriously, it is certainly a fun exercise. Let me know if you have questions</p>",
        "id": 125686447,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682855
    }
]