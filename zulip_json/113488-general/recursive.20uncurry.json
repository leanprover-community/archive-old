[
    {
        "content": "<p>Given topological spaces <code>X</code>, <code>Y</code> and <code>Z</code>,  and a function <code>f : X→ Y→ Z</code>, we can say that <code>f</code> is continuous if <code>uncurry f</code> is continuous, which avoids putting a topology on <code>Y → Z</code> (yes, I know we have the compact-open topology in mathlib, but I don't want to use it here). Is there any inductive predicate magic that would generate a unified definition handling an arbitrary finite number of variables?</p>",
        "id": 201607047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592833507
    },
    {
        "content": "<p>One possible solution is to use type-classes:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"n\">α</span> <span class=\"n\">unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- if you like this</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_uncurry</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 201608844,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592834419
    },
    {
        "content": "<p>Thanks, I'll try that. Trying to continue using the instance skeleton hole command gives me a VSCode popup saying \"unknown hole command '«Instance Stub»'\". Dis this break recently?</p>",
        "id": 201610418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592835220
    },
    {
        "content": "<p>This was indeed broken for a short time and should be fixed in the current 3.16.3 version. (EDIT: even I can't remember the current Lean version.)</p>",
        "id": 201610512,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592835259
    },
    {
        "content": "<p>Ok, I'll update soon.</p>",
        "id": 201610559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592835282
    },
    {
        "content": "<p>It seems type class resolution is not smart enough for this trick:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">U</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_uncurry</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"n\">α</span> <span class=\"n\">unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- if you like this</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">w</span> <span class=\"o\">[</span><span class=\"n\">has_uncurry</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--has_uncurry.uncurry f -- fails</span>\n<span class=\"bp\">@</span><span class=\"n\">has_uncurry</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">w</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 201612236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592836109
    },
    {
        "content": "<p>Oh, removing the <code>out_param</code> fixes it</p>",
        "id": 201612414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592836188
    },
    {
        "content": "<p>The other (my preferred) option is to remove the <code>u</code> instance.</p>",
        "id": 201612643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592836284
    },
    {
        "content": "<p>If you remove the out param, then you always need to specify the type of the curried function manually.</p>",
        "id": 201612814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592836340
    },
    {
        "content": "<p>Ok. Will I regret using this trick? Or do you think this is actually a viable path?</p>",
        "id": 201612818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592836341
    },
    {
        "content": "<p>How is this a trick?  This seems like a reasonable use of type classes to me.</p>",
        "id": 201612875,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592836368
    },
    {
        "content": "<p>Great!</p>",
        "id": 201612920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592836389
    },
    {
        "content": "<p>BTW, the reason it didn't work with the <code>u</code> instance is because it then inferred a different domain:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">γ</span>\n<span class=\"bp\">@</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">unit</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">u</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 201613145,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592836494
    },
    {
        "content": "<p>It really works super nicely because it is very easy to combine with bundled functions. Now I need to find a new tiny unicode upward pointing arrow.</p>",
        "id": 201615302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592837477
    },
    {
        "content": "<p>Do we use <code>\"upleftharpoon\": \"↿\",</code> for anything?</p>",
        "id": 201615620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592837612
    },
    {
        "content": "<p>(<a href=\"https://emojipedia.org/curry-rice/\">https://emojipedia.org/curry-rice/</a>)</p>",
        "id": 201616025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592837772
    },
    {
        "content": "<p>Nice try, but tradition dictates it should be some kind of upward pointing arrow.</p>",
        "id": 201616147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592837838
    },
    {
        "content": "<p>This is really cool. Does it work for products of three things? I remember <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> running into this issue maybe a year ago?</p>",
        "id": 201616544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592838004
    },
    {
        "content": "<p>It doesn't work for products of zero things.  That extension is an advanced exercise.</p>",
        "id": 201616712,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592838064
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for Kevin:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"err\">∘</span> <span class=\"n\">uncurry</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Records a way to turn an element of `α` into a function from `β` to `γ`. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">↿</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_uncurry</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_uncurry_base</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_uncurry_induction</span> <span class=\"o\">[</span><span class=\"n\">has_uncurry</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_uncurry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"err\">↿</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"err\">↿</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">=</span>  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"err\">↿</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">=</span>  <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">):</span>  <span class=\"err\">↿</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">=</span>  <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>  <span class=\"err\">↿</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">uncurry</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201617026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592838217
    },
    {
        "content": "<p>(and no, this is not missing imports).</p>",
        "id": 201617127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592838245
    },
    {
        "content": "<p>You could use this with multilinear maps maybe</p>",
        "id": 201617137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592838250
    },
    {
        "content": "<p>Right... can we beef this up so that it doesn't just work with functions, but also suitable bundled homs?</p>",
        "id": 201617307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592838340
    },
    {
        "content": "<p>If not we can just change everything back to unbundled homs</p>",
        "id": 201617444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592838389
    },
    {
        "content": "<p>Can this be used for partial uncurrying? Showing <code>↿g (a, b, c) =  g a (b, c) </code> perhaps via type ascriptions?</p>",
        "id": 206032835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596639767
    },
    {
        "content": "<p>I'm sort of confused by the discussion that petered out on the PR, but clearly there ought to be some <code>priority</code> attributes here, right?<br>\nIf I reorder the two instances of <code>has_uncurry</code>, then Lean picks the other one. I don't think Lean makes any guarantees about which instance it picks among ones of the same priority, does it?</p>",
        "id": 211418737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601216626
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3694\">#3694</a>, since I can't see the pr link above</p>",
        "id": 211420190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601219010
    },
    {
        "content": "<p>You can add a priority if you want. I guess that if it doesn't break the couple of uses that are in mathlib then it won't break in the sphere eversion project either.</p>",
        "id": 211420485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601219450
    },
    {
        "content": "<p>I'd be happier if the priorities captured the intent of someone who knows how <code>has_uncurry</code> is intended to be used. For example, one could either lower the priority of <code>has_uncurry_base</code> or raise the priority of <code>has_uncurry_induction</code>.</p>",
        "id": 211420820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601219993
    },
    {
        "content": "<p>I'm guessing the former is more sensible than the latter, but I'm extrapolating from a small amount of data.</p>",
        "id": 211420957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601220170
    }
]