[
    {
        "content": "<p>So what are these \"modes\"? Johannes talked about <code>smt</code> mode and <code>conv</code> mode. Do mathematician end users need to know about these modes yet? I have used a <code>conv</code> tactic -- is that related to <code>conv</code> mode? My understanding of these things is still very hazy. Is there any advice for making it better other than \"look through the libraries and try to spot stuff\"?</p>",
        "id": 123188602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520006375
    },
    {
        "content": "<p>As you may have noticed, the <code>conv</code> tactic isn't really a self-contained tactic; it ends with a tactic block and you have to put other tactics in it. Inside that block, proof states look a little different and there are a different set of available tactics. That is a mode</p>",
        "id": 123189330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520007406
    },
    {
        "content": "<p>Can I hang out in <code>conv</code> mode like I hang out in what I call \"tactic mode\"? Is that the correct name for that mode? The place where I can access <code>tactic.interactive</code> stuff?</p>",
        "id": 123192054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520012012
    },
    {
        "content": "<p>Yes, in mode $m you have access to tactics from namespace <code>$m.interactive</code></p>",
        "id": 123192190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520012231
    },
    {
        "content": "<p>It doesn't make sense to enter conv mode without using <code>conv</code>, but you can e.g. enter smt mode using <code>begin [smt] ... end</code></p>",
        "id": 123192195,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520012259
    },
    {
        "content": "<p>Are we getting any closer to getting something like <code>omega</code> in <code>[smt]</code>?</p>",
        "id": 123193054,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520013756
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : 2 + 2 = 4 := begin\n  conv in (2 + 2 = 4) {\n   -- wooah I&#39;m in conv mode\n   -- there is no turnstile!\n   -- goal is\n   -- | 2 + 2 = 4\n   -- what do I do now?\n  }\nend\n</pre></div>",
        "id": 123193561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520014546
    },
    {
        "content": "<p>Yay! I can't unfold +! I can't do anything!</p>",
        "id": 123193630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520014675
    },
    {
        "content": "<p>Is it <code>init/meta/converter/interactive.lean</code> I'm supposed to be looking at? (converter not conv)</p>",
        "id": 123193847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520014939
    },
    {
        "content": "<p>Yes.</p>",
        "id": 123193876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015008
    },
    {
        "content": "<p>The idea is that the pipe shows you the current term that you rewrite.</p>",
        "id": 123193933,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015072
    },
    {
        "content": "<p>Try <code>to_lhs</code>, and you get to the left side of the equation.</p>",
        "id": 123193938,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015084
    },
    {
        "content": "<p>Almost each time I try <code>conv</code> it tells me it can't find the pattern</p>",
        "id": 123193946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015106
    },
    {
        "content": "<p>If you do <code>whnf</code>, you convert the current subterm to WHNF.</p>",
        "id": 123193952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015113
    },
    {
        "content": "<p>even if the pattern is <code>_</code></p>",
        "id": 123193955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015115
    },
    {
        "content": "<p>I feel it's pretty buggy.</p>",
        "id": 123193963,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015141
    },
    {
        "content": "<p>Usually I wish I could use it to rewrite under a lambda</p>",
        "id": 123194009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015183
    },
    {
        "content": "<p>But it very rarely succeeds</p>",
        "id": 123194014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015192
    },
    {
        "content": "<p>Isn't that exactly what it's for?</p>",
        "id": 123194016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520015196
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 123194098,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : 2 + 2 = 4 := begin\n  conv in (2 + 2) {\n    whnf,\n  },\n  conv in (4) {\n    whnf,\n  },\nend\n</pre></div>",
        "id": 123194107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520015341
    },
    {
        "content": "<p>When I leave conv mode it closes a goal of the form <code>x=x</code>?</p>",
        "id": 123194202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520015449
    },
    {
        "content": "<p>Yes, it tries reflexivity and triv.</p>",
        "id": 123194224,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015479
    },
    {
        "content": "<p>I didn't know you could enter conv mode without <code>in</code> pattern</p>",
        "id": 123194249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015511
    },
    {
        "content": "<p><code>in</code> just navigates to the specified subterm.  Otherwise you start at the top.</p>",
        "id": 123194306,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520015540
    },
    {
        "content": "<blockquote>\n<p>I didn't know you could enter conv mode without <code>in</code> pattern</p>\n</blockquote>\n<p>You learn about these things in the \"modes\" topic.</p>",
        "id": 123194358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520015606
    },
    {
        "content": "<p>What are the navigating commands inside conv mode? I see you wrote <code>to_lhs</code></p>",
        "id": 123194486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520015750
    },
    {
        "content": "<p>That <code>converter/interactive.lean</code> could have a bit more docstrings...</p>",
        "id": 123194781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520016081
    },
    {
        "content": "<p>There's also congr, which opens subgoals for all* arguments of the current term.<br>\n*Well, whatever you can reach via congruence lemmas.</p>",
        "id": 123195234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520016692
    },
    {
        "content": "<p>I don't understand what that means</p>",
        "id": 123195289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520016730
    },
    {
        "content": "<p>What is a \"goal for an argument\"?</p>",
        "id": 123195392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520016850
    },
    {
        "content": "<p>Step through this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After to_lhs, you have one goal <code>| 2+2</code>.  If you then invoke <code>congr</code> you get two goals, <code>| 2</code> for the first argument of <code>+</code>, and <code>| 1</code> for the second argument.</p>",
        "id": 123195447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520016957
    },
    {
        "content": "<p>Ok, maybe the word \"goal\" is misleading here</p>",
        "id": 123195620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520017159
    },
    {
        "content": "<p>You mean branch the navigation to navigate to all arguments, right?</p>",
        "id": 123195670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520017203
    },
    {
        "content": "<p>I guess you could say that.</p>",
        "id": 123195708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520017267
    },
    {
        "content": "<p>Under the hood each of the branches is represented as a goal in the tactic state (e.g. as 2 = ?m_1), that's where I got the notation from.</p>",
        "id": 123195725,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520017297
    },
    {
        "content": "<p>After navigating to a subterm, what can you do besides rewrite and whnf?</p>",
        "id": 123196026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520017693
    },
    {
        "content": "<p>And if I arrive using congr at two goals but I want to act only on one, how can I leave some subterm unchanged?</p>",
        "id": 123196130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520017816
    },
    {
        "content": "<p>It occurs to me that <code>norm_num</code> and <code>ring</code> should probably be available as <code>conv</code> tactics</p>",
        "id": 123196832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520018946
    },
    {
        "content": "<p>Maybe \"target\" is a better term than \"goal\" in the <code>conv</code> monad</p>",
        "id": 123196906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520019033
    },
    {
        "content": "<p>Indeed target sounds less confusing to me</p>",
        "id": 123197688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520020305
    },
    {
        "content": "<p>And ring and norm_num would probably be useful here</p>",
        "id": 123197758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520020324
    },
    {
        "content": "<p>I was going to try to figure out smt now</p>",
        "id": 123198260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520021094
    },
    {
        "content": "<p>but I just got an email from Leo via github...</p>",
        "id": 123198329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520021166
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1940#issuecomment-370014241\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1940#issuecomment-370014241\">https://github.com/leanprover/lean/issues/1940#issuecomment-370014241</a></p>",
        "id": 123198332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520021167
    },
    {
        "content": "<p>Yeah the B⃫DFL says we shouldn't use that</p>",
        "id": 123198351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520021215
    },
    {
        "content": "<p>This is really mysterious to me. I thought Leo came from the SMT world and wanted to bridge the gap between automated stuff and proofs assistants</p>",
        "id": 123198381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520021273
    },
    {
        "content": "<p>I think Leo has drawn conclusions from his experience with Z3 and SMT in general.  He believes that users are often encoding straightforward problems in very roundabout ways just because they want to fit it into the language of SMT.  This is not the best way to solve these problems.  I remember two stories that he kept telling:</p>",
        "id": 123201195,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520025745
    },
    {
        "content": "<p>1) Somebody was using Z3 to solve physics problems.  They took measurements using a camera and (I think) gave equations to Z3 that constrained the position of an object.  However they formulated them as a problem in real arithmetic, which is somewhat expensive to decide.  Inexact numeric methods would have been a better choice here.  (Ok, this story doesn't really say anything against SMT in Lean..)</p>",
        "id": 123201393,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520026024
    },
    {
        "content": "<p>(and of course the problem with these stories is that failures get blamed on the back-end, not the user's choice of encoding, I guess)</p>",
        "id": 123201475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520026095
    },
    {
        "content": "<p>2) The dependently-typed language F* uses Z3 to discharge verification conditions.  They have a wonderful paper on how to write an evaluator using e-matching.  (see <a href=\"http://hatt2016.inria.fr/program/\" target=\"_blank\" title=\"http://hatt2016.inria.fr/program/\">http://hatt2016.inria.fr/program/</a>)  Essentially, they output several megabytes of essentially first-order formulas just so that Z3 evaluates an expression like <code>simp</code> would.</p>",
        "id": 123201606,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520026294
    },
    {
        "content": "<p>This one is more my own impression: SMT solvers (and theorem provers in general) have quite a bit of heuristics built-in so that they can handle many problems.  However, just going by heuristics is often brittle.  For example, Z3 has its own tactics language to specify the global proof search strategy.  <a href=\"https://link.springer.com/chapter/10.1007/978-3-642-36675-8_2\" target=\"_blank\" title=\"https://link.springer.com/chapter/10.1007/978-3-642-36675-8_2\">https://link.springer.com/chapter/10.1007/978-3-642-36675-8_2</a>  I think Leo wants to do something like this in Lean.  That is, the automated theorem should not do any case-splits, other non-deterministic, or potentially expensive reasoning by default.  Instead the user should explicitly specify the expensive steps using tactics.  This approach could be less brittle and more performant than heuristic strategies.</p>",
        "id": 123202134,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520026952
    },
    {
        "content": "<p>This was also pretty much his answer when I asked him, \"why doesn't Lean have the SAT part of SMT?\"  He seems to have a bit of bad experience with unreliable proofs in Z3.</p>",
        "id": 123202211,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520027046
    },
    {
        "content": "<p>What about all these answers like \"smt will do that, so let's not try something else\" when Coq people asked for omega or other automatic tactics?</p>",
        "id": 123202248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520027157
    },
    {
        "content": "<p>It will do that once it's in a state where users can specify the expensive steps, I guess :)?</p>",
        "id": 123202309,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520027227
    },
    {
        "content": "<p>Either way, thank you very much for the insight <span class=\"user-mention\" data-user-email=\"gebner@gebner.org\" data-user-id=\"110043\">@Gabriel Ebner</span> .</p>",
        "id": 123202319,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520027249
    },
    {
        "content": "<p>Yes, thanks for all your explanations today</p>",
        "id": 123202374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520027308
    },
    {
        "content": "<p>I don't know what discussion happened about omega.  I think Leo wants to have omega in the long-term future, but it's not blocking anything right now and it's not scientifically interesting either.  At that point, omega will probably work in SMT mode (if it still exists).  BTW, you can lift any tactic to SMT, so you could use <code>ring</code> as omega--.</p>",
        "id": 123202390,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520027361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"di.gama@gmail.com\" data-user-id=\"110049\">@Mario Carneiro</span> said he wanted to do omega in summer, but I'm not sure what came of that.</p>",
        "id": 123202401,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520027396
    },
    {
        "content": "<p>When I'll have more time I'll try to write everything I understood about conv (from today's explanations and earlier examples) so that won't be totally lost</p>",
        "id": 123202449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520027413
    },
    {
        "content": "<p>I don't really know what omega is meant to do but it seem to help with computation. And computations are really the most inconvenient part of Lean I've seen</p>",
        "id": 123202482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520027490
    },
    {
        "content": "<p>It decides linear integer arithmetic (Presburger arithmetic), but only in one of the versions of natural numbers and integers in the Coq standard library.  (They have quite a few versions...)</p>",
        "id": 123202556,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520027616
    },
    {
        "content": "<p>Ok, it seems less crucial than ring and field (or a version for vector space that would be really awesome)</p>",
        "id": 123202694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520027809
    },
    {
        "content": "<p>Not the case when you're certifying software! :)</p>",
        "id": 123202709,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520027840
    },
    {
        "content": "<p>I see. But remember Lean is mathematics friendly (doesn't care too much about constructivism, has documentation mentioning theorem in the title and not referring to Haskell or ML at every page etc...)</p>",
        "id": 123202975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520028125
    },
    {
        "content": "<blockquote>\n<p>I see. But remember Lean is mathematics friendly (doesn't care too much about constructivism, has documentation mentioning theorem in the title and not referring to Haskell or ML at every page etc...)</p>\n</blockquote>\n<p>I think you might be confusing Jeremy and his CMU group with Leo :) That Lean is useful for mathematicians is a happy side-effect of Lean being useful for certifying software.</p>",
        "id": 123203579,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520029076
    },
    {
        "content": "<p>I believe there is a bad bug in <code>conv</code> that makes it fail with \"failed to match pattern\" if the conv tactic block fails... I never fixed it because I don't really use it</p>",
        "id": 123206234,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520033502
    },
    {
        "content": "<p>That explains everything I saw when trying <code>conv</code>! Should I open an issue then? Or it enough to <span class=\"emoji emoji-1f64f\" title=\"pray\">:pray:</span> here?</p>",
        "id": 123220123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520063436
    },
    {
        "content": "<p>Best stick to prayer. Gabriel and Sebastian are the only ones in a position to fix this if they wish, and they read this chat so consider them informed. Leo isn't going to do anything about \"misleading error messages\", so reporting it is just counterproductive these days.</p>",
        "id": 123220213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520063684
    },
    {
        "content": "<blockquote>\n<p>That explains everything I saw when trying <code>conv</code>! Should I open an issue then? Or it enough to <span class=\"emoji emoji-1f64f\" title=\"pray\">:pray:</span> here?</p>\n</blockquote>\n<p>I guess I have had the same experience with conv as Patrick -- it has failed for me in exactly the same way (but in contrast to Sebastian I, probably like Patrick, just assumed it was me that was at fault). It's nice to be aware of the bug but now I realise that one can use it in interactive mode I feel like I have a good workaround.</p>",
        "id": 123227720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520083163
    },
    {
        "content": "<p>Are error messages something that could be fixed with patches from the community? I mean maybe we could learn to fix it ourselves and just submit those changes.</p>",
        "id": 123239014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520109907
    },
    {
        "content": "<p>I just think he wants everyone to leave him alone.</p>",
        "id": 123239699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520111504
    },
    {
        "content": "<p>And my impression is that we're doing that quite well recently. I've certainly sat on a couple of minor things rather than reporting trivial bugs</p>",
        "id": 123239740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520111544
    },
    {
        "content": "<p>Of course I also assumed it was my fault, especially since I understood very little of what conv was meant to do. I agree that knowing existence of this bug should be enough to mostly avoid it. But it would still be much nicer if <span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> could fix it.</p>",
        "id": 123256892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520154155
    },
    {
        "content": "<blockquote>\n<p>Yes, it tries reflexivity and triv.</p>\n</blockquote>\n<p>[in the above quote, \"it\" refers to Lean when closing a <code>conv</code> block]</p>",
        "id": 123275496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520199893
    },
    {
        "content": "<p>Not quite</p>",
        "id": 123275497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520199897
    },
    {
        "content": "<p>It tries to close the goal when it really becomes <code>x = x</code>,  not <code>x' = x</code> with <code>x'</code> defeq <code>x</code></p>",
        "id": 123275508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520199948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">whnf</span> <span class=\"o\">},</span>\n<span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>wouldn't work without that <code>trivial</code> (or <code>refl</code>)</p>",
        "id": 123275597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520200114
    },
    {
        "content": "<blockquote>\n<p>When I'll have more time I'll try to write everything I understood about conv (from today's explanations and earlier examples) so that won't be totally lost</p>\n</blockquote>\n<p>see <a href=\"https://github.com/PatrickMassot/mathlib/blob/docs-conv/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/blob/docs-conv/docs/extras/conv.md\">https://github.com/PatrickMassot/mathlib/blob/docs-conv/docs/extras/conv.md</a></p>",
        "id": 123276612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520202435
    },
    {
        "content": "<p>I opened a WIP PR at <a href=\"https://github.com/leanprover/mathlib/pull/73\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/73\">https://github.com/leanprover/mathlib/pull/73</a> so that people can add comments in a Github review</p>",
        "id": 123276616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520202474
    },
    {
        "content": "<p>Of course I'd like <span class=\"user-mention\" data-user-email=\"gebner@gebner.org\" data-user-id=\"110043\">@Gabriel Ebner</span> to check what I wrote. But I would also like to read comments from people who don't know much about this converter mode.</p>",
        "id": 123276655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520202515
    },
    {
        "content": "<p>That looks fine to me. Somehow conv looks much easier to use now I realise I can use it interactively.</p>",
        "id": 123277695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520205002
    },
    {
        "content": "<p>Exactly: once explained, this is easy. The trap is to conclude this doesn't need documentation</p>",
        "id": 123291923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520237872
    },
    {
        "content": "<p>To be fair, the documentation is the change log was already very efficient. Without the pattern matching bug (now promoted \"well known documented bug\") it may have been enough to figure it out without Gabriel's help.</p>",
        "id": 123291970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520237938
    },
    {
        "content": "<p>Quick poll: <span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> what do you think the abbreviation <code>conv</code>stands for?</p>",
        "id": 123294559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243010
    },
    {
        "content": "<p>convolution, obviously</p>",
        "id": 123294697,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520243229
    },
    {
        "content": "<p><span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span> Please answer seriously (unless you already saw the discussion about it on Github)</p>",
        "id": 123294708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243278
    },
    {
        "content": "<p>Patrick is trying to figure out if it's conversion or converter</p>",
        "id": 123294754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243318
    },
    {
        "content": "<p>for the docs</p>",
        "id": 123294756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243320
    },
    {
        "content": "<p>Convolution always make great jokes. When I was a third student, my algebra teacher asked the audience \"do you know a commutative ring without unit?\". After some silence, someone answered: \"integrable functions on R with usual addition and the convolution product\". The algebra teacher turned slightly green and, after a few seconds, recovered and  told us: \"what about even integers?\".</p>",
        "id": 123294823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243432
    },
    {
        "content": "<p>even integers are a pathological example</p>",
        "id": 123294829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243452
    },
    {
        "content": "<p>the first one comes up in the real world</p>",
        "id": 123294833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243456
    },
    {
        "content": "<p>it works for the p-adics  too</p>",
        "id": 123294843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243487
    },
    {
        "content": "<p>I think he only wanted to emphasize why ideals are not subrings (knowing that we agreed rings have a unit)</p>",
        "id": 123294893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243546
    },
    {
        "content": "<p>I did see the Github thread already, unfortunately. I have no strong feelings in either direction.</p>",
        "id": 123294901,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520243583
    },
    {
        "content": "<p>And the teacher was <a href=\"http://www.mathematik.uni-stuttgart.de/~geckmf/\" target=\"_blank\" title=\"http://www.mathematik.uni-stuttgart.de/~geckmf/\">http://www.mathematik.uni-stuttgart.de/~geckmf/</a> I don't think he sees convolution products in the real world</p>",
        "id": 123294907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243615
    },
    {
        "content": "<p>You've missed an <em>excellent</em> bikeshedding opportunity.</p>",
        "id": 123294912,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1520243633
    },
    {
        "content": "<p>Given the choice between some tedious assertion violation or the chance to weigh in on what <code>conv</code> actually means, I'm surprised he didn't take the bait!</p>",
        "id": 123295026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520243808
    },
    {
        "content": "<p>He is a wise guy. He saw <a href=\"https://github.com/leanprover/lean/blob/d6d44a19947e2575b3fceed6d61167d258c661fb/library/init/meta/converter/conv.lean#L4\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/d6d44a19947e2575b3fceed6d61167d258c661fb/library/init/meta/converter/conv.lean#L4\">God</a> already decided.</p>",
        "id": 123295093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520243931
    },
    {
        "content": "<p>What should I do with this converter vs conversion? Follow Leo or tradition?</p>",
        "id": 123314188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520277216
    },
    {
        "content": "<p>My guess is this is a non-native speakerism</p>",
        "id": 123315696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520279464
    },
    {
        "content": "<p>I can understand that</p>",
        "id": 123315807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520279639
    },
    {
        "content": "<p>It does not tell what to do</p>",
        "id": 123315845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520279645
    },
    {
        "content": "<p>Go with tradition</p>",
        "id": 123315858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520279666
    },
    {
        "content": "<p>but put a warning that Leo can change things at any time and then the docs will be broken</p>",
        "id": 123315863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520279676
    },
    {
        "content": "<p>Writing conversion instead of converter would not break any code in the documentation</p>",
        "id": 123315896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520279731
    },
    {
        "content": "<p>The full name is used only in the name (which does not need to be explicitly imported since it's in init) and docstrings</p>",
        "id": 123315912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520279762
    },
    {
        "content": "<p>Hum, the name is also used in the infamous error message: \"find converter  failed, pattern was not found\"</p>",
        "id": 123317131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520281649
    },
    {
        "content": "<p>Now I have a sentence containing both versions (I did not dare correcting the error message)</p>",
        "id": 123317173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520281690
    },
    {
        "content": "<p>Whelp, now I remember why I didn't fix the error message. <code>conv</code> uses <code>tactic.ext_simplify_core</code>, which doesn't really allow propagating errors.</p>",
        "id": 123344153,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520331587
    },
    {
        "content": "<p>So it would be really complicated to fix?</p>",
        "id": 123344257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520331746
    },
    {
        "content": "<p>It's not trivial at least</p>",
        "id": 123344448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1520332140
    }
]