[
    {
        "content": "<p>I am solving the last level of the (Advanced Multiplication World)[https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4]</p>\n<p>This is what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">d</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">},</span>\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>With state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I was expecting to do something like <code>exact hd</code> to finish the proof, but the <code>forall</code> symbol doesn't match. What to do in this situation?</p>",
        "id": 322902911,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674418466
    },
    {
        "content": "<p><code>exact hd b</code> to feed in <code>b</code> to <code>hd</code>, or alternatively <code>exact hd _</code> to let Lean figure that it should set <code>b := b</code></p>",
        "id": 322903087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674418583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game.20Level.204/near/322903087\">said</a>:</p>\n<blockquote>\n<p><code>exact hd b</code> to feed in <code>b</code> to <code>hd</code>, or alternatively <code>exact hd _</code> to let Lean figure that it should set <code>b := b</code></p>\n</blockquote>\n<p>Oh yeah, thanks</p>",
        "id": 322903115,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1674418605
    }
]