[
    {
        "content": "<p>I'm trying to define preimages of upper sets under order homs/embeddings/isos, and it seemed to me that <code>order_hom_class</code>was the right abstraction to do this. The definition I need works, but it seems that I can't actually use it without ugly @ + _ _ _ _ .  MWE is below - is there a way around this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.upper_lower</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The preimage of an `upper_set` under an `order_hom`-like function, as an `upper_set` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">upper_set.comap</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">upper_set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">upper_set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- the sorry replaces a proof that the preimage is an upper_set</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">upper_set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">):</span>\n  <span class=\"bp\">@</span><span class=\"n\">upper_set.comap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">φ</span>  <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">upper_set.comap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">upper_set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.comap</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">t.comap</span> <span class=\"n\">φ</span>\n<span class=\"c1\">-- Won't parse t.comap φ</span>\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- α : Type u_1,</span>\n<span class=\"c1\">-- β : Type u_2,</span>\n<span class=\"c1\">-- _inst_1 : preorder α,</span>\n<span class=\"c1\">-- _inst_2 : preorder β,</span>\n<span class=\"c1\">-- t : upper_set β,</span>\n<span class=\"c1\">-- φ : α →o β</span>\n<span class=\"c1\">-- ⊢ order_hom_class (α →o β) ?m_1 β</span>\n</code></pre></div>",
        "id": 286828210,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1655750633
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_hom_class\">docs#order_hom_class</a></p>",
        "id": 286829248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655751366
    },
    {
        "content": "<p>I feel like this is the sort of problem <code>out_param</code> should solve but for some reason it seems to not...</p>",
        "id": 286829438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655751502
    },
    {
        "content": "<p>(e.g. <code>example (t : upper_set β) (φ : α →o β) (x : upper_set α) : x = t.comap φ := sorry</code> works)</p>",
        "id": 286829444,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655751506
    },
    {
        "content": "<p>if you annotate the lhs with the right type stuff should work though</p>",
        "id": 286829638,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655751624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Trouble.20with.20order_hom_class.20needing.20implicit.20parameters/near/286829638\">said</a>:</p>\n<blockquote>\n<p>if you annotate the lhs with the right type stuff should work though</p>\n</blockquote>\n<p>edit: nvm, thanks!</p>",
        "id": 286829726,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1655751683
    },
    {
        "content": "<p>you only need to do the lhs, fwiw, as <code>eq</code> requires equal types on both sides</p>",
        "id": 286830768,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655752330
    }
]