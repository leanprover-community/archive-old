[
    {
        "content": "<p>gaargh I can't find</p>\n<p><code>example (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) := sorry</code></p>\n<p>I understand it will be classical.something. I know <code>mt</code> (the other direction). I've looked in <code>logic.basic</code> but I couldn't find it (maybe I missed it). I want to find this with <code>#find</code> and not bother people here. But <code>#find (¬ _ → ¬ _) → (_ → _)</code> doesn't work for me. I want this to be easier. Help!</p>",
        "id": 147920972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542555824
    },
    {
        "content": "<p>how do you use #find? #find doesn't work for me at all..</p>",
        "id": 147921971,
        "sender_full_name": "petercommand",
        "timestamp": 1542557980
    },
    {
        "content": "<p>you have to import <code>tactic.find</code></p>",
        "id": 147922311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542558694
    },
    {
        "content": "<p>of course this is going to be in <code>logic.basic</code></p>",
        "id": 147922361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542558765
    },
    {
        "content": "<p>looks like it is <code>not_imp_not</code></p>",
        "id": 147922362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542558771
    },
    {
        "content": "<p>it's a biconditional, which is why find didn't find it the way you stated it</p>",
        "id": 147922369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542558798
    },
    {
        "content": "<p>it's not classical.something because it has a decidability assumption</p>",
        "id": 147922376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542558841
    },
    {
        "content": "<p>I didn't know whether to look in logic.basic or core. I've run into several issues like this recently. I am doing my undergraduate example sheets again, with an extra year of hindsight. Now I understand what \"should be somewhere\", so instead of proving things like this myself I try to find them. If I can guess the name then I'm in business, but my guesses failed me this time. Not knowing whether I should search for -&gt; or &lt;-&gt;, and not knowing where to look, doesn't help (I am slow at learning where things are because I can't pick stuff up as quickly as when I was younger -- I need machine assistance here ideally). </p>\n<p>None of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>give me anything. Why does the middle one fail? I have <code>logic.basic</code> imported. </p>\n<p><code>not_imp_not : ∀ {a b : Prop} [_inst_1 : decidable a], ¬a → ¬b ↔ b → a</code></p>\n<p>What is the philosophy behind calling this <code>not_imp_not</code>? </p>\n<p>I really did try before I asked. It was the decidable v classical which caught me out.</p>",
        "id": 147927996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542569915
    }
]