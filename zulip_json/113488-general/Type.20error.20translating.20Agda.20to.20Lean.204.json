[
    {
        "content": "<p>Hello. I'm trying to translate the Desc type specified in Agda to Lean. I've translated the type, but I'm hitting a type error when translating the function operating over it.</p>\n<p><a href=\"https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/model/html/Chapter4.Desc.html\">https://pages.lip6.fr/Pierre-Evariste.Dagand/stuffs/thesis-2011-phd/model/html/Chapter4.Desc.html</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">sigma</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ty</span>\n    <span class=\"kd\">universe</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span>\n    <span class=\"kd\">structure</span> <span class=\"n\">Lift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n        <span class=\"n\">lower</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n    <span class=\"n\">abbrev</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lift</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.type</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">b.type</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.type</span> <span class=\"n\">X</span> <span class=\"bp\">⊕</span> <span class=\"n\">b.type</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sigma</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"n\">X</span>\n<span class=\"kd\">end</span> <span class=\"n\">Ty</span>\n</code></pre></div>\n<p>Commenting out <code>sigma</code> and <code>pi</code>, everything is happy. Commenting out pi, shows sigma has an issue with universe levels. And commenting out sigma, shows pi has an issue with the recursion calls.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">l</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">l</span> <span class=\"bp\">?</span><span class=\"n\">u.8093</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.8093</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.8093</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">produced</span> <span class=\"n\">type</span> <span class=\"n\">incorrect</span> <span class=\"n\">term</span>\n  <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Ty.below</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lift</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">PProd.fst</span> <span class=\"n\">x.snd.fst</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">X</span> <span class=\"bp\">⊕</span> <span class=\"n\">PProd.fst</span> <span class=\"n\">x.snd.fst</span> <span class=\"n\">X</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">s</span> <span class=\"n\">X</span>\n  <span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Ty.below</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.below</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.below</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n\n<span class=\"bp\">'</span><span class=\"n\">termination_by'</span> <span class=\"n\">modifier</span> <span class=\"n\">missing</span>\n</code></pre></div>\n<p>(And again with <code>partial</code> on the abbreviation, to simplify the error.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lift</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">type._unsafe_rec</span> <span class=\"n\">a</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">type._unsafe_rec</span> <span class=\"n\">b</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">type._unsafe_rec</span> <span class=\"n\">a</span> <span class=\"n\">X</span> <span class=\"bp\">⊕</span> <span class=\"n\">type._unsafe_rec</span> <span class=\"n\">b</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">type._unsafe_rec</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">X</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n</code></pre></div>",
        "id": 262171036,
        "sender_full_name": "Sofia",
        "timestamp": 1637396659
    },
    {
        "content": "<p>Simplifying the error in the second case we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Function</span> <span class=\"n\">argument</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span>\n\n<span class=\"n\">Called</span> <span class=\"k\">with</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262171840,
        "sender_full_name": "Sofia",
        "timestamp": 1637397821
    },
    {
        "content": "<p>aside: You shouldn't use <code>abbrev</code> for definitions by pattern matching</p>",
        "id": 262172171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398311
    },
    {
        "content": "<p>at least, I don't think it works the way you want</p>",
        "id": 262172215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398341
    },
    {
        "content": "<p>I forgot the inline / reducible annotation and used that to let Lean reduce it when it needed to.</p>",
        "id": 262172237,
        "sender_full_name": "Sofia",
        "timestamp": 1637398398
    },
    {
        "content": "<p>lean will always reduce it when it needs to</p>",
        "id": 262172247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398430
    },
    {
        "content": "<p><code>def</code> is not opaque</p>",
        "id": 262172293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398449
    },
    {
        "content": "<p>To answer your actual question, you need <code>Ty.{l}</code> in the type signature of <code>type</code></p>",
        "id": 262172301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398476
    },
    {
        "content": "<p>I do know using <code>abbrev</code> or <code>@[reducible]</code> has been necessary for some of my code where just def didn't work.</p>",
        "id": 262172316,
        "sender_full_name": "Sofia",
        "timestamp": 1637398509
    },
    {
        "content": "<p>Ahuh! That is the syntax to bind it there..... Couldn't find it in docs...</p>",
        "id": 262172330,
        "sender_full_name": "Sofia",
        "timestamp": 1637398546
    },
    {
        "content": "<p>in most cases, you should be using <code>simp</code> or <code>unfold</code> or such to unfold a definition only when necessary</p>",
        "id": 262172331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398548
    },
    {
        "content": "<p>unfolding eagerly is really bad for lean, it can cause the terms to get out of control if you use it too much</p>",
        "id": 262172375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637398583
    },
    {
        "content": "<p>Noted.</p>",
        "id": 262172395,
        "sender_full_name": "Sofia",
        "timestamp": 1637398642
    },
    {
        "content": "<p>Thanks for the <code>Ty.{l}</code> detail. :)</p>",
        "id": 262172448,
        "sender_full_name": "Sofia",
        "timestamp": 1637398725
    },
    {
        "content": "<p>I'll see if I \"need\" the abbrev hack and revisit that issue. :)</p>",
        "id": 262172589,
        "sender_full_name": "Sofia",
        "timestamp": 1637398901
    }
]