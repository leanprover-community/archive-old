[
    {
        "content": "<p>I just messed around a bit. Would be really awesome if something like this could work in Lean 4.<br>\nI think that bundling/unbundling is one of the major hurdles in making ITPs scale.<br>\n(I don't pretend that the following code is either deep or meaningful.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fun_to_sig</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">sigma</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">carrier</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">the_data</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">group_inst</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">the_data</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_inv</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_inv_self</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bundler</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">†</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">bundler</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">†</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_inv</span> <span class=\"o\">(</span><span class=\"err\">†</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</pre></div>",
        "id": 191887890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585231061
    },
    {
        "content": "<p>The most complete exploration of this bundling/unbundling design space that I've seen is <a href=\"https://alhassy.github.io/next-700-module-systems/\">The Next 700 Module Systems</a>. It's implemented on top of Agda and is a little bit idiosyncratic, but it has a lot of ideas I dearly hope make their way into the mainstream soon.</p>",
        "id": 204366943,
        "sender_full_name": "Scott Olson",
        "timestamp": 1595186190
    },
    {
        "content": "<p>Looks interesting! <a href=\"https://alhassy.github.io/next-700-module-systems/papers/gpce19_a_language_feature_to_unbundle_data_at_will.pdf\">The preprint</a> quotes the bit on structures from <a href=\"https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/\">Tom Hales's \"A review of the lean theorem prover\"</a> (point 10) and says \"This is the problem we are solving.\"</p>",
        "id": 204367332,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595186846
    },
    {
        "content": "<p>It does look interesting! I'd really like to see how it works out with a non-trivial piece of mathematics (e.g. develop some of the theory of algebras over a ring).</p>",
        "id": 204379878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595209738
    }
]