[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/5263\">#5263</a>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggests the following rename:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-def dart_equiv_sigma : G.dart ≃ Σ v, G.neighbor_set v :=</span>\n<span class=\"gi\">+def dart.to_sigma : G.dart ≃ Σ v, G.neighbor_set v :=</span>\n</code></pre></div>\n<p>I think this is in keeping with some recent changes where we've been \"upgrading\" various functions to <code>*_equiv</code>s while naming them after the function rather than including <code>equiv</code>. However, I think it'd be good to get some more opinions here (and maybe we could draft something about this for our naming conventions doc?).</p>",
        "id": 219238479,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607449702
    },
    {
        "content": "<p>The main point against this I suppose is that it might not then be immediately clear from the name that the declaration actually has extra structure and that we're using a coercion.</p>",
        "id": 219243229,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607452011
    },
    {
        "content": "<p>I think it could also be confusing to have two possible names for one thing: in some cases the <code>equiv</code> is called an <code>equiv</code> and other times it's named <code>to_</code> as in the function, so whichever is decided on should be made consistent through mathlib if possible</p>",
        "id": 219244308,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607452507
    },
    {
        "content": "<p>In the context of a tactic state, the coercion is usually obvious thanks to <code>\\u=</code> arrows everywhere</p>",
        "id": 219248933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607454753
    },
    {
        "content": "<p>Naming it <code>dart.to_sigma</code> allows us to write <code>x.to_sigma</code>.</p>",
        "id": 219259976,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607460214
    },
    {
        "content": "<p>This particular equivalence only exists to establish a <code>fintype</code> that <code>@[derive fintype]</code> wasn't able to automatically handle.   I don't think it's very useful outside of that, since (bending the API a little...) <code>d.is_adj</code> is definitionally a proof that <code>d.snd</code> is an element of <code>G.neighbor_set d.fst</code>.</p>\n<p>I was thinking that this should have <code>equiv</code> in the name because the existence of the equivalence itself is what's important, where the examples in mathlib that use <code>to_</code> seem to be functions with a built-in inverse.  (Or I could inline it into the <code>fintype</code> instance to simplify the naming problem <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 219283635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1607473969
    }
]