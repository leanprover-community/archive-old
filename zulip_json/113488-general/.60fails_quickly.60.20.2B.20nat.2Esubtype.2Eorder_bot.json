[
    {
        "content": "<p>Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>This is picked up by <code>fails_quickly</code>, but is currently nolinted (the relevant instance is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.order_bot\">docs#nat.subtype.order_bot</a>). Note what's going on; Lean wants to apply this, but this needs a <code>nonempty</code> assumption, and it goes crazy trying to find it (trying some instances many times!):</p>\n<p><a href=\"/user_uploads/3121/QOx4tKGltPudJJ218caSTZyE/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QOx4tKGltPudJJ218caSTZyE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QOx4tKGltPudJJ218caSTZyE/image.png\"></a></div><p>My question is basically:</p>\n<p>a) what's going on here?<br>\nb) do we care about this case? this instance is completely false, so the error should be irrelevant, right?</p>\n<p>The whole trace is on <a href=\"https://gist.github.com/ericrbg/e92836cb38cbb6e87a7c6afa7253f902\">https://gist.github.com/ericrbg/e92836cb38cbb6e87a7c6afa7253f902</a>.</p>",
        "id": 279924234,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650716778
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.order_bot\">docs#nat.subtype.order_bot</a> loops with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_bot_nonempty\">docs#has_bot_nonempty</a>. I don't think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.order_bot\">docs#nat.subtype.order_bot</a> is a good global instance in Lean 3.</p>",
        "id": 279935502,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650733151
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/various.20type-class.20loops\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/various.20type-class.20loops</a></p>",
        "id": 279935770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650733437
    },
    {
        "content": "<p>Since Lean 4 can catch these kinds of loops, we decided to keep it like this so long as it isn't causing problems.</p>",
        "id": 279935812,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650733483
    },
    {
        "content": "<p>nice, I'm excited for the Lean4 TC resolution system. It seems to fix most gripes I have with TC resolution here :)</p>",
        "id": 279937670,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650736261
    }
]