[
    {
        "content": "<p>happy pi day!</p>",
        "id": 160773106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552564788
    },
    {
        "content": "<p><a href=\"https://www.bbc.co.uk/news/technology-47524760\" target=\"_blank\" title=\"https://www.bbc.co.uk/news/technology-47524760\">https://www.bbc.co.uk/news/technology-47524760</a></p>",
        "id": 160775662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552567318
    },
    {
        "content": "<p>But did they formally verify it? And if not, should we believe the calculations? They should be reproduced using a completely different system.</p>",
        "id": 160776633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552568056
    },
    {
        "content": "<p>They use <a href=\"https://en.wikipedia.org/wiki/Bellard%27s_formula\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Bellard%27s_formula\">https://en.wikipedia.org/wiki/Bellard%27s_formula</a> to verify digits they compute with <a href=\"https://en.wikipedia.org/wiki/Chudnovsky_algorithm\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Chudnovsky_algorithm\">https://en.wikipedia.org/wiki/Chudnovsky_algorithm</a></p>",
        "id": 160779334,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1552570077
    },
    {
        "content": "<p>Also it would appear that they are simply using Alexander Yee's pi cruncher to simply run their computation, this is its homepage: <a href=\"http://www.numberworld.org/y-cruncher/\" target=\"_blank\" title=\"http://www.numberworld.org/y-cruncher/\">http://www.numberworld.org/y-cruncher/</a></p>",
        "id": 160779596,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1552570249
    },
    {
        "content": "<blockquote>\n<p>But did they formally verify it? And if not, should we believe the calculations? They should be reproduced using a completely different system.</p>\n</blockquote>\n<p><a href=\"https://arxiv.org/abs/1709.01743\" target=\"_blank\" title=\"https://arxiv.org/abs/1709.01743\">https://arxiv.org/abs/1709.01743</a></p>",
        "id": 160779714,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1552570332
    },
    {
        "content": "<p>There's also an extra verification algorithm they employ it seems, so you can trust it about as much as you can trust the (un-verified C++) implementation of Lean that runs on un-verified hardware.</p>",
        "id": 160780155,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1552570690
    },
    {
        "content": "<p>Can we prove that pi starts with 3.14? i.e. 3.14 &lt;= pi &lt; 3.15?</p>",
        "id": 160780322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552570824
    },
    {
        "content": "<p>I think a Chinese mathematician 1000 years ago used 3•2^n-gons to estimate pi up to 7 digits?</p>",
        "id": 160780354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552570854
    },
    {
        "content": "<p>The easiest way using current mathlib, is to just use some lemma I proved about approximating e^x for x le 1, as the first n terms of the power series. I think tactics to do this stuff would be good.</p>",
        "id": 160782787,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552572260
    },
    {
        "content": "<blockquote>\n<p>Can we prove that pi starts with 3.14? i.e. 3.14 &lt;= pi &lt; 3.15?</p>\n</blockquote>\n<p>Do we have any theorem of the form \"pi is the following infinite sum\" or \"pi is the limit of the following sequence\"?</p>",
        "id": 160784579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552573393
    },
    {
        "content": "<p>Maybe today is a good day to talk about pi. We know cos(pi/2)=0 so we can probably deduce any reasonable trig assertion about pi. Now the derivative of arctan is 1/(1+x^2) and...oh dear now I want to integrate term by term to deduce the power series for arctan, and then evaluate at 1 to deduce pi/4=1-1/3+1/5-1/7+..., for which one can get some reasonable approximations to pi. But we still need derivative of a power series :-/</p>",
        "id": 160784877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552573564
    },
    {
        "content": "<p>that power series is notoriously slow to converge</p>",
        "id": 160786648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552574608
    },
    {
        "content": "<p>I'm well aware of that. Conversely it's an alternating series so it provides us with a rigorous proof that, for example, pi&gt;1-1/3+1/5-1/7+1/9-1/11 and pi&lt;1-1/3+1/5-1/7+1/9-1/11+1/13.</p>",
        "id": 160786790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574679
    },
    {
        "content": "<p>Which is more than we know currently in mathlib.</p>",
        "id": 160786890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574753
    },
    {
        "content": "<p>The 2^n-gon trick converges much more quickly and we have the trig in place, but it relies on the fact that pi = circumference over diameter, which we can't formalise yet.</p>",
        "id": 160787018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574841
    },
    {
        "content": "<p>Claim: pi &gt; 3. Proof: draw a regular hexagon and chop it into 6 triangles. Then draw a circle round the hexagon.</p>",
        "id": 160787049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574861
    },
    {
        "content": "<p>Circumference of circle &gt; circumference of hexagon = 6, diameter = 2.</p>",
        "id": 160787142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574892
    },
    {
        "content": "<p>Can we turn this idea into a mathlib proof that pi &gt; 3? If so then the polygon trick starts to kick in.</p>",
        "id": 160787175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574912
    },
    {
        "content": "<p>You'll need pi as an integral, correct?</p>",
        "id": 160787213,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1552574937
    },
    {
        "content": "<p>I don't know. We've defined pi \"in terms of trig\", and we're \"doing trig\" in some vague way above -- but it looks to me like we're somehow doing a different trig.</p>",
        "id": 160787266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552574964
    },
    {
        "content": "<p>just define it as the limit of the 3*2^n-gons</p>",
        "id": 160787281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552574971
    },
    {
        "content": "<p>I think the easiest way to prove the circumference of that limit is pi still uses Riemann sums, though.</p>",
        "id": 160787426,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1552575047
    },
    {
        "content": "<p>ha ha</p>",
        "id": 160787429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575049
    },
    {
        "content": "<p>there's a problem with the polygon approach</p>",
        "id": 160787439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575059
    },
    {
        "content": "<p>you end up defining 2pi as the limit, as n tends to infinity, of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>sin</mi><mo>(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">n\\sin(2\\pi/n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">2</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 160787480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575088
    },
    {
        "content": "<p>(that's using n-gons; using 2^n-gons just change n to 2^n)</p>",
        "id": 160787579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575130
    },
    {
        "content": "<p>OTOH if one could prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>sin</mi><mo>(</mo><mn>2</mn><mi>π</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">n\\sin(2\\pi/n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">2</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> was increasing</p>",
        "id": 160787639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575175
    },
    {
        "content": "<p>and that the derivative of sin was cos</p>",
        "id": 160787662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575190
    },
    {
        "content": "<p>then setting n=6 you get pi&gt;3</p>",
        "id": 160787683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575205
    },
    {
        "content": "<p>For lower bounds, I guess you just need to prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mi>x</mi><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sin x &lt; x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.70696em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mop\">sin</span><span class=\"mord mathit\">x</span><span class=\"mrel\">&lt;</span><span class=\"mord mathit\">x</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">&gt;</span><span class=\"mord mathrm\">0</span></span></span></span> which seems feasible</p>",
        "id": 160787715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552575232
    },
    {
        "content": "<p>aah so this is the point; we can compute sin(2 pi / (3*2^m)) as a solution to a quadratic</p>",
        "id": 160787727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575240
    },
    {
        "content": "<blockquote>\n<p>For lower bounds, I guess you just need to prove $\\sin x &lt; x$ for $x &gt; 0$ which seems feasible</p>\n</blockquote>\n<p>yeah, just draw the graph :P</p>",
        "id": 160787813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575265
    },
    {
        "content": "<p>that crazy quote bug again</p>",
        "id": 160787837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575284
    },
    {
        "content": "<p>sin(x)&lt;x should be easy by that alternating series thing</p>",
        "id": 160787879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575315
    },
    {
        "content": "<p>Maybe Chris even proved sin(x)&gt;x-x^3/3 which might even have been used to prove the current known bounds for pi, which are something like 2&lt;pi&lt;4</p>",
        "id": 160787915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575347
    },
    {
        "content": "<p>good to see that google are on 33 trillion digits and we're still working on the 0th one :-)</p>",
        "id": 160788006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575373
    },
    {
        "content": "<p>the thing is, when we get it, we'll have a <em>proof</em></p>",
        "id": 160788044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575395
    },
    {
        "content": "<p>not just some blather about cloud computing</p>",
        "id": 160788198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575413
    },
    {
        "content": "<p>It's Xena tonight, maybe we should have a pi day celebration and try to prove pi &gt; 3</p>",
        "id": 160788245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575440
    },
    {
        "content": "<p>firstly how do you define pi</p>",
        "id": 160788766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552575708
    },
    {
        "content": "<p>it's in mathlib</p>",
        "id": 160788837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575732
    },
    {
        "content": "<p>so it is defined by official decree already</p>",
        "id": 160788855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575743
    },
    {
        "content": "<p>I think they went for 22/7 but I can't remember</p>",
        "id": 160788872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575758
    },
    {
        "content": "<p>it's in mathlib?</p>",
        "id": 160788896,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552575780
    },
    {
        "content": "<p>no wait, that was something else.</p>",
        "id": 160788912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575788
    },
    {
        "content": "<p>Isn't it in mathlib??</p>",
        "id": 160788919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575793
    },
    {
        "content": "<p>yes it's there</p>",
        "id": 160788976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575841
    },
    {
        "content": "<p>It's in analysis.exponential</p>",
        "id": 160789044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575875
    },
    {
        "content": "<p><code>local notation </code>π<code> := 22 / 7</code></p>",
        "id": 160789051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575881
    },
    {
        "content": "<p>no wait</p>",
        "id": 160789065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575889
    },
    {
        "content": "<p>oh right they proved sin(pi) = 0 right</p>",
        "id": 160789077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552575901
    },
    {
        "content": "<p><code>local notation </code>π<code> := real.pi</code></p>",
        "id": 160789078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575902
    },
    {
        "content": "<p>oh</p>",
        "id": 160789091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552575906
    },
    {
        "content": "<p>what's the definition?</p>",
        "id": 160789099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552575909
    },
    {
        "content": "<p>Two times the zero of cos x between 0 and 2. I don't see why they didn't just prove exp periodic and define it as the half-period. Maybe that's hard without knowing what pi is, but it feels more natural.</p>",
        "id": 160789110,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1552575920
    },
    {
        "content": "<p>I think they were pressed for time and wanted to get it out for my birthday :-)</p>",
        "id": 160789256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552575993
    },
    {
        "content": "<p>I gave a talk yesterday to 100 people at my university interested in teaching, and told them the story of how I got pi for my birthday, and it got the biggest laugh of the talk.</p>",
        "id": 160789308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576023
    },
    {
        "content": "<p>You weren't around at that point Abhi, so you couldn't keep them in order :-)</p>",
        "id": 160789349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576042
    },
    {
        "content": "<p><code>noncomputable def pi : ℝ := 2 * classical.some exists_cos_eq_zero</code></p>",
        "id": 160789401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576080
    },
    {
        "content": "<p>holy crap, it could be twice any zero at all!</p>",
        "id": 160789468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576096
    },
    {
        "content": "<p>Maybe it's not less than 4 after all!</p>",
        "id": 160789481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576108
    },
    {
        "content": "<p>pesky axiom of choice</p>",
        "id": 160789488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exists_cos_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 160789651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576210
    },
    {
        "content": "<p>Proof uses <code>cos_one_pos</code> and <code>cos_two_neg</code> and IVT</p>",
        "id": 160789684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576238
    },
    {
        "content": "<p>so indeed currently we should be able to prove that pi is between 2 and 4</p>",
        "id": 160789710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576259
    },
    {
        "content": "<p>but for proving it's bigger than 3 it does not suffice to prove that cos(1.5) is positive, because there might be some other zero of cos in the range (1,1.5).</p>",
        "id": 160789760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576289
    },
    {
        "content": "<p>It would be good to know that cos was decreasing. That would follow from MVT perhaps, if we knew the derivative of cos was sin, but we might be a long way from that.</p>",
        "id": 160789834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576325
    },
    {
        "content": "<p>Do we know the derivative of exp is exp yet?</p>",
        "id": 160789848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552576335
    },
    {
        "content": "<p>I don't. Maybe Jeremy Avigad does (if he's specialised his derivative for basic functions).</p>",
        "id": 160790047,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1552576457
    },
    {
        "content": "<p>I think we do know cos is decreasing, or at least I saw something similar when looking through the file for <code>sin x &lt; x</code></p>",
        "id": 160790070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552576480
    },
    {
        "content": "<p><code>cos_lt_cos_of_nonneg_of_le_pi_div_two</code></p>",
        "id": 160790108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552576512
    },
    {
        "content": "<p>or actually <code>cos_lt_cos_of_nonneg_of_le_pi</code></p>",
        "id": 160790127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552576530
    },
    {
        "content": "<p>It's proved using angle addition formulas</p>",
        "id": 160790234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552576585
    },
    {
        "content": "<p>If we know that <code>sin x &lt; x</code> here is a proof sketch to show that <code>pi &gt; 3</code>:</p>\n<p>The doubling formula <code>cos(2*x) = 2*cos^2(x) - 1</code> has been formalized, so we can compute <code>cos^2(pi/4)</code> and <code>cos^2(pi/8)</code>. Now we can also compute <code>sin^2(pi/8)</code>. This turns out to be <code>1/2 - 1/sqrt(8)</code>. Now we know that <code>pi &gt; 8sin(pi/8) = 8sqrt(1/2-1/sqrt(8)) &gt; 3</code>.</p>",
        "id": 160793854,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552578588
    },
    {
        "content": "<p>nice!</p>",
        "id": 160794600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552578997
    },
    {
        "content": "<p>I can imagine this being a long annoying proof.</p>",
        "id": 160794688,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552579033
    },
    {
        "content": "<p><code>sin_bound</code> should be enough to prove <code>sin x &lt; x</code> as well</p>",
        "id": 160794709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552579045
    },
    {
        "content": "<p>I'm starting now to compute <code>sin(pi/8)</code>.</p>",
        "id": 160794817,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552579094
    },
    {
        "content": "<p>Happy pi day :-)</p>",
        "id": 160795287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579338
    },
    {
        "content": "<p>Chris this proof doesn't look too bad to me at all. I was manipulating 1+sqrt(5)/2 without too much trouble last week when we were doing some analysis example sheet question.</p>",
        "id": 160795347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579390
    },
    {
        "content": "<p>Or is there something else you're worried about?</p>",
        "id": 160795356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579402
    },
    {
        "content": "<p>How do I prove <code>(2 : ℂ) ≠ 0</code>?</p>",
        "id": 160795365,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552579406
    },
    {
        "content": "<p>These things should go in pi.lean</p>",
        "id": 160795368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579409
    },
    {
        "content": "<p><code>norm_num</code> proves 2 ne 0</p>",
        "id": 160795374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579417
    },
    {
        "content": "<p>or if it doesn't then take real parts</p>",
        "id": 160795389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579426
    },
    {
        "content": "<p>because it will definitely prove (2 : real) \\ne 0</p>",
        "id": 160795402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579436
    },
    {
        "content": "<p><code>two_ne_zero'</code></p>",
        "id": 160795413,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552579438
    },
    {
        "content": "<p>rofl</p>",
        "id": 160795417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579441
    },
    {
        "content": "<p>It needs the prime, because I think the other version is for linear ordered things.</p>",
        "id": 160795484,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552579471
    },
    {
        "content": "<p>yes, I found the other one. Thanks</p>",
        "id": 160795498,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552579481
    },
    {
        "content": "<p>linear ordered -&gt; char 0</p>",
        "id": 160795503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579486
    },
    {
        "content": "<p>The linear order version is in core I think.</p>",
        "id": 160795550,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552579533
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/golden.20ratio.20calculation\" title=\"#narrow/stream/116395-maths/topic/golden.20ratio.20calculation\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/golden.20ratio.20calculation</a></p>",
        "id": 160795728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> there's an example of basic manipulations with sqrt(5)</p>",
        "id": 160795738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552579673
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import analysis.exponential\n\nnamespace real\nvariable (x : ℝ)\n\nlemma sqrt_le_left {x y : ℝ} (hy : 0 ≤ y) : sqrt x ≤ y ↔ x ≤ y ^ 2 :=\nbegin\n  rw [mul_self_le_mul_self_iff (sqrt_nonneg _) hy, pow_two],\n  cases le_total 0 x with hx hx,\n  { rw [mul_self_sqrt hx] },\n  { have h1 : 0 ≤ y * y := mul_nonneg hy hy,\n    have h2 : x ≤ y * y := le_trans hx h1,\n    simp [sqrt_eq_zero_of_nonpos, hx, h1, h2] }\nend\n\nlemma le_sqrt {x y : ℝ} (hx : 0 ≤ x) (hy : 0 ≤ y) : x ≤ sqrt y ↔ x ^ 2 ≤ y :=\nby rw [mul_self_le_mul_self_iff hx (sqrt_nonneg _), pow_two, mul_self_sqrt hy]\n\nlemma div_lt_self {x y : ℝ} (hx : x &gt; 0) (hy : y &gt; 1) : x / y &lt; x :=\nby simpa using div_lt_div&#39; (le_refl x) hy hx zero_lt_one\n\nlemma cos_square : cos x ^ 2 = (1 + cos (2 * x)) / 2 :=\nby simp [cos_two_mul, mul_div_cancel_left, two_ne_zero]\n\nlemma sin_square : sin x ^ 2 = 1 - cos x ^ 2 :=\nby { rw [←sin_pow_two_add_cos_pow_two x], simp }\n\nlemma cos_square_pi_div_four : cos (pi / 4) ^ 2 = 1 / 2 :=\nby { have : 2 * (pi / 4) = pi / 2, ring, simp [cos_square, this] }\n\nlemma cos_pi_div_four : cos (pi / 4) = sqrt (1 / 2) :=\nbegin\n  symmetry, rw [sqrt_eq_iff_sqr_eq, cos_square_pi_div_four], norm_num,\n  apply le_of_lt, apply cos_pos_of_neg_pi_div_two_lt_of_lt_pi_div_two,\n  { transitivity (0 : ℝ), rw neg_lt_zero, apply pi_div_two_pos,\n    exact div_pos pi_pos (by norm_num) },\n  apply div_lt_div&#39; (le_refl pi) _ pi_pos _,\n  norm_num, norm_num\nend\n\n/- why is division_ring.inv_inj in the file &quot;field&quot;?-/\nlemma cos_square_pi_div_eight : cos (pi / 8) ^ 2 = 1 / 2 + sqrt (1 / 8) :=\nbegin\n  have h1 : 2 * (pi / 8) = pi / 4, ring,\n  have h2 : sqrt 4 = 2, rw [sqrt_eq_iff_sqr_eq]; norm_num,\n  have h3 : 2 * sqrt 2 ≠ 0, norm_num,\n  have h4 : sqrt 8 ≠ 0, norm_num,\n  simp [cos_square, h1, cos_pi_div_four],\n  rw [←div_add_div_same], simp [div_eq_mul_inv, (mul_inv&#39; _ _).symm, division_ring.inv_inj, h3, h4],\n  transitivity sqrt 4 * sqrt 2, rw [h2],\n  rw [←sqrt_mul]; norm_num\nend\n\nlemma cos_pi_div_eight : cos (pi / 8) = sqrt (1 / 2 + sqrt (1 / 8)) :=\nbegin\n  symmetry, rw [sqrt_eq_iff_sqr_eq, cos_square_pi_div_eight],\n  apply add_nonneg, norm_num, apply sqrt_nonneg,\n  apply le_of_lt, apply cos_pos_of_neg_pi_div_two_lt_of_lt_pi_div_two,\n  { transitivity (0 : ℝ), rw neg_lt_zero, apply pi_div_two_pos,\n    exact div_pos pi_pos (by norm_num) },\n  apply div_lt_div&#39; (le_refl pi) _ pi_pos _,\n  norm_num, norm_num\nend\n\nlemma sin_square_pi_div_eight : sin (pi / 8) ^ 2 = 1 / 2 - sqrt (1 / 8) :=\nby { simp [sin_square, cos_square_pi_div_eight], rw [←add_assoc], congr&#39; 1, norm_num }\n\nlemma sin_pi_div_eight : sin (pi / 8) = sqrt (1 / 2 - sqrt (1 / 8)) :=\nbegin\n  symmetry, rw [sqrt_eq_iff_sqr_eq, sin_square_pi_div_eight],\n  { rw [sub_nonneg, sqrt_le_left], norm_num, norm_num },\n  apply le_of_lt, apply sin_pos_of_pos_of_lt_pi,\n  { exact div_pos pi_pos (by norm_num) },\n  exact div_lt_self pi_pos (by norm_num)\nend\n\nlemma sin_lt {x : ℝ} (h : 0 &lt; x) : sin x &lt; x :=\nbegin\n  cases le_or_gt x 1 with h&#39; h&#39;,\n  { have hx : abs x = x := abs_of_nonneg (le_of_lt h),\n    have : abs x ≤ 1, rwa [hx],\n    have := sin_bound this, rw [abs_le] at this,\n    have := this.2, rw [sub_le_iff_le_add&#39;, hx] at this,\n    apply lt_of_le_of_lt this, rw [sub_add], apply lt_of_lt_of_le _ (le_of_eq (sub_zero x)),\n    apply sub_lt_sub_left, rw sub_pos, apply mul_lt_mul&#39;,\n    { rw [pow_succ x 3], refine le_trans _ (le_of_eq (one_mul _)),\n      rw mul_le_mul_right, exact h&#39;, apply pow_pos h },\n    norm_num, norm_num, apply pow_pos h },\n  exact lt_of_le_of_lt (sin_le_one x) h&#39;\nend\n\nlemma pt_gt_three : pi &gt; 3 :=\nbegin\n  have : pi &gt; sin (pi / 8) * 8,\n  { apply mul_lt_of_lt_div, norm_num, apply sin_lt, apply div_pos pi_pos, norm_num },\n  apply lt_of_le_of_lt _ this, rw [sin_pi_div_eight],\n  apply le_mul_of_div_le, norm_num,\n  rw [le_sqrt, le_sub_iff_add_le, ←le_sub_iff_add_le&#39;, sqrt_le_left],\n  norm_num, norm_num, norm_num,\n  rw [sub_nonneg, sqrt_le_left], norm_num, norm_num\nend\n\nend real\n</pre></div>",
        "id": 160811617,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552590360
    },
    {
        "content": "<p>This doesn't compile for me</p>",
        "id": 160811887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552590510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>solve1 tactic failed, focused goal has not been solved\nstate:\n⊢ pi / 8 ≤ 1\n</pre></div>",
        "id": 160811892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552590515
    },
    {
        "content": "<p>We need pi &lt;= 8</p>",
        "id": 160811899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552590519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma pt_gt_three : pi &gt; 3 :=\nbegin\n  have : pi &gt; sin (pi / 8) * 8,\n  { apply mul_lt_of_lt_div, norm_num, apply sin_lt, apply div_pos pi_pos, norm_num,\n  -- ⊢ pi / 8 ≤ 1\n    sorry\n  },\n  apply lt_of_le_of_lt _ this, rw [sin_pi_div_eight],\n  apply le_mul_of_div_le, norm_num,\n  rw [le_sqrt, le_sub_iff_add_le, ←le_sub_iff_add_le&#39;, sqrt_le_left],\n  norm_num, norm_num, norm_num,\n  rw [sub_nonneg, sqrt_le_left], norm_num, norm_num\nend\n</pre></div>",
        "id": 160811969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552590577
    },
    {
        "content": "<p>oops, I missed that. One minute</p>",
        "id": 160811971,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552590578
    },
    {
        "content": "<p>I updated the previous post, it should compile now.</p>",
        "id": 160812122,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552590668
    },
    {
        "content": "<p>You can also prove <code>sin x &lt; x</code> for all <code>x &gt; 0</code> by handling the case <code>x &gt; 1</code> by <code>sin x &lt;= 1 &lt; x</code></p>",
        "id": 160812143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552590683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That is indeed the nicer solution. I was planning to do that, but I was a bit too eager to post it here and forgot :)</p>",
        "id": 160812469,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552590849
    },
    {
        "content": "<p>I updated the code once more.</p>",
        "id": 160812540,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552590901
    },
    {
        "content": "<p>This should all go in <code>pi.lean</code>, right?</p>",
        "id": 160813974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552591798
    },
    {
        "content": "<p>So now we can prove that floor(pi) = 3</p>",
        "id": 160814047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552591824
    },
    {
        "content": "<p>So the next question is whether we can prove digit 10 pi 0 = 1</p>",
        "id": 160814068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552591842
    },
    {
        "content": "<p>ie floor(pi*10)%10=1</p>",
        "id": 160814132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552591888
    },
    {
        "content": "<blockquote>\n<p>This should all go in <code>pi.lean</code>, right?</p>\n</blockquote>\n<p>Isn't that about pi types <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> <span aria-label=\"cake\" class=\"emoji emoji-1f370\" role=\"img\" title=\"cake\">:cake:</span></p>",
        "id": 160814182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552591916
    },
    {
        "content": "<p>Computing <code>sin(pi/16)</code> we can conclude that <code>pi &gt; 3.1</code>, computing <code>sin(pi/64)</code> we can conclude that <code>pi&gt;3.14</code>. Using the other side of <code>sin_bound</code> we can probably also get upper bounds.</p>",
        "id": 160814815,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552592270
    },
    {
        "content": "<p>Can you get to 32 trillion by the end of pi day?</p>",
        "id": 160815604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552592725
    },
    {
        "content": "<p>probably not</p>",
        "id": 160816007,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552592990
    },
    {
        "content": "<p>Is there a better way than <code>norm_num</code> to prove the following?</p>\n<div class=\"codehilite\"><pre><span></span>(2 : ℝ) ≤ ((((2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2) ^ 2\n</pre></div>\n\n\n<p>(the RHS is approx <code>2.00033</code>). <code>norm_num</code> is struggling on this one, and gets a deterministic timeout.</p>",
        "id": 160833013,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552606552
    },
    {
        "content": "<p>If I can prove inequalities like that, I can approximate <code>pi</code> for a few decimal places, at least from below (I need to still work on approximation from above). The approximation I have of <code>pi</code> is of the form</p>\n<div class=\"codehilite\"><pre><span></span>π ≈ 2 ^ 7 * sqrt (2 - sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2 + sqrt 2))))))\n</pre></div>\n\n\n<p>This seems to converge at an okay rate: the number of correct digits seems to be linear in the number of square roots.</p>\n<p>In particular, I formalized</p>\n<div class=\"codehilite\"><pre><span></span>lemma pt_gt_314 : (2 : ℝ) ≤ ((((2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2) ^ 2 → pi &gt; 3.14\n</pre></div>",
        "id": 160833558,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552607133
    },
    {
        "content": "<p>I can reduce your time-out goal to <code>⊢ 0 &lt; 3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</code></p>",
        "id": 160834224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552607863
    },
    {
        "content": "<p>It's not even close</p>",
        "id": 160834227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552607872
    },
    {
        "content": "<p>but I'm struggling with the last bit.</p>",
        "id": 160834277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552607892
    },
    {
        "content": "<p>oh -- these are reals</p>",
        "id": 160834279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552607897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"nc\">data.real.basic</span><span class=\"w\"></span>\n\n<span class=\"n\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"> </span><span class=\"p\">((((</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">157</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"n\">begin</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">157</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">157</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">1600</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">157</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">1600</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">24649</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2560000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">24649</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2560000</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5095351</span><span class=\"o\">/</span><span class=\"mi\">2560000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">5095351</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"mi\">2560000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">25962601813201</span><span class=\"o\">/</span><span class=\"mi\">6553600000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"err\">&#39;</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">skipping</span><span class=\"w\"> </span><span class=\"n\">steps</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"p\">((((</span><span class=\"mi\">25962601813201</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">ℝ</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">6553600000000</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601</span><span class=\"o\">/</span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">worked</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"err\">⊢</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">≤</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\">  </span><span class=\"mi\">6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\">    </span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"n\">le_div_iff</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">norm_num</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"err\">⊢</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">sorry</span><span class=\"w\"></span>\n<span class=\"n\">end</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160834318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552607945
    },
    {
        "content": "<p><code>norm_num</code> just works for that last goal for me.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">((((</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">157</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">157</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span> <span class=\"bp\">/</span> <span class=\"mi\">32</span> <span class=\"bp\">=</span> <span class=\"mi\">157</span> <span class=\"bp\">/</span> <span class=\"mi\">1600</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">157</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">1600</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">24649</span> <span class=\"bp\">/</span> <span class=\"mi\">2560000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">24649</span> <span class=\"bp\">/</span> <span class=\"mi\">2560000</span> <span class=\"bp\">=</span> <span class=\"mi\">5095351</span><span class=\"bp\">/</span><span class=\"mi\">2560000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">5095351</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span><span class=\"mi\">2560000</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">25962601813201</span><span class=\"bp\">/</span><span class=\"mi\">6553600000000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- let&#39;s try skipping steps</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((((</span><span class=\"mi\">25962601813201</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">6553600000000</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601</span><span class=\"bp\">/</span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- worked!</span>\n  <span class=\"c1\">-- ⊢ 2 ≤</span>\n  <span class=\"c1\">--  6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601 /</span>\n  <span class=\"c1\">--    3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n  <span class=\"c1\">-- ⊢ 0 &lt; 3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160834677,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552608323
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">--set_option pp.all true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">((((</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">157</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">157</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">50</span> <span class=\"bp\">/</span> <span class=\"mi\">32</span> <span class=\"bp\">=</span> <span class=\"mi\">157</span> <span class=\"bp\">/</span> <span class=\"mi\">1600</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">157</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">1600</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">24649</span> <span class=\"bp\">/</span> <span class=\"mi\">2560000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">24649</span> <span class=\"bp\">/</span> <span class=\"mi\">2560000</span> <span class=\"bp\">=</span> <span class=\"mi\">5095351</span><span class=\"bp\">/</span><span class=\"mi\">2560000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">5095351</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span><span class=\"mi\">2560000</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">25962601813201</span><span class=\"bp\">/</span><span class=\"mi\">6553600000000</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- let&#39;s try skipping steps</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((((</span><span class=\"mi\">25962601813201</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">6553600000000</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601</span><span class=\"bp\">/</span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- worked!</span>\n  <span class=\"c1\">-- ⊢ 2 ≤</span>\n  <span class=\"c1\">--  6806775565993596917798714352237438749189222725565123913061124308255143227446400872965401873904861225601 /</span>\n  <span class=\"c1\">--    3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 0 &lt; 3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n           <span class=\"bp\">=</span> <span class=\"mi\">40</span> <span class=\"err\">^</span> <span class=\"mi\">64</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This worked for me.</p>",
        "id": 160834847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552608501
    },
    {
        "content": "<p>Oh, I think that I upset Lean with some overflow and then failed to restart, and had problems.</p>",
        "id": 160834852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552608518
    },
    {
        "content": "<p>Only 31999999999998 digits to go and we have the record!</p>",
        "id": 160835429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552609217
    },
    {
        "content": "<p>oh boy</p>",
        "id": 160835991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552609860
    },
    {
        "content": "<p>I have proven</p>\n<div class=\"codehilite\"><pre><span></span>lemma pi_gt_314 : pi &gt; 3.14\nlemma pi_lt_315 : pi &lt; 3.15\n</pre></div>\n\n\n<p>assuming the following 12 inequalities:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ 2 ≤ ((((2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2) ^ 2\n⊢ 0 ≤ (((2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2\n⊢ 0 ≤ ((2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2\n⊢ 0 ≤ (2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2\n⊢ 0 ≤ 2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2\n⊢ 0 &lt; 157 / 50 / 2 ^ (4 + 1)\n⊢ ((((2 - ((63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2) ^ 2 ≤ 2\n⊢ 0 &lt; (((2 - ((63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2) ^ 2 - 2\n⊢ 0 &lt; ((2 - ((63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2) ^ 2 - 2\n⊢ 0 &lt; (2 - ((63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)) ^ 2) ^ 2 - 2\n⊢ 0 &lt; 2 - ((63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)) ^ 2\n⊢ 0 ≤ (63 / 20 - 1 / 4 ^ 4) / 2 ^ (4 + 1)\n</pre></div>",
        "id": 160839840,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552614574
    },
    {
        "content": "<p>I've verified all of your inequalities on WolframAlpha</p>",
        "id": 160840047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552614855
    },
    {
        "content": "<p>Oh boy I've missed a lot</p>",
        "id": 160840150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615015
    },
    {
        "content": "<p>For these kinds of numeric calculations you can simplify a lot by decreasing the precision in the middle of the calculation</p>",
        "id": 160840168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615052
    },
    {
        "content": "<p>Are all the inequalities implied by one of them?</p>",
        "id": 160840177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615080
    },
    {
        "content": "<p>the first one is exceptionally tight</p>",
        "id": 160840226,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615093
    },
    {
        "content": "<p>the 2nd to 5th looks like a more general theorem?</p>",
        "id": 160840232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615120
    },
    {
        "content": "<p>wait are those approximations to sqrt(2)?</p>",
        "id": 160840236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I think it would be better if you tell us more about what's actually going on</p>",
        "id": 160840246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615156
    },
    {
        "content": "<p>if we want approximations to sqrt(2) maybe we should turn to Pell theory</p>",
        "id": 160840251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615169
    },
    {
        "content": "<p>I think they are approximations to 2</p>",
        "id": 160840253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615177
    },
    {
        "content": "<p>fixed points of x |-&gt; x^2-2</p>",
        "id": 160840256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615198
    },
    {
        "content": "<p>interesting...?</p>",
        "id": 160840309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615215
    },
    {
        "content": "<p>The first one isn't that tight: it is saying that</p>\n<div class=\"codehilite\"><pre><span></span>   1128227574827648531222203602074520069222725565123913061124308255143227446400872965401873904861225601 /\n3402823669209384634633746074317682114560000000000000000000000000000000000000000000000000000000000000000\n&gt;=0\n</pre></div>",
        "id": 160840335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615294
    },
    {
        "content": "<p>Notice that there are like 60 digits of precision there and only 4 of them matter</p>",
        "id": 160840340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615312
    },
    {
        "content": "<p>so you can vastly simplify the calculation by precision reduction in the middle</p>",
        "id": 160840392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615337
    },
    {
        "content": "<p>aha</p>",
        "id": 160840397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615357
    },
    {
        "content": "<blockquote>\n<p>π ≈ 2 ^ 7 * sqrt (2 - sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2 + sqrt 2))))))</p>\n</blockquote>\n<p>Where did this come from?</p>",
        "id": 160840506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615547
    },
    {
        "content": "<p>The file I'm working on is here: <a href=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\" target=\"_blank\" title=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\">https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean</a></p>",
        "id": 160840554,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552615587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> the series sqrt(2+sqrt(2+ ... ))-/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_sqrt_two_add_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_lt_sqrt_two_add_series</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_314</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">14</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pi_gt_sqrt_two_add_series</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_lt_315</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">15</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">pi_lt_sqrt_two_add_series</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 160840635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615732
    },
    {
        "content": "<p>extract ^</p>",
        "id": 160840636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615735
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> remarkable work!</p>",
        "id": 160840644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552615749
    },
    {
        "content": "<p>The initial starting point <code>sqrt_two_add_series 0</code> is arbitrary? What constraints does it require?</p>",
        "id": 160840720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615879
    },
    {
        "content": "<p>The first and 7th inequalities are relatively tight (it compares 2 with 2.0003 and 1.994). The other inequalities are not tight at all, the numbers on the right are all between 1 and 2.<br>\nWhat's going on is that I proved that</p>\n<div class=\"codehilite\"><pre><span></span>2 ^ 5 * sqrt (2 - sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2)))) &lt; π &lt; 2 ^ 5 * sqrt (2 - sqrt (2 + sqrt (2 + sqrt (2 + sqrt (2)))) + 1 / 4 ^ 4\n</pre></div>\n\n\n<p>Now we can check the bounds by replacing <code>π</code> by <code>3.14</code> and <code>3.15</code> and then moving all the square roots of the inequality to the other side. To do that, we need to check that stuff is positive (that gives all the non-tight inequalities), and the final inequality are the two tight ones.</p>",
        "id": 160840779,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552615938
    },
    {
        "content": "<p>If we let <code>sqrt_two_add_series a n</code> be the series starting at <code>a</code>, then my hope is to get an inequality chain based on <code>sqrt_two_add_series a (n+1) &lt;= sqrt_two_add_series b n</code> when a and b are suitably related rational numbers</p>",
        "id": 160840782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552615952
    },
    {
        "content": "<p>is <code>sqrt_two_add_series a n</code> monotonic in <code>a</code>? I think it is</p>",
        "id": 160840870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616060
    },
    {
        "content": "<p>The defining equation of <code>sqrt_two_add_series</code> is</p>\n<div class=\"codehilite\"><pre><span></span>cos (pi / 2 ^ (n+1)) = sqrt_two_add_series n / 2\n</pre></div>",
        "id": 160840873,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616067
    },
    {
        "content": "<p>aha,  you inverted sin^2+cos^2 = 1</p>",
        "id": 160840885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616099
    },
    {
        "content": "<p>yes, the main equality is <code>lemma cos_square : cos x ^ 2 = 1 / 2 + cos (2 * x) / 2 </code></p>",
        "id": 160840906,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616138
    },
    {
        "content": "<p>how do we formalize \"precision reduction\"? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 160840958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616197
    },
    {
        "content": "<p>blasty lean users aren't going to like the answer</p>",
        "id": 160840983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616257
    },
    {
        "content": "<p>you give intermediate small rational numbers as certificates</p>",
        "id": 160840984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616277
    },
    {
        "content": "<p>yes,  it might be nice to let <code>sqrt_two_add_series</code> start at an arbitrary number, and yes, <code>sqrt_two_add_series a n</code> is monotone in both <code>a</code> and <code>n</code>.</p>",
        "id": 160841028,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616288
    },
    {
        "content": "<p>fortunately I'm not a blasty lean user</p>",
        "id": 160841054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616349
    },
    {
        "content": "<p>Is it true that <code>sqrt_two_add_series a (n+1) = sqrt_two_add_series (sqrt a + 2) n</code> or something like that?</p>",
        "id": 160841058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616365
    },
    {
        "content": "<p>sorry playing catchup</p>",
        "id": 160841063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616388
    },
    {
        "content": "<p>almost: <code>sqrt_two_add_series a (n+1) = sqrt_two_add_series (sqrt (2 + a)) n</code></p>",
        "id": 160841135,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616469
    },
    {
        "content": "<p>Okay, so with monotonicity we get the desired result: if <code>2+a &lt;= b^2</code> and <code>b &gt;= 0</code> then <code>sqrt_two_add_series a (n+1) &lt;= sqrt_two_add_series b n</code></p>",
        "id": 160841151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616518
    },
    {
        "content": "<p>so now you apply this lemma 5 times, and supply 5 small rational numbers that satisfy the inequalities (check in mathematica or something)</p>",
        "id": 160841198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616553
    },
    {
        "content": "<p>and those numbers are the certificate</p>",
        "id": 160841208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616586
    },
    {
        "content": "<p>that sounds good</p>",
        "id": 160841228,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616631
    },
    {
        "content": "<p>(of course I hoped for a lazier solution :) )</p>",
        "id": 160841230,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552616634
    },
    {
        "content": "<p>Oh the lazy solution is also possible, you can just tell lean \"round to n digits at each stage\"</p>",
        "id": 160841281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616664
    },
    {
        "content": "<p>and pick n so it works</p>",
        "id": 160841284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616670
    },
    {
        "content": "<p>but the really really important part is don't work out all the algebra with the original number, that causes exponential blowup</p>",
        "id": 160841300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616706
    },
    {
        "content": "<p>I really like certificate proofs, they show the added power of ITP</p>",
        "id": 160841361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616778
    },
    {
        "content": "<p>didn't you write a floating point library or something?</p>",
        "id": 160841363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616796
    },
    {
        "content": "<p>you can solve NP problems in polynomial time, people! That's big news</p>",
        "id": 160841364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616800
    },
    {
        "content": "<p>would that be useful?</p>",
        "id": 160841365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616802
    },
    {
        "content": "<p>this is why metamath is fast and every tactic based prover is 5 orders of magnitude slower, because certificates matter</p>",
        "id": 160841388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616875
    },
    {
        "content": "<p>so we still use norm_num in each stage or something like that?</p>",
        "id": 160841438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616910
    },
    {
        "content": "<p>yes</p>",
        "id": 160841439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616914
    },
    {
        "content": "<p>it's definitely the wrong time for me to try, so maybe later</p>",
        "id": 160841445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616922
    },
    {
        "content": "<p>it's 2:28 AM</p>",
        "id": 160841446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552616926
    },
    {
        "content": "<p>I will come up with appropriate certificates in a bit, once I understand the situation right</p>",
        "id": 160841460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552616962
    },
    {
        "content": "<p>I'm currently adding a second argument and showing the monotonicity</p>",
        "id": 160841900,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552617618
    },
    {
        "content": "<p>(updated the file on Github)</p>",
        "id": 160842360,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552618311
    },
    {
        "content": "<p>are you working on the certificates <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ? Otherwise I'll start on it now.</p>",
        "id": 160843441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552619868
    },
    {
        "content": "<p>I have this so far, for the lower bound:</p>\n<div class=\"codehilite\"><pre><span></span>{32 a5 &gt;= 157/50, 2 - a5^2 &gt;= a4, a4^2 &gt;= 2 + a3, a3^2 &gt;= 2 + a2,  a2^2 &gt;= 2 + a1, a1^2 &gt;= 2}\n</pre></div>",
        "id": 160843488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552619894
    },
    {
        "content": "<p>Oh, I didn't expect this would work:</p>\n<div class=\"codehilite\"><pre><span></span>{a1 -&gt; 2, a2 -&gt; 2, a3 -&gt; 2, a4 -&gt; -(2687/1350), a5 -&gt; 21/214}\n</pre></div>",
        "id": 160843818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620376
    },
    {
        "content": "<p>the last few (first few? my numbering is weird) are exactly 2, which works out nicely with the algebra. You probably want to special case that since it makes everything easy for going to higher values</p>",
        "id": 160843835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620431
    },
    {
        "content": "<p>I'm still a bit confused what your variables <code>a1</code>-<code>a5</code> correspond to.</p>",
        "id": 160843845,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552620473
    },
    {
        "content": "<p>Here's the abstract argument:</p>\n<div class=\"codehilite\"><pre><span></span>pi &gt;= 2^5 Sqrt[2 - f[0, 4]] &gt;= 2^5 a5 &gt;= 157/50\n2 - a5^2 &gt;= a4 &gt;= f[a3, 1] &gt;= f[a2, 2] &gt;= f[a1, 3] &gt;= f[0, 4]\n</pre></div>",
        "id": 160843894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620527
    },
    {
        "content": "<p>where <code>f</code> is your series function</p>",
        "id": 160843895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620536
    },
    {
        "content": "<p>Note that there are no side conditions on this proof, because <code>a4^2 &gt;= 2 + a3</code> implies <code>a4 &gt;= Sqrt[2 + a3]</code> regardless of whether <code>a4</code> is positive</p>",
        "id": 160843969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620679
    },
    {
        "content": "<p>for the upper bound I think there will be side conditions</p>",
        "id": 160843973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552620696
    },
    {
        "content": "<blockquote>\n<p><code>a4^2 &gt;= 2 + a3</code> implies <code>a4 &gt;= Sqrt[2 + a3]</code></p>\n</blockquote>\n<p>uhm... no: <code>(-10) ^ 2 &gt;= 2 + 0</code> but not <code>-10 &gt;= sqrt(2 + 0)</code>.</p>",
        "id": 160844182,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552621028
    },
    {
        "content": "<p>For the upper bound there won't be side conditions, I indeed realized that a couple of minutes ago.</p>",
        "id": 160844191,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552621063
    },
    {
        "content": "<p>Oh boy, I keep getting myself confused here. You are right, each of the a's must be positive, and I messed up a sign somewhere so my cert doesn't work</p>",
        "id": 160844547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552621505
    },
    {
        "content": "<p>The signs are pretty confusing indeed. But if you give me the certificate for the inequalities</p>\n<div class=\"codehilite\"><pre><span></span>f[a4, 0] &gt;= f[a3, 1] &gt;= f[a2, 2] &gt;= f[a1, 3] &gt;= f[0, 4]\n</pre></div>\n\n\n<p>then I'm ready to plug them in my Lean code now.</p>",
        "id": 160844626,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552621582
    },
    {
        "content": "<p>Okay, here are the values for the lower bound:</p>\n<div class=\"codehilite\"><pre><span></span>{a1 -&gt; 577/408, a2 -&gt; 619/335, a3 -&gt; 2144/1093, a4 -&gt; 2687/1350, a5 -&gt; 89/907}\n</pre></div>",
        "id": 160845319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552622570
    },
    {
        "content": "<p>it works!</p>",
        "id": 160845382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552622694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma pi_gt_314 : pi &gt; 3.14 :=\nbegin\n  refine lt_of_le_of_lt _ (pi_gt_sqrt_two_add_series 4),\n  rw [mul_comm],\n  apply le_mul_of_div_le, norm_num, apply le_sqrt_of_sqr_le,\n  rw [le_sub],\n  refine le_trans (sqrt_two_add_series_step_up (577/408) (by norm_num) (by norm_num)) _,\n  refine le_trans (sqrt_two_add_series_step_up (619/335) (by norm_num) (by norm_num)) _,\n  refine le_trans (sqrt_two_add_series_step_up (2144/1093) (by norm_num) (by norm_num)) _,\n  refine le_trans (sqrt_two_add_series_step_up (2687/1350) (by norm_num) (by norm_num)) _,\n  rw [sqrt_two_add_series_zero],\n  norm_num\nend\n</pre></div>",
        "id": 160845471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552622872
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma pi_lt_315 : pi &lt; 3.15 :=\nbegin\n  refine lt_of_lt_of_le (pi_lt_sqrt_two_add_series 4) _,\n  apply add_le_of_le_sub_right, rw [mul_comm], apply mul_le_of_le_div, apply pow_pos, norm_num,\n  rw [sqrt_le_left, sub_le], swap, norm_num,\n  refine le_trans _ (sqrt_two_add_series_step_down (41/29) (by norm_num)),\n  refine le_trans _ (sqrt_two_add_series_step_down (194/105) (by norm_num)),\n  refine le_trans _ (sqrt_two_add_series_step_down (13513/6889) (by norm_num)),\n  refine le_trans _ (sqrt_two_add_series_step_down (2271/1141) (by norm_num)),\n  norm_num\nend\n</pre></div>",
        "id": 160845882,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552623552
    },
    {
        "content": "<p>The compiling proofs can now be found here: <a href=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\" target=\"_blank\" title=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\">https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean</a></p>\n<p>They do each take ~5 seconds to compile. Maybe we can find smaller certificates (I found mine in a very naive way).</p>",
        "id": 160846001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552623728
    },
    {
        "content": "<p>I do want to figure out a general mechanism for optimizing all the certificates simultaneously; right now I'm optimizing them one by one and tweaking the results</p>",
        "id": 160846008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552623781
    },
    {
        "content": "<p>Can't a tactic do that for you?</p>",
        "id": 160846017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552623802
    },
    {
        "content": "<p>This must be a well-known idea in ITP, right?</p>",
        "id": 160846025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552623825
    },
    {
        "content": "<p>yes and no; this is stuff that should not be re-run every time</p>",
        "id": 160846026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552623825
    },
    {
        "content": "<p>Yes, I'm just using Mathematica's <code>Rationalize</code> myself, until <code>Rationalize</code> finds a rational number which is on the correct side of the number I'm approximating</p>",
        "id": 160846027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552623834
    },
    {
        "content": "<p>The tactic could trace its result</p>",
        "id": 160846084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552623862
    },
    {
        "content": "<p>me too (you can ask for a number in a range with <code>Rationalize[(a+b)/2,(a-b)/2]</code>)</p>",
        "id": 160846087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552623877
    },
    {
        "content": "<p>oh yes, good point</p>",
        "id": 160846111,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552623949
    },
    {
        "content": "<p>there isn't much point doing this in lean, unless lean gets as good at numbers as a CAS</p>",
        "id": 160846160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552623986
    },
    {
        "content": "<p>this is really the sort of thing CASs are designed for: unverified computation / symbolic manipulation</p>",
        "id": 160846188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552624038
    },
    {
        "content": "<p>If I was to do this sort of thing a lot I would want to automate some parts of it</p>",
        "id": 160846192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552624064
    },
    {
        "content": "<p>So we need a Sage bridge...</p>",
        "id": 160846462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552624469
    },
    {
        "content": "<p>sure, that would do it</p>",
        "id": 160846630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552624739
    },
    {
        "content": "<p>or code extraction</p>",
        "id": 160846641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552624759
    },
    {
        "content": "<p>in this case, it's just pure computation, although it's nice having mathematica with builtin functions like <code>Rationalize</code> so we don't have to write it on the spot</p>",
        "id": 160846647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552624796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think <code>meta</code> code could at some point be just as fast a proper CAS? I don't see why we shouldn't strive for world domination there as well...</p>",
        "id": 160847116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552625530
    },
    {
        "content": "<p>sure, we just need more efficiency</p>",
        "id": 160847119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625546
    },
    {
        "content": "<p>Is there hope that <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> will bring this efficiency?</p>",
        "id": 160847125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552625562
    },
    {
        "content": "<p>I've used lean plenty for this kind of thing, and it's a big bottleneck</p>",
        "id": 160847127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625570
    },
    {
        "content": "<p>Yes, there is hope... I'm not putting all my eggs in that basket though</p>",
        "id": 160847139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625594
    },
    {
        "content": "<p>You haven't even put all your ITP eggs in Leans basket...</p>",
        "id": 160847144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552625623
    },
    {
        "content": "<p>I don't believe in world dominion</p>",
        "id": 160847192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625663
    },
    {
        "content": "<p>it's not a healthy mindset. Better to support open communication and interaction between systems, because there will always be people that prefer another language</p>",
        "id": 160847216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625751
    },
    {
        "content": "<p>It also means you have to support <code>n^2</code> communications...</p>",
        "id": 160847260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552625810
    },
    {
        "content": "<p>the common answer to that is \"not if it's a star graph\", i.e. world domination</p>",
        "id": 160847269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625838
    },
    {
        "content": "<p>but other sparse graphs work too</p>",
        "id": 160847272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625847
    },
    {
        "content": "<p>right now it's just an almost completely disconnected graph</p>",
        "id": 160847275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552625870
    },
    {
        "content": "<p>I swear that was the happiest pi day of my life.</p>",
        "id": 160856308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552639163
    },
    {
        "content": "<p>this was a pretty good pi day activity</p>",
        "id": 160856503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552639330
    },
    {
        "content": "<p>It would be cool to see some end result go into mathlib. Does that make sense?</p>",
        "id": 160857317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552640231
    },
    {
        "content": "<p>yes, I think it should certainly go in mathlib</p>",
        "id": 160857654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640529
    },
    {
        "content": "<p>Seems pretty reasonable. We can chuck out old estimates that have been superseded (both in terms of precision of the bounds and ideas), but the best available bounds sound like a useful thing.</p>",
        "id": 160857662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552640558
    },
    {
        "content": "<p>we might want to revisit the methods later, but something is better than nothing (and this method is pretty good already)</p>",
        "id": 160857680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640587
    },
    {
        "content": "<p>I don't necessarily even think that we should only provide the best bounds. Tighter bounds are harder to calculate and harder to use</p>",
        "id": 160857708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640638
    },
    {
        "content": "<p>In fact, as I argued in this thread, the best way to prove these kinds of inequalities is by controlled relaxation of the bounds to something simpler</p>",
        "id": 160857774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552640689
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/03/15/happy-pi-day/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/03/15/happy-pi-day/\">https://xenaproject.wordpress.com/2019/03/15/happy-pi-day/</a></p>",
        "id": 160859125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552642292
    },
    {
        "content": "<p>Comments welcome as ever.</p>",
        "id": 160859130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552642297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Here is a link to the archive: <a href=\"https://leanprover-community.github.io/archive/113488general/89755happypiday.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/archive/113488general/89755happypiday.html\">https://leanprover-community.github.io/archive/113488general/89755happypiday.html</a><br>\nIt doesn't require login</p>",
        "id": 160860297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552643487
    },
    {
        "content": "<p>it's hard to generate good certs...</p>",
        "id": 160860404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552643596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"c1\"># pi &gt; 2 ^ (n+1) * sqrt (2 - sqrt_two_add_series 0 n)</span>\n<span class=\"c1\"># pi &lt; 2 ^ (n+1) * sqrt (2 - sqrt_two_add_series 0 n) + 1 / 4 ^ n</span>\n<span class=\"c1\"># sqrt_two_add_series(x,n+1) = sqrt(2+sqrt_two_add_series(x,n))</span>\n<span class=\"k\">def</span> <span class=\"nf\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">);</span> <span class=\"n\">n</span><span class=\"o\">-=</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;n=</span><span class=\"si\">%d</span><span class=\"s2\">:</span><span class=\"se\">\\t</span><span class=\"si\">%.10f</span><span class=\"s2\"> &lt; pi &lt; </span><span class=\"si\">%.10f</span><span class=\"s2\">&quot;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)),</span>\n        <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"o\">**</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">n=0:    2.8284271247 &lt; pi &lt; 3.8284271247</span>\n<span class=\"sd\">n=1:    3.0614674589 &lt; pi &lt; 3.3114674589</span>\n<span class=\"sd\">n=2:    3.1214451523 &lt; pi &lt; 3.1839451523</span>\n<span class=\"sd\">n=3:    3.1365484905 &lt; pi &lt; 3.1521734905</span>\n<span class=\"sd\">n=4:    3.1403311570 &lt; pi &lt; 3.1442374070</span>\n<span class=\"sd\">n=5:    3.1412772509 &lt; pi &lt; 3.1422538134</span>\n<span class=\"sd\">n=6:    3.1415138011 &lt; pi &lt; 3.1417579418</span>\n<span class=\"sd\">n=7:    3.1415729404 &lt; pi &lt; 3.1416339755</span>\n<span class=\"sd\">n=8:    3.1415877253 &lt; pi &lt; 3.1416029841</span>\n<span class=\"sd\">n=9:    3.1415914215 &lt; pi &lt; 3.1415952362</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"c1\"># to prove: 3.14 &lt;=  2**5 * math.sqrt(2 - sqrt_two_add_series(0,4))</span>\n<span class=\"c1\"># to prove: 157/1600 &lt;=  math.sqrt(2 - sqrt_two_add_series(0,4))</span>\n<span class=\"c1\"># to prove: 24649/2560000 &lt;=  2 - sqrt_two_add_series(0,4)</span>\n<span class=\"c1\"># to prove: sqrt_two_add_series(0,4) &lt;= 5095351/2560000</span>\n<span class=\"c1\"># rule: 2+x&lt;=y^2 |- sqrt_two_add_series(x,n+1) &lt;= sqrt_two_add_series(y,n)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">577</span><span class=\"o\">/</span><span class=\"mi\">408</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">2537</span><span class=\"o\">/</span><span class=\"mi\">1373</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">15163</span><span class=\"o\">/</span><span class=\"mi\">7730</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1447</span><span class=\"o\">/</span><span class=\"mi\">727</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">5095351</span><span class=\"o\">/</span><span class=\"mi\">2560000</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">1.9903694533443939</span>\n<span class=\"sd\">1.9903694901455364</span>\n<span class=\"sd\">1.9903707033912401</span>\n<span class=\"sd\">1.9903713890865138</span>\n<span class=\"sd\">1.9903713892709767</span>\n<span class=\"sd\">1.990371484375</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>",
        "id": 160860406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552643600
    },
    {
        "content": "<p>Use continued fractions</p>",
        "id": 160860762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552643898
    },
    {
        "content": "<p>That is a cheap yet powerful method to approximate reals by rationals</p>",
        "id": 160860789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552643922
    },
    {
        "content": "<p>that's what I used</p>",
        "id": 160860927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552644060
    },
    {
        "content": "<p>here are some smaller certs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">577</span><span class=\"o\">/</span><span class=\"mi\">408</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">619</span><span class=\"o\">/</span><span class=\"mi\">335</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">2297</span><span class=\"o\">/</span><span class=\"mi\">1171</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1447</span><span class=\"o\">/</span><span class=\"mi\">727</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">5095351</span><span class=\"o\">/</span><span class=\"mi\">2560000</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">1.9903694533443939</span>\n<span class=\"sd\">1.9903694901455364</span>\n<span class=\"sd\">1.9903695896706308</span>\n<span class=\"sd\">1.9903696406887783</span>\n<span class=\"sd\">1.9903713892709767</span>\n<span class=\"sd\">1.990371484375</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>",
        "id": 160861076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552644200
    },
    {
        "content": "<p>here are even smaller certs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">577</span><span class=\"o\">/</span><span class=\"mi\">408</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">619</span><span class=\"o\">/</span><span class=\"mi\">335</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"o\">/</span><span class=\"mi\">989</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1447</span><span class=\"o\">/</span><span class=\"mi\">727</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">5095351</span><span class=\"o\">/</span><span class=\"mi\">2560000</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">1.9903694533443939</span>\n<span class=\"sd\">1.9903694901455364</span>\n<span class=\"sd\">1.9903695896706308</span>\n<span class=\"sd\">1.9903711590704518</span>\n<span class=\"sd\">1.9903713892709767</span>\n<span class=\"sd\">1.990371484375</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>",
        "id": 160861425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552644499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I've made a PR to your file</p>",
        "id": 160862100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552645118
    },
    {
        "content": "<p>even smaller:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">338</span><span class=\"o\">/</span><span class=\"mi\">239</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">704</span><span class=\"o\">/</span><span class=\"mi\">381</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"o\">/</span><span class=\"mi\">989</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1447</span><span class=\"o\">/</span><span class=\"mi\">727</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mf\">3.14</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">1.9903694533443939</span>\n<span class=\"sd\">1.990369667837741</span>\n<span class=\"sd\">1.9903700913568452</span>\n<span class=\"sd\">1.9903711590704518</span>\n<span class=\"sd\">1.9903713892709767</span>\n<span class=\"sd\">1.990371484375</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>",
        "id": 160863967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552646899
    },
    {
        "content": "<p>semi-brute-forced the (locally) smallest certs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"o\">/</span><span class=\"mi\">70</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">874</span><span class=\"o\">/</span><span class=\"mi\">473</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"o\">/</span><span class=\"mi\">989</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">1447</span><span class=\"o\">/</span><span class=\"mi\">727</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mf\">3.14</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;OUTPUT:</span>\n<span class=\"sd\">1.9903694533443939</span>\n<span class=\"sd\">1.9903707035225453</span>\n<span class=\"sd\">1.9903708019895043</span>\n<span class=\"sd\">1.9903711590704518</span>\n<span class=\"sd\">1.9903713892709767</span>\n<span class=\"sd\">1.990371484375</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>",
        "id": 160864945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552647940
    },
    {
        "content": "<p>fitness = sum of all the numerators and denominators</p>",
        "id": 160864955,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552647957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">-=</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">a</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">approx</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"n\">hi</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">):</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">denom</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">hi</span><span class=\"o\">*</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">lo</span> <span class=\"o\">&lt;=</span> <span class=\"n\">num</span><span class=\"o\">/</span><span class=\"n\">denom</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n<span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">5000</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">L</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">L</span> <span class=\"ow\">in</span> <span class=\"n\">approx</span><span class=\"p\">(</span><span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mf\">3.14</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n    <span class=\"n\">lo</span> <span class=\"o\">=</span> <span class=\"n\">sqrt_two_add_series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">L</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"n\">denom</span> <span class=\"k\">for</span> <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span> <span class=\"ow\">in</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n        <span class=\"n\">hi</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n        <span class=\"k\">for</span> <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span> <span class=\"ow\">in</span> <span class=\"n\">approx</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"n\">hi</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">num</span><span class=\"o\">+</span><span class=\"n\">denom</span><span class=\"o\">+</span><span class=\"n\">size</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7000</span><span class=\"p\">:</span>\n                <span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([(</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">new</span>\n\n<span class=\"n\">min_size</span> <span class=\"o\">=</span> <span class=\"mi\">7000</span>\n<span class=\"k\">for</span> <span class=\"n\">L</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"n\">denom</span> <span class=\"k\">for</span> <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span> <span class=\"ow\">in</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">size</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_size</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n        <span class=\"n\">min_size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n</pre></div>",
        "id": 160865170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552648186
    },
    {
        "content": "<p>however the bottleneck is actually proving:</p>\n<div class=\"codehilite\"><pre><span></span>sqrt_two_add_series (1447 / 727) 0 ≤ 2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2\n</pre></div>",
        "id": 160865355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552648344
    },
    {
        "content": "<p>we didn't certify the right hand side</p>",
        "id": 160865362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552648354
    },
    {
        "content": "<blockquote>\n<p>I think a Chinese mathematician 1000 years ago used 3•2^n-gons to estimate pi up to 7 digits?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you think it's feasible to get up to 7 digits in Lean?</p>",
        "id": 160865395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552648394
    },
    {
        "content": "<p>yes</p>",
        "id": 160865410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552648416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how would you prove <code>⊢ 1447 / 727 ≤ 2 - (157 / 50 / 2 ^ (4 + 1)) ^ 2</code>?</p>",
        "id": 160865968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552648967
    },
    {
        "content": "<p>Are these rationals or reals?</p>",
        "id": 160866082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552649069
    },
    {
        "content": "<p>There was a fifth cert in my version that floris omitted</p>",
        "id": 160866091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649079
    },
    {
        "content": "<p>I mean, I guess they're reals. Would it make life easier if they were rationals?</p>",
        "id": 160866094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552649085
    },
    {
        "content": "<p>you want to insert an intermediate: <code>1447 / 727 ≤ 2 - a^2</code> and <code>a &lt;= 157 / 50 / 2 ^ (4 + 1)</code></p>",
        "id": 160866115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649114
    },
    {
        "content": "<p>good work on the cert optimization tho</p>",
        "id": 160866196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649177
    },
    {
        "content": "<blockquote>\n<p>I mean, I guess they're reals. Would it make life easier if they were rationals?</p>\n</blockquote>\n<p>no, you almost never want to use the decidable instance</p>",
        "id": 160866203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649193
    },
    {
        "content": "<blockquote>\n<p>you want to insert an intermediate: <code>1447 / 727 ≤ 2 - a^2</code> and <code>a &lt;= 157 / 50 / 2 ^ (4 + 1)</code></p>\n</blockquote>\n<p>ok lemme work on it</p>",
        "id": 160866209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649213
    },
    {
        "content": "<p>a=0 works great</p>",
        "id": 160866225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552649240
    },
    {
        "content": "<p>wait what? Something must be wrong then</p>",
        "id": 160866337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649381
    },
    {
        "content": "<p>oh, <code>a &gt;= 157 / 50 / 2 ^ (4 + 1)</code></p>",
        "id": 160866390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649411
    },
    {
        "content": "<p>like I mentioned before, sign headaches are real here</p>",
        "id": 160866405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649432
    },
    {
        "content": "<p><code>246/2507</code></p>",
        "id": 160866437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552649474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 160866520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552649540
    },
    {
        "content": "<p>(157/50/2^5 = 157/1600 which works better, but actually this is not the intermediate we want)</p>",
        "id": 160866543,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649585
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_314</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">14</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pi_gt_sqrt_two_add_series</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_mul_of_div_le</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_sqrt_of_sqr_le</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sqrt_two_add_series_step_up</span> <span class=\"o\">(</span><span class=\"mi\">99</span><span class=\"bp\">/</span><span class=\"mi\">70</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sqrt_two_add_series_step_up</span> <span class=\"o\">(</span><span class=\"mi\">874</span><span class=\"bp\">/</span><span class=\"mi\">473</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sqrt_two_add_series_step_up</span> <span class=\"o\">(</span><span class=\"mi\">1940</span><span class=\"bp\">/</span><span class=\"mi\">989</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">sqrt_two_add_series_step_up</span> <span class=\"o\">(</span><span class=\"mi\">1447</span><span class=\"bp\">/</span><span class=\"mi\">727</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1447</span> <span class=\"bp\">/</span> <span class=\"mi\">727</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">141</span> <span class=\"bp\">/</span> <span class=\"mi\">14644</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_le_sub_iff_left</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160866567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649625
    },
    {
        "content": "<p>this is 2 seconds faster on my computer (6s vs 8s)</p>",
        "id": 160866581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you see how to make this faster?</p>\n<div class=\"codehilite\"><pre><span></span>⊢ (157 / 50 / 2 ^ (4 + 1)) ^ 2 ≤ 141 / 14644\n</pre></div>",
        "id": 160866662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649712
    },
    {
        "content": "<p>same trick</p>",
        "id": 160866672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649729
    },
    {
        "content": "<p>prove <code>a^2 &lt;= bla</code> and <code>bla &lt;= a</code></p>",
        "id": 160866676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649741
    },
    {
        "content": "<p>By the way, the actual optimization criterion is the number of theorem applications in the norm_num proofs, although this is crazy hard to predict</p>",
        "id": 160866768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but like <code>bla</code> would just be <code>141/14644</code></p>",
        "id": 160866849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649956
    },
    {
        "content": "<p>I already optimized this</p>",
        "id": 160866850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552649962
    },
    {
        "content": "<p>no, you are optimizing <code>a</code></p>",
        "id": 160866864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552649990
    },
    {
        "content": "<p><code>157 / 50 / 2 ^ (4 + 1) &lt;= magic</code> and <code>magic^2 &lt;= 141/14644</code></p>",
        "id": 160866921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650021
    },
    {
        "content": "<p>the magic would just be <code>157/50/2^5</code> which is <code>157/1600</code></p>",
        "id": 160866929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650035
    },
    {
        "content": "<p>I already reached the limit I think</p>",
        "id": 160866938,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650051
    },
    {
        "content": "<p>confirmed</p>",
        "id": 160866970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650091
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160866977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552650099
    },
    {
        "content": "<p>yeah okay then it's just a lot of working out</p>",
        "id": 160866981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650108
    },
    {
        "content": "<p>If this is really expensive compared to the other steps, you could try making <code>141/14644</code> a bit larger and see if you can compensate with the others</p>",
        "id": 160867051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650165
    },
    {
        "content": "<p>Is clearing denominators expensive? There's a theorem which says you can do that</p>",
        "id": 160867117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552650244
    },
    {
        "content": "<p>Also I'm not sure but it might help to prepare the division cancellation steps since all of the magic numbers are fractions</p>",
        "id": 160867124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650252
    },
    {
        "content": "<p>yeah that</p>",
        "id": 160867126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650258
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 160867131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650270
    },
    {
        "content": "<p>meaning your intermediate theorems, the ones that you stick the magic numbers into, have side goals that talk only about multiplication and addition of natural numbers</p>",
        "id": 160867163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650312
    },
    {
        "content": "<p>what goal in particular?</p>",
        "id": 160867247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650398
    },
    {
        "content": "<p>uh, I'm not sure what the exact form of the theorems being applied are</p>",
        "id": 160867271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650427
    },
    {
        "content": "<p>but you can have the magic numbers be <code>\\u a / \\u b</code> instead of a real fraction</p>",
        "id": 160867286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650452
    },
    {
        "content": "<p>bottlenecks:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ 2 + 0 ≤ (99 / 70) ^ 2\n⊢ 2 + 99 / 70 ≤ (874 / 473) ^ 2\n⊢ 2 + 874 / 473 ≤ (1940 / 989) ^ 2\n⊢ 2 + 1940 / 989 ≤ (1447 / 727) ^ 2\n⊢ 1447 / 727 ≤ 2 - 141 / 14644\n⊢ (157 / 50 / 2 ^ (4 + 1)) ^ 2 ≤ 141 / 14644\n</pre></div>",
        "id": 160867382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650544
    },
    {
        "content": "<p>and then the side goals are things like <code>a^2 * d &lt;= (c + 2 d) * b^2</code> instead of <code>(a/b)^2 &lt;= c/d + 2</code></p>",
        "id": 160867394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650557
    },
    {
        "content": "<p>why would this be faster?</p>",
        "id": 160867408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650579
    },
    {
        "content": "<p>Depending on how norm_num unfolds the things, it might work out larger intermediates than necessary</p>",
        "id": 160867483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650622
    },
    {
        "content": "<p>hmm</p>",
        "id": 160867496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650639
    },
    {
        "content": "<p>In theory, norm_num should be doing the right thing, and so this won't actually gain much</p>",
        "id": 160867546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650701
    },
    {
        "content": "<p>You might consider looking at the proof to profile it</p>",
        "id": 160867563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650719
    },
    {
        "content": "<p>(split off the <code>norm_num</code> subproofs to lemmas)</p>",
        "id": 160867617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650736
    },
    {
        "content": "<p>the bottlenecks are essentially uncertifiable right?</p>",
        "id": 160867728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650851
    },
    {
        "content": "<p>Well, at some point you actually have to prove a tight bound</p>",
        "id": 160867740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650873
    },
    {
        "content": "<p>Kenny how do you time how long a command takes?</p>",
        "id": 160867744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552650875
    },
    {
        "content": "<p>Generally speaking, the difficulty of the proof (size of the numbers) is inversely proportional to the size of the gap</p>",
        "id": 160867782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650920
    },
    {
        "content": "<p>and we have placed 5 intermediate points in the original gap</p>",
        "id": 160867800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650940
    },
    {
        "content": "<p>so if we shift the points around a bit we can equalize the load</p>",
        "id": 160867809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650955
    },
    {
        "content": "<p>for <code>⊢ 2 + 99 / 70 ≤ (874 / 473) ^ 2</code>, the largest number norm_num produces in the proof is <code>361313348</code></p>",
        "id": 160867810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650956
    },
    {
        "content": "<p>that sounds about right, for those numbers</p>",
        "id": 160867862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650970
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>(norm_num.subst_into_div (763876 / 473) 473 (874 * (874 / 473)) 473 (763876 / 223729)\n                       (norm_num.div_eq_div_helper (763876 / 473) 473 763876 223729 361313348\n                          (norm_num.subst_into_prod (763876 / 473) 223729 (763876 / 473) 223729 361313348\n                             (norm_num.subst_into_div 763876 473 763876 473 (763876 / 473)\n                                (norm_num.div_eq_div_helper 763876 473 763876 473 361313348\n                                   (norm_num.subst_into_prod 763876 473 763876 473 361313348 (eq.refl 763876)\n                                      (eq.refl 473)\n                                      (norm_num.mul_bit1_helper 763876 236 180274736 361313348\n                                         (norm_num.mul_bit0_helper 763876 118 90137368\n</pre></div>",
        "id": 160867864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552650974
    },
    {
        "content": "<p>it should be 874^2 * 70</p>",
        "id": 160867873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552650993
    },
    {
        "content": "<p>well it isn't</p>",
        "id": 160867886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552651012
    },
    {
        "content": "<p>It's something times 473</p>",
        "id": 160867887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651012
    },
    {
        "content": "<p>it's 874^2 * 473</p>",
        "id": 160867903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651025
    },
    {
        "content": "<p>wat</p>",
        "id": 160867908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552651035
    },
    {
        "content": "<p>how did that number get there</p>",
        "id": 160867912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552651041
    },
    {
        "content": "<p>I should note this is the one part of <code>norm_num</code> I didn't write</p>",
        "id": 160867978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651088
    },
    {
        "content": "<p>I offload + - * / to leo's impl</p>",
        "id": 160867989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651112
    },
    {
        "content": "<p>but it's not like there are that many ways to write a (correct) arithmetic prover</p>",
        "id": 160868044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651198
    },
    {
        "content": "<p>anyway I'm going now, this was fun</p>",
        "id": 160868098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552651212
    },
    {
        "content": "<p>good work</p>",
        "id": 160868118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651241
    },
    {
        "content": "<p>aha:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">div_eq_div_helper</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">763876</span> <span class=\"bp\">/</span> <span class=\"mi\">473</span><span class=\"o\">)</span> <span class=\"mi\">473</span> <span class=\"mi\">763876</span> <span class=\"mi\">223729</span> <span class=\"mi\">361313348</span>\n<span class=\"c1\">-- norm_num.div_eq_div_helper (763876 / 473) 473 763876 223729 361313348 :</span>\n<span class=\"c1\">--   763876 / 473 * 223729 = 361313348 →</span>\n<span class=\"c1\">--   763876 * 473 = 361313348 → 473 ≠ 0 → 223729 ≠ 0 → 763876 / 473 / 473 = 763876 / 223729</span>\n</pre></div>\n\n\n<p>It is cross-multiplying to prove that <code>(874 * (874 / 473)) / 473 = (763876 / 473) / 473 = 763876 / 223729</code></p>",
        "id": 160868320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651452
    },
    {
        "content": "<p>that's... not a good idea for simplifying divisions of divisions</p>",
        "id": 160868346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552651498
    },
    {
        "content": "<p>PR to core Kenny!</p>",
        "id": 160868440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552651571
    },
    {
        "content": "<p>At the bottom of the file <a href=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\" target=\"_blank\" title=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\">https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean</a> I also computed <code>pi</code> up to 5 decimal digits. It does take 20-25 seconds to compile for me though.</p>",
        "id": 160875018,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552657136
    },
    {
        "content": "<p>It's definitely possible to get better approximations, but the compilation time will just be bigger for that. So I don't think we want the tightest bounds in mathlib. But soon I'll PR the first 3 digits of pi to mathlib.</p>",
        "id": 160875081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552657195
    },
    {
        "content": "<p>what is the profiler result? Is it <code>norm_num</code> or the kernel taking up the time?</p>",
        "id": 160878448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552659367
    },
    {
        "content": "<p>Not sure how to read the output, here it is for <code>pi_gt_31415</code>:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration of pi_gt_31415 took 11.9s\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 8.56s\nnum. allocated objects:  8023\nnum. allocated closures: 9813\nnum. allocated big nums: 96\n 8560ms   100.0%   tactic.step\n 8560ms   100.0%   scope_trace\n 8560ms   100.0%   tactic.istep\n 8560ms   100.0%   _interaction._lambda_2\n 8560ms   100.0%   tactic.istep._lambda_1\n 5972ms    69.8%   tactic.refine\n 5945ms    69.5%   tactic.to_expr\n 2583ms    30.2%   interaction_monad.orelse&#39;\n 2580ms    30.1%   tactic.seq\n 1641ms    19.2%   interaction_monad_orelse\n 1621ms    18.9%   tactic.interactive.norm_num1\n 1620ms    18.9%   tactic.replace_at._lambda_4\n 1620ms    18.9%   tactic.alternative._lambda_3\n 1620ms    18.9%   tactic.replace_at\n 1615ms    18.9%   interaction_monad.monad._lambda_9\n 1614ms    18.9%   tactic.ext_simplify_core\n 1614ms    18.9%   norm_num.derive\n 1607ms    18.8%   tactic.repeat\n 1607ms    18.8%   _private.3096317357.repeat_aux._main._lambda_1\n 1607ms    18.8%   tactic.all_goals\n 1607ms    18.8%   _private.3321893233.all_goals_core._main._lambda_2\n 1607ms    18.8%   tactic.try_core\n 1607ms    18.8%   all_goals_core\n 1607ms    18.8%   repeat_aux\n 1548ms    18.1%   norm_num.derive._main._lambda_3\n 1364ms    15.9%   tactic.norm_num\n  959ms    11.2%   tactic.interactive.simp_core\n  937ms    10.9%   tactic.join_user_simp_lemmas\n  937ms    10.9%   tactic.mk_simp_set_core\n  937ms    10.9%   simp_lemmas.mk_default\n  937ms    10.9%   tactic.mk_simp_set\n[...]\n</pre></div>",
        "id": 160879130,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552659734
    },
    {
        "content": "<p>So most of the tactic time is in <code>refine</code>, so building the proof term(?). But there is also 3-4 seconds of time which is not used to execute tactics. Is that just to type-check the final proof?</p>",
        "id": 160879322,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552659848
    },
    {
        "content": "<p>I think you missed out on some part... there should be a line for kernel typechecking</p>",
        "id": 160879891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660227
    },
    {
        "content": "<p>it's next to the <code>elaboration of foo took n s</code> line</p>",
        "id": 160879927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660256
    },
    {
        "content": "<p>Yeah, I thought so too. I cannot find it anywhere in my Lean messages</p>",
        "id": 160879935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660259
    },
    {
        "content": "<p>maybe that just means it was below the threshold</p>",
        "id": 160879964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660276
    },
    {
        "content": "<p>but damn that's a lot of <code>to_expr</code></p>",
        "id": 160880015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660305
    },
    {
        "content": "<p>and <code>istep</code> too... the tactic overhead is significant</p>",
        "id": 160880092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660328
    },
    {
        "content": "<p>Oh no, I know what is going on: all the <code>tactic.refine</code> are the nested <code>norm_num</code>s</p>",
        "id": 160880134,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660372
    },
    {
        "content": "<p>The way you read this is to look for nodes that come just before a percentage drop</p>",
        "id": 160880210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660425
    },
    {
        "content": "<p>When we execute </p>\n<div class=\"codehilite\"><pre><span></span>refine sqrt_two_add_series_step_up (11482/8119)  (by norm_num) (by norm_num) _,\n</pre></div>\n\n\n<p>the inner <code>norm_num</code> reports that the inner <code>norm_num</code> takes up almost a second:</p>\n<div class=\"codehilite\"><pre><span></span>713ms    98.5%   norm_num.derive\n</pre></div>\n\n\n<p>but for the outer tactic block, this is all part of the <code>refine</code> tactic.</p>",
        "id": 160880221,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660435
    },
    {
        "content": "<p><code>refine</code> is quick, it is just calling another tactic that is slow</p>",
        "id": 160880285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660451
    },
    {
        "content": "<p>ok, sure. But the <code>to_expr</code> just calls the nested <code>norm_num</code> tactics, right?</p>",
        "id": 160880325,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660483
    },
    {
        "content": "<p>yes, but that should show up in the total profile</p>",
        "id": 160880377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660520
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1614ms    18.9%   norm_num.derive\n1607ms    18.8%   tactic.repeat\n...\n</pre></div>",
        "id": 160880415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660554
    },
    {
        "content": "<p>compared to <code>8560ms</code> for all the tactics, that's not as large a fraction as I would have hoped</p>",
        "id": 160880515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552660597
    },
    {
        "content": "<blockquote>\n<p>Mario Carneiro: yes, but that should show up in the total profile</p>\n</blockquote>\n<p>I don't think it does. The sum of the times spend in <code>norm_num.derive</code> in the <em>nested</em> <code>by norm_num</code> tactics is much larger than the reported time on <code>norm_num.derive</code> when I hover over the <code>end</code> of the tactic block</p>",
        "id": 160880594,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660652
    },
    {
        "content": "<p>If I add everything up, about <code>5.3s</code> is spend in <code>norm_num.derive</code></p>",
        "id": 160880727,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660734
    },
    {
        "content": "<p>A bit more actually, but between <code>5s</code> and <code>6s</code>.</p>",
        "id": 160880764,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552660768
    },
    {
        "content": "<p>It's surprising how inconclusive this test is, but it looks like the outer block does in fact reflect slow downs caused by inner blocks</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">10000</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"k\">begin</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">10000</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160881160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661052
    },
    {
        "content": "<p>either the profiler is way off, or <code>sleep</code> is not very accurate</p>",
        "id": 160881194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661085
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"n\">took</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n<span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"n\">tactic</span> <span class=\"n\">profile</span> <span class=\"n\">data</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">15</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">46</span>\n<span class=\"mi\">14404</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n<span class=\"mi\">14404</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n<span class=\"mi\">14404</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n<span class=\"mi\">14404</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n<span class=\"mi\">14404</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n <span class=\"mi\">7470</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span>\n <span class=\"mi\">7470</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span>\n <span class=\"mi\">6934</span><span class=\"n\">ms</span>    <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">sleep</span>\n</pre></div>",
        "id": 160881375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661187
    },
    {
        "content": "<p>That seems pretty conclusive to me... The bottom <code>end</code> reports 1.7s spend at <code>sleep</code> and 5.2s at <code>refine</code>, the top <code>end</code> reports <code>5.2s</code> spend at <code>sleep</code>. But yeah, those numbers are not very close to 2000 and 4000...</p>",
        "id": 160881408,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552661211
    },
    {
        "content": "<p>(for future reference: the sleep numbers in Mario's post were originally 2000 and 4000)</p>",
        "id": 160881470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552661259
    },
    {
        "content": "<p>even when I crank the numbers up they are still not so close</p>",
        "id": 160881474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661265
    },
    {
        "content": "<p>I think the units must be off</p>",
        "id": 160881478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661273
    },
    {
        "content": "<p>yeah, there must be something off with <code>sleep</code>. But it's clear that the inner <code>sleep</code> time <em>only</em> counts towards <code>refine</code>, not towards <code>sleep</code>.</p>",
        "id": 160881554,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552661306
    },
    {
        "content": "<p>yeah. To make it even more obvious:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">2000</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"k\">begin</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">2000</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 2.8s\nnum. allocated objects:  21\nnum. allocated closures: 52\n 2798ms   100.0%   tactic.to_expr\n 2798ms   100.0%   tactic.istep\n 2798ms   100.0%   _interaction._lambda_2\n 2798ms   100.0%   scope_trace\n 2798ms   100.0%   tactic.istep._lambda_1\n 2798ms   100.0%   tactic.step\n 1429ms    51.1%   tactic.interactive.have._lambda_1\n 1369ms    48.9%   tactic.refine\n</pre></div>",
        "id": 160881633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661360
    },
    {
        "content": "<p>There is an easy solution to this for your situation though: don't use nested tactics, use a <code>refine</code> with more underscores and kill the subgoals with <code>norm_num</code> in the main tactic block</p>",
        "id": 160881932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552661567
    },
    {
        "content": "<p>If I do that, we see that indeed most of the time is spend at <code>norm_num</code>:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 7.48s\nnum. allocated objects:  29602\nnum. allocated closures: 30223\nnum. allocated big nums: 322\n 7482ms   100.0%   tactic.istep._lambda_1\n 7482ms   100.0%   _interaction._lambda_2\n 7482ms   100.0%   tactic.istep\n 7482ms   100.0%   tactic.step\n 7482ms   100.0%   scope_trace\n 7442ms    99.5%   interaction_monad.orelse&#39;\n 7439ms    99.4%   tactic.seq\n 7420ms    99.2%   interaction_monad.monad._lambda_9\n 7388ms    98.7%   tactic.all_goals\n 7388ms    98.7%   _private.3321893233.all_goals_core._main._lambda_2\n 7388ms    98.7%   all_goals_core\n 6640ms    88.7%   interaction_monad_orelse\n 6619ms    88.5%   tactic.replace_at._lambda_4\n 6619ms    88.5%   tactic.replace_at\n 6619ms    88.5%   tactic.alternative._lambda_3\n 6619ms    88.5%   tactic.interactive.norm_num1\n 6563ms    87.7%   norm_num.derive\n 6563ms    87.7%   tactic.ext_simplify_core\n 6499ms    86.9%   norm_num.derive._main._lambda_3\n 5696ms    76.1%   tactic.norm_num\n 2613ms    34.9%   norm_num.eval_ineq\n 2608ms    34.9%   norm_num.prove_lt\n 1357ms    18.1%   _private.3096317357.repeat_aux._main._lambda_1\n[...]\n</pre></div>",
        "id": 160882613,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552662005
    },
    {
        "content": "<p>Interestingly, there is a drop after <code>all_goals_core</code> (I'm now accumulating all the inequalities as goals, and killing them all with <code>all_goals {norm_num}</code> at the end)</p>",
        "id": 160882828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552662153
    },
    {
        "content": "<p>oh, in the other proof (<code>pi_lt_31416</code>) the drop-offs from <code>100%</code> to <code>90%</code> are at very different tactics. So maybe that is just noise/semi-randomness.</p>",
        "id": 160883136,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552662366
    },
    {
        "content": "<p>Since people requested it, I also computed the first 7 digits of <code>pi</code> at the bottom of <a href=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\" target=\"_blank\" title=\"https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean\">https://github.com/fpvandoorn/mathlib/blob/pi/src/data/real/pi.lean</a></p>",
        "id": 160885072,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1552663694
    }
]