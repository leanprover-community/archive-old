[
    {
        "content": "<p>I have code working with <code>3.8.0</code> and I'm porting it to <code>3.17.0</code> and some of my rewrites break. I'm having a hard time identifying where the issue is coming from but someone understanding what happened to <code>unify</code> and <code>rewrite</code> (e.g. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ) might be able to help.</p>\n<p>I have a definition <code>to_subtype</code> that I'm unfolding using <code>rw to_subtype</code>. That rewrite doesn't work anymore and neither do <code>dsimp</code>, <code>simp</code>, <code>unfold</code> and <code>dunfold</code>. I can get the work done again by using either </p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_subtype</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"o\">],</span> <span class=\"c1\">-- or</span>\n    <span class=\"n\">rw</span> <span class=\"n\">to_subtype</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>That is to say that I'm providing all the arguments of the exact right equation. Here is the error message when I write:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"n\">to_subtype</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">to_subtype</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"n\">i_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i_a</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">i_n</span><span class=\"o\">,</span>\n<span class=\"n\">i_ih</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">i_n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">i_n</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subtype_</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">to_subtype</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">of_subtype</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">i_n</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype_</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i_a</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subtype_</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">to_subtype</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">of_subtype</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">drop_fun</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i_a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subtype_</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Any idea?</p>",
        "id": 203206445,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594157804
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 203209106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594159407
    },
    {
        "content": "<p>Not yet</p>",
        "id": 203209121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594159420
    },
    {
        "content": "<p>Maybe just something with the definition of <code>to_subtype</code> and <code>fin'.raise</code> and everything else stubbed out</p>",
        "id": 203209208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594159471
    },
    {
        "content": "<p>Let's see</p>",
        "id": 203209468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594159650
    },
    {
        "content": "<p>Ok, I got a small-ish example to type check and ... <code>rw</code> doesn't fail</p>",
        "id": 203211729,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594161356
    },
    {
        "content": "<p>Ok now I managed to fail:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">fin&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">raise</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"bp\">|</span> <span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">.</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">typevec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"n\">def</span> <span class=\"n\">arrow</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"err\">⟹</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">arrow</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append1</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span>      <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"n\">def</span> <span class=\"n\">repeat</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">append1</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">i</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_repeat</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">of_repeat</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">typevec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drop</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span>\n\n<span class=\"n\">def</span> <span class=\"n\">last</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">typevec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">typevec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drop_fun</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">drop</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">drop</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">::</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:=</span> <span class=\"n\">append1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subtype_</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subtype_</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drop_fun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">::</span><span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_subtype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">of_repeat</span> <span class=\"err\">$</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"err\">⟹</span> <span class=\"n\">subtype_</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_subtype</span> <span class=\"o\">(</span><span class=\"n\">drop_fun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_subtype</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">subtype_</span> <span class=\"n\">p</span> <span class=\"err\">⟹</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">of_repeat</span> <span class=\"err\">$</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">of_subtype</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">i_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i_a</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">i_n</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">i_n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype_</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_subtype</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"o\">(</span><span class=\"n\">of_subtype</span> <span class=\"n\">p</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">i_a</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_subtype</span><span class=\"o\">,</span><span class=\"n\">to_subtype</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203212105,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594161703
    },
    {
        "content": "<p>It works in 3.10.0 and breaks in 3.11.0</p>",
        "id": 203212635,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594162051
    },
    {
        "content": "<p>I think that where your <code>rw</code> PR came in but I don't see why it would break it</p>",
        "id": 203212655,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594162077
    },
    {
        "content": "<p>which PR is that?</p>",
        "id": 203212840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594162232
    },
    {
        "content": "<p>Instantiate meta vars before applying <code>rw</code></p>",
        "id": 203212916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594162303
    },
    {
        "content": "<p>#?</p>",
        "id": 203213479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594162735
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/213\">lean#213</a></p>",
        "id": 203213696,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594162870
    },
    {
        "content": "<p>You seem to have something funny going on with definitional equality, even before getting to the <code>rw</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">subtype_</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"bp\">=</span> <span class=\"n\">subtype_</span> <span class=\"o\">(</span><span class=\"n\">drop_fun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype_</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"n\">subtype_</span> <span class=\"o\">(</span><span class=\"n\">drop_fun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 203216212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594164935
    },
    {
        "content": "<p>Does it fail also in Lean 3.10?</p>",
        "id": 203216426,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594165087
    },
    {
        "content": "<p>This version of <code>subtype_</code> makes it work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">subtype_</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟹</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drop_fun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">fin&#39;</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203217093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594165681
    },
    {
        "content": "<p>Why does this make a difference?</p>",
        "id": 203217216,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594165798
    },
    {
        "content": "<p>Well for one thing it's doing induction on the <code>fin'</code> instead of induction on <code>nat</code> and then cases on <code>fin'</code></p>",
        "id": 203217687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594166256
    },
    {
        "content": "<p>I see. That fixes your example but not mine though</p>",
        "id": 203217920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594166478
    },
    {
        "content": "<p>there seems to be a similar problem in <code>of_subtype</code></p>",
        "id": 203218367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594166904
    },
    {
        "content": "<p>Adding this modification of <code>of_repeat</code> makes your example work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">of_repeat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">repeat</span> <span class=\"n\">n</span> <span class=\"kt\">Prop</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203218508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167063
    },
    {
        "content": "<p>uh</p>",
        "id": 203218835,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167416
    },
    {
        "content": "<p>How did you zero in on <code>of_repeat</code>?</p>",
        "id": 203218847,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167425
    },
    {
        "content": "<p>I'm suspecting everything that uses the equation compiler right now</p>",
        "id": 203218856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167461
    },
    {
        "content": "<p>because you need defeqs everything has to be clean inductive definitions</p>",
        "id": 203218861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167475
    },
    {
        "content": "<p>None of this is to say that lean isn't being buggy</p>",
        "id": 203218911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167499
    },
    {
        "content": "<p>Has anything changed in the equation compiler lately?</p>",
        "id": 203218937,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167535
    },
    {
        "content": "<p>It is something in the elaborator I think</p>",
        "id": 203218947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167553
    },
    {
        "content": "<p>As the <code>rfl</code> proof shows, it is actually defeq and lean knows it when asked directly</p>",
        "id": 203218982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167587
    },
    {
        "content": "<p>but when it comes up in the application lean is using a different reducibility setting or something and refuses to accept it</p>",
        "id": 203219060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167618
    },
    {
        "content": "<p>In your example, this means that the goal after the first rewrite is \"not well typed\" and this is causing some knock on effect in the second rw</p>",
        "id": 203219101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167675
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> changed the unification to prevent <code>irreducible</code> definitions from getting unfolded. I wonder if this could be a side effect</p>",
        "id": 203219169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167725
    },
    {
        "content": "<p>For these type level recursive definitions, I suggest you stick to using <code>rec_on</code> directly or <code>induction</code>, and prove the equational lemmas yourself</p>",
        "id": 203219218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594167802
    },
    {
        "content": "<p>Fun</p>",
        "id": 203219269,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167843
    },
    {
        "content": "<p>I don't think have PRed the new API functions to register equational lemmas yet. Maybe this would be a good use for it</p>",
        "id": 203219332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594167933
    },
    {
        "content": "<p>Thanks for helping me debug this</p>",
        "id": 203219532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594168177
    }
]