[
    {
        "content": "<p>conjecture: everything that can be proven using <code>funext $ λ x, rfl</code> can be proven using <code>rfl</code></p>",
        "id": 124521378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522664191
    },
    {
        "content": "<p>that's correct (modulo funny business regarding algorithmic equality not really being definitional equality)</p>",
        "id": 124521441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522664353
    },
    {
        "content": "<p>could you expand on your parentheses</p>",
        "id": 124521443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522664364
    },
    {
        "content": "<p>Sometimes lean doesn't know when to eta expand stuff</p>",
        "id": 124521482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522664407
    },
    {
        "content": "<p>could you provide an example</p>",
        "id": 124521492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522664440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def foo : true = true → plift true := @eq.rec Prop true (λ p, plift true) ⟨trivial⟩ true\ndef bar : true = true → plift true := @eq.rec Prop true (λ p, plift p) ⟨trivial⟩ true\nexample : foo = bar := funext $ λ x, rfl\nexample : foo = bar := rfl\n</pre></div>",
        "id": 124521603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522664689
    },
    {
        "content": "<p>ah, that funny <code>rec</code> business</p>",
        "id": 124521611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522664711
    },
    {
        "content": "<p>Mario, aren't you sleeping?</p>",
        "id": 124521612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522664728
    },
    {
        "content": "<p>LOL</p>",
        "id": 124521613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522664732
    },
    {
        "content": "<p>I found myself writing this yesterday:</p>",
        "id": 124523564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Hid :=  λ U OU,funext (λ x,subtype.eq rfl),\nHcomp :=  λ U V W OU OV OW HUV HVW,funext (λ x, subtype.eq rfl)\n</pre></div>",
        "id": 124523566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669223
    },
    {
        "content": "<p>and I couldn't move the rfl</p>",
        "id": 124523568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669241
    },
    {
        "content": "<p><code>subtype.eq rfl</code> cannot be replaced by <code>rfl</code></p>",
        "id": 124523572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522669253
    },
    {
        "content": "<p>and I could understand why <code>subtype.eq</code> wasn't a simp lemma</p>",
        "id": 124523573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669255
    },
    {
        "content": "<p>well it's just <code>congr</code></p>",
        "id": 124523579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522669268
    },
    {
        "content": "<p>because it's <code> a1.val = a2.val → a1 = a2 </code></p>",
        "id": 124523580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669290
    },
    {
        "content": "<p>which doesn't look great for simp</p>",
        "id": 124523581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669297
    },
    {
        "content": "<p>but then I found</p>",
        "id": 124523582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669300
    },
    {
        "content": "<p><code>subtype.mk_eq_mk</code></p>",
        "id": 124523584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669320
    },
    {
        "content": "<p>which is an iff and is marked as a simp lemma</p>",
        "id": 124523626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669357
    },
    {
        "content": "<p>so I was hopeful that <code>by simp</code> would work, but I couldn't get it to</p>",
        "id": 124523635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522669410
    }
]