[
    {
        "content": "<p>Is there a way to define a has_repr instance for finsets ?</p>",
        "id": 128364636,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529504138
    },
    {
        "content": "<p>I would like to run some algorithms with eval</p>",
        "id": 128364637,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529504152
    },
    {
        "content": "<p>One option: use <code>finset.sort</code>.</p>",
        "id": 128364702,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529504272
    },
    {
        "content": "<p>oh ! that's cool, i never noticed it. Thanks</p>",
        "id": 128364765,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529504336
    },
    {
        "content": "<p>No problem. If you come up with something useful, please share it with us.</p>",
        "id": 128364782,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529504391
    },
    {
        "content": "<p>do you need a total order to use it? You could probably get rid of that constraint if you convert each element to string and then sorting the result</p>",
        "id": 128364852,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529504461
    },
    {
        "content": "<p>yes total order is an assumption. good idea</p>",
        "id": 128364936,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529504561
    },
    {
        "content": "<p>By “get rid of,” you mean push the total order off onto the string, right? That's not a bad idea for all of the constraints.</p>",
        "id": 128364939,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529504567
    },
    {
        "content": "<p>Yes, we need a total order on strings but this is readily available. Basically, what I meant was \"weaken the assumptions to make it more generally usable\". What are the other constraints?</p>",
        "id": 128365001,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529504650
    },
    {
        "content": "<p>Right, that's what I thought. So <code>finset.image</code> to <code>string</code> and <code>finset.sort</code> the result.</p>\n<div class=\"codehilite\"><pre><span></span>variables (r : α → α → Prop) [decidable_rel r] [is_trans α r] [is_antisymm α r] [is_total α r]\n</pre></div>",
        "id": 128365019,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529504714
    },
    {
        "content": "<p>Not quite. In this situation, <code>α</code> is now <code>string</code> so <code>r</code> is now the linear order on strings.</p>",
        "id": 128365103,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529504862
    },
    {
        "content": "<p>I don't understand. Something like <code>finset.sort (&lt;) ∘ finset.image to_string</code> doesn't work?</p>",
        "id": 128365291,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529505066
    },
    {
        "content": "<p>there are missing instances for string, they shouldn't be too hard to write</p>",
        "id": 128365353,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529505123
    },
    {
        "content": "<p>Yes it does. But because we're using <code>(&lt;)</code> on string, we have weaker assumptions about <code>α</code> and we can discharge the assumptions about <code>string</code> once and for all. That means that <code>to_repr</code> has type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_repr</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_to_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span>\n</pre></div>\n\n\n<p>instead of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_repr</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_to_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span>\n</pre></div>",
        "id": 128365478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529505289
    },
    {
        "content": "<p>That of course depends on how <code>to_string : α → string</code> is defined for your <code>α</code>.</p>",
        "id": 128365628,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529505496
    },
    {
        "content": "<p>You also need to make sure that  has_repr.to_repr for  \\alpha is injective (and maybe use map instead of image)<br>\nbut that's not so interesting</p>",
        "id": 128365630,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1529505501
    },
    {
        "content": "<p>Interesting, I didn't think of injectivity</p>",
        "id": 128365654,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529505577
    },
    {
        "content": "<p>You could get around it by first converting to a <code>multiset</code> I think</p>",
        "id": 128365661,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529505596
    },
    {
        "content": "<p>But injectivity might be a good law to have in <code>has_to_repr</code></p>",
        "id": 128365720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529505648
    },
    {
        "content": "<p>It's a good point that we can sort strings here, I hadn't thought of that. I'll add a has_repr instance for multiset and finset then</p>",
        "id": 128380291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529524884
    },
    {
        "content": "<p>While you're at it, you could add one for pnat (<code>nat.repr \\circ subtype.val</code>)</p>",
        "id": 128381791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529526610
    },
    {
        "content": "<p>or <code>subtype.has_repr</code></p>",
        "id": 128382396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529527374
    },
    {
        "content": "<p>I also made an instance of has_to_string pnat (when I was goofing around with pnat a few weeks ago).</p>",
        "id": 128382427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529527440
    },
    {
        "content": "<p>Why were you goofing around with pnat?</p>",
        "id": 128382504,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529527536
    },
    {
        "content": "<p>I was trying to get on top of exactly what one should do when defining a new structure in Lean. If I had to define pnat I would start by writing down the definition as a subtype, and then I realised that I would not really know what to do next. So I read pnat.lean quite carefully to try and get a feeling for it. I then read <code>real.lean</code> for the same sort of reason.</p>",
        "id": 128382797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529527899
    }
]