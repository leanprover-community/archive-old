[
    {
        "content": "<p>I have the following tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hd0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n<span class=\"n\">hdc</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n<span class=\"n\">hcb</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">hba</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n<p>I want to lift <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> to <code>nnreal</code>. How do I do that? I feel like there could be a useful tactic similar to <code>repeat</code> and friends.</p>",
        "id": 213031646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602505949
    },
    {
        "content": "<p>I tried <code>do [`a, `b, `c, `d].mmap (λ x, `[lift x to nnreal, swap, linarith])</code> but this is entirely cargo-cult tactic hacking.</p>",
        "id": 213031712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602505987
    },
    {
        "content": "<p>It would be nice if we could write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"o\">],</span> <span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>modulo syntax errors</p>",
        "id": 213031819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506051
    },
    {
        "content": "<p>Do antiquotations work in tactic quotations?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 213031947,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602506144
    },
    {
        "content": "<p>The <code>do</code> also seems to kick me out of interactive mode</p>",
        "id": 213032302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506335
    },
    {
        "content": "<p>If I end that line with a <code>,</code> then I can't do ordinary tactic proving after it.</p>",
        "id": 213032336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506353
    },
    {
        "content": "<p>Also,  the <code>do</code>-line gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 213032375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506380
    },
    {
        "content": "<p>you have to put the entire <code>do</code> block in parentheses, or else the comma will continue the do block instead of the tactic block</p>",
        "id": 213032493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602506439
    },
    {
        "content": "<p>actually I think you can just leave off the <code>do</code> in anne's version</p>",
        "id": 213032528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602506464
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 213032687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602506542
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">])),</span>\n</code></pre></div>\n\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">lift</span> <span class=\"k\">from</span> <span class=\"n\">name</span> <span class=\"n\">to</span> <span class=\"n\">nnreal.</span> <span class=\"n\">Provide</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span>\n  <span class=\"n\">can_lift</span> <span class=\"n\">name</span> <span class=\"n\">nnreal</span>\n</code></pre></div>",
        "id": 213032694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506550
    },
    {
        "content": "<p>So I must have some of the backticks and <code>%%</code> wrong</p>",
        "id": 213032708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506562
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- lift `a,b,c,d` to `nnreal` in a one liner...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213032756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602506602
    },
    {
        "content": "<p>I don't have Lean in front of me. Does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">([</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">])),</span>\n</code></pre></div>",
        "id": 213033042,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602506766
    },
    {
        "content": "<p>wait, can't lift nnreal to nnreal?</p>",
        "id": 213033065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602506782
    },
    {
        "content": "<p>your mwe was wrong</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">([</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">),</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">),</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">),</span><span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">]),</span>\n  <span class=\"c1\">-- lift `a,b,c,d` to `nnreal` in a one liner...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213033098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602506817
    },
    {
        "content": "<p>Ah, triple-backquote.</p>",
        "id": 213033134,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602506840
    },
    {
        "content": "<p>Ooh, I had tried <code> ``` </code>, but without the <code>()</code>.</p>",
        "id": 213033478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602507040
    },
    {
        "content": "<p>My reasoning to use <code> `(a) </code> was that <code> `a </code> gives a <code>name</code> and the error complained about <code>name</code>.</p>",
        "id": 213033676,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602507154
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet\">https://leanprover-community.github.io/extras/tactic_writing.html#marios-backtick-cheat-sheet</a></p>",
        "id": 213033689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602507172
    },
    {
        "content": "<p>I feel like this syntax isn't optimized for one-off hacks like this</p>",
        "id": 213035444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602508172
    },
    {
        "content": "<p>As in, we probably wouldn't want this one-liner ending up in mathlib</p>",
        "id": 213035488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602508200
    },
    {
        "content": "<p>eh, it's fine</p>",
        "id": 213035562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508216
    },
    {
        "content": "<p>I wouldn't mind having something with less sigils</p>",
        "id": 213035597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602508243
    },
    {
        "content": "<p>it used to be single backtick but the assignments got swapped around</p>",
        "id": 213035599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508244
    },
    {
        "content": "<p>because the expr version seemed more useful</p>",
        "id": 213035623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508265
    },
    {
        "content": "<p>I'm sure lean 4 is doing something else</p>",
        "id": 213035665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508290
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">lc</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span> <span class=\"n\">lc.mmap'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">lift</span> <span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}]),</span>\n</code></pre></div>",
        "id": 213036139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508521
    },
    {
        "content": "<p>That certainly has fewer backticks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 213037188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602509022
    }
]