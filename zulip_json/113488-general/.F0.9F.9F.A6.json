[
    {
        "content": "<p>Somehow lean made this happen:</p>",
        "id": 215132841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082145
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/IBpH_jNihNGyvfn4K5hvOsNb/PXL_20201030_182009071.jpg\">PXL_20201030_182009071.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IBpH_jNihNGyvfn4K5hvOsNb/PXL_20201030_182009071.jpg\" title=\"PXL_20201030_182009071.jpg\"><img src=\"/user_uploads/3121/IBpH_jNihNGyvfn4K5hvOsNb/PXL_20201030_182009071.jpg\"></a></div>",
        "id": 215132845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082146
    },
    {
        "content": "<p>On the third try of lean hanging trying to prove what I thought was a simple refl lemma,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_monoid_hom.mk_mk</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">Q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→+</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid_hom.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>(but likely caused by something bad earlier in the file)</p>",
        "id": 215133220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082317
    },
    {
        "content": "<p>Yet another reason to switch to linux</p>",
        "id": 215133359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082383
    },
    {
        "content": "<p>Also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_monoid_hom.mk_mk</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→+</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 215133584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082523
    },
    {
        "content": "<p>I never got as far as actually trying to prove it</p>",
        "id": 215133609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082547
    },
    {
        "content": "<p>In fact, I still can't - I get \"invalid expression\" at the <code>P</code> character</p>",
        "id": 215133932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082737
    },
    {
        "content": "<p>weird...</p>",
        "id": 215133958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082753
    },
    {
        "content": "<p>do you have a file can try opening on my computer?</p>",
        "id": 215133992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082779
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser\">branch#eric-wieser</a>/lean-crash (linkifier is broken)</p>\n<p>You may need to uncomment the `sorry'd definition, since I started editing after lean hung</p>",
        "id": 215134218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082919
    },
    {
        "content": "<p>Ok.</p>",
        "id": 215134340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082970
    },
    {
        "content": "<p>What file?</p>",
        "id": 215134345,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604082974
    },
    {
        "content": "<p><code>algebra/algebra/graded_algebra.lean</code></p>",
        "id": 215134363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604082982
    },
    {
        "content": "<p>Ah, I was able to get a little more from lean this time, \"excessive memory consumption detected at 'parse_notation' (potential solution: increase memory consumption threshold)\"</p>",
        "id": 215135149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604083385
    },
    {
        "content": "<p>Yeah, I'm getting the same memory error.</p>",
        "id": 215135212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604083425
    },
    {
        "content": "<p>But I don't have any oleans for your branch, so it could be from compiling some dependency?</p>",
        "id": 215135292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604083453
    },
    {
        "content": "<p>My guess is it's my <code>local notation g `[`:max i `]`:max := submodule_types g i</code> misfiring</p>",
        "id": 215135549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604083607
    },
    {
        "content": "<p>Within the file</p>",
        "id": 215135557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604083614
    },
    {
        "content": "<p>You can get most of the oleans from <a href=\"https://github.com/leanprover-community/mathlib/tree/dfinsupp-lsum\">branch#dfinsupp-lsum</a></p>",
        "id": 215135591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604083634
    },
    {
        "content": "<p>Or I have a bad unicode character hidden in there somewhere...</p>",
        "id": 215135739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604083699
    },
    {
        "content": "<p>reusing already-used notation such as <code>[</code> can certainly cause problems sometimes, but I've not seen it cause that smiley QR code effect that you posted.</p>",
        "id": 215150435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604092083
    },
    {
        "content": "<p>Bluescreens don't generally happen just because a userspace program misfires. You might want to check whether your hardware is okay, e.g. run <code>memtest</code> on your RAM and run a SMART test on your hard disks.</p>",
        "id": 215151517,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1604092600
    }
]