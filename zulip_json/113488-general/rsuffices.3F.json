[
    {
        "content": "<p>I'm writing a long proof, and it would help to have a tactic <code>rsuffices</code> that relates to <code>suffices</code> as <code>obtain</code> to <code>have</code>. Is it hard to add?</p>",
        "id": 281622677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652050870
    },
    {
        "content": "<p>I'm using <code>suffices : ∃ a, p a, { rcases this with ⟨a, ha⟩, }</code> for now.</p>",
        "id": 281622743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652050950
    },
    {
        "content": "<p>Maybe this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rsuffices</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">obtain_parse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">obtain</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.swap</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>You'd use it like <code>rsuffices ⟨a, ha⟩ : ∃ a, p a, { sorry },</code></p>",
        "id": 281622974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652051312
    },
    {
        "content": "<p>That's taking how <code>suffices</code> works and replacing <code>have</code> in it with <code>obtain</code>.</p>",
        "id": 281622984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652051351
    },
    {
        "content": "<p>(Side question: should we rename <code>obtain</code> to <code>rhave</code>?)</p>",
        "id": 281623133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652051575
    },
    {
        "content": "<p>Oh please no, correct semantical meaning is my hammer argument for using <code>obtain</code> over <code>rcases</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 281623150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652051626
    },
    {
        "content": "<p>It would be interesting if instead of having all these r-variations we could systematically override builtin tactics. I'm not very serious about this since now's probably not the time for a large change, but, spitballing a design, the way interactive tactics work could be through the attributes system -- a tactic becomes interactive by giving it, say, the <code>@[tactic \"foo\"]</code> attribute, where you can override previously added tactics. Then, for example, mathlib could supply an \"intro\" that's implemented by <code>tactic.interactive.rintro</code>.</p>",
        "id": 281623604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652052303
    },
    {
        "content": "<p>I like the idea of replacing basic tactics with mathlib versions but IMHO this can wait till lean 4.</p>",
        "id": 281625240,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652054897
    },
    {
        "content": "<p>In Lean 4 it's possible to expand a tactic syntax with new behavior without replacing the original one</p>",
        "id": 281626530,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652056879
    }
]