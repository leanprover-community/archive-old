[
    {
        "content": "<p>I'm encountering cases where I have a decidable prop <code>p</code> that is also true (which I know because the decidability proof term <code>t : decidable p</code> evaluates to <code>is_true ...</code> when checked with the vm) but <code>exact dec_trivial</code> fails to discharge the goal, with the message </p>\n<div class=\"codehilite\"><pre><span></span>exact tactic failed, type mismatch, given expression has type\n  true\nbut is expected to have type\n  as_true (p)\n</pre></div>\n\n\n<p>Are there specific conditions under which this happens? I'm guessing that some definitions in the decidability proof term is not unfolding, but I'm not sure why. </p>\n<p>This is really strange because it used to work for the exact cases that's broken now. This started happening after I reinstalled mathlib. I wonder if that has anything to do with it.</p>",
        "id": 147484281,
        "sender_full_name": "Seul Baek",
        "timestamp": 1541956662
    },
    {
        "content": "<p>More precisely : are there specific kinds of of definitions that might occur in a <code>t : decidable p</code>  that might prevent <code>as_true p</code> from evaluating to <code>true</code>?  I'm trying <code>exact dec_trivial</code> with various other decidable props, and it seems to have no problem reducing <code>as_true p</code> to <code>true</code>for most choices of <code>p</code>, so I'm wondering what's causing the difference.</p>",
        "id": 147487874,
        "sender_full_name": "Seul Baek",
        "timestamp": 1541963719
    },
    {
        "content": "<p>Can you give a minimum (non)working example that illustrates the problem?</p>",
        "id": 147489969,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541967633
    },
    {
        "content": "<p><a href=\"https://github.com/skbaek/qe/blob/master/src/tests.lean\" target=\"_blank\" title=\"https://github.com/skbaek/qe/blob/master/src/tests.lean\">https://github.com/skbaek/qe/blob/master/src/tests.lean</a></p>\n<p>In the first example </p>\n<div class=\"codehilite\"><pre><span></span>example : âˆƒ (x : int), (x = x) :=\nbegin\n  lia.reify, lia.trim, lia.qelim,\n  exact dec_trivial, exact dec_trivial,\nend\n</pre></div>\n\n\n<p>the second use of <code>exact dec_trivial</code> fails now, although it used to work. <br>\nI'm trying to find a more minimal example that does not require a whole library to reproduce, but I'm having trouble isolating the exact point where it fails</p>",
        "id": 147490427,
        "sender_full_name": "Seul Baek",
        "timestamp": 1541968523
    },
    {
        "content": "<p>I think it would be easier to pinpoint the problem if I can see how far lean evaluates <code>as_true p</code> before failing to match it with <code>true</code>.  Are there options for displaying this?</p>",
        "id": 147490781,
        "sender_full_name": "Seul Baek",
        "timestamp": 1541969208
    },
    {
        "content": "<p>what are the goals there?</p>",
        "id": 147491600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541970615
    },
    {
        "content": "<p>Proofs are irreducible, meaning that definitions by well founded recursion will fail to reduce when using <code>dec_trivial</code> or <code>rfl</code></p>",
        "id": 147491631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541970691
    },
    {
        "content": "<p>I didn't use <code>well_founded</code> in any of the definitions, if that's what you mean</p>",
        "id": 147492318,
        "sender_full_name": "Seul Baek",
        "timestamp": 1541971827
    },
    {
        "content": "<p>Oh I see what you mean. There was a non-structural recursion hiding in one of the defs</p>",
        "id": 147561312,
        "sender_full_name": "Seul Baek",
        "timestamp": 1542069644
    },
    {
        "content": "<p>Hunting these down isn't exactly fun though... a lot of time poring over the text output. Is there some option that displays all defs in a file/folder that use well-founded recursion?</p>",
        "id": 147561483,
        "sender_full_name": "Seul Baek",
        "timestamp": 1542069883
    }
]