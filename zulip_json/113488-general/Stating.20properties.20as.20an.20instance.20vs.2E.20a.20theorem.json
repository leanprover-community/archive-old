[
    {
        "content": "<p>What are the conventions in mathlib about when to state a result as a <code>theorem</code> vs. an <code>instance</code>? And relatedly, what are the conventions about when to make an assumption to a theorem implicit vs. explicit (I don't know if this is the right way to phrase this, but what I mean is when should an assumption be written as <code>[foo X]</code> vs <code>(h : foo X)</code>)?</p>\n<p>The motivation for this question is the current PR on Galois field extensions (<a href=\"https://github.com/leanprover-community/mathlib/issues/4786\">#4786</a>). In that PR, several results about field extensions being Galois are stated as <code>instance</code>s. Specifically, there is a theorem stating that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊆</mo><mi>K</mi><mo>⊆</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">F \\subseteq K \\subseteq E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a tower of field extensions and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E/K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is Galois. Is it better to state this as an <code>instance</code> of the Galois property or as a <code>theorem</code>? And likewise, should the assumption in the theorem that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E/F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is Galois be explicit or implicit?</p>\n<p>After looking at <code>field_theory/normal.lean</code> it looks like maybe the convention is to state things as instances rather than theorems and to make assumptions implicit. But sometimes this can be a little annoying: Lean cannot always infer an instance from the current context and it becomes necessary to insert <code>haveI</code>s in various places.</p>\n<p>So: does mathlib have some conventions about this and, if so, what are they?</p>",
        "id": 215526892,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604448449
    },
    {
        "content": "<p>It's not about conventions, it's about using the type class inference mechanism as much as possible without pushing it to loop forever (or even search for a very long time).</p>",
        "id": 215527002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604448550
    },
    {
        "content": "<p>In this case, I don't think we've done enough with Galois theory yet to know if it will cause that sort of problem. What we have encountered once or twice is having to write <code>haveI</code> to establish that an implicit assumption of Galois-ness or normality holds</p>",
        "id": 215527099,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604448627
    },
    {
        "content": "<p>The main time you don't want to make a term of a typeclass into an instance is when you might be dealing with more than one term of that type</p>",
        "id": 215527235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604448749
    },
    {
        "content": "<p>Actually, some things in <code>field_theory/galois.lean</code> are very slow, but I think that might be for an unrelated reason</p>",
        "id": 215527260,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604448767
    },
    {
        "content": "<p>Eg you're considering several topologies on a type</p>",
        "id": 215527262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604448769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I would amend your statement to add that if your definition has non-trivial assumptions (i.e. assumptions that can't be synthesized through type class resolution or unification), you also don't want it to be an instance</p>",
        "id": 215527353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604448850
    },
    {
        "content": "<p>Another time is when the term contains some function and you'd for some reason like to have another (perhaps equal but not defeq) description of that function in your instance</p>",
        "id": 215527364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604448860
    },
    {
        "content": "<p>Simon knows a lot more about this stuff than I do!</p>",
        "id": 215527380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604448889
    },
    {
        "content": "<p>Well, I guess with a property like <code>normal</code> or <code>galois</code> we don't care if there's multiple reasons that an extension is <code>normal</code> or <code>galois</code>so the problem in the example with multiple topologies on the same space probably isn't an issue here?</p>",
        "id": 215527398,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604448908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/Stating.20properties.20as.20an.20instance.20vs.2E.20a.20theorem/near/215527353\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> I would amend your statement to add that if your definition has non-trivial assumptions (i.e. assumptions that can't be synthesized through type class resolution or unification), you also don't want it to be an instance</p>\n</blockquote>\n<p>This was my interpretation of what Patrick Massot was saying</p>",
        "id": 215527418,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604448932
    },
    {
        "content": "<p>Patrick was highlighting a different issue. Sometimes, from instance <code>A</code> you can infer instance <code>B</code> and from <code>B</code> you can infer <code>C</code> and then back <code>A</code>. That's going to cause trouble with type class resolution</p>",
        "id": 215527524,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604449028
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 215527549,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604449064
    },
    {
        "content": "<p>What I was talking about is that you have an assumption such as <code>x ≤ y</code> that does not have a canonical way to satisfy</p>",
        "id": 215527555,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604449071
    },
    {
        "content": "<p>The two specific things I'm asking about here are these: <a href=\"https://github.com/leanprover-community/mathlib/blob/9305c59bc289c1284978d1f69a9ba6a085b8240f/src/field_theory/galois.lean#L46\">https://github.com/leanprover-community/mathlib/blob/9305c59bc289c1284978d1f69a9ba6a085b8240f/src/field_theory/galois.lean#L46</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/9305c59bc289c1284978d1f69a9ba6a085b8240f/src/field_theory/galois.lean#L101\">https://github.com/leanprover-community/mathlib/blob/9305c59bc289c1284978d1f69a9ba6a085b8240f/src/field_theory/galois.lean#L101</a></p>",
        "id": 215527731,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604449206
    },
    {
        "content": "<p>I'm not sure whether the assumptions in those instances have canonical ways to satisfy</p>",
        "id": 215527757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1604449227
    },
    {
        "content": "<p>In the first case, I would say so. You're trying to create a term of type <code> is_galois (mul_action.fixed_points G E) E</code>, <code>G</code> and <code>E</code> are fixed.</p>",
        "id": 215527985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604449403
    },
    {
        "content": "<p>With <code>G</code> and <code>E</code> fixed the rest are 0) type class resolution problems; 1) the problems are smaller than what you're currently handling. It should not loop and it should find a solution</p>",
        "id": 215528277,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604449639
    }
]