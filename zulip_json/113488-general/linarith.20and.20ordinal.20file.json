[
    {
        "content": "<p>I have tried to use <code>linarith</code> in the file <code>set_theory/ordinal.lean</code>, but it doesn't work. The minimal example is as follows. Import <code>tactic.linarith</code> at the top of the file. In the middle of the file (Line 996), there is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_iff_le_and_ne</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">one_ne_zero</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Now, try pasting a linarith lemma before this lemma. It works. After the lemma, it fails.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">works</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_iff_le_and_ne</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">one_ne_zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>So I guess <code>linarith</code> gets confused in some way by the ordinal lemma <code>zero_lt_one</code>.</p>",
        "id": 204350860,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595166565
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204354048,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595170220
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3455\">#3455</a></p>",
        "id": 204354325,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595170561
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 204355108,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595171363
    }
]