[
    {
        "content": "<p>I have a new idea to construct an algebraic closure of a field F: for each (monic (irreducible)) polynomial p let Fp be a splitting field of p over F, and take the tensor product of all the Fp together (there is a construction of tensor product without direct limit but the direct limit construction might grant us quicker the fact that the ring is nonzero), and then quotient by a maximal ideal</p>",
        "id": 166586393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558895144
    },
    {
        "content": "<p>I'd suggest something similar but a tiny bit different.  If <code>p</code> is monic of degree <code>n</code>, let <code>A_p</code> be the quotient of <code>F[a_1,..,a_n]</code> by the coefficients of <code>p - (x - a_1) * ... * (x - a_n)</code>.  The splitting field <code>L_p</code> is then the quotient of <code>A_p</code> by a maximal ideal.  Let <code>A</code> be the tensor product of all the <code>A_p</code>, and let <code>B</code> be the tensor product of all the <code>L_p</code>.  You are proposing to take the quotient of <code>B</code> by a maximal ideal, but it works just as well to take the quotient of <code>A</code> by a maximal ideal.  Moreover, you can specify a basis for <code>A_p</code> over <code>F</code> depending only on the degree of <code>p</code>, whereas the dimension of <code>L_p</code> depends in a delicate way on the Galois theoretic properties of <code>p</code>.  This makes it easier to deal with <code>A</code>.  Also, you can define <code>A</code> without explicit recourse to tensor products: you just take a polynomial ring over <code>F</code> with generators <code>a_{p,i}</code> for <code>i &lt; deg (p)</code> and take an appropriate quotient.</p>",
        "id": 166587069,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558896199
    },
    {
        "content": "<p>but we already have splitting fields</p>",
        "id": 166592739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558905606
    },
    {
        "content": "<p>I know we have splitting fields.  But if you want to use splitting fields then you need to deal with colimits and tensor products, which you can avoid by the approach that I suggested.  And you will need to work a bit harder to verify that the relevant ring is nonzero.</p>",
        "id": 166593443,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558906838
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra_operations</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">monic_irred</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"bp\">//</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">monic</span> <span class=\"bp\">∧</span> <span class=\"kn\">irreducible</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">big_ring</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">monic_irred</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">big_ideal</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span> <span class=\"n\">q</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">monic_irred</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">big_basis</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">q</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">monic_irred</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">asdf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">ghjk</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">theorem</span> <span class=\"n\">big_basis</span><span class=\"bp\">.</span><span class=\"n\">is_basis</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_basis</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 166596633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558912304
    },
    {
        "content": "<p>when you want to rejoin Lean but you remember the frustration of <code>maximum class-instance resolution depth has been reached</code></p>",
        "id": 166596676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558912332
    },
    {
        "content": "<p>It's usually user error :-/</p>",
        "id": 166611003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558937217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I suggest you talk with <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> about this. I was under the impression that he was almost done with algebraic closures, and that it would happen in about a week (or two) after the exams were over. He was planning to use your open PRs</p>",
        "id": 166611021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558937280
    },
    {
        "content": "<p>I've been working on those PRs, and at least <a href=\"https://github.com/leanprover-community/mathlib/issues/734\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/734\">#734</a> is waiting for review by others.</p>",
        "id": 166611074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558937325
    },
    {
        "content": "<p>...or can be fixed by pretending there isn't a problem and bumping up the number</p>",
        "id": 166611100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558937382
    },
    {
        "content": "<p>I had to bump it to 250 in <a href=\"https://github.com/leanprover-community/mathlib/issues/1085\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1085\">#1085</a> !</p>",
        "id": 166611546,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558938108
    },
    {
        "content": "<p>:O</p>",
        "id": 166611723,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558938361
    },
    {
        "content": "<p>Typeclass resolution is actually garbage</p>",
        "id": 166611770,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558938375
    },
    {
        "content": "<p>In 4 we could write our own, right?</p>",
        "id": 166611885,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558938555
    },
    {
        "content": "<p>We had a recent effort to make things <code>irreducible</code> after their API's had been reasonably fleshed out. Would that help in keeping this number in check?</p>",
        "id": 166611887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558938571
    },
    {
        "content": "<p>I don't really know why it has to be that huge here. It is probably related to products and to the fact that things are rather unbundled: the definition of a topological module is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">topological_module</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">topological_semimodule</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>\n\n\n<p>You can see how many typeclasses this depends on.</p>",
        "id": 166612950,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558940016
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">asdf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">qwer</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">((</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">  ⁇</span>\n<span class=\"cm\">inferred</span>\n<span class=\"cm\">  mv_polynomial.comm_ring</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Could this be something to do with it?</p>",
        "id": 166614089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558941451
    },
    {
        "content": "<p>no wait, that's my user error (no F)</p>",
        "id": 166614158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558941535
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">36</span> <span class=\"c1\">-- and no lower</span>\n<span class=\"kn\">instance</span> <span class=\"n\">asdf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">86</span> <span class=\"c1\">-- and no lower</span>\n<span class=\"kn\">instance</span> <span class=\"n\">zxcv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>Why is this nonsense happening?</p>",
        "id": 166614705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558942146
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">36</span> <span class=\"c1\">-- and no lower</span>\n<span class=\"kn\">instance</span> <span class=\"n\">asdf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ring</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">86</span> <span class=\"c1\">-- and no lower</span>\n<span class=\"kn\">instance</span> <span class=\"n\">zxcv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">wert</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">qwer</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">big_ideal</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 166615343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558942918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is the issue simply this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>This should probably fail, because Lean does not know that the R-module structure on S has anything to do with the ring structure.</p>",
        "id": 166615636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558943184
    },
    {
        "content": "<p>Aah, but this also fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 166615662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558943229
    },
    {
        "content": "<p>We humans are too clever. We synthesize the instance automatically.</p>",
        "id": 166615726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558943291
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>Are there just some missing instances? Should these even be instances? There is no mention of <code>S</code> in the conclusion.</p>",
        "id": 166615945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558943601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you know the instance \"map\" for this stuff better than me -- is this the issue?</p>",
        "id": 166616107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558943772
    },
    {
        "content": "<p>oh I'm stupid</p>",
        "id": 166616145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558943859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> what is your progress on algebraic closure?</p>",
        "id": 166619266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558946987
    },
    {
        "content": "<p>Mostly done, although I am refactoring. I proved it is algebraically closed, and am just refactoring to make it neater to show that there is a hom from any algebraic extension into the closure. This refactoring is much slower than expected however, and I'm bundling homs right now to make it easier.</p>\n<p>I did sorry a couple of facts, the fact that <code>adjoin_root</code> is an algebraic extension, and the fact that an algebraic extension of an algebraic extension is algebraic over the first field. I was hoping that you were close to proving these, as some of your PRs looked like they were leading to this.</p>",
        "id": 166621383,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558948821
    },
    {
        "content": "<p>I thought I already proved that result</p>",
        "id": 166621927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558949323
    },
    {
        "content": "<p>oh it was meant to be the PR after <a href=\"https://github.com/leanprover-community/mathlib/issues/756\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/756\">#756</a></p>",
        "id": 166622587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558949903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  <a href=\"https://github.com/leanprover-community/mathlib/issues/1087\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1087\">#1087</a></p>",
        "id": 166628760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558956409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  What is the status on the algebraic closure? I am interested in working with algebraic extensions in mathlib. Are you planning on putting it into mathlib anytime in the future?</p>",
        "id": 170627539,
        "sender_full_name": "Casper Putz",
        "timestamp": 1562848006
    },
    {
        "content": "<p>I pushed some stuff to the algebraic closure branch of community mathlib.<br>\nThe file <code>field_theory/algebraic_closure</code> is the closest thing to compiling.</p>\n<p>It looks like I was half way through changing a bunch of assumptions from <code>is_algebraically_closed</code> to contains all the roots of polynomials in the base field.</p>\n<p>There is another file in there <code>algebraic_closure2</code> or something, where I am halfway through a refactor, that might make some of the proofs a bit shorter, but probably isn't worth the effort.</p>\n<p>I was planning a refactor to use algebra homs instead of field homs, and also a refactor to use Kenny's definition <code>is_integral</code> instead of the predicate I defined.</p>\n<p>I'd be very happy to pass this on. Honestly, I won't have that much time to look at it, but I'm very happy to answer questions from anyone who wants to take it on.</p>\n<p>Sorry for the delay.</p>",
        "id": 171378258,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563725580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198529\">@Casper Putz</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 171406405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563776342
    },
    {
        "content": "<p>I've started playing with algebraic closure again.</p>\n<p>One issue is that direct limit is not set up very well for bundled homomorphisms currently. It should probably be done using category theory. I'd like to use bundled algebra homs, but the definition <code>directed_system</code> is only defined on functions, not bundled homs. I think I'm going to have to refactor. I was taking a direct limit where the indexing type was large, which won't sit too well with the category theory library currently.</p>",
        "id": 172217724,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564664369
    },
    {
        "content": "<p>Sorry for the late response. I was on holiday.<br>\nThanks for your updates. I also don't have a lot of time to delve into.</p>",
        "id": 172222335,
        "sender_full_name": "Casper Putz",
        "timestamp": 1564667745
    },
    {
        "content": "<p>For the things I am doing it seemed more natural to not carry around an algebraic closure when talking about algebraic field extensions. So I am now working with field homs now. But of course we still need the algebraic at some point.</p>",
        "id": 172222344,
        "sender_full_name": "Casper Putz",
        "timestamp": 1564667752
    },
    {
        "content": "<p>Can you explain about the size of the indexing type? (I don't know how you're doing algebraic closure.)</p>",
        "id": 172266239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564697697
    },
    {
        "content": "<p>I had this type, and took the maximal element of this type using zorn. I had to use direct limit to prove the condition for Zorn's lemma. The indexing type was <code>extension K</code>. I would then prove the type was isomorphic to something in <code>Type u</code> and transfer the field structure</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"err\">↪</span> <span class=\"n\">big_type</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_field_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_field_hom</span> <span class=\"n\">lift</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">algebraic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebraic</span> <span class=\"n\">lift</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I'm not following this approach any more, I'll just use a smaller type for extension, where the field structure has to be on a subset of <code>big_type : Type u</code>. This involves slightly more transferring field structures across isomorphisms, but shouldn't be that much more effort, if at all.</p>",
        "id": 172268193,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564699504
    },
    {
        "content": "<p>I believe I could probably get a version of algebraic closure done this weekend with a few sorries. The structure of the proof will all be there, so anyone will be able to help fill in the sorries without having to understand the entire approach.</p>",
        "id": 172295184,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564737960
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1297\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1297\">#1297</a></p>",
        "id": 172420999,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564865749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> What is the status here? If we fill in all the sorries in <code>algebraic_closure.lean</code>, then we are done right?</p>",
        "id": 174120328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566804135
    },
    {
        "content": "<p>We've had some nice community efforts recently. This might be a good one for the end of this month.</p>",
        "id": 174120344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566804162
    },
    {
        "content": "<p>Yes. However, it would be nicer to do some refactoring first, and get <code>direct_limit</code> to use bundled ring homs.</p>",
        "id": 174120600,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566804541
    },
    {
        "content": "<p>Because I really don't want to make the refactor that will have to be done way harder by adding a bunch of stuff with unbundled homs.</p>",
        "id": 174120625,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566804581
    },
    {
        "content": "<p>Ok, I'll work on the top few sorries (min polynomials)</p>",
        "id": 174120812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566804800
    },
    {
        "content": "<p>That should be independent, I guess.</p>",
        "id": 174120819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566804808
    },
    {
        "content": "<p>Just realised one of them is false.</p>",
        "id": 174120822,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566804814
    },
    {
        "content": "<p>That was sloppy of me.</p>",
        "id": 174120835,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566804823
    },
    {
        "content": "<p>No worries</p>",
        "id": 174121173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566805254
    },
    {
        "content": "<p>I can make a PR today changing <code>semiring_hom</code> to <code>ring_hom</code> if that'd help - I'm thinking of removing <code>semiring_hom</code> completely and just adding good docstrings to say that <code>ring_hom</code> should be used for semiring homs too, unless there's a better way.</p>",
        "id": 174136975,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1566822691
    },
    {
        "content": "<p>I just pushed a change</p>",
        "id": 174138305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566824091
    },
    {
        "content": "<p>I put <code>minimal_polynomial</code> in its own file. The top of the file now contains a whole bunch of stuff that should move to <code>polynomial.lean</code>.</p>",
        "id": 174138325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566824116
    },
    {
        "content": "<p>I've filled in all the sorries about minimal polynomials.</p>",
        "id": 174138340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566824130
    },
    {
        "content": "<p>Removed the next sorry as well.</p>",
        "id": 174142282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566827097
    },
    {
        "content": "<p>How about putting the minimal polynomial stuff in a separate PR?</p>",
        "id": 174142502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566827267
    },
    {
        "content": "<p>I'm fine with that</p>",
        "id": 174142612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566827345
    },
    {
        "content": "<p>Anyone who wants to join in can help</p>",
        "id": 174142627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566827354
    },
    {
        "content": "<p>I was hoping that we could push this like we did with sensitivity and the IMO problems</p>",
        "id": 174142661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566827380
    },
    {
        "content": "<p>There are already a whole lot of <code>-- move this</code> comments that could also be put into a separate PR</p>",
        "id": 174143338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566827790
    },
    {
        "content": "<p>I pushed more stuff to this branch. I moved an instance up a bit, and generalised if from discrete fields to rings. Now Lean is unhappy.</p>",
        "id": 174154602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566835433
    },
    {
        "content": "<p>Need to catch a train. Will look at this later.</p>",
        "id": 174154614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566835441
    },
    {
        "content": "<p>Removed another <code>sorry</code>, and pushed.</p>",
        "id": 174175080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566852001
    },
    {
        "content": "<p>Merged two sorries. Pushed.</p>",
        "id": 174214576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566901186
    },
    {
        "content": "<blockquote>\n<p>I can make a PR today changing <code>semiring_hom</code> to <code>ring_hom</code> if that'd help - I'm thinking of removing <code>semiring_hom</code> completely and just adding good docstrings to say that <code>ring_hom</code> should be used for semiring homs too, unless there's a better way.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> Thanks for all your hard work! I'm pretty sure this is going to pay off in the long run.</p>",
        "id": 174216674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566903062
    },
    {
        "content": "<p>No problem! Thanks for reviewing it.</p>",
        "id": 174216758,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1566903124
    },
    {
        "content": "<p>The file on algebraic closures is quite a tangle. I'm not sure if bundled homs will be used this time. I still haven't understood which parts of the file are essential, and which ones aren't.</p>",
        "id": 174216760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566903125
    },
    {
        "content": "<p>It would be nice if it were easier to explore such dependency graphs... for example in VScode....</p>",
        "id": 174216797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566903168
    },
    {
        "content": "<blockquote>\n<p>The file on algebraic closures is quite a tangle. I'm not sure if bundled homs will be used this time. I still haven't understood which parts of the file are essential, and which ones aren't.</p>\n</blockquote>\n<p>I think all parts of the file on algebraic closures are essential, except perhaps one def where there is a comment saying it might be unnecessary.</p>",
        "id": 174218030,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566904089
    },
    {
        "content": "<p>I feel like you never use the direct limit stuff</p>",
        "id": 174218242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566904331
    },
    {
        "content": "<p>In the end you just write an explicit union</p>",
        "id": 174218248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566904344
    },
    {
        "content": "<p>But I need the direct limit to put a field structure on it.</p>",
        "id": 174218261,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566904361
    },
    {
        "content": "<p>Aah, right, now I see.</p>",
        "id": 174218263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566904367
    },
    {
        "content": "<p>I could have done that without direct limit, but the argument was actually quite hard, even thought it's \"obvious\".</p>",
        "id": 174218300,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566904405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I'm confused about the preorder that you put on <code>extension K</code></p>",
        "id": 174219365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566905372
    },
    {
        "content": "<p>Don't you want the inclusions to be algebra homs, instead of merely ring homs?</p>",
        "id": 174219380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566905390
    },
    {
        "content": "<p>Or am I missing something?</p>",
        "id": 174219385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566905396
    },
    {
        "content": "<p>You'd have thought so, but the proof seems to go through without it. I was surprised as well.</p>",
        "id": 174220122,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566906056
    },
    {
        "content": "<p>Can you not prove the maximal extension is algebraic without it?</p>",
        "id": 174220255,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566906193
    },
    {
        "content": "<p>Makes sense that you wouldn't be able to do that.</p>",
        "id": 174220278,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566906216
    },
    {
        "content": "<p>I'm currently refactoring it, to include the assumption</p>",
        "id": 174220753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566906632
    },
    {
        "content": "<p>Perhaps it's useful to make an <code>is_alg_hom</code> predicate if there isn't one already?</p>",
        "id": 174221447,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566907255
    },
    {
        "content": "<p>Ok, for the existence of an algebraic closure, there is 1 sorry left.</p>",
        "id": 174223235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566908801
    },
    {
        "content": "<p>For the ump there are still a few more.</p>",
        "id": 174223243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566908810
    },
    {
        "content": "<p>(UMP = every algebraic extension embeds into K-bar)</p>",
        "id": 174223261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566908832
    },
    {
        "content": "<p>What is the one sorry?</p>",
        "id": 174223598,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566909081
    },
    {
        "content": "<p>That being an algebraic extension is transitive.</p>",
        "id": 174229293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566913012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do we have anything of the form <code>M/L</code> is fg and <code>L/K</code> is fg, hence <code>M/K</code> is fg?</p>",
        "id": 174235526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566916912
    },
    {
        "content": "<p>Where <code>M/L/K</code> is a tower of algebras (or subalgebras)...</p>",
        "id": 174235595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566916933
    },
    {
        "content": "<p>I think so</p>",
        "id": 174235617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1566916945
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174236562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566917534
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174236576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566917548
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174236595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566917567
    },
    {
        "content": "<p>Here is what I have now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">adjoin_root</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">adjoin_root</span><span class=\"bp\">.</span><span class=\"n\">is_integral</span> <span class=\"n\">hif</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">pmonic</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Bfg</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">fg_adjoin_of_finite</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">qmonic</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">qmonic</span><span class=\"o\">],</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">hq</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">hom_eval₂</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"bp\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- (1) we know that x is integral over L, by adjoin_root.is_integral</span>\n  <span class=\"c1\">-- (2) we know that B is fg over K</span>\n  <span class=\"c1\">-- (3) we want to say that adjoin B {x} is fg over B, because (1)</span>\n  <span class=\"c1\">-- (4) hence adjoin B {x} is fg over K</span>\n  <span class=\"c1\">-- (5) and then we are done by is_integral_of_mem_of_fg</span>\n\n  <span class=\"c1\">-- refine is_integral_of_mem_of_fg (algebra.adjoin K S) _ x (algebra.subset_adjoin $ mem_insert _ _),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174237082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566917918
    },
    {
        "content": "<p>Any help with removing this sorry is very much appreciated.</p>",
        "id": 174237111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566917944
    },
    {
        "content": "<p>I need to start moving to a train now</p>",
        "id": 174237120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566917949
    },
    {
        "content": "<p>This is the final sorry in the definition of the algebraic closure...</p>",
        "id": 174237228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566918010
    },
    {
        "content": "<p>Transitivity of fg is here: <a href=\"https://github.com/leanprover-community/mathlib/blob/d2c5309d0bc66bdf813b4510dfe0a1d7523cad0a/src/ring_theory/adjoin.lean#L109\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d2c5309d0bc66bdf813b4510dfe0a1d7523cad0a/src/ring_theory/adjoin.lean#L109\">https://github.com/leanprover-community/mathlib/blob/d2c5309d0bc66bdf813b4510dfe0a1d7523cad0a/src/ring_theory/adjoin.lean#L109</a></p>",
        "id": 174238756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566919022
    },
    {
        "content": "<p>All in all, this is becoming a very sad experience.</p>",
        "id": 174268330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937744
    },
    {
        "content": "<p>I've reduced the final sorry to a content-free battle against the type-class system.</p>",
        "id": 174268365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937761
    },
    {
        "content": "<p>There are now 4 goals left of the form <code>is_monoid_hom coe</code>.</p>",
        "id": 174268405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937772
    },
    {
        "content": "<p>And whatever I do: deterministic timeout.</p>",
        "id": 174268419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937783
    },
    {
        "content": "<p>If someone wants to help me out, that would be much appreciated.</p>",
        "id": 174268509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937820
    },
    {
        "content": "<p>I need to go to bed now.</p>",
        "id": 174268520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937835
    },
    {
        "content": "<p>I've pushed all my changes to <a href=\"https://github.com/leanprover-community/mathlib/blob/algebraic_closure/src/field_theory/algebraic_closure.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/algebraic_closure/src/field_theory/algebraic_closure.lean\">https://github.com/leanprover-community/mathlib/blob/algebraic_closure/src/field_theory/algebraic_closure.lean</a></p>",
        "id": 174268726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566937926
    },
    {
        "content": "<p>The evil combination \"coercion + hom\" is the mostly effective way to bring Lean 3 to its limit.</p>",
        "id": 174311409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566940370
    },
    {
        "content": "<p>What is the <code>coe</code> in question?</p>",
        "id": 174311551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566940508
    },
    {
        "content": "<p>Are we talking about <a href=\"https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L604\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L604\">https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L604</a>? Even without reading anything or running Lean, it's clear that something is not yet setup right</p>",
        "id": 174312158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566941068
    },
    {
        "content": "<p>Bundled homs is the solution.</p>",
        "id": 174312933,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566941835
    },
    {
        "content": "<p>Also I think that <code>coe</code> might be bad.</p>",
        "id": 174312954,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566941862
    },
    {
        "content": "<p>Bundled homs are a major pain. For example, I've tried to use <code>subalgebra.val B</code>, which is a bundled algebra hom. But the coercion to function doesn't fire (even with 23 type ascriptions and up arrows). So I fall back to <code>algebra_map</code>.</p>",
        "id": 174332328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566967966
    },
    {
        "content": "<p>Another data point:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">aeval</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">polynomial</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)]</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>Stupid Lean!!! If you expect a function, why don't you try to see if you can coerce the stupid thing??</p>",
        "id": 174333251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566969228
    },
    {
        "content": "<p>Maybe it's not actually bundled homs that we need, but bundled algebras</p>",
        "id": 174333547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566969691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Do you remember why you need these instances for <code>adjoin_root</code>?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L586\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L586\">https://github.com/leanprover-community/mathlib/blob/f3620a68e9e1913ba42fa2951c44e70c63b37785/src/field_theory/algebraic_closure.lean#L586</a></p>",
        "id": 174335297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566972145
    },
    {
        "content": "<p>Is this something with putting them at the top of the stack, so that they are found faster?</p>",
        "id": 174335307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566972173
    },
    {
        "content": "<p>Because those instances already exist, right...</p>",
        "id": 174335312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566972183
    },
    {
        "content": "<p>I guess it must be just so that they are found faster, or at all. At some point I was going to go through the file and make all the instances local, since they're about private defs anyway.</p>",
        "id": 174335394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1566972360
    },
    {
        "content": "<blockquote>\n<p>Another data point:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">aeval</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">polynomial</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)]</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>Stupid Lean!!! If you expect a function, why don't you try to see if you can coerce the stupid thing??</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any idea why these things happen?</p>",
        "id": 174335611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566972682
    },
    {
        "content": "<p>The usual reason is because there are metavariables in the type that is being coerced to a function</p>",
        "id": 174345263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566983463
    },
    {
        "content": "<p>I don't see them in this snippet but it's possible they are hidden in an implicit</p>",
        "id": 174345282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566983483
    },
    {
        "content": "<p>I'll try some more</p>",
        "id": 174345296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566983498
    },
    {
        "content": "<p>It's probably the up arrow</p>",
        "id": 174345299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566983502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">algebraic_trans</span> <span class=\"o\">(</span><span class=\"n\">B_alg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_integral_trans</span> <span class=\"n\">A_alg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">B_alg</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 174354434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993336
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">adjoin_root</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_integral_trans</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"n\">adjoin_root</span><span class=\"bp\">.</span><span class=\"n\">is_integral</span> <span class=\"n\">hif</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 174354828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993719
    },
    {
        "content": "<p>That's everything that's left of the big mess that I complained about earlier.</p>",
        "id": 174354881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993733
    },
    {
        "content": "<p>In particular, we have a sorry-free definition of the algebraic closure!</p>",
        "id": 174354904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993772
    },
    {
        "content": "<p>Does it have any property, or is it only a type build out of a field?</p>",
        "id": 174354929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566993803
    },
    {
        "content": "<p>It is an algebraically closed field that is algebraic over the field you start with.</p>",
        "id": 174355010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993854
    },
    {
        "content": "<p>What remains is to show that every algebraic extension embeds into it.</p>",
        "id": 174355017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993866
    },
    {
        "content": "<p>Nice!</p>",
        "id": 174355022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566993872
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 174355026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566993877
    },
    {
        "content": "<p>Did you learn any useful new trick? Or is it the old trick of being more patient than Lean?</p>",
        "id": 174355167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994001
    },
    {
        "content": "<p>Generalising, and proving helper lemmas...</p>",
        "id": 174355201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994028
    },
    {
        "content": "<p>extract_goal is very useful <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 174355215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994050
    },
    {
        "content": "<p>It should just come with a bit more VScode glue, so that it write all my code for me (-;</p>",
        "id": 174355281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994090
    },
    {
        "content": "<p>I still see lines like <code>refine @eval_map _ _ _ _ _ _ _ _ (by exact is_ring_hom.is_semiring_hom _) _ </code> that show some suffering</p>",
        "id": 174355293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994107
    },
    {
        "content": "<p>especially since that line is actually closing a goal</p>",
        "id": 174355317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994134
    },
    {
        "content": "<p>(1) It should cook up a meaningul name. (2) It should paste the code above the current declaration. (3) It should take into account existing variables. (4) It should gracefully handle <code>let</code> statements. (5) It should apply the extracted lemma at the location of calling <code>extract_goal</code>, in order to close the goal in question.</p>",
        "id": 174355343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994172
    },
    {
        "content": "<p>and make some coffee</p>",
        "id": 174355356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994197
    },
    {
        "content": "<p>True, there was still a small amount of suffering involved. Probably because I'm cheating there.</p>",
        "id": 174355403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994207
    },
    {
        "content": "<p>What kind of cheating?</p>",
        "id": 174355428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994239
    },
    {
        "content": "<p>I'm identifying <code>comap R A B</code> with <code>B</code>. I should probably use the ring homs <code>to_comap</code> and <code>of_comap</code> to move between the two.</p>",
        "id": 174355449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I realise that those 5 feature requests have very different orders of feasability. I just posted them in a random order to stimulate your imagination (-;</p>",
        "id": 174355745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994513
    },
    {
        "content": "<p>For instance, it could also pat the author on the back after succeeding.</p>",
        "id": 174355854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994614
    },
    {
        "content": "<p>Wait, you mean that <code>extract_goal</code> doesn't yet buy Simon a beer each time it's called?</p>",
        "id": 174356010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994761
    },
    {
        "content": "<p>I meant <em>your</em> back</p>",
        "id": 174356031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994788
    },
    {
        "content": "<p>I'd love Lean to congratulate me more often when I win a big fight</p>",
        "id": 174356087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994816
    },
    {
        "content": "<p>The \"goals accomplished\" congratulation is too generic</p>",
        "id": 174356107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994839
    },
    {
        "content": "<p>But if you win the fight using Simon's tools. Doesn't he also deserve a pat on the back? Especially if he doesn't even know you're using his tools.</p>",
        "id": 174356124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566994861
    },
    {
        "content": "<p>and using extract_goal is a clear big fight indication</p>",
        "id": 174356125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994862
    },
    {
        "content": "<p>Sure</p>",
        "id": 174356237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566994949
    },
    {
        "content": "<p>:) I'm glad you're enjoying the tool</p>",
        "id": 174356275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566994985
    },
    {
        "content": "<p>I don't think I have an approach on any of those features (except for making coffee :P). I'm not familiar with the writing of tools in VS code so that doesn't make things easier but even in emacs, I'm not sure how I would do them</p>",
        "id": 174356383,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566995072
    },
    {
        "content": "<p>I thought you knew about hole commands</p>",
        "id": 174356411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566995098
    },
    {
        "content": "<p>I remember you writing some</p>",
        "id": 174356427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566995106
    },
    {
        "content": "<p>Yes I know about hole commands but they don't mix well with tactic proofs and I don't think they can affect any of the text outside of the <code>{!  !}</code> brackets</p>",
        "id": 174356563,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566995190
    },
    {
        "content": "<p>To write those features, we need an editor plugin with a notion of where declarations begin and end</p>",
        "id": 174356717,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566995283
    },
    {
        "content": "<p><a href=\"https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg\" target=\"_blank\" title=\"https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg\">https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg</a> looks promising</p>\n<div class=\"message_inline_image\"><a href=\"https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg\" target=\"_blank\" title=\"https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg\"><img src=\"https://images-na.ssl-images-amazon.com/images/I/61JxY8tH-yL._SL1000_.jpg\"></a></div>",
        "id": 174356783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566995356
    },
    {
        "content": "<p>As for treating variables better, I had a look a couple of weeks ago into adding some introspection into the variable mechanism in Lean 3.5 and it was more complicated than expected and I didn't pursue it</p>",
        "id": 174356789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566995365
    },
    {
        "content": "<p>Oh sorry, you meant the other features</p>",
        "id": 174356797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566995375
    },
    {
        "content": "<p>I guess we would need a coffee monad in order to handle real-world side effects</p>",
        "id": 174357062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566995541
    },
    {
        "content": "<p>Easy peasy!</p>",
        "id": 174359236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566997107
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/vdi3fqC0-AnxFCUhOCzYkuGD/coffee-maker.png\" target=\"_blank\" title=\"coffee-maker.png\">Sorry, the (almost) anagram was too tempting</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vdi3fqC0-AnxFCUhOCzYkuGD/coffee-maker.png\" target=\"_blank\" title=\"Sorry, the (almost) anagram was too tempting\"><img src=\"/user_uploads/3121/vdi3fqC0-AnxFCUhOCzYkuGD/coffee-maker.png\"></a></div>",
        "id": 174362535,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1566999328
    },
    {
        "content": "<p>You should sneak Erdos into that picture (-;</p>",
        "id": 174362627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1566999370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How hard is it to fill in this hole?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">subalgebra</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Sup</span><span class=\"bp\">.</span><span class=\"n\">desc</span> <span class=\"o\">(</span><span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Ss</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S₁</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">Ss</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S₁</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">S₂</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">inclusion</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">S₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subalgebra</span>\n</pre></div>",
        "id": 174376480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567007789
    },
    {
        "content": "<p>Never mind, it's more painful than that.</p>",
        "id": 174377372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567008332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How about this one?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin_singleton_desc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">algebra</span>\n</pre></div>",
        "id": 174388655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567016687
    },
    {
        "content": "<p>I'm going to bed now. Modulo my challenge to Kenny, the remaining sorries should be rather straightforward.</p>",
        "id": 174402264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567027365
    },
    {
        "content": "<p>Feel free to fill them in while I'm asleep.</p>",
        "id": 174402274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567027374
    },
    {
        "content": "<p><code>polynomial.map</code> is hellish</p>",
        "id": 174426729,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567058916
    },
    {
        "content": "<p>What are you struggling with?</p>",
        "id": 174426969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567059298
    },
    {
        "content": "<p>I agree that I've often wished that <code>map</code> was defined in terms of <code>finsupp.map_codomain</code> or whatever the thing is called.</p>",
        "id": 174426987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567059343
    },
    {
        "content": "<p>Btw, in the end I didn't use your <code>subfield_and_hom</code> structure. I hope you don't mind. I think you would have to add the requirement that the field embeddings are compatible in the ordering. So you can't use <code>preorder.lift</code>, and hence you also can't apply the other <code>maximal_chain</code> thingies.</p>",
        "id": 174427137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567059492
    },
    {
        "content": "<p>So I ended up defining <code>subfield_with_hom</code>, which I found a more intuitive approach. But that's a personal thing</p>",
        "id": 174427142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567059518
    },
    {
        "content": "<blockquote>\n<p><code>polynomial.map</code> is hellish</p>\n</blockquote>\n<p>That's weird. I posted that comment yesterday after you were talking about <code>map</code>. It's showing as posted just now. I'm not doing anything with <code>map</code> right now.</p>",
        "id": 174427372,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567059879
    },
    {
        "content": "<p>Which of the sorries did you get stuck on when you used <code>subfield_and_hom</code>? I agree that using subalgebras is more natural, but I was hoping I'd be able to reuse a bunch of stuff.</p>",
        "id": 174427400,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567059945
    },
    {
        "content": "<p>I guess this one <code>-- Given K:L:M, if M is algebraic over K it is algebraic over L (names are different)</code></p>",
        "id": 174427575,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567060167
    },
    {
        "content": "<p>It's not clear how to define the embedding into the algebraically closed field  from the union of a bunch of subfields if those subfields don't have compatible embeddings into the algebraically closed field.</p>",
        "id": 174427878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567060526
    },
    {
        "content": "<p>You might still be able to do it my way. You just need to add to the order (do we know that intersection of preorders is a preorder?), and add one extra proof to <code>maximal_subfield_and_hom_chain</code> to prove some commutativity property from the direct limit.</p>",
        "id": 174427924,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567060565
    },
    {
        "content": "<p>Maybe I'm trying too hard to save lines.</p>",
        "id": 174427932,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567060586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Do you have any clue why I get red squiglly lines under <code>E</code> in the type?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">subalgebra</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">L_alg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">subalgebra</span>\n</pre></div>",
        "id": 174430701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064167
    },
    {
        "content": "<p>It says max type class depth error</p>",
        "id": 174430703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064176
    },
    {
        "content": "<p>But it should just coerce it to type... and I don't see what other type class search might be going on</p>",
        "id": 174430710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064200
    },
    {
        "content": "<p>There's no <code>has_coe_to_sort</code> instance for subalgbra.</p>",
        "id": 174430796,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567064284
    },
    {
        "content": "<p>This line doesn't give errors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 174430805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064294
    },
    {
        "content": "<p>Aha... that's weird. Because I've been using it all over the place</p>",
        "id": 174430816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064316
    },
    {
        "content": "<p>It can coerce to <code>set</code>, and then <code>subtype</code>. Both coercions exist. Why doesn't it chain them?</p>",
        "id": 174430827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064334
    },
    {
        "content": "<p>No idea.</p>",
        "id": 174430844,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567064360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Any clue?</p>",
        "id": 174430851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064375
    },
    {
        "content": "<p>I'm still mystified by things like this</p>",
        "id": 174430855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567064384
    },
    {
        "content": "<p>If you write <code>E : Type v</code> then it will look for a coe to Type v rather than a coe_to_sort</p>",
        "id": 174432302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567065800
    },
    {
        "content": "<p>does it work without the annotation?</p>",
        "id": 174432316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567065836
    },
    {
        "content": "<p>The simplest mechanism is probably to write the funny up arrow (not the regular one, the one with a flat bottom)</p>",
        "id": 174432366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567065869
    },
    {
        "content": "<p>I'm not even sure it has a latex shortcut, but it's short for <code>coe_sort</code></p>",
        "id": 174432388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567065909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I really think you made a mistake deleting <code>subfield_and_hom</code>. If you add the commutativity property to the preorder, all but one of the remaining sorries are just the UMP of direct limit or adjoin root. <code>maximal_extension_chain</code> is still maximal with respect to the new preorder. The algebraicness sorry should also be easy, because now that the homs commute, you just map the minimial polynomial from one field to another. You can still reuse a lot of the zorny stuff from the construction of the algebraic closure.</p>",
        "id": 174441863,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567074941
    },
    {
        "content": "<p>Feel free to revert it</p>",
        "id": 174442382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567075539
    },
    {
        "content": "<p>All help is appreciated</p>",
        "id": 174442387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567075546
    },
    {
        "content": "<p>I'll have a go at finishing it at the weekend.</p>",
        "id": 174442464,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567075606
    },
    {
        "content": "<p>Why does algebraic closure in Lean seem tricky ? Are you aiming for a constructive proof (i.e. not using AC but a weaker axiom ) ?<br>\nMy student Paulo Emilio de Vilhena gave a classical proof in Isabelle last summer during his internship. <br>\nHis work is <a href=\"https://github.com/DeVilhena-Paulo/GaloisCVC4\" target=\"_blank\" title=\"https://github.com/DeVilhena-Paulo/GaloisCVC4\">available</a> on GitHub.<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 174894423,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1567611791
    },
    {
        "content": "<p>No, we're not constructive at all</p>",
        "id": 174897683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567613973
    },
    {
        "content": "<p>I think one of the issues is that Chris has been really busy doing 25 other things at the same time.</p>",
        "id": 174897707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567613997
    },
    {
        "content": "<p>Yes Chris has been doing a summer project on something completely different. One issue is that the native approach to algebraic closure involves taking a limit over a type of extensions which is so big the the limit is in a higher universe than you want it to be.</p>",
        "id": 174899427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567615248
    },
    {
        "content": "<p>Yes Chris has been doing a summer project on something completely different. One issue is that the native approach to algebraic closure involves taking a limit over a type of extensions which is so big the the limit is in a higher universe than you want it to be.</p>",
        "id": 174899488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567615305
    },
    {
        "content": "<p>Of course Chris isn't the only one who could/should/wants to do this</p>",
        "id": 174900751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567616413
    },
    {
        "content": "<p>But all the others seem to be suffering the same things...</p>",
        "id": 174900757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567616427
    },
    {
        "content": "<p>The other issue is that I want to do it right, and that involves a bit of refactoring of mathlib first ideally.</p>",
        "id": 174902802,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567617817
    },
    {
        "content": "<p>From what I can tell, Chris's proof is not longer than Paulo's if we are just talking about the parts that are actually constructing the alg closure</p>",
        "id": 174912770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567624138
    },
    {
        "content": "<p>But of course the number of lines does not always compare to the thought that went into those lines</p>",
        "id": 174912931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567624241
    },
    {
        "content": "<p>Hooray, we have minimal polynomials. The first of several preparatory PRs for algebraic closures</p>",
        "id": 176667012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569510937
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1519\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1519\">#1519</a> another preparatory PR for algebraic closures: algebraic field extensions and transitivity of algebraicity</p>",
        "id": 177600832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570530658
    },
    {
        "content": "<p>If you are a regular contributor to mathlib, and you find it embarrassing that the <code>master</code> branch still doesn't know what an algebraic closure is: please review <a href=\"https://github.com/leanprover-community/mathlib/issues/1519\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1519\">#1519</a>. It is one of the little steps towards closure.</p>",
        "id": 178299088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571238967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  told me at Xena last Thurs that he was reluctant to continue with alg closure until we had limits in category theory. So there is perhaps still a long way to go! Chris said that there was no point building up some special case of a general machine when we need the general machine anyway. I agree with him. I think this might be an interesting case. Mario has always wanted to see a use for all the category theory stuff and maybe this is it. In the past I've tried to use the category theory library and got frustrated, probably because I don't know how to steer it and Scott lives in an inconvenient time zone so is usually asleep when I need help :-) But then the frustration passes and I remember that this really what we should be doing. Chris, can you be more precise about what is needed in category theory?</p>",
        "id": 178319571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571253058
    },
    {
        "content": "<p>I put it as ready-to-merge, but there are merge conflicts...</p>",
        "id": 178321320,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571254535
    },
    {
        "content": "<p>Thanks, I'll look at them (tomorrow, probably)</p>",
        "id": 178321394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571254591
    },
    {
        "content": "<p>Categorical (co)limits are there. I guess Chris wants a good interface for directed/filtered colimits of algebras. This means that we need the category of algebras (easy), define filtered index categories (requires a bit of planning, but I don't see any obstacles), and we have to show that the category of algebras has filtered colimits (should be easy, just lift them from <code>CommRing</code>).</p>",
        "id": 178321531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571254730
    },
    {
        "content": "<p>Sorry I've been mostly away from Lean for a while. I'm keen to contribute to making this happen; perhaps when things settle down a bit here I can talk to Chris directly about doing this.</p>",
        "id": 178332195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571263797
    }
]