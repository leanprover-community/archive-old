[
    {
        "content": "<p>Does it make sense to contribute to the vscode-lean extension with lean 4 being on the horizon? I'm not sure I can significantly improve the infoview, but I'd love to give it a try (I dearly miss a click to insert <code>rw ${term at cursor}</code> feature that would allow to quickly unfold definitions). If the thing would be obsolete with lean 4, I'd wait until the release of lean 4 though.</p>",
        "id": 218210367,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606652315
    },
    {
        "content": "<p>it's been on the horizon for a long time. If you have an idea, go for it</p>",
        "id": 218210447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606652502
    },
    {
        "content": "<p>Yes, please. Every experimentation will be useful when Lean 4 time will come.</p>",
        "id": 218210490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606652540
    },
    {
        "content": "<p>we're not even at the point where we can assess whether things will become obsolete by lean 4</p>",
        "id": 218210492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606652544
    },
    {
        "content": "<p>it will not be obsolete. as it stands, the lean 4 lsp server has the basic architecture for making lsp work correctly, but we haven't yet invested time into the tactic side of the server. ideally, it should work so that all the neat widget stuff will still work similarly to before.</p>",
        "id": 218210508,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606652596
    },
    {
        "content": "<p>right, that's a thing you would not have said had Ed thought \"oh all this cool widget stuff will be obsolete in the next version, best not to try\"</p>",
        "id": 218210554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606652654
    },
    {
        "content": "<p>oh cool, then I will do some experimentations!</p>",
        "id": 218211017,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606653408
    },
    {
        "content": "<p>There was apparently a lean 4 VS Code demonstration on the Discord last Wednesday at the Cambridge lean user group meeting</p>",
        "id": 218212248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655575
    },
    {
        "content": "<p>I missed it :-(</p>",
        "id": 218212256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655588
    },
    {
        "content": "<p>who demonstrated it? :o</p>",
        "id": 218212325,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606655726
    },
    {
        "content": "<p>I believe it was user Vtec234</p>",
        "id": 218212375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655774
    },
    {
        "content": "<p>ah, wojciech <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 218212380,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606655790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> am I talking nonsense?</p>",
        "id": 218212381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655792
    },
    {
        "content": "<p>Bhavik, Shing, Ed, Eric and Fox might have been there, they were around when I arrived an hour later</p>",
        "id": 218212444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655904
    },
    {
        "content": "<p>You're not imagining it, but it was mainly a conversation about the bootstrapping of lean 4 as I remember it</p>",
        "id": 218213189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606657018
    },
    {
        "content": "<p>With a quick demo to prove that trace messages from lean appear somewhere sensible</p>",
        "id": 218213205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606657050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Something to keep in mind is that the state of Lean 4 editor support is rudimentary -- we are largely working out foundational/architectural details as opposed to anything user-visible. There are no features like tactic state, goto-definition, type hovers, etc. In fact, there is not even a vscode-lean4, it's just that the new server is Language Server Protocol-based so it works with any editor supporting LSP out of the box, but Lean-specific things are still a ways away.</p>",
        "id": 218219836,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1606668307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Future.20of.20vscode-lean.20with.20regards.20to.20lean.204.3F/near/218210554\">said</a>:</p>\n<blockquote>\n<p>right, that's a thing you would not have said had Ed thought \"oh all this cool widget stuff will be obsolete in the next version, best not to try\"</p>\n</blockquote>\n<p>A thought I had when deciding to do widgets was  \"oh lean 3 is going to be obsolete in a year anyway so I'll try it in Lean 3 and it doesn't matter if I break everything\"</p>",
        "id": 218857433,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607099968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234196\">@Henning Dieterichs</span> have you had a look at widgets? It should be possible to implement your idea entirely in Lean without any vscode extension changes. Lmk if you want any pointers</p>",
        "id": 218857638,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607100044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/Future.20of.20vscode-lean.20with.20regards.20to.20lean.204.3F/near/218857433\">said</a>:</p>\n<blockquote>\n<p>A thought I had when deciding to do widgets was  \"oh lean 3 is going to be obsolete in a year anyway so I'll try it in Lean 3 and it doesn't matter if I break everything\"</p>\n</blockquote>\n<p>It also made the decision to merge these experimental features so much easier.</p>",
        "id": 218861900,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1607101841
    },
    {
        "content": "<p>\"We're working with a sinking ship anyways. Let's blast some more holes in it.\"<br>\nI like this mentality, rotflol. We should apply it to proofs as well.</p>\n<p>Me: Hey, this seems like a nice result. Let me hack a proof together.<br>\nKernel: Ooh, don't bother. Statement looks plausible. Next!</p>",
        "id": 218863917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607102756
    },
    {
        "content": "<p>I didn't have a look yet, but I'm definitely going to. I want to make some more progress on my lean proof first though. How would I extend the widget view from Lean? I'm quite experienced with React/TypeScript and apparently the goal view in VS Code is a react web view. Also, I have some ideas of how the abbrevation mechanism could be improved (and aligned to the emacs experience).</p>",
        "id": 218866730,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607103926
    },
    {
        "content": "<p>It's a research project, not a product. Leo always said this. I don't know if he wants lean 4 to be a product, and I've met people who won't use lean 3 because they say it's too unstable, but I am really enjoying the way people are just experimenting with the entire system at all times. We seem to be learning a lot.</p>",
        "id": 218866871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607103975
    },
    {
        "content": "<p>If you are experienced with React then hopefully widgets should make a lot of sense to you.</p>",
        "id": 218866934,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1607104011
    },
    {
        "content": "<p>If Lean 4 exposes a fully features syntax tree, possibly with meta information, semantic highlighting + inline type information could be implemented for VS Code easily. It would look like this: <a href=\"/user_uploads/3121/LeJkgQcFbZMHzpWyOctv-qNN/Frame-1.png\">Frame-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LeJkgQcFbZMHzpWyOctv-qNN/Frame-1.png\" title=\"Frame-1.png\"><img src=\"/user_uploads/3121/LeJkgQcFbZMHzpWyOctv-qNN/Frame-1.png\"></a></div><p>Terms of type \"Prop\" could be highlighted to distinguish them from non-prop-terms. Also, if only a single hypothesis or goal is changed, that goal could be rendered inline.</p>",
        "id": 218979071,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607248707
    }
]