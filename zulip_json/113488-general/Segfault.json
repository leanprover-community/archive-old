[
    {
        "content": "<p>If I add <code>set_option old_structure_cmd true</code> right above the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring/src\">src#normed_ring</a>, Lean segfaults (Linux).</p>",
        "id": 211399179,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601183404
    },
    {
        "content": "<p>I need <code>normed_ring</code> to become an old structure because I need a <code>normed_comm_ring</code>.</p>",
        "id": 211399194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601183436
    },
    {
        "content": "<p>I think I tried to do that too at some point:<br>\n<a href=\"#narrow/stream/116395-maths/topic/C*-algebras\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/C*-algebras</a><br>\nI never ended up doing something with that.</p>\n<p>I think the problem is that</p>\n<blockquote>\n<p>Should I make a PR turning normed_ring (and all other structures in the algebraic hierarchy)  into something that uses <code>old_structure_cmd</code>?</p>\n</blockquote>\n<p>So if you turn <code>normed_ring</code> into and old_structure, then you should also make all structures it depends on an old_structure. (Of course, this should not cause a segfault but an error)</p>",
        "id": 211400747,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601186754
    },
    {
        "content": "<p>Another option is to make a mixin <code>has_mul_comm</code></p>",
        "id": 211402145,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601189510
    }
]