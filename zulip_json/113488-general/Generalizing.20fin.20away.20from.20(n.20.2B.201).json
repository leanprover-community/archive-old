[
    {
        "content": "<p>A lot of the structures and lemmas we have on fin only operate on <code>fin (n + 1)</code> or <code>fin (n + 2)</code>. That means when one wants to talk about <code>{0, 1, ..., b - 1}</code>, you really need to think about <code>{0, 1, ...., b, b + 1} : finset (fin (b + 2))</code>. I have a <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/fin-nontrivial\">branch#pechersky/fin-nontrivial</a> that, for example, defined <code>bounded_order (fin n')</code>, not <code>fin (n + 1)</code>, but requires <code>[nonempty (fin n')]</code>. Of course, I also provide <code>nonempty (fin (n + 1))</code> to the TC. This is inspired by the fintype/finite split going on recently. This approach also gives <code>0 : fin n'</code> and <code>1 : fin n'</code>. We also get a <code>last' _ : fin n'</code>.</p>\n<p>I wanted to bring this up here for thoughts, and for help. Right now, I am hitting some TC loop according to the TC linter -- I am not sure how to diagnose and fix that.</p>",
        "id": 292340551,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659907699
    },
    {
        "content": "<p>A lot of <code>zmod.basic</code> is written like that already, using <code>fact (0 &lt; n)</code> in place of <code>nonempty (fin n)</code></p>",
        "id": 292341368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659908763
    },
    {
        "content": "<p>Is that a \"vote\" for TC-based <code>fin</code> API or against it? Or just a comment? To me, <code>nonempty (fin n)</code> and <code>nontrivial (fin n)</code> look \"cleaner\" than <code>fact</code> based hypotheses.</p>",
        "id": 292341912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659909574
    },
    {
        "content": "<p>Additionally, <code>fact (0 &lt; n)</code> for <code>zmod n</code> is mainly to separate out <code>int = zmod 0</code> from <code>zmod (n + 1) = fin (n + 1)</code></p>",
        "id": 292341959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659909607
    },
    {
        "content": "<p>that's a recommendation to use <code>fact (0 &lt; n)</code> instead of another equivalent formulation of it</p>",
        "id": 292342084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909733
    },
    {
        "content": "<p><code>nonempty (fin n)</code> is not great because it's not obviously related to zmod facts</p>",
        "id": 292342096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909768
    },
    {
        "content": "<p>a zmod theorem predicated on <code>nonempty (fin n)</code> would be weird</p>",
        "id": 292342115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909797
    },
    {
        "content": "<p>and we don't want two ways to assert the same thing</p>",
        "id": 292342121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909808
    },
    {
        "content": "<p>and <code>nonempty (fin n)</code> and <code>nontrivial (fin n)</code> doesn't generalize very well</p>",
        "id": 292342126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659909829
    },
    {
        "content": "<p>It was discussed a few times, but then no more progress was made. <a href=\"#narrow/stream/113488-general/topic/Definition.20of.20.20.60fin.2Eof_nat.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Definition.20of.20.20.60fin.2Eof_nat.60</a></p>",
        "id": 292345004,
        "sender_full_name": "FR",
        "timestamp": 1659911465
    },
    {
        "content": "<p>It's not immediately clear whether this would be an overall improvement, or just shift the pain around</p>",
        "id": 292345240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659911790
    },
    {
        "content": "<p><code>nonempty (fin n)</code> has the benefit of being more \"canonical\" than <code>fact (0 &lt; b)</code> or <code>fact (1 &lt;= b)</code>.</p>",
        "id": 292346470,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659913499
    },
    {
        "content": "<p>It's the sole inhabitant of what feels like a non-canonical island, while the other spellings are non-canonical inhabitants of what feels like the canonical island of spellings...</p>",
        "id": 292347631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659915212
    },
    {
        "content": "<p>You know what they say, \"every typeclass hypothesis is an island\"... or are you thinking more of the <a href=\"https://en.wikipedia.org/wiki/Island_of_stability\">island of stability</a></p>",
        "id": 292347993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659915725
    }
]