[
    {
        "content": "<p>How would you formalize exact sequences in Lean? Let's say they are R-modules for a commutative ring R.<br>\nI have the following exact sequences in mind:</p>\n<p>1. 0-&gt;A-&gt;B<br>\n2. A-&gt;B-&gt;C<br>\n3. A-&gt;B-&gt;C<br>\n4. 0-&gt;A-&gt;B-&gt;C<br>\n5. 0-&gt;A-&gt;B-&gt;C-&gt;0<br>\n6. A-&gt;B-&gt;C-&gt;0<br>\n7. ...-&gt;An-&gt;...-&gt;A3-&gt;A2-&gt;A1-&gt;A0</p>",
        "id": 124273688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522159258
    },
    {
        "content": "<p>0-&gt;A-&gt;B-&gt;C-&gt;D-&gt;0 is relatively rare but are still used</p>",
        "id": 124273698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522159282
    },
    {
        "content": "<p>short exact sequences could be a special case</p>",
        "id": 124273706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522159295
    },
    {
        "content": "<p>What is the difference between an exact sequence and a list?</p>",
        "id": 124273899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522159650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  The fact that you have morphisms f_n: A_n \\to A_{n-1} that satisfy the condition im(f_n) = ker(f_{n-1}).</p>",
        "id": 124274112,
        "sender_full_name": "jmc",
        "timestamp": 1522159988
    },
    {
        "content": "<p>So if you take A -&gt; B -&gt; C, that sequence has to have a morphism from A to B and from B to C? Is it meaningful to have an empty sequence?</p>",
        "id": 124274177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160103
    },
    {
        "content": "<p>Hmmm, I guess one can give it meaning.</p>",
        "id": 124274206,
        "sender_full_name": "jmc",
        "timestamp": 1522160156
    },
    {
        "content": "<p>But probably it is never used.</p>",
        "id": 124274253,
        "sender_full_name": "jmc",
        "timestamp": 1522160168
    },
    {
        "content": "<p>I can't remember ever seeing it</p>",
        "id": 124274256,
        "sender_full_name": "jmc",
        "timestamp": 1522160183
    },
    {
        "content": "<p>You have n&gt;=1 objects in a list, and n-1 morphisms from A[i] to A[i+1]</p>",
        "id": 124274259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160193
    },
    {
        "content": "<p>Ok, let's leave it out if we have to</p>",
        "id": 124274261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160200
    },
    {
        "content": "<p>and you demand that in the n-2 situations for which it makes sense,</p>",
        "id": 124274268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160215
    },
    {
        "content": "<p>(the empty sequence that is)</p>",
        "id": 124274270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160217
    },
    {
        "content": "<p>image of j'th map is kernel of (j+1)st</p>",
        "id": 124274276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160225
    },
    {
        "content": "<p>It says nothing for n&lt;3</p>",
        "id": 124274285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160240
    },
    {
        "content": "<p>and nobody ever uses it either (i.e. it's not a useful special case of anything, in contrast to sum(i=1,n,f(i)) which can be sensibly and usefully interpreted as zero when n=0)</p>",
        "id": 124274293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160272
    },
    {
        "content": "<p>Ok, I have an idea, I'll just write up something and show it to you guys</p>",
        "id": 124274340,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160299
    },
    {
        "content": "<p>it's also a useful concept for Z_{&gt;=0} and Z_{&lt;=0} and Z</p>",
        "id": 124274342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160325
    },
    {
        "content": "<p>i.e. A0-&gt;A1-&gt;A2-&gt;... being exact</p>",
        "id": 124274346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160339
    },
    {
        "content": "<p>and ...-&gt;B2-&gt;B1-&gt;B0 being exact</p>",
        "id": 124274353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160347
    },
    {
        "content": "<p>and ...-&gt;A_{n-1}-&gt;A_n-&gt;A_{n+1}-&gt;... being exact</p>",
        "id": 124274358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160358
    },
    {
        "content": "<p>and I think that covers everything</p>",
        "id": 124274360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160369
    },
    {
        "content": "<p>that I see in practice</p>",
        "id": 124274361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160374
    },
    {
        "content": "<p>Thanks! What's the type of <code>im</code> and <code>ker</code>?</p>",
        "id": 124274364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> so there are two conventions: either <code>target(f_n) = source(f_{n+1})</code>, or <code>source(f_n) = target(f_{n+1})</code></p>",
        "id": 124274425,
        "sender_full_name": "jmc",
        "timestamp": 1522160464
    },
    {
        "content": "<p>im and ker are both also R-modules</p>",
        "id": 124274432,
        "sender_full_name": "jmc",
        "timestamp": 1522160480
    },
    {
        "content": "<p>depending on whether you're doing homology or cohomology</p>",
        "id": 124274434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522160488
    },
    {
        "content": "<p>or maybe R-submodules of the object that they are a sub of</p>",
        "id": 124274436,
        "sender_full_name": "jmc",
        "timestamp": 1522160496
    },
    {
        "content": "<p>Do you guys think it might be useful to first formalise complexes? That is <code>im(f_n) \\subset ker(f_{n+1})</code> or equivalently <code>f_{n+1} \\circ f_n = 0</code>.</p>",
        "id": 124274496,
        "sender_full_name": "jmc",
        "timestamp": 1522160578
    },
    {
        "content": "<p>I have encoded something without the relationship between morphisms, I just want to check if that makes sense to you guys before encoding that condition</p>",
        "id": 124274644,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160765
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>universe u\n\nconstant morphism : Type u → Type u → Type u\n\ninductive exact_seq : list (Type u) → Type (u+1)\n | nil (a : Type u) : exact_seq [a]\n | cons (a b : Type u) (tail : list (Type u)) :\n   morphism a b →\n   exact_seq (b :: tail) →\n   exact_seq (a :: b :: tail)\n</pre></div>",
        "id": 124274648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160774
    },
    {
        "content": "<p>There are also exact sequences in HoTT Lean 2: <a href=\"https://github.com/cmu-phil/Spectral\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral\">https://github.com/cmu-phil/Spectral</a>, see <a href=\"https://github.com/cmu-phil/Spectral/blob/master/algebra/exactness.hlean\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral/blob/master/algebra/exactness.hlean\">https://github.com/cmu-phil/Spectral/blob/master/algebra/exactness.hlean</a> <br>\nBut this is HoTT Lean, so there are a lot of differences now to current Lean. Also the definitions might be very constructive...</p>",
        "id": 124274669,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1522160816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> What is <code>constant morphism</code> supposed to do? Because I don't really get it...</p>",
        "id": 124274734,
        "sender_full_name": "jmc",
        "timestamp": 1522160928
    },
    {
        "content": "<p>It's just a way of having morphisms in my definition without depending on any specific definition of morphism.</p>",
        "id": 124274745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522160969
    },
    {
        "content": "<p>I see, makes sense now</p>",
        "id": 124274801,
        "sender_full_name": "jmc",
        "timestamp": 1522161027
    },
    {
        "content": "<p>You could actually make it a parameter of the whole thing</p>",
        "id": 124274867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I think this works, but not for sequences indexed by Z, right?</p>",
        "id": 124274875,
        "sender_full_name": "jmc",
        "timestamp": 1522161202
    },
    {
        "content": "<p>Meaning that instead of a list as the index of your sequence, you'd like a function from a contiguous interval of Z to the type in question?</p>",
        "id": 124274921,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161282
    },
    {
        "content": "<p>You could match this with a single Z which is an offset for every index of the N based indices of the list</p>",
        "id": 124274935,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161333
    },
    {
        "content": "<p>Otherwise, you could replace the list but such a sequence not being an inductive type might not be pretty when you pattern match on an <code>exact_seq</code></p>",
        "id": 124274989,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161397
    },
    {
        "content": "<p>yes, but you the interval need not be bounded</p>",
        "id": 124274993,
        "sender_full_name": "jmc",
        "timestamp": 1522161414
    },
    {
        "content": "<p>Ah yes, I see</p>",
        "id": 124274998,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161426
    },
    {
        "content": "<p>so then it won't be inductive... probably</p>",
        "id": 124275003,
        "sender_full_name": "jmc",
        "timestamp": 1522161436
    },
    {
        "content": "<p>So intuitively it is a function: Z -&gt; morphisms</p>",
        "id": 124275007,
        "sender_full_name": "jmc",
        "timestamp": 1522161462
    },
    {
        "content": "<p>but the problem is that actually the target depends on the element n \\in Z</p>",
        "id": 124275047,
        "sender_full_name": "jmc",
        "timestamp": 1522161485
    },
    {
        "content": "<p>Yeah ... alternatively, I'm working on a construction for coinductive types. You could use that to make a possibly \"doubly\" infinite, Z indexed sequence</p>",
        "id": 124275053,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161504
    },
    {
        "content": "<p>At the moment, maybe the best thing to do is have an interval type and make functions from that interval to the types that your sequence contains</p>",
        "id": 124275127,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522161711
    },
    {
        "content": "<p>so what's the verdict</p>",
        "id": 124275459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522162295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you want/need unbounded sequences?</p>",
        "id": 124275514,
        "sender_full_name": "jmc",
        "timestamp": 1522162389
    },
    {
        "content": "<p>Or is finite enough?</p>",
        "id": 124275516,
        "sender_full_name": "jmc",
        "timestamp": 1522162398
    },
    {
        "content": "<p>preferably</p>",
        "id": 124275518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522162399
    },
    {
        "content": "<p>indexing by N is good</p>",
        "id": 124275522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522162407
    },
    {
        "content": "<p>should finite and infinite sequences be the same type or would it be good enough to have separate constructions?</p>",
        "id": 124275573,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522162452
    },
    {
        "content": "<p>then I guess the inductive definition that Simon proposed is the best option</p>",
        "id": 124275574,
        "sender_full_name": "jmc",
        "timestamp": 1522162452
    },
    {
        "content": "<p>I can do with separate</p>",
        "id": 124275582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522162495
    },
    {
        "content": "<p>or just make finite a special case of infinite (with all objects being eventually 0)</p>",
        "id": 124275588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522162513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think they can be different types, and then an <code>extend_with_zeros</code> function from the finite to infinite sequences</p>",
        "id": 124275592,
        "sender_full_name": "jmc",
        "timestamp": 1522162520
    },
    {
        "content": "<p>Cool</p>",
        "id": 124275594,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522162541
    },
    {
        "content": "<p>I have not covered the <code> im(f_n) \\subset ker(f_{n+1}) </code> bit but I think an inductive predicate would be a nice way of asserting that</p>",
        "id": 124275712,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522162780
    },
    {
        "content": "<p>Here's how I would build that predicate (I'm not sure for the type of <code>ker</code> and <code>im</code> but it seems to capture part of the idea at least)</p>\n<div class=\"codehilite\"><pre><span></span>universe u\n\nconstant morphism : Type u → Type u → Type u\n\nconstant ker : Π {a b : Type u}, morphism a b → a\nconstant im : Π {a b : Type u}, morphism a b → b\n\ninductive exact_seq : list (Type u) → Type (u+1)\n | nil (a : Type u) : exact_seq [a]\n | cons {a b : Type u} {tail : list (Type u)} :\n   morphism a b →\n   exact_seq (b :: tail) →\n   exact_seq (a :: b :: tail)\n\ninductive is_exact : Π {s}, exact_seq s → Type (u+1)\n | nil {a b : Type u} (f : morphism a b) : is_exact (exact_seq.cons f $ exact_seq.nil b)\n | cons (a b c : Type u) (tail : list (Type u))\n        (f : morphism a b) (g : morphism b c)\n        (s : exact_seq (c :: tail)) :\n   ker g = im f →\n   is_exact (exact_seq.cons g s) →\n   is_exact (exact_seq.cons f $ exact_seq.cons g s)\n</pre></div>",
        "id": 124276058,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522163377
    },
    {
        "content": "<p>Guys... you are really crazy about inductive types</p>",
        "id": 124276259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163684
    },
    {
        "content": "<p>... in a bad way?</p>",
        "id": 124276271,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522163705
    },
    {
        "content": "<p>I think this would be a nightmare to work with</p>",
        "id": 124276277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163714
    },
    {
        "content": "<p>How are you going to define morphisms of complexes?</p>",
        "id": 124276282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163725
    },
    {
        "content": "<p>Why do you need to complicate everything</p>",
        "id": 124276294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163736
    },
    {
        "content": "<p>Why not defining a sequence to be a map C from I to R-mod (where I is an interval in integers) and a map d from I to linear maps from C i to C (i+1)?</p>",
        "id": 124276356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163811
    },
    {
        "content": "<p>and then adding condition on d (i + 1) and d i  for all i</p>",
        "id": 124276412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163886
    },
    {
        "content": "<p>to get either complexes or exact sequences</p>",
        "id": 124276417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163898
    },
    {
        "content": "<p>Anyway, did anyone check whether <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> already did all that in his category lib, for arbitraray abelian categories?</p>",
        "id": 124276433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163951
    },
    {
        "content": "<p>You mean a bit like this?</p>\n<div class=\"codehilite\"><pre><span></span>open nat\nvariable s : stream (Type u)\n\ndef inf_seq := Π n, morphism (s n) (s $ succ n)\nvariables {s} (x : inf_seq s)\ndef inf_exact_seq := Π n, im (x n) = ker (x _)\n</pre></div>",
        "id": 124276435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522163955
    },
    {
        "content": "<p>I thought of doing that for intervals of integers too</p>",
        "id": 124276442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522163984
    },
    {
        "content": "<p>What is stream?</p>",
        "id": 124276444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522163992
    },
    {
        "content": "<p>What annoys me is the <code>+1</code> for which you need some tricks to make it type correct</p>",
        "id": 124276493,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164018
    },
    {
        "content": "<p><code>def stream (a) := ℕ -&gt; a</code></p>",
        "id": 124276497,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164044
    },
    {
        "content": "<p>What is this <code>+1</code> issue?</p>",
        "id": 124276512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164120
    },
    {
        "content": "<p>If you use it directly, with <code>I</code> an interval on integers and <code>i : I</code>, <code>↑i + 1 : ℤ</code> so you need to feed in a proof that it's also part of the interval</p>",
        "id": 124276565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164215
    },
    {
        "content": "<p>Actually, now that I write it out loud, it doesn't seem that bad</p>",
        "id": 124276607,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164247
    },
    {
        "content": "<p>Don't do that</p>",
        "id": 124276611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164257
    },
    {
        "content": "<p>It's just going to be one ugly index</p>",
        "id": 124276614,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164262
    },
    {
        "content": "<p>What would you do?</p>",
        "id": 124276618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164269
    },
    {
        "content": "<p>Define <code>C i</code> to be the zero module if <code>i</code> is not in the interval</p>",
        "id": 124276620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164279
    },
    {
        "content": "<p>So all sequences are indexed by <code>ℤ</code></p>",
        "id": 124276636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164345
    },
    {
        "content": "<p>Ok, so do you overload the function application operator or do you actually work with <code>ℤ → Type</code>? In the second case, you'll get into ugliness with defining extensionality</p>",
        "id": 124276683,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164400
    },
    {
        "content": "<p>But in the first case ... I think it can work</p>",
        "id": 124276691,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164414
    },
    {
        "content": "<p>What ugliness?</p>",
        "id": 124276702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164460
    },
    {
        "content": "<p>what extensionality?</p>",
        "id": 124276709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164467
    },
    {
        "content": "<p>If you want to prove the equality of two sequences ... <em>trail off</em></p>",
        "id": 124276753,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164498
    },
    {
        "content": "<p>I hope you're not about to write the c word</p>",
        "id": 124276757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164537
    },
    {
        "content": "<p>I'm not sure what your c word is ... comparison?</p>",
        "id": 124276769,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164566
    },
    {
        "content": "<p>constructively</p>",
        "id": 124276774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522164576
    },
    {
        "content": "<p>Haha! I'm more into classical reasoning, relax <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 124276828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522164615
    },
    {
        "content": "<p>Here's what I would do then:</p>\n<div class=\"codehilite\"><pre><span></span>structure interval (left right : option ℤ) :=\n  (val : ℤ)\n  (left_bounded : ∀ h₀, @option.get _ left h₀ ≤ val)\n  (right_bounded : ∀ h₀, val ≤ @option.get _ right h₀)\n\nstructure seq (x y : option ℤ) (a : Type u) :=\n  (f : interval x y → a)\n\ninstance {x y : option ℤ} {a} [has_zero a] : has_coe_to_fun (seq x y a) :=\n  { F := λ _, ℤ → a\n  , coe := λ ⟨f⟩ i, if h : _ ∧ _ then f ⟨i,h.1,h.2⟩ else 0 }\n</pre></div>",
        "id": 124277060,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522165007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you really hate inductive definitions</p>",
        "id": 124277134,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522165096
    },
    {
        "content": "<p>Nice. I need to go but I'm sure Kenny and Kevin will get something here</p>",
        "id": 124277135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I don't hate them, I try to formalize maths using the same kind of thinking used in real world maths</p>",
        "id": 124277143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165135
    },
    {
        "content": "<p>This may be a mistake</p>",
        "id": 124277145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165140
    },
    {
        "content": "<p>But I'd like to try that for a while before switching to an orthogonal way of thinking about maths</p>",
        "id": 124277159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165163
    },
    {
        "content": "<p>And those days I have zero time for serious Lean <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 124277161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165181
    },
    {
        "content": "<p>only a bit of Zulip chat</p>",
        "id": 124277162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165193
    },
    {
        "content": "<p>And now I really need to go</p>",
        "id": 124277209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522165210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ok now I have two new things:<br>\n1. exact sequences should be a subtype (not the {x // p x} kind of subtype) of sequences in general, where sequences in this context mean sequences with morphisms. to give more context, there's a type of sequences with im f_n subset ker f_(n+1) instead of equal, i.e. if I call the maps d we have d^2=0.<br>\n2. we need to think about what our objects can be</p>",
        "id": 124277345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522165455
    },
    {
        "content": "<p>When you say <code> im f_n subset ker f_(n+1) </code>, is this strictly in the sense of sets or are you thinking about subsets of various structures like modules?</p>",
        "id": 124277598,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522165845
    },
    {
        "content": "<p>well both would be subset of the object Cn</p>",
        "id": 124277791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166164
    },
    {
        "content": "<p>and also I meant im f_(n+1) subset ker f_n</p>",
        "id": 124277797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166171
    },
    {
        "content": "<p>So maybe this would help. If needed, we can change the <code>=</code> with <code>\\subset</code></p>",
        "id": 124278160,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522166859
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure exact_seq (x y : option ℤ) (A : Type u) [has_zero A] :=\n  (f : seq x y A)\n  (m : Π n, morphism (f n) (f $ n+1))\n  (eq : Π n, ker (m $ n + 1) = im (m n))\n</pre></div>",
        "id": 124278162,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522166864
    },
    {
        "content": "<p>That would involve a morphism from the last object to 0 and from the first object to 0 of which I don't know if it makes sense</p>",
        "id": 124278217,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522166921
    },
    {
        "content": "<p>hmm, it seems you're doing it very generally</p>",
        "id": 124278222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166931
    },
    {
        "content": "<p>in regards to my second question</p>",
        "id": 124278224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166936
    },
    {
        "content": "<p>Maybe we can choose a better constant than 0 to make it make sense</p>",
        "id": 124278226,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522166938
    },
    {
        "content": "<p>no, 0 always makes sense</p>",
        "id": 124278237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166951
    },
    {
        "content": "<p>but what do you mean from the last object to 0</p>",
        "id": 124278241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166966
    },
    {
        "content": "<p>And morphisms to and from 0 make sense to?</p>",
        "id": 124278243,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522166969
    },
    {
        "content": "<p>yes</p>",
        "id": 124278246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166976
    },
    {
        "content": "<p>it's called the zero object in category theory</p>",
        "id": 124278254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522166988
    },
    {
        "content": "<p>Thanks, I'll read up on that</p>",
        "id": 124278305,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167007
    },
    {
        "content": "<p>it has a unique morphism to and from every object</p>",
        "id": 124278307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167008
    },
    {
        "content": "<p>The morphisms have type <code>m : Π n : ℤ, morphism (f n) (f $ n+1)</code> which means that there exists a morphism for every integer even when your sequence is finite</p>",
        "id": 124278324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167064
    },
    {
        "content": "<p>so your answer to my second question is basically any type with a zero object?</p>",
        "id": 124278331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167104
    },
    {
        "content": "<p>Exactly</p>",
        "id": 124278333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167115
    },
    {
        "content": "<p>Sorry, not quite</p>",
        "id": 124278375,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167129
    },
    {
        "content": "<p>I used <code>morphism</code> as a sort of place holder. Maybe you should have <code>A</code> be a category</p>",
        "id": 124278381,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167155
    },
    {
        "content": "<p>and take the morphism from there</p>",
        "id": 124278385,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167168
    },
    {
        "content": "<p>\"there exists a morphism for every integer even when your sequence is finite\" fits with the convention that short exact sequences are special cases of long exact sequences with objects being eventually zero</p>",
        "id": 124278388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167182
    },
    {
        "content": "<p>so that makes sense</p>",
        "id": 124278392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167184
    },
    {
        "content": "<p>in the category setting, exact sequences only make sense in abelian categories</p>",
        "id": 124278397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167201
    },
    {
        "content": "<p>but i don't know whether it would be more useful to have any abelian categories, or just modules</p>",
        "id": 124278404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167220
    },
    {
        "content": "<p>Are the Abelian categories where the 0 is defined?</p>",
        "id": 124278478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167299
    },
    {
        "content": "<p>abelian categories have 0</p>",
        "id": 124278490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167320
    },
    {
        "content": "<p>it has more things</p>",
        "id": 124278492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167322
    },
    {
        "content": "<p>I'd be tempted to suggest to keep it a general definition with the Abelian category and use additional information (e.g. is a module) in the lemmas where it is relevant</p>",
        "id": 124278549,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167369
    },
    {
        "content": "<p>alright</p>",
        "id": 124278569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167439
    },
    {
        "content": "<p>You might also want to layer the structure in such a way that you can vary on <code> Π n, ker (m $ n + 1) = im (m n)</code></p>",
        "id": 124278570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167440
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 124278571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167450
    },
    {
        "content": "<p>you were mentioning subsets relations so here is how I would encode the different flavors:</p>",
        "id": 124278628,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167486
    },
    {
        "content": "<p>oh and my first point means that maybe it can be a hierarchy, complex -&gt; exact sequences</p>",
        "id": 124278650,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167553
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>structure base_exact_seq (x y : option ℤ) (A : Type u) [has_zero A] :=\n  (f : seq x y A)\n  (m : Π n, morphism (f n) (f $ n+1))\n\nstructure exact_seq_eq (x y : option ℤ) (A : Type u) [has_zero A] extends base_exact_seq x y A :=\n  (eq : Π n, ker (m $ n + 1) = im (m n))\n\nstructure exact_seq_sub (x y : option ℤ) (A : Type u) [has_zero A] extends base_exact_seq x y A :=\n  (eq : Π n, ker (m $ n + 1) ⊆ im (m n))\n\nstructure exact_seq_super (x y : option ℤ) (A : Type u) [has_zero A] extends base_exact_seq x y A :=\n  (eq : Π n, ker (m $ n + 1) ⊇ im (m n))\n</pre></div>",
        "id": 124278652,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167558
    },
    {
        "content": "<blockquote>\n<p>oh and my first point means that maybe it can be a hierarchy, complex -&gt; exact sequences</p>\n</blockquote>\n<p>I don't understand that. Are you saying that complex numbers are somehow a more general notion than exact sequences?</p>",
        "id": 124278714,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167621
    },
    {
        "content": "<p>complexes are instead of having im=ker, you have im subset ker</p>",
        "id": 124278782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167740
    },
    {
        "content": "<p>more compactly, f_(n+1) f_n = 0</p>",
        "id": 124278783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167757
    },
    {
        "content": "<p>even more compactly, f^2=0</p>",
        "id": 124278785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522167763
    },
    {
        "content": "<p>Ah! I see</p>",
        "id": 124278813,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167839
    },
    {
        "content": "<p>You might want instances of <code>has_coe</code> between those. Otherwise you'll hit the new structure constraint against repeated fields</p>",
        "id": 124278858,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167873
    },
    {
        "content": "<p>Alright, I'll need to sign off now and get some writing done. I hope this helped</p>",
        "id": 124278929,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522167987
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 124278935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522168013
    },
    {
        "content": "<p>I think I'm wrong. You can't just fill in zeroes to make a long exact sequence from a short one</p>",
        "id": 124279770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169441
    },
    {
        "content": "<p>you can do that for complexes, not exact sequences</p>",
        "id": 124279772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169448
    },
    {
        "content": "<p>oh well it's more troublesome</p>",
        "id": 124279775,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169461
    },
    {
        "content": "<p>if you have A-&gt;B-&gt;C</p>",
        "id": 124279782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169468
    },
    {
        "content": "<p>you can encode it inside ...-&gt;0-&gt;0-&gt;ker f-&gt;A-&gt;B-&gt;C-&gt;coker g-&gt;0-&gt;0-&gt;...</p>",
        "id": 124279784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169487
    },
    {
        "content": "<p>but that's troublesome</p>",
        "id": 124279785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169493
    },
    {
        "content": "<p>but most short exact sequences end and start with zero</p>",
        "id": 124279786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169502
    },
    {
        "content": "<p>but there are also those that do not, e.g. in dealing with tensors</p>",
        "id": 124279790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522169516
    },
    {
        "content": "<p>But Simon's proposal includes bounded sequences, right?</p>",
        "id": 124280782,
        "sender_full_name": "jmc",
        "timestamp": 1522171183
    },
    {
        "content": "<p>maybe you could ask Floris about exact sequences, seeing as how they are working with spectral sequences in HoTT</p>",
        "id": 124283973,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522175857
    },
    {
        "content": "<p>the sequences repository linked earlier is really quite extensive</p>",
        "id": 124284031,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522175923
    },
    {
        "content": "<blockquote>\n<p>But Simon's proposal includes bounded sequences, right?</p>\n</blockquote>\n<p>Yes exactly. The sequence has no information from outside its bounds except that you can still look beyond the bounds and get <code>0</code>. Right now, it requires you to provide morphisms even for (non-)elements outside the bounds of the sequence. We can probably change that</p>",
        "id": 124331318,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522261121
    },
    {
        "content": "<p>Although it's possible to represent N, Z, fin sequences all as special cases of the same thing, I'm not convinced it's worth it - when you want to work with it you will have a lot of redundant structure and it will be cumbersome to talk about the objects</p>",
        "id": 124331770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522261721
    },
    {
        "content": "<p>Maybe you could have both the general structure and the special cases, with coercions or similar embeddings</p>",
        "id": 124331815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522261792
    },
    {
        "content": "<p>That was my first proposal but I got some push back because I was representing finite sequences as inductive types</p>",
        "id": 124332292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522262178
    },
    {
        "content": "<p>I need to figure out how Patrick got traumatized by inductive types, because they are much easier in lean formalization than index arithmetic</p>",
        "id": 124332552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522262455
    },
    {
        "content": "<p>I'm wondering in this situation if having one construction instead of four might be easier to work with</p>",
        "id": 124332704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522262678
    },
    {
        "content": "<p>I think it is important how the construction is to be used to answer that question</p>",
        "id": 124332730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522262728
    },
    {
        "content": "<p>Yeah, that makes sense.</p>",
        "id": 124332813,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522262797
    },
    {
        "content": "<p>One way to encode the +1 stuff is to have a graph relation predicate, so that it becomes closer to a diagram in the category theory sense</p>",
        "id": 124332827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522262828
    },
    {
        "content": "<p>i.e. using <code>inductive P : I -&gt; I -&gt; Prop | mk (n) : P n (n+1)</code></p>",
        "id": 124332835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522262864
    },
    {
        "content": "<p>You would use that with the construction with intervals?</p>",
        "id": 124332995,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522263042
    },
    {
        "content": "<p>The thing about inductive types is that whilst they're clearly a very cute computer science way to do things, especially if you want to prove things by induction,</p>",
        "id": 124333093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263155
    },
    {
        "content": "<p>when a mathematician thinks of an exact sequence they really do not think of it as an \"inductive gadget\"</p>",
        "id": 124333100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263171
    },
    {
        "content": "<p>and the same is true probably for lots of things like graphs or trees or something, which CS people seem to love constructing via inductive data types</p>",
        "id": 124333110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263195
    },
    {
        "content": "<p>but which mathematicians just build in a completely different way.</p>",
        "id": 124333119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263207
    },
    {
        "content": "<p>Probably because they rarely prove anything by induction, they're just interested in other questions.</p>",
        "id": 124333129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263225
    },
    {
        "content": "<p>I mean, on things like trees or exact sequences</p>",
        "id": 124333134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263236
    },
    {
        "content": "<p>I think the mathematician is generally not worried about the particular representation, because they never go into the gory details anyway</p>",
        "id": 124333175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522263244
    },
    {
        "content": "<p>You might be right.</p>",
        "id": 124333181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263251
    },
    {
        "content": "<p>I remember Patrick saying something like \"this is so far from what I would write on the blackboard\"</p>",
        "id": 124333184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263262
    },
    {
        "content": "<p>but perhaps what he means by this is that the informal idea is so clear to a mathematician that they don't need to spell out such a recursive definition.</p>",
        "id": 124333204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263293
    },
    {
        "content": "<p>Perhaps the natural numbers are a great example. They're just \"the natural numbers, duh\"</p>",
        "id": 124333218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263311
    },
    {
        "content": "<p>and you learn them when you're 4 years old</p>",
        "id": 124333222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263323
    },
    {
        "content": "<p>and you don't learn proof by induction until you're 17 (at least in the UK)</p>",
        "id": 124333230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263338
    },
    {
        "content": "<p>So I define the natural numbers in my class as \"N := {1,2,3,...}\"</p>",
        "id": 124333238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263361
    },
    {
        "content": "<p>and Patrick defines them as \"N := {0,1,2,3,...}\"</p>",
        "id": 124333281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263368
    },
    {
        "content": "<p>and that's what gets written on the blackboard, forget about nat.succ etc</p>",
        "id": 124333289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263388
    },
    {
        "content": "<p>I'm just reading the part about formal v informal proofs in Software Foundations. You might want to argue that mathematicians often give \"informal definitions\".</p>",
        "id": 124333356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263512
    },
    {
        "content": "<p>Mathematicians use the word induction like this: \"Theorem: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mi>n</mi><mo>(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo>)</mo><mi mathvariant=\"normal\">/</mi><mn>6</mn><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=1}^n i^2=n(n+1)(2n+1)/6.</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.072772em;vertical-align:-0.258664em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\">n</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">2</span><span class=\"mord mathit\">n</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">6</span><span class=\"mord mathrm\">.</span></span></span></span> Proof: induction. <span class=\"tex-error\">$$\\qed$$</span></p>",
        "id": 124333447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263663
    },
    {
        "content": "<p>not \"definition of natural numbers by induction\"</p>",
        "id": 124333457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522263686
    },
    {
        "content": "<p>I think we should encourage an agnosticism wrt representations in lean as well, by means of abstracting a construction into its important properties. Once you've done this the exact definition doesn't matter. CS people know about this by the name \"interface\", mathematicians know this in the big cases via structures like \"ring\" that abstract a bunch of properties, but I think they are less used to doing this with every construction</p>",
        "id": 124333579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522263875
    },
    {
        "content": "<p>I think even if they don't see natural numbers as Peano's construction, \"by induction\" assumes an inductive definition underneath, often a well-founded relation ... unless you define induction as \"a thing natural numbers can do\"</p>",
        "id": 124333581,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522263877
    },
    {
        "content": "<p>For example, once you have defined the addition and multiplication on C, it stops mattering that the definition was R x R as opposed to something else</p>",
        "id": 124333612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522263952
    },
    {
        "content": "<p>The projectors are super-important on C</p>",
        "id": 124333721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264127
    },
    {
        "content": "<p>I don't think mathematicians see N as any different to R in some sense</p>",
        "id": 124333733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264152
    },
    {
        "content": "<p>sure you can do induction on one but not the other</p>",
        "id": 124333739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264159
    },
    {
        "content": "<p>but who cares about some random property like induction.</p>",
        "id": 124333743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264166
    },
    {
        "content": "<p>You guys are putting it on some sort of pedestal</p>",
        "id": 124333748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264182
    },
    {
        "content": "<p>N and R are just sets of numbers that you can do stuff with</p>",
        "id": 124333751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264198
    },
    {
        "content": "<p>I think I might spend some time over the summer making stuff into interfaces somehow. I am still concerned about manipulating finite sums. I want <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=1}^na_i = \\Sigma_{i=1}^na_{n+1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.941994em;vertical-align:-0.258664em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span></span></span></span> to be trivial</p>",
        "id": 124333820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264278
    },
    {
        "content": "<p>or at least \"something with a name you can guess\"</p>",
        "id": 124333824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264288
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>=</mo><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mi>j</mi></mrow><mi>n</mi></msubsup><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=1}^n\\Sigma_{j=1}^i ... = \\Sigma_{j=1}^n\\Sigma_{i=j}^n ...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:1.219436em;vertical-align:-0.394772em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394772em;\"></span></span></span></span></span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394772em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394772em;\"></span></span></span></span></span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span></span></span></span></p>",
        "id": 124333878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264334
    },
    {
        "content": "<p>because unfortunately for mathematicians this is \"proof by obvious\"</p>",
        "id": 124333885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264355
    },
    {
        "content": "<p>and I'm well aware that in this world it's not</p>",
        "id": 124333887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264366
    },
    {
        "content": "<p>there is real induction :P</p>",
        "id": 124333888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264371
    },
    {
        "content": "<p>it is used to prove that [0,1] is compact and connected</p>",
        "id": 124333889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264381
    },
    {
        "content": "<p>(both proofs use real induction)</p>",
        "id": 124333893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264385
    },
    {
        "content": "<p>it can also be used to reason about differential equations</p>",
        "id": 124333908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264396
    },
    {
        "content": "<p>Even <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>a</mi></msubsup><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>b</mi></msubsup><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>=</mo><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>b</mi></msubsup><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>a</mi></msubsup><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=1}^a\\Sigma_{j=1}^b...=\\Sigma_{j=1}^b\\Sigma_{i=1}^a...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:1.2438799999999999em;vertical-align:-0.394772em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394772em;\"></span></span></span></span></span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.394772em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span></span></span></span></p>",
        "id": 124333912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264402
    },
    {
        "content": "<p>I'm not sure I'd call the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span></span></span></span> thing induction</p>",
        "id": 124333916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264421
    },
    {
        "content": "<p>it's just the completeness axiom</p>",
        "id": 124333917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264427
    },
    {
        "content": "<p>which one?</p>",
        "id": 124333921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264442
    },
    {
        "content": "<p>oh and real induction is basically \"every non-empty clopen subset of R is R itself\"</p>",
        "id": 124333962,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264460
    },
    {
        "content": "<p>That's precisely the statement of connectedness.</p>",
        "id": 124333967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264479
    },
    {
        "content": "<p>they're so intertwined that you can't distinguish them</p>",
        "id": 124333970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264494
    },
    {
        "content": "<p>You might want to think of various things as induction but if you want to communicate with mathematicians you'd better know what they call these facts (and have called them for 100 years)</p>",
        "id": 124333977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264506
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/4204/328173\" target=\"_blank\" title=\"https://math.stackexchange.com/a/4204/328173\">https://math.stackexchange.com/a/4204/328173</a></p>",
        "id": 124333982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264540
    },
    {
        "content": "<blockquote>\n<p>I think I might spend some time over the summer making stuff into interfaces somehow. I am still concerned about manipulating finite sums. I want <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=1}^na_i = \\Sigma_{i=1}^na_{n+1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.941994em;vertical-align:-0.258664em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span></span></span></span> to be trivial</p>\n</blockquote>\n<p>It is trivial, because I proved it. Most of these \"obvious things that aren't obvious in lean\" problems are solved by proving a few lemmas.</p>",
        "id": 124334035,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522264624
    },
    {
        "content": "<p>master of finite sums</p>",
        "id": 124334050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264655
    },
    {
        "content": "<p>Chris -- we need an \"obvious_sum_thing\" tactic :-)</p>",
        "id": 124334051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264665
    },
    {
        "content": "<p>it's probably defined as \"apply thing_chris_proved &lt;|&gt; apply _other_thing_chris_proved &lt;|&gt; apply some_other_thing_chris_proved\"</p>",
        "id": 124334102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264701
    },
    {
        "content": "<p>My goal is to make Lean so that mathematicians can use it the way they do mathematics.</p>",
        "id": 124334122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264762
    },
    {
        "content": "<p>I think this will be hard, but that's what I'm striving for.</p>",
        "id": 124334126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264776
    },
    {
        "content": "<p>So when they are faced with some dumb sum re-arrangement they just look at the page on sums in some reference document and they see exactly the thing they want, spelt out.</p>",
        "id": 124334178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264814
    },
    {
        "content": "<p>and if even that's too much, then we write a tactic</p>",
        "id": 124334180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264825
    },
    {
        "content": "<p>Do you remember that Kenny you and I were talking about things being \"maths hard\" or \"Lean hard\" (i.e. \"obvious\" but a pain to formalise)</p>",
        "id": 124334190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264869
    },
    {
        "content": "<p>I don't</p>",
        "id": 124334193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264883
    },
    {
        "content": "<p>those are the bits I want to formalise, those last bits, and I hide them all in xena directory</p>",
        "id": 124334194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264886
    },
    {
        "content": "<p>you want to formalize the property of being difficult to be formalized?</p>",
        "id": 124334198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522264903
    },
    {
        "content": "<p>I want to formalise all the instances that my students discover</p>",
        "id": 124334206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264917
    },
    {
        "content": "<p>Maybe it was me and Chris and you. I think it was even you that coined the phrase \"Lean hard\" (which I interpreted informally as meaning \"trivial for a mathematician but rfl doesn't work\")</p>",
        "id": 124334259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522264982
    },
    {
        "content": "<p>Maybe it was Chris.</p>",
        "id": 124334268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265011
    },
    {
        "content": "<p>how is \"Kenny you and I\" different from \"me and Chris and you\"</p>",
        "id": 124334269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522265014
    },
    {
        "content": "<p>Oh I just misread what I wrote so restated something I'd already stated</p>",
        "id": 124334312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265043
    },
    {
        "content": "<p>lol</p>",
        "id": 124334320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522265058
    },
    {
        "content": "<p>simp [and_comm, and_assoc, and_left_comm]</p>",
        "id": 124334322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522265076
    },
    {
        "content": "<p>rfl</p>",
        "id": 124334324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522265081
    },
    {
        "content": "<blockquote>\n<p>So when they are faced with some dumb sum re-arrangement they just look at the page on sums in some reference document and they see exactly the thing they want, spelt out.</p>\n</blockquote>\n<p>that would be an interesting project. formalizing a handbook on sequences, sums, integrals, and derivatives</p>",
        "id": 124334401,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265238
    },
    {
        "content": "<p>i have one such handbook sitting on my shelf, it's quite thick</p>",
        "id": 124334405,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265251
    },
    {
        "content": "<p>fortunately integrals and derivatives are not my problem</p>",
        "id": 124334524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265404
    },
    {
        "content": "<p>at least not at the minute</p>",
        "id": 124334530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265408
    },
    {
        "content": "<p>and I'm not worried about the mathematical content</p>",
        "id": 124334539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265425
    },
    {
        "content": "<p>it's the trivial stuff that I want to make trivial</p>",
        "id": 124334543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522265431
    },
    {
        "content": "<p>i'm so uncomfortable with this word trivial</p>",
        "id": 124334651,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265637
    },
    {
        "content": "<p>i don't think under the hood these things are actually trivial</p>",
        "id": 124334704,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265657
    },
    {
        "content": "<p>I think mathematicians are really good at fooling themselves here</p>",
        "id": 124334708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522265674
    },
    {
        "content": "<p>But I think Chris was right. \"Trivial\" is a synonym for \"proved\"</p>",
        "id": 124334729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522265727
    },
    {
        "content": "<p>for example, you could ask any high schooler if real numbers are trivial... if they can rattle off the value of pi and know how to use e with logarithms... but they're in a shock if they ever figure out how they're built</p>",
        "id": 124334731,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265727
    },
    {
        "content": "<p>in a similar manner any programmer can use javascript and python to staple together a vast array of libraries to do anything under the sun</p>",
        "id": 124334796,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265803
    },
    {
        "content": "<p>to Kevin \"trivial\" means \"things that are repeated 100 times and so have become part of the intuition\"</p>",
        "id": 124334810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522265812
    },
    {
        "content": "<p>but using is not understanding</p>",
        "id": 124334811,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265814
    },
    {
        "content": "<p>i think a general tactic would be difficult to write</p>",
        "id": 124334895,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265948
    },
    {
        "content": "<p>but a library of common results is very feasible</p>",
        "id": 124334900,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265955
    },
    {
        "content": "<p>like the lemmas Chris has proved</p>",
        "id": 124334904,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522265966
    },
    {
        "content": "<p>I've seen PhD students prove hard theorems and then claim that all their results are trivial.</p>",
        "id": 124334973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266028
    },
    {
        "content": "<p>I've had to explain to them that everything is trivial once you fully understand the proof.</p>",
        "id": 124334978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266049
    },
    {
        "content": "<p>Right, that's exactly the point. A trivial fact need not be trivial to lean, until lean understands it, i.e. it is formally proven</p>",
        "id": 124335000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522266096
    },
    {
        "content": "<p>Perhaps part of the issue is conflating meanings of \"trivial\". If \"trivial\" means \"I understand it and there are no surprising things in it\", then the PhD may well find their results to be trivial. But this is by no means the same as \"an outsider would immediately see how to construct the proof\"</p>",
        "id": 124335152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522266337
    },
    {
        "content": "<p>I agree. I find the word more obfuscating than enlightening. I usually take it to mean \"I can't be bothered to elaborate\"</p>",
        "id": 124335290,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522266528
    },
    {
        "content": "<p>Already, if you say \"by basic calculus\" you're not giving a lot of details but the reader knows where to go if they don't want to take your word for it</p>",
        "id": 124335318,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522266583
    },
    {
        "content": "<p>Another issue is that trained mathematicians become extremely proficient at their art. I would expect anyone at my university to see that once you've been told what the sum of the first n squares is, you can see that there will be a trivial proof by induction. However</p>",
        "id": 124335471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266803
    },
    {
        "content": "<p>what happens later on is that you make assertions about more complex objects (or even classes of complex objects, like schemes) and you say \"fact X is true, and the proof is just that you generalise the standard proof of theorem T to this situation\"</p>",
        "id": 124335524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266848
    },
    {
        "content": "<p>and in general mathematicians (in my experience at least) are _extremely_ good at processing this idea and coming up with an opinion on whether this proof strategy will work.</p>",
        "id": 124335533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266882
    },
    {
        "content": "<p>The problem is that sometimes you see people getting this wrong: you can have conversations of the form \"X will be true, you can prove it by using technique Y...and then probably you can finish the job by induction\"</p>",
        "id": 124335552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266931
    },
    {
        "content": "<p>and two people agree, but one other person goes very quiet</p>",
        "id": 124335554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266940
    },
    {
        "content": "<p>and then 30 seconds later they say \"what if pathology Z occurs?\"</p>",
        "id": 124335560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266953
    },
    {
        "content": "<p>and then all of a sudden the conversation gets very animated and perhaps 1 minute later they have either proved that Z can't occur and everyone is now convinced that the theorem is proved</p>",
        "id": 124335607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522266982
    },
    {
        "content": "<p>or someone has concocted an example of a scheme with pathology Z and all of a sudden X is an open question again, or perhaps even we have a counterexample.</p>",
        "id": 124335617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267011
    },
    {
        "content": "<p>This is normal communication amongst mathematicians.</p>",
        "id": 124335623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267021
    },
    {
        "content": "<p>In some sense what I am worried about in my area of mathematics is that this has now gone too far, and there are so many subtleties that one has to be aware of, and so few people that are on top of most or all of them, that the process actually produces inaccurate results.</p>",
        "id": 124335655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267075
    },
    {
        "content": "<p>And what is frustrating is that in many cases, X is true, because there's a far more elaborate argument which deals with the pathology that everyone overlooked</p>",
        "id": 124335703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267119
    },
    {
        "content": "<p>I think Kevin is right that there are some things that are \"obvious\", hard to prove, but don't come up often enough for them to be in the library. Here's an example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span>\n</pre></div>",
        "id": 124335704,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522267125
    },
    {
        "content": "<p>so you can't just say \"your theorem is wrong, here is a counterexample\"</p>",
        "id": 124335705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267128
    },
    {
        "content": "<p>you have to just say \"I don't understand this bit of the argument\"</p>",
        "id": 124335711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267142
    },
    {
        "content": "<p>to which the response is sometimes \"oh yeah this needs clarification\"</p>",
        "id": 124335720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267157
    },
    {
        "content": "<p>and sometimes \"you should just work harder then\"</p>",
        "id": 124335722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267162
    },
    {
        "content": "<p>Right -- to a mathematician Chris' statement is trivial.</p>",
        "id": 124335787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267232
    },
    {
        "content": "<p>Now is that because the human brain is not a computer?</p>",
        "id": 124335791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267241
    },
    {
        "content": "<p>Or is it because Lean is bad?</p>",
        "id": 124335793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267247
    },
    {
        "content": "<p>Or is it because I am not thinking about the question in the right way?</p>",
        "id": 124335795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267257
    },
    {
        "content": "<p>This seems to me to be a great example of \"too many notions of finiteness\". It's quite hard to actually even write down something a mathematician would understand which is not of the form \"prove X = X\" here. The issue is that range n is not fin n</p>",
        "id": 124335882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267345
    },
    {
        "content": "<p>And I'm sure Mario could come up with a one-liner</p>",
        "id": 124335889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267373
    },
    {
        "content": "<p>but I am not at all sure that my first year students could.</p>",
        "id": 124335892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267383
    },
    {
        "content": "<p>The idea is that because this is a question only about f's values on range(n), f is somehow \"mathematically equivalent\" to g</p>",
        "id": 124335983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267512
    },
    {
        "content": "<p><code> example (n : ℕ) (f : ℕ → ℕ) (g : fin n → ℕ) (h : ∀ i : fin n, f i.1  = g i) : (range n).sum (\\lam x, (x + f x)^2) = univ.sum (\\lam i, (g i + i.1)*(g i + i.1)</code></p>",
        "id": 124336040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267592
    },
    {
        "content": "<p>You could imagine something like that happening in practice, and again the mathematician wants to invoke the \"it's obvious\" axiom.</p>",
        "id": 124336048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267638
    },
    {
        "content": "<p>tactic.</p>",
        "id": 124336050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267641
    },
    {
        "content": "<p>Looking at Chris's problem, my first instinct is to see if it follows from appropriate compositions of theorems</p>",
        "id": 124336052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267644
    },
    {
        "content": "<p>I'm sure you can prove it in one line.</p>",
        "id": 124336057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267662
    },
    {
        "content": "<p>But the question is how to make so that any mathematician can prove it in one line.</p>",
        "id": 124336059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267674
    },
    {
        "content": "<p>Once you have the right theorems you can just chain them</p>",
        "id": 124336100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267689
    },
    {
        "content": "<p>I'm struggling to prove it at all.</p>",
        "id": 124336101,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522267696
    },
    {
        "content": "<p>that's what a good library does for you</p>",
        "id": 124336103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267702
    },
    {
        "content": "<p>Right.</p>",
        "id": 124336105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267708
    },
    {
        "content": "<p>and then a good reference manual guides you through.</p>",
        "id": 124336107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267715
    },
    {
        "content": "<p><code>sum_attach</code> almost does it</p>",
        "id": 124336112,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522267724
    },
    {
        "content": "<p>First of all, <code>g</code> is unnecessary</p>",
        "id": 124336124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267754
    },
    {
        "content": "<p>yes</p>",
        "id": 124336129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522267775
    },
    {
        "content": "<p>although it's probably nice for use in a lemma</p>",
        "id": 124336131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267788
    },
    {
        "content": "<p>Now how do we know <code>fin n</code> is finite, so that <code>univ</code> exists? It is surely a map of <code>finset.range n</code></p>",
        "id": 124336191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267838
    },
    {
        "content": "<p>Sure enough, it is defined from <code>list.pmap fin.mk (list.range n) (λ a, list.mem_range.1) </code></p>",
        "id": 124336223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267905
    },
    {
        "content": "<p>so you want a lemma about mapping over <code>list.pmap</code> or its finset equivalent</p>",
        "id": 124336270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522267930
    },
    {
        "content": "<p>An alternative approach is just to prove it by induction. Then you'd need four theorems</p>",
        "id": 124336505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268294
    },
    {
        "content": "<p>Empty sums, and sums to n+1 being sum to n then one more</p>",
        "id": 124336515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268329
    },
    {
        "content": "<p>This, by the way, is an even simpler example of the thing I was trying (but not really succeeding) to ask about a couple of weeks ago. If a mathematician wants to sum the first n squares in Lean, then I am very unclear about whether they should use the f approach or the g approach. In maths they are one and the same thing. The question I was trying to ask a couple of weeks ago is whether in situations like this there is \"a correct Lean answer\".</p>",
        "id": 124336663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268579
    },
    {
        "content": "<p>Induction is quite difficult. I got stuck here.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">sum</span> <span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">univ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n</pre></div>",
        "id": 124336669,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522268595
    },
    {
        "content": "<p>But it can just be a theorem in a library once Mario has written the one-liner</p>",
        "id": 124336680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268639
    },
    {
        "content": "<p>You need some sum erase lemma Chris</p>",
        "id": 124336732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268700
    },
    {
        "content": "<p>It's not as simple as that. My two finsets have different types.</p>",
        "id": 124336743,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522268733
    },
    {
        "content": "<p>Yes</p>",
        "id": 124336744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268740
    },
    {
        "content": "<p>It's always about the type changing</p>",
        "id": 124336748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268758
    },
    {
        "content": "<p>Presumably it's much easier to do the range induction</p>",
        "id": 124336787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268771
    },
    {
        "content": "<p>The issue is that mathematicians have a really powerful notion of equality</p>",
        "id": 124336795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268802
    },
    {
        "content": "<p>I think you need to prove it for m \\le n, for a finset of type fin n containing elements less than m.</p>",
        "id": 124336807,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522268826
    },
    {
        "content": "<p>Where fin succ n \"equals\" fin n and then n</p>",
        "id": 124336809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522268830
    },
    {
        "content": "<p>The finset of type fin n defined as the elements whose value is less than m, is canonically isomorphic (and hence, in a mathematician's mind, equal) to fin m. Just like computer scientists can formulate the recursor for an inductive type, mathematicians have some sort of construction which enables them to pass effortlessly between canonically isomorphic objects. For me, range n and fin n are canonically isomorphic, and your result is an immediate application of some sort of theorem formalising the assertion that doing the same thing to two canonically isomorphic situations results in the same answer.</p>",
        "id": 124337090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269251
    },
    {
        "content": "<p>It's a fact that fin n and range n are canonically isomorphic via the map sending i to i.1</p>",
        "id": 124337115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269350
    },
    {
        "content": "<p>Chris' assumption <code> (h : ∀ i : fin n, f i.1  = g i) </code> is the statement that this canonical isomorphism extends to a canonical isomorphism between the pair (f restricted to range n,range n) and (g,fin n)</p>",
        "id": 124337158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269381
    },
    {
        "content": "<p>and now a general \"thing\" analogous to a recursor says that any construction which spits out an object which is unique up to unique isomorphism (such as a natural number) will spit out the same object if it is applied to two canonically isomorphic situations.</p>",
        "id": 124337173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269440
    },
    {
        "content": "<p>That is the way a mathematician thinks about this question.</p>",
        "id": 124337174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269447
    },
    {
        "content": "<p>More generally g i could have been some group</p>",
        "id": 124337225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269503
    },
    {
        "content": "<p>and f (i.1) could have been a canonically isomorphic group</p>",
        "id": 124337229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269514
    },
    {
        "content": "<p>and then the product of the f(i.1) would only have been canonically isomorphic to the product of the g(i)</p>",
        "id": 124337231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269532
    },
    {
        "content": "<p>Where are these notions in dependent type theory?</p>",
        "id": 124337296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522269616
    },
    {
        "content": "<p>I want a general theorem which takes an inputs (1) a bijection <code>fin n = range n</code> (mathematicians would even write this map as = ) and (2) a construction on the fin n side (such as the function sending <code>g : fin n -&gt; nat</code> to <code>univ.sum g</code>) and spits out (a) a function f from range n to nat (b) a proof of <code> ∀ i : fin n, f i.1  = g i </code> and (c) a proof of <code> (range n).sum f = univ.sum g </code>. All of this is internalised somehow in mathematics as being sufficiently obvious as to not need a proof. Unfortunately what I write somehow doesn't make sense because range n is not a type.</p>",
        "id": 124337530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270059
    },
    {
        "content": "<p>I can't even formalise what I want.</p>",
        "id": 124337580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270142
    },
    {
        "content": "<p>Finally proved it. Not pretty</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span>\n<span class=\"k\">from</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mem_range</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">coe_pmap</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_pmap</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">pmap_eq_map</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h₁</span>\n</pre></div>",
        "id": 124337596,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522270180
    },
    {
        "content": "<p>I thought you were supposed to be revising mechanics?</p>",
        "id": 124337657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270216
    },
    {
        "content": "<p>Chris if I now asked you to prove something like: if <code>f : nat -&gt; {2,4,6}</code> and <code>g : fin n -&gt; {2,4,6}</code> and h is the same, then max of f over range(n) equalled max of g over fin n, would the proof be \"the same\"?</p>",
        "id": 124337748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270388
    },
    {
        "content": "<p>Or would you have to change some application of some theorem in the library to an application of another theorem?</p>",
        "id": 124337754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270414
    },
    {
        "content": "<p>or if f : nat -&gt; bool and g : fin n -&gt; bool, and I asked you to prove that f(0) and f(1) and ... and f(n-1) = g(0) and g(1) and ... and g(n-1), would the proof be \"the same\"?</p>",
        "id": 124337810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270482
    },
    {
        "content": "<p>(assuming the functions existed which and'd together a list of bools)</p>",
        "id": 124337823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270509
    },
    {
        "content": "<p>More or less, but with fold instead of sum. I actually got a fair amount of revision done today, so I thought I'd treat myself to lean.</p>",
        "id": 124337836,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522270537
    },
    {
        "content": "<p>(oh crap there would be two such functions? One for fin n and one for range(n)?</p>",
        "id": 124337837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270539
    },
    {
        "content": "<p>It is not true that <code>fin n</code> and <code>range n</code> are canonically isomorphic, because they aren't even the same kind of thing</p>",
        "id": 124337892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270590
    },
    {
        "content": "<p>I know</p>",
        "id": 124337902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270605
    },
    {
        "content": "<p>but they are</p>",
        "id": 124337903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270607
    },
    {
        "content": "<p>it's impossible to decide either way because there is no definition of canonical</p>",
        "id": 124337913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270621
    },
    {
        "content": "<p><code>range n</code> is to be thought of as the LIST <code>[0,1,2,...,n-1]</code>, <code>fin n</code> is the SET of numbers less than n</p>",
        "id": 124337921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270627
    },
    {
        "content": "<p>What can be said is that <code>range n</code> enumerates <code>fin n</code></p>",
        "id": 124337926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270638
    },
    {
        "content": "<p>and I completely understand that in type theory it doesn't make sense to write down a map from one to the other</p>",
        "id": 124337927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270639
    },
    {
        "content": "<p>and that's what <code>pmap</code> is doing</p>",
        "id": 124337935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270655
    },
    {
        "content": "<p><code> unknown identifier 'pmap' </code></p>",
        "id": 124337952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270680
    },
    {
        "content": "<p><code>{list,multiset}.pmap</code></p>",
        "id": 124337994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270698
    },
    {
        "content": "<p>It's really annoying that imports have to be on line 1. Is that just something that can never change?</p>",
        "id": 124338005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270729
    },
    {
        "content": "<p>I don't think it would be a good idea to change</p>",
        "id": 124338018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270754
    },
    {
        "content": "<p>I don't think it's true in python</p>",
        "id": 124338023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270769
    },
    {
        "content": "<p>that well-known functional language</p>",
        "id": 124338024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270773
    },
    {
        "content": "<p>The collection of imports allows you to easily see file-level dependencies</p>",
        "id": 124338025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270778
    },
    {
        "content": "<p>It's standard practice in C/C++/java</p>",
        "id": 124338031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522270794
    },
    {
        "content": "<p><code>#check multiset.pmap</code> (rolls eyes) <code>#check  @multiset.pmap</code></p>",
        "id": 124338115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270881
    },
    {
        "content": "<p>How was I supposed to know that <code>?M_3</code> was a map from <code>?M_1</code> to <code>Prop</code>?</p>",
        "id": 124338165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522270938
    },
    {
        "content": "<p>Mario you're right, there is somehow a difference between objects which are superficially in bijection to a naive eye and types which really do biject. So one of the problems here is that this underlying set with size n is being modelled both as a type and as data, and one has to find a route from one to the other.</p>",
        "id": 124338245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271098
    },
    {
        "content": "<p>So my \"general principle\" needs to be broken down into several specific instances. This is somehow what I was trying to ask a couple of weeks ago. I was asking a too high-powered question. I was asking \"let's say someone proves Lagrange's theorem for some notion of a finite group. However are we now going to port this to a proof of Lagrange's theorem for some other notion of a finite group?\" I am not sure anyone ever understood what I was asking.</p>",
        "id": 124338337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271269
    },
    {
        "content": "<p>But Chris' question is much better. \"Say I have formalised the notion of sum of f(i) for 0&lt;=i&lt;n in some way in dependent type theory. How am I going to prove that my sum equals the sum as formalised in a different way?\"</p>",
        "id": 124338402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271330
    },
    {
        "content": "<p>Let me stress and stress and stress that in mathematics there is only one way to formalise this, and it's <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>f</mi><mo>(</mo><mi>i</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma_{i=0}^{n-1}f(i).</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.854239em;\"></span><span class=\"strut bottom\" style=\"height:1.131103em;vertical-align:-0.276864em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">0</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">i</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span></span></span></span></p>",
        "id": 124338421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271364
    },
    {
        "content": "<p>You guys even might need to prove that if f and g are two functions nat -&gt; nat and f(i) = g(i) for all i &lt; n, then the sums are equal.</p>",
        "id": 124338491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271423
    },
    {
        "content": "<p>The proof of this is not rfl. And yet it is manifestly obvious in some way.</p>",
        "id": 124338505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271458
    },
    {
        "content": "<p>What is going on here?</p>",
        "id": 124338509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271463
    },
    {
        "content": "<p>I have to prove it by induction on n.</p>",
        "id": 124338519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271482
    },
    {
        "content": "<p>In Lean. But it wouldn't make it to the blackboard ;-)</p>",
        "id": 124338534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271516
    },
    {
        "content": "<blockquote>\n<p>You guys even might need to prove that if f and g are two functions nat -&gt; nat and f(i) = g(i) for all i &lt; n, then the sums are equal.</p>\n</blockquote>\n<p><code>finset.sum_congr</code> already does that.</p>",
        "id": 124338580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522271548
    },
    {
        "content": "<p>aah but only for finsets :-)</p>",
        "id": 124338590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271567
    },
    {
        "content": "<p>What about if I make the sum over fin n?</p>",
        "id": 124338597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271597
    },
    {
        "content": "<p>f(i.1) etc</p>",
        "id": 124338601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271601
    },
    {
        "content": "<p>now you have to provide me with another lemma.</p>",
        "id": 124338604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271620
    },
    {
        "content": "<p>And what if I then wanted it over the multiset {1,2,...,n}?</p>",
        "id": 124338647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271650
    },
    {
        "content": "<p>And then over the list [1,2,...,n]?</p>",
        "id": 124338659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271697
    },
    {
        "content": "<p>These are all different lemmas, right?</p>",
        "id": 124338672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271712
    },
    {
        "content": "<p>all saying the same thing which 95% of mathematicians do not even realise needs a proof.</p>",
        "id": 124338680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271747
    },
    {
        "content": "<p>\"If your system doesn't do that automatically what kind of a stupid system is that?\"</p>",
        "id": 124338729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271774
    },
    {
        "content": "<p>I can hear the taunts now.</p>",
        "id": 124338730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271780
    },
    {
        "content": "<p>Computers are stupid. People have been dealing with that fact forever, but it's okay, because they still do a lot of things better than people. The key is to persuade people that lean can do some things better than people.</p>",
        "id": 124338750,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522271879
    },
    {
        "content": "<p>All of this stuff has to be collected up and curated in a good way. Sounds like Mario and his group have proved most (but possibly not quite all) the lemmas, and now we just need someone to write down their names. I have been carrying round some printouts of lean files for a while now. Did you know <code>multiset.lean</code> is 91k long?!</p>",
        "id": 124338792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271916
    },
    {
        "content": "<p>I want Lean to do some things better than people, but as little as possible much much worse than people</p>",
        "id": 124338796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271941
    },
    {
        "content": "<p>and by people I mean mathematicians</p>",
        "id": 124338800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271945
    },
    {
        "content": "<p>obviously</p>",
        "id": 124338802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271953
    },
    {
        "content": "<p>;-)</p>",
        "id": 124338805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271960
    },
    {
        "content": "<p>over 2000 lines of multiset.lean. I read it in the bath occasionally.</p>",
        "id": 124338812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522271989
    },
    {
        "content": "<p>My copy is covered in comments.</p>",
        "id": 124338839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272003
    },
    {
        "content": "<p>I believe in comprehensive libraries - and that is an achievable goal</p>",
        "id": 124338876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272048
    },
    {
        "content": "<p>The names already are written down in mathlib. Writing them in a different format won't make any difference. Mostly they don't need to much of an explanation, and mostly they're part of a manageably short list of lemmas with the right word in the name.</p>",
        "id": 124338878,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522272050
    },
    {
        "content": "<p>I absolutely agree with you that comprehensive libraries are really important and that you are extremely good at providing them.</p>",
        "id": 124338893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272077
    },
    {
        "content": "<p>Those examples you gave are not different lemmas for the most part</p>",
        "id": 124338900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272101
    },
    {
        "content": "<p>most of it comes from <code>funext</code></p>",
        "id": 124338902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272115
    },
    {
        "content": "<p>What I need to do is to somehow distill from these comprehensive libraries the results which are \"so obvious that a mathematician needs to be told how to prove them in Lean\"</p>",
        "id": 124338904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272118
    },
    {
        "content": "<p>All of it?</p>",
        "id": 124338946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272136
    },
    {
        "content": "<p>Maybe.</p>",
        "id": 124338949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272153
    },
    {
        "content": "<p>Or lots of it, at least.</p>",
        "id": 124338952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272159
    },
    {
        "content": "<p>But somehow I wonder whether we can ignore much of the lower level stuff</p>",
        "id": 124338955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272171
    },
    {
        "content": "<p>You shouldn't need to consult the construction of R for work based on it, for example</p>",
        "id": 124338962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272201
    },
    {
        "content": "<p>but I think I really need to concentrate on documenting the stuff which shows up in practice when people are manipulating finite types.</p>",
        "id": 124338964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272204
    },
    {
        "content": "<p>Aah yes, R is a good example. People need to know the name of the theorem which says non-empty and bounded implies LUB</p>",
        "id": 124338969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272222
    },
    {
        "content": "<p>and add_assoc etc</p>",
        "id": 124338970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272230
    },
    {
        "content": "<p>but they should hopefully never have to open real.lean</p>",
        "id": 124338972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272241
    },
    {
        "content": "<p>By people I mean mathematicians</p>",
        "id": 124339012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272248
    },
    {
        "content": "<p>I have a long postponed development of sums over nat (similar to Chris's earlier attempt)</p>",
        "id": 124339013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522272254
    },
    {
        "content": "<p>Over July and August I think I will be bombarded with people asking me how to do mathematics that they thought was trivial, in Lean.</p>",
        "id": 124339020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272287
    },
    {
        "content": "<p>I will answer as best I can.</p>",
        "id": 124339022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272297
    },
    {
        "content": "<p>I like Zulip. I know I've said this before but starring stuff really is useful. You star it, you forget it, you find the time a week later by which time you've forgotten the name of the topic, and there it is right there in your list of starred messages. Really helps my workflow. I have to go and clean a kitchen.</p>",
        "id": 124339032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272355
    },
    {
        "content": "<p>Thanks to everyone as ever. This has been really instructive.</p>",
        "id": 124339071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522272364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what is it with you asking everyone to revise mechanics :P</p>",
        "id": 124343487,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522280428
    },
    {
        "content": "<p>It's just what I'd be doing if I was your age.</p>",
        "id": 124355080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I mean, of course we need to revise</p>",
        "id": 124355092,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306188
    },
    {
        "content": "<p>but what is it with the obsession with mechanics</p>",
        "id": 124355094,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306196
    },
    {
        "content": "<p>It's just what I'd be doing if I was your age.</p>",
        "id": 124355291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306607
    },
    {
        "content": "<p>Because that one was the course where there seemed to be no axioms :-)</p>",
        "id": 124355298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306629
    },
    {
        "content": "<p>fair enough</p>",
        "id": 124355300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306639
    },
    {
        "content": "<p>\"Apply conservation of energy\" -&gt; \"contradiction\" -&gt; \"teacher says <code>obviously energy is lost to heat in this question</code></p>",
        "id": 124355301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306658
    },
    {
        "content": "<p>My conclusion was that conservation of energy was an axiom which should only be applied if desperate.</p>",
        "id": 124355341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306693
    },
    {
        "content": "<p>I thought conservation of energy isn't an axiom</p>",
        "id": 124355348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306764
    },
    {
        "content": "<p>I'd better revise mechanics</p>",
        "id": 124355412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522306885
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Noether%27s_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Noether%27s_theorem\">https://en.wikipedia.org/wiki/Noether%27s_theorem</a></p>",
        "id": 124355413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522306908
    },
    {
        "content": "<p>+1 for anything that gets closer to formalizing the calculus of variations</p>",
        "id": 124355459,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522306990
    },
    {
        "content": "<p>Shortest proof I can manage of the stupid lemma. More or less wrote itself once I saw <code>sum_bij</code> existed.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">sum_bij</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">veq_of_eq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124422668,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522433290
    },
    {
        "content": "<p>oh wow you proved it</p>",
        "id": 124422695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522433388
    },
    {
        "content": "<p>congratulations</p>",
        "id": 124422696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522433390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> which modules did you import and which namespaces did you open?</p>",
        "id": 124422845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522433559
    },
    {
        "content": "<p><code>algebra.big_operators</code> and <code>data.fintype</code> and namespace <code>finset</code></p>",
        "id": 124422940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522433692
    },
    {
        "content": "<p>thanks</p>",
        "id": 124423056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522433819
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\nsummand : ℕ → ℕ,\nn : ℕ\n⊢ finset.sum finset.univ (λ (x : fin (succ n)), summand (x.val)) =\n    summand n + finset.sum finset.univ (λ (x : fin n), summand (x.val))\n</pre></div>",
        "id": 124424620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522435701
    },
    {
        "content": "<p>any guidance?</p>",
        "id": 124424622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522435703
    },
    {
        "content": "<p>You shouldn't prove that by induction, you should use chris's lemma</p>",
        "id": 124424655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522435752
    },
    {
        "content": "<p>no that isn't the same thing</p>",
        "id": 124424675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522435786
    },
    {
        "content": "<p>and I need to prove that thing</p>",
        "id": 124424677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522435790
    },
    {
        "content": "<p>it relates the univ sum to a sum over nat, which has good inductive properties</p>",
        "id": 124424736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522435819
    },
    {
        "content": "<p><code>rw \\l sum_insert n</code> on the <code>succ n</code> univ.</p>",
        "id": 124424761,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522435852
    },
    {
        "content": "<p>Then <code>sum_bij</code></p>",
        "id": 124424771,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522435865
    },
    {
        "content": "<p>I see</p>",
        "id": 124424777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522435876
    },
    {
        "content": "<p><code>rw [← insert_erase (mem_univ (⟨n, lt_succ_self n⟩: fin (succ n))), sum_insert (not_mem_erase _ _)], </code> is a good start.</p>",
        "id": 124425042,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522436207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import algebra.big_operators data.fintype\nopen finset nat\n\ntheorem chris (n : ℕ) (f : ℕ → ℕ) (g : fin n → ℕ) (h : ∀ i : fin n, f i.1  = g i) :\n    (range n).sum f = univ.sum g :=\nsum_bij\n  (λ i h, ⟨i, mem_range.1 h⟩)\n  (λ i h, mem_univ _)\n  (λ a ha, h ⟨a, _⟩)\n  (λ _ _ _ _, fin.veq_of_eq)\n  (λ ⟨b, hb⟩ _, ⟨b, mem_range.2 hb, rfl⟩)\n\nexample (summand : ℕ → ℕ) (n : ℕ) :\n  finset.sum finset.univ (λ (x : fin (succ n)), summand (x.val)) =\n    summand n + finset.sum finset.univ (λ (x : fin n), summand (x.val)) :=\nby rw [← chris _ _ _ (λ _, rfl), ← chris _ _ _ (λ _, rfl)]; simp\n</pre></div>",
        "id": 124425141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522436378
    },
    {
        "content": "<p>Don't know why I didn't think of that.</p>",
        "id": 124425956,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522437722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in your blog you told us to <code>apply funext</code>, but actually you can just <code>funext</code></p>",
        "id": 124427350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522440157
    },
    {
        "content": "<p>I wouldn't believe anything I say :-)</p>",
        "id": 124427917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522440960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> please moderate my comment</p>",
        "id": 124427966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522440994
    }
]