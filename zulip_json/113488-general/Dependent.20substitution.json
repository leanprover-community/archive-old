[
    {
        "content": "<p>How to deal with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">n</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"o\">,</span>   <span class=\"c1\">-- fails</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span>   <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277405391,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648814161
    },
    {
        "content": "<p>the theorem isn't provable?</p>",
        "id": 277405749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648814362
    },
    {
        "content": "<p>What do you want your goal to be after any of these tactics?</p>",
        "id": 277405755,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648814365
    },
    {
        "content": "<p>Here is to prove it. You want to generalize one of the sides of the equality <code>H</code> to be a fresh variable, so you can substitute/case it away.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n'</span> <span class=\"n\">h'</span> <span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"n\">H</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277406440,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648814746
    },
    {
        "content": "<p>Thanks, it works. But I'm wondering can simp_rw be improved to handle such situations?<br>\nI was expecting to have goal <code>f n = H.rec ma</code> after simp_rw.</p>",
        "id": 277407966,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648815532
    },
    {
        "content": "<p>I ran into something similar with <code>cons_induction_cons</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/13027\">#13027</a>. It would be nice if <code>generalize</code> could help</p>",
        "id": 277419636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648820598
    },
    {
        "content": "<p>here's a proof that doesn't require stating the induction hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">ma</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277424480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648822542
    },
    {
        "content": "<p>Does something similar work for my cons proof?</p>",
        "id": 277445276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648831074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That works only in this contrived example, because <code>h</code> is universally quantified over <code>V n</code> and doesn't need any properties of <code>ma</code>. In my actual context, it cannot be applied. Floris van Doorn's solution cannot be applied either. Here is a very simplified and minimized example obtained from my actual lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">structure</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">s.b</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">s.a</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">constant</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">f₂</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">s.c</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">y</span> <span class=\"n\">s.a</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">s.c</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">s.a</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">I.x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">y</span>\n<span class=\"kd\">constant</span> <span class=\"n\">I.f₄</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">y</span> <span class=\"n\">s.a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">y</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">K.mk</span>\n<span class=\"kd\">def</span> <span class=\"n\">K.f₅</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s₁</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₆</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g.f₅</span> <span class=\"o\">(</span><span class=\"n\">f₃</span> <span class=\"n\">g.s</span> <span class=\"o\">(</span><span class=\"n\">g.d.f</span> <span class=\"n\">g.s</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">s.a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">y</span> <span class=\"n\">s'.a</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">s'.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"n\">y</span> <span class=\"n\">s'.a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">I.x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f₄</span> <span class=\"n\">s'</span> <span class=\"n\">ma</span>\n  <span class=\"k\">in</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">f₆</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s.a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f₆</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s'</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a.f</span> <span class=\"o\">(</span><span class=\"n\">f₆</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.f</span> <span class=\"n\">s'</span> <span class=\"n\">hs₁</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We don't need to look at all those definitions. All we can observe is that we have hypothesis <code>h₁</code> and the goal would be refl after rewriting <code>h₁</code>. I don't really see what to generalize in order to close this goal...?</p>",
        "id": 277459639,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648837266
    },
    {
        "content": "<p>kind of messy, but <code>congr, exact h₁, exact h₁, apply proof_irrel_heq,</code> works</p>",
        "id": 277461017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648837852
    },
    {
        "content": "<p>or just <code>congr'</code></p>",
        "id": 277461096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648837884
    },
    {
        "content": "<p>This is the shortest proof I can get (for the first example). We don't need to generalize anything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_of_eq_rec_left</span> <span class=\"n\">H</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277519000,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648892634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Here's another proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ma</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">ma</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277544446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648924485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Dependent.20substitution/near/277419636\">said</a>:</p>\n<blockquote>\n<p>I ran into something similar with <code>cons_induction_cons</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/13027\">#13027</a>. It would be nice if <code>generalize</code> could help</p>\n</blockquote>\n<p>Here's a mwe of this proof, in case anyone feels like being sniped by it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">open</span> <span class=\"n\">fin</span>\n\n<span class=\"sd\">/-- Recurse on an `n+1`-tuple by splitting it into a single element and an `n`-tuple. -/</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cons_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">cons_self_tail</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cons_induction_cons</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">cons_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cons_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">cons_induction</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">cast_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tail_cons</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277702073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649062976
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cons_induction_cons</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">cons_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cons_induction</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tail_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277769441,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649094618
    },
    {
        "content": "<p>do we have a dependent <code>congr_arg(₂)</code>? I think this is the correct glue, this <code>congr</code> does some crazy <code>eq.rec</code>s that I don't understand</p>",
        "id": 277769883,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649094819
    },
    {
        "content": "<p>which makes sense, I guess, as that is what congr_arg basically is</p>",
        "id": 277770010,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649094869
    },
    {
        "content": "<p>I feel like I'm understanding this a bit better; in some ways you want to <code>rw (h)eq.rec (h x_0 x) (tail_cons _ _)</code> but the elaborator is not going to be happy matching that</p>",
        "id": 277770634,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649095136
    },
    {
        "content": "<p>I've been wanting <code>congr_arg₂</code>, <code>congr_fun₂</code> and <code>funext₂</code> recently. I was about to add them. What do people think?</p>",
        "id": 277773318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649096215
    },
    {
        "content": "<p>seems like a good idea to me!</p>",
        "id": 277773371,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649096244
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, I have no idea how I didn't find that; edited the PR to use your proof</p>",
        "id": 277775507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649097295
    }
]