[
    {
        "content": "<p>I'm using a mathlib library extensively today, with lots of namespaces, and I never know which one I'm in. I just edit my copy of _target/deps/mathlib, after lemma X : ... I write <code>#print X</code> and then I see the full name in the output, and then I ctrl-Z back to normality. Is there a better way of doing this?</p>",
        "id": 160957614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552753672
    },
    {
        "content": "<p><code>import tactic.where</code> at the top and then <code>#where</code> at the place you are interested in. Thanks to <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>.<br>\nIt's too bad that the <code>import</code> is still necessary...</p>",
        "id": 160957690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552753798
    },
    {
        "content": "<p>You were editing the file anyway, so apparently you aren't scared of triggering yellow bars in mathlib...</p>",
        "id": 160957748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552753833
    },
    {
        "content": "<p>It's not ideal :-)</p>",
        "id": 160957752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552753844
    },
    {
        "content": "<p>It would be awesome if one could inspect Lean without triggering a recompile</p>",
        "id": 160957753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552753850
    },
    {
        "content": "<p>In theory this should be possible... all the info is in the <code>.olean</code>. But it would require interaction between VScode and Lean server mode that might not currently be possible...</p>",
        "id": 160957770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552753902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you have any idea how hard it would be to implement such a thing?</p>",
        "id": 160957816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552753928
    },
    {
        "content": "<p>I think my solution of <code>#print [name]</code> is easier than putting the import at the top</p>",
        "id": 160957827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552753957
    },
    {
        "content": "<p>in my context</p>",
        "id": 160957830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552753966
    },
    {
        "content": "<p>I can see that <code>where</code> is useful in other situations though :-) (e.g. when I get lost in my own file :-) )</p>",
        "id": 160957840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552753994
    },
    {
        "content": "<p>TIL about <code>#where</code>, but I usually just do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">open_namespaces</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n</pre></div>",
        "id": 160958124,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1552754404
    },
    {
        "content": "<p>I guess that is part of what <code>#where</code> does. It still triggers yellow bars though...</p>",
        "id": 160958153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552754507
    },
    {
        "content": "<p>I've realised I also want to know what variables have been declared and which namespaces are open!</p>",
        "id": 160958225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552754641
    },
    {
        "content": "<p>What is happening is that I want to write a lemma in mathlib, and then take that lemma out of the mathlib file and rewrite it in a file of my own, with a note to add it to mathlib one day</p>",
        "id": 160958269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552754673
    },
    {
        "content": "<p>All these things are issues for when I'm doing the porting.</p>",
        "id": 160958275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552754689
    },
    {
        "content": "<p>I guess there's an argument for #where :-)</p>",
        "id": 160958276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552754699
    },
    {
        "content": "<p>Right... <code>#where</code> tries to output code that is ready to copy and paste for exactly those situations</p>",
        "id": 160958351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552754834
    },
    {
        "content": "<p>Yes I get it now :-) Thanks!</p>",
        "id": 160958355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552754855
    },
    {
        "content": "<p>Sometimes it messes up the variable order...</p>",
        "id": 160958356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552754858
    }
]