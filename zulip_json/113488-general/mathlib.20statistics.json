[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_stats.html\">June is now a record setting month for mathlib!</a> 70% more commits this month than our pre-corona high. Our 2020 total is already very close to our 2019 total. And there's a very good chance we'll have 300k lines of code in the repository before the end of the month.</p>",
        "id": 202183382,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593260215
    },
    {
        "content": "<p>My blog has also had has many hits this year as in the whole of last year</p>",
        "id": 202211488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593303527
    },
    {
        "content": "<p>43000 views and 20000 visitors this year. My post on mathematics in type theory has already had as many views as my viraly fashionable mathematics post. These posts are both just basically adverts for the lean and mathlib community. I'm really hoping that as the API gets better we'll be able to really start attracting mathematicians</p>",
        "id": 202211638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593303838
    },
    {
        "content": "<p>Yesterday was a big day! We closed out June by hitting a bunch of milestones. For one, we broke 300k loc. For another, the number of commits in June was more than double the pre-corona high. And hafway into 2020, we have more commits for the year than we did in all of 2019.</p>",
        "id": 202543312,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593592441
    },
    {
        "content": "<p>Let's hope we'll have another lockdown to migrate mathlib to Lean 4. We'll need that kind of productivity.</p>",
        "id": 202543896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593592876
    },
    {
        "content": "<p>And we didn't even count the commits to the community fork.</p>",
        "id": 202545603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593594047
    },
    {
        "content": "<p>On the mathlib statistics page:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a><br>\nthere's a running total of the number of definitions and theorems and meta declarations in mathlib.  Could there also be a running total of the number of people who have contributed to mathlib?</p>",
        "id": 214740148,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603821940
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/graphs/contributors\">https://github.com/leanprover-community/mathlib/graphs/contributors</a></p>",
        "id": 214740270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821981
    },
    {
        "content": "<p>Pretty sure those never show more than 99 contributors</p>",
        "id": 214740370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603822025
    },
    {
        "content": "<p>Sorry, this page doesn't show total</p>",
        "id": 214740371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603822025
    },
    {
        "content": "<p>Yes (there's also a list like this further down the website page<br>\n<a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a><br>\n).  But I'm suggesting adding the absolute number to the top-line total.  Just for marketing!</p>",
        "id": 214740435,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603822056
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/\">https://github.com/leanprover-community/mathlib/</a> says 119</p>",
        "id": 214740488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603822079
    },
    {
        "content": "<p>It's slightly trickier than you'd expect. The numbers at the top come from doc-gen, at the time the website is generated. The stats below come from a JS file, which is generated once a day by gitstats, and you get the most recent numbers whenever you load the website.</p>",
        "id": 214740713,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822172
    },
    {
        "content": "<p>Presumably gitstats can give us the contributor count.</p>",
        "id": 214740751,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822184
    },
    {
        "content": "<p>But it won't be static at the time the website is generated, we'd have to update the count with JS or something.</p>",
        "id": 214740871,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822225
    },
    {
        "content": "<p>There are certainly Imperial undergrads who contributed in 2018 and are mentioned in the first few lines of Lean files but who never made a PR (e.g. they were working in a small group together, and one PR'ed).</p>",
        "id": 214740911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603822245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20statistics/near/214740911\">said</a>:</p>\n<blockquote>\n<p>There are certainly Imperial undergrads who contributed in 2018 and are mentioned in the first few lines of Lean files but who never made a PR (e.g. they were working in a small group together, and one PR'ed).</p>\n</blockquote>\n<p>You beat me to it, this is the second reason it's tricky. The \"real\" count is something like 15-20 more than what GitHub says.</p>",
        "id": 214740982,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822280
    },
    {
        "content": "<p>But this can be addressed, right?  Just add 15 :)</p>",
        "id": 214741023,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603822300
    },
    {
        "content": "<p>And there are all kinds of ambiguities in how you count this.</p>",
        "id": 214741027,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822301
    },
    {
        "content": "<p>Frankly, I don't think it matters if the count is exactly right.  What would be nice would be to have a count which is reasonable, approximately correct, and keeps going up.</p>",
        "id": 214741153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603822343
    },
    {
        "content": "<p>I wouldn't use the git statistics, is <code>sgouezel &lt;urkud@urkud.name&gt;</code> a contributor?  Counting the number of github usernames who made a PR seems more robust.</p>",
        "id": 214741164,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603822350
    },
    {
        "content": "<p>We have a mailmap file</p>",
        "id": 214741243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603822392
    },
    {
        "content": "<p>You can use a <code>.mailmap</code> to merge together emails from the same github user</p>",
        "id": 214741246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603822393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/mathlib.20statistics/near/214741164\">said</a>:</p>\n<blockquote>\n<p>I wouldn't use the git statistics, is <code>sgouezel &lt;urkud@urkud.name&gt;</code> a contributor?  Counting the number of github usernames who made a PR seems more robust.</p>\n</blockquote>\n<p>I think this is what the GitHub stats do.</p>",
        "id": 214741250,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822394
    },
    {
        "content": "<p>I've been maintaining a mailmap which takes care of <code>sgouezel &lt;urkud@urkud.name&gt;</code>: <a href=\"https://github.com/leanprover-community/mathlib-mailmap\">https://github.com/leanprover-community/mathlib-mailmap</a> (maintainers only so that spam crawlers won't immediately get all our email addresses)</p>",
        "id": 214741307,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603822422
    },
    {
        "content": "<p>Oh, wait, maybe we can use the PyGithub API to get a contributor count as part of the website build?</p>",
        "id": 214741309,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603822422
    },
    {
        "content": "<blockquote>\n<p>There are certainly Imperial undergrads who contributed in 2018 and are mentioned in the first few lines of Lean files but who never made a PR</p>\n</blockquote>\n<p>As a hack, you could add their names to the <code>.mailmap</code>, and stick co-authored-by in the commit message with their names</p>",
        "id": 214741391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603822450
    },
    {
        "content": "<p>Or just use the algorithm, \"count the number of entries in the Authors table\".</p>",
        "id": 214741449,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603822479
    },
    {
        "content": "<p>Sine that is maintained by hand by <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> to be approximately duplication-free.</p>",
        "id": 214741496,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603822502
    },
    {
        "content": "<blockquote>\n<p>(maintainers only so that spam crawlers won't immediately get all our email addresses)</p>\n</blockquote>\n<p>arguably this is a lost cause, any crawler clever enough to crawl github for email addresses probably knows they can get the emails from downloading the repo. I can get the email for any given PR by appending <code>.patch</code> to the URl</p>",
        "id": 214741550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603822530
    },
    {
        "content": "<p>Yeah, that's true.</p>",
        "id": 214741603,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603822554
    },
    {
        "content": "<p>Some crawlers can browse the Internet randomly and sometime come to a link to <code>.mailmap</code></p>",
        "id": 214741770,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603822637
    },
    {
        "content": "<p>Is it better to put this number at the top of <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a> (and change the \"Declaration Counts\" header) or down by the authorship table/graphs?</p>",
        "id": 214743095,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603823214
    },
    {
        "content": "<p>I suggest at the top (possibly even replacing \"Meta Declarations\")</p>",
        "id": 214743160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603823252
    },
    {
        "content": "<p>With no disrespect intended to meta declarations ... :)</p>",
        "id": 214743250,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603823284
    },
    {
        "content": "<p>Or next to it, if there's space for 4 entries.</p>",
        "id": 214743308,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603823314
    },
    {
        "content": "<p>Or fold meta declarations under definitions as <code>12345 (+ 678 meta)</code></p>",
        "id": 214743403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603823361
    },
    {
        "content": "<p>New heading: <del>\"mathlib by the numbers\"</del> (I like this less on second thought), or \"at a glance\", or ...</p>",
        "id": 214743423,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603823372
    },
    {
        "content": "<p>Since lots of non-meta definitions are still useful in meta code anyway</p>",
        "id": 214743438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603823379
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/149\">https://github.com/leanprover-community/leanprover-community.github.io/pull/149</a></p>",
        "id": 214743671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603823458
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 214743736,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603823491
    },
    {
        "content": "<p>Some other interesting subsets of <code>definitions</code> worth counting might be:</p>\n<ul>\n<li>Types</li>\n<li>type classes</li>\n<li>noncomputable vs computable</li>\n<li>instances</li>\n</ul>",
        "id": 214743743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603823493
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/sy9v7OvAYr9l9Az8hQnHxG6y/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sy9v7OvAYr9l9Az8hQnHxG6y/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sy9v7OvAYr9l9Az8hQnHxG6y/image.png\"></a></div>",
        "id": 214743753,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603823498
    },
    {
        "content": "<p>The stats count makes for interesting reading.  Mathlib has doubled in size (from 200k to 400k lines of code) in the last year?</p>",
        "id": 214745839,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603824373
    },
    {
        "content": "<p>That's what a lockdown does for you</p>",
        "id": 214745908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603824400
    },
    {
        "content": "<p>Note that we moved some code from stdlib</p>",
        "id": 214745957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603824425
    },
    {
        "content": "<p>I was going to say, and 40% of those new lines of code are from <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> -- but in fact since he refactors so much, \"only\" 20% :)</p>",
        "id": 214746123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603824489
    },
    {
        "content": "<p>3.5K lines were moved from stdlib in <a href=\"https://github.com/leanprover-community/mathlib/issues/2697\">#2697</a></p>",
        "id": 214746369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603824589
    },
    {
        "content": "<p>Compared to the other growth, that's a rounding error!</p>",
        "id": 214746501,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603824635
    },
    {
        "content": "<p>hopefully the work required to port to Lean 4 is not a linear function of the lines of code in mathlib....</p>",
        "id": 214748364,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603825475
    },
    {
        "content": "<p>it is, although the constant is probably small</p>",
        "id": 214748417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603825502
    },
    {
        "content": "<p>A lot will depend on how quickly Lean 3 users can get trained in Lean 4. So those who get proficient quickly should get ready to write lots of documentation and tutorials.</p>",
        "id": 214748965,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603825719
    },
    {
        "content": "<p>I expect that the main issue is the tactic code (probably because I don't feel proficient in writing tactics).</p>",
        "id": 214749383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603825883
    },
    {
        "content": "<p>I mean, the fact that I'm not proficient in writing meta code affects my impression about relative difficulty of migrating meta vs non-meta code.</p>",
        "id": 214749574,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603825962
    },
    {
        "content": "<p>I wrote a sentence, then realized that it was ambiguous.</p>",
        "id": 214749633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603825996
    }
]