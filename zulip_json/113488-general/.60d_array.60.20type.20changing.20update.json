[
    {
        "content": "<p>In <code>data.array.basic</code>, there's an optimized mutation function:</p>\n<div class=\"codehilite\"><pre><span></span>def foreach (a : d_array n α) (f : Π i : fin n, α i → α i) : d_array n α :=\n...\n</pre></div>\n\n\n<p>Is it possible to change the element type during the update efficiently? I'd like an operation like:</p>\n<div class=\"codehilite\"><pre><span></span>def foreach (a : d_array n α) (f : Π i : fin n, α i → β i) : d_array n β :=\n...\n</pre></div>\n\n\n<p>Ultimately, I'm trying to implement <code>traversable</code> for array and I'd like it to not be too slow. If the required functions are not available, should I postpone submitting a traversable instance of array to <code>mathlib</code> until it can be done efficiently?</p>",
        "id": 125705649,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524714362
    },
    {
        "content": "<p>No, it's an in-place update so the type has to stay fixed.</p>",
        "id": 125706021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715040
    },
    {
        "content": "<p>Because the amount of memory allocated per element?</p>",
        "id": 125706063,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715092
    },
    {
        "content": "<p>It's conceivable that you could use an auxiliary array of sigma types (which would be erased on the vm side)</p>",
        "id": 125706064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715093
    },
    {
        "content": "<p>It updates like this: [1, 2, 3] -&gt; [f 1, 2, 3] -&gt; [f 1, f 2, 3] -&gt; [f 1, f 2, f 3]</p>",
        "id": 125706075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715161
    },
    {
        "content": "<p>Each update is performed on the same underlying data structure so that space isn't wasted</p>",
        "id": 125706079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715185
    },
    {
        "content": "<p>Right but now, <code>array</code> is based on <code>d_array</code> where the type of elements depends on indices</p>",
        "id": 125706080,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715193
    },
    {
        "content": "<p>So the intermediate arrays are well-typed</p>",
        "id": 125706126,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715227
    },
    {
        "content": "<p>The core function doing the in place write is <code>array.write</code> and this function doesn't change the type of the argument</p>",
        "id": 125706138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715299
    },
    {
        "content": "<p>oh wait, the comment says that <code>foreach</code> is also given a builtin impl</p>",
        "id": 125706181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715340
    },
    {
        "content": "<p>Maybe you can get similar performance with <code>iterate</code> to build the new array?</p>",
        "id": 125706239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715457
    },
    {
        "content": "<p>Actually, maybe I'm better off converting to list, traversing the list and converting back to array: if I'm executing within a monad like list that would mean duplicating the array a lot while the list would share its tail so it wouldn't be so bad.</p>",
        "id": 125706298,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715534
    },
    {
        "content": "<p>Actually I think <code>array.mk</code> is the most efficient option</p>",
        "id": 125706300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715556
    },
    {
        "content": "<p>that will just evaluate the whole function at once to get the new elements</p>",
        "id": 125706344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715570
    },
    {
        "content": "<p>I'm not sure how I could reconcile that with working within an applicative. I would have to store an accumulation of closures which does not sound good</p>",
        "id": 125706523,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def d_array.map&#39;\n  {n : nat} {α β : fin n → Type*}\n  (a : d_array n α) (f : Π i : fin n, α i → β i) : d_array n β :=\n⟨λ i, f _ (a.read _)⟩\n\n#eval\n  let a := d_array.mk (λ a:fin 1000000, a.1) in\n  let a&#39; := timeit &quot;map&quot; (a.map&#39; (λ i j, j+1)) in\n  a&#39;\n</pre></div>\n\n\n<p>Looks like it takes roughly linear time</p>",
        "id": 125706533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524715870
    },
    {
        "content": "<p>That looks good but it doesn't seem to address my comment</p>",
        "id": 125706583,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524715962
    },
    {
        "content": "<p>It is important to realize that (unlike most constructors taking a function) <code>array.mk</code> does not store its argument function, it evaluates it and puts the result in an array</p>",
        "id": 125706614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716039
    },
    {
        "content": "<p><code>array.mk f</code> is O(n), while <code>array'.mk f</code> would be O(1) if you wrote <code>array'</code> identically to <code>array</code></p>",
        "id": 125706658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716064
    },
    {
        "content": "<p>and conversely, <code>a.read i</code> does not call the underlying function of <code>a</code></p>",
        "id": 125706720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716201
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#eval\n  let f (a:fin 3) := trace (&quot;calling f &quot; ++ to_string a.1) a.1 in\n  let a := d_array.mk f in\n  a.read ⟨1, dec_trivial⟩\n\n-- calling f 0\n-- calling f 1\n-- calling f 2\n--\n-- (note: &quot;calling f 1&quot; does not appear twice)\n</pre></div>",
        "id": 125706733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716247
    },
    {
        "content": "<p>Right, that make sense but the reason I was talking about accumulating closures is that I'm thinking of  implementing the mutation by recursion because I have to combine applicative values:</p>\n<div class=\"codehilite\"><pre><span></span>def traverse (g : α → f β) : Π n (a : array n α), f (fin n → β)\n | 0 a := -- ...\n | (succ n) a := _ &lt;$&gt; g (a.read ⟨n,_⟩) &lt;*&gt; traverse n a.pop_back\n</pre></div>",
        "id": 125706833,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524716432
    },
    {
        "content": "<p>So you have a dependency between the different elements of the computation? Like calculating the first element affects the computation of the second</p>",
        "id": 125707001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716830
    },
    {
        "content": "<p>It might. <code>f</code> is actually a parameter of which I only know that it's an applicative functor</p>",
        "id": 125707019,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524716882
    },
    {
        "content": "<p>Do you have a default value for the array? This will be easier if you do</p>",
        "id": 125707043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524716885
    },
    {
        "content": "<p>Where would be the fun in \"easy\"? <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span>  I have no assumptions about either <code>α</code> or <code>β</code></p>",
        "id": 125707057,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717000
    },
    {
        "content": "<p>Except: they're from the same universe</p>",
        "id": 125707105,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717017
    },
    {
        "content": "<p>I think you should just do it semi-imperatively then, just call <code>read</code> and <code>push_back</code> and make sure you use the array linearly</p>",
        "id": 125707117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717114
    },
    {
        "content": "<p>Do not do induction over the array size</p>",
        "id": 125707160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717143
    },
    {
        "content": "<p>and accumulate an array, not a function to fin n</p>",
        "id": 125707165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717173
    },
    {
        "content": "<p>You mean I should do induction on the index <code>i</code> and maintain <code>i &lt; n</code>?</p>",
        "id": 125707166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717181
    },
    {
        "content": "<p>yes</p>",
        "id": 125707213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717258
    },
    {
        "content": "<p>The fun thing about knowing next to nothing about <code>f</code> is that I can't guarantee that it is a linear computation: if it's a non-deterministic computation, it would screw up that assumption</p>",
        "id": 125707214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717265
    },
    {
        "content": "<p>I have no mental model for applicative functors except as monads</p>",
        "id": 125707217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717288
    },
    {
        "content": "<p>When I say linearly I mean in the \"linear logic\" sense, i.e.  use the variable once</p>",
        "id": 125707232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717340
    },
    {
        "content": "<p>That's good enough. The only thing they add is asynchronous computations. But just think of the list monad. It's basically an unbounded backtracking device</p>",
        "id": 125707248,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717363
    },
    {
        "content": "<p>That means that at every branching point, I'd need a copy of the array</p>",
        "id": 125707276,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717401
    },
    {
        "content": "<p>Lean doesn't currently check this but you can test it by setting some option to hear whether an array write is destructive or not</p>",
        "id": 125707277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717401
    },
    {
        "content": "<p>How does that work?</p>",
        "id": 125707285,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717427
    },
    {
        "content": "<p>Whenever you call <code>array.write</code> lean checks the reference counter to determine if it can do an in-place update</p>",
        "id": 125707289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524717459
    },
    {
        "content": "<p>But can I use that information to select a different algorithm?</p>",
        "id": 125707344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717556
    },
    {
        "content": "<p>Maybe the best is accept the intermediate list. Maybe in Lean 4 we'll see custom rewrite rules for optimization. Then, maybe I can eliminate that intermediate list when the use is linear (or affine)</p>",
        "id": 125707489,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524717894
    },
    {
        "content": "<p>The linear usage thing is a static analysis you can do on your code to try and preserve destructive writes when the use is actually linear, but since the check is done at run time it doesn't matter if you use it in a nonlinear context, it will just make copies and that's the right thing to do</p>",
        "id": 125707547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524718052
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\"><pre><span></span>universe u\nvariables {α β : Type u} {f : Type u → Type u} [applicative f]\n\ndef traverse.aux (g : α → f β) (n) (a : array n α) :\n  ∀ i ≤ n, f (array i β)\n| 0 h := pure array.nil\n| (i+1) h :=\n  have h&#39; : i ≤ n := nat.le_of_succ_le h,\n  array.push_back &lt;$&gt; (traverse.aux _ h&#39;) &lt;*&gt; g (a.read ⟨i, h⟩)\n\ndef traverse (g : α → f β) (n) (a : array n α) : f (array n β) :=\ntraverse.aux g n a n (le_refl _)\n</pre></div>",
        "id": 125707783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524718582
    },
    {
        "content": "<p>Nice! Thanks!</p>",
        "id": 125707829,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524718727
    },
    {
        "content": "<p>I believe in backtracking computations, this will be pretty inefficient though. I'm wondering if the rarity of such monads is a good reason to accept that cost or if taking a small hit in the general case would be a worthy price to pay so that backtracking computations wouldn't be too slow</p>",
        "id": 125707882,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524718829
    },
    {
        "content": "<p>For backtracking computations, you will end up using more of the <code>p</code> in the <code>p_array</code> data type that actually implements lean's <code>array</code> in C++. It has optimizations for precisely this use case, it's not just a block of memory</p>",
        "id": 125708080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524719366
    },
    {
        "content": "<p>I would argue that the lack of an actual C-like array data structure is a current failing of lean, but having a deluxe array type has its advantages</p>",
        "id": 125708125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524719408
    },
    {
        "content": "<p>(the <code>p</code> stands for <a href=\"https://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Persistent_data_structure\">persistent</a> btw)</p>",
        "id": 125708128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524719460
    },
    {
        "content": "<p>Oh! Interesting!</p>",
        "id": 125708187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524719596
    },
    {
        "content": "<p>I assume the kind of optimization you're talking about is to queue up updates until you get a read and only then do you actually perform them?</p>",
        "id": 125708231,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524719667
    },
    {
        "content": "<p>Actually I'm not exactly sure, I haven't studied the implementation in detail. I think the updates are in chunks though, there is a \"buffer\" aspect to it as well which makes repeated <code>push_back</code> like I've done here not stupidly inefficient</p>",
        "id": 125708292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524719820
    }
]