[
    {
        "content": "<p>In Coq, there is an incomplete decision procedure <code>nia</code> for nonlinear integer arithmetic. Does a similar tactic exist in Lean?</p>",
        "id": 193752619,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586765485
    },
    {
        "content": "<p>There is <code>ring</code>/<code>ring_exp</code> and <code>linarith</code>and <code>omega</code> but other than those I think you're on your own. Can you give an example of a goal <code>nia</code> solves?</p>",
        "id": 193753312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586766126
    },
    {
        "content": "<p>I'd like to have some kind of a feeling about what we're missing</p>",
        "id": 193753318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586766145
    },
    {
        "content": "<p>For example, it can solve the equivalent of this goal in Coq immediately:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">hge</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">fib</span> <span class=\"n\">k</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n     <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n<span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n<span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n<span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193754872,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586768013
    },
    {
        "content": "<p>I thought <code>lia</code> was the strongest</p>",
        "id": 193756125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586769390
    },
    {
        "content": "<p>I don't even see any nonlinearity in there though</p>",
        "id": 193757580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586770986
    },
    {
        "content": "<p><code>ring</code> could do that (or at least, if it did grobner basis stuff)</p>",
        "id": 193757587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586771004
    },
    {
        "content": "<p>Ie ring can't do that</p>",
        "id": 193758010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586771439
    },
    {
        "content": "<p>I should make a wrapper around <code>ring</code> like <code>ring_hyp a1 * h1 + a2 * h2</code> where it multiplies the hypotheses (which are equations) by the coefficients and uses <code>ring</code> to prove that they add up to the equation in the goal. That would give it the same power as a grobner basis tactic except you have to provide the coefficients yourself</p>",
        "id": 193758242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586771744
    }
]