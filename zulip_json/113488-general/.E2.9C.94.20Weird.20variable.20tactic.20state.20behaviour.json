[
    {
        "content": "<p>I'm running into issue where tactics are not seeing variables declared in sections nested in namespaces? Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">stuff</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">fboring</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f_is_boring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">good_proof_f_is_boring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">f_is_boring</span>\n\n<span class=\"c1\">-- fails tactic state can't see f_is_boring but it can see G and f.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bad_proof_f_is_boring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f_is_boring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">fboring</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">stuff</span>\n</code></pre></div>\n<p>what is going on?</p>",
        "id": 282953829,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652977317
    },
    {
        "content": "<p>Names inside tactics are not considered when deciding which variables to include. You can manually include a variable using <code>include &lt;var_names&gt;</code> (and then stop including it using <code>omit &lt;var_names&gt;</code>)</p>",
        "id": 282954206,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652977452
    },
    {
        "content": "<p>The reason is that without running the tactics, Lean has no way to decide whether the mentioned name inside a tactic is meant to be the variable name, or maybe a new fresh variable introduced inside the tactic script. Lean wants to know the exact type of a lemma before elaborating the proof (which includes running all tactics), so Lean doesn't include those variables.</p>",
        "id": 282954560,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652977574
    },
    {
        "content": "<p>thanks</p>",
        "id": 282954723,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652977640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267705\">Cameron Torrance</span> has marked this topic as resolved.</p>",
        "id": 282954758,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652977655
    }
]