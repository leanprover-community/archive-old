[
    {
        "content": "<p>Here's a refactor I would like to propose, to standardise and simplify going from matrices to linear maps and vice versa.</p>\n<ul>\n<li><code>linear_map.to_matrix</code> will be the main definition, an equivalence between <code>M₁ →ₗ[R] M₂</code> and <code>matrix m n R</code>, given bases for <code>M₁</code> and <code>M₂</code>.</li>\n<li><code>matrix.to_lin</code> is <code>linear_map.to_matrix.symm</code></li>\n<li><code>linear_map.to_matrix'</code> and <code>matrix.to_lin'</code> are the equivalences between <code>((n → R) →ₗ[R] (m → R))</code> and <code>matrix m n R</code> in the respective directions</li>\n<li>we keep <code>matrix.mul_vec</code> because its definition comes before <code>linear_map</code></li>\n<li>other auxiliary definitions (e.g. the current <code>linear_map.to_matrixₗ</code>) will be <code>simp</code>ed to the above.</li>\n</ul>\n<p>(The current situation is that we have <code>matrix.mul_vec</code>, <code>matrix.eval</code>, <code>matrix.to_lin</code>, <code>linear_map.to_matrixₗ</code>, <code>linear_map.to_matrix</code>, <code>linear_equiv_matrix'</code> and <code>linear_equiv_matrix</code>, each with various choices among <code>→</code>, <code>→ₗ</code> and <code>≃ₗ</code> for the arrows. The most powerful, <code>linear_equiv_matrix</code>, is also the most inconvenient to type.)</p>",
        "id": 211606996,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601378104
    },
    {
        "content": "<p>I don't know what is the solution, but I very much agree that what we currently have is a mess that is very hard to navigate.</p>",
        "id": 211610069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601380374
    },
    {
        "content": "<p><code>linear_algebra/matrix.lean</code> compiles again: <a href=\"https://github.com/leanprover-community/mathlib/commit/b0375d38069d44dae15e78589bc0ab97137b6437\">https://github.com/leanprover-community/mathlib/commit/b0375d38069d44dae15e78589bc0ab97137b6437</a></p>",
        "id": 211635694,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601392710
    },
    {
        "content": "<p>Cool!</p>",
        "id": 211635833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601392774
    },
    {
        "content": "<p>Two more refactorings I would like to propose now <a href=\"https://github.com/leanprover-community/mathlib/issues/4345\">#4345</a> is merged:</p>\n<ul>\n<li>split <code>linear_algebra/basic.lean</code> and <code>linear_algebra/basis.lean</code> into more manageably sized files</li>\n<li>rename <code>module_equiv_finsupp</code> to <code>is_basis.repr</code> (replacing the previous <code>is_basis.repr</code>) and figure out what to do with <code>is_basis.equiv_fun</code></li>\n</ul>",
        "id": 212305363,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601907641
    },
    {
        "content": "<p>I don't understand the second point. We still need a version that applies in infinite dimensions, right?</p>",
        "id": 212306201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601908032
    },
    {
        "content": "<p>And of course I agree with the first point and I'm very grateful for your cleaning efforts.</p>",
        "id": 212306243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601908057
    },
    {
        "content": "<p>Sorry, that should be <code>module_equiv_finsupp</code> instead of <code>is_basis.equiv_fun</code>.</p>",
        "id": 212306390,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601908115
    },
    {
        "content": "<p>Ok. It would be nice to figure out how to make that parallel track thing (finsupp vs function) less painful.</p>",
        "id": 212306761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601908285
    }
]