[
    {
        "content": "<p>I'm interested in quotienting a set by a function, so that if <code>f a = f b</code>, then the corresponding quotients are equal. This seems like a common enough use case to have its own dedicated name and theorems. Is this something that exists?</p>",
        "id": 265979669,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1640325383
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.ker\">docs#setoid.ker</a> is the setoid for that</p>",
        "id": 265979747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640325542
    },
    {
        "content": "<p>What's the difference between a <code>setoid</code> and a <code>quot</code>? Being honest, I don't really fully understand either of them.</p>",
        "id": 265979877,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1640325645
    },
    {
        "content": "<p><code>setoid</code> is just an equivalence relation, and you still need to feed it to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient\">docs#quotient</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot\">docs#quot</a></p>",
        "id": 265979958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640325732
    },
    {
        "content": "<p>Ah thanks, I think I'm getting the hang of it</p>",
        "id": 265980037,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1640325864
    },
    {
        "content": "<p>What <code>quotient</code> does is give you the <code>⟦a⟧</code> syntax, using some implicit argument magic to turn it into the correct <code>quot.mk</code> incantation.</p>",
        "id": 265980044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640325886
    },
    {
        "content": "<p>But it's also somewhat awkward because <code>quotient</code> lemmas expect the <code>setoid</code> to come from a typeclass instance. Depending on what you're doing, you might either use <code>setoid.ker</code> to define a <code>setoid</code> instance for your type, or you might write things like <code>quot.mk (setoid.ker f).rel a</code> directly.</p>",
        "id": 265980218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640326150
    },
    {
        "content": "<p>Like, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.ker_apply_mk_out\">docs#setoid.ker_apply_mk_out</a> looks nice in the documentation, but it takes some contortions to use the <code>quotient</code> interface:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ker_apply_mk_out</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.ker</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧.</span><span class=\"n\">out</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 265980274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640326230
    },
    {
        "content": "<p>Yeah, I'm having to make a lot of arguments explicit here</p>",
        "id": 265980397,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1640326421
    },
    {
        "content": "<p>I'm not sure if this helps, but the convention I adapted the last time I used a quotient was to define a type that had all the operations on them along with proofs they preserved the equivalence relation.  Then I defined the quotient type and the operations on the quotient type using <code>quotient.lift</code>.</p>",
        "id": 265980578,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1640326622
    },
    {
        "content": "<p>Here's some <a href=\"https://github.com/joehendrix/lean-containers/blob/ef6ff0533eada75f18922039f8312badf12e6124/data/containers/set.lean#L117-L137\">relevant code</a> for building finite sets on top of ordered trees.</p>",
        "id": 265980671,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1640326753
    },
    {
        "content": "<p>There are also these sorts of tricks you can do, which let you work with quotients of the same type by multiple different functions, while still giving you access to lemmas like <code>quotient.eq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_fmod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">with_fmod.setoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">with_fmod</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.ker</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fmod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">with_fmod.setoid</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"n\">x</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fmod</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fmod</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">fmod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">quotient.eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">setoid.ker_def</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265981277,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640327578
    },
    {
        "content": "<p>If the instance arguments are annoying, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.mk'\">docs#quotient.mk'</a> and the other primed definitions instead</p>",
        "id": 265986536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640334297
    },
    {
        "content": "<p>Naïve question: is there any reason to prefer the quotient by <code>f</code> over <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range\">docs#set.range</a>?</p>",
        "id": 265992872,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640341753
    },
    {
        "content": "<p>Yes, because you can extract both <code>a</code> and <code>f a</code> computably from terms of the former</p>",
        "id": 265995462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640344920
    }
]