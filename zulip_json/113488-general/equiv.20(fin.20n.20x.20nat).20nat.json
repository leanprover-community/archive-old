[
    {
        "content": "<p>What is the best way to get an equiv between <code>fin n \\times nat</code> and <code>nat</code>? I don't really care about any properties.</p>",
        "id": 228045677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614417290
    },
    {
        "content": "<p><code>x.1 + n*x.2</code> and <code>(y % n, y/n)</code> feel like they should be easy to prove as inverses</p>",
        "id": 228045839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614417491
    },
    {
        "content": "<p>And maybe generalizes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_prod_fin_equiv\">docs#fin_prod_fin_equiv</a></p>",
        "id": 228045958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614417665
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal_ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.choice</span> <span class=\"bp\">$</span> <span class=\"n\">cardinal.eq.1</span>\n  <span class=\"o\">(</span><span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cardinal.lift_id</span> <span class=\"o\">(</span><span class=\"n\">cardinal.mk</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n      <span class=\"n\">cardinal.mk_prod</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.omega</span><span class=\"o\">,</span> <span class=\"n\">cardinal.mul_eq_right</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">cardinal.nat_lt_omega</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">le_refl</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">omega</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228046388,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1614418226
    },
    {
        "content": "<p>If you only need coutanble or less than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.encodable.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">encodable</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 228046426,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1614418321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.denumerable</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">denumerable</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">denumerable.of_encodable_of_infinite</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">infinite.of_injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"mi\">0</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 228046607,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1614418527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Nice! Thanks</p>",
        "id": 228046837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614418811
    }
]