[
    {
        "content": "<p>Is there any objection to have <code>import tactic.monotonicity</code> at top of <code>data.set.lattice</code>? I'm asking because this is a fairly foundational file.</p>",
        "id": 200651890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591955477
    },
    {
        "content": "<p>The monotonicity tactics are currently very under-employed in mathlib, but many lemmas from that file could be tagged. Like norm_cast, these tactics become useful only if lemmas are tagged appropriately.</p>",
        "id": 200652001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591955554
    },
    {
        "content": "<p><code>tactic.monotonicity</code> doesn't look so foundational itself. Does this import even work?</p>",
        "id": 200652124,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591955660
    },
    {
        "content": "<p>You can always tag the lemmas in <code>tactic.monotonicity</code> instead of at the moment of definition.</p>",
        "id": 200652138,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591955681
    },
    {
        "content": "<p>Yes, that's why I ask, and yes it works.</p>",
        "id": 200652139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591955682
    },
    {
        "content": "<p>Without looking at an import graph it's hard to judge the cost here. Do we have a quick way to generate one of those yet?</p>",
        "id": 200652336,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591955861
    },
    {
        "content": "<p>Sure.</p>",
        "id": 200652703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591956140
    },
    {
        "content": "<p>Which part do you want to see?</p>",
        "id": 200652714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591956149
    },
    {
        "content": "<p>Everything below tactic.monotonicity?</p>",
        "id": 200652747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591956169
    },
    {
        "content": "<p>Actually I was wrong, it's not easy. It seems that the recent fix that allows to use <code>open_locale</code> right after imports was not propagated to <code>lean --deps</code>, so import graph generation is currently broken <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ lean --deps src/algebra/pi_instances.lean\n/tmp/mathlib/src/algebra/module.olean\n/tmp/mathlib/src/ring_theory/subring.olean\n/tmp/mathlib/src/ring_theory/prod.olean\nerror: file <span class=\"s1\">&#39;open_locale&#39;</span> not found in the LEAN_PATH\nerror: file <span class=\"s1\">&#39;big_operators&#39;</span> not found in the LEAN_PATH\n/home/pmassot/.elan/toolchains/leanprover-community-lean-3.16.1/lib/lean/library/init/default.olean\n</code></pre></div>",
        "id": 200653092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591956436
    },
    {
        "content": "<p>Oops, <a href=\"https://github.com/leanprover-community/lean/issues/323\">lean#323</a>.</p>",
        "id": 200653917,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591957062
    }
]