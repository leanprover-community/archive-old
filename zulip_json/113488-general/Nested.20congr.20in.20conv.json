[
    {
        "content": "<p>Just posted <a href=\"https://github.com/leanprover-community/lean/issues/516\">lean#516</a>. Reposting here for some visibility.</p>\n<p>In the code snippet below, the second <code>congr</code> raises an error, presumably because I'm already \"inside\" an earlier <code>congr</code>. In my actual case I wanted to rewrite inside a double integral.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221612771,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609822304
    },
    {
        "content": "<p>Probably you already know this but just in case a workaround in mathlib is to use nested conv: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">conv</span><span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>  <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221612920,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609822525
    },
    {
        "content": "<p>Oh, I did not know that. Thanks!</p>",
        "id": 221677049,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609868419
    },
    {
        "content": "<p>we really need to \"fix\" conv mode. I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> already added an <code>exact</code> tactic, but it wouldn't hurt to get some other common goodies.</p>",
        "id": 221677149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609868465
    },
    {
        "content": "<p>I think the issue is more fundamental than goodies</p>",
        "id": 221677536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609868632
    },
    {
        "content": "<p>I'm not sure you can actually navigate to all positions even</p>",
        "id": 221677555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609868641
    },
    {
        "content": "<p>The <code>exact</code> tactic never made it through PR because I never bothered to add a test</p>",
        "id": 221677763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609868730
    },
    {
        "content": "<p>I think you _can_ nagivate to all positions using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conv.interactive.find\">docs#conv.interactive.find</a></p>",
        "id": 221677802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609868746
    },
    {
        "content": "<p>right, I mean with combinators</p>",
        "id": 221677836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1609868761
    }
]