[
    {
        "content": "<p>This is quite an esoteric problem, so I'm not sure if anybody would be interested in looking into it. Nonetheless, I thought I'd try to see if anybody had any ideas.</p>\n<p>So I thought I would change a inductive <code>Prop</code> to a definition. The original inductive:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">varf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span>                                                                          <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">varf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span>                <span class=\"o\">{</span><span class=\"n\">ef</span> <span class=\"n\">ea</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">lc</span> <span class=\"n\">ef</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"n\">ea</span> <span class=\"bp\">→</span>                                   <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">},</span>            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">let_</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ed</span> <span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">lc</span> <span class=\"n\">ed</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">let_</span> <span class=\"n\">ed</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The new def:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">varb</span> <span class=\"bp\">_</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">varf</span> <span class=\"bp\">_</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">lc&#39;</span> <span class=\"n\">ef</span> <span class=\"bp\">∧</span> <span class=\"n\">lc&#39;</span> <span class=\"n\">ea</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">eb</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc&#39;</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">let_</span> <span class=\"n\">ed</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lc&#39;</span> <span class=\"n\">ed</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc&#39;</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n    <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">inv_image</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero&#39;</span><span class=\"o\">]],</span>\n    <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">depth</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>But then I ran into a problem proving a theorem that did induction on <code>lc</code>. Since I can't do induction on <code>lc'</code>, I changed the proof to do induction on the parameter to <code>lc'</code>. In the old proof, I have this at one stage:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">has_fresh</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">Fb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">),</span>\n<span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">e₂</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span>\n<span class=\"err\">⊢</span> <span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eb</span> <span class=\"bp\">=</span> <span class=\"n\">eb</span>\n</pre></div>\n\n\n<p>In the new proof, I have this at the same stage:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">has_fresh</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">Fb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">lc&#39;</span> <span class=\"o\">(</span><span class=\"n\">open_var</span> <span class=\"n\">x</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n<span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">lc&#39;</span> <span class=\"n\">eb</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">e₂</span> <span class=\"n\">k</span> <span class=\"n\">eb</span> <span class=\"bp\">=</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"kn\">open</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eb</span> <span class=\"bp\">=</span> <span class=\"n\">eb</span>\n</pre></div>\n\n\n<p>Notice the difference in <code>rb</code>. In the old proof, I have an auxiliary proof that works for <code>open.rec e₂ k (open_var x eb)</code>, but in the new proof, I'm stuck. Since the new <code>lc'</code> doesn't provide the same evidence at <code>rb</code>, I don't know what to do. I think I should somehow reproduce the old <code>rb</code> in the new proof, perhaps using some knowledge of <code>lc'</code> that is lost since I'm not doing induction on <code>lc</code>, but I don't know how.</p>\n<p>The full thing is at <a href=\"https://github.com/spl/tts/tree/lc-def\" target=\"_blank\" title=\"https://github.com/spl/tts/tree/lc-def\">https://github.com/spl/tts/tree/lc-def</a> .</p>",
        "id": 133936109,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536909157
    },
    {
        "content": "<p>does <code>rec_on</code> solve the problem?</p>",
        "id": 133936608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536910065
    },
    {
        "content": "<p><code>rec_on</code> what?</p>",
        "id": 133936659,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536910102
    },
    {
        "content": "<p>exp</p>",
        "id": 133936828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536910337
    },
    {
        "content": "<p>Do you mean use <code>rec_on</code> instead of <code>induction</code>? I'm not sure, but I don't see how it could.</p>",
        "id": 133936836,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536910378
    },
    {
        "content": "<p>which case are you in? what is the induction proof?</p>",
        "id": 133937291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911160
    },
    {
        "content": "<p>none of the variables in the state match things in the inductive definitions you gave</p>",
        "id": 133937349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911212
    },
    {
        "content": "<p>The <code>lam</code> case. See <a href=\"https://github.com/spl/tts/commit/04e4229c0fccec935b7f615a4aefe18d14982f2b#diff-94a57c5df4a0ba5ba897bada2c897d1aR73\" target=\"_blank\" title=\"https://github.com/spl/tts/commit/04e4229c0fccec935b7f615a4aefe18d14982f2b#diff-94a57c5df4a0ba5ba897bada2c897d1aR73\">https://github.com/spl/tts/commit/04e4229c0fccec935b7f615a4aefe18d14982f2b#diff-94a57c5df4a0ba5ba897bada2c897d1aR73</a></p>",
        "id": 133937489,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911412
    },
    {
        "content": "<p>Just above that is the old proof (line 49).</p>",
        "id": 133937510,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911435
    },
    {
        "content": "<p>you are doing induction on <code>k</code>?</p>",
        "id": 133937539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911500
    },
    {
        "content": "<p>In the old proof, induction was on <code>l : lc e₁</code>. In the new proof, induction is on <code>e₁ : exp V</code>.</p>",
        "id": 133937593,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911543
    },
    {
        "content": "<p>The focus is here: <a href=\"https://github.com/spl/tts/blob/04e4229c0fccec935b7f615a4aefe18d14982f2b/src/exp/open.lean#L41-L77\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/04e4229c0fccec935b7f615a4aefe18d14982f2b/src/exp/open.lean#L41-L77\">https://github.com/spl/tts/blob/04e4229c0fccec935b7f615a4aefe18d14982f2b/src/exp/open.lean#L41-L77</a> (if that helps).</p>",
        "id": 133937630,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911621
    },
    {
        "content": "<p>induction on <code>e1</code> isn't good enough</p>",
        "id": 133937634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911636
    },
    {
        "content": "<p>you have to do induction on the same well founded measure you used to define <code>lc'</code> in the first place</p>",
        "id": 133937674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911657
    },
    {
        "content": "<p>You mean induction on <code>depth</code>?</p>",
        "id": 133937678,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911682
    },
    {
        "content": "<p>yes</p>",
        "id": 133937679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911687
    },
    {
        "content": "<p>Oh....</p>",
        "id": 133937683,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911692
    },
    {
        "content": "<p>because presumably these <code>open_var</code> things don't increase depth</p>",
        "id": 133937690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911706
    },
    {
        "content": "<p>Correct.</p>",
        "id": 133937696,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911712
    },
    {
        "content": "<p>it's a general rule that you have to prove properties about a recursive definition using the same recursion strategy as the definition</p>",
        "id": 133937708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911752
    },
    {
        "content": "<p>Ah, okay. The well-founded stuff still confuses me.</p>",
        "id": 133937791,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911850
    },
    {
        "content": "<p>So, it seems that the <code>inductive</code> is already doing a lot for me that I would otherwise have to do with more work.</p>",
        "id": 133937807,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911879
    },
    {
        "content": "<p>Would it be better just to keep using it instead of the definition version?</p>",
        "id": 133937849,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911900
    },
    {
        "content": "<p>I thought a definition would make things easier, but it's not.</p>",
        "id": 133937854,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536911925
    },
    {
        "content": "<p>I mean, you can always use <code>well_founded.fix</code></p>",
        "id": 133937859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536911940
    },
    {
        "content": "<p>I've never used <code>well_founded.fix</code>.</p>",
        "id": 133937920,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536912005
    },
    {
        "content": "<p>it is not easier</p>",
        "id": 133937952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536912072
    },
    {
        "content": "<p>it is used behind the scenes by <code>using_well_founded</code></p>",
        "id": 133937961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536912090
    },
    {
        "content": "<p>Okay. So I'll stick with the inductive. Lesson learned!</p>",
        "id": 133938025,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536912155
    },
    {
        "content": "<p>Inductive propositions are quite handy in those situations. You can do induction on them when they are in your assumptions and it will automatically unify the variables that should be equal and you want have to handle cases where your definition would say <code>false</code></p>",
        "id": 133995045,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536984251
    }
]