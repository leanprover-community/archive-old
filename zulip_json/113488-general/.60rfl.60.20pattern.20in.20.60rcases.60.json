[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, how would you feel about the <code>rfl</code> pattern in <code>rcases</code> trying to <code>dsimp</code> before <code>subst</code>ing? I often find myself unable to use the <code>rfl</code> trick, because it needs to be <code>dsimp</code>ed before <code>subst</code> would accept it.</p>",
        "id": 162101744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553916774
    },
    {
        "content": "<p>Options would be:<br>\n1a) in <code>rcases</code>, always run <code>dsimp</code> on <code>rfl</code> parameters before calling <code>subst</code><br>\n1b) in <code>rcases</code>, try <code>subst</code>, and if it fails call <code>dsimp</code> and try again<br>\n2ab) create <code>subst'</code>, with similar choices</p>",
        "id": 162101775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553916837
    },
    {
        "content": "<p>1a would just mean</p>\n<div class=\"codehilite\"><pre><span></span>with rcases.continue : listΠ (rcases_patt × expr) → tactic goals\n| [] := get_goals\n| ((rcases_patt.many ids, e) :: l) := do\n  gs ← rcases_core ids e,\n  list.join &lt;$&gt; gs.mmap (λ g, set_goals [g] &gt;&gt; rcases.continue l)\n| ((rcases_patt.one `rfl, e) :: l) := do\n  (t, e) ← get_local_and_type e,\n  (s, _) ← mk_simp_set ff [] [],\n  try ((s.dsimplify [] t) &gt;&gt;= λ t, change_core t (some e)),\n  get_local `rfl &gt;&gt;= subst,\n  rcases.continue l\n-- If the pattern is any other name, we already bound the name in the\n-- top-level `cases` tactic, so there is no more work to do for it.\n| (_ :: l) := rcases.continue l\n</pre></div>",
        "id": 162102079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553917323
    },
    {
        "content": "<p><code>dsimp only</code></p>",
        "id": 162102219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553917595
    },
    {
        "content": "<p>?</p>",
        "id": 162102711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553918519
    },
    {
        "content": "<p>What does dsimp only have to do with what I was talking about?</p>",
        "id": 162102755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553918536
    },
    {
        "content": "<p>Hmmm: What happens if you <code>dsimp</code> the <code>rfl</code> pattern, but not the other assumptions/goal? Does that bring the risk that the <code>subst</code> still fails (or fails to do the expected thing)?</p>",
        "id": 162103871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553920505
    },
    {
        "content": "<p>There are two methods: you can either use <code>⟨⟩</code> or <code>rfl</code> to case on an equality. <code>rfl</code> uses <code>subst</code> and <code>⟨⟩</code> uses <code>cases</code>, and they work in different circumstances. This wasn't entirely intentional, but I hesitate to try to make one of them play both functions now</p>",
        "id": 162107050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553926259
    },
    {
        "content": "<p>I do think that it is maybe hard to guess what <code>\\&lt;&gt;</code> does, if you don't know it. It might be a bit surprising...</p>",
        "id": 162107171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553926500
    },
    {
        "content": "<p>Yes, I know those two methods. But often neither works, and I'm proposing to make <code>rfl</code> work a little bit harder.</p>",
        "id": 162107728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553927499
    },
    {
        "content": "<p>I think <code>subst'</code> is the best plan. The biggest issue is that <code>subst</code> has an overly restrictive validity check</p>",
        "id": 162108138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553928219
    },
    {
        "content": "<p>Do you have a simple example of <code>subst</code> failure?</p>",
        "id": 162108185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553928258
    },
    {
        "content": "<p>There are two ways that I know of that <code>subst</code> can \"fail\".<br>\n1) is just that you need to <code>dsimp</code> the hypothesis first<br>\n2) is a bit more complicated: <code>subst</code> is meant to not mind whether you give it <code>x = t</code> or <code>t = x</code>, but I can dig up some examples where it fails, but sticking in a <code>.symm</code> would make it work.</p>",
        "id": 162112502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936496
    },
    {
        "content": "<p>Typical examples of 1) are having a hypothesis <code>h : (a,b).1 = (c,d).1</code>.</p>",
        "id": 162112515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936522
    },
    {
        "content": "<p>So you have to write <code>dsimp at h, subst h</code>, to get the desired effect. (And this prevents using <code>rfl</code> in <code>rcases</code>.)</p>",
        "id": 162112550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936545
    },
    {
        "content": "<p>In fact, I managed to write a proof that ran into this issue in three separate places in the same proof.</p>",
        "id": 162112552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936571
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/820/files#diff-ad1bfc3bc394b15d391d068b78b04a42R36\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/820/files#diff-ad1bfc3bc394b15d391d068b78b04a42R36\">https://github.com/leanprover-community/mathlib/pull/820/files#diff-ad1bfc3bc394b15d391d068b78b04a42R36</a></p>",
        "id": 162112567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936628
    }
]