[
    {
        "content": "<p>So why is polynomial elaboration slow and what can we do about it?</p>",
        "id": 157068793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548720145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">τ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">τ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∘</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∘</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">induction_on</span> <span class=\"n\">f</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_C</span><span class=\"o\">,</span> <span class=\"n\">eval₂_C</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_X</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">inverse_apply_apply</span><span class=\"o\">]),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">induction_on</span> <span class=\"n\">f</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_C</span><span class=\"o\">,</span> <span class=\"n\">eval₂_C</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">eval₂_add</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval₂_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_X</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">ring_equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">τ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">equiv_of_equiv</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">false</span>\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n</pre></div>",
        "id": 157069159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548720574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaboration of ring_equiv_of_equiv took 6.48s\n</pre></div>",
        "id": 157069161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548720582
    },
    {
        "content": "<p>ha, this is really quick</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ring_equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">τ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">equiv_of_equiv</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">eval₂</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span>\n</pre></div>",
        "id": 157069343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548720836
    },
    {
        "content": "<p>this is also quick:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ring_equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"err\">≃</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">τ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">eval₂</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">equiv_of_equiv</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 157069450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548720944
    },
    {
        "content": "<p>I would appreciate it if someone could point me as to how I could debug it. the <code>set_option trace.</code> options are not very helpful.</p>",
        "id": 157071810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548723912
    },
    {
        "content": "<p>It would also be quite helpful if the \"class instance max depth reached\" message could tell us which typeclass they were looking for</p>",
        "id": 157088918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548750512
    }
]