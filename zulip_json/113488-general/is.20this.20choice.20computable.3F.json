[
    {
        "content": "<p>Can the two <code>sorry</code>s be filled in?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">option</span> <span class=\"err\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_left</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_right</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pointed_sigma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">pointed_sigma</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pointed_sigma</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">pointed_sigma</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"err\">⟦</span><span class=\"n\">none</span><span class=\"err\">⟧</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pointed_sigma</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"err\">⟦</span><span class=\"n\">some</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"err\">⟧</span>\n\n<span class=\"n\">def</span> <span class=\"n\">choice</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">of</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">choice_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">choice</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pointed_sigma</span>\n</pre></div>",
        "id": 133307935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064185
    },
    {
        "content": "<p>So I have a bunch of pointed types, indexed by the type <code>ι</code>.</p>",
        "id": 133307990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064212
    },
    {
        "content": "<p>I'm building the pointed union of these pointed types.</p>",
        "id": 133308002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064229
    },
    {
        "content": "<p>(The point is represented by zero.)</p>",
        "id": 133308007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064243
    },
    {
        "content": "<p>So for each <code>i : ι</code>, I have a function from the pointed set indexed by <code>i</code> to the union.</p>",
        "id": 133308016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064265
    },
    {
        "content": "<p>I'm wondering if I can reverse this operation, i.e. given an element of the pointed union, with a proof that it is from some element of the pointed set indexed by <code>i</code>, I would like to give back this element of the pointed set.</p>",
        "id": 133308037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536064306
    },
    {
        "content": "<p>I suspect you need decidable equality on I</p>",
        "id": 133312135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536069530
    },
    {
        "content": "<p>that's also what I suspect, but I can't prove</p>",
        "id": 133312361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536069739
    }
]