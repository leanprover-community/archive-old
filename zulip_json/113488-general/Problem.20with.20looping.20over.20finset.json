[
    {
        "content": "<p>Given <code>s : finset ℕ</code>,  how can I construct <code>s' : finset (ℕ × ℕ)</code> s.t.  <code>∀ a b,  a b ∈ s ↔ (a, b) ∈ s'</code> ?</p>",
        "id": 155177808,
        "sender_full_name": "AHan",
        "timestamp": 1547566128
    },
    {
        "content": "<p>I think what you wrote doesn't type-check</p>",
        "id": 155178216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547566370
    },
    {
        "content": "<p>I assume the <code>a b</code> means <code>a * b</code></p>",
        "id": 155178295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547566432
    },
    {
        "content": "<p>aren't you busy merging <a href=\"https://github.com/leanprover/mathlib/pull/583\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/583\">https://github.com/leanprover/mathlib/pull/583</a>?</p>",
        "id": 155178398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547566498
    },
    {
        "content": "<p>Seriously I'd never thought of that interpretation</p>",
        "id": 155178422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547566513
    },
    {
        "content": "<p>I mean looping over s, and  do something with every two distinct element in s.<br>\n(Sorry for my bad English, don't know how to express this well...</p>",
        "id": 155178633,
        "sender_full_name": "AHan",
        "timestamp": 1547566647
    },
    {
        "content": "<p>what are you trying to do in your loop? lean doesn't have \"looping constructs\" as such</p>",
        "id": 155178829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547566748
    },
    {
        "content": "<p>if with <code>list</code> I can do something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n    <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">y</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 155179031,
        "sender_full_name": "AHan",
        "timestamp": 1547566862
    },
    {
        "content": "<p>I'm just wondering how to do this in if the given type is finset</p>",
        "id": 155179136,
        "sender_full_name": "AHan",
        "timestamp": 1547566924
    },
    {
        "content": "<p>the left arrow is just notation for <code>list.bind</code>, you can call <code>finset.bind</code> and it's just the same</p>",
        "id": 155179162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547566956
    },
    {
        "content": "<p>I guess there is a missing monad instance for <code>finset</code> that would allow you to use the same notation</p>",
        "id": 155179221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547566998
    },
    {
        "content": "<p>Oh! Thanks a lot !!</p>",
        "id": 155179484,
        "sender_full_name": "AHan",
        "timestamp": 1547567181
    }
]