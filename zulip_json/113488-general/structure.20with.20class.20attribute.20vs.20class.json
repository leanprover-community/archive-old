[
    {
        "content": "<p>I'm trying to get the following to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it fails with a type mismatch error. It seems that Lean is confused about <code>conv</code>. I can fix this code by writing <code>class convergence_space</code>. But that causes other problems in the real code that I would rather avoid by doing it this way.</p>",
        "id": 265150506,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639659158
    },
    {
        "content": "<p>Look at the type of <code>conv</code> (<code>#check @conv</code>): you will see that the <code>convergence_space</code> argument is explicit, because you declared it as structure, not as class.</p>",
        "id": 265150972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659426
    },
    {
        "content": "<p>You want to make a separate version of <code>conv'</code> that has it as an instance implicit argument. We also do that in some places in mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convergence_space.conv</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">convergence_space.conv'</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265151011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659460
    },
    {
        "content": "<p>one other change I made: change the <code>variable</code> line to <code>variable {a : Type*}</code>. You marked it as explicit, and that is going to bite you later.</p>",
        "id": 265151155,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659530
    },
    {
        "content": "<p>When I do #check @conv, I get <code>error: invalid '@', function is overloaded, use fully qualified names (overloads: conv, convergence_space.conv)</code></p>",
        "id": 265151557,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639659693
    },
    {
        "content": "<p>I see. You can do any of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">convergence_space.conv</span>\n<span class=\"k\">#print</span> <span class=\"n\">conv</span>\n<span class=\"k\">#print</span> <span class=\"n\">convergence_space.conv</span>\n</code></pre></div>\n<p>(beware though that <code>#print</code> gives very long outputs for non-trivial proofs)</p>",
        "id": 265151762,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659798
    },
    {
        "content": "<p>But why is Lean confused about <code>conv</code>? Doesn't <code>open convergence_space</code> make it available without qualifying it with <code>convergence_space</code>.</p>",
        "id": 265151897,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639659860
    },
    {
        "content": "<p>The problem is that there is already something called <code>conv</code> in Lean, so it might be useful (though it is not necessary) to rename your field.</p>",
        "id": 265151909,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659867
    },
    {
        "content": "<p>Oh you're right. I will rename it then to avoid this.</p>",
        "id": 265151966,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639659906
    },
    {
        "content": "<p>If you give Lean context which <code>conv</code> you mean, Lean will figure it out (like in my example above). However, in the <code>#check</code> line we give no such context.<br>\nThe error you got originally is not because of overloading, but because of an explicit argument you didn't provide.</p>",
        "id": 265152027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639659934
    },
    {
        "content": "<p>I thought the class attribute would make the first argument implicit, but I guess that's not the case.</p>",
        "id": 265152710,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639660268
    },
    {
        "content": "<p>Thanks for clarifying.</p>",
        "id": 265152722,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639660280
    }
]