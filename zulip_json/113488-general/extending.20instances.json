[
    {
        "content": "<p>What's the sensible way to get the bounded lattice instance when type class inference knows all the ingredients? <code>by apply_instance</code> doesn't work for me.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- with_bot.lattice</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- with_bot.order_bot</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">order_top</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- with_bot.order_top</span>\n\n<span class=\"c1\">-- class bounded_lattice (α : Type u) extends lattice α, order_top α, order_bot α</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 181193917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574244526
    },
    {
        "content": "<p>I think <code>{}</code> works</p>",
        "id": 181194169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574244734
    },
    {
        "content": "<p>If not, <code>{..instance1, ..instance2}</code> should</p>",
        "id": 181194185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574244763
    },
    {
        "content": "<p>I had trouble with both of these approaches. Hang on.</p>",
        "id": 181194226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574244818
    },
    {
        "content": "<p>Note that this is expected behavior. There is no instance deriving a subclass from its parents, even if there are no fields. You have to explicitly instantiate the substructure</p>",
        "id": 181194230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574244821
    },
    {
        "content": "<p><code>{}</code> gives 17 errors of the form</p>\n<div class=\"codehilite\"><pre><span></span>invalid structure value { ... }, field &#39;inf&#39; was not provided\n</pre></div>",
        "id": 181194288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574244861
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bounded_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 181194316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574244901
    },
    {
        "content": "<p>Oh I see, it's because <code>bounded_lattice</code> is an old style structure</p>",
        "id": 181194348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574244958
    },
    {
        "content": "<p>Yup, works for me too. Thanks.</p>",
        "id": 181194390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574244968
    },
    {
        "content": "<p>While I'm here, what's the idiomatic way for getting <code>set X</code> from <code>set (with_top X)</code>?</p>",
        "id": 181194407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574244998
    },
    {
        "content": "<p>When you use a new style structure, these parents are inferred by type class inference, but with an old style structure the fields are splayed and reconstructed, so you need <code>{.. foo}</code> to construct the instance</p>",
        "id": 181194415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574245007
    },
    {
        "content": "<p>i.e the intersection.</p>",
        "id": 181194420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574245015
    },
    {
        "content": "<p>I guess that would be <code>coe '' X</code></p>",
        "id": 181194440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574245035
    },
    {
        "content": "<p>or rather <code>coe ⁻¹' X</code></p>",
        "id": 181194455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574245051
    },
    {
        "content": "<p>right. Thanks.</p>",
        "id": 181194461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574245057
    }
]