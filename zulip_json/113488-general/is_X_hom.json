[
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, for starting to clean these up in <a href=\"https://github.com/leanprover-community/mathlib/issues/911\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/911\">#911</a>.</p>",
        "id": 162886028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554792882
    },
    {
        "content": "<p>I've long been sad that <code>is_ring_hom.map_one</code> cannot be a <code>simp</code> lemma, because there's no fixed symbol for it to catch on.</p>",
        "id": 162886049,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554792911
    },
    {
        "content": "<p>For other lemmas, each <code>map_mul</code> and <code>map_add</code>, it's less clear that they should be simp lemmas. It depends whether you're trying to push all the ring homomorphisms down (in order to use <code>ring</code>, presumably), or pull them all up (hoping to get to a single homomorphism application).</p>",
        "id": 162886150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793070
    },
    {
        "content": "<p>We probably should have a tactic, however, for doing these rewrites.</p>",
        "id": 162886200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793089
    },
    {
        "content": "<p>I'm imagining <code>hom</code> by default would just push all homomorphisms down through algebraic operations.</p>",
        "id": 162886214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793124
    },
    {
        "content": "<p>It should probably take an argument, so for example <code>hom ring</code> would use the laws for ring homomorphisms.</p>",
        "id": 162886231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793162
    },
    {
        "content": "<p>An arrow might suffice for the mode where we want to pull the homomorphism out: either <code>hom ←</code> or <code>hom ←monoid</code>.</p>",
        "id": 162886290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think such a tactic is a very good idea.</p>",
        "id": 162886305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793247
    },
    {
        "content": "<p>Would it be hard to write such a tactic?</p>",
        "id": 162886458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793460
    },
    {
        "content": "<p>Let's do it. :-)</p>",
        "id": 162886465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793484
    },
    {
        "content": "<p>First of all, however, note the following:</p>",
        "id": 162886468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793497
    },
    {
        "content": "<p>the category theory library gives you an easy way to make these simp lemmas work with the simplifier directly! Observe the following:</p>",
        "id": 162886484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[simp] lemma map_mul {R S : Mon} (f : R ⟶ S) (x y : R) : f (x * y) = f x * f y :=\nby rw is_monoid_hom.map_mul f\n\nexample {R S : Mon} (f : R ⟶ S) (x y : R) : f (x * y) = f x * f y :=\nby simp --- Lo!\n</pre></div>",
        "id": 162886487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793527
    },
    {
        "content": "<p>What's going on here? In <code>(x y : R)</code>, <code>R</code> is being coerced automatically to its underlying type.</p>",
        "id": 162886512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793562
    },
    {
        "content": "<p>In <code>f (x * y)</code>, the bundled ring morphism <code>f</code> is being coerced to its underlying function.</p>",
        "id": 162886549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793582
    },
    {
        "content": "<p>However, because the coercion is still sitting there, <code>simp</code> has something to hang on to now!</p>",
        "id": 162886552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793607
    },
    {
        "content": "<p>Yep. Bundled homs make <code>simp</code> work</p>",
        "id": 162886562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793625
    },
    {
        "content": "<p>With <code>linear_map</code> and <code>alg_hom</code> this has been quite pleasant.</p>",
        "id": 162886570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793637
    },
    {
        "content": "<p>The problem is that it seems to be non-trivial to make a bundled <code>ring_hom</code> also act as an <code>add_group_hom</code> and as a <code>monoid_hom</code> etc...</p>",
        "id": 162886588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793675
    },
    {
        "content": "<p>But really what I hope might happen is that everyone will stop talking about explicit functions, decorated is <code>is_X_hom</code> typeclasses, and just write <code>R ⟶ S</code> (with the <code>\\hom</code> arrow)... :-)</p>",
        "id": 162886636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793697
    },
    {
        "content": "<p>Chris tried unification hints. That didn't work. I don't know if plain coercions would work...</p>",
        "id": 162886637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793699
    },
    {
        "content": "<p>Bundling and mixing are fighting with each other...</p>",
        "id": 162886664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793751
    },
    {
        "content": "<p>Can we define coercions along <code>forget.obj</code> and <code>forget.map</code>, for all the different forgetful functors?</p>",
        "id": 162886683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793794
    },
    {
        "content": "<p>(if they work, they could all be generated by <code>@[derive]</code> at the moment that each <code>forget</code> is defined)</p>",
        "id": 162886762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793868
    },
    {
        "content": "<p>Anyway, that's something to think about later.</p>",
        "id": 162886766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793878
    },
    {
        "content": "<p>How would we write the <code>hom</code> tactic?</p>",
        "id": 162886769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554793885
    },
    {
        "content": "<blockquote>\n<p>Can we define coercions along <code>forget.obj</code> and <code>forget.map</code>, for all the different forgetful functors?</p>\n</blockquote>\n<p>I've been meaning to experiment with that. But haven't had the time to do so yet.</p>",
        "id": 162886776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554793899
    },
    {
        "content": "<p>I think you can take inspiration from <a href=\"https://github.com/leanprover-community/mathlib/commit/5fe470bb216e7b3fb6639d3b964c4eee36b88713\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/5fe470bb216e7b3fb6639d3b964c4eee36b88713\">https://github.com/leanprover-community/mathlib/commit/5fe470bb216e7b3fb6639d3b964c4eee36b88713</a></p>",
        "id": 162886803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554793923
    },
    {
        "content": "<p>Which is a stuff pushing tactic</p>",
        "id": 162886838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554793951
    },
    {
        "content": "<p>@Scott, how hard is it to gather all symbols from the context that have an <code>is_X_hom</code> instance?</p>",
        "id": 162886929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794110
    },
    {
        "content": "<p>do you mean local hypotheses that have an <code>is_X_hom</code> instance?</p>",
        "id": 162886939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794149
    },
    {
        "content": "<p>or just subexpressions of the goal?</p>",
        "id": 162886945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794161
    },
    {
        "content": "<p>I guess we only care about values of <code>X</code> in <code>(add_)</code> <code>{semigroup, monoid, group}</code>.</p>",
        "id": 162886972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794163
    },
    {
        "content": "<p>either is doable</p>",
        "id": 162886988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794165
    },
    {
        "content": "<p>The latter. The instance might not be a local hyp.</p>",
        "id": 162886999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794184
    },
    {
        "content": "<p>Maybe we need to infer it.</p>",
        "id": 162887007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794192
    },
    {
        "content": "<p>No -- the instance of course we'll find by inference. I was asking about the actual function.</p>",
        "id": 162887034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794241
    },
    {
        "content": "<p>By the way, the following works:</p>\n<div class=\"codehilite\"><pre><span></span>example (R S : CommRing) (f : R ⟶ S) : is_monoid_hom (f : R → S) := by apply_instance\n</pre></div>",
        "id": 162887041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794259
    },
    {
        "content": "<p>After we have that list, we can start trying to <code>erw</code> (<code>&lt;-</code>) along <code>is_X_hom.map_Y the_symbol</code> for <code>Y</code> in <code>{zero, one, add, mul, pow, smul, gpow, sub, gsmul, gpow, sum, prod}</code>.</p>",
        "id": 162887101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794300
    },
    {
        "content": "<p>Yes.</p>",
        "id": 162887104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794313
    },
    {
        "content": "<p>That example is an interesting combination of bundling and mixing getting along!</p>",
        "id": 162887128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, do you want to try out the new VS Code live share mode and write this tactic? I have ~40 minutes now.</p>",
        "id": 162887144,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554794396
    },
    {
        "content": "<p>Cool. Let me grab a bigger screen.</p>",
        "id": 162887199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554794409
    },
    {
        "content": "<p>How is this done in Coq?</p>",
        "id": 162889359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554796932
    },
    {
        "content": "<p>I am spending the next few days with Gonthier but I do not understand the issues in this thread well enough to be able to ask him :-(</p>",
        "id": 162889381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554796964
    },
    {
        "content": "<p>If people want to teach me, that would work. We could start with \"there's no fixed symbol for it to catch on\". I am already lost. I don't know how <code>simp</code> works and I don't know what a symbol is.</p>",
        "id": 162889428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554797008
    },
    {
        "content": "<p>Johan, the code we wrote is on the <code>hom-tactic</code> branch. That was fun. :-) We need to write lots more porcelain, but the minimal plumbing is running!</p>",
        "id": 162892890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554800393
    },
    {
        "content": "<blockquote>\n<p>example (R S : CommRing) (f : R ⟶ S) : is_monoid_hom (f : R → S) := by apply_instance</p>\n</blockquote>\n<p>(For my information) why does everyone do this instead of <code>... := infer_instance</code>?</p>",
        "id": 162899089,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554807290
    },
    {
        "content": "<p>I've had cases where <code>by apply_instance</code> worked and <code>infer_instance</code> didn't. Don't remember the details though...</p>",
        "id": 162899178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554807398
    },
    {
        "content": "<p>I think <code>by apply_instance</code> predates the other one</p>",
        "id": 162899181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554807401
    },
    {
        "content": "<p>also <code>infer_instance</code> appears literally in the result term while <code>by apply_instance</code> only does instance search, just like inference for <code>[]</code> variables</p>",
        "id": 162899203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554807437
    },
    {
        "content": "<p>I think <code>infer_instance</code> is best used for <code>#check</code> and <code>example</code> things</p>",
        "id": 162899222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554807480
    },
    {
        "content": "<p>Cool, good to know</p>",
        "id": 162899318,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554807575
    },
    {
        "content": "<p>I introduced <code>infer_instance</code> just so that I could use it before the tactic framework is defined</p>",
        "id": 162918762,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1554822094
    },
    {
        "content": "<p>Here's a concrete example of what Mario is saying. I wanted to figure out where the category structure on <code>opens X</code> was coming from.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">XYZ</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">ABC</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ABC</span> <span class=\"c1\">-- useless</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">XYZ</span> <span class=\"c1\">-- what I wanted to know i.e. category_theory.preorder_category</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">preorder_category</span> <span class=\"c1\">-- etc etc</span>\n</pre></div>",
        "id": 163219310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555097281
    },
    {
        "content": "<p>Kevin, you do know the most efficient way would have been <code>#check (by apply_instance : category $ opens X)</code> instance of this def/print dance right?</p>",
        "id": 163226770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555103058
    },
    {
        "content": "<p>ha ha yes, I think Kenny showed me this trick once; I keep forgetting it.</p>",
        "id": 163234192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555110126
    }
]