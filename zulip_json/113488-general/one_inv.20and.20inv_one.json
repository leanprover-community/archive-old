[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_inv\">docs#one_inv</a> says that <code>1⁻¹ = 1</code>. And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_one\">docs#inv_one</a> says that <code>1⁻¹ = 1</code>. The difference is that one is true in groups, the other one in groups with zeros. What about using <code>inv_one</code> and <code>group_with_zero.inv_one</code> instead?</p>",
        "id": 234701081,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618501397
    },
    {
        "content": "<p>Or <code>inv_one</code> and <code>inv_one'</code>, maybe?</p>",
        "id": 234701178,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618501430
    },
    {
        "content": "<p>Or maybe add two axioms to <code>div_inv_monoid</code>, namely <code>1⁻¹ = 1</code> and <code>x⁻¹⁻¹ = x</code>, and use these to treat both situations uniformly (and it would also apply for instance to <code>ennreal</code>). These questions come to my mind while doing the int-smul refactor. I think I'll keep it minimal for now, but there is definitely room for improvement here.</p>",
        "id": 234702005,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618501714
    },
    {
        "content": "<p>I think there's some confusion generally about how to apply the naming scheme in the face of projections and notation - <code>1⁻¹</code> is either <code>one \\inv</code> or <code>inv one</code> depending on whether you write it with notation or not.</p>\n<p>Similarly, lemmas about projections are sometimes stated <code>foo.baz_bar (f : foo) : foo.baz (foo.bar f) = _</code> and sometimes stated <code>foo.bar_baz (f : foo) : f.bar.baz = _</code>. I think we ought to clarify the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> guide about this</p>",
        "id": 234703385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618502190
    }
]