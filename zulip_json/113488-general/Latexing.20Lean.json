[
    {
        "content": "<p>I am writing up a project in Overlead, and I need to put in my Lean code. I have got the lstlean.tex file (<a href=\"https://github.com/leanprover/lean/tree/master/extras/latex\">https://github.com/leanprover/lean/tree/master/extras/latex</a>), however I continue to get errors.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 204026860,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594856350
    },
    {
        "content": "<p>What kind of errors?</p>",
        "id": 204039743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594868530
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Package</span> <span class=\"n\">ucs</span><span class=\"o\">:</span> <span class=\"n\">Unknown</span> <span class=\"n\">Unicode</span> <span class=\"n\">character</span> <span class=\"mi\">65533</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"n\">FFFD</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">ucs</span><span class=\"o\">)</span>   <span class=\"n\">possibly</span> <span class=\"n\">declared</span> <span class=\"k\">in</span> <span class=\"n\">uni</span><span class=\"bp\">-</span><span class=\"mi\">255</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"bp\">.</span>\n<span class=\"o\">(</span><span class=\"n\">ucs</span><span class=\"o\">)</span>   <span class=\"kt\">Type</span> <span class=\"n\">H</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"k\">if</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">available</span> <span class=\"k\">with</span> <span class=\"kn\">options</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Package</span> <span class=\"n\">Listings</span><span class=\"o\">:</span> <span class=\"n\">Couldn&#39;t</span> <span class=\"n\">load</span> <span class=\"n\">requested</span> <span class=\"n\">language</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Package</span> <span class=\"n\">Listings</span><span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"n\">lean</span> <span class=\"n\">undefined</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Package</span> <span class=\"n\">utf8x</span><span class=\"o\">:</span> <span class=\"n\">MalformedUTF</span><span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"n\">sequence</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>are some of the 1K+ errors (I shifted to VSCode).</p>",
        "id": 204040082,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594868995
    },
    {
        "content": "<p>Hmmm, let me check the top of our perfectoid latex file</p>",
        "id": 204040313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">\\documentclass</span><span class=\"na\">[10pt, a4paper]</span><span class=\"nb\">{</span>article<span class=\"nb\">}</span>\n<span class=\"k\">\\pdfoutput</span>=1\n\n<span class=\"k\">\\usepackage</span><span class=\"na\">[utf8x]</span><span class=\"nb\">{</span>inputenc<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"na\">[LGR, T1]</span><span class=\"nb\">{</span>fontenc<span class=\"nb\">}</span>\n<span class=\"k\">\\PrerenderUnicode</span><span class=\"nb\">{</span>ä<span class=\"nb\">}</span>\n<span class=\"k\">\\PrerenderUnicode</span><span class=\"nb\">{</span>é<span class=\"nb\">}</span>\n\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>amsmath, amsthm, amsfonts, amssymb<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>textcomp<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>textgreek<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>upgreek<span class=\"nb\">}</span>\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>mathrsfs<span class=\"nb\">}</span>\n\n<span class=\"k\">\\usepackage</span><span class=\"na\">[english]</span><span class=\"nb\">{</span>babel<span class=\"nb\">}</span>\n\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>listings<span class=\"nb\">}</span>\n<span class=\"k\">\\def\\lstlanguagefiles</span><span class=\"nb\">{</span>lstlean.tex<span class=\"nb\">}</span>\n<span class=\"k\">\\lstset</span><span class=\"nb\">{</span>language=lean<span class=\"nb\">}</span>\n</code></pre></div>",
        "id": 204040438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> I hope something like that works</p>",
        "id": 204040440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869411
    },
    {
        "content": "<p>How about try using <a href=\"https://github.com/leanprover-community/lean/tree/master/extras/latex\">https://github.com/leanprover-community/lean/tree/master/extras/latex</a></p>",
        "id": 204040461,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594869444
    },
    {
        "content": "<p>It's much more up-to-date</p>",
        "id": 204040489,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594869472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Latexing.20Lean/near/204040313\">said</a>:</p>\n<blockquote>\n<p>Hmmm, let me check the top of our perfectoid latex file</p>\n</blockquote>\n<p>This has changed all my code to :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">eywordcolorlet</span>            <span class=\"n\">blackz</span>            <span class=\"n\">symbolcolor</span><span class=\"o\">:=</span>            <span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">commentcolor</span><span class=\"c1\">--commentcolorcommentcolorzcommentcolorcommentcolor:commentcolorcommentcolorNcommentcolorcommentcolorsymbolcolor:=commentcolorcommentcolor0</span>\n</code></pre></div>",
        "id": 204041026,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594870200
    },
    {
        "content": "<p>Oops... then maybe try the suggestion by Utensil</p>",
        "id": 204041109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594870263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Latexing.20Lean/near/204041109\">said</a>:</p>\n<blockquote>\n<p>Oops... then maybe try the suggestion by Utensil</p>\n</blockquote>\n<p>The same thing happens</p>",
        "id": 204041156,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594870323
    },
    {
        "content": "<p>Then there's probably some other thing in your preamble that makes LaTeX unhappy</p>",
        "id": 204041186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594870364
    },
    {
        "content": "<p>most of my latex headaches involving trying to import a pair of incompatible packages</p>",
        "id": 204041669,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871032
    },
    {
        "content": "<p>latex is not a very good programming language, so even mildly fancy things are implemented in brittle ways</p>",
        "id": 204041718,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871070
    },
    {
        "content": "<p>It finally worked! I now have only 17 errors to deal with!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Package</span> <span class=\"n\">ucs</span><span class=\"o\">:</span> <span class=\"n\">Unknown</span> <span class=\"n\">Unicode</span> <span class=\"n\">character</span> <span class=\"mi\">8613</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"bp\">+</span><span class=\"mi\">21</span><span class=\"n\">A5</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">ucs</span><span class=\"o\">)</span>   <span class=\"n\">possibly</span> <span class=\"n\">declared</span> <span class=\"k\">in</span> <span class=\"n\">uni</span><span class=\"bp\">-</span><span class=\"mi\">33</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"bp\">.</span>\n<span class=\"o\">(</span><span class=\"n\">ucs</span><span class=\"o\">)</span>   <span class=\"kt\">Type</span> <span class=\"n\">H</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"k\">if</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">available</span> <span class=\"k\">with</span> <span class=\"kn\">options</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>There is now only this one error that I don't know how to fix.</p>",
        "id": 204042280,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594871821
    },
    {
        "content": "<p>I copied the preamble given in the sample Latex file.</p>",
        "id": 204042372,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594871899
    },
    {
        "content": "<p><a href=\"#narrow/search/.22unknown.20unicode.20character.22\">https://leanprover.zulipchat.com/#narrow/search/.22unknown.20unicode.20character.22</a></p>",
        "id": 204042389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871935
    },
    {
        "content": "<p>Others have had that problem before (-;</p>",
        "id": 204042394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871943
    },
    {
        "content": "<p>I think you need to teach LaTeX a new unicode character</p>",
        "id": 204042398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871955
    },
    {
        "content": "<p>Ah alright, maybe I can figure it out then. Thanks to all for the help! :)</p>",
        "id": 204042515,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594872078
    },
    {
        "content": "<p>Seems to be missing unicode replacement for <code>↥</code>, maybe try adding</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">{</span>↥<span class=\"nb\">}{{</span><span class=\"k\">\\color</span><span class=\"nb\">{</span>symbolcolor<span class=\"nb\">}</span><span class=\"k\">\\ensuremath</span><span class=\"nb\">{</span><span class=\"k\">\\mapsup</span><span class=\"nb\">}}}</span>1\n</code></pre></div>\n\n\n<p>to <a href=\"https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.tex\">https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.tex</a></p>\n<p>(untested)</p>",
        "id": 204044043,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594874009
    },
    {
        "content": "<p>If this works, then you could have a first PR to Lean <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 204044145,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594874146
    },
    {
        "content": "<p>and maybe ensure and update the <code>sample.tex</code> integrating <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's suggestions and symbols from <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20LaTeX/near/192677228\">here</a></p>",
        "id": 204044291,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594874286
    },
    {
        "content": "<p>If you have Unicode troubles, it might be worth trying XeLaTeX or LuaLaTeX for proper Unicode support. I've always used these when typesetting Agda (but I haven't tried Lean yet).</p>",
        "id": 204067640,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1594895839
    },
    {
        "content": "<p>I can confirm that XeLaTeX works fine for TeXing Lean</p>",
        "id": 204069285,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594897176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Latexing.20Lean/near/204044043\">said</a>:</p>\n<blockquote>\n<p>Seems to be missing unicode replacement for <code>↥</code>, maybe try adding</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">{</span>↥<span class=\"nb\">}{{</span><span class=\"k\">\\color</span><span class=\"nb\">{</span>symbolcolor<span class=\"nb\">}</span><span class=\"k\">\\ensuremath</span><span class=\"nb\">{</span><span class=\"k\">\\mapsup</span><span class=\"nb\">}}}</span>1\n</code></pre></div>\n\n\n<p>to <a href=\"https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.tex\">https://github.com/leanprover-community/lean/blob/master/extras/latex/lstlean.tex</a></p>\n<p>(untested)</p>\n</blockquote>\n<p>Ok, I'll do it. Thank you!</p>",
        "id": 204092811,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594910513
    },
    {
        "content": "<p>Is it possible to export Lean code to latex?</p>",
        "id": 228044140,
        "sender_full_name": "Christopher Iliffe Sprague",
        "timestamp": 1614415298
    },
    {
        "content": "<p>What kind of export do you have in mind?</p>",
        "id": 228044326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614415545
    },
    {
        "content": "<p>The posts above show how to display lean code in TeX, but if you want some more fancy formatting then I don't think such tools exist atm.</p>",
        "id": 228044376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614415588
    },
    {
        "content": "<p>There are other tools that convert commented Lean code into nicely typeset html pages. See e.g. <a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a></p>",
        "id": 228044399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614415634
    },
    {
        "content": "<p>Oh, I see the posts now, and thanks for the link. What I have in mind is a step-by-step proof, like in <a href=\"https://reference.wolfram.com/language/ref/FindEquationalProof.html\">https://reference.wolfram.com/language/ref/FindEquationalProof.html</a></p>",
        "id": 228045175,
        "sender_full_name": "Christopher Iliffe Sprague",
        "timestamp": 1614416607
    },
    {
        "content": "<p>I think the sandwich file showcases something similar in spirit</p>",
        "id": 228045489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614417059
    },
    {
        "content": "<p>In the future alectryon might be usable with lean, that will give even better results</p>",
        "id": 228045569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614417132
    },
    {
        "content": "<p>What is the common practice for translating proofs from Lean to regular math expressions in publications?</p>",
        "id": 228049034,
        "sender_full_name": "Christopher Iliffe Sprague",
        "timestamp": 1614421748
    },
    {
        "content": "<p>I don't think anyone has actually been doing that. Proofs in Lean are not really intended for consumption anywhere other than in a Lean-aware editor, and there is no human readable \"export\" format.</p>",
        "id": 228049574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614422393
    },
    {
        "content": "<p>(Excepting <code>#explode</code>, which is at least Mario-readable.)</p>",
        "id": 228049631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614422414
    },
    {
        "content": "<p>The links above, e.g. <code>sandwich.html</code>, are examples were a human has generated a file that can produce both human-readable HTML, and Lean-checkable proofs.</p>",
        "id": 228049678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614422504
    },
    {
        "content": "<p>This is lovely, but also takes effort.</p>",
        "id": 228049683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614422516
    },
    {
        "content": "<p>From what I've gathered from my reading about the Mathematica extension, one can use <code>#explode</code> and have Mathematica interpret it. And, in Mathematica, one can export LaTeX</p>",
        "id": 228053540,
        "sender_full_name": "Christopher Iliffe Sprague",
        "timestamp": 1614426960
    }
]