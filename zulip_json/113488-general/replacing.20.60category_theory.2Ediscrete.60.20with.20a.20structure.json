[
    {
        "content": "<p>We've often found with typeclass synonyms, if they are semireducible (the default setting) often Lean gets confused. This seems to be happening with <code>category_theory.discrete</code>, and making working <code>category_theory.has_shift</code> quite painful.</p>\n<p>(Recall we model shift functors on a category as a monoidal functor from a monoid <code>A</code> (thought of as a discrete monoidal functor) to <code>C \\func C</code> (again thought of as a monoidal category).)</p>\n<p>I've been experimenting with replacing <code>category_theory.discrete</code> with a custom structure. It's been a fair bit of work, but I'm hopeful it will be helpful, and perhaps is mostly there. However there are a few files where I've got stuck fixing the errors, and I'd like to ask for help. I'm going to shamelessly ping people here in the hope that they could have a look at files they are experts on. :-) This is all in <a href=\"https://github.com/leanprover-community/mathlib/tree/discrete_structure\">branch#discrete_structure</a>.</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, <code>src/category_theory/limits/shapes/multiequalizer.lean</code></li>\n<li><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> and <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, <code>src/category_theory/bicategory/coherence.lean</code> and <code>src/category_theory/monoidal/coherence.lean</code></li>\n<li><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> or <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>, <code>src/category_theory/limits/shapes/biproducts.lean</code></li>\n<li><span class=\"user-mention\" data-user-id=\"437861\">@Praneeth Kolichala</span>, <code>src/category_theory/category/Groupoid.lean</code>.</li>\n</ul>\n<p>In each case, the request is just to see if you can make the red squiggles go away! In some of these files I've made partial progress, in others, not so much. :-)</p>",
        "id": 278681149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649764287
    },
    {
        "content": "<p>I fixed <code>multiequalizer.lean</code>. (and pushed to the same branch)</p>",
        "id": 278699412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649773224
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 278763743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649803815
    },
    {
        "content": "<p>I had a look at <code>biproducts.lean</code>. The issue can be solved by e.g. in ... manually rewriting the elements in <code>J</code> to projections from <code>discrete J</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">biproduct.map_eq_map'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_biproduct</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_biproduct</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">biproduct.map</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">biproduct.map'</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">j</span> <span class=\"n\">j'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">j'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">discrete.nat_trans_app</span><span class=\"o\">,</span> <span class=\"n\">limits.is_colimit.ι_map</span><span class=\"o\">,</span> <span class=\"n\">limits.is_limit.map_π</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">bicone.to_cone_π_app</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">biproduct.bicone_π</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bicone.to_cocone_ι_app</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">biproduct.bicone_ι</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">biproduct.bicone_ι</span><span class=\"o\">,</span> <span class=\"n\">biproduct.bicone_π</span><span class=\"o\">,</span> <span class=\"n\">bicone.to_cocone_ι_app</span><span class=\"o\">,</span> <span class=\"n\">bicone.to_cone_π_app</span><span class=\"o\">],</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">biproduct.ι_π_assoc</span><span class=\"o\">,</span> <span class=\"n\">biproduct.ι_π</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">category.id_comp</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278797007,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649837229
    },
    {
        "content": "<p>Pushed a fix for this, by not using <code>@[simps]</code> on <code>bicone.to_cone</code> and <code>bicone.to_cocone</code>, and instead stating the simp lemma in terms of <code>J</code> instead of <code>discrete J</code>.</p>",
        "id": 278799625,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649838876
    },
    {
        "content": "<p>The errors further down are about <code>b.to_bicone.to_cone</code> and <code>b.to_cone</code> not being of the same type anymore</p>",
        "id": 278799689,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649838912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/113488-general/topic/replacing.20.60category_theory.2Ediscrete.60.20with.20a.20structure/near/278799689\">said</a>:</p>\n<blockquote>\n<p>The errors further down are about <code>b.to_bicone.to_cone</code> and <code>b.to_cone</code> not being of the same type anymore</p>\n</blockquote>\n<p>Which in turn is an issue of whether we want to use <code>discrete walking_pair</code> or <code>walking_pair</code>, maybe using <code>discrete</code> to redefine the latter.</p>",
        "id": 278807248,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1649843477
    },
    {
        "content": "<p>Thanks, based on this hint I think I've got <code>biproducts</code> sorted now.</p>",
        "id": 278809038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649844541
    },
    {
        "content": "<p>I pushed the remaining fixes to <code>biproducts</code>, yay. Still have't solved the problems in the coherence theorems, or Groupoid, but will hopefully get back to these (unless someone else does :-).</p>",
        "id": 278818033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649850408
    },
    {
        "content": "<p>I fixed the errors in the monoidal coherence theorem. Two leamms need to be moved and some general cleanup is needed, but I won't have time for that until next week.</p>",
        "id": 278957700,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1649938670
    },
    {
        "content": "<p>Thanks Markus. <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>, any chance you could have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/discrete_structure\">branch#discrete_structure</a>, in particular <code>src/category_theory/bicategory/coherence.lean</code>?</p>",
        "id": 279363760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650344222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I got stuck once, but I will try again today.</p>",
        "id": 279365807,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1650347062
    },
    {
        "content": "<p>I wonder why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.discrete.functor\">docs#category_theory.discrete.functor</a> <a href=\"https://github.com/leanprover-community/mathlib/compare/discrete_structure#diff-f87557325d73bc7042f62a5d2270ec5af0bacce59f6c9cc7cbb2807b54265aebR112\">isn't changed to use <code>eq_to_hom</code></a>? The current definition using tactics seems bad since it results in the following convoluted term involving eq.rec:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">category_theory.discrete.functor</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">category_theory.discrete</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">ulift.cases_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n    <span class=\"n\">f.cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f.dcases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n      <span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279366267,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650347650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> do you want to try it out? Feel free to experiment on this branch!</p>",
        "id": 279379738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650357825
    },
    {
        "content": "<p>I removed errors in <code>src/category_theory/bicategory/coherence.lean</code>. I did one cheating though, redefining <code>locally_discrete C</code> as a type class synonyms of <code>C</code>.</p>",
        "id": 279384639,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1650360764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I fixed <code>Groupoid.lean</code>, but I added a few helper lemmas in <code>limits/shapes/products.lean</code> which need to be dualized (should be easy, or I can do them later, but I'm busy now).</p>",
        "id": 279517434,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1650446167
    }
]