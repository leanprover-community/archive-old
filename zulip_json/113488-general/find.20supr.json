[
    {
        "content": "<p>I have found</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">supr_pos</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">supr_le</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_supr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>in the library. I would like to have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">supr_xyzzy</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I have never succesfully used find. Somehow it just doesn't give me any results. What should I type into VScode to find this lemma? (Assuming it is there...)</p>",
        "id": 147368449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541766814
    },
    {
        "content": "<p>Ok, I've figured out that I should just use <code>supr_le</code> for this one.</p>",
        "id": 147372143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541771138
    },
    {
        "content": "<p>Here is another one. Should there be a lemma called <code>mem_of_mem_supr</code>?<br>\nIt would state that if <code>x ∈ ⊔s ∈ S, s</code> then there is an <code>s ∈ S</code> such that <code>x ∈ s</code>.</p>",
        "id": 147372222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541771219
    }
]