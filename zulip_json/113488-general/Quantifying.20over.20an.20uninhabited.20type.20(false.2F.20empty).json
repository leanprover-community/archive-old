[
    {
        "content": "<p>I'm wondering whether this is something I should be able to prove (I think I should). It came up when I was trying to show that two definitions of primality are equivalent.</p>\n<p>Let's say that we have a property, which quantifies over an empty, uninhabited type:</p>\n<div class=\"codehilite\"><pre><span></span>def  impossible_property : Prop  :=\n∀ (Pfalse : false), 1  =  1\n</pre></div>\n\n\n<p>Is it true that <code>¬ impossible_property</code>, i.e. how, if at all, can I finish this proof:</p>\n<div class=\"codehilite\"><pre><span></span>def  cant_happen : ¬ impossible_property :=\nλ Pimp : impossible_property,\nsorry\n</pre></div>",
        "id": 124058931,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521722420
    },
    {
        "content": "<p>Its the opposite: <code>impossible_property</code> is always inhabited, it can be easily proved using <code>false.elim</code>.</p>",
        "id": 124059054,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1521722679
    },
    {
        "content": "<p>Cheers, indeed:</p>\n<div class=\"codehilite\"><pre><span></span>def  impossible_property : Prop  :=\n∀ (Pfalse : false), 1  =  1\ndef  can_happen_ : impossible_property :=\nλ (Pfalse: false),\nfalse.elim Pfalse\n</pre></div>",
        "id": 124059575,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521723610
    },
    {
        "content": "<p>This is better shown with a \"ridiculous\" example. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exfalso_quod_libet</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 124059651,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521723728
    },
    {
        "content": "<p>Thanks Moses,</p>\n<p>this is indeed a better example. I'm afraid though that my confusion goes deeper than the initial question.</p>\n<p>I've been trying to show that two definitions of primality are equivalent:</p>\n<div class=\"codehilite\"><pre><span></span>def  is_divisible: nat → nat →  Prop  :=\nλ n m : nat, ∃ k : nat, m * k = n\n\ndef  is_prime1: nat →  Prop  :=\nλ p, ∀ (m : nat) (Pmdp : is_divisible p m), ((m =  1) ∨ (m = p)) ∧ (p ≠  1)\n\ndef  is_prime2: nat →  Prop  :=\nλ p, ∀ (k : nat) (b1 : k &lt; p) (b2 : 1  &lt; k), (¬ is_divisible p k)\n</pre></div>\n\n\n<p>Using your example I was able to show that 1 is prime according to the second definition <code>is_prime2</code>:</p>\n<div class=\"codehilite\"><pre><span></span>def  one_is_prime2 : is_prime2 1  :=\nλ (k : nat) (x : k &lt;  1) (y : 1  &lt; k),\nhave a : 1  &lt;  1, from lt.trans y x,\nhave one_ne_one : 1  ≠  1, from (ne_of_lt a),\nfalse.elim (one_ne_one (eq.refl 1))\n</pre></div>\n\n\n<p>This clearly makes <code>is_prime_2</code> a bad definition of primality, but I really can't see what went wrong.</p>",
        "id": 124060858,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521725779
    },
    {
        "content": "<p>You should look at the definition of <code>prime</code> and equivalent variations in mathlib <code>data.nat.prime</code></p>",
        "id": 124061502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521726758
    },
    {
        "content": "<p>Most definitions of <code>prime</code> have to explicitly exclude 1</p>",
        "id": 124061507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521726773
    },
    {
        "content": "<p>It is true that there are no 1&lt;k&lt;1 such that 1 | k, meaning that 1 is spuriously identified as prime using <code>is_prime2</code>.</p>",
        "id": 124061570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521726849
    },
    {
        "content": "<p>By the way you probably want <code>p \\ne 1</code> in<code>is_prime1</code> to come before the forall, otherwise it only applies when there exists an m such that p|m (which is true, but still it's a bit subtle)</p>",
        "id": 124061651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521726981
    },
    {
        "content": "<p>forall has low binding power, meaning that it extends until it hits a close parenthesis</p>",
        "id": 124061716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521727108
    },
    {
        "content": "<p>Thanks, this makes sense. </p>\n<p>The problem extends to <code>is_prime2 0</code>, since <code>k &lt; 0 → false</code> and we end up with the same problems. Definition of primality in mathlib excludes  these cases, just as you pointed out, before the quantifier:  <code>def  prime (p : ℕ) := p ≥  2  ∧  ∀ m ∣ p, m =  1  ∨ m = p</code></p>",
        "id": 124063178,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1521729381
    }
]