[
    {
        "content": "<p>Next up in my series of lean puzzles, consider the following code snippet:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">do_some_nonsense</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"s2\">&quot;ELLO1&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">do_some_nonsense&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"s2\">&quot;ELLO2&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic_bind_override</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- do_some_nonsense (t₁ &gt;&gt;= (λ a, t₂ a))</span>\n<span class=\"n\">do_some_nonsense&#39;</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">t₂</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">,</span> <span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">bind_override</span> <span class=\"o\">:</span> <span class=\"n\">has_bind</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨@</span><span class=\"n\">tactic_bind_override</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"s2\">&quot;A&quot;</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">go</span>\n</pre></div>",
        "id": 148625272,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543309071
    },
    {
        "content": "<p>We are just stealing control of the <code>bind</code> function associated to the tactic monad, to prepend every single bind with a trace statement by calling <code>do_some_nonesense</code> (possibly the primed version). If you run the code as I have given it, the expected</p>\n<div class=\"codehilite\"><pre><span></span>ELLO2\nA\n</pre></div>\n\n\n<p>will be printed. On the other hand, try uncommenting the commented line and commenting the line below it. This calls a slightly different version of <code>do_some_nonsense</code>, but no longer prints <code>ELLO1</code> before the <code>A</code>. Indeed, if you use <code>set_option trace.compiler.optimize_bytecode true</code> to inspect the code emitted for the <code>go</code> function, you will see that no call to <code>tactic_bind_override</code> is even being made anymore and lean is resorting to the builtin <code>interaction_monad_bind</code>.</p>",
        "id": 148625276,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543309078
    },
    {
        "content": "<p>The puzzle: determine why this is. (Spoiler, I have no idea)</p>",
        "id": 148625320,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543309103
    },
    {
        "content": "<p>Serious hint but still what the: replacing <code>tactic.down</code> with <code>tactic.down.{0}</code> makes it work</p>",
        "id": 148625471,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543309312
    },
    {
        "content": "<p>what the</p>",
        "id": 148625601,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543309446
    },
    {
        "content": "<p>This is interesting!  You might want to look at the universe parameters of the declarations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n<span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">tactic_bind_override</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">do_some_nonsense</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">do_some_nonsense&#39;</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span><span class=\"n\">for_each</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">returnex</span> <span class=\"err\">$</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">univ_params</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">scratch20181127.lean:18:0: information trace output</span>\n<span class=\"cm\">(tactic_bind_override, [u])</span>\n<span class=\"cm\">(do_some_nonsense, [u, u_1])</span>\n<span class=\"cm\">(do_some_nonsense&#39;, [u])</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 148626504,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1543310577
    },
    {
        "content": "<p>There really should be a linter for non-inferable instances :)</p>",
        "id": 148626617,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543310713
    }
]