[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_i</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i),</span>\n<span class=\"cm\">    (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i))</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a b)</span>\n<span class=\"cm\">        c =</span>\n<span class=\"cm\">      (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) b c)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_t</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 127341302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734133
    },
    {
        "content": "<p>The extra unfolding in <code>def</code> and <code>instance</code> is making things harder (I did not include example of <code>def</code>)</p>",
        "id": 127341307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734149
    },
    {
        "content": "<p>i.e. the <code>*</code> becoming <code>semigroup.mul</code></p>",
        "id": 127341309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734157
    },
    {
        "content": "<p>how can I avoid this? is this a bug?</p>",
        "id": 127341354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 127341357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 127341402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527734347
    },
    {
        "content": "<p>thanks</p>",
        "id": 127341404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734354
    },
    {
        "content": "<p>temporary workaround: change it to <code>theorem</code> where it doesn't unfold, copy the goal, use <code>change</code>/<code>show</code>, and then switch back to <code>def</code></p>",
        "id": 127341411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527734386
    },
    {
        "content": "<p>I'm not sure what is happening just by looking at it... but I'll leave for a short trip until Sunday soon</p>",
        "id": 127348395,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1527749362
    },
    {
        "content": "<p>I see that all the time. It's indeed a bit annoying</p>",
        "id": 127348933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527750287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 128009463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1528897961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 128094754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529022556
    },
    {
        "content": "<p>I'd have to go back to a debug build of Lean 3 to diagnose this, but it won't be fixed for Lean 3 anyway...</p>",
        "id": 128110837,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529053892
    },
    {
        "content": "<p>So just to be clear -- there is no point noting this down as an issue anywhere on github, because we all know it won't be fixed in Lean 3, and because Lean 4 is a complete rewrite it's very unlikely that the issue will remain in Lean 4? Or could it be the case that when Lean 4 comes, exactly the same issue will be there because chunks of code were basically copied from Lean 3, and then this issue should be marked as something which should be fixed in the future. What I'm trying to establish is whether this trickle of minor Lean 3 points which will not be fixed in Lean 3 should be recorded somewhere anyway, just to check Lean 4 does not suffer from the same problems. If the chances of Lean 4 suffering from the same problem is 0% then in this case there is no point recording anything formally.</p>",
        "id": 128111464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529055016
    },
    {
        "content": "<p>It's hard to say in general. There seems to be some bug somewhere in the elaborator here, which may very well survive into Lean 4 if we don't fix it specifically. _However_, Kenny's example will likely work because Lean 4 will elaborate the type and body of a <code>def/instance</code> separately if the former is given explicitly - so just like for <code>theorem</code>.</p>",
        "id": 128113301,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529058477
    },
    {
        "content": "<p>holy mother I found a workaround</p>",
        "id": 128167974,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529153319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_i</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i),</span>\n<span class=\"cm\">    (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i))</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a b)</span>\n<span class=\"cm\">        c =</span>\n<span class=\"cm\">      (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) b c)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_i_uv</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_t</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 128167975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529153322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it can be avoided by using universes instead of <code>Type*</code></p>",
        "id": 128167978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529153338
    },
    {
        "content": "<p>Wow, nice find. Then I can probably explain it - there is some tricky code in the structure notation elaborator that needs to unfold terms that contain metavariables - apparently it also does that for universe mvars, which it probably shouldn't do. As I said above, when you use <code>theorem</code>, the body is elaborated separately from the type, so the mvars have already been solved.</p>",
        "id": 128168239,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529153983
    },
    {
        "content": "<p>well, that was unexpected</p>",
        "id": 128169386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529156741
    },
    {
        "content": "<p>finally something unexpected :P</p>",
        "id": 128169426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529156777
    },
    {
        "content": "<p>I'm going to check if this will also simplify my code, and if it removes some of the issues that I've been have lately.</p>",
        "id": 128171397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529161254
    },
    {
        "content": "<p>But it will have to wait till Monday before I get back to Lean.</p>",
        "id": 128171404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529161271
    },
    {
        "content": "<p>I write all my code just using Type. I believe in ZFC!</p>",
        "id": 128178398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1529177543
    },
    {
        "content": "<p>Can we solve this 2-year-old problem now by changing the C++ code?</p>",
        "id": 196715538,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588811954
    },
    {
        "content": "<p>recap:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_i</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">I : Type ?,</span>\n<span class=\"cm\">f : I → Type ?,</span>\n<span class=\"cm\">_inst_1 : Π (i : I), semigroup (f i)</span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i),</span>\n<span class=\"cm\">    (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i))</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a b)</span>\n<span class=\"cm\">        c =</span>\n<span class=\"cm\">      (λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) a</span>\n<span class=\"cm\">        ((λ (x y : Π (i : I), f i) (i : I), semigroup.mul (x i) (y i)) b c)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_i_uv</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">I : Type u,</span>\n<span class=\"cm\">f : I → Type v,</span>\n<span class=\"cm\">_inst_1 : Π (i : I), semigroup (f i)</span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_t</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">I : Type u_1,</span>\n<span class=\"cm\">f : I → Type u_2,</span>\n<span class=\"cm\">_inst_1 : Π (i : I), semigroup (f i)</span>\n<span class=\"cm\">⊢ ∀ (a b c : Π (i : I), f i), a * b * c = a * (b * c)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 196715616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588812017
    },
    {
        "content": "<p>Open an issue in the forked Lean repo.</p>",
        "id": 196715755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588812191
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/214\" title=\"https://github.com/leanprover-community/lean/issues/214\">https://github.com/leanprover-community/lean/issues/214</a></p>",
        "id": 196715961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588812365
    },
    {
        "content": "<p>push</p>",
        "id": 198864686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590569150
    }
]