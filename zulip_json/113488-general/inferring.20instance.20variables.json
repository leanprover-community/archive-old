[
    {
        "content": "<p>At some point in time, we would replace a whole bunch of <code>[ring R]</code> by <code>{_inst : ring R}</code> because it would save us a type class search. Do I understand correctly that this is no longer necessary in <code>lean-3.x.c</code> for high values of <code>x</code>?</p>",
        "id": 196863851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588921535
    },
    {
        "content": "<p>what do you mean by replace <code>[ring R]</code> with <code>{_inst : ring R}</code>?</p>",
        "id": 196863919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588921596
    },
    {
        "content": "<p>See, e.g., <code>algebra/group/hom</code>.</p>",
        "id": 196864096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588921765
    },
    {
        "content": "<p>There are two cases:</p>\n<ol>\n<li>Type class instances: here the issue was mainly performance.  Lean used to synthesize arguments in <code>[]</code> even if they were inferable via unification.  This is fixed now.</li>\n<li>Regular definitions.  Here the \"issue\" is that Lean tries to synthesize arguments in <code>[]</code> eagerly.  This is typically a good idea.  But you run into problems if the inferred instance is not definitionally equal to the one you have in your goal.  I don't think this will change.  An example of this is <code>quotient.mk'</code> vs <code>quotient.mk</code>.</li>\n</ol>",
        "id": 196864702,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588922273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks for the explanation. So in general, we don't need so many <code>{_inst : ring R}</code>s anymore, right?</p>",
        "id": 196864838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922363
    },
    {
        "content": "<p>I remember a recent PR adding <code>{_inst : ring R}</code>s because of (2).</p>",
        "id": 196864904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922413
    },
    {
        "content": "<p>There are a few places where there is <code>fintype </code> or <code>decidable</code> are in curly brackets because of diamond problems with these classes after rewrites. Is this no longer necessary?</p>",
        "id": 196867344,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588924643
    },
    {
        "content": "<p>The <code>{h : fintype ...}</code> and <code>{h : decidable ...}</code> issue is exactly number 2.  These are still necessary, and I don't think this will change.</p>",
        "id": 196870532,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588927221
    }
]