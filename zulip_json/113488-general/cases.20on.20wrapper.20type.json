[
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">with_zero</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"n\">none</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"n\">some</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n</pre></div>\n\n\n<p>Now, if I have <code>x : with_zero X</code>, and I run <code>cases x</code>,<br>\nI get two cases, <code>none</code> or <code>some x</code>. However, this means that the <code>option</code>-type is leaking through. I already have a ton of simp-lemmas and other API in the form of zero and coercions: <code>0</code> and <code>\\u x</code>. Can I somehow produce cases that manifestly stay in the <code>with_zero</code> world, instead of leaking into the <code>option</code> world?</p>",
        "id": 158054969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549911787
    },
    {
        "content": "<p>I'm currently cleaning up a lot of <code>with_zero</code> stuff. What is the correct thing to do here?</p>",
        "id": 159413419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176468
    },
    {
        "content": "<p>Does this mean that <code>cases x</code> if just a \"bad tactic move\" if <code>x : with_zero X</code>?</p>",
        "id": 159413430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176502
    },
    {
        "content": "<p>And instead people should use some lemma from an extensive API that is built to prevent this leakage?</p>",
        "id": 159413476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176538
    },
    {
        "content": "<p>Could you write a <code>with_top.cases_on</code> lemma and do <code>cases ... using with_top.cases_on</code>?</p>",
        "id": 159413681,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551176845
    },
    {
        "content": "<p>Hmmm, maybe that works. I will try in a moment.<br>\nIt would be nice if <code>cases</code> could pick up this <code>cases_on</code> lemma by itself.</p>",
        "id": 159413750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551176919
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_div_eq_inv</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"kn\">using</span> <span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span><span class=\"o\">,</span> <span class=\"c1\">-- red lines under &quot;using&quot;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>error: <code>invalid 'begin-end' expression, ',' expected</code></p>",
        "id": 159414169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551177372
    },
    {
        "content": "<p><code>cases</code> doesn't have <code>using</code></p>",
        "id": 159414172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177390
    },
    {
        "content": "<p><code>induction</code> has it though</p>",
        "id": 159414178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177399
    },
    {
        "content": "<p>it basically never works, but try it anyway</p>",
        "id": 159414183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177410
    },
    {
        "content": "<p><code>induction</code> has it, but will not let you using it</p>",
        "id": 159414185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551177417
    },
    {
        "content": "<p>It does!</p>",
        "id": 159414191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551177425
    },
    {
        "content": "<p>The labels or a bit of though <code>case a</code> and <code>case a</code>. But anyway, that works.</p>",
        "id": 159414200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551177441
    },
    {
        "content": "<p>Too bad that you can't use <code>cases</code>. It reads more natural to me.</p>",
        "id": 159414207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551177461
    },
    {
        "content": "<p>I just use <code>refine</code></p>",
        "id": 159414213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551177471
    },
    {
        "content": "<p>In fact, <code>induction</code> does the right thing, whereas <code>apply</code>/<code>refine</code> give me stupid goals that are false.</p>",
        "id": 159414412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551177675
    },
    {
        "content": "<p>If you revert everything that depends on the variable  you're doing cases on first, refine works. But that is a bit long.</p>",
        "id": 159422415,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551186691
    },
    {
        "content": "<p>I've now resorted to writing the proofs using pattern matching. I think it's quite nice that way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_div</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 159423191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551187453
    },
    {
        "content": "<p>After the fight over lifts this morning, Johan has been secretly taken down and replaced by a computer scientist. I fear my time will come soon.</p>",
        "id": 159423250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551187553
    },
    {
        "content": "<p>I think this is OK for proofs but if you use it for definitions then there will be trouble with unfolding. Or something.</p>",
        "id": 159425820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551189856
    },
    {
        "content": "<blockquote>\n<p>I've now resorted to writing the proofs using pattern matching. I think it's quite nice that way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_div</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n</blockquote>\n<p>What's the definition of <code>/</code>? Shouldn't this proof be <code>one_mul</code>?</p>",
        "id": 159425976,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551189983
    },
    {
        "content": "<p>Ha, probably it should.</p>",
        "id": 159426003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551190004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Again, that is us fighting the system... It ought to just work.</p>",
        "id": 159426025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551190030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I pushed an update (-;</p>",
        "id": 159426335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551190290
    }
]