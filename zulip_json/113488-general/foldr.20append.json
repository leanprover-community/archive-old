[
    {
        "content": "<p>The <code>theorem</code> works fine, assuming it says what I meant. But I'm stuck on the <code>example</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.squeeze</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finite_foldr_fusion</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.rec_on</span> <span class=\"n\">xs</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foldr</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">foldr</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">])</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite_foldr_fusion</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">xs</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n<span class=\"n\">αβ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">β</span>\n<span class=\"n\">xsys</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">proofs01.lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n<span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">5</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261400401,
        "sender_full_name": "Iocta",
        "timestamp": 1636868513
    },
    {
        "content": "<p>Why do you need <code>finite_foldr_fusion</code>? Your example is just a symmetry version of <code>foldr_append</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">symmetry</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">foldr_append</span>\n</code></pre></div>",
        "id": 261402918,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1636873007
    },
    {
        "content": "<p><code>finite_foldr_fusion</code> is supposed to be the general case and I want to try to apply it</p>",
        "id": 261403187,
        "sender_full_name": "Iocta",
        "timestamp": 1636873415
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldr_rec_on\">docs#list.foldr_rec_on</a></p>",
        "id": 261415412,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636893769
    }
]