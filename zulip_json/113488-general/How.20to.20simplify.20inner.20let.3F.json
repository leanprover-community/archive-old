[
    {
        "content": "<p>How do I simplify the inner recursive <code>let</code> in this lean4 snippet?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evenq</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">pack</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"n\">acc</span> <span class=\"n\">accs</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">evenq</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"n\">acc</span> <span class=\"n\">accs</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">accs</span>\n  <span class=\"n\">loop</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">pack</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pack_zero_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">pack</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pack</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pack.loop</span><span class=\"o\">]</span> <span class=\"c1\">-- Doesn't simplify</span>\n</code></pre></div>\n<p>Ideally I'd want to run the tactic equivalent of #eval to get <code>[0] \\neq []</code> as my goal, but <code>simpl</code> or <code>delta</code> don't seem to be able to reduce <code>pack.loop</code>.</p>",
        "id": 264341636,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639073173
    },
    {
        "content": "<p>You can't prove anything about a <code>partial def</code></p>",
        "id": 264342381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639073537
    },
    {
        "content": "<p>Is that because the type-checker is guaranteed to complete in finite time, and \"just run it\" can run for unbounded time?</p>",
        "id": 264342991,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639073672
    },
    {
        "content": "<p>It seems like <code>#eval pack 0</code> terminating with value <code>[0]</code> should constitute a proof that <code>pack 0 = [0]</code>. Why is the calculation <code>#eval</code> can do inaccessible to proofs?</p>",
        "id": 264343805,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639073941
    },
    {
        "content": "<p><code>partial def</code> uses a <code>constant</code> to shield the unsafe implementation details of unbounded evaluation from the kernel. This is needed because you can prove false using general recursion: <code>unsafe def foo : false := foo</code></p>",
        "id": 264344489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639074237
    },
    {
        "content": "<p>a side effect of this is that the kernel loses the ability to prove any fact about the def except that it is type correct</p>",
        "id": 264344619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639074281
    },
    {
        "content": "<p>In principle, the \"just run it\" method could be used to derive proofs, but lean isn't set up like that</p>",
        "id": 264344698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639074330
    },
    {
        "content": "<p>The way to write recursive definitions that have provable properties is to use structural recursion or <code>termination_by</code></p>",
        "id": 264345152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639074492
    },
    {
        "content": "<p>How do you specify a termination proof on the <code>let rec</code> using <code>termination_by</code>? I saw examples in the test suite for <code>def</code> and <code>mutual</code> declarations, but not for <code>let rec</code>.</p>",
        "id": 264345309,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639074545
    },
    {
        "content": "<p>It should be easy to prove termination since <code>next</code> is strictly-decreasing.</p>",
        "id": 264345780,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639074708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463384\">Michael Burge</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20simplify.20inner.20let.3F/near/264345309\">said</a>:</p>\n<blockquote>\n<p>How do you specify a termination proof on the <code>let rec</code> using <code>termination_by</code>?</p>\n</blockquote>\n<p>Don't know if there is a better way but one option is always to float out <code>loop</code> to a top-level definition</p>",
        "id": 264346351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639074910
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evenq</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">half_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pack</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"n\">next_lt</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">next</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">half_lt</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">List.cons</span> <span class=\"n\">acc</span> <span class=\"n\">accs</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">match</span> <span class=\"n\">evenq</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">next_lt</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"n\">acc</span> <span class=\"n\">accs</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">next_lt</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">accs</span>\n  <span class=\"n\">loop</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 264347480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639075326
    },
    {
        "content": "<p>it looks like it's not necessary to float out the definition, <code>termination_by</code> syntax seems to be pretty flexible to allow choosing nested functions to work on</p>",
        "id": 264347614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639075397
    },
    {
        "content": "<p>As far as I can tell, this generates exactly the same IR too, except that it has an additional dummy argument for the use of the closure argument <code>next_lt</code> in <code>loop</code></p>",
        "id": 264348913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639075956
    },
    {
        "content": "<p>I would've expected <code>if h : n = 0</code> to fail because <code>n = 0</code> is <code>Prop</code> not <code>Bool</code>, and I don't see it in the <a href=\"https://leanprover.github.io/lean4/doc/expressions.html\">Language Manual</a> or defined in the <a href=\"https://github.com/leanprover/lean4/blob/f4759c9a223f12bbae779124a5d9ab7bf999032b/stage0/src/Lean/Parser/Term.lean\">Term parser</a>.  I also see <code> if k == ``Lean.Parser.Term.letPatDecl then</code> when searching the <code>lean4</code> repository and <code>==</code> evaluates to a <code>Bool</code>, so it seems reusable for both <code>Prop</code> and <code>Bool</code>.</p>\n<p>Is there a better reference for Lean syntax than the unit tests in the <code>lean4</code> repo, that would include the semantics for things like <code>if</code>?</p>",
        "id": 264350738,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639076731
    },
    {
        "content": "<p>Since your condition in the if statement is about equality of naturals, that is decidable equality, so it can compute. Decidability is the ability of \"computing\" a bool from a proof.</p>",
        "id": 264350949,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639076828
    },
    {
        "content": "<p>So there's probably a library typeclass or something for types that are decidable, and <code>if</code> desugars to it(maybe it's a macro?). And decidable in Lean wouldn't mean computable(because <code>BusyBeaver(n)</code> for sufficiently large n would be <code>Nat</code> but uncomputable even in principle), but something like \"allows case analysis in classic logic\".</p>\n<p>It looks like <a href=\"https://github.com/leanprover/lean4/commit/c24cd877c8c0fcdf6be7b3ee0ed12bf3b46dfd1b\">if</a> is a macro defined in terms of <code>ite</code> which I see references to in C++ code, so it's built-in to the core language. There are also <a href=\"https://github.com/leanprover/lean4/blob/127681666a6a842c076963e82df782e933a4b9e7/src/Lean/Meta/Tactic/SplitIf.lean#L50\">tactics</a> that generate a reference to <code>of_decide_eq_true</code> in the <a href=\"https://github.com/leanprover/lean4/blob/d3713e89522a3d6b62357ba1911787a827e9a62c/stage0/src/Lean/Meta/AppBuilder.lean#L418\"><code>Decidable</code></a> typeclass.</p>\n<p>So <code>if</code> eventually compiles down to a reference to <a href=\"https://github.com/leanprover/lean4/blob/c447db5db980c01630ec07852053ca72c76d645b/stage0/src/Init/Prelude.lean#L272\"><code>of_decide_eq_true</code></a>, which is proven for any type implementing <code>Decidable</code>.</p>",
        "id": 264356188,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639079248
    },
    {
        "content": "<p>Correction: That C++ code looks like it is generated from the .lean code to allow bootstrapping, so is a red herring. <code>if</code> is only a macro that generates a typeclass constraint in pure lean</p>",
        "id": 264356496,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639079377
    },
    {
        "content": "<p><code>if h : p then x else y</code> is syntax for <code>dite</code> which is just a bit further down in that file.</p>",
        "id": 264356673,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639079443
    },
    {
        "content": "<p>So the macro for <code>if h : C</code> generates a pair of functions that receives <code>C</code> or <code>Not C</code> in the context, while <code>if C</code>generates a pair of values unconditionally. In the proof that Mario wrote for me, <code>half_lt</code> uses <code>n ≠ 0</code> which is the <code>else</code> condition of the <code>if h: n = 0</code>, so this is why the <code>h : C</code> syntax was used(because the else case consumes <code>Not C</code>).</p>\n<p>And now I notice <code>h</code> is passed explicitly to <code>next_lt</code>.</p>",
        "id": 264358378,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639080125
    },
    {
        "content": "<p><code>terminates_by</code> takes a function that maps the type to <code>Nat</code>(so it's probably theoretically impossible to do transfinite induction proofs with Lean). The centerdot is probably the \"current context\", and <code>.2.2.1</code> are unwrapping pairs to get to the <code>n</code> that is proven to be decreasing.</p>\n<p>Why can't it refer to <code>n</code> directly, since it's attached to <code>pack</code> that has <code>n</code> in scope?</p>",
        "id": 264359357,
        "sender_full_name": "Michael Burge",
        "timestamp": 1639080544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463384\">Michael Burge</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20simplify.20inner.20let.3F/near/264359357\">said</a>:</p>\n<blockquote>\n<p>(so it's probably theoretically impossible to do transfinite induction proofs with Lean)</p>\n</blockquote>\n<p>It's definitely possible, maybe not using the <code>terminates_by</code> syntax though.</p>",
        "id": 264362053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639081992
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/besicovitch.tau_package.index\">docs#besicovitch.tau_package.index</a> for an example of a construction by transfinite induction.</p>",
        "id": 264363141,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1639082480
    },
    {
        "content": "<p><code>termination_by</code> takes any <code>WellFoundedRelation</code>; it's <code>measure</code> that reduces it to finite measures</p>",
        "id": 264365280,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639083546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463384\">Michael Burge</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20simplify.20inner.20let.3F/near/264359357\">said</a>:</p>\n<blockquote>\n<p><code>terminates_by</code> takes a function that maps the type to <code>Nat</code>(so it's probably theoretically impossible to do transfinite induction proofs with Lean). The centerdot is probably the \"current context\", and <code>.2.2.1</code> are unwrapping pairs to get to the <code>n</code> that is proven to be decreasing.</p>\n<p>Why can't it refer to <code>n</code> directly, since it's attached to <code>pack</code> that has <code>n</code> in scope?</p>\n</blockquote>\n<p>(As Sebastian says, you can prove more complex recursions if you don't use <code>measure</code>, but in this case we just want a nat so it's fine to use it here.) <code>measure</code> takes a function from the original domain (which is an autogenerated sigma type over all the arguments) to nat, and <code>(·.2.2.1)</code> is notation for a lambda that picks out the right argument here. (<code>n</code> is the third argument, because <code>next</code> and <code>next_lt</code> are captured variables which come first.)</p>\n<p>It can't refer to <code>n</code> directly because <code>termination_by</code> isn't in scope of anything - it is elaborated in the empty context, although one could imagine a variation on the syntax that automatically untuples the sigma type and gives all the variables the original names so that they appear to still be in scope. But fundamentally, the proof of termination has to be separate from the lambda that gives the term's definition, because it's talking about all the definition's values, not just the \"current\" one for the in-scope values of the inputs.</p>",
        "id": 264370259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639085888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463384\">Michael Burge</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20simplify.20inner.20let.3F/near/264356188\">said</a>:</p>\n<blockquote>\n<p>And decidable in Lean wouldn't mean computable(because <code>BusyBeaver(n)</code> for sufficiently large n would be <code>Nat</code> but uncomputable even in principle), but something like \"allows case analysis in classic logic\".</p>\n</blockquote>\n<p>While this is true, in practice usually <code>Decidable p</code> means that <code>p</code> has an actual decision procedure. In the case of uncomputable decision procedures, this is indicated by an instance of <code>Decidable p</code> that is marked <code>noncomputable</code>. This does come up in one important case: in classical logic, when computation is not important, one can use (the lean 4 equivalent of) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.dec\">docs#classical.dec</a> to nonconstructively prove that every proposition has a decision procedure (namely, one of the two functions <code>return true</code> and <code>return false</code>); this allows you to put anything in an <code>if</code> statement, but the resulting definitions will themselves be marked <code>noncomputable</code>, reflecting that the definition has no code generation associated to it and <code>#eval</code> will not work.</p>",
        "id": 264371140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639086311
    }
]