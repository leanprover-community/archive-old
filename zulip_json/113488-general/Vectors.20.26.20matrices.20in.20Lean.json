[
    {
        "content": "<p>Can anyone point me to where &amp; how vectors &amp; matrices are defined in lean?</p>",
        "id": 192143605,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1585432943
    },
    {
        "content": "<p>In mathlib <code>data.matrix.basic</code></p>",
        "id": 192143681,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585433083
    },
    {
        "content": "<p>Are there good examples anywhere for the basics of how to use &amp; manipulate this definition?</p>",
        "id": 193212998,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1586276454
    },
    {
        "content": "<p>No I'm afraid... we don't have much linalg in terms of matrices...</p>",
        "id": 193213175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586276544
    },
    {
        "content": "<p>So your best bet is to read that file (and PR some docs if you want/can!)</p>",
        "id": 193213206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586276567
    },
    {
        "content": "<p>Also, you can search for <code>data.matrix.basic</code> to see which files import the definition of matrix</p>",
        "id": 193213247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586276590
    },
    {
        "content": "<p>Or else you can have a look at <a href=\"/user_uploads/3121/0INsLLauBciklqzw9I9QwpoK/matrix.pdf\" title=\"matrix.pdf\">the output</a> of <code>leanproject import-graph --from data.matrix.basic matrix.pdf</code></p>",
        "id": 193213597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586276759
    },
    {
        "content": "<p>The fact that <code>ring_theory.algebra</code> import matrices is a bit misleading...</p>",
        "id": 193213753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586276811
    },
    {
        "content": "<p>I suppose one could fire up <code>leancrawler</code> and look for declarations that actually rely on the <code>matrix</code> definition...</p>",
        "id": 193214065,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586276954
    },
    {
        "content": "<p>True.</p>",
        "id": 193214210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586277006
    },
    {
        "content": "<p>Merging leanproject, format_lean and leancrawler is still on my TODO list...</p>",
        "id": 193214264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586277027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193214264\" title=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193214264\">said</a>:</p>\n<blockquote>\n<p>Merging leanproject, format_lean and leancrawler is still on my TODO list...</p>\n</blockquote>\n<p>Wow, leancrawler looks amazing</p>",
        "id": 193217811,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586278760
    },
    {
        "content": "<p>This is what produced the big graph at <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\" title=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a></p>",
        "id": 193217845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586278792
    },
    {
        "content": "<p>I really liked this graph and wondered if I could produce snapshots of those for arbitrary theorem in mathematics</p>",
        "id": 193218384,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279032
    },
    {
        "content": "<p>This will be much easier when leancrawler will be part of leanproject. But this requires time, and I'm already spending way too much time on Lean tooling.</p>",
        "id": 193218548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193218548\" title=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193218548\">said</a>:</p>\n<blockquote>\n<p>This will be much easier when leancrawler will be part of leanproject. But this requires time, and I'm already spending way too much time on Lean tooling.</p>\n</blockquote>\n<p>I'm quite proficient in Python, is there a way to give a hand?</p>",
        "id": 193218638,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279138
    },
    {
        "content": "<p>The current blocking stuff is on the Lean meta-programming side I'm afraid.</p>",
        "id": 193219094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Well, I'm interested into looking at the C++ internals of Lean, but not now, I don't have enough confidence on such piece of software :)</p>",
        "id": 193219512,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279539
    },
    {
        "content": "<p>This has nothing to do with C++.</p>",
        "id": 193219546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193219546\" title=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193219546\">said</a>:</p>\n<blockquote>\n<p>This has nothing to do with C++.</p>\n</blockquote>\n<p>You mean the meta-programming in Lean (e.g. tactics building, etc.) ?</p>",
        "id": 193219593,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279586
    },
    {
        "content": "<p>Yes.</p>",
        "id": 193219676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193219676\" title=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193219676\">said</a>:</p>\n<blockquote>\n<p>Yes.</p>\n</blockquote>\n<p>Are there any docs beyond tactics writing (which I know I already asked you about it) on the general meta-programming language/engine? I have seen that Lean 4 has something which looks a bit what Rust has for macros and I'm used to these kinds of meta-programming stuff</p>",
        "id": 193219837,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> , what have you read already? <a href=\"https://doi.org/10.1145/3110278\" title=\"https://doi.org/10.1145/3110278\">https://doi.org/10.1145/3110278</a> is a great start.</p>",
        "id": 193259964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586301512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193259964\" title=\"#narrow/stream/113488-general/topic/Vectors.20.26.20matrices.20in.20Lean/near/193259964\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> , what have you read already? <a href=\"https://doi.org/10.1145/3110278\" title=\"https://doi.org/10.1145/3110278\">https://doi.org/10.1145/3110278</a> is a great start.</p>\n</blockquote>\n<p>Nothing more than Lean reference manual <a href=\"https://leanprover.github.io/reference/lean_reference.pdf\" title=\"https://leanprover.github.io/reference/lean_reference.pdf\">https://leanprover.github.io/reference/lean_reference.pdf</a> and the mathlib docs. Will bookmark this :) — thank you!</p>",
        "id": 193295791,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586339113
    },
    {
        "content": "<p>I just tried <code>leanproject import-graph</code> (on my windows machine), and I get (from a powershell shell)</p>\n<div class=\"codehilite\"><pre><span></span>PS C:\\Users\\Sebastien\\Desktop\\mathlib&gt; leanproject import-graph --from data.fintype.basic fintype.pdf\n[WinError 2] &quot;dot&quot; not found in path.\n</pre></div>\n\n\n<p>and from a Cygwin shell</p>\n<div class=\"codehilite\"><pre><span></span>Sebastien@DESKTOP-51UASBS /cygdrive/c/Users/Sebastien/Desktop/mathlib\n$ leanproject import-graph --from data.fintype.basic fintype.pdf\nexpected string or bytes-like object\n</pre></div>",
        "id": 193647365,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586590701
    },
    {
        "content": "<p>It needs <code>dot</code> from <code>graphviz</code> to produce pdfs</p>",
        "id": 193647439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586590811
    },
    {
        "content": "<p>OK, let me install <code>graphviz</code> and report back. Thanks!</p>",
        "id": 193647522,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586590977
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yz6AXkThWxn1Ny0HJIROB5_I/fintype-graph.pdf\" title=\"fintype-graph.pdf\">fintype-graph.pdf</a></p>",
        "id": 193647580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586591080
    },
    {
        "content": "<p>Do you want to remove something from this graph?</p>",
        "id": 193647594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586591135
    },
    {
        "content": "<p>Works like a charm, thanks!</p>",
        "id": 193647800,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586591493
    },
    {
        "content": "<p>I hope this graph clarifies whatever you were wondering about :-)</p>",
        "id": 193647971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586591849
    },
    {
        "content": "<p>With the right <code>--from</code> and the right <code>--to</code>, yes, the tool is extremely informative.</p>",
        "id": 193648151,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586592066
    }
]