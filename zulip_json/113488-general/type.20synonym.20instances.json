[
    {
        "content": "<p>I am trying to define the (minimal) unitization of a non-unital<code>R</code>-algebra as a type synonym for <code>R × A</code>. But I can't seem to get Lean to disregard the <code>prod.has_mul</code> instance. What am I doing wrong here? (Note: the <code>simp</code> shows that Lean is using the wrong multiplication).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebra.unitization</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prod.has_mul</span> <span class=\"n\">prod.has_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod.add_comm_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod.module</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"bp\">•</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"bp\">•</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ r₁ • a₂ + r₂ • a₁ = 0</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275004986,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647019338
    },
    {
        "content": "<p>firstly, the first issue is that Lean elaborates the mul as a mul of the <code>prod</code> type anyways, if you look at the widget</p>",
        "id": 275005719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647019647
    },
    {
        "content": "<p>You might want to try making <code>unitization</code> irreducible.</p>",
        "id": 275005827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647019685
    },
    {
        "content": "<p>Why does it elaborate it as the <code>prod</code> version if I removed that instance? I thought I would probably make unitization irreducible at the end, when I'm done with everything I need. Is that the wrong approach?</p>",
        "id": 275006111,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647019804
    },
    {
        "content": "<p>You should use \"identity\" equivalences to explicitly mark the conversions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebra.unitization</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">A</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_unital_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_unitization</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_unitization</span> <span class=\"o\">:</span> <span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prod.has_mul</span> <span class=\"n\">prod.has_one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod.add_comm_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod.module</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"bp\">•</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_unitization</span> <span class=\"o\">(</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">to_unitization</span> <span class=\"o\">(</span><span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"n\">r₁</span> <span class=\"bp\">•</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 275006176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647019838
    },
    {
        "content": "<p>sorry, not just the <code>mul</code>, but like each individual element</p>",
        "id": 275006181,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647019844
    },
    {
        "content": "<p>I'm unsure why Lean does this but maybe if you set the expected type on the right, it will work out anyways (I _think_ Lean elaborates right to left, not sure)</p>",
        "id": 275006263,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647019881
    },
    {
        "content": "<p>wow, not even <code>((r₁, a₁) : unitization R A) * ((r₂, a₂): unitization R A) = ((r₁ * r₂, r₁ • a₂ + r₂ • a₁ + a₁ * a₂) : unitization R A)</code> works.</p>",
        "id": 275006406,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647019934
    },
    {
        "content": "<p>I tried before giving explicit types to all of them and it still had the same problem, but I'll use the identity equivalences.</p>",
        "id": 275006451,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647019955
    },
    {
        "content": "<p>yeah, that's why I was so confused.</p>",
        "id": 275006471,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647019970
    },
    {
        "content": "<p><code>((r₁, a₁) * (r₂, a₂): unitization R A) = (r₁ * r₂, r₁ • a₂ + r₂ • a₁ + a₁ * a₂)</code>  also works, but yikes</p>",
        "id": 275006499,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647019985
    },
    {
        "content": "<p>But still, why doesn't <code>local attribute [-instance]  prod.has_mul</code> help at all?</p>",
        "id": 275006535,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647020009
    },
    {
        "content": "<p>because there's <code>prod.distrib</code>, <code>prod.semiring</code>, <code>prod.non_assoc_semiring</code>.... and they all imply the <code>has_mul</code> instance</p>",
        "id": 275006608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647020043
    },
    {
        "content": "<p>This is probably unrelated, but generally people say \"don't make definitions using <code>λ ⟨r₁, a₁⟩ ⟨r₂, a₂⟩, ...</code>, instead use <code>{ mul := λ ra₁ ra₂, (ra₁.1 * ra₂.1, ra₁.1 • ra₂.2 + ra₂.1 • ra₁.2 + ra₁.2 * ra₂.2) }</code>\"</p>",
        "id": 275006621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647020046
    },
    {
        "content": "<p>you can also see this on the widgeet: <a href=\"/user_uploads/3121/yZpfstsTbSRZZETszHZqPLcq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yZpfstsTbSRZZETszHZqPLcq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yZpfstsTbSRZZETszHZqPLcq/image.png\"></a></div>",
        "id": 275006670,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647020080
    },
    {
        "content": "<p>I've never clicked on the highlight-on-hover in the widget panel <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> Can't believe I've been missing this.</p>",
        "id": 275006890,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647020189
    },
    {
        "content": "<p>The reason it's using the wrong product is a pretty common gotcha: <code>((r₁, a₁) : unitization R A)</code> does <em>not</em> mean \"make <code>(r₁, a₁)</code> have type <code>unitization R A</code>\", it means \"check that its type is defeq to <code>unitization R A</code> but don't actually change the type unless you need to solve a unification problem\"</p>",
        "id": 275007077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647020282
    },
    {
        "content": "<p>The reason the <code>(id (r₁, a₁) : unitization R A)</code> trick works  (this is a cheap fix by the way) is that this type checking sanity thing occurs before Lean decides which <code>\\alpha</code> it's going to use in <code>@id \\alpha x y</code>, so Lean is persuaded to let alpha be <code>unitization R A</code>.</p>",
        "id": 275007335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647020400
    },
    {
        "content": "<p>What's the reasoning behind \"don't make definitions using <code>λ ⟨r₁, a₁⟩ ⟨r₂, a₂⟩, ...,</code>\" ? Is it some kind of normal form issue?</p>",
        "id": 275008359,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647020836
    },
    {
        "content": "<p>try <code>#print</code> the definition</p>",
        "id": 275008534,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647020914
    },
    {
        "content": "<p>Mmm, <code>._match_2</code>. The approach I suggested unfolds much better.</p>",
        "id": 275009338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647021261
    },
    {
        "content": "<p>(although I will say that whenever I've done it <code>simp!</code> has dealt with this sort of stuff super well)</p>",
        "id": 275009689,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647021446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> If you apply it to something of the form <code>x + 3*y</code>, then Lean doesn't know how to turn that into <code>⟨r₁, a₁⟩</code> automatically. So the definition will not unfold. But it doesn't have problems with <code>(x + 3*y).1</code> and <code>(x + 3*y).2</code>.<br>\nThe reason is that <code>foo : X × Y</code> is not defeq to <code>⟨foo.1, foo.2⟩</code> in Lean 3. (I think in Lean 4 this problem is gone.)</p>",
        "id": 275010602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647021786
    }
]