[
    {
        "content": "<p>Anyone ever seen this before:</p>\n<div class=\"codehilite\"><pre><span></span>The nested exception contains the failure state for the decreasing tactic.\nnested exception message:\ntactic failed, there are no goals to be solved\nstate:\nno goals\n</pre></div>",
        "id": 175182890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567946013
    },
    {
        "content": "<p>Does it just mean that <code>dec_tac</code> in <code>using_well_founded</code> failed because a tactic inside expected goals when there weren't any, e.g. with an appeal to <code>refl</code> at the end when everything is gone already?</p>",
        "id": 175183175,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567946541
    },
    {
        "content": "<p>Hmm... I was getting this without an explicit <code>using_well_founded</code>!</p>",
        "id": 175183477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947075
    },
    {
        "content": "<p>Anyone, I seem to have found a workaround.</p>",
        "id": 175183480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947083
    },
    {
        "content": "<p>I would suspect that the culprit is something like the <code>tactic.dunfold_target</code>s in <code>init.meta.well_founded_tactics</code> (which run by default)</p>",
        "id": 175183553,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567947203
    },
    {
        "content": "<p>Probably there should be some <code>try</code>s wrapping some of that code</p>",
        "id": 175183559,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567947222
    },
    {
        "content": "<p>ah... I had just found that same file. :-)</p>",
        "id": 175183673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947387
    },
    {
        "content": "<p>But this is in core :-(</p>",
        "id": 175183679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947399
    },
    {
        "content": "<p>So sad.</p>",
        "id": 175183681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947403
    },
    {
        "content": "<p>indeed</p>",
        "id": 175183697,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567947462
    },
    {
        "content": "<p>3.5...</p>",
        "id": 175183775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567947590
    },
    {
        "content": "<p>I half typed a comment about that but thought it was a bit sassy</p>",
        "id": 175183821,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567947614
    },
    {
        "content": "<p>Ok, I've addressed this problem in <a href=\"https://github.com/leanprover-community/mathlib/issues/1419\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1419\">#1419</a>. It comes at a slight cost: having to add <code>using_well_founded { dec_tac := well_founded_tactics.default_dec_tac' }</code> to half a dozen proofs across mathlib, to used the patched version of <code>default_dec_tac</code>.</p>",
        "id": 175219901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568013478
    },
    {
        "content": "<p>I think it's worth it however, to let us make <code>simp</code> better at inequalities.</p>",
        "id": 175219940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568013490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think you could do better with the syntax by just defining a structure somewhere with a short name (e.g. <code>wf_tacs</code>) and type <code>well_founded_tactics</code>, equal to <code>{ dec_tac := well_founded_tactics.default_dec_tac' }</code>.</p>",
        "id": 175221105,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568015225
    },
    {
        "content": "<p>Then <code>using_well_founded wf_tacs</code> works. Depending on how much of a hack <code>using_well_founded</code> is in the parser (probably a lot), we could even define notation for that; maybe <code>using_well_founded'</code></p>",
        "id": 175221174,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568015310
    },
    {
        "content": "<p>Yeah, I have no idea how to do the notation thing, probably not possible.</p>",
        "id": 175221277,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568015455
    },
    {
        "content": "<p>Actually, I think with some work I could make it work if you wrote <code>recdef</code> instead of <code>def</code> for the recursive definition, but I don't know a way to make <code>using_well_founded wf_tacs</code> shorter.</p>",
        "id": 175221302,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568015495
    },
    {
        "content": "<p>Also, we should put <code>default_dec_tac'</code> in lean <code>3.5.0</code> right away</p>",
        "id": 175221372,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568015566
    },
    {
        "content": "<p>What is the procedure for adding patched tactics in 3.5.0? We both replace the old broken tactic, and add the primed version as an alias for backwards compatibility?</p>",
        "id": 175223447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568017977
    },
    {
        "content": "<p>Thanks for this syntax suggestion, I've added it to the PR now.</p>",
        "id": 175226757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568021746
    },
    {
        "content": "<p>I think maybe no-one has patched a tactic yet?<br>\nOr just, maybe they have fixed bugs like stuff crashing all of lean if you use it wrong.---not a useful enough fix to warrant a copy to mathlib.</p>",
        "id": 175226852,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568021824
    }
]