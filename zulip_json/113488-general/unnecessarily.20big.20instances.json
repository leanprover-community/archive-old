[
    {
        "content": "<p>I traced a performance problem in binported mathlib to a surprising idiom in lean3: many instances are unnecessarily big. For example, many of the <code>+</code> occurrences in the fields of <code>ring.mk</code> actually involve instances such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"n\">nsmul</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span> <span class=\"n\">neg</span> <span class=\"n\">sub</span>\n                      <span class=\"n\">sub_eq_add_neg</span>\n                      <span class=\"n\">gsmul</span>\n                      <span class=\"n\">gsmul_zero'</span>\n                      <span class=\"n\">gsmul_succ'</span>\n                      <span class=\"n\">gsmul_neg'</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>and some of the <code>+</code> occurences in <code>sub_neg_monoid.mk</code> are actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">add</span> <span class=\"n\">add_assoc</span> <span class=\"n\">zero</span> <span class=\"n\">zero_add</span> <span class=\"n\">add_zero</span> <span class=\"n\">nsmul</span> <span class=\"n\">nsmul_zero'</span> <span class=\"n\">nsmul_succ'</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and so forth. Note that although the lean3 kernel knows not to try the <code>self_opt</code> with the <code>to_*</code> instances, <code>type_context_old</code> doesn't actually check this flag, and so <code>is_def_eq</code> will do a lot more work than necessary and is only saved from constantly doing exponential work thanks to its <code>is_def_eq</code> cache (which has been removed from <code>MetaM</code> in lean4). I can address this during binport, but you may find that it speeds up lean3 if you eagerly reduce these before sending them to the kernel.</p>",
        "id": 245579388,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1625963632
    },
    {
        "content": "<p>This is caused by the way the (old?) structure command handles notations coming from parent instances inside the structure definition. If you have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_group</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then the constructor for <code>ring.mk</code> doesn't have an <code>add_group</code> instance available but needs one in order for the typeclass argument to <code>has_add.add</code> to be resolved. So there is some hackery to add what amounts to <code>letI add_group A := { add := add, ... }</code>  where <code>add</code> is the local constant provided as a hypothesis to <code>ring.mk</code>, and so the type of the field becomes <code>has_add.add (add_group.has_add { add := add, ... }) a b</code> instead of just <code>add a b</code>. If we were to write <code>add a b = add b a</code>, using the name <code>add</code> which is an inherited field from <code>add_group</code>, directly, then this wouldn't happen, but then we won't be able to use notation which kind of sucks</p>",
        "id": 245581813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625967952
    },
    {
        "content": "<p>In short, it's not something that mathlib can easily do something about - this would have to be addressed in the C++ where the hackery is</p>",
        "id": 245581876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625968057
    }
]