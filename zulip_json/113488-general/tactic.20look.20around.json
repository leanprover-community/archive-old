[
    {
        "content": "<p>Assume I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">magic</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 123344266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520331793
    },
    {
        "content": "<p>Can I write a tactic <code>magic</code> which knows that the instance I'm trying to create has type <code>foo</code> and the current field I'm working on is called <code>bar</code>?</p>",
        "id": 123344320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520331878
    },
    {
        "content": "<p>The motivation for this question is <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/indexed_product.lean</a> (look at all lines containing <code>funext</code>)</p>",
        "id": 123344599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520332432
    },
    {
        "content": "<p>I'm also interested in this question! As far as I understand, this isn't possible, but it seems quite desirable for tactics to be able to know the \"reason\" they have been invoked.</p>",
        "id": 123350559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520343923
    },
    {
        "content": "<p>The closest I can find is <code>decl_name</code> which tells you the name of the declaration being elaborated. I haven't tried but I'm not sure <code>resolve_name</code> would work on it to then get the type</p>",
        "id": 123362941,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520363082
    },
    {
        "content": "<p>What you could try is </p>\n<div class=\"codehilite\"><pre><span></span>instance : foo :=\nbegin magic ... end\n</pre></div>\n\n\n<p>Where magic acts a bit like <code>refine</code> and use <code>structure_fields</code> to apply <code>funext ; ...</code> for every fields for which it works and leaves the other ones untouched.</p>",
        "id": 123363136,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520363364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"simon.hudon@gmail.com\" data-user-id=\"110026\">@Simon Hudon</span>, <code>decl_name</code> works fine, but feeding that into <code>resolve_name</code> just gets an error message <code>identifier not found</code>. Oh well!</p>",
        "id": 123375425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1520383239
    },
    {
        "content": "<p>I'm not too surprised. I'm looking at that file right now and I think <code>target</code> is more promising.</p>",
        "id": 123375435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520383288
    },
    {
        "content": "<p>I think the tactic will look like:</p>\n<div class=\"codehilite\"><pre><span></span>instance monoid [∀ i, monoid $ f i] : monoid (Π i : I, f i) :=\nby lifted_instance [indexed_product.has_one,indexed_product.semigroup]\n</pre></div>",
        "id": 123375437,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520383311
    },
    {
        "content": "<p>Here's what I ended up with: <a href=\"https://github.com/PatrickMassot/lean-differential-topology/pull/1\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/pull/1\">https://github.com/PatrickMassot/lean-differential-topology/pull/1</a></p>",
        "id": 123376745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520385765
    },
    {
        "content": "<p>The Lean developers added <code>pexpr.mk_structure_instance</code> after I complained about it but I never got around to using it. I think it's a very nice feature.</p>",
        "id": 123376765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520385825
    }
]