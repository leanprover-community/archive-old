[
    {
        "content": "<p>Is there any reason we don't have this instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">semilattice_sup.to_directed_order</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">directed_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">directed</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>  <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span> <span class=\"n\">le_sup_right</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span><span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 253237627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631620773
    },
    {
        "content": "<p>Supposedly it's strictly more general than <code>linear_order.to_directed_order</code>. Maybe that causes defeqness problems with <code>lattice_of_linear_order</code>?</p>",
        "id": 253238180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631621005
    },
    {
        "content": "<p>I don't know the answer to your question, but you can check if there are defeqness problems just by testing if <code>rfl</code> proves that the two instances you are talking about are equal.</p>",
        "id": 253239069,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631621359
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n <span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_directed_order</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice.to_semilattice_sup</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lattice_of_linear_order</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">linear_order.to_directed_order</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 253239550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631621615
    },
    {
        "content": "<p>It has been tried see <a href=\"https://github.com/leanprover-community/mathlib/issues/7980\">#7980</a> <br>\nMaybe the semilattice sup case only wouldn't cause such problems.. feel free to try it!</p>",
        "id": 253249023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631625728
    },
    {
        "content": "<p>Oooh, nice.</p>",
        "id": 253249798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631626033
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/9200\">#9200</a>. Let's see what happens.</p>",
        "id": 253249842,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631626049
    },
    {
        "content": "<p>So I think that creates a problematic diamond?</p>",
        "id": 253860725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631963571
    },
    {
        "content": "<p>The current build fails because I have a <code>lower_adjoint</code> lemma that takes in <code>preorder</code>s of the form <code>partial_order.to_preorder</code>, but the <code>lower_adjoint coe</code> I'm trying to apply it to has <code>preorders</code> of the form <code>directed_order.to_preorder</code>. Is that possibly the problem?</p>",
        "id": 253860949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631963788
    },
    {
        "content": "<p>It's quite unclear to me whether having derived instances (eg <code>partial_order.to_preorder</code>) appearing in definitions is bad. Will a derived instance only match the same derived instance? I'd assume it happens all the time, so probably that's fine?</p>",
        "id": 253861049,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631963886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/semilattice_sup.20to.20directed_order/near/253860725\">said</a>:</p>\n<blockquote>\n<p>So I think that creates a problematic diamond?</p>\n</blockquote>\n<p>The diamond in question is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_partial_order</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">directed_order.to_preorder</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_directed_order</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 253861187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631964013
    },
    {
        "content": "<p>But it <em>is</em> defeq <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 253861198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631964032
    },
    {
        "content": "<p>Ahah! <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>, you used the wrong <code>lower_adjoint</code> lemma. I don't know how it still worked though. Probably some defeq abuse.<br>\nYou did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">closure_le</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">L</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">closure_le_closed_iff_le</span> <span class=\"n\">s</span> <span class=\"n\">S.closed</span>\n</code></pre></div>\n<p>but the goal type is <code>⇑(closure L) s ≤ S ↔ s ⊆ ↑S</code> while <code>lower_adjoint.closure_le_closed_iff_le s S.closed</code> has type <code>↑(⇑(closure L) s) ≤ ↑S ↔ s ≤ ↑S</code>. The correct thing here was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">closure_le</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"n\">L</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_subset</span> <span class=\"n\">s</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 253861892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631964818
    },
    {
        "content": "<p>Everything that fails here is because <code>directed_order.to_preorder</code> doesn't match with <code>partial_order.to_preorder</code> (even though they are defeq) when applying lemmas. Adding <code>semilattice_sup.to_directed_order</code> doesn't cause the problem. It just makes one path more direct.</p>",
        "id": 253877177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631980706
    }
]