[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">where</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">namespace [root namespace]</span>\n\n<span class=\"cm\">variables {R : Type u_1} {A : Type u_2} (S : subalgebra R A) [comm_semiring R] [semiring A] [algebra R A]</span>\n\n\n\n<span class=\"cm\">end [root namespace]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 205667388,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596262664
    },
    {
        "content": "<p>the printed combination is impossible because <code>S : subalgebra R A</code> depends on <code>algebra R A</code></p>",
        "id": 205667392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596262681
    },
    {
        "content": "<p>is this intentional (to print all the instances last)?</p>",
        "id": 205667429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596262688
    },
    {
        "content": "<p>I thought that the order was random</p>",
        "id": 205667590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596262844
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/37ab4263b452f08180e2a08f0020b7bc6cf08676/src/tactic/where.lean#L25-L31\">https://github.com/leanprover-community/mathlib/blob/37ab4263b452f08180e2a08f0020b7bc6cf08676/src/tactic/where.lean#L25-L31</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Assigns a priority to each binder for determining the order in which variables are traced. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">binder_priority</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">strict_implicit</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">aux_decl</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 205667673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596263019
    }
]