[
    {
        "content": "<p>I have a mutually inductive type of tree (which is not a type family) and I'm trying to define a recursive function on it but the termination checker seems to default to well founded recursion while it should be clear that structural recursion works. Is there a way to nudge Lean in the right direction?</p>",
        "id": 123064431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519773522
    },
    {
        "content": "<p>In case that helps, here's my type definition and my function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">proxy_v</span><span class=\"o\">,</span> <span class=\"n\">proxy_leaf_v</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">proxy_v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ret</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">action</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_leaf_v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yield</span> <span class=\"o\">{}</span>  <span class=\"o\">:</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_leaf_v</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">proxy_v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">await</span> <span class=\"o\">{}</span> <span class=\"o\">:</span>  <span class=\"n\">x</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_leaf_v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">think</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">proxy_leaf_v</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_v</span>\n<span class=\"k\">with</span> <span class=\"n\">proxy_leaf_v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hole</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_leaf_v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">more</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">proxy_v</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_leaf_v</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">proxy</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">proxy_v</span> <span class=\"o\">(</span><span class=\"n\">proxy_intl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">proxy_leaf</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">proxy_leaf_v</span> <span class=\"o\">(</span><span class=\"n\">proxy_intl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">to_intl_aux</span><span class=\"o\">,</span> <span class=\"n\">to_intl</span>\n<span class=\"k\">with</span> <span class=\"n\">to_intl_aux</span> <span class=\"o\">:</span> <span class=\"n\">proxy_leaf</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_intl</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">more</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_intl</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span> <span class=\"n\">to_intl</span> <span class=\"o\">:</span> <span class=\"n\">proxy</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_intl</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"n\">β</span> <span class=\"n\">cmd</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">cmd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">to_intl_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">o</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">to_intl_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">await</span> <span class=\"n\">o</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">await</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">to_intl_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">think</span> <span class=\"n\">cmd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">think</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">to_intl_aux</span> <span class=\"n\">cmd</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 123064513,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519773648
    },
    {
        "content": "<p>The equations compiler does not support mutual structural recursion <a href=\"https://github.com/leanprover/lean/blob/8a93d2770e5e4c349d761ded334f8fb7119e7082/src/library/equations_compiler/compiler.cpp#L52\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/8a93d2770e5e4c349d761ded334f8fb7119e7082/src/library/equations_compiler/compiler.cpp#L52\">https://github.com/leanprover/lean/blob/8a93d2770e5e4c349d761ded334f8fb7119e7082/src/library/equations_compiler/compiler.cpp#L52</a></p>",
        "id": 123064798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519774195
    },
    {
        "content": "<p>Arrg! <em>tears hair out</em></p>",
        "id": 123064927,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519774360
    },
    {
        "content": "<p>I have a feeling that recursion based on <code>sizeof</code> will be difficult because of that components of type <code>something -&gt; proxy_v</code></p>",
        "id": 123064943,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519774418
    },
    {
        "content": "<p>Any advice?</p>",
        "id": 123064944,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519774422
    },
    {
        "content": "<p>I don't think I've really used mutual recursion so far</p>",
        "id": 123065002,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519774556
    },
    {
        "content": "<p>Ok here's my next attempt: I'm inlining the function <code>to_intl_aux</code> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_intl</span> <span class=\"o\">:</span> <span class=\"n\">proxy</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">proxy_intl</span> <span class=\"n\">x</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y</span> <span class=\"n\">y&#39;</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"n\">β</span> <span class=\"n\">cmd</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">action</span> <span class=\"n\">cmd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">more</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_intl</span> <span class=\"n\">x</span>\n   <span class=\"kn\">end</span> <span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">yield</span> <span class=\"n\">o</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">more</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_intl</span> <span class=\"n\">x</span>\n   <span class=\"kn\">end</span> <span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">await</span> <span class=\"n\">o</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">await</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">more</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_intl</span> <span class=\"n\">x</span>\n   <span class=\"kn\">end</span> <span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">think</span> <span class=\"n\">cmd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cofix</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">proxy_node</span><span class=\"bp\">.</span><span class=\"n\">think</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">cmd</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">more</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_intl</span> <span class=\"n\">x</span>\n   <span class=\"kn\">end</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Again, it's falling back on well founded recursion and trying to prove that, in many cases <code>sizeof x &lt; 1</code></p>",
        "id": 123065237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519774923
    },
    {
        "content": "<p>Is there any theoretical limitation that prevents the use of structural recursion in mutually recursive functions?</p>",
        "id": 123065334,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519775148
    },
    {
        "content": "<p>Good news everyone! I made it work by hardcoding the details of the mutually inductive type</p>",
        "id": 123065741,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519775879
    },
    {
        "content": "<p>Is there any plan to make <code>io</code> universe polymorphic?</p>",
        "id": 123066278,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519776848
    },
    {
        "content": "<blockquote>\n<p>Is there any theoretical limitation that prevents the use of structural recursion in mutually recursive functions?</p>\n</blockquote>\n<p>I don't think so</p>",
        "id": 123083059,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519811417
    },
    {
        "content": "<blockquote>\n<p>Is there any plan to make <code>io</code> universe polymorphic?</p>\n</blockquote>\n<p>No plans, but I don't see why not</p>",
        "id": 123083113,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519811568
    },
    {
        "content": "<p>With regards to structural recursion, would it be any better if instead of having a <code>proxy_leaf_v</code> branch, I would just use <code>⊕</code>? Would that block my structural recursion then too?</p>",
        "id": 123152522,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519934914
    },
    {
        "content": "<p>Ah, that should probably work...?</p>",
        "id": 123157356,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519942196
    },
    {
        "content": "<p>Maybe that's better than coding my own mutually inductive type then. I'll give it a try</p>",
        "id": 123157415,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519942250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Did you ever make progress on this issue? Should mutual inductives in Lean 3 simply be avoided?</p>",
        "id": 125670451,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524660869
    },
    {
        "content": "<p>I ended up encoding my mutually inductive type by hand using an inductive family. I think that was the only way to do it.</p>",
        "id": 125670898,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524661752
    },
    {
        "content": "<p>It's been a few months since I touched that project but I'm wondering if the situation would improved if <code>has_well_founded</code> had two type parameter. When you're using polymorphic recursion, i.e. your function <code>foo</code> has type <code>foo : Π {α : Type*}, my_type α</code> and that your recursive call is on <code>my_type β</code>, I wonder if that would make well founded recursion work nonetheless</p>",
        "id": 125671041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524661950
    },
    {
        "content": "<p>Good to know, thanks. I'm not sure I understand your <code>has_well_founded</code> idea. Do you not have a (monomorphic) measure on your type?</p>",
        "id": 125672470,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524664228
    },
    {
        "content": "<p>Yes, the one based on <code>has_sizeof</code> should do.</p>",
        "id": 125672886,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524664905
    },
    {
        "content": "<p>What I mean is that <code>has_well_founded.r x y</code> might be the appropriate proof obligation in situations where <code>x : my_type α</code> and <code>y : my_type β</code> but that's not well typed. That where the only solution is structural recursion</p>",
        "id": 125673041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524665125
    },
    {
        "content": "<p>I think the current equation compiler may actually be... acceptable... if we had tactics that could deal with these usually very simple inequations. We don't currently, do we? :)</p>",
        "id": 125676961,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524670785
    },
    {
        "content": "<p>Are you suggesting that it could be fixed using a <code>using_well_founded</code> clause?</p>",
        "id": 125685933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524682309
    },
    {
        "content": "<p>Yes. The first issue is that the default wf tactic pair uses the sum of the measures of all arguments, which makes the inequations harder, or possibly even contradictory. So the first step may be a <code>rel_tac</code> tactic that uses the measure of only a single argument (probably the first one that is discriminated), which should generate inequations of the form <code>x &lt; ... + x + ... + 1</code>. It should not be too hard to write a <code>dec_tac</code> to solve those. With that we should get a wf tactic pair that proves all mutual structural recursions over a single argument.</p>",
        "id": 125695965,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524695679
    },
    {
        "content": "<p>Nice! Do you think there might be a way to integrate it to the default well founded recursion tactic?</p>",
        "id": 125696149,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524695926
    },
    {
        "content": "<p>Well, I hope that in the next version of Lean there will simply be native support for mutual structural recursion</p>",
        "id": 125696389,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1524696335
    }
]