[
    {
        "content": "<p>I think I'm misunderstanding something about derived/extended type classes. I'd like to work with finite groups, so I thought I'd define</p>\n<p><code>class fin_group (G: Type*) extends group G, fintype G</code></p>\n<p>but functions that, for example, rely on [fintype G] don't seem to be satisfied by providing a [fin_group G].</p>",
        "id": 215164294,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604102789
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with something that doesn't work?</p>",
        "id": 215165259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604103991
    },
    {
        "content": "<p><code>#check λ (G: Type*) [fin_group G], fintype.card G</code></p>\n<p>throws</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fin_group</span> <span class=\"n\">G</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 215165393,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604104202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">fin_group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fin_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 215165536,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604104360
    },
    {
        "content": "<p>What you wrote doesn't work because lean can't put the <code>fin_group</code> instance in the typeclass system when its under a lambda.</p>",
        "id": 215165562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604104392
    },
    {
        "content": "<p>This is a hack that gets around this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">fin_group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">fin_group</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 215165649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604104483
    },
    {
        "content": "<p>Hm. That's interesting. I'll play around with that, thanks.</p>",
        "id": 215165691,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1604104555
    }
]