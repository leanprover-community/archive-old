[
    {
        "content": "<p>suppose</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>Does the lean automatically implement something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>underneath?<br>\nI wondered because i found that i C.methodsOfA doesn't exist, whereas C.methodsOfC exist.</p>",
        "id": 305627910,
        "sender_full_name": "Erika Su",
        "timestamp": 1666507083
    },
    {
        "content": "<p>Is this lean 3 or lean 4?</p>",
        "id": 305629315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666508602
    },
    {
        "content": "<p>it's lean4.</p>",
        "id": 305632305,
        "sender_full_name": "Erika Su",
        "timestamp": 1666511168
    },
    {
        "content": "<p>Have a look at the output of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.WhatsNew</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">B</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>There's no coercion being generated, but instead instances are being provided. You just use the methods from <code>A</code> (i.e. as <code>A.method</code>, or just <code>method</code> after <code>open A</code>).</p>",
        "id": 305924265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666650905
    }
]