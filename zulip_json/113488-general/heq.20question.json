[
    {
        "content": "<p>I wanted to get affine scheme = scheme finished today, but I have run into a problem whereby restricting to an open subset is not quite the same as restricting to the same not-defeq version of trhe open subset</p>",
        "id": 126840954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842439
    },
    {
        "content": "<p>Here's a fairly minimised question</p>",
        "id": 126840994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842449
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">section</span> <span class=\"n\">oh_heq</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">HU1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HV1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HW1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HU2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HV2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HW2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Z</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">Fres</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"n\">HU1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">HV1</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">HW1</span> <span class=\"n\">k</span>\n<span class=\"bp\">==</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">U</span> <span class=\"n\">HU2</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">V</span> <span class=\"n\">HV2</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">W</span> <span class=\"n\">HW2</span> <span class=\"n\">k</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">oh_heq</span>\n</pre></div>",
        "id": 126840999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842460
    },
    {
        "content": "<p>Is that example true?</p>",
        "id": 126841002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842473
    },
    {
        "content": "<p>What's going on is that I am constructing an element of F(U cap V cap W)</p>",
        "id": 126841010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842508
    },
    {
        "content": "<p>and I'm constructing \"the same\" element of F(U cap (V cap W))</p>",
        "id": 126841012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842519
    },
    {
        "content": "<p>and I want them to be equal</p>",
        "id": 126841014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842531
    },
    {
        "content": "<p>or hequal</p>",
        "id": 126841015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842533
    },
    {
        "content": "<p>I feel like I ran into this sort of problem once before</p>",
        "id": 126841061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842567
    },
    {
        "content": "<p>and I tried some of the suggestions there</p>",
        "id": 126841062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842583
    },
    {
        "content": "<p>(before minimising)</p>",
        "id": 126841064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842590
    },
    {
        "content": "<p><code>congr</code> turns the goal into 29 goals, not all of which are true</p>",
        "id": 126841070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842616
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/dependent.20congr_arg.3F\" title=\"#narrow/stream/113488-general/topic/dependent.20congr_arg.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/dependent.20congr_arg.3F</a></p>",
        "id": 126841079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842663
    },
    {
        "content": "<p>was the old thread</p>",
        "id": 126841081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842666
    },
    {
        "content": "<p>simp fails to simplify</p>",
        "id": 126841123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842696
    },
    {
        "content": "<p>cc fails</p>",
        "id": 126841131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842728
    },
    {
        "content": "<p>hmm maybe I should tell simp that the two intersections are equal</p>",
        "id": 126841142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">Hinter</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hinter</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126841143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842793
    },
    {
        "content": "<p>fails to simplify</p>",
        "id": 126841144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842798
    },
    {
        "content": "<p>Is what I have written provable?</p>",
        "id": 126841196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842815
    },
    {
        "content": "<p>I don't understand how to use <code>subst</code></p>",
        "id": 126841200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526842848
    },
    {
        "content": "<p>Is there some crazy diamond thing going on?</p>",
        "id": 126841296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843047
    },
    {
        "content": "<p>Is the issue that I have put a ring structure on F (U cap V cap W)</p>",
        "id": 126841297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843064
    },
    {
        "content": "<p>and a ring structure on F(U cap (V cap W))</p>",
        "id": 126841298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843071
    },
    {
        "content": "<p>sorry -- a group structure</p>",
        "id": 126841300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843073
    },
    {
        "content": "<p>[in real life I have rings]</p>",
        "id": 126841301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843080
    },
    {
        "content": "<p>and a proof that U cap V cap W = U cap (V cap W)</p>",
        "id": 126841303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843101
    },
    {
        "content": "<p>but now there's the question as to whether the group structures get identified?</p>",
        "id": 126841310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843129
    },
    {
        "content": "<p>aargh</p>",
        "id": 126841311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843130
    },
    {
        "content": "<p>Am I in real trouble here??</p>",
        "id": 126841312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">Hinter</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span> <span class=\"n\">Hinter</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now three goals:</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) U HU1 i = Fres (U ∩ V ∩ W) U HU2 i</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) V HV1 j = Fres (U ∩ V ∩ W) V HV2 j</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) W HW1 k = Fres (U ∩ V ∩ W) W HW2 k</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126841406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843297
    },
    {
        "content": "<p>Possible progress</p>",
        "id": 126841408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843302
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">section</span> <span class=\"n\">oh_heq</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">HU1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HV1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HW1</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HU2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HV2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">HW2</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Z</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">Fres</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hsU</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsV</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsW</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">htU</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htV</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htW</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">U</span> <span class=\"n\">hsU</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">V</span> <span class=\"n\">hsV</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">W</span> <span class=\"n\">hsW</span> <span class=\"n\">k</span>\n<span class=\"bp\">==</span> <span class=\"n\">Fres</span> <span class=\"n\">t</span> <span class=\"n\">U</span> <span class=\"n\">htU</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">t</span> <span class=\"n\">V</span> <span class=\"n\">htV</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">t</span> <span class=\"n\">W</span> <span class=\"n\">htW</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hst</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Z</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">Fres</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"n\">HU1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">HV1</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">HW1</span> <span class=\"n\">k</span>\n<span class=\"bp\">==</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">U</span> <span class=\"n\">HU2</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">V</span> <span class=\"n\">HV2</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">W</span> <span class=\"n\">HW2</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">T</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">HU1</span> <span class=\"n\">HV1</span> <span class=\"n\">HW1</span> <span class=\"n\">HU2</span> <span class=\"n\">HV2</span> <span class=\"n\">HW2</span>\n</pre></div>\n\n\n<p>Trouble is <code>subst</code> doesn't work very well when the expression is more complicated than <code>s = t</code></p>",
        "id": 126841482,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526843483
    },
    {
        "content": "<p>aah we're back with subst</p>",
        "id": 126841531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843554
    },
    {
        "content": "<p>I wrote <code>subst [random_thing]</code> and I get an error I don't understand</p>",
        "id": 126841533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843570
    },
    {
        "content": "<p>so I gave up on subst very early</p>",
        "id": 126841539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843589
    },
    {
        "content": "<p>you're suggesting I persevere</p>",
        "id": 126841540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843594
    },
    {
        "content": "<p>My actual use case has rings and it's addition not multiplication</p>",
        "id": 126841542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843612
    },
    {
        "content": "<p>but it's very close to this</p>",
        "id": 126841543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843615
    },
    {
        "content": "<p>I used to use <code>eq.drec_on</code> with an explicit motive for things like this. That's really messy.</p>",
        "id": 126841544,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526843620
    },
    {
        "content": "<p>As you saw I tried eq.drec_on and made some progress</p>",
        "id": 126841547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843635
    },
    {
        "content": "<p>I perhaps need to learn how to use subst</p>",
        "id": 126841561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843642
    },
    {
        "content": "<p>You saw I proved <code>Hinter : U ∩ V ∩ W = U ∩ (V ∩ W)</code></p>",
        "id": 126841592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843704
    },
    {
        "content": "<p>but <code>subst Hinter</code>, which somehow feels like what I want to do, gives me <code>subst tactic failed, hypothesis 'Hinter' is not of the form (x = t) or (t = x)</code></p>",
        "id": 126841596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843728
    },
    {
        "content": "<p>That error message is really unhelpful</p>",
        "id": 126841597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843735
    },
    {
        "content": "<p>Does anyone know what it actually means?</p>",
        "id": 126841598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843742
    },
    {
        "content": "<p>Hinter looks like both of those forms to me :-)</p>",
        "id": 126841599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">Hinter</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span> <span class=\"n\">Hinter</span><span class=\"o\">,</span> <span class=\"c1\">-- subst tactic failed, hypothesis &#39;Hinter&#39; is not of the form (x = t) or (t = x)</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126841656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843873
    },
    {
        "content": "<p>How is that different to what you're doing?</p>",
        "id": 126841659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843880
    },
    {
        "content": "<p>I think it's basically that it has to be a really simple expression. <code>x = t</code> is fine, but anything like <code> f x = t</code> is not. I might be wrong about that.</p>",
        "id": 126841716,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526843947
    },
    {
        "content": "<p>You are telling me that subst won't work unless it literally is (one letter) = (one letter)?</p>",
        "id": 126841717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843949
    },
    {
        "content": "<p>Well at the end of the day you apparently proved it and I definitely didn't</p>",
        "id": 126841719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843969
    },
    {
        "content": "<p>I think so.</p>",
        "id": 126841721,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526843975
    },
    {
        "content": "<p><code>set_option trace.app_builder true</code></p>",
        "id": 126841722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843988
    },
    {
        "content": "<p>What was that all about?</p>",
        "id": 126841724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526843992
    },
    {
        "content": "<p>In this code your goal shouldn't typecheck</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">Hinter</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span> <span class=\"n\">Hinter</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now three goals:</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) U HU1 i = Fres (U ∩ V ∩ W) U HU2 i</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) V HV1 j = Fres (U ∩ V ∩ W) V HV2 j</span>\n<span class=\"c1\">-- ⊢ Fres (U ∩ V ∩ W) W HW1 k = Fres (U ∩ V ∩ W) W HW2 k</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126841775,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526844015
    },
    {
        "content": "<p>but it does.</p>",
        "id": 126841776,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526844020
    },
    {
        "content": "<blockquote>\n<p><code>set_option trace.app_builder true</code></p>\n</blockquote>\n<p>That was because something didn't work and the error message suggested I do that.</p>",
        "id": 126841792,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526844087
    },
    {
        "content": "<p>yeah that was a bit scary with the =</p>",
        "id": 126841794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526844092
    },
    {
        "content": "<p>but if X = Y then F X = F Y</p>",
        "id": 126841797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526844116
    },
    {
        "content": "<p>Thanks Chris</p>",
        "id": 126841855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526844218
    },
    {
        "content": "<p>Indeed your proof works</p>",
        "id": 126841858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526844239
    },
    {
        "content": "<p>I am currently mulling over having to translate it into the real life situation</p>",
        "id": 126841898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526844254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">Z</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">Fres</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"n\">HU1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">HV1</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">HW1</span> <span class=\"n\">k</span>\n<span class=\"bp\">==</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">U</span> <span class=\"n\">HU2</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">V</span> <span class=\"n\">HV2</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"n\">W</span> <span class=\"n\">HW2</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">Hinter</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"n\">HU1</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">HV1</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"n\">HW1</span> <span class=\"n\">k</span>\n<span class=\"bp\">==</span> <span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">HU1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">HV1</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">Fres</span> <span class=\"n\">s</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">HW1</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">Hinter</span> <span class=\"o\">(</span><span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126842102,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526844806
    },
    {
        "content": "<p>Probably the best solution is to get <code>subst</code> to work properly. Might be a good after exams project.</p>",
        "id": 126842149,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526844907
    },
    {
        "content": "<p>Thanks a lot for this Chris! I'll see if this method works in my actual file</p>",
        "id": 126843676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526848634
    },
    {
        "content": "<p>This works, but I'm not very happy with the result</p>\n<div class=\"codehilite\"><pre><span></span>theorem proof_irrel_heq {p q : Prop} (e : p = q) (hp : p) (hq : q) : hp == hq :=\nby subst q; congr\n\nexample (F : set α → Type) [∀ Z : set α, group (F Z)]\n(Fres : ∀ X Y : set α, X ⊆ Y → F Y → F X)\n(i : F U) (j : F V) (k : F W) :\nFres (U ∩ V ∩ W) U HU1 i * Fres (U ∩ V ∩ W) V HV1 j * Fres (U ∩ V ∩ W) W HW1 k\n== Fres (U ∩ (V ∩ W)) U HU2 i * Fres (U ∩ (V ∩ W)) V HV2 j * Fres (U ∩ (V ∩ W)) W HW2 k\n:=\nby have := set.inter_assoc U V W;\n   congr; try{assumption};\n   { apply proof_irrel_heq, congr, assumption }\n</pre></div>",
        "id": 126846183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526854423
    },
    {
        "content": "<p>Didn't I tell you partial functions give you headaches?</p>",
        "id": 126846280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526854641
    },
    {
        "content": "<p>Why do you have a <code>heq</code> goal in the first place?</p>",
        "id": 126846474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526855151
    },
    {
        "content": "<p>because of bad interface</p>",
        "id": 126846718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526855678
    },
    {
        "content": "<p>oh, there's a bug in <code>congr</code></p>",
        "id": 126846779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526855840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta def congr&#39; : parse small_nat? → tactic unit\n| none         := focus1 (assumption &lt;|&gt; (congr_core &gt;&gt;\n  all_goals (reflexivity &lt;|&gt; try (congr&#39; none))))\n| (some 0)     := failed\n| (some (n+1)) := focus1 (assumption &lt;|&gt; (congr_core &gt;&gt;\n  all_goals (reflexivity &lt;|&gt; try (congr&#39; (some n)))))\n</pre></div>\n\n\n<p>now the following proof works:</p>\n<div class=\"codehilite\"><pre><span></span>by have := set.inter_assoc U V W;\n   congr&#39;; apply proof_irrel_heq; congr&#39;\n</pre></div>",
        "id": 126846874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526856049
    },
    {
        "content": "<p>say what</p>",
        "id": 126846883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526856091
    },
    {
        "content": "<p>The congr tactic itself should read:</p>\n<div class=\"codehilite\"><pre><span></span>meta def congr : tactic unit :=\ndo focus1 (assumption &lt;|&gt; (congr_core &gt;&gt; all_goals (reflexivity &lt;|&gt; try congr)))\n</pre></div>\n\n\n<p>instead of </p>\n<div class=\"codehilite\"><pre><span></span>meta def congr : tactic unit :=\ndo focus1 (try assumption &gt;&gt; congr_core &gt;&gt; all_goals (try reflexivity &gt;&gt; try congr))\n</pre></div>",
        "id": 126846933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526856195
    },
    {
        "content": "<p>but I don't know if we are still doing bugfixes in 3.4.1</p>",
        "id": 126846934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526856216
    },
    {
        "content": "<p>so I made my own <code>congr</code> instead</p>",
        "id": 126846936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526856233
    },
    {
        "content": "<p>Not sure why those proof irrel goals appear though, they should also be taken care of by <code>congr</code></p>",
        "id": 126846990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526856359
    },
    {
        "content": "<blockquote>\n<p>Why do you have a <code>heq</code> goal in the first place?</p>\n</blockquote>\n<p>I thought of a way around it, in this case.</p>",
        "id": 126860293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886523
    },
    {
        "content": "<p>The reason was that I wanted to prove two structures were equal, but one depended on (U cap V cap W) and one on (U cap (V cap W)), because of the way the structures were made (I was trying to prove addition on a quotient type was associative).</p>",
        "id": 126860302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886581
    },
    {
        "content": "<p><code>congr</code> would go insane when presented with the problem (the first time I tried it, it turned my goal into 176 goals, no typo)</p>",
        "id": 126860350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886612
    },
    {
        "content": "<p>Kenny suggested a mk_inj solution and that led to the heqs</p>",
        "id": 126860351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886635
    },
    {
        "content": "<p>I remember Chris moaning about heqs before</p>",
        "id": 126860352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886649
    },
    {
        "content": "<p>But last night, 10 minutes after I switched my laptop off and started doing the dishes</p>",
        "id": 126860358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886668
    },
    {
        "content": "<p>I realised I could probably work around it on this occasion, by doing something a mathematican would never understand</p>",
        "id": 126860360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886695
    },
    {
        "content": "<p>I should restrict my section on U cap (V cap W) to a section on U cap V cap W :-)</p>",
        "id": 126860361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886712
    },
    {
        "content": "<p>This only changes it up to equivalence, which is OK for me</p>",
        "id": 126860401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886727
    },
    {
        "content": "<p>[terminology: a sheaf is, amongst other things, a map F : (open sets in a top space) -&gt; (rings) together with restriction maps F(U) -&gt; F(V) whenever V is a subset of U]</p>",
        "id": 126860409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886790
    },
    {
        "content": "<p>The concept of restricting to a subset which is non-definitionally-equal to the set you started with is alien to mathematics but it's exactly the crazy idea which will get me out of this hell</p>",
        "id": 126860447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is Chris right when he suggests that subst could do with some work? His solution seemed to be \"subst hst, where h : s = t, and then apply when s and t are more complicated\"</p>",
        "id": 126860467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886891
    },
    {
        "content": "<p>as opposed to \"subst [the thing we actually want to subst]\"</p>",
        "id": 126860471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886906
    },
    {
        "content": "<p>I could imagine that Chris might want to learn something about tactics over the summer. He has two months of being paid to work for me and can do anything</p>",
        "id": 126860477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886938
    },
    {
        "content": "<p>as long as his boss OK's it</p>",
        "id": 126860478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526886947
    },
    {
        "content": "<p>I was thinking of suggesting that myself. I assume you have some composition axioms, so it might be easiest to work with the restriction from (U/\\V)/\\W to U/\\V/\\W</p>",
        "id": 126860530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887027
    },
    {
        "content": "<p>It's not as crazy as it sounds; it's basically using (part of) the fact that (U/\\V)/\\W and U/\\V/\\W are \"isomorphic but not equal\" in the DTT sense</p>",
        "id": 126860540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887077
    },
    {
        "content": "<p>it helps to think like in category theory here</p>",
        "id": 126860581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887093
    },
    {
        "content": "<p><code>subst</code> is a very basic tactic. It does one thing, and does it well</p>",
        "id": 126860586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887118
    },
    {
        "content": "<p>you give it a hypothesis of the form <code>term = x</code> or <code>x = term</code>, and it will eliminate <code>x</code> in favor of <code>term</code> everywhere. This is rather restrictive, but the upside is that it <em>never</em> gets tripped up in dependencies like <code>rw</code> and <code>simp</code> can, because it is implemented purely using <code>eq.drec</code> and the variable restriction ensures that the motive is always type correct</p>",
        "id": 126860647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887274
    },
    {
        "content": "<p>Oh -- <code>x = t</code> means <code>x = term</code>? ;-)</p>",
        "id": 126860650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887304
    },
    {
        "content": "<p>(you can also say <code>subst x</code> instead of <code>subst h</code> when you have <code>h : x = term</code> in the context)</p>",
        "id": 126860680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887323
    },
    {
        "content": "<p>isomorphic but not equal is something I know well in the context where the underlying sets are different, but I am only just coming to terms with generalising the idea to situations where the DTTist thinks they're isomorphic and the ZFCist is blinded by this because they think they're equal :-)</p>",
        "id": 126860694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887370
    },
    {
        "content": "<p>Unrelated -- I see you wrote (U cap V) cap W v U cap V cap W</p>",
        "id": 126860699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887399
    },
    {
        "content": "<p>I claim that you mean U cap (V cap W) vs U cap V cap W</p>",
        "id": 126860701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887416
    },
    {
        "content": "<p>and actually this is minorly annoying</p>",
        "id": 126860702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887422
    },
    {
        "content": "<p>because my proofs that x is in U cap V cap W</p>",
        "id": 126860703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887428
    },
    {
        "content": "<p>all look like &lt;&lt;HU,HV&gt;,HW&gt;</p>",
        "id": 126860705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887438
    },
    {
        "content": "<p>ah, cap is left assoc?</p>",
        "id": 126860744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887450
    },
    {
        "content": "<p>Is this an oversight</p>",
        "id": 126860745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887451
    },
    {
        "content": "<p>I assume it is</p>",
        "id": 126860746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887462
    },
    {
        "content": "<p>and I already noticed that this was annoying</p>",
        "id": 126860747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887469
    },
    {
        "content": "<p>but I wasn't confident enough to know whether there are other reasons for this</p>",
        "id": 126860749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887483
    },
    {
        "content": "<p>I don't have any strong opinions on whether union and intersection are left or right assoc</p>",
        "id": 126860750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887492
    },
    {
        "content": "<p>all I knew is that my proofs were two characters longer than I wanted them to be</p>",
        "id": 126860751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887494
    },
    {
        "content": "<p>you would do if you had to keep writing &lt;&lt;HU,HV&gt;,HW&gt;</p>",
        "id": 126860758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887509
    },
    {
        "content": "<p>heh</p>",
        "id": 126860763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887526
    },
    {
        "content": "<p>maybe I should restrict to U cap (V cap W)</p>",
        "id": 126860765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887534
    },
    {
        "content": "<p>also lost two chars there</p>",
        "id": 126860766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887550
    },
    {
        "content": "<p>yeah but I only have to do that once</p>",
        "id": 126860768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887557
    },
    {
        "content": "<p>Something else I noticed</p>",
        "id": 126860810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887575
    },
    {
        "content": "<p>was that existsi is kind of dumb</p>",
        "id": 126860811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887583
    },
    {
        "content": "<p>I never use it tbh</p>",
        "id": 126860812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887593
    },
    {
        "content": "<p>existsi (&lt;&lt;HU,HV&gt;,HW&gt;)</p>",
        "id": 126860813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887594
    },
    {
        "content": "<p>lol no</p>",
        "id": 126860814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887599
    },
    {
        "content": "<p>\"That doesn't make sense\"</p>",
        "id": 126860816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887601
    },
    {
        "content": "<p>\"You have to tell me the type\"</p>",
        "id": 126860820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887607
    },
    {
        "content": "<p>\"because I don't know the type\"</p>",
        "id": 126860822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887614
    },
    {
        "content": "<p>\"even though the goal is \"there exists a proof that x is in U cap V cap W\"</p>",
        "id": 126860828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887630
    },
    {
        "content": "<p>\"</p>",
        "id": 126860829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887633
    },
    {
        "content": "<p>just use refine instead</p>",
        "id": 126860830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887643
    },
    {
        "content": "<p>What are your views on \"existsi _,tactic.swap\"</p>",
        "id": 126860833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887661
    },
    {
        "content": "<p>I think you once told me to avoid it</p>",
        "id": 126860834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887671
    },
    {
        "content": "<p>but it does exactly what I want sometimes</p>",
        "id": 126860835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887678
    },
    {
        "content": "<p>\"let's just remove the bloody exists symbol and make it a goal\"</p>",
        "id": 126860878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887699
    },
    {
        "content": "<p>For exploratory tactic writing it's fine I guess</p>",
        "id": 126860880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526887708
    },
    {
        "content": "<p>what about definitive scheme writing?</p>",
        "id": 126860881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887719
    },
    {
        "content": "<p>:-)</p>",
        "id": 126860884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887740
    },
    {
        "content": "<p>I guess it's all exploratory as far as I am concerned</p>",
        "id": 126860890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887747
    },
    {
        "content": "<p>OK back to work</p>",
        "id": 126860892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887757
    },
    {
        "content": "<p>Thanks for the comments as ever</p>",
        "id": 126860893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526887761
    },
    {
        "content": "<p>rofl</p>",
        "id": 126861159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888305
    },
    {
        "content": "<p>I proved associativity</p>",
        "id": 126861161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888310
    },
    {
        "content": "<p>end of proof looks like this</p>",
        "id": 126861163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888329
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">Ua</span> <span class=\"err\">∩</span> <span class=\"n\">Ub</span> <span class=\"err\">∩</span> <span class=\"n\">Uc</span><span class=\"o\">),</span> <span class=\"c1\">-- brainwave</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"bp\">⟨⟨</span><span class=\"n\">Hxa</span><span class=\"o\">,</span><span class=\"n\">Hxb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">Hxc</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ua</span> <span class=\"err\">∩</span> <span class=\"n\">Ub</span> <span class=\"err\">∩</span> <span class=\"n\">Uc</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">Hstandard</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Hstandard</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">BUa</span> <span class=\"n\">BUb</span><span class=\"o\">)</span> <span class=\"n\">BUc</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">Ua</span> <span class=\"err\">∩</span> <span class=\"n\">Ub</span> <span class=\"err\">∩</span> <span class=\"n\">Uc</span><span class=\"o\">)),</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">((</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter_assoc</span> <span class=\"n\">Ua</span> <span class=\"n\">Ub</span> <span class=\"n\">Uc</span> <span class=\"bp\">▸</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ua</span> <span class=\"err\">∩</span> <span class=\"n\">Ub</span> <span class=\"err\">∩</span> <span class=\"n\">Uc</span> <span class=\"err\">⊆</span> <span class=\"n\">Ua</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">Ub</span> <span class=\"err\">∩</span> <span class=\"n\">Uc</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf_of_rings_on_basis</span><span class=\"bp\">.</span><span class=\"n\">res_is_ring_morphism</span> <span class=\"n\">FPRB</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">presheaf_of_types_on_basis</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 126861164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888329
    },
    {
        "content": "<p>restrict to isomorphic set</p>",
        "id": 126861165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888338
    },
    {
        "content": "<p>prove some trivialities</p>",
        "id": 126861171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888361
    },
    {
        "content": "<p>a bit of rewriting</p>",
        "id": 126861173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888372
    },
    {
        "content": "<p>and apply associativity</p>",
        "id": 126861174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888377
    },
    {
        "content": "<p>not sure that proof is mathlib-ready</p>",
        "id": 126861177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888389
    },
    {
        "content": "<p>have you tried using <code>simp</code> instead of <code>rw</code>?</p>",
        "id": 126861289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526888562
    },
    {
        "content": "<p>simp insists on rewriting a+b+c as c+a+b</p>",
        "id": 126861295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888614
    },
    {
        "content": "<p>on exactly one side</p>",
        "id": 126861296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888617
    },
    {
        "content": "<p>so I never got it to do anything useful</p>",
        "id": 126861298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888623
    },
    {
        "content": "<p>anyway, this is a breakthrough because if I can prove add_assoc I can prove all the ring axioms</p>",
        "id": 126861347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888657
    },
    {
        "content": "<p>simp [add_assoc,more stuff] doesn't even do it when we're on the last line</p>",
        "id": 126861403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888779
    },
    {
        "content": "<p>My goal is too messy for simp</p>",
        "id": 126861404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888792
    },
    {
        "content": "<p>I need comp</p>",
        "id": 126861405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888794
    },
    {
        "content": "<p>lol</p>",
        "id": 126861413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888843
    },
    {
        "content": "<p><code>    simp [add_assoc,add_comm,(presheaf_of_rings_on_basis.res_is_ring_morphism FPRB _ _ _).map_add,presheaf_of_types_on_basis.Hcomp']</code> turns a goal which is closed by <code>rw add_assoc</code> to a goal which is closed by <code>rw add_comm</code></p>",
        "id": 126861419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888877
    },
    {
        "content": "<p>thanks simp</p>",
        "id": 126861421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888879
    },
    {
        "content": "<p>goal is <code>(FPRB.to_presheaf_of_types_on_basis).res _ _ _ sa + (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sb +\n      (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sc =\n    (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sa +\n      ((FPRB.to_presheaf_of_types_on_basis).res _ _ _ sb + (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sc)</code></p>",
        "id": 126861481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888985
    },
    {
        "content": "<p><code>    simp [add_assoc,add_comm],</code></p>",
        "id": 126861483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526888996
    },
    {
        "content": "<p>goal becomes <code>(FPRB.to_presheaf_of_types_on_basis).res _ _ _ sc + (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sb =\n    (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sb + (FPRB.to_presheaf_of_types_on_basis).res _ _ _ sc</code></p>",
        "id": 126861525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889010
    },
    {
        "content": "<p>Unless my eyes are deceiving me simp just turned add_assoc into add_comm</p>",
        "id": 126861527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889033
    },
    {
        "content": "<p>terms are in a comm_ring</p>",
        "id": 126861532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889063
    },
    {
        "content": "<p>obviously-minimised version doesn't exhibit the problem</p>",
        "id": 126861601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889205
    },
    {
        "content": "<p>sa,sb,sc all in different rings, the FPRB...res is mapping them down all into the same ring</p>",
        "id": 126861645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126861663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889340
    },
    {
        "content": "<p>works fine</p>",
        "id": 126861664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889342
    },
    {
        "content": "<p>so it's something in my <code>_</code>s</p>",
        "id": 126861705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889403
    },
    {
        "content": "<p>but at the end of the day I have a goal which can be cleared (without errors) either with <code>rw add_assoc</code> or <code>simp [add_assoc,add_comm],rw add_comm</code></p>",
        "id": 126861768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889502
    },
    {
        "content": "<p>hey stupid comm_ring, why are you asking me to prove a+0=a and 0+a=a and a+b=b+a?</p>",
        "id": 126861886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889724
    },
    {
        "content": "<p>well, I know why</p>",
        "id": 126861889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889731
    },
    {
        "content": "<p>but wouldn't it be nice if you didn't</p>",
        "id": 126861891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889737
    },
    {
        "content": "<p>I need a better comm_ring constructor I guess</p>",
        "id": 126861896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526889753
    },
    {
        "content": "<p><code>simp only</code> might help</p>",
        "id": 126863336,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526892945
    },
    {
        "content": "<p>you can always add <code>-add_comm</code> to your simp set to fix superfluous rewriting</p>",
        "id": 126863815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526893855
    },
    {
        "content": "<p><code>existsi (Ua ∩ Ua)</code></p>",
        "id": 126863881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894032
    },
    {
        "content": "<p>I can't believe I just wrote that</p>",
        "id": 126863882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894036
    },
    {
        "content": "<p>proving add_neg</p>",
        "id": 126863883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894038
    },
    {
        "content": "<p>just restrict everything down to there and it will be fine</p>",
        "id": 126863923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894050
    },
    {
        "content": "<p>Just to be sure: Kevin, do you know you can write <code>repeat { rw (presheaf_of_rings_on_basis.res_is_ring_morphism FPRB _ _ _).map_add, },</code>?</p>",
        "id": 126864002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894246
    },
    {
        "content": "<p>yeah, but I like watching the goal slowly decay</p>",
        "id": 126864156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894524
    },
    {
        "content": "<p>I just had to write <code> rw is_ring_hom.map_neg (FPRB.res _ _ _);try {apply_instance},</code></p>",
        "id": 126864162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894546
    },
    {
        "content": "<p>that surprised me.</p>",
        "id": 126864164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894549
    },
    {
        "content": "<p>I'm still puzzled each time I need to write <code>apply_instance</code>.</p>",
        "id": 126864168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894575
    },
    {
        "content": "<p>I don't understand why Lean doesn't do that for me</p>",
        "id": 126864171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894584
    },
    {
        "content": "<p>sometimes</p>",
        "id": 126864177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894590
    },
    {
        "content": "<p>I applied map_neg (the statement that a morphism of rings satisfies f(-x)=-f(x))</p>",
        "id": 126864179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894596
    },
    {
        "content": "<p>and all of a sudden it asked me if f was a ring hom and was the source a ring?</p>",
        "id": 126864185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894617
    },
    {
        "content": "<p>and apply_instance said yes</p>",
        "id": 126864191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894627
    },
    {
        "content": "<p>Exactly the kind of situation where I'm puzzled</p>",
        "id": 126864254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894737
    },
    {
        "content": "<p>Why isn't this automatic?</p>",
        "id": 126864257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894756
    },
    {
        "content": "<p>I dunno</p>",
        "id": 126864259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894760
    },
    {
        "content": "<p>I have two choices today</p>",
        "id": 126864298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894765
    },
    {
        "content": "<p>Is it a bug in the <code>apply</code> tactic?</p>",
        "id": 126864301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894767
    },
    {
        "content": "<p>I could spend a pleasant day verifying the axioms of a ring</p>",
        "id": 126864305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894775
    },
    {
        "content": "<p>(Or simp, refine,...)</p>",
        "id": 126864306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894784
    },
    {
        "content": "<p>or I could mark 100 proofs of various trivial lemmas about sup of a set of reals</p>",
        "id": 126864307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894796
    },
    {
        "content": "<p>and I am currently at home doing the former</p>",
        "id": 126864309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894819
    },
    {
        "content": "<p>and I'm already on add_comm</p>",
        "id": 126864312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894824
    },
    {
        "content": "<p>but I really should be doing the latter...</p>",
        "id": 126864318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894833
    },
    {
        "content": "<p>Too bad you can't quite hire Kenny or Chris to mark these exams for you...</p>",
        "id": 126864323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894853
    },
    {
        "content": "<p>I knew that once I managed add_assoc the rest would be trivial</p>",
        "id": 126864324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894853
    },
    {
        "content": "<p>but it takes time</p>",
        "id": 126864326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894856
    },
    {
        "content": "<p>rofl</p>",
        "id": 126864327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894858
    },
    {
        "content": "<p>I'm not sure if the university would be keen on students marking their own scripts</p>",
        "id": 126864330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894869
    },
    {
        "content": "<p>yep, universities tend to have all kind of stupid administrative rules like that</p>",
        "id": 126864384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894892
    },
    {
        "content": "<p>I am much keener on Lean marking their scripts</p>",
        "id": 126864386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894906
    },
    {
        "content": "<p>When they're done I might well write a blog post about how Lean does the question</p>",
        "id": 126864391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894921
    },
    {
        "content": "<p>Do you know which ones are from Kenny and Chris or are there anonymous?</p>",
        "id": 126864393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894925
    },
    {
        "content": "<p>yes and yes</p>",
        "id": 126864395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894930
    },
    {
        "content": "<p>Do you mean two out of 100 gave answer in Lean written on paper, and you guessed?</p>",
        "id": 126864410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526894967
    },
    {
        "content": "<p>I recognise their handwriting and I know enough about where they were sitting in the room to be able to work it out</p>",
        "id": 126864414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526894976
    },
    {
        "content": "<p>In fact I missed Chris' script for Q1</p>",
        "id": 126864474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895017
    },
    {
        "content": "<p>so I don't really know</p>",
        "id": 126864480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895022
    },
    {
        "content": "<p>but I did notice Kenny's, a combination of the handwriting, the way he presented the arguments, and the fact that I did unfortunately know that his script would be \"around this point in the pile\"</p>",
        "id": 126864487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895058
    },
    {
        "content": "<p>I could be wrong though</p>",
        "id": 126864489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895063
    },
    {
        "content": "<p>I have no formal proof that it was Kenny's</p>",
        "id": 126864497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895068
    },
    {
        "content": "<p>In fact it was the fact that I recognised Kenny's handwriting that I realised I must have missed Chris' script</p>",
        "id": 126864505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895096
    },
    {
        "content": "<p>where did you get my handwriting sample from?</p>",
        "id": 126864552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526895130
    },
    {
        "content": "<p>You have sent me lots of handwriting in private zulip chats</p>",
        "id": 126864557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895153
    },
    {
        "content": "<p>and I am sort of a bit weird about handwriting for some reason</p>",
        "id": 126864558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895160
    },
    {
        "content": "<p>I am quite good at recognising it</p>",
        "id": 126864561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895171
    },
    {
        "content": "<p>very interesting</p>",
        "id": 126864564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526895180
    },
    {
        "content": "<p>I guess I should be clear: I have no way of verifying that the script I strongly suspected was Kenny's, was Kenny's</p>",
        "id": 126864580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895199
    },
    {
        "content": "<p>which of course is a good thing</p>",
        "id": 126864629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895255
    },
    {
        "content": "<p>how many questions have you marked?</p>",
        "id": 126864633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526895278
    },
    {
        "content": "<p>1.3</p>",
        "id": 126864634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895283
    },
    {
        "content": "<p>did you mark the sup(A+B)=sup(A)+sup(B)?</p>",
        "id": 126864638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526895297
    },
    {
        "content": "<p>doing that one today</p>",
        "id": 126864644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895306
    },
    {
        "content": "<p>or more of it</p>",
        "id": 126864647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895310
    },
    {
        "content": "<p>I see</p>",
        "id": 126864648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526895311
    },
    {
        "content": "<p>Hope to get another 0.3 of it done</p>",
        "id": 126864650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895319
    },
    {
        "content": "<p>indeed I am just off now</p>",
        "id": 126864661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526895359
    },
    {
        "content": "<p>Sometimes you get those <code>apply_instance</code> goals when you use <code>apply</code> with underscores, due to some strange elaboration order stuff. Essentially those goals are unknown at the time when instance resolution normally happens</p>",
        "id": 126864704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526895378
    },
    {
        "content": "<p>using <code>refine</code> instead may help</p>",
        "id": 126864707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526895391
    },
    {
        "content": "<p>Do you get a student teacher collusion law suit if some other student realize Kenny answered \"This function is continuous because it goes from R to R\" as a signal to trigger special marking?</p>",
        "id": 126865634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897346
    },
    {
        "content": "<p>I always appreciated automated marking, which you can do for programming assignments (and Lean, too!). Instant feedback if the grader is set up correctly, less need to attend office hours in order to discover that \"one special trick professors want you to know about\"</p>",
        "id": 126865906,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526897941
    },
    {
        "content": "<p>What do you use for automated marking?</p>",
        "id": 126865914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526897976
    },
    {
        "content": "<p>Our CS department cobbled together a web server and a bunch of Python scripts</p>",
        "id": 126865978,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526898093
    },
    {
        "content": "<p>Is there anything public?</p>",
        "id": 126865979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526898111
    },
    {
        "content": "<p>hmm, doubt it. shell scripts aren't the sort of thing that people would even think to release</p>",
        "id": 126866043,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526898209
    },
    {
        "content": "<p>they all tend to be custom solutions based on whatever your institution's favorite content management system is... for example, this one links with Canvas: <a href=\"https://github.com/arthuraa/sf-grader\" target=\"_blank\" title=\"https://github.com/arthuraa/sf-grader\">https://github.com/arthuraa/sf-grader</a></p>",
        "id": 126866277,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526898616
    },
    {
        "content": "<blockquote>\n<p>Do you know which ones are from Kenny and Chris or are there anonymous?</p>\n</blockquote>\n<p>OK so I asked some question about sups. I got about 80 correct solutions, of which 79 were a proof by contradiction, and one was constructive. And in Kenny's handwriting. And using the kind of pen he uses. But really -- it is anonymous!</p>",
        "id": 127092646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527270009
    },
    {
        "content": "<p>You can tell the difference between pens? Does he have a fountain pen?</p>",
        "id": 127092713,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527270174
    },
    {
        "content": "<p>Perhaps Kenny uses one of those rainbow pencils.</p>",
        "id": 127092857,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1527270385
    }
]