[
    {
        "content": "<p>I am mystified by this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">z</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After the definition of <code>q</code>, I get </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>So <code>q</code> has the type that I said it should have, but for some reason Lean expects it to have a different type?</p>",
        "id": 157611922,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1549378535
    },
    {
        "content": "<p>You have stumbled across a highly dubious Lean feature.</p>",
        "id": 157612066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549378666
    },
    {
        "content": "<p>In tactic mode (only), <code>q : ℕ → (fin a.succ)</code> means <code>q : Π (a : ℕ), (fin a.succ)</code>.</p>",
        "id": 157612175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549378737
    },
    {
        "content": "<p>In other words <code>→</code> is expanded to a Pi type using the fixed variable name <code>a</code>.</p>",
        "id": 157612237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549378779
    },
    {
        "content": "<p>'''''''''''feature'''''''''''</p>",
        "id": 157612495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549378972
    },
    {
        "content": "<p>Thanks.  So I see that this works instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">z</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157612664,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1549379129
    },
    {
        "content": "<p>What did I tell you about making definitions using tactic mode Neil??</p>",
        "id": 157623402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549387944
    },
    {
        "content": "<p>[PS I was doing this myself earlier today :-)]</p>",
        "id": 157623415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549387957
    }
]