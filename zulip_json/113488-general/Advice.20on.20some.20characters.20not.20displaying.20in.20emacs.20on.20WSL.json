[
    {
        "content": "<p>I'm wondering if anyone might have advice on some characters not getting displayed correctly. (I assume) I'm using lean4-mode in emacs on WSL. I'm assuming I want new fonts or something?</p>\n<p><a href=\"/user_uploads/3121/K5aVKDONzHg5n9hsUj9pflrR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/K5aVKDONzHg5n9hsUj9pflrR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/K5aVKDONzHg5n9hsUj9pflrR/image.png\"></a></div>",
        "id": 250010479,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629390428
    },
    {
        "content": "<p>Which characters are you assuming incorrect there?</p>",
        "id": 250010728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629390557
    },
    {
        "content": "<p>Maybe you were expecting to see the output of <code>#check @List.map</code>?</p>",
        "id": 250011173,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629390774
    },
    {
        "content": "<p>The question marks are metavariables, they can (in this case) be instantiated for any type.</p>",
        "id": 250011272,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629390834
    },
    {
        "content": "<p>I assumed the ?m.3 and ?m.4 were improperly displayed unicode characters. But it sounds like I was wrong?</p>",
        "id": 250013324,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629391829
    },
    {
        "content": "<p>As Floris said, they stand for metavariables. Lean hasn't determined the type to put there. Giving it more information (with explicit type annotation, or by just using it for something) will make them go away.</p>",
        "id": 250013930,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629392078
    },
    {
        "content": "<p>Following Floris's suggestion, you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List.map</span>\n<span class=\"c1\">-- List.map : {α : Type u_1} → {β : Type u_2} → (α → β) → List α → List β</span>\n</code></pre></div>\n<p>Without the <code>@</code>, Lean fills in all the implicit arguments (the ones indicated with curly braces) with metavariables.  These are solved by the elaborator through unification.  It's not a problem for <code>#check</code>, but well-typed programs need to have no metavariables.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span>\n<span class=\"c\">/-</span><span class=\"cm\"> output:</span>\n<span class=\"cm\">don't know how to synthesize implicit argument</span>\n<span class=\"cm\">  @List.map ?m.870 ?m.871</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ Type u_2</span>\n<span class=\"cm\">tests.lean:18:11</span>\n<span class=\"cm\">don't know how to synthesize implicit argument</span>\n<span class=\"cm\">  @List.map ?m.870 ?m.871</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ Type u_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 250014295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629392257
    },
    {
        "content": "<p>Thanks for clarification. :) In the spirit of just giving one datapoint, I first encountered that here: <a href=\"https://leanprover.github.io/lean4/doc/namespaces.html\">https://leanprover.github.io/lean4/doc/namespaces.html</a> and I haven't read about metavariables yet, which is why I was confused. I expect that if the example had shown the expected output, I would not have been confused. But again, just one datapoint.</p>",
        "id": 250014313,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629392270
    },
    {
        "content": "<p>Let me know if a PR adding the expected output to that page of the docs would be welcome. I have important things I'm procrastinating on. :-)</p>",
        "id": 250014875,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629392492
    },
    {
        "content": "<p>Given that the book says it will discuss the types later, I think showing the output including a bunch of metavariables, or using <code>#check @List.map</code> with a weird unexplained sigil in the middle, would not flow very well in the context of the introduction</p>",
        "id": 250015558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629392786
    },
    {
        "content": "<p>I think the only relevant bit of information to take out of that test is that <code>#check List.map</code> succeeds while <code>#check map</code> fails</p>",
        "id": 250015694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629392865
    },
    {
        "content": "<p>perhaps <code>#print List.map</code> would be better to show this</p>",
        "id": 250015872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629392931
    },
    {
        "content": "<p>That's fair, but it already shows <code>#check @List.cons</code> in 4.5 earlier in the manual. I agree <code>#print  List.map</code> might do a better job.</p>",
        "id": 250015953,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629392975
    },
    {
        "content": "<p>Better job of demonstrating what <code>open</code> does without raising a bunch of other questions that is.</p>",
        "id": 250016322,
        "sender_full_name": "Alex Zani",
        "timestamp": 1629393142
    }
]