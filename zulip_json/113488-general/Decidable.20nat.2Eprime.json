[
    {
        "content": "<p>I implemented a decidable instance for <code>nat.prime</code>. Do we already have such instance that I'm not aware of? If not, should I open a PR?</p>",
        "id": 269468576,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643225618
    },
    {
        "content": "<p>By decidable, I mean solvable using <code>dec_trivial</code>, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"mi\">7</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 269469351,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643225919
    },
    {
        "content": "<p>I'm pretty sure it's there already. There's also a <code>norm_num</code> extension for proving primality</p>",
        "id": 269469668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643226061
    },
    {
        "content": "<p>there's actually two: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decidable_prime\">docs#nat.decidable_prime</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decidable_prime1\">docs#nat.decidable_prime1</a></p>",
        "id": 269469733,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643226086
    },
    {
        "content": "<p>The reason why <code>decidable_prime_1</code> is not the default instance (and similar for other decidability instances like it) is because it is slower to perform computations like this than <code>norm_num</code> style proofs. You will very quickly run into the problem that direct computation on <code>nat</code> using this method works on unary numerals and so inevitably hits a wall at not-very-large numbers. <code>decidable_prime</code> is a more useful instance because it computes in <code>#eval</code> quickly (and in fact it is used in <code>norm_num</code> internally)</p>",
        "id": 269471365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643226770
    },
    {
        "content": "<p>If you really want to do computation in the kernel you should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/num\">docs#num</a> instead of <code>nat</code></p>",
        "id": 269471422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643226798
    },
    {
        "content": "<p>There is in fact an instance for primality over num as well: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/num.decidable_prime\">docs#num.decidable_prime</a></p>",
        "id": 269471478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643226830
    },
    {
        "content": "<p>Oh, I didn't look at the docs for <code>nat.prime</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>.  I just tried <code>dec_trivial</code> and since it failed, I thought we don't even have a decidability instance, so I wrote one. But it was a fun excercise anyway. My instance timeouts for numbers &gt;100, so it's pretty much useless.</p>",
        "id": 269472250,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643227126
    },
    {
        "content": "<p>TIL that <code>norm_num</code> can also prove primality. That's interesting.</p>",
        "id": 269472314,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643227154
    },
    {
        "content": "<p>Here's how it happened: <a href=\"https://xenaproject.wordpress.com/2018/07/26/617-is-prime/\">https://xenaproject.wordpress.com/2018/07/26/617-is-prime/</a></p>",
        "id": 269495172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643237678
    }
]