[
    {
        "content": "<p>consider this mwe:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">my_union</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asd</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">my_union</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">my_union</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">asd</span>\n</code></pre></div>\n</div></div>\n<p>trying to view the tactic state, you get a weird error, but the proof seems to compile (I haven't checked it with <code>trepplein</code> or anything yet.</p>\n<p><a href=\"/user_uploads/3121/dLSHH8YtuNaLJofIV18vLU0V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dLSHH8YtuNaLJofIV18vLU0V/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dLSHH8YtuNaLJofIV18vLU0V/image.png\"></a></div>",
        "id": 271467671,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644515327
    },
    {
        "content": "<p>Does this look like <a href=\"https://github.com/leanprover-community/lean/issues/673\">https://github.com/leanprover-community/lean/issues/673</a> ?</p>",
        "id": 271467746,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644515361
    },
    {
        "content": "<p>yep, precisely like it</p>",
        "id": 271467788,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644515382
    },
    {
        "content": "<p>although the mwes look fairly different, and there's no <code>sorry</code> like in Mario's example</p>",
        "id": 271467957,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644515434
    },
    {
        "content": "<p>oh man, you were going to get a point for that (new error that nobody saw before), but Mario gets it instead</p>",
        "id": 271468729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644515755
    },
    {
        "content": "<p>Is the workaround of switching to plain text mode acceptable for you?  I'm not sure I want to spend time debugging this in Lean 3.</p>",
        "id": 271470637,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644516436
    },
    {
        "content": "<p>the <code>sorry</code> is so that it works without mathlib</p>",
        "id": 271471122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644516633
    },
    {
        "content": "<p>I like your MWE better than mine though, since it doesn't involve well founded recursion</p>",
        "id": 271471302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644516710
    },
    {
        "content": "<p>oh it's fine, just thought I would post it; I'm happy there was a workaround! this doesn't happen if you <code>simp only</code> the term, though, which is worth knowing</p>",
        "id": 271472165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644517049
    },
    {
        "content": "<p>Minimized as far as possible within lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tagged_format</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"c1\">--                                vvvvv-- zoom in to this subexpr</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n  <span class=\"n\">ts</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.read</span><span class=\"o\">,</span>\n  <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"bp\">$</span> <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"bp\">$</span> <span class=\"n\">compose</span> <span class=\"n\">_have_this</span> <span class=\"bp\">$</span> <span class=\"n\">compose</span> <span class=\"n\">_colon</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_sorry</span><span class=\"o\">)</span> <span class=\"n\">_true</span>\n    <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">tactic_state.pp_tagged</span> <span class=\"n\">ts</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"n\">nest</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">compose</span> <span class=\"n\">_nl</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_comma</span><span class=\"o\">)</span> <span class=\"n\">_space</span><span class=\"o\">)</span> <span class=\"n\">_from_sorry</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">tag</span> <span class=\"o\">([</span><span class=\"n\">coord</span><span class=\"o\">],</span> <span class=\"n\">_sorry_expr</span><span class=\"o\">)</span> <span class=\"n\">_sorry</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- case on coord causes VM bug</span>\n  <span class=\"k\">match</span> <span class=\"n\">coord</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr.coord.app_arg</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271485246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644522837
    },
    {
        "content": "<p>that is, it appears <code>tactic_state.pp_tagged</code> does not know how to express the subexpression coordinate corresponding to the type of a <code>have</code> or <code>suffices</code> expression</p>",
        "id": 271485415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644522912
    },
    {
        "content": "<p>It also seems pretty sketchy that the lean inductive <code>expr.coord</code> has <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr_address.lean#L18-L22\">9 constructors</a> but the corresponding C++ type has <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/expr_address.h#L15-L22\">11 constructors</a>, with the two extra being <code>mvar_type, local_const_type</code> which sound like they shouldn't be escaping but should probably exist in the lean type anyway</p>",
        "id": 271487088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644523641
    },
    {
        "content": "<p>Turns out the only use of those constructors was in pp output for <code>have</code> statements, so... I just removed them and it worked</p>",
        "id": 271492298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644526299
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/682\">lean#682</a></p>",
        "id": 271492321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644526311
    },
    {
        "content": "<p>Always nice when the fix is to delete code.</p>",
        "id": 271492769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644526500
    },
    {
        "content": "<p>TIL that <code>suffices</code> doesn't actually leave any trace in the term, unlike <code>have</code>, so when you print it back you get a lambda</p>",
        "id": 271493589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644526843
    },
    {
        "content": "<p>I was looking for a <code>pp_suffices</code> in the code but there isn't any</p>",
        "id": 271493630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644526866
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- have x : true, from trivial, trivial : true</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">suffices</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- (λ (x : true), trivial) trivial : true</span>\n</code></pre></div>",
        "id": 271493807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644526950
    },
    {
        "content": "<p>I remember there being some trace in the term before, it's how i implemented <a href=\"https://github.com/leanprover-community/mathlib/blob/8c60a9270b26c63b1492845d39cd8258418fa64a/src/tactic/lint/misc.lean#L407\">https://github.com/leanprover-community/mathlib/blob/8c60a9270b26c63b1492845d39cd8258418fa64a/src/tactic/lint/misc.lean#L407</a> did that now change, or is it just not printed?</p>",
        "id": 271538767,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644563602
    },
    {
        "content": "<p>hm, you are not wrong... it looks like there is an annotation but it is in a different place than <code>have</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">bool.ff</span><span class=\"o\">,</span> <span class=\"n\">bool.tt</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e.to_raw_fmt</span>\n<span class=\"c1\">-- (app [macro annotation (lam x default (const bool []) [macro annotation (const bool.tt [])])] (const bool.ff []))</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">bool.ff</span><span class=\"o\">,</span> <span class=\"n\">bool.tt</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e.to_raw_fmt</span>\n<span class=\"c1\">-- [macro annotation (app (lam x default (const bool []) (const bool.ff [])) (const bool.tt []))]</span>\n</code></pre></div>",
        "id": 271540019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644564818
    }
]