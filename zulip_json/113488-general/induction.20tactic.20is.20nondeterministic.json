[
    {
        "content": "<p>I've run into a pair of nasty issues here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">add_monoid_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[recursor 6]</span>  <span class=\"c1\">-- comment / delete this line with a single edit action</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">induction_on</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"n\">g</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">hadd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp.induction_linear</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hadd</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hsmul</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">hsmul</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">to_add_of_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp.smul_single'</span><span class=\"o\">,</span> <span class=\"n\">of_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">add_monoid_algebra.induction_on</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">add_monoid_algebra</span>\n</code></pre></div>\n<p>The first nasty issue is that the <code>induction</code> tactic has swapped <code>k</code> and <code>G</code>, and gotten its types in a muddle.</p>\n<p>To reproduce the non-determinism:</p>\n<ol>\n<li>Paste the code into a fresh editor pane and restart the lean server. A nasty type error appears under the word <code>example</code></li>\n<li>Comment out line 7 with Ctrl+/ (so as to do so in a single keystroke). The error remains where it is</li>\n<li>Type a single space somewhere in the file. The error moves to the <code>induction</code> tactic`.</li>\n</ol>",
        "id": 236803208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619771813
    },
    {
        "content": "<p>The first issue goes away if I use <code>attribute [irreducible] add_monoid_algebra</code> before <code>example</code></p>",
        "id": 236803448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619771966
    },
    {
        "content": "<p>Very nice -- I can reproduce.</p>",
        "id": 236807812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619774573
    },
    {
        "content": "<p>PS ctrl+X deletes the line with a single keystroke and ctrl-Z brings it back (and makes the error jump)</p>",
        "id": 236807913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619774640
    },
    {
        "content": "<p>Just alternating between C-x and C-z makes the error jump around randomly</p>",
        "id": 236808098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619774721
    },
    {
        "content": "<p>I only get the following error, even after commenting it out and un again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">major</span> <span class=\"n\">premise</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">ill</span><span class=\"bp\">-</span><span class=\"n\">formed</span>\n</code></pre></div>",
        "id": 236808339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619774874
    },
    {
        "content": "<p>I sometimes have to do it about 10 times before there's a switch. The other error is with the red squiggle on <code>example</code> and error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">induction_on</span> <span class=\"n\">G</span> <span class=\"n\">k</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">k</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"n\">k</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">k</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"n\">k</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_zero</span> <span class=\"n\">k</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">semiring</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>(VS Code 1.55.2, lean and lean4 extensions installed, lean extension 0.16.26, ubuntu linux)</p>",
        "id": 236808820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619775140
    },
    {
        "content": "<p>On command line I always seem to get <code>induction tactic failed</code></p>",
        "id": 236809301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619775397
    },
    {
        "content": "<p>Continually restarting Lean in VS Code I consistently get <code>type mismatch at application</code></p>",
        "id": 236809432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619775483
    },
    {
        "content": "<p>I assume there's some stale cache sticking around on the lean server that doesn't make it to the olean files, which would explain why the command line is deterministic?</p>",
        "id": 236809565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619775576
    },
    {
        "content": "<p>(this is with the [recursor 6] line)</p>",
        "id": 236809566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619775576
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/569\">lean#569</a> <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[recursor 4]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar.induction_on</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">bar.induction_on</span>\n</code></pre></div>",
        "id": 236812525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619777354
    }
]