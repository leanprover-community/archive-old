[
    {
        "content": "<p>I'm in the process of showing that a particular element of a (generalised) quaternion group has order 4. It is of course easy to show that the order divides four by just checking that the element to the power of 4 is equal to one. I'd now like to deduce that it is equal to 4 by showing that it is not 1 or 2 (which should be straightforward). I would use the following (but feel free to suggest a better strategy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What is an easy way to prove this?</p>",
        "id": 230219618,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615706140
    },
    {
        "content": "<p>Does <code>dec_trivial</code> do it? If not I'd be tempted to prove it's &lt;= 4 using the library and then use the natural case bash tactic <code>interval_cases</code></p>",
        "id": 230223410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615710498
    },
    {
        "content": "<p>you need to revert <code>m</code> and <code>h</code> before doing <code>dec_trivial</code></p>",
        "id": 230223512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615710637
    },
    {
        "content": "<p><code>revert h, revert m, dec_trivial</code> gives the error <code>failed to synthesize type class instance for decidable (∀ (m : ℕ), m ∣ 4 → m = 1 ∨ m = 2 ∨ m = 4)</code></p>",
        "id": 230224749,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615712207
    },
    {
        "content": "<p>Hard luck. The correct thing to do is to show that <code>dvd</code> is decidable and/or fill in the hole in the library that is stopping Lean from figuring out it's decidable. Or just go with the case bash</p>",
        "id": 230224824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615712334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- prove 3 doesn't divide 4 somehow</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230225201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615712770
    },
    {
        "content": "<p>Lean is not a very good \"computer\" right now because we didn't put much effort into doing explicit calculations.</p>",
        "id": 230225217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615712800
    },
    {
        "content": "<p>Ok, I'll do interval_cases then for now. Thanks for the input Kenny and Kevin.</p>",
        "id": 230225344,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615712951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230231379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615720290
    },
    {
        "content": "<p><code>∀ (m : ℕ), m ≤ 4 → m ∣ 4 → m = 1 ∨ m = 2 ∨ m = 4</code> is decidable</p>",
        "id": 230231397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615720318
    },
    {
        "content": "<p>because Lean knows that the first hypothesis makes the cases finite</p>",
        "id": 230231445,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1615720335
    },
    {
        "content": "<p>But shouldn't lean know that m dvd succ 3 makes the cases finite?</p>",
        "id": 230234389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615723632
    },
    {
        "content": "<p>there isn't an instance for that</p>",
        "id": 230235090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615724441
    },
    {
        "content": "<p>lean knows that <code>\\forall x, x &lt;= n -&gt; P x</code> is decidable if <code>P</code> is, and there is a lemma that says <code>x | n -&gt; x &lt;= n</code>, but those two are not combined to an instance that says <code>\\forall x, x | n -&gt; P x</code> is decidable if <code>P</code> is</p>",
        "id": 230235131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615724504
    },
    {
        "content": "<p>So if this instance is added then the proof is revert-everything; dec_trivial?</p>",
        "id": 230235276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615724659
    },
    {
        "content": "<p>yeah</p>",
        "id": 230235294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615724698
    },
    {
        "content": "<p>although adding instances like this is a can of worms; there are a whole lot of predicates that imply <code>x</code> is bounded</p>",
        "id": 230235331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615724744
    },
    {
        "content": "<p>Just to report back that in the PR process, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> had the wonderful suggestion of using <code>nat.eq_prime_pow_of_dvd_least_prime_pow</code> to prove the following lemma first and then apply it in the situation of the quaternion group.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_of_eq_prime_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">order_of</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hprime</span> <span class=\"n\">hnot</span> <span class=\"n\">hfin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.eq_prime_pow_of_dvd_least_prime_pow</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">order_of_dvd_iff_pow_eq_one</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hnot</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">order_of_dvd_iff_pow_eq_one</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hfin</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230487029,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615889320
    },
    {
        "content": "<p>golf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_of_eq_prime_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">order_of</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hprime</span> <span class=\"n\">hnot</span> <span class=\"n\">hfin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.eq_prime_pow_of_dvd_least_prime_pow</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">order_of_dvd_iff_pow_eq_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">order_of_dvd_of_pow_eq_one</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Actually I'm not quite sure what the goals for golfing lean is. What are we optimizing for? The number of characters in the proof? The time it takes to build the proof? The  length of what is shown by <code>show_term</code>?</p>",
        "id": 230598645,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615932132
    },
    {
        "content": "<p>If the lemma is mathematically trivial, there tends to be a focus on making the proof as short as possible. In this case, your proof is fine, I think. I might move the hypotheses to the left of the colon, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_of_eq_prime_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hprime</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnot</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.eq_prime_pow_of_dvd_least_prime_pow</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">order_of_dvd_iff_pow_eq_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">order_of_dvd_of_pow_eq_one</span> <span class=\"n\">hfin</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230602427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615933195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> Like Ruben said, if the statement is so trivial that you don't care what the proof looks like, the proof might as well be short (in the sense of characters), but if <code>by super_heavy_hammer</code> proves the lemma, but takes 3 minutes to do so, then we might want a slightly longer proof that is also fast.</p>",
        "id": 230644749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615962993
    },
    {
        "content": "<p>Here is a further golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">order_of_eq_prime_pow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hprime</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hnot</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.eq_prime_pow_of_dvd_least_prime_pow</span> <span class=\"n\">hprime</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hnot</span> <span class=\"o\">(</span><span class=\"n\">order_of_dvd_iff_pow_eq_one.mp</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">order_of_dvd_iff_pow_eq_one.mpr</span> <span class=\"n\">hfin</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230645238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615963523
    },
    {
        "content": "<p>Thanks for the explanation about golfing, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ; I think I got the idea.</p>",
        "id": 230655782,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615970437
    }
]