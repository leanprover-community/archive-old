[
    {
        "content": "<p>I have encountered a weird unification issue. Sometimes, when there is an instance for dependent types, Lean 3 has difficulties inferring this instance in a non-dependent situation, and we need to add the corresponding non-dependent instance to help it. That's what I had done for an instance on complete product spaces, but it broke a proof in a later file. I have reduced the issue to the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.inverse</span>\n\n<span class=\"kd\">lemma</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete_nondep</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semi_normed_group.to_pseudo_metric_space</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.normed_group</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">real.normed_group</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">complete_nondep</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here, <code>Pi.complete_nondep</code> is the new instance I would like to add (registered here only as a lemma), and <code>foo</code> is the issue this instance creates. The proof <code>apply Pi.complete_nondep ℝ</code> works fine, but <code>apply Pi.complete_nondep _</code> does not, and neither does <code>exact Pi.complete_nondep ℝ</code>, for reasons I don't understand.</p>",
        "id": 271497995,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644528914
    },
    {
        "content": "<p>FWIW <code>exact @Pi.complete_nondep _ ℝ _ _</code> does work. I forgot the details about how adding <code>@</code> changes the elaborator.<br>\nMy guess is that when the elaborator is lost, it's first trying to unify the last (type-class) argument, and somehow running in circles when doing that.</p>",
        "id": 271567461,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1644581822
    }
]