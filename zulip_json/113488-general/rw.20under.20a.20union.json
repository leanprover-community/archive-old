[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_subset_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_subset_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126553772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326269
    },
    {
        "content": "<p>Is there a more sensible method to prove that if <code>F i = G i</code> for all <code>i</code> then the union of the <code>F i</code> equals the union of the <code>G i</code>? I couldn't figure out how to rewrite within the union.</p>",
        "id": 126553840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326329
    },
    {
        "content": "<p>Sorry, the Union.</p>",
        "id": 126553854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326353
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">funext</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 126553895,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526326412
    },
    {
        "content": "<p>ha ha that's clever :-)</p>",
        "id": 126553981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326508
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 126554007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326548
    },
    {
        "content": "<p>Use automation Luke</p>",
        "id": 126554017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326562
    },
    {
        "content": "<p>What does <code>finish</code> do?</p>",
        "id": 126554071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326587
    },
    {
        "content": "<p>It finishes the proof</p>",
        "id": 126554073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326593
    },
    {
        "content": "<p>every time??</p>",
        "id": 126554074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326598
    },
    {
        "content": "<p>Yes, nobody told you?</p>",
        "id": 126554079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326609
    },
    {
        "content": "<p>You could also use <code>congr</code> here</p>",
        "id": 126554083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326615
    },
    {
        "content": "<p>I've seen <code>congr</code> do rewrites I couldn't do before, I should have tried this</p>",
        "id": 126554095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326633
    },
    {
        "content": "<p>I tried <code>conv</code> but I couldn't get that to work either</p>",
        "id": 126554101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326646
    },
    {
        "content": "<p>and it was the last line of a 250 line proof :-)</p>",
        "id": 126554103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326652
    },
    {
        "content": "<p>so I cheated and asked here.</p>",
        "id": 126554104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326661
    },
    {
        "content": "<p>I should be marking Chris' exam script!</p>",
        "id": 126554107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326668
    },
    {
        "content": "<p>But I am sick of affine schemes not being schemes</p>",
        "id": 126554147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326684
    },
    {
        "content": "<p>Recently I got to this situation where the goal is <code>a = a</code> (but not if <code>pp.all</code>) and <code>congr</code> alone finished the proof</p>",
        "id": 126554151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326689
    },
    {
        "content": "<p>You should have made that formalization the exam</p>",
        "id": 126554164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526326717
    },
    {
        "content": "<p>next year</p>",
        "id": 126554192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326801
    },
    {
        "content": "<p>What would I do without this chat. Things would go so much more slowly.</p>",
        "id": 126554243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526326821
    },
    {
        "content": "<p>I'm always fighting the temptation to post every lemma I need here</p>",
        "id": 126554551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327279
    },
    {
        "content": "<p>I hope to reduce my dependence a bit</p>",
        "id": 126554597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327300
    },
    {
        "content": "<p>But I'm still interested in learning better ways. Here are two lemmas I proved tonight. Usual questions: are there already there? What is the proof from the book?</p>",
        "id": 126554609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foldr_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a_t</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">a_t</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126554618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">P&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">P&#39;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">P</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">filter</span> <span class=\"n\">P&#39;</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">HPh</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">P&#39;</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">HP</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">P&#39;</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">i_t</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">i</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">i_t</span><span class=\"o\">])</span> <span class=\"o\">},</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">P&#39;</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">HPh</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P&#39;</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">HPh</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126554683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327440
    },
    {
        "content": "<p>I haven't tried to obfuscate the proofs</p>",
        "id": 126554698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327471
    },
    {
        "content": "<p>ha ha can you do the first one with Chris' trick?</p>",
        "id": 126554707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526327519
    },
    {
        "content": "<p>But I'm sure two lines are enough</p>",
        "id": 126554754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327530
    },
    {
        "content": "<p>I don't think so, you must not forget we have informations only on elements of the list</p>",
        "id": 126554775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327598
    },
    {
        "content": "<p>oh yes</p>",
        "id": 126554779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526327616
    },
    {
        "content": "<p>This condition seems a bit too specific</p>",
        "id": 126554780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327617
    },
    {
        "content": "<p>For instance, start with <code>congr</code> and you loose</p>",
        "id": 126554786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327640
    },
    {
        "content": "<p>Do I need an import for these? I just this minute upgraded mathlib in my project and I'm re-building it</p>",
        "id": 126554788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526327641
    },
    {
        "content": "<p>so maybe I just have to wait</p>",
        "id": 126554829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526327648
    },
    {
        "content": "<p>but I have complaints about foldr currently</p>",
        "id": 126554831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526327654
    },
    {
        "content": "<p><code>import data.list.basic</code></p>",
        "id": 126554836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327674
    },
    {
        "content": "<p>sorry</p>",
        "id": 126554837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526327676
    },
    {
        "content": "<p><code>list.foldr_hom</code> is too strong</p>",
        "id": 126555316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526328219
    },
    {
        "content": "<p>Too strong?</p>",
        "id": 126555384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526328279
    },
    {
        "content": "<p>For your application</p>",
        "id": 126555393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526328293
    },
    {
        "content": "<p>like Chris' idea</p>",
        "id": 126555398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526328300
    },
    {
        "content": "<p>Same problem</p>",
        "id": 126555403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526328304
    },
    {
        "content": "<p>right</p>",
        "id": 126555410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526328312
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foldr_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 126555898,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526328870
    },
    {
        "content": "<p><span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 126555909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526328893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> can you derive normal and curvature for r=xi+f(x)j?</p>",
        "id": 126555923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526328904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is this the mechanics exam running joke again?</p>",
        "id": 126555943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526328942
    },
    {
        "content": "<p>is it a joke when the exam is tomorrow?</p>",
        "id": 126555948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526328954
    },
    {
        "content": "<p>Thank you Chris for not revising mechanics</p>",
        "id": 126556102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329110
    },
    {
        "content": "<p>I disapprove of course</p>",
        "id": 126556105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329119
    },
    {
        "content": "<p>But I still take your proof</p>",
        "id": 126556108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329128
    },
    {
        "content": "<p>I can as of today. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 126556116,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526329142
    },
    {
        "content": "<p>ok you win</p>",
        "id": 126556133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329184
    },
    {
        "content": "<p>curvature is dn / ds, where s is arc length I think.</p>",
        "id": 126556183,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526329218
    },
    {
        "content": "<p>and n is normal</p>",
        "id": 126556192,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526329228
    },
    {
        "content": "<p>He can golf <em>and</em> compute curvature. What a man!</p>",
        "id": 126556199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329256
    },
    {
        "content": "<p>So what is going on with Chris' proof? I feel like I can learn something important here</p>",
        "id": 126556397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329540
    },
    {
        "content": "<p>Induction -- sure. Simp does the base case</p>",
        "id": 126556399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329547
    },
    {
        "content": "<p>simp doesn't do the inductive step.</p>",
        "id": 126556403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329551
    },
    {
        "content": "<p>by itself.</p>",
        "id": 126556405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329556
    },
    {
        "content": "<p>it's a semicolon</p>",
        "id": 126556407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329558
    },
    {
        "content": "<p><code>simp</code> is simultaneously applied to both goals</p>",
        "id": 126556450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329575
    },
    {
        "content": "<p>the base case and the inductive step</p>",
        "id": 126556451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329580
    },
    {
        "content": "<p><code>contextual</code> seems to do the magic trick</p>",
        "id": 126556453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329582
    },
    {
        "content": "<p>what does <code>contextual</code> do?</p>",
        "id": 126556457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329600
    },
    {
        "content": "<p>uses context</p>",
        "id": 126556461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329607
    },
    {
        "content": "<p>isn't that <code>simp *</code>?</p>",
        "id": 126556465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329620
    },
    {
        "content": "<p>I hate natural number arithmetic, so I'm cheating for this one. Who could prove me <code>b &lt; a</code> implies <code>b + 1 - a = 0</code>?</p>",
        "id": 126556496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329668
    },
    {
        "content": "<p>maybe b &lt; a -&gt; (b + 1) &lt;= a</p>",
        "id": 126556576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329752
    },
    {
        "content": "<p>they are equivalent</p>",
        "id": 126556581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329762
    },
    {
        "content": "<p>definitionally</p>",
        "id": 126556584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329765
    },
    {
        "content": "<p>That could be a step yes</p>",
        "id": 126556587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526329768
    },
    {
        "content": "<p>oh they are defeq right? ;-)</p>",
        "id": 126556590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329771
    },
    {
        "content": "<p>so something like <code>sub_le_zero_of_le</code>?</p>",
        "id": 126556596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329784
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 126556601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329797
    },
    {
        "content": "<p>oh wait nothing</p>",
        "id": 126556649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329806
    },
    {
        "content": "<p>maybe you want <code>nat.eq_zero_of_le_zero</code> if it exists</p>",
        "id": 126556657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329818
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foldr_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126556661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329829
    },
    {
        "content": "<p>The semicolon isn't important</p>",
        "id": 126556663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329833
    },
    {
        "content": "<p>it is, because it allows you to apply <code>simp</code> to both goals</p>",
        "id": 126556664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329845
    },
    {
        "content": "<p>but the contextual is</p>",
        "id": 126556669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329851
    },
    {
        "content": "<p>without the semicolon you need to write it twice</p>",
        "id": 126556671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329854
    },
    {
        "content": "<p>sure</p>",
        "id": 126556674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329857
    },
    {
        "content": "<p>Oh I see what you're saying -- what I am saying is trivial.</p>",
        "id": 126556684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329870
    },
    {
        "content": "<p>I'm just unravelling the semicolon</p>",
        "id": 126556688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329881
    },
    {
        "content": "<p>the contextual isn't important for the base case but for the inductive step we have an inductive hypothesis which needs to be used</p>",
        "id": 126556692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526329903
    },
    {
        "content": "<p>does <code>simp [*]</code> work?</p>",
        "id": 126556700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526329921
    },
    {
        "content": "<p>Contextual does not refer to context as in \"induction hypothesis\" but to the left-hand side of implications: in <code>a = b -&gt; P a</code>, contextual allows simp to use the equation <code>a=b</code> to simplify <code>P a</code>.</p>",
        "id": 126556778,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526329993
    },
    {
        "content": "<p>oh</p>",
        "id": 126556780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526330002
    },
    {
        "content": "<p><code>nat.sub_eq_zero_iff_le</code></p>",
        "id": 126556790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330028
    },
    {
        "content": "<p><code>example (a b : ℕ) : b &lt; a → b + 1 - a = 0 := nat.sub_eq_zero_of_le</code></p>",
        "id": 126556860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330120
    },
    {
        "content": "<p>aha</p>",
        "id": 126556865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526330134
    },
    {
        "content": "<p>using the trick that b &lt; a is by definition b+1 &lt;= a</p>",
        "id": 126556867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330140
    },
    {
        "content": "<p>as Kenny pointed out</p>",
        "id": 126556869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330143
    },
    {
        "content": "<p>(see <code>#print nat.lt</code>)</p>",
        "id": 126556916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330164
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 126556928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526330197
    },
    {
        "content": "<p>This <code>contextual</code> thing is not documented in my simp docs -- I looked through the source or the docs (I don't remember, maybe the source), saw it was there and mentioned it but basically also said I didn't know what it di.</p>",
        "id": 126556989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330284
    },
    {
        "content": "<p>d</p>",
        "id": 126556990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330286
    },
    {
        "content": "<p>I don't quite understand Gabriel's explanation -- is <code>a = b -&gt; P a</code> supposed to be a hypothesis or a goal?</p>",
        "id": 126557009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330335
    },
    {
        "content": "<p>goal</p>",
        "id": 126557013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526330342
    },
    {
        "content": "<p>hmm, but the goal is not an implication</p>",
        "id": 126557022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526330356
    },
    {
        "content": "<blockquote>\n<p>does <code>simp [*]</code> work?</p>\n</blockquote>\n<p>no</p>",
        "id": 126557030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330377
    },
    {
        "content": "<p>right -- the implications are in the hypotheses</p>",
        "id": 126557125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330488
    },
    {
        "content": "<p>Maybe it's just magic</p>",
        "id": 126557127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330499
    },
    {
        "content": "<p>\"Lean does not do magic\" -- K. Lau, a couple of months ago</p>",
        "id": 126557131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330517
    },
    {
        "content": "<p>The comment inspired me to start really thinking about how some of the techniques I had picked up actually worked</p>",
        "id": 126557175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526330543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma filter_congr {p q : α → Prop} [decidable_pred p] [decidable_pred q]\n  : ∀ {l : list α}, (∀ x ∈ l, p x ↔ q x) → filter p l = filter q l\n| [] _     := rfl\n| (a::l) h := by simp at h; by_cases pa : p a;\n  [simp [pa, h.1.1 pa, filter_congr h.2],\n   simp [pa, mt h.1.2 pa, filter_congr h.2]]\n</pre></div>\n\n\n<p>Regarding naming: A theorem of the form <code>a = b -&gt; F a = F b</code> is a \"congruence\" theorem, named with <code>congr</code> at the end. An \"extensionality\" theorem has the form <code>F a = F b -&gt; a = b</code> where <code>F</code> is some appropriate (collection of) projection-like operations</p>",
        "id": 126557393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526330831
    },
    {
        "content": "<p><code>map_congr</code> exists in <code>list.basic</code> but not all list theorems have congr theorems stated for them</p>",
        "id": 126557415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526330876
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 126557583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526331016
    },
    {
        "content": "<p>Is there any difference between my <code>p x = q x</code> and your <code>p x ↔ q x</code> here?</p>",
        "id": 126557592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526331040
    },
    {
        "content": "<p>No, given <code>propext</code>, but mathlib convention is to use <code>iff</code> instead of <code>eq</code> for equivalent propositions</p>",
        "id": 126557609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526331081
    },
    {
        "content": "<p>Otherwise you have to face weird theorems like <code>(a = b) = c = b</code></p>",
        "id": 126557632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526331123
    },
    {
        "content": "<p>It more or less does <code>intros; simp *</code> I think</p>",
        "id": 126557712,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526331217
    },
    {
        "content": "<p>But I just realise that can't be what it does, because my example didn't have anything to intro.</p>",
        "id": 126557713,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526331217
    },
    {
        "content": "<p>and <code>simp *</code> doesn't work</p>",
        "id": 126557714,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526331217
    },
    {
        "content": "<p>Going from = to iff broke a magic <code>finish</code> success</p>",
        "id": 126558301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526331999
    },
    {
        "content": "<p>Probably by breaking a magic <code>cc</code> under the hood</p>",
        "id": 126558311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526332019
    },
    {
        "content": "<p>This natural number substraction is really a nightmare. Now I want <code>b + k + 1 - (a + k) = b + 1 - a</code>. It's almost the same I had a couple of days ago. But I'm stuck again...</p>",
        "id": 126558380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526332110
    },
    {
        "content": "<p>It seems like I really need <code>omega</code> in the end</p>",
        "id": 126558463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526332212
    },
    {
        "content": "<p>Is there any hope to use Coq to tell me a proof Lean could understand?</p>",
        "id": 126558972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526333039
    },
    {
        "content": "<p>No, in general the names of the lemmas used in Coq would be different</p>",
        "id": 126559159,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526333259
    },
    {
        "content": "<p>But can you get the sequence of Coq lemmas used by omega?</p>",
        "id": 126559200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526333286
    },
    {
        "content": "<p>I do not have a Coq installation in front of me to look at the output of omega, so I don't know</p>",
        "id": 126559219,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526333337
    },
    {
        "content": "<p>What I did when i had a lot of similar problems was write down a cheat sheet of relevant cancellation lemmas in my notebook... looking them all up was my biggest hurdle</p>",
        "id": 126559407,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526333567
    },
    {
        "content": "<p>Now I need <code>H : a ≤ b ⊢ 2 * a + (b + 1 - a) - i - 1 = a - i + b</code>. I give up for today</p>",
        "id": 126559611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526333854
    },
    {
        "content": "<p>I have four proofs stuck because of such stupid goals</p>",
        "id": 126559664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526333912
    },
    {
        "content": "<p>I understand your feeling</p>",
        "id": 126559670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526333932
    },
    {
        "content": "<blockquote>\n<p>Going from = to iff broke a magic <code>finish</code> success</p>\n</blockquote>\n<p>You can just deduce your old version from Mario's version of course...</p>",
        "id": 126563181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526338733
    },
    {
        "content": "<blockquote>\n<p>This natural number substraction is really a nightmare. Now I want <code>b + k + 1 - (a + k) = b + 1 - a</code>. It's almost the same I had a couple of days ago. But I'm stuck again...</p>\n</blockquote>\n<p>I really like doing these. Patrick -- just type nat.sub and then ctrl-space escape ctrl-space to see what Lean has, you can just browse through stuff.</p>",
        "id": 126563201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526338776
    },
    {
        "content": "<p>Actually I don't understand how ctrl-space works at all. I just managed to type <code>nat.sub</code> and get it to display <code>nat.add_sub_add_left</code> (which is useful for you) and then after esc ctrl-space I don't see it any more</p>",
        "id": 126563696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526339310
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n<span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_left</span>\n</pre></div>",
        "id": 126563797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526339409
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n<span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span>\n</pre></div>",
        "id": 126563842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526339510
    },
    {
        "content": "<blockquote>\n<p>Now I need <code>H : a ≤ b ⊢ 2 * a + (b + 1 - a) - i - 1 = a - i + b</code>. I give up for today</p>\n</blockquote>\n<p>If <code>i &gt; a</code> but <code>i &lt;= a + b</code> then this one won't be true, because <code>a - i + b</code> is <code>(a - i) + b</code></p>",
        "id": 126564406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526340176
    },
    {
        "content": "<p>Here's some true version:</p>",
        "id": 126564613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526340484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">two_mul</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_add_right</span>\n</pre></div>",
        "id": 126564616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526340487
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>This natural number substraction is really a nightmare. Now I want <code>b + k + 1 - (a + k) = b + 1 - a</code>. It's almost the same I had a couple of days ago. But I'm stuck again...</p>\n</blockquote>\n<p>I really like doing these. Patrick -- just type nat.sub and then ctrl-space escape ctrl-space to see what Lean has, you can just browse through stuff.</p>\n</blockquote>\n<p>Ctrl-T and typing sub brings up lemmas with sub inside</p>",
        "id": 126564908,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526341052
    },
    {
        "content": "<p>By the way patrick, your \"stupid goals\" are exactly why I wrote <code>range'</code> to take a start and length instead of start and end. Remember, the value of a good modeling decision is not in the beauty of the statements but in the beauty of the proofs. When things are done right, the proof is like everything is given to you just as you need it, but when you write things in a cumbersome way the proofs become orders of magnitude more cumbersome.</p>",
        "id": 126574769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526358919
    },
    {
        "content": "<p>If your desire for clean statements overrides this concern, then just have two versions and write from the \"porcelain\" version (which looks nice but is hard to work with) to the \"plumbing\" version (optimized for proofs) before proving anything, and just translate back at the end.</p>",
        "id": 126574827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526359055
    },
    {
        "content": "<p>But cumbersome is as cumbersome does, here's a proof:</p>\n<div class=\"codehilite\"><pre><span></span>example (a b k : ℕ) : b + k + 1 - (a + k) = b + 1 - a :=\nby rw [add_comm a, ← nat.sub_sub, add_right_comm, nat.add_sub_cancel]\n</pre></div>\n\n\n<p>and a counterexample:</p>\n<div class=\"codehilite\"><pre><span></span>#eval do\n  a ← list.range 3,\n  b ← list.range 3,\n  i ← list.range 3,\n  return $ to_bool (∀ (_:a ≤ b), 2 * a + (b + 1 - a) - i - 1 = a - i + b)\n -- [tt, tt, tt, tt, ff, ff, tt, ff, ff, tt, tt, tt, tt, tt, ff, tt, tt, ff, tt, tt, tt, tt, tt, tt, tt, tt, tt]\n</pre></div>\n\n\n<p>That's my version of isabelle quickcheck - I just evaluated the theorem at some small numbers and it sometimes fails.</p>",
        "id": 126575178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526359882
    },
    {
        "content": "<p>Assuming you don't want to learn the beautiful theory of monus on the naturals, but just want to pretend it's regular subtraction, I recommend you treat it like a partial function, in the sense that you never state a theorem about <code>-</code> unless the fact that the RHS is less or equal to the LHS is in the context or otherwise deducible. Your second theorem fails this, since it has a variable <code>i</code> being subtracted from stuff even though there is no upper bound on it.</p>",
        "id": 126575374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526360354
    },
    {
        "content": "<p>hm, maybe this is a slightly nicer quickcheck:</p>\n<div class=\"codehilite\"><pre><span></span>#eval do\n  a ← list.range 5,\n  b ← list.range 5,\n  i ← list.range 5,\n  guardb (a ≤ b),\n  guardb (2 * a + (b + 1 - a) - i - 1 ≠ a - i + b),\n  return (a, b, i)\n</pre></div>\n\n\n<p>it returns a list of counterexample triples</p>",
        "id": 126575537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526360665
    },
    {
        "content": "<blockquote>\n<p>hmm, but the goal is not an implication</p>\n</blockquote>\n<p>I think it's because some of the hypotheses are an implication</p>",
        "id": 126579115,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526368359
    },
    {
        "content": "<p>Indeed, look at the (condition of the) induction hypothesis.</p>",
        "id": 126579186,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526368557
    },
    {
        "content": "<p>Sorry I messed up the last statement. What I really need is <code>2 * a + (b + 1 - a) - i - 1 = a+b-i</code> assuming <code>a ≤ b</code> and <code>i ∈ range' a (b + 1 - a)</code></p>",
        "id": 126579580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369398
    },
    {
        "content": "<p>I do have all the right bounds, that's what my <code>foldr_congr</code> and <code>filter_ext</code> are made for</p>",
        "id": 126579628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369447
    },
    {
        "content": "<p>But I should probably think about first proving stuff with cumbersome statements and then try to deduce the natural statements from their twisted versions</p>",
        "id": 126579681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369533
    },
    {
        "content": "<p>Patrick I proved what you wanted, right?</p>",
        "id": 126579683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369564
    },
    {
        "content": "<p>This is all about summing for n from a to b, instead of n from a to a+k</p>",
        "id": 126579684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369565
    },
    {
        "content": "<p>You proved one of the things I wanted, thank you very much to you and Mario, but this is another one</p>",
        "id": 126579691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369595
    },
    {
        "content": "<p>The \"true version\" above</p>",
        "id": 126579692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369596
    },
    {
        "content": "<p>I thought I'd done everything for oyu</p>",
        "id": 126579695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369610
    },
    {
        "content": "<p>what is missing?</p>",
        "id": 126579696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369612
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 126579697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369619
    },
    {
        "content": "<p>:-)</p>",
        "id": 126579699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369623
    },
    {
        "content": "<p>I missed that one</p>",
        "id": 126579701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369624
    },
    {
        "content": "<p>I can believe that these things are not to everyone's tastes. I only did it because I quite like them.</p>",
        "id": 126579739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369646
    },
    {
        "content": "<p>I'm glad you're such a pervert</p>",
        "id": 126579742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369665
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 126579744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526369672
    },
    {
        "content": "<p>What I especially like is that Mario's proof is only about 30% shorter :-)</p>",
        "id": 126579746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369698
    },
    {
        "content": "<p>[and that I was aware that something like this would probably work after I finished mine...]</p>",
        "id": 126579755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369741
    },
    {
        "content": "<blockquote>\n<p>Indeed, look at the (condition of the) induction hypothesis.</p>\n</blockquote>\n<p>Right -- that's what I'm unclear about. Explicitly -- <code>simp * {contextual := tt}</code> does something different to <code>simp</code> in a situation where there is a _hypothesis_ of the form <code>X -&gt; Y</code>, in which case it does...what?</p>",
        "id": 126579799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369816
    },
    {
        "content": "<p>Oh -- maybe I do understand.</p>",
        "id": 126579815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369876
    },
    {
        "content": "<p>It's hard to tell because trace.simplify doesn't show you where the rewrites are happening.</p>",
        "id": 126579858,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526369923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> can you derive Kepler's laws?</p>",
        "id": 126579860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526369942
    },
    {
        "content": "<p>Where are the mods? Honestly, this place is going down the pan</p>",
        "id": 126579865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526369959
    },
    {
        "content": "<p>Hi there, it's your friendly neighborhood mod</p>",
        "id": 126579919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370038
    },
    {
        "content": "<p>Are we still rewriting under a union?</p>",
        "id": 126579927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370067
    },
    {
        "content": "<p>It's all connected, I'm sure</p>",
        "id": 126579932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370092
    },
    {
        "content": "<p>What about this one: <code>lemma reverse_range' (a b : ℕ) : reverse (range' a b) = map (λ i, 2*a+b-i-1) (range' a b) </code>?</p>",
        "id": 126579933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370097
    },
    {
        "content": "<p>even Kepler's laws get involved in some rewrites</p>",
        "id": 126579935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370104
    },
    {
        "content": "<p>I need a topic \"I hate natural numbers\"</p>",
        "id": 126579936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370116
    },
    {
        "content": "<p>That statement reminds me a lot of Kevin's theorem on reversing sums</p>",
        "id": 126579979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370159
    },
    {
        "content": "<p>Of course this is what I'm doing</p>",
        "id": 126579982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370171
    },
    {
        "content": "<p>I'm working on my big_op project</p>",
        "id": 126579985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370183
    },
    {
        "content": "<p>And this statement is partly what motivated my <code>nth_le_map</code> question</p>",
        "id": 126579992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370206
    },
    {
        "content": "<p>I wanted to use <code>ext_le</code> on that one</p>",
        "id": 126579997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370225
    },
    {
        "content": "<p>suggestion: don't use <code>2*a+b-i-1</code>, use <code>a-(b+1-a)-i</code></p>",
        "id": 126580039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370275
    },
    {
        "content": "<p>otherwise you will spend the whole proof showing that the first thing rewrites to the second</p>",
        "id": 126580049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370310
    },
    {
        "content": "<p>That's part of the nightmare: each time I change my mind on something like this, I must redo all the natural numbers computations lemmas</p>",
        "id": 126580050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370312
    },
    {
        "content": "<p>With <code>2*a+b-i-1</code> I can use what Kevin proved last night down the road. Otherwise I return to having nothing</p>",
        "id": 126580096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370377
    },
    {
        "content": "<p>We call that cruft</p>",
        "id": 126580103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370399
    },
    {
        "content": "<p>Here's a suggestion: write the theorem so as to minimize the number of rewrites. That is, as soon as you get something technically the same as what you want (in this case, <code>range' a b = map ... (range' a b)</code>), go with it, even if it's written in a kind of weird way</p>",
        "id": 126580112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370446
    },
    {
        "content": "<p>if you do that for two or three theorems the idioms will stand out</p>",
        "id": 126580116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370472
    },
    {
        "content": "<p>like in this case keeping <code>b+1-a</code> together as a unit</p>",
        "id": 126580156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370490
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foldr_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"c1\">-- base case}</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126580158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370504
    },
    {
        "content": "<p>I have isolated <code>contextual := tt</code> doing something</p>",
        "id": 126580159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370516
    },
    {
        "content": "<blockquote>\n<p>Right -- that's what I'm unclear about. Explicitly -- <code>simp * {contextual := tt}</code> does something different to <code>simp</code> in a situation where there is a _hypothesis_ of the form <code>X -&gt; Y</code>, in which case it does...what?</p>\n</blockquote>\n<p>Oh no, there is no difference in how simp treats implications in assumptions.  If you have a simp lemma/assumption <code>forall x, p x -&gt; f x=g x</code>, then <code>simp</code> will try to prove <code>p a</code> before rewriting <code>f a</code> to <code>g a</code>.  And it proves this condition using <code>simp</code> itself!  Small demo:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n</pre></div>\n\n\n<p>Here <code>simp</code> first proves the condition <code>n*n = n</code> (using <code>simp</code>) before rewriting <code>q</code> to <code>true</code>.</p>",
        "id": 126580165,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526370534
    },
    {
        "content": "<p>darn no I haven't</p>",
        "id": 126580167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370542
    },
    {
        "content": "<p>but Gabriel has. Thanks!</p>",
        "id": 126580178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370592
    },
    {
        "content": "<p>Wait -- there is no <code>contextual</code> here?</p>",
        "id": 126580221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370630
    },
    {
        "content": "<p>No, <code>simp</code> can use conditional simp lemmas without <code>contextual:=tt</code>.  It uses <code>simp</code> to prove the condition.</p>",
        "id": 126580229,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526370687
    },
    {
        "content": "<p>Mario, the trouble is I want to prove </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">big</span><span class=\"bp\">.</span><span class=\"n\">range_anti_mph</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">◆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">b</span> <span class=\"err\">◆</span> <span class=\"n\">φ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnil</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">..</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">..</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>I don't want the <code>a+b-i</code> in the conclusion to be some weird formula which is the same after a dozen rewrites</p>",
        "id": 126580233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foldr_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span> <span class=\"c1\">-- base case}</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- dammit simp, prove it without using contextual</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span> <span class=\"c1\">-- what just happened?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126580245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370722
    },
    {
        "content": "<p>That's what I don't get</p>",
        "id": 126580277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370725
    },
    {
        "content": "<p>I don't either. But I don't see that <code>2*a+whatever</code> anywhere in the statement either</p>",
        "id": 126580283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370748
    },
    {
        "content": "<p>Can I break that last line down into simpler steps?</p>",
        "id": 126580284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526370749
    },
    {
        "content": "<p>Knowing of course that I proved</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">big</span><span class=\"bp\">.</span><span class=\"n\">anti_mph</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">◆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">b</span> <span class=\"err\">◆</span> <span class=\"n\">φ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hnil</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>a long time ago</p>",
        "id": 126580286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370761
    },
    {
        "content": "<p>I'm only fighting the <code>range'</code> stuff</p>",
        "id": 126580300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370786
    },
    {
        "content": "<p>And I have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">big</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">big</span><span class=\"o\">[(</span><span class=\"err\">◆</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">nil</span><span class=\"o\">]</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 126580345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370862
    },
    {
        "content": "<p>So I wanted to write <code>reverse (range' ...)</code> as a <code>map ... (range' ...)</code></p>",
        "id": 126580348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370884
    },
    {
        "content": "<p>What are you going to do with the <code>map</code> once you have it?</p>",
        "id": 126580357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Look at the left-hand side of the implication in the induction hypothesis in foldr_ext.  Contextual simplification makes a difference here: simp then has the additional assumption <code>a ∈ l</code>, which it can use to apply <code>H</code>.</p>",
        "id": 126580362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526370947
    },
    {
        "content": "<p>Okay I think it is time to split this convo in two</p>",
        "id": 126580404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526370967
    },
    {
        "content": "<p>Yes sorry</p>",
        "id": 126580405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526370977
    },
    {
        "content": "<blockquote>\n<p>Okay I think it is time to split this convo in two</p>\n</blockquote>\n<p>...given that neither thread is about the topic name ;-)</p>",
        "id": 126580428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526371066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foldr</span> <span class=\"n\">f&#39;</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This is the case for cons. ^^   In order to apply <code>IH</code>, you need to prove its left-hand side using <code>H</code>.  And to prove <code>a ∈ h :: t</code>, you need the <code>a ∈ t</code> from <code>IH</code>.</p>",
        "id": 126580490,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526371190
    },
    {
        "content": "<p>I am beginning to understand now. I'm writing out the proof in full, and I have to apply <code>IH</code> and then apply <code>H</code>.</p>",
        "id": 126580729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526371679
    },
    {
        "content": "<p>So everything is there but somehow it's all in a bit of a tangle</p>",
        "id": 126580768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526371696
    },
    {
        "content": "<p>I think I have it now</p>",
        "id": 126580909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">got_it</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--simp *, -- fails</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126580911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372028
    },
    {
        "content": "<p>I want to use <code>IH</code> to prove <code>S</code> but the hypothesis of <code>IH</code> isn't immediately true; however simp can prove it using other hypotheses.</p>",
        "id": 126580956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372093
    },
    {
        "content": "<p>Thanks Gabriel. To show your time isn't being wasted here I'll add it to the simp docs (once I've done another 8 hours of marking..)</p>",
        "id": 126580975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372161
    },
    {
        "content": "<p>All of these conversations (threads about what simp does and doesn't do, threads about how to make type class inference work etc) -- it's in some sense sad that they just appear here and then disappear. The type class inference thread especially contains some really useful tips (in the sense that I was genuinely stuck about three times and then got unstucked by the contents of that thread). I will try to write some notes on that thread too, but I have so much marking at the minute and I have decided that it is time to prove an affine scheme is a scheme so I spend all my spare time on that. I am using the zulip \"star\" functionality a lot at the minute -- star meaning \"get back to this later and write it up properly\".</p>",
        "id": 126581149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372439
    },
    {
        "content": "<p>Thanks to all as ever.</p>",
        "id": 126581151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372443
    },
    {
        "content": "<p>Next year Lean will mark all this for you</p>",
        "id": 126581273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526372647
    },
    {
        "content": "<p>That's the plan!</p>",
        "id": 126581275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526372657
    },
    {
        "content": "<p>Because this <code>{contextual := true}</code> discussion I'm back to beginner level. Except that, instead of trying <code>simp</code> whatever the goal and hope for the best, I try <code>simp * at * { contextual := true}</code></p>",
        "id": 126718080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526590557
    },
    {
        "content": "<p>And often it works!</p>",
        "id": 126718124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526590566
    },
    {
        "content": "<blockquote>\n<p>This natural number substraction is really a nightmare. Now I want <code>b + k + 1 - (a + k) = b + 1 - a</code>. It's almost the same I had a couple of days ago. But I'm stuck again...</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>\n\n\n<p>It works! It works!</p>",
        "id": 163577441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555518574
    },
    {
        "content": "<p>ha ha it's also referring to a question that was about 100 posts before the answer :D</p>",
        "id": 163577634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555518683
    }
]