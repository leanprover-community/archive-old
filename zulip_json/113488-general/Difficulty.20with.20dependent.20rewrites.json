[
    {
        "content": "<p>I'm struggling to prove this trivial-but-dependently-typed statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">submodules</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- probably should be in mathlib somewhere?</span>\n<span class=\"kd\">instance</span> <span class=\"n\">submodule.decidable_zero</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable.rec_on</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hfalse</span><span class=\"o\">,</span> <span class=\"n\">decidable.is_false</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">htrue</span><span class=\"o\">,</span> <span class=\"n\">decidable.is_true</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">submodules</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n\n  <span class=\"n\">a.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">submodules</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">submodule.coe_mem</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I can't work out how to rewrite <code>i + 0 = 0</code> and the <code>⟨↑ai, _⟩ = ai</code> at the same time.</p>",
        "id": 214686669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603798020
    },
    {
        "content": "<p>The snippet doesn't compile for me with current mathlib.</p>",
        "id": 214687068,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603798282
    },
    {
        "content": "<p>Oh damn, this is based off local changes and the ever-delayed <a href=\"https://github.com/leanprover-community/mathlib/issues/3490\">#3490</a></p>",
        "id": 214687108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603798313
    },
    {
        "content": "<p>Replace <code>add_comm_monoid</code> with <code>add_comm_group</code></p>",
        "id": 214687158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603798325
    },
    {
        "content": "<p>I still get <code>failed to synthesize type class instance for Π (i : ι), add_comm_group ((λ (i : ι), ↥(submodules i)) i)</code> even on your branch.</p>",
        "id": 214687509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603798533
    },
    {
        "content": "<p>Hmm, even then it doesn't work. Will iterate a bit in the web editor and report back when it compiles</p>",
        "id": 214687513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603798539
    },
    {
        "content": "<p>Ok, fixed. Needed semirings promoted to rings, and a decideable instance in my local file</p>",
        "id": 214687866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603798803
    },
    {
        "content": "<p>I can make some progress with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">ai</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">submodules</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">ai</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">direct_sum.of</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">direct_sum.of</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>  <span class=\"c1\">-- ⟨↑x_1, _⟩ == x_1</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>  <span class=\"c1\">-- _ == ?m_1</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.of</span><span class=\"o\">,</span> <span class=\"n\">dfinsupp.sum_single</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- dfinsupp.sum_single didn't match?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>but i'm stuck on all three sorries</p>",
        "id": 214691155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603801037
    },
    {
        "content": "<p>Down to one sorry with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- paste the above preamble here</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">dfinsupp.sum_single</span><span class=\"o\">,</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"c1\">-- get the instance arguments out of the way</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">si</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.of</span><span class=\"o\">],</span>  <span class=\"c1\">-- I can't make this `simp only`</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">si</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">si_val</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">si_val</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">si_property</span><span class=\"o\">}⟩</span> <span class=\"o\">:</span> <span class=\"n\">submodules</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n    <span class=\"n\">convert</span> <span class=\"n\">submodule.coe_eq_coe.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">},</span>\n    <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"c1\">-- !!!</span>\n    <span class=\"n\">rotate</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">si_property</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"c1\">-- this succeeds but has no visible change to the goal state!</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- eq.rec ⟨si_val, _⟩ _ = ⟨si_val, si_property⟩</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Anyone have any ideas? Neither <code>finish</code>, <code>tidy</code>, or <code>refl</code> work.</p>",
        "id": 214821392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603883228
    },
    {
        "content": "<p>if you see <code>eq.rec</code>in the goal, backtrack immediately</p>",
        "id": 214821558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603883311
    },
    {
        "content": "<p><code>simp [direct_sum.of]</code> is the line that introduced the <code>eq.rec</code></p>",
        "id": 214821642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603883381
    },
    {
        "content": "<p>Is <code>eq.rec</code> in the goal better or worse than <code>==</code> (<code>heq</code>)?</p>",
        "id": 214821956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603883567
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- -- probably should be in mathlib somewhere?</span>\n<span class=\"c1\">-- instance submodule.decidable_zero (S : submodule R A) (x : S) : decidable (x ≠ 0) :=</span>\n<span class=\"c1\">-- decidable.rec_on (infer_instance : decidable ((x : A) ≠ 0))</span>\n<span class=\"c1\">--   (λ hfalse, decidable.is_false $ by simp * at *)</span>\n<span class=\"c1\">--   (λ htrue, decidable.is_true $ by simp * at *)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">as_sum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">xi.2</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">dfinsupp.sum_single</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ext1</span> <span class=\"n\">xi</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">⟨</span><span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"n\">H.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">xi.2</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">xi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">xi</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214824136,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603884995
    },
    {
        "content": "<p>so the solution to eq.rec is generalize until you're left with variables not expressions</p>",
        "id": 214824151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603885015
    },
    {
        "content": "<p>It looks like the key difference between your proof and mine is your use of <code>(add_zero i).symm ▸ xi.2</code> and not <code>by simp [submodule.coe_mem, add_zero]</code></p>",
        "id": 214825225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603885744
    },
    {
        "content": "<p>Which is alarming, because that violates proof invariance?</p>",
        "id": 214825267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603885775
    },
    {
        "content": "<p>Ah, I guess the elaborator is unfolding your proof but not mine</p>",
        "id": 214825358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603885826
    },
    {
        "content": "<p>Would it make sense for your <code>aux</code> to be in mathlib?</p>",
        "id": 214827025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603886985
    },
    {
        "content": "<p>Or is it too specific?</p>",
        "id": 214827038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603886995
    },
    {
        "content": "<p>Perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dfinsupp.single_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span><span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xk</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">xi</span> <span class=\"bp\">==</span> <span class=\"n\">xk</span><span class=\"o\">):</span>\n  <span class=\"n\">dfinsupp.single</span> <span class=\"n\">k</span> <span class=\"n\">xk</span> <span class=\"bp\">=</span> <span class=\"n\">dfinsupp.single</span> <span class=\"n\">i</span> <span class=\"n\">xi</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">heq.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214829165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603888313
    },
    {
        "content": "<p>Combined with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">submodule.heq</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">==</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff.symm</span> <span class=\"o\">(</span><span class=\"n\">iff.trans</span> <span class=\"n\">submodule.coe_eq_coe</span> <span class=\"o\">⟨</span><span class=\"n\">heq_of_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214838287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603893052
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4810\">#4810</a> with some lemmas to help out.</p>",
        "id": 214846484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603896517
    }
]