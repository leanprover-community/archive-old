[
    {
        "content": "<p>I expected this to fail:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195656789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588131990
    },
    {
        "content": "<p>should <code>sorry</code> behave like <code>NaN</code> in javascript?</p>",
        "id": 195656811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588132000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"kc\">NaN</span> <span class=\"o\">==</span> <span class=\"kc\">NaN</span>\n<span class=\"o\">&lt;</span> <span class=\"kc\">false</span>\n</code></pre></div>",
        "id": 195656851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588132023
    },
    {
        "content": "<p>I was wondering the same thing</p>",
        "id": 195656853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132026
    },
    {
        "content": "<p>please don't make that comparison, javascript is not something we should aspire to</p>",
        "id": 195656881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132054
    },
    {
        "content": "<p>but <code>sorry</code> shouldn't be equal to <code>sorry</code> right</p>",
        "id": 195656915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588132073
    },
    {
        "content": "<p>That depends on what you mean. I think that the way it currently works a <code>sorry</code> is marked only with its expected type, so of course it should be equal to itself in the same way that <code>choice nat</code> is equal to <code>choice nat</code></p>",
        "id": 195657002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132138
    },
    {
        "content": "<p>Isn't <code>sorry</code> basically like <code>choice</code>...</p>",
        "id": 195657007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132143
    },
    {
        "content": "<p>without that pesky <code>nonempty</code> side condition</p>",
        "id": 195657012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132154
    },
    {
        "content": "<p>or at least, that seems like a reasonable way for it to work</p>",
        "id": 195657026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132185
    },
    {
        "content": "<p>You might want distinct occurrences of <code>sorry</code> to turn into different constants</p>",
        "id": 195657074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132208
    },
    {
        "content": "<p>A reasonable alternative implementation has the <code>sorry</code> macro get a tag that is renewed every time the word <code>sorry</code> is parsed</p>",
        "id": 195657077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132210
    },
    {
        "content": "<p>so like those private definitions with those big numbers</p>",
        "id": 195657088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588132239
    },
    {
        "content": "<p>yes</p>",
        "id": 195657090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132242
    },
    {
        "content": "<p>I don't know if the numbers would be public in this case though</p>",
        "id": 195657094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132257
    },
    {
        "content": "<p>if they are internal to the macro then they can't be forged</p>",
        "id": 195657101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132270
    },
    {
        "content": "<p>But it would not fix that time Patrick wrote something like <code>def smooth (f : real -&gt; real) : Prop := sorry</code> and <code>lemma smooth_constant (r) : smooth (\\lam _, r)</code> and then found he could prove that all functions were <code>smooth</code>.</p>",
        "id": 195657126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132301
    },
    {
        "content": "<p>they would be part of the <code>macro_def</code> object that is not inspectable from lean</p>",
        "id": 195657137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132307
    },
    {
        "content": "<p><code>sorry</code> could capture its entire local context</p>",
        "id": 195657198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132339
    },
    {
        "content": "<p>Yes, that's true.</p>",
        "id": 195657208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132351
    },
    {
        "content": "<p>I don't think I ever sorried data from the day I saw Patrick's example</p>",
        "id": 195666143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588142330
    },
    {
        "content": "<p>note that there is an easy workaround for patrick's example, which is to sorry the function after reverting everything, i.e. <code>def smooth : (real -&gt; real) -&gt; Prop := sorry</code></p>",
        "id": 195666739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588142864
    },
    {
        "content": "<p>In fact, it would be an easy fix to the <code>sorry</code> tactic to make it call <code>revert_all</code> first</p>",
        "id": 195666848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588142892
    },
    {
        "content": "<p>and then at least <code>def smooth (f : real -&gt; real) : Prop := by sorry</code> would have the right behavior</p>",
        "id": 195666887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588142922
    },
    {
        "content": "<p>You can just use <code>constant smooth</code> as well</p>",
        "id": 195684211,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588153685
    },
    {
        "content": "<p>why could he prove that all functions were smooth?</p>",
        "id": 195685384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588154247
    },
    {
        "content": "<p>When you write <code>def smooth (f : real -&gt; real) : Prop := sorry</code>, <code>sorry</code> is basically like <code>choice Prop</code>. So in particular it does not depend on <code>f</code>, and so this function, whatever it is, is a constant function.</p>",
        "id": 195686522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588154782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">smooth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">smooth_constant</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">smooth_all</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">smooth_constant</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 195686953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588155015
    },
    {
        "content": "<p>wow</p>",
        "id": 195686955,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588155017
    }
]