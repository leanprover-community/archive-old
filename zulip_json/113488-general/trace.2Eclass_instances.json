[
    {
        "content": "<p>Is there a way of finding the actual instance search that's failing <code>trace.class_instances</code> requires me to scroll through a lot of useless information, and sometimes I can't even find anything. Is it possible to write some new option for this?</p>",
        "id": 170886210,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563192288
    },
    {
        "content": "<p>If type class resolution loops, I get the usual max depth reached error, but even with<br>\n<code>set_option trace.class_instances true</code><br>\nI only see traces for other type class resolutions, the one that loops just says <code>maximum class-instance resolution depth has been reached</code> etc. Is that how it works, or am I missing something? (I'm in vscode)</p>",
        "id": 211382561,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601154120
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.unique_factorization_domain</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">associated.setoid</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">int.gcd_eq_inf</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">ℤ</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>And my infoview:<br>\n<a href=\"/user_uploads/3121/AnPZ2ThGYdsCaHZnZ79yj-8n/mwe.PNG.jpg\">mwe.PNG.jpg</a> <br>\nAlso, why do things seem to be duplicated?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AnPZ2ThGYdsCaHZnZ79yj-8n/mwe.PNG.jpg\" title=\"mwe.PNG.jpg\"><img src=\"/user_uploads/3121/AnPZ2ThGYdsCaHZnZ79yj-8n/mwe.PNG.jpg\"></a></div>",
        "id": 211384071,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601156811
    },
    {
        "content": "<p>The resolution that is problematic is the one you can see when selecting <code>⊓</code>. The error is just shown in a weird place.</p>",
        "id": 211385081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158686
    },
    {
        "content": "<p>The offending instances that loop are<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_factorization_monoid.to_wf_dvd_monoid\">docs#unique_factorization_monoid.to_wf_dvd_monoid</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ufm_of_gcd_of_wf_dvd_monoid\">docs#ufm_of_gcd_of_wf_dvd_monoid</a></p>",
        "id": 211385091,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158710
    },
    {
        "content": "<p>One of them should not be an instance.</p>",
        "id": 211385093,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158716
    },
    {
        "content": "<p>The reason that errors are duplicated is (I'm guessing) that Lean is backtracking after a first error, tries something else, and then hits the same error.</p>",
        "id": 211385102,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> added/modified these instances in <a href=\"https://github.com/leanprover-community/mathlib/issues/4156\">#4156</a>. Can you make one of them not an instance?</p>",
        "id": 211385188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601158910
    },
    {
        "content": "<p>Probably <code>ufm_of_gcd_of_wf_dvd_monoid</code> should not be an instance.</p>",
        "id": 211385269,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601159013
    },
    {
        "content": "<p>Ideally the <code>fails_quickly</code> linter should have caught this. However, the loop only happens if you have a <code>[gcd_monoid α]</code> instance, which is not the case in the test of the linter.</p>",
        "id": 211385335,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601159099
    },
    {
        "content": "<p>Thanks Floris, I see it now!<br>\nFWIW the error goes away when you also <code>import ring_theory.principal_ideal_domain</code></p>",
        "id": 211385842,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1601160040
    }
]