[
    {
        "content": "<p>I'm currently defining list.chain_dedup' in <a href=\"https://github.com/leanprover-community/mathlib/pull/11934\">#11934</a>, and there's been a lot of discussion about the name. There's almost two separate things:</p>",
        "id": 271845847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644854026
    },
    {
        "content": "<p>/poll What should the function <code>[1,1,1,2,3,3] -&gt; [1,2,3]</code> be called?<br>\n<code>norep</code><br>\n<code>chain_dedup</code><br>\n<code>squeeze</code><br>\n<code>uniq</code><br>\n<code>erase_rep</code></p>",
        "id": 271845886,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644854038
    },
    {
        "content": "<p>But secondly, we currently have <code>chain</code> and <code>chain'</code>, with <code>chain a l</code> talking about <code>a :: l</code> whilst <code>chain' l</code> talks about the list itself. I understand that <code>chain a l</code> may be the more sensible CS notion, but as a mathematician I see zero sense in it and would much rather talk about <code>chain' l</code> almost exclusively. I propose we swap these names; is there people against this?</p>",
        "id": 271845934,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644854043
    },
    {
        "content": "<p>I find myself mostly using <code>chain</code>, actually, so I'm not sure the argument holds.</p>",
        "id": 271846088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644854115
    },
    {
        "content": "<p>How come?</p>",
        "id": 271846408,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644854242
    },
    {
        "content": "<p>I don't actually know. I think it's because the empty list is pathological where I use it, so using <code>chain</code> is a nice sweep-under-the-rug way to forget about it. When I have a <code>chain'</code>, the first thing I do is to case on the list to get back to <code>chain</code>.</p>",
        "id": 271846785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644854394
    },
    {
        "content": "<p>If you're able to modify the poll question, you might want to make it clear this function is only removing consecutive repeats, so <code>[2, 2, 3, 3, 2] -&gt; [2, 3, 2]</code></p>",
        "id": 271847755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644854665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Here's another argument: <code>chain</code> seems to be the auxiliary definition for <code>chain'</code>. It's asymmetric, giving you an argument for the pre-head (why not the post-tail?)</p>",
        "id": 271849180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644855261
    },
    {
        "content": "<p>A term for consecutive repeated elements of a sequence is “suttering”, I believe, e.g. in state machine machines. I hence added <code>erase_stutter</code> to the list of options</p>",
        "id": 271857307,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644858638
    },
    {
        "content": "<p>Obscure, but I like it!</p>",
        "id": 271857374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644858664
    },
    {
        "content": "<p>There is precedence in the Software Foundations book that teaches ITP with Coq: <a href=\"https://github.com/bishboria/software-foundations/blob/master/MoreLogic.v#L161\">https://github.com/bishboria/software-foundations/blob/master/MoreLogic.v#L161</a></p>",
        "id": 271857436,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644858694
    },
    {
        "content": "<p>Collecting rationales for some of the names:</p>\n<ul>\n<li><code>norep</code> came from a Haskell library</li>\n<li><code>uniq</code> came from a Haskell library and Unix</li>\n<li><code>chain_dedup</code> deduplicates elements in the chainward direction</li>\n<li><code>erase_rep</code> mirrors <code>erase_dup</code>, where it seems plausible that there could be a distinction between repetitions and duplications</li>\n<li><code>erase_consecutive_dup</code> is a clear modification of <code>erase_dup</code></li>\n<li><code>erase_stutter</code> evokes localized repetition, which is a fairly clear metaphor</li>\n<li><code>squeeze</code> evokes physically compressing a list, which is less clear</li>\n</ul>",
        "id": 271859306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644859533
    },
    {
        "content": "<p>uniq is also how unix uniq works.</p>",
        "id": 271859406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644859567
    },
    {
        "content": "<p>If we're making an erase_rep, can that be the prod.fst map out of a \"counter\" function that we write? Otherwise, we'll want that counter later anyway.</p>",
        "id": 271861565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644860536
    },
    {
        "content": "<p>Oh, I read <code>erase_rep</code> as \"erase representative\".</p>",
        "id": 271862015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644860748
    },
    {
        "content": "<p><code>erase_rpt</code>?</p>",
        "id": 271862165,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1644860801
    },
    {
        "content": "<p><code>erase_repeat</code>?</p>",
        "id": 271862215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644860827
    },
    {
        "content": "<p>Googling <code>destutter</code> seems to return a reasonable amount of results, so I added that. By the way, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">erase_dup</span> <span class=\"n\">l</span> <span class=\"n\">removes</span> <span class=\"n\">duplicates</span> <span class=\"k\">from</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">taking</span> <span class=\"n\">only</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">occurrence</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">Defined</span> <span class=\"n\">as</span> <span class=\"n\">pw_filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">erase_dup</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.erase_dup\">docs#list.erase_dup</a><br>\nWhy does this not return [1,0,2] ?</p>",
        "id": 271909179,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1644884414
    },
    {
        "content": "<p>The doc is lying, it works from right to left</p>",
        "id": 271912094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644886564
    },
    {
        "content": "<p>I ended up going for <code>destutter</code>, now that I finished generalizing to an arbitrary relation. <code>erase_stutter</code> felt a bit too long. I also swapped the <code>'</code>s compared to <code>chain'</code>, now that it doesn't mention it in the name. (And I think that this time, <code>destutter</code> really is the more correct notion  99% of the time - for example, you only have <code>(l.destutter' R a).chain R a</code> if <code>R</code> is reflexive, which is often not the case for these usecases).</p>",
        "id": 271974777,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644932606
    },
    {
        "content": "<p>It seems like we should rename <code>erase_dup</code> to <code>dedup</code> if we're going to call it <code>destutter</code></p>",
        "id": 271974922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644932678
    },
    {
        "content": "<p>Is dedup currently the property of being equal to your own erase_dup?</p>",
        "id": 271975300,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644932840
    },
    {
        "content": "<p>Also, what's the difference between pw_filter (≠) and erase_dup? Maybe that's the correct way, just use the more general</p>",
        "id": 271975376,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644932881
    },
    {
        "content": "<p>No, that's <code>nodup</code></p>",
        "id": 271975615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644932980
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.erase_dup\">docs#list.erase_dup</a> is <em>defined</em> as <code>pw_filter (≠)</code></p>",
        "id": 271975759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644933025
    },
    {
        "content": "<p>why do we keep it around then?</p>",
        "id": 271976112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644933217
    },
    {
        "content": "<p>because it's very common?</p>",
        "id": 271976150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644933233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/name.20for.20.60erase_dup.60/near/271974922\">said</a>:</p>\n<blockquote>\n<p>It seems like we should rename <code>erase_dup</code> to <code>dedup</code> if we're going to call it <code>destutter</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12057\">#12057</a></p>",
        "id": 271986739,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644937423
    }
]