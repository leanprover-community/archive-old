[
    {
        "content": "<p>I don't have a good strategy for debugging errors like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">galois_connection</span><span class=\"bp\">.</span><span class=\"n\">l_supr</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">gc</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">gc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">galois_connection</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">interior</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">galois_connection</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n</pre></div>\n\n\n<p>My initial reaction is: Hey Lean, look, you just figured out what <code>?m_5</code> and <code>?m_6</code> are. Unify, and move on.<br>\nBut apparently Lean thinks otherwise...</p>",
        "id": 147375133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774022
    },
    {
        "content": "<p>I would <code>set_option pp.all true</code>, but that's me</p>",
        "id": 147375216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774100
    },
    {
        "content": "<p>I'll try, but I fear that I get something extremely long and complicated.</p>",
        "id": 147375240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774125
    },
    {
        "content": "<p>I'm not afraid of that</p>",
        "id": 147375263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774152
    },
    {
        "content": "<p>This pattern shows up a lot when there's a type class argument to <code>galois_connection.l_supr</code> that <code>opens.gc</code> doesn't satisfy.</p>",
        "id": 147375316,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1541774176
    },
    {
        "content": "<p>Hmmm, it's even reasonable short:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  @galois_connection.l_supr.{?l_1 ?l_2 ?l_3} ?m_4 ?m_5 ?m_6 ?m_7 ?m_8 ?m_9 ?m_10\n    (@topological_space.opens.gc.{?l_11} ?m_12 ?m_13)\nterm\n  @topological_space.opens.gc.{?l_1} ?m_2 ?m_3\nhas type\n  @galois_connection.{?l_1 ?l_1}\n    (@subtype.{(max (?l_1+1) 1)} (set.{?l_1} ?m_2) (λ (s : set.{?l_1} ?m_2), @is_open.{?l_1} ?m_2 ?m_3 s))\n    (set.{?l_1} ?m_2)\n    (@subtype.preorder.{?l_1} (set.{?l_1} ?m_2)\n       (@partial_order.to_preorder.{?l_1} (set.{?l_1} ?m_2)\n          (@lattice.order_bot.to_partial_order.{?l_1} (set.{?l_1} ?m_2)\n             (@lattice.bounded_lattice.to_order_bot.{?l_1} (set.{?l_1} ?m_2)\n                (@lattice.complete_lattice.to_bounded_lattice.{?l_1} (set.{?l_1} ?m_2)\n                   (@set.lattice_set.{?l_1} ?m_2)))))\n       (λ (s : set.{?l_1} ?m_2), @is_open.{?l_1} ?m_2 ?m_3 s))\n    (@partial_order.to_preorder.{?l_1} (set.{?l_1} ?m_2)\n       (@lattice.order_bot.to_partial_order.{?l_1} (set.{?l_1} ?m_2)\n          (@lattice.bounded_lattice.to_order_bot.{?l_1} (set.{?l_1} ?m_2)\n             (@lattice.complete_lattice.to_bounded_lattice.{?l_1} (set.{?l_1} ?m_2) (@set.lattice_set.{?l_1} ?m_2)))))\n    (@subtype.val.{(max (?l_1+1) 1)} (set.{?l_1} ?m_2) (λ (s : set.{?l_1} ?m_2), @is_open.{?l_1} ?m_2 ?m_3 s))\n    (@topological_space.opens.interior.{?l_1} ?m_2 ?m_3)\nbut is expected to have type\n  @galois_connection.{?l_1 ?l_2} ?m_3 ?m_4\n    (@partial_order.to_preorder.{?l_1} ?m_3\n       (@lattice.order_bot.to_partial_order.{?l_1} ?m_3\n          (@lattice.bounded_lattice.to_order_bot.{?l_1} ?m_3\n             (@lattice.complete_lattice.to_bounded_lattice.{?l_1} ?m_3 ?m_5))))\n    (@partial_order.to_preorder.{?l_2} ?m_4\n       (@lattice.order_bot.to_partial_order.{?l_2} ?m_4\n          (@lattice.bounded_lattice.to_order_bot.{?l_2} ?m_4\n             (@lattice.complete_lattice.to_bounded_lattice.{?l_2} ?m_4 ?m_6))))\n</pre></div>",
        "id": 147375361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> That's probably what's going on here.</p>",
        "id": 147375378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774270
    },
    {
        "content": "<p>when I can't handle it, I use <a href=\"https://text-compare.com\" target=\"_blank\" title=\"https://text-compare.com\">https://text-compare.com</a></p>",
        "id": 147375392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774280
    },
    {
        "content": "<p>and in some rare cases it's some universe issues</p>",
        "id": 147375456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774305
    },
    {
        "content": "<p>Otoh, I think all typeclass instances ought to be satisfied.</p>",
        "id": 147375481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> There are two <code>sorry</code>s in <code>sheaf.lean</code>. They are math-trivial, but I find them Lean-hard.</p>",
        "id": 147375700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774565
    },
    {
        "content": "<p>link?</p>",
        "id": 147375716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774582
    },
    {
        "content": "<p>If you have some time, I would be really happy if you could take a look.</p>",
        "id": 147375725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774586
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L262\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L262\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L262</a></p>",
        "id": 147375762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774624
    },
    {
        "content": "<p>I think you have a rather different definition of \"math-trivial\"</p>",
        "id": 147375817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774660
    },
    {
        "content": "<p>What this is saying is, you've got an open set <code>V</code> and a cover <code>Us</code> of an open set <code>U</code>. And <code>V ⊆ U</code>.</p>",
        "id": 147375819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774665
    },
    {
        "content": "<p>Now you intersect all the <code>Ui</code> in <code>Us</code> with <code>V</code>, and the result covers <code>V</code>.</p>",
        "id": 147375831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774686
    },
    {
        "content": "<p>can you show me the context?</p>",
        "id": 147375838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774693
    },
    {
        "content": "<p>You mean explain the context?</p>",
        "id": 147375850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774708
    },
    {
        "content": "<p>no, the context</p>",
        "id": 147375853,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774713
    },
    {
        "content": "<p>Aaah</p>",
        "id": 147375866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">Us_cover</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Ui</span> <span class=\"err\">∈</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Ui</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>",
        "id": 147375878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774736
    },
    {
        "content": "<p>So I want to show that <code>V ⊆ ⨆ Ui, (V ∩ Ui)</code>.</p>",
        "id": 147375942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774765
    },
    {
        "content": "<p>That is the math version of the goal.</p>",
        "id": 147375950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774773
    },
    {
        "content": "<p>where is V on the right hand side?</p>",
        "id": 147375958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541774783
    },
    {
        "content": "<p><code>V : opens X</code></p>",
        "id": 147375972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774792
    },
    {
        "content": "<p>Aah, it is hidden in <code>comap i</code></p>",
        "id": 147375980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774803
    },
    {
        "content": "<p>Which in this setting just means: <code>V ∩ _</code></p>",
        "id": 147375990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774824
    },
    {
        "content": "<p>Now I would think that <code>opens.gc</code> should let me transform the right hand side from<br>\n<code>(⨆ (Ui : over U) (H : Ui ∈ Us), ((over.comap i).obj Ui).left).val</code> into<br>\n<code>⨆ (Ui : over U) (H : Ui ∈ Us), (((over.comap i).obj Ui).left).val</code>.<br>\n(I moved a parentheses to before <code>over.comap</code>.)</p>",
        "id": 147376084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541774912
    },
    {
        "content": "<p>do you know what it is definitionally equivalent to?</p>",
        "id": 147376244,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775085
    },
    {
        "content": "<p>if not can you just unfold everything?</p>",
        "id": 147376250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775092
    },
    {
        "content": "<p>If this goal could be transformed into <code>V.val ∩ Ui.left.val ≤ (over.comap i) blah).val</code> for all <code>Ui</code>, then I could take it from there.</p>",
        "id": 147376252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775092
    },
    {
        "content": "<p>if you <code>intro x</code>, then <code>i x</code> says that <code>x \\in U</code> right</p>",
        "id": 147376399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775232
    },
    {
        "content": "<p>then you rewrite <code>Us_cover</code></p>",
        "id": 147376408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775238
    },
    {
        "content": "<p>Ok</p>",
        "id": 147376455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775246
    },
    {
        "content": "<p>so now it says <code>x \\in set.bUnion _</code></p>",
        "id": 147376463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775252
    },
    {
        "content": "<p><del>Make that an <code>x</code></del></p>",
        "id": 147376471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775262
    },
    {
        "content": "<p>then <code>set.mem_bUnion_iff</code> or something should give you something useful</p>",
        "id": 147376502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775298
    },
    {
        "content": "<p>Now I want to extract a <code>Ui</code> that contains <code>x</code></p>",
        "id": 147376505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775300
    },
    {
        "content": "<p>Aah, let me try to find that one.</p>",
        "id": 147376520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775312
    },
    {
        "content": "<p>Except that it is a <code>supr</code> instead of a <code>bUnion</code>.</p>",
        "id": 147376595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775383
    },
    {
        "content": "<p>aren't they defeq?</p>",
        "id": 147376607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775395
    },
    {
        "content": "<p>There should be a <code>lattice.mem_supr_iff</code>.</p>",
        "id": 147376616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775406
    },
    {
        "content": "<p>Aah, probably yes. I'll try.</p>",
        "id": 147376618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775414
    },
    {
        "content": "<p>you can't be the member of just any supremum</p>",
        "id": 147376619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541775418
    },
    {
        "content": "<p>Yay! First use of <code>erw</code> in my Lean-life. Context is now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">Us_cover</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)),</span>\n    <span class=\"n\">x_1</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">x_1</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Ui</span> <span class=\"err\">∈</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Ui</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>",
        "id": 147376886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775645
    },
    {
        "content": "<p>That looks encouraging, right? Especially that <code>order_dual</code> that is leaking through.</p>",
        "id": 147376921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775673
    },
    {
        "content": "<p>Ok, need to go. But now I think I can complete this. Thanks a lot!</p>",
        "id": 147377202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541775945
    }
]