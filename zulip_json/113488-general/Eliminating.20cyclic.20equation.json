[
    {
        "content": "<p>Is there a tactic that can eliminate <code>h</code> in the following example?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199180037,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590770641
    },
    {
        "content": "<p>I'm sure this should be in the library but <code>library_search</code> fails.<br>\nAnyway, I was able to prove it using induction:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199182489,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590771755
    },
    {
        "content": "<p>Thanks. I should have mentioned this, but I'm looking for a tactic that will eliminate such 'cyclic' equations for any inductive type. There's a general principle behind this: <code>x = C1 ... (C2 ... x ...) ...</code>, where the <code>Ci</code> are constructors, is always false. I know how to write such a tactic (in principle); I'd just prefer not to. ;)</p>",
        "id": 199183627,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590772321
    },
    {
        "content": "<p>I recall this coming up on the Isabelle list in the recent past. The suggested method, which would work here as well, is to prove that <code>T.sizeof a &lt; T.sizeof b</code> if a is structurally contained in b, and deduce <code>a != b</code></p>",
        "id": 199218399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590790129
    },
    {
        "content": "<p>For the special case of nat of course this isn't necessary, you can just apply <code>ne_of_lt</code> and apply <code>lt_succ_self</code></p>",
        "id": 199218459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590790170
    },
    {
        "content": "<p>if you want something short and sweet that you can put in a tactic, it would be something like <code>apply ne_of_sizeof_lt, simp_only [T.sizeof], linarith</code></p>",
        "id": 199218706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590790318
    },
    {
        "content": "<p>Ah, so we already have <code>sizeof</code>. Nice, the rest should be easy-ish. I'll put a tactic together.</p>",
        "id": 199388582,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1591027995
    }
]