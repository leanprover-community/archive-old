[
    {
        "content": "<p>Hello, I discovered a behaviour of <code>tactic.to_expr</code>, pexpr quotations and antiquotations which puzzles me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">quotation_test</span> <span class=\"o\">(</span><span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">((</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;from&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">((</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">i_to_expr</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n   <span class=\"n\">f</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">i_to_expr</span> <span class=\"n\">pf</span><span class=\"o\">,</span>\n   <span class=\"n\">f&#39;</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"err\">%%</span><span class=\"n\">f</span><span class=\"o\">),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>    <span class=\"c1\">-- outputs: @id.{1} (nat → nat) nat.succ</span>\n   <span class=\"c1\">-- uncomment these lines to get an error two lines above</span>\n<span class=\"c1\">--    x&#39; ← tactic.to_expr ``(%%f&#39; %%x),</span>\n<span class=\"c1\">--    tactic.trace x&#39;,</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">quotation_test</span> <span class=\"k\">from</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Uncommenting the indicated lines gives <code>type mismatch at application:  @id.{1} ?m_1 (nat → nat)</code>, that is a different interpretation of  <code>id %%f</code> in which apparently the correctly inferred implicit argument <code>nat  → nat</code> is taken as the first explicit argument.</p>\n<p>I admit that I do not have a good understanding of Lean's quotation magic, but if <code>to_expr</code> were a pure function only depending on its argument and the main goal as indicated in the documentation, I think this should not happen.<br>\nDocumentation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Elaborate the given quoted expression with respect to the current main goal.</span>\n<span class=\"cm\">    If `allow_mvars` is tt, then metavariables are tolerated and become new goals if `subgoals` is tt. -/</span>\n<span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">to_expr</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">allow_mvars</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 196757568,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588851085
    },
    {
        "content": "<p>Even if the error points at the first expression, it is most likely raised when elaborating the second expression (after the first one was inserted into it)</p>",
        "id": 196758227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588851535
    },
    {
        "content": "<p>You might have hit an edge case of inserting <code>expr</code>s into <code>pexpr</code>s. The robust solution is to try and avoiding doing that.</p>",
        "id": 196758388,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588851635
    },
    {
        "content": "<p>Thank you. Yes, I can also build the term manually without help by the elaborator.<br>\nBut I thought inserting <code>expr</code>s into <code>pexpr</code>s was the way to go?<br>\nIn the Tactic Paper it says: \"What makes pre-expressions especially useful is that they can contain antiquotations, namely, values of type expr that should be inserted when a metaprogram is executed.\" (p. 8)</p>",
        "id": 196759422,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588852378
    },
    {
        "content": "<p>I mean \"A Metaprgramming Framework for Formal Verification\" by Tactic paper</p>",
        "id": 196759486,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588852436
    },
    {
        "content": "<p>at least <code>to_expr</code> and a certain <code>pexpr</code>was used there as well</p>",
        "id": 196759932,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588852790
    },
    {
        "content": "<p>Antiquoting atomic <code>expr</code>s as in the paper example is definitely safe. It could be that specifically using them in function call position is problematic, since elaboration of applications is pretty involved. Using them as arguments should be fine.</p>",
        "id": 196760119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588852874
    },
    {
        "content": "<p><code>pexpr.subst</code>however seems to have disappeared</p>",
        "id": 196760215,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588852934
    },
    {
        "content": "<p>The C++ Lean code embeds terms into preterms only in a few specific cases, so any usages not covered by that might be brittle</p>",
        "id": 196760241,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588852955
    },
    {
        "content": "<p>yes, all variants without the antiquotation in function position i could think of worked</p>",
        "id": 196760293,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588852989
    },
    {
        "content": "<p>I think it has been generalized to <code>expr.subst</code></p>",
        "id": 196760295,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588852990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> <a href=\"#narrow/stream/113488-general/topic/to_expr.20mystery/near/196760215\" title=\"#narrow/stream/113488-general/topic/to_expr.20mystery/near/196760215\">said</a>:</p>\n<blockquote>\n<p><code>pexpr.subst</code>however seems to have disappeared</p>\n</blockquote>\n<p>It's now called <code>expr.subst</code>.</p>",
        "id": 196760304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588852996
    },
    {
        "content": "<p>ah, thanks</p>",
        "id": 196760350,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588853037
    },
    {
        "content": "<p>Okay, let's leave it there, no antiquotations of expr in pexpr in function position. Thanks you two!</p>",
        "id": 196760506,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588853156
    },
    {
        "content": "<p>Lean 4 doesn't support embedding terms (<code>Expr</code>) into preterms (<code>Syntax</code>) since it doesn't need that anymore itself, so it will be interesting to see how that influences tactic writing. It's of course possible to implement such an embedding manually, just not in constant time.</p>",
        "id": 196760633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588853237
    },
    {
        "content": "<p>I think in tactic writing, <code>pexpr</code>s are mainly used to access the power of the elaborator and skip implicit arguments when building terms. If Lean 4 has another mechanism for that, it will work just as well</p>",
        "id": 196760832,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1588853391
    }
]