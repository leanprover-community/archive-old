[
    {
        "content": "<p>I still don't know much about quotients in Lean. I have the goal <code>{x : completion α × completion α | (g x.1, g x.2) ∈ r} ∈ uniformity.sets</code>. And <code>completion α</code> is the quotient of something, and <code>g</code> is induced by <code>h</code> defined before quotienting. So I'd like to rewrite the left hand side as the image under <code>lam y, (quotient.mk y.1,  quotient.mk y.2)</code> of the obvious set where  <code>(g x.1, g x.2)</code> becomes <code>(h y.1, h y.2)</code>. How can I do that? Should I do that?</p>",
        "id": 129697433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531651816
    },
    {
        "content": "<p>I proved it, but it's not pretty. I think there's a demand for more advanced versions of cases which can deal with quotients, bound variables, and things like turning <code>f : α → β × β</code> to <code>f₁ f₂ : α → β</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hh</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">⟦</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">⟧</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">⟧</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Hh</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"err\">⟦</span><span class=\"n\">b₁</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">∧</span> <span class=\"err\">⟦</span><span class=\"n\">b₂</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n     <span class=\"n\">h₃</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">▸</span> <span class=\"n\">h₃</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129698784,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654664
    },
    {
        "content": "<p><code>induction</code> for quotients is a feature I want in lean 4</p>",
        "id": 129698842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654740
    },
    {
        "content": "<p>There's no reason why it can't be done in lean 3 is there?</p>",
        "id": 129698851,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654775
    },
    {
        "content": "<p>I'm not sure how replicable <code>induction</code> is</p>",
        "id": 129698890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654804
    },
    {
        "content": "<p>Is it C++?</p>",
        "id": 129698894,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654820
    },
    {
        "content": "<p>mostly</p>",
        "id": 129698895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654832
    },
    {
        "content": "<p>Isn't it just basically <code>revert, refine quotient.induction_on _ _, intros</code></p>",
        "id": 129698897,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654854
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">qindunction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">using_ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">revert_kdependencies</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">intros</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 129698941,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654924
    },
    {
        "content": "<p>Here's a really dumb question about quotients. It seems to me that instead of using the quotient type one could just use an inductive type: the quotient of <code>X</code> by <code>r</code> could be <code>{x : set X // I am an equivalence class}</code> and the facts about quotients that don't come for free in type theory could be added as axioms about this subtype. Why is it not done this way?</p>",
        "id": 129698945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654936
    },
    {
        "content": "<p>Then quotients would be easier to think about</p>",
        "id": 129698949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531654949
    },
    {
        "content": "<p>Sure, you can do that</p>",
        "id": 129698951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654959
    },
    {
        "content": "<p>Computablity perhaps?</p>",
        "id": 129698953,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531654961
    },
    {
        "content": "<p>some facts need the axiom of choice</p>",
        "id": 129698954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654968
    },
    {
        "content": "<p>and it's not data when you do that</p>",
        "id": 129698955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531654979
    },
    {
        "content": "<p>It's very nice to have the definitional reduction of <code>quotient.lift</code></p>",
        "id": 129698961,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531655006
    },
    {
        "content": "<p>You can't get that with any construction</p>",
        "id": 129698962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655026
    },
    {
        "content": "<p>and that adds real power - <code>funext</code> is <em>proven using quotients</em></p>",
        "id": 129699003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655055
    },
    {
        "content": "<p>Thank you very much Chris!</p>",
        "id": 129699004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655074
    },
    {
        "content": "<p>I hope I'll be able to use that.</p>",
        "id": 129699006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655084
    },
    {
        "content": "<p>In fact, I highly recommend reading the proof of <code>funext</code>. It's quite the mind bender</p>",
        "id": 129699009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655100
    },
    {
        "content": "<p>This is explained in TPIL</p>",
        "id": 129699018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655113
    },
    {
        "content": "<p>It's really not obvious why you can't use set-quotients to do the same proof</p>",
        "id": 129699021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655145
    },
    {
        "content": "<p>oh my goodness Chris is posting meta code. How things move on! Two weeks ago he was asking me what a monad was.</p>",
        "id": 129699022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655148
    },
    {
        "content": "<p>Kevin, I don't understand why you'd want this set-theoretic construction. I actually spend quite a lot of time explaining to my students that this construction is a lie. What matter about quotients are the axioms enforced in Lean.</p>",
        "id": 129699068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655181
    },
    {
        "content": "<p>To me the set theoretic quotient is the same level of lie as the Kuratowski pair definition</p>",
        "id": 129699086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655259
    },
    {
        "content": "<p>But an obvious question with that is why quotients and not other things?</p>",
        "id": 129699088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655271
    },
    {
        "content": "<p>Oh that's an interesting comment Patrick. The truth of the matter was that I was watching a school play with one of my kids in, which turned out to be over three hours long, and so I spent most of the last 90 minutes thinking about other ways of doing quotients in my head in the dark</p>",
        "id": 129699127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655284
    },
    {
        "content": "<p>Mario, I'm not sure what is \"that\" in your latest message</p>",
        "id": 129699144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655345
    },
    {
        "content": "<p>Why do quotients get an axiomatic definition but, say, real numbers don't?</p>",
        "id": 129699157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655390
    },
    {
        "content": "<p>is there a sense in which lean's type formers are \"complete\" with quotients but not without?</p>",
        "id": 129699207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655455
    },
    {
        "content": "<p>I think most people in France teach the set-theoretic quotient and never explicitly say it's a lie. Students are expected to magically understand what really matters</p>",
        "id": 129699212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655471
    },
    {
        "content": "<blockquote>\n<p>In fact, I highly recommend reading the proof of <code>funext</code>. It's quite the mind bender</p>\n</blockquote>\n<p>Funnily enough I tried this only recently, when I realised that I was going to have to learn how to use quotients. </p>\n<p>I have been writing about \"the three basic kinds of types\", trying to explain them to mathematicians. All this came from my trying to figure out why there were three basic kinds of types at all -- inductive types and pi types sure, and now quotients -- why can't we just do them with inductive types? In some sense Patrick's comments are quite a good answer to this -- I am now thinking that the construction I've known all my working life is just a hack.</p>",
        "id": 129699213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655474
    },
    {
        "content": "<p>That's actually a good question - why are quotients not an inductive type?</p>",
        "id": 129699224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655516
    },
    {
        "content": "<p>and I think almost no university seriously teaches the construction of real numbers</p>",
        "id": 129699225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655521
    },
    {
        "content": "<p>Quotients as sets of sets is the ZFC construction of the object which has the right universal property.</p>",
        "id": 129699267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655539
    },
    {
        "content": "<p>HoTT has an interesting answer to this: they are a \"higher inductive type\"</p>",
        "id": 129699268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655548
    },
    {
        "content": "<p>The point is that in type theory, set-quotients do not have the right universal property</p>",
        "id": 129699270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655574
    },
    {
        "content": "<p>?</p>",
        "id": 129699274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655585
    },
    {
        "content": "<p>They lack the computation rule</p>",
        "id": 129699278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655594
    },
    {
        "content": "<p>which one is that?</p>",
        "id": 129699280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655602
    },
    {
        "content": "<p><code>lift f (mk a) = f a</code></p>",
        "id": 129699281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655614
    },
    {
        "content": "<p>It is true, but not <code>rfl</code></p>",
        "id": 129699321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531655651
    },
    {
        "content": "<p>\"lack\" :-)</p>",
        "id": 129699323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655667
    },
    {
        "content": "<p>because in type theory <em>definitional equality matters</em></p>",
        "id": 129699325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655693
    },
    {
        "content": "<p>Yes!</p>",
        "id": 129699326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655698
    },
    {
        "content": "<p>I understand this much better than I did a few months ago. Perhaps this is obvious to CS people. I think it really needs to be spelt out to mathematicians.</p>",
        "id": 129699333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655727
    },
    {
        "content": "<p>HoTT is of course all about exploring the nontrivial structure of equality, where definitional equality is the equalest equal</p>",
        "id": 129699334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655742
    },
    {
        "content": "<p>All equalities are equal, but some are more equal than others.</p>",
        "id": 129699372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655764
    },
    {
        "content": "<p>Kevin, did you read the first chapter of the HoTT book?</p>",
        "id": 129699375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655792
    },
    {
        "content": "<p>no</p>",
        "id": 129699376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655798
    },
    {
        "content": "<p>You should</p>",
        "id": 129699377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655803
    },
    {
        "content": "<p>It's a really good intro to dependent type theory</p>",
        "id": 129699380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655817
    },
    {
        "content": "<p>Thanks. I'm always looking for new things to read, even though reading is so 1990s</p>",
        "id": 129699381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655820
    },
    {
        "content": "<p>My kids don't read anything.</p>",
        "id": 129699387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655828
    },
    {
        "content": "<p>They just google</p>",
        "id": 129699390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655835
    },
    {
        "content": "<p>Also you will find some decent material on HITs there</p>",
        "id": 129699393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655853
    },
    {
        "content": "<p><a href=\"http://saunders.phil.cmu.edu/book/hott-online.pdf\" target=\"_blank\" title=\"http://saunders.phil.cmu.edu/book/hott-online.pdf\">http://saunders.phil.cmu.edu/book/hott-online.pdf</a></p>",
        "id": 129699394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531655855
    },
    {
        "content": "<p>HoTT has some much more exotic HITs than quotients</p>",
        "id": 129699395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655877
    },
    {
        "content": "<p>like \"the circle\" <code>S1</code>, which is \"inductively generated\" by <code>base : S1</code> and <code>loop : base = base</code></p>",
        "id": 129699437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655909
    },
    {
        "content": "<p>In HoTT you can prove that <code>loop</code> is not <code>rfl</code></p>",
        "id": 129699441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531655934
    },
    {
        "content": "<p>In HoTT can you define the notion of a finite set? Can you use the axiom of choice?</p>",
        "id": 129699448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531655976
    },
    {
        "content": "<p>You can do pretty much everything in classical math</p>",
        "id": 129699451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656000
    },
    {
        "content": "<p>You have to state the axiom of choice carefully to be consistent with univalence (lean's <code>choice</code> is not consistent with univalence), but it is a reasonable interpretation of ZFC-esque axiom of choice</p>",
        "id": 129699504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656061
    },
    {
        "content": "<p>it's not provable though, it's an axiom</p>",
        "id": 129699511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656075
    },
    {
        "content": "<p>there are more details in the HoTT book for how the axiom of choice works</p>",
        "id": 129699552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656144
    },
    {
        "content": "<p>it uses the \"propositional truncation\" as a substitute for the <code>Prop</code> universe</p>",
        "id": 129699553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656182
    },
    {
        "content": "<p>I was not referring to all this. I really mean Chapter one, about type theory, only slightly biased towards exotic stuff that will follow</p>",
        "id": 129699558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531656189
    },
    {
        "content": "<p>Yes, of course that's more advanced material and more HoTT-y stuff</p>",
        "id": 129699602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656259
    },
    {
        "content": "<p>I know you weren't Patrick, but I mentioned to my old university set theory teacher that I was now doing type theory and he asked me if it was HoTT and if so then could I define a finite set (because he'd heard that it was problematic)</p>",
        "id": 129699604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531656274
    },
    {
        "content": "<p>and I told him that it wasn't and that I had no idea about his question</p>",
        "id": 129699605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531656289
    },
    {
        "content": "<p>If you are specifically interested in finite sets in HoTT, I've had a conversation with Floris on that exact topic (he's our resident expert)</p>",
        "id": 129699618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656362
    },
    {
        "content": "<p>Constructively, there are a few variations on what \"finite\" means</p>",
        "id": 129699658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656381
    },
    {
        "content": "<p>The simplest is something isomorphic to fin n</p>",
        "id": 129699660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656398
    },
    {
        "content": "<p>If we call that one \"finite\", then \"subfinite\" means a subset of a finite set</p>",
        "id": 129699665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656437
    },
    {
        "content": "<p>and equality is undecidable...</p>",
        "id": 129699667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531656471
    },
    {
        "content": "<p>and then there is an image of a finite set (I forget what this is called), and a subset of an image of a finite set</p>",
        "id": 129699702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656483
    },
    {
        "content": "<p>If I assume AC and propext then all these are the same, right?</p>",
        "id": 129699707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531656512
    },
    {
        "content": "<p>Forget about HoTT Kevin, it's all constructive</p>",
        "id": 129699708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531656542
    },
    {
        "content": "<p>We have maths to do instead</p>",
        "id": 129699713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531656554
    },
    {
        "content": "<p>With LEM, you know that the subset is decidable so subfinite and finite are the same</p>",
        "id": 129699717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656575
    },
    {
        "content": "<p>for images, I guess you can get a section out using AC so that becomes the same as finite too</p>",
        "id": 129699753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656604
    },
    {
        "content": "<p>I don't think you need propext for anything</p>",
        "id": 129699764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656622
    },
    {
        "content": "<p>Actually unique choice might be enough for the section thing, since it's a finite choice</p>",
        "id": 129699765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656660
    },
    {
        "content": "<p>Oh yeah, there's another gradation: \"isomorphic to fin n\" or \"merely isomorphic to fin n\"</p>",
        "id": 129699782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656716
    },
    {
        "content": "<p>where \"merely\" is a HoTT adjective meaning \"in Prop\" basically</p>",
        "id": 129699822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656736
    },
    {
        "content": "<p>that's like the difference between \"fintype\" and \"finite\" in lean</p>",
        "id": 129699825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531656775
    },
    {
        "content": "<blockquote>\n<p>You can do pretty much everything in classical math</p>\n<p>Forget about HoTT Kevin, it's all constructive</p>\n</blockquote>\n<p>?</p>",
        "id": 129700080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531657355
    },
    {
        "content": "<p>It's very constructivity-aware, even if there are some classical axioms that are admissible</p>",
        "id": 129700138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657476
    },
    {
        "content": "<p>Lean's choice axiom is much more heavy handed</p>",
        "id": 129700141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657502
    },
    {
        "content": "<p>It's comparable to the status of equality reflection as a type theory axiom</p>",
        "id": 129700150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657551
    },
    {
        "content": "<p>lean doesn't have it, and as a result you have to do all these casts and things</p>",
        "id": 129700190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657575
    },
    {
        "content": "<p>if you have equality reflection then it is much more like working in ZFC, where typing is just a provable property like any other</p>",
        "id": 129700193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657614
    },
    {
        "content": "<p>So even though you can do everything in ZFC in lean, stuff that really doesn't respect types gets messy in lean</p>",
        "id": 129700242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657690
    },
    {
        "content": "<p>(I don't know how helpful this is as an analogy)</p>",
        "id": 129700243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531657709
    },
    {
        "content": "<p>For inducting on quotients, isn't there <code>induction _ using quot.ind</code>?</p>",
        "id": 129701773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1531660853
    },
    {
        "content": "<p>Currently there is <code>quotient_module.quotient</code> and <code>quotient_ring.quotient</code>. They are both defined in terms of <code>_root_.quotient</code>. To me it would make sense to define a <code>quotient_ring</code> as a <code>quotient_module</code> and then add the extra algebraic structure.</p>",
        "id": 134662694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537957511
    },
    {
        "content": "<p>Is there a reason why this is not a good idea?</p>",
        "id": 134662711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537957532
    },
    {
        "content": "<p>Mario is working on module quotient: <a href=\"https://www.twitch.tv/videos/314424360\" target=\"_blank\" title=\"https://www.twitch.tv/videos/314424360\">https://www.twitch.tv/videos/314424360</a></p>",
        "id": 134665140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537960167
    },
    {
        "content": "<p>It's exactly how I imagined Mario doing Lean before meeting him in Orsay</p>",
        "id": 134665214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537960207
    },
    {
        "content": "<p>No, wait!</p>",
        "id": 134665218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537960220
    },
    {
        "content": "<p>It seems that first thing was actually a trailer for the Venom movie</p>",
        "id": 134665227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537960250
    },
    {
        "content": "<p>Now I can see emacs</p>",
        "id": 134665228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537960256
    },
    {
        "content": "<p>Too bad I'm on a train... I don't think they want me to stream twitch over the train wifi</p>",
        "id": 134665632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537960686
    },
    {
        "content": "<p>The Dutch have free WiFi on every train in the country and then just moan about how slow it is ;-)</p>",
        "id": 134665660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537960739
    },
    {
        "content": "<p>I'm in Germany now. But yes, there is pretty good wifi coverage on the high speed trains in NL, DE, and FR</p>",
        "id": 134665783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537960817
    },
    {
        "content": "<p>I don't have experience with other countries</p>",
        "id": 134665798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537960830
    }
]