[
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> woke up with a lot of homework... Does anyone knows whether basic users like me will see any difference after merging this?</p>",
        "id": 123127367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519890320
    },
    {
        "content": "<p>Are you referring to the commits in his own fork?</p>",
        "id": 123127532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519890692
    },
    {
        "content": "<p>To avoid ambiguity and for posterity: <a href=\"https://github.com/leanprover/lean/pull/1881\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1881\">https://github.com/leanprover/lean/pull/1881</a></p>",
        "id": 123127592,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519890799
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-email=\"sean.leather@gmail.com\" data-user-id=\"110045\">@Sean Leather</span></p>",
        "id": 123127763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891120
    },
    {
        "content": "<blockquote>\n<p>woke up with a lot of homework... Does anyone knows whether basic users like me will see any difference after merging this?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-email=\"patrickmassot@free.fr\" data-user-id=\"110031\">@Patrick Massot</span>: I'm guessing you're referring to Leo's comments, of which there were a lot.</p>",
        "id": 123127842,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519891284
    },
    {
        "content": "<p>Yes.</p>",
        "id": 123127851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891317
    },
    {
        "content": "<p>There are a lot of comments but there is a <em>lot</em> of code in this PR.</p>",
        "id": 123128035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891580
    },
    {
        "content": "<p>I'm also curious about this. <span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> , could you maybe discuss or point to a place where you discuss the purpose of the monad refactoring project? From what little I can garner from Leo's comments, it looks like you are maybe adding more advanced monad features from Haskell like monad transformers, the continuation monad and call/cc?</p>",
        "id": 123128054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519891627
    },
    {
        "content": "<p>I think you'll see a difference (hopefully for the best) if you use Lean to write programs. Otherwise, I don't think you'll see a difference</p>",
        "id": 123128087,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891683
    },
    {
        "content": "<p>It's very hard to resist going to Leo's most cryptic comment and add: \"Yeah, I wondered about that too\".</p>",
        "id": 123128109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891705
    },
    {
        "content": "<p>What do you mean \"write program\"? Write a tactic?</p>",
        "id": 123128115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891728
    },
    {
        "content": "<p>I think not much if you write tactics. More if you use Lean as a functional programming language (with or without much verification)</p>",
        "id": 123128135,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891791
    },
    {
        "content": "<p>Are there people doing that?</p>",
        "id": 123128181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891824
    },
    {
        "content": "<p>As in I/O?! <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span></p>",
        "id": 123128182,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519891852
    },
    {
        "content": "<p>On top of my head, there's me</p>",
        "id": 123128187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891876
    },
    {
        "content": "<p>I/O or other kind of code. There's a lot you can do with monads</p>",
        "id": 123128230,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891925
    },
    {
        "content": "<p>Why do you seem so scared of I/O?</p>",
        "id": 123128232,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519891952
    },
    {
        "content": "<p>Doesn't sound functional to me</p>",
        "id": 123128233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519891964
    },
    {
        "content": "<p>I meant, as in writing a “real” program that does I/O, not as in using the <code>io</code> monad... <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 123128234,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519891966
    },
    {
        "content": "<blockquote>\n<p>Doesn't sound functional to me</p>\n</blockquote>\n<p>Why not?</p>",
        "id": 123128241,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892008
    },
    {
        "content": "<blockquote>\n<p>Why do you seem so scared of I/O?</p>\n</blockquote>\n<p>Because of the meme that theorem-proving languages are generally only used for proofs and type-checking.</p>",
        "id": 123128285,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519892047
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Doesn't sound functional to me</p>\n</blockquote>\n<p>Why not?</p>\n</blockquote>\n<p>Every article I read about functional programming makes a huge fuss about i/o. That's probably what he means. In contrast to procedural languages, where the first program you ever see is \"print hello world\"</p>",
        "id": 123128287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519892056
    },
    {
        "content": "<p>I thought functional programming swears to be isolated from real world</p>",
        "id": 123128290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519892078
    },
    {
        "content": "<blockquote>\n<p>I thought functional programming swears to be isolated from real world</p>\n</blockquote>\n<p>That's a myth and a well-disproven one at that.</p>",
        "id": 123128301,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519892116
    },
    {
        "content": "<p>That was true of Haskell before they invented monads but the <code>io</code> monad makes I/O into a perfectly ok part of pure functional programming.</p>",
        "id": 123128303,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892135
    },
    {
        "content": "<p>Some people write OSs and web servers using purely functional programming. It looks pretty real to me and their users :)</p>",
        "id": 123128365,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892200
    },
    {
        "content": "<p>It's funny how, as you climb up the ladder of high-level programming languages, each level above seems to be less useful than the level you're on, at least until you understand it.</p>",
        "id": 123128373,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519892234
    },
    {
        "content": "<p>What's funny is right now I'm staring at my NodeJS I/O code which doesn't work. I don't know why it insisted trying to read all 29668 files in this directory before starting to work on the first one (and then FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory)</p>",
        "id": 123128376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519892254
    },
    {
        "content": "<p>Yeah! And as I climb up, I get nervous about climbing down. Everything makes sense up here!</p>",
        "id": 123128378,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892281
    },
    {
        "content": "<p>Yes, you can get complacent with all of the protection you have.</p>",
        "id": 123128420,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519892314
    },
    {
        "content": "<p>I love functional programming languages guys. They are brothers to mathematicians. We also think what we do is more powerful and more beautiful than what other do. And normal people think what we do is un-understandable and useless</p>",
        "id": 123128433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519892384
    },
    {
        "content": "<p>I have a friend whom i'm mentoring with Haskell. He works with JavaScript. He's more courageous than me. I don't think I'd want to go back to object oriented programming ... unless it was generated from afull functional specification</p>",
        "id": 123128434,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892400
    },
    {
        "content": "<p>And we're also insufferable when coming in contact with other communities</p>",
        "id": 123128479,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892451
    },
    {
        "content": "<p>In my case the trouble is not object oriented programming, it's asynchronicity</p>",
        "id": 123128484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519892479
    },
    {
        "content": "<p>\"You're getting into trouble because your pointers are aliasing each other? How quaint!\"</p>",
        "id": 123128485,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892480
    },
    {
        "content": "<p>Aliased pointers in JavaScript? <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 123128527,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519892524
    },
    {
        "content": "<p>Object oriented programming is supposed to be a solution (some might disagree <em>cough cough</em>) but asynchronicity is an actual programming challenge ... at the center of my research as it happens</p>",
        "id": 123128532,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892571
    },
    {
        "content": "<blockquote>\n<p>Aliased pointers in JavaScript? <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>References to objects, etc. I'm fairly sure they don't have a complete value semantics</p>",
        "id": 123128538,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892612
    },
    {
        "content": "<p>It's fun here but I need to take a shower, see you</p>",
        "id": 123128579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519892669
    },
    {
        "content": "<p>Alright! Let's be insufferable later! <span class=\"emoji emoji-1f601\" title=\"grin\">:grin:</span></p>",
        "id": 123128585,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519892704
    },
    {
        "content": "<p>I'll leave this link as a hint to our motivation... :P <a href=\"https://github.com/Kha/syntax/blob/master/macro.lean#L5\" target=\"_blank\" title=\"https://github.com/Kha/syntax/blob/master/macro.lean#L5\">https://github.com/Kha/syntax/blob/master/macro.lean#L5</a></p>",
        "id": 123131312,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519898297
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-email=\"sebasti@nullri.ch\" data-user-id=\"110024\">@Sebastian Ullrich</span> , is there some explanation I can read of what you did to <code>bind</code>?</p>",
        "id": 123134401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519904419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"scott@tqft.net\" data-user-id=\"110087\">@Scott Morrison</span> Does the test file help? <a href=\"https://github.com/leanprover/lean/blob/master/tests/lean/run/rebind_bind.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/tests/lean/run/rebind_bind.lean\">https://github.com/leanprover/lean/blob/master/tests/lean/run/rebind_bind.lean</a></p>",
        "id": 123134448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519904525
    },
    {
        "content": "<p>There are lots of places mathlib has broken, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">length_bind</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"n\">l</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 123134454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519904578
    },
    {
        "content": "<p>Where is says</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  l &gt;&gt;= f\nterm\n  f\nhas type\n  α → list β : Type (max u v)\nbut is expected to have type\n  α → list ?m_1 : Type u\n</pre></div>",
        "id": 123134460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519904609
    },
    {
        "content": "<p>Ah, <code>list.bind</code> is <code>protected</code> now, as it should have been from the beginning</p>",
        "id": 123134518,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519904702
    },
    {
        "content": "<p>So it should use ...?</p>",
        "id": 123134572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519904793
    },
    {
        "content": "<p>You can replace <code>bind</code> with <code>list.bind</code></p>",
        "id": 123134588,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519904839
    },
    {
        "content": "<p>thanks</p>",
        "id": 123134589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519904853
    },
    {
        "content": "<p>But I would argue that we should usually prefer using the generic operations (i.e. <code>bind</code>/<code>&gt;&gt;=</code> here) even if it means that alpha and beta have to live in the same universe in this case</p>",
        "id": 123134636,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519904952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"di.gama@gmail.com\" data-user-id=\"110049\">@Mario Carneiro</span> thoughts?</p>",
        "id": 123134637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519904960
    },
    {
        "content": "<p>The other place I'm seeing trouble from the monad refactoring is in mathlib's <code>data/encodable.lean</code>.</p>",
        "id": 123135235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519906148
    },
    {
        "content": "<p>where it looks like the problem is that there are too many <code>bind</code>s available</p>",
        "id": 123135285,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519906209
    },
    {
        "content": "<p>and the <code>do</code> notation is now failing as a result.</p>",
        "id": 123135288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519906227
    },
    {
        "content": "<p>I guess <code>option.bind</code> should be protected as well? Gaah.</p>",
        "id": 123136383,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519908427
    },
    {
        "content": "<p>The \"named\" bind is there in part exactly for this universe distinguishing thing. There are times when it matters, and you need the polymorphic version. For most of these operations, there is also a symbol name for them, which is preferred when universes don't matter or you are over a known structure.</p>",
        "id": 123140100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519914902
    },
    {
        "content": "<p>Yah, it's the curse of the monad. I'll mark <code>option.bind</code> as protected then.</p>",
        "id": 123140604,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519915460
    },
    {
        "content": "<p>I took the liberty of commenting on your pull request. Is this the best way to interact on this subject or should I stick to Zulip / Gitter?</p>",
        "id": 123157560,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519942458
    },
    {
        "content": "<p>That's fine, I just didn't get to it yet</p>",
        "id": 123159187,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519945235
    },
    {
        "content": "<p>No worries. I just don't want to be intrusive by commenting directly on github</p>",
        "id": 123159201,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519945269
    },
    {
        "content": "<p>I'm happy for any feedback by experienced Haskell programmers, since neither Leo nor me is one of them</p>",
        "id": 123159573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519945891
    },
    {
        "content": "<p>Excellent then :) I'll keep them coming. In passing, I am truly amazed by the language that you guys came up with. Learning Haskell was like a religious conversion for me and it ended a three year programming hiatus. Lean is comparing really well</p>",
        "id": 123159859,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519946436
    },
    {
        "content": "<p>Thank you <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 123160171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519947019
    }
]