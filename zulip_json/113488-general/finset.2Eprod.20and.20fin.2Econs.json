[
    {
        "content": "<p>I'm trying to formulate a <code>simp</code> lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">prod_univ_cons</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>and get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"err\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 200635557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591938638
    },
    {
        "content": "<p>It seems that Lean can't unify <code>(λ _, β) i</code> with <code>β</code>. Is there any way to add this lemma without adding a non-dependent version of <code>fin.cons</code>?</p>",
        "id": 200635567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591938704
    },
    {
        "content": "<p>give it the expected type</p>",
        "id": 200636602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591940553
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">prod_univ_cons</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200636608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591940582
    },
    {
        "content": "<p><code>fin.cons</code> should be <code>@[elab_as_eliminator]</code></p>",
        "id": 200636615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591940623
    },
    {
        "content": "<p>Do you mean <code>local attribute [elab_as_eliminator] fin.cons</code>?</p>",
        "id": 200637018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591941413
    },
    {
        "content": "<p>If I add <code>@[elab_as_eliminator]</code> to the definition, the next few lemmas fail.</p>",
        "id": 200637023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591941434
    },
    {
        "content": "<p>I mean global <code>@[elab_as_eliminator]</code></p>",
        "id": 200637556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591942282
    },
    {
        "content": "<p>Oof, yeah these are messy. I think either <code>cons</code> should take an explicit motive argument, or it should be nondependent</p>",
        "id": 200637722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591942508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> you use <code>fin.cons</code> a lot in <code>multilinear</code> maps. What's your experience? How often did you hit something like the issue described above?</p>",
        "id": 200637786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591942614
    },
    {
        "content": "<p>Isn't that lemma already there?</p>",
        "id": 200640229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591946032
    },
    {
        "content": "<p>I think I used the sum version last week</p>",
        "id": 200640236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591946040
    },
    {
        "content": "<p>Nevermind, I was confusing it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.prod_univ_succ/src\">src#fin.prod_univ_succ</a></p>",
        "id": 200640453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591946215
    },
    {
        "content": "<p>Yes, I encountered several times the issue that  <code>(λ _, β) i</code> and <code>β</code> don't always unify. Since <code>fin.cons</code> doesn't have too many implicit arguments, it wasn't too painful to provide explicitly the type to the <code>@</code> version, though, and to add type annotations where necessary.</p>",
        "id": 200641449,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591947196
    }
]