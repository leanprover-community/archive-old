[
    {
        "content": "<p>It is annoying that in the hott3-mode you cannot freely use  <code>theorem</code>, <code>lemma</code>, <code>axiom</code> because no conclusion is of type <code>Prop</code> (in the sense of <code>Sort 0</code>), so Lean3 will from time to time produce a <code>code generation failed, VM does not have code for ...</code> message.  For me, labelling facts as Theorems, Lemmas, Axioms and so on is a useful way to organise code and make it more readable. </p>\n<p>I am wondering whether one can redefine their usage, maybe in the <code>hott</code> attribute, in the following way: You are allowed to use them if the conclusion is of type <code>Prop</code> in the HoTT sense, or if the type satisfies <code>is_prop</code> (maybe relying on the class-instance mechanism). Is there anything which prevents you from doing it, like protected names etc? I did not do much meta-programming up to now, so don't want to start something which is hopeless anyway.</p>\n<p>Here is also a related and more immediate  problem: At one point in my code Lean complained that <code>VM does not have code for 'hott.trunc.is_trunc_trunc'</code>. Now, <code>hott.trunc.is_trunc_trunc</code> is declared as an <code>axiom</code> in <code>init.hit</code> of the hott3 library.  Shouldn't that be changed to a <code>constant</code>, as it was in the Lean2 Hott library? Or is there a reason for calling it an <code>axiom</code> now? If not, what's the best way to correct it? If I change it in my <code>init.hit</code> file, do I have to recompile the hott3 library? And shall I raise an issue in GiTHub?</p>",
        "id": 210248679,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1600255966
    },
    {
        "content": "<p><code>axiom</code> and <code>constant</code> are synonyms in Lean 3</p>",
        "id": 210250027,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1600256985
    },
    {
        "content": "<p>It's been a while, but can't you use <code>noncomputable theory</code> (after the <code>import</code>s) to ignore the code generation error?</p>",
        "id": 210250095,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1600257021
    },
    {
        "content": "<p>Neither adding <code>noncomputable theory</code> at the top of the file nor <code>noncomputable</code> in front of the <code>def</code> removes the code generation error. Is that a problem? Or does the <code>noncomputable</code> just prevent Lean to complain on (noncomputable) future uses of the definition?</p>",
        "id": 210275689,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1600268801
    },
    {
        "content": "<p>It is not easy to redefine what <code>def</code> does vs <code>lemma</code>/<code>theorem</code>. That is hard-coded in C++, so that would require a change in Lean itself. I agree it is annoying that you have to call everything <code>def</code> instead of freely choosing <code>lemma</code>/<code>theorem</code>.</p>\n<p>About the VM error: I don't know what causes that. Writing <code>hott_theory</code> automatically marks that file as <code>noncomputable theory</code>, and that should solve it. I remember that I've seen that error for incomplete definitions, or definitions with also some other error. If that was not the case, could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 210301636,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600281062
    },
    {
        "content": "<p>When trying to minimise the code and erasing some <code>let ... in</code> the VM error vanished. No explanation for this, but who cares ... Your hint helped, and I will live with <code>def</code>.</p>",
        "id": 210421756,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1600363372
    }
]