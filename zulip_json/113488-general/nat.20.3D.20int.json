[
    {
        "content": "<p>Is <code>nat = int</code> consistent with Lean?</p>",
        "id": 135492419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539113091
    },
    {
        "content": "<p>yes</p>",
        "id": 135492660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539113365
    },
    {
        "content": "<p>but it will make the VM not like you</p>",
        "id": 135492670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539113382
    },
    {
        "content": "<p>good lord</p>",
        "id": 135492671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539113382
    },
    {
        "content": "<p>so how can a constructor of an inductive type construct itself...</p>",
        "id": 135492701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539113405
    },
    {
        "content": "<p>Equality of types is terrifying. I just stick to equality of terms.</p>",
        "id": 135492733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539113412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>axiom nat_eq_int : nat = int\n\n#eval cast nat_eq_int.symm (-5) -- 2147483643\n</pre></div>",
        "id": 135492747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539113439
    },
    {
        "content": "<p>I am not sure I have a good feeling as to what equality of types means.</p>",
        "id": 135492754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539113452
    },
    {
        "content": "<p><code>equiv</code> of types -- that I understand.</p>",
        "id": 135492774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539113475
    },
    {
        "content": "<p>Unfortunately, as a cast off from HoTT, univalence is consistent in some weak forms</p>",
        "id": 135492840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539113537
    },
    {
        "content": "<p>but the VM assumes something much stricter, in order for type erasure to be sound</p>",
        "id": 135492856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539113558
    },
    {
        "content": "<p>So an interesting thing happened in my lecture today. It was an interactive lecture and the students could vote on the questions I was asking, on their phones. And I asked them if \"not P\" was equal to \"P implies false\" and a lot of them said that these things were not equal.</p>",
        "id": 135493250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539113977
    },
    {
        "content": "<p>I'm not surprised</p>",
        "id": 135493310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539114016
    },
    {
        "content": "<p>Did you teach them the truth table definition of implies?</p>",
        "id": 135493313,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539114020
    },
    {
        "content": "<p>But they were all happy that these things were equivalent. I didn't tell them Lean's definition of \"not P\", I was doing basic propositional calculus, so the definition of \"not\" was \"not false = true\" and \"not true = false\" and that's it</p>",
        "id": 135493317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114027
    },
    {
        "content": "<p>Did you try on a room full of professional mathematicians next?</p>",
        "id": 135493324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539114037
    },
    {
        "content": "<p>But this is somehow the same issue.</p>",
        "id": 135493335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114047
    },
    {
        "content": "<p>Two propositions can be equivalent, but it's a bit weird saying they are equal.</p>",
        "id": 135493352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114069
    },
    {
        "content": "<p>Especially when I told them that 2+2=4 and Fermat's Last Theorem were both true, and asked them if they thought that they were hence equal.</p>",
        "id": 135493360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114089
    },
    {
        "content": "<p>aha, here's an example of a lie proposition from that axiom:</p>\n<div class=\"codehilite\"><pre><span></span>axiom nat_eq_int : nat = int\ndef lie : bool := cast nat_eq_int.symm (-int.of_nat (2^31)) &lt; 0\ntheorem not_lying : lie = ff := rfl\n#eval lie -- tt\n</pre></div>",
        "id": 135493365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114097
    },
    {
        "content": "<p>This is bad because you can make the VM crash</p>",
        "id": 135493376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114118
    },
    {
        "content": "<p>That's not bad -- that just means that you shouldn't rely on the VM</p>",
        "id": 135493426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114134
    },
    {
        "content": "<p>If the kernel's happy, I'm happy</p>",
        "id": 135493428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114141
    },
    {
        "content": "<p>It means you shouldn't introduce axioms and then rely on the VM.</p>",
        "id": 135493435,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539114162
    },
    {
        "content": "<p>But you shouldn't introduce axioms and rely on the kernel either. So I don't think that's a problem.</p>",
        "id": 135493446,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539114190
    },
    {
        "content": "<p>it means that some axioms are consistent with the VM and others aren't, even if they are consistent with lean itself</p>",
        "id": 135493448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114199
    },
    {
        "content": "<p>Mario do you _know_ that nat = int is consistent with Lean (assuming maths is consistent etc)</p>",
        "id": 135493466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114228
    },
    {
        "content": "<p>I have strong evidence in the direction of a proof</p>",
        "id": 135493513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114257
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 135493517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114264
    },
    {
        "content": "<p>the more general statement is that two types with the same cardinality are consistently equal</p>",
        "id": 135493521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114279
    },
    {
        "content": "<p>Aah I see equiv has popped up again</p>",
        "id": 135493532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114300
    },
    {
        "content": "<p>maybe we should add that as an axiom</p>",
        "id": 135493547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114310
    },
    {
        "content": "<p>just like how we added propext as an axiom</p>",
        "id": 135493553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114315
    },
    {
        "content": "<p>But type erasure, used in the VM, assumes that the only provable equalities are between objects with the same runtime representation</p>",
        "id": 135493557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114319
    },
    {
        "content": "<p>Is <code>forall X Y : Type, equiv X Y iff X = Y</code> consistent with Lean?</p>",
        "id": 135493564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114338
    },
    {
        "content": "<p>which has to do with the other thread</p>",
        "id": 135493569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114345
    },
    {
        "content": "<p><code>Type u</code> even</p>",
        "id": 135493573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114348
    },
    {
        "content": "<p>It doesn't type check</p>",
        "id": 135493577,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539114356
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 135493622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114367
    },
    {
        "content": "<p>oh</p>",
        "id": 135493633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114376
    },
    {
        "content": "<p>nonempty (equiv X Y) iff X = Y or whatever</p>",
        "id": 135493636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114377
    },
    {
        "content": "<p>use <code>\\to</code></p>",
        "id": 135493641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114383
    },
    {
        "content": "<p>You have to be careful not to run afoul of the counterexample to HoTT</p>",
        "id": 135493676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114453
    },
    {
        "content": "<p>Consider the <code>bnot : bool -&gt; bool</code> function, which swaps the two values. This is provably an equivalence in HoTT, so from univalence we get an equality <code>ua bnot : bool = bool</code>. It is provable in HoTT that <code>cast (ua bnot) tt = ff</code>, but <code>cast rfl tt = tt</code> and hence <code>ua bnot != rfl</code>, contradicting proof irrelevance</p>",
        "id": 135493788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114557
    },
    {
        "content": "<p>but you can't prove in lean that <code>cast (ua bnot) tt = ff</code> right</p>",
        "id": 135493870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114632
    },
    {
        "content": "<p>In HoTT, this is provable because we know <code>ua</code> is the inverse of the natural function <code>A = B -&gt; A ~= B</code></p>",
        "id": 135493930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> this should sort out your <code>heq</code> problems:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">for_patrick</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n</pre></div>",
        "id": 135493990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114746
    },
    {
        "content": "<p>and apparently Mario thinks it's consistent, but just be careful with the VM OK?</p>",
        "id": 135493999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114764
    },
    {
        "content": "<p>I strongly recommend against any axioms that don't obey type erasure</p>",
        "id": 135494020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114790
    },
    {
        "content": "<p>I don't think it helps. Patrick knows his Types are equal, he just can't <code>rw</code> using that equality.</p>",
        "id": 135494022,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539114794
    },
    {
        "content": "<p>We all want the same tactic: <code>rw_that_just_works</code></p>",
        "id": 135494056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539114827
    },
    {
        "content": "<p>this is a difficult research question</p>",
        "id": 135494119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114857
    },
    {
        "content": "<p>the problem is always type dependency</p>",
        "id": 135494128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539114868
    },
    {
        "content": "<p>What is type erasure?</p>",
        "id": 135494130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539114874
    },
    {
        "content": "<blockquote>\n<p>this is a difficult research question</p>\n</blockquote>\n<p>Mathematicians can do it in their heads!</p>",
        "id": 135494140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539114889
    },
    {
        "content": "<p>Then do you have example where all those <code>subst</code> or <code>generalize</code> tricks works? I haven't been able to find any math example</p>",
        "id": 135494184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539114960
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/Continuous.20Functions.20Preserve.20Limits/near/134675116\" title=\"#narrow/stream/116395-maths/subject/Continuous.20Functions.20Preserve.20Limits/near/134675116\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/Continuous.20Functions.20Preserve.20Limits/near/134675116</a></p>",
        "id": 135494327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539115083
    },
    {
        "content": "<p>Rohan wanted to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">x_0,x_1,x_2...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span></span></span></span> tended to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">x_1,x_2,x_3,...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span><span class=\"mord mathrm\">.</span></span></span></span> also tended to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span>. We formalised the change of variables using filters and then Kenny proved it using <code>subst</code></p>",
        "id": 135494366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539115133
    },
    {
        "content": "<p>the solution of course is extensional type theory but I might be contractually obligated to say that's silly</p>",
        "id": 135494504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539115239
    },
    {
        "content": "<p>was OTT (<a href=\"https://github.com/leanprover/lean/issues/654\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/654\">https://github.com/leanprover/lean/issues/654</a>) no good?</p>",
        "id": 135494641,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539115378
    },
    {
        "content": "<p>One thing I've wondered for a while is why does this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">ℕ⟩</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 135494975,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539115676
    },
    {
        "content": "<p>there is a kernel reduction rule <code>eq.rec e h ~&gt; e</code> when <code>h : a = a</code>. Intuitively this is justified by using proof irrelevance to replace <code>h</code> with <code>rfl</code> and then iota reducing</p>",
        "id": 135495482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539116104
    },
    {
        "content": "<p>Chris it looks like it's about time you learn C++</p>",
        "id": 135495777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539116304
    },
    {
        "content": "<p>or type theory</p>",
        "id": 135495803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539116327
    },
    {
        "content": "<p>Kevin means learning type theory by reading C++ code of the Lean kernel</p>",
        "id": 135496147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116573
    },
    {
        "content": "<p>That's the proper way for brave men</p>",
        "id": 135496158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539116582
    },
    {
        "content": "<p>I should note that I have written a paper on this topic and I still haven't fully understood the kernel of lean</p>",
        "id": 135496744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539117024
    },
    {
        "content": "<p>it is much easier to read the reference typecheckers like trepplein</p>",
        "id": 135496776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539117059
    }
]