[
    {
        "content": "<p>I have some lemmas about integration by substitution over infinite intervals: things like making the change <code>u = x^2</code> in an integral over <code>x in Ioi 0</code>. I'd like to make a PR to add this to the library, but I'm not sure what file this stuff should go in -- can I ask for some suggestions?</p>\n<p>(The motivation here is evaluating the Gamma function at 1/2, reducing it to the computation of the Gaussian integral <code>exp(-x^2)</code> that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has added.)</p>",
        "id": 309766663,
        "sender_full_name": "David Loeffler",
        "timestamp": 1668442291
    },
    {
        "content": "<p>Could you post the list of imports you need?</p>",
        "id": 310154146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668502357
    },
    {
        "content": "<p>We have the folowing python script (I think by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> )</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n\n<span class=\"k\">with</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://leanprover-community.github.io/mathlib_docs/import.gexf\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">read_gexf</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># where you need the lemma, and which files it needs</span>\n<span class=\"n\">needed_in</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'mathlib:algebra.gcd_monoid.basic'</span><span class=\"p\">,)</span>\n<span class=\"n\">needs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'mathlib:algebra.gcd_monoid.basic'</span><span class=\"p\">,</span> <span class=\"s1\">'mathlib:ring_theory.coprime.basic'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">ancestors</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">needs</span><span class=\"p\">])</span> <span class=\"o\">&amp;</span>\n      <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">descendants</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">needed_in</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>to find where to place lemmas (of course it doesn't know anything about the mathematics, it just looks at the imports).</p>",
        "id": 310155658,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668502872
    },
    {
        "content": "<p>Hi guys,  sorry I missed your reply until now (I should probably set up notifications in zulip or something). I guess I was more asking \"where is the morally / aesthetically right place to put X\", rather than \"where can I get away with putting X without creating circular imports\". I ended up putting the lemmas in two batches, first <a href=\"https://github.com/leanprover-community/mathlib/pull/17540\">#17540</a> (now merged) and second <a href=\"https://github.com/leanprover-community/mathlib/pull/17542\">#17542</a> (awaiting review).</p>",
        "id": 311170805,
        "sender_full_name": "David Loeffler",
        "timestamp": 1668968721
    }
]