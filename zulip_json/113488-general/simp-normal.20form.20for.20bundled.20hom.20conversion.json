[
    {
        "content": "<p>Which of these should be the simp-normal forms for <code>ring_equiv.to_ring_hom</code> and <code>ring_equiv.to_add_equiv</code>?</p>",
        "id": 226552455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499023
    },
    {
        "content": "<p>\\poll The simp-normal forms should be:</p>",
        "id": 226552505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499050
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226552728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499169
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226552764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499185
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226552765,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613499186
    },
    {
        "content": "<p>/poll The simp-normal forms should be:<br>\n<code>(↑f : R →+* S)</code> and <code>(↑f : R ≃+ S)</code><br>\n<code>f.to_ring_hom</code> and <code>f.to_add_equiv</code></p>",
        "id": 226552809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499205
    },
    {
        "content": "<p>This question is really about _all_ the simple bundled maps, as right now it's all over the place.</p>",
        "id": 226552980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499265
    },
    {
        "content": "<p>My choice is made purely for aesthetic reasons. What other reasons should come into play here?</p>",
        "id": 226552994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613499273
    },
    {
        "content": "<p>If coercions are simp-normal, then sometimes you have to write <code>(f : @a_really_nasty_type_that_doesnt_elaborate _ _ ≃+ S)</code> instead of <code>f.to_add_equiv</code></p>",
        "id": 226553089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499324
    },
    {
        "content": "<p>Essentially, the coercion will almost always look nicer in the goal view, but the <code>to_*</code> version will almost always be easier to write</p>",
        "id": 226553305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499424
    },
    {
        "content": "<p>Can you think of an exmaple where <code>(f : _ ≃+ S)</code> doesn't elaborate properly?</p>",
        "id": 226553334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499439
    },
    {
        "content": "<p>Sometimes <code>S</code> is also a mouthful</p>",
        "id": 226553431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499465
    },
    {
        "content": "<p><code>(f : _ ≃+ _)</code></p>",
        "id": 226553479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499476
    },
    {
        "content": "<p>That doesn't work for lots of cases</p>",
        "id": 226553616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499497
    },
    {
        "content": "<p>Try expressing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.to_ring_hom_comp_symm_to_ring_hom\">docs#ring_equiv.to_ring_hom_comp_symm_to_ring_hom</a> using that notation</p>",
        "id": 226553709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499516
    },
    {
        "content": "<p>I'm sure you're right, but I think we should have an example we can play around with</p>",
        "id": 226553718,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499517
    },
    {
        "content": "<p>Ok, I'll try :)</p>",
        "id": 226553884,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_ring_hom_comp_symm_to_ring_hom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">↑</span><span class=\"n\">e.symm</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226553912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">e.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→+*</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 226554344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499733
    },
    {
        "content": "<p>Right, but you still had to pass R and S explicitly</p>",
        "id": 226554396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613499766
    },
    {
        "content": "<p>true</p>",
        "id": 226554421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613499774
    },
    {
        "content": "<p>But I think that passing explicit type ascriptions often makes code easier to read!</p>",
        "id": 226556547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613500711
    },
    {
        "content": "<p>My first impression would also be <code>(f : R →+* S)</code>, but after the discussion I'm not so sure anymore...</p>",
        "id": 226556625,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613500747
    },
    {
        "content": "<p>Added a third option to the poll, we could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">ring_equiv.to_</span><span class=\"bp\">«≃+»</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃+*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_add_equiv</span>\n</code></pre></div>",
        "id": 226557785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613501323
    },
    {
        "content": "<p>Too many scary brackets!</p>",
        "id": 226596017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613519526
    },
    {
        "content": "<p>I've done some initial cleanups of lemmas about coercions in <a href=\"https://github.com/leanprover-community/mathlib/issues/6268\">#6268</a>. Once that's in, I'll try a follow-up PR to change the simp-normal form to what the consensus seems to be in this thread</p>",
        "id": 226938156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613726424
    }
]